{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotationLocationCheck.java",
  "functionName": "checkAnnotations",
  "functionId": "checkAnnotations___modifierNode-DetailAST__correctIndentation-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
  "functionStartLine": 332,
  "functionEndLine": 348,
  "numCommitsSeen": 75,
  "timeTaken": 1846,
  "changeHistory": [
    "74741082da936e3c0c8dfcd3104d8fdf235290eb",
    "9c70477fb449f50ca6ad54995ce0f1855d48e450",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
    "09a7ca60414ea04b64f45bb190eaa26c767086be",
    "93f02998d44eacb037b6bf206c4e9a14d1dd5da6",
    "02655f16a014fcf483ed29eaa134a3ef109c1bbf"
  ],
  "changeHistoryShort": {
    "74741082da936e3c0c8dfcd3104d8fdf235290eb": "Ybodychange",
    "9c70477fb449f50ca6ad54995ce0f1855d48e450": "Ymultichange(Yparameterchange,Ybodychange)",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "09a7ca60414ea04b64f45bb190eaa26c767086be": "Ybodychange",
    "93f02998d44eacb037b6bf206c4e9a14d1dd5da6": "Yfilerename",
    "02655f16a014fcf483ed29eaa134a3ef109c1bbf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "74741082da936e3c0c8dfcd3104d8fdf235290eb": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7768: Update AbstractChecks to log DetailAST - AnnotationLocation\n",
      "commitDate": "16/03/20 9:50 AM",
      "commitName": "74741082da936e3c0c8dfcd3104d8fdf235290eb",
      "commitAuthor": "malintha1996",
      "commitDateOld": "10/01/20 7:54 PM",
      "commitNameOld": "1196148e5a316405870b93e2f91a1948fe087215",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 65.54,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n         DetailAST annotation \u003d modifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n-                log(annotation.getLineNo(),\n+                log(annotation,\n                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n             else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n-                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n+                log(annotation, MSG_KEY_ANNOTATION_LOCATION,\n                     getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n        DetailAST annotation \u003d modifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation,\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation, MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
      "extendedDetails": {}
    },
    "9c70477fb449f50ca6ad54995ce0f1855d48e450": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #4055: Perform refactoring of AnnotationLocationCheck to increase code readability\n",
      "commitDate": "22/03/17 12:38 PM",
      "commitName": "9c70477fb449f50ca6ad54995ce0f1855d48e450",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #4055: Perform refactoring of AnnotationLocationCheck to increase code readability\n",
          "commitDate": "22/03/17 12:38 PM",
          "commitName": "9c70477fb449f50ca6ad54995ce0f1855d48e450",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 54.21,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    private void checkAnnotations(DetailAST modifierNode, int correctLevel) {\n+    private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n         DetailAST annotation \u003d modifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n                 log(annotation.getLineNo(),\n                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n-            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n+            else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n                 log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n-                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n+                    getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n        DetailAST annotation \u003d modifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
          "extendedDetails": {
            "oldValue": "[modifierNode-DetailAST, correctLevel-int]",
            "newValue": "[modifierNode-DetailAST, correctIndentation-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #4055: Perform refactoring of AnnotationLocationCheck to increase code readability\n",
          "commitDate": "22/03/17 12:38 PM",
          "commitName": "9c70477fb449f50ca6ad54995ce0f1855d48e450",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 54.21,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    private void checkAnnotations(DetailAST modifierNode, int correctLevel) {\n+    private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n         DetailAST annotation \u003d modifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n                 log(annotation.getLineNo(),\n                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n-            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n+            else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n                 log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n-                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n+                    getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkAnnotations(DetailAST modifierNode, int correctIndentation) {\n        DetailAST annotation \u003d modifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d correctIndentation \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), correctIndentation);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, annotation, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n+    private void checkAnnotations(DetailAST modifierNode, int correctLevel)\n     {\n-        DetailAST annotation \u003d aModifierNode.getFirstChild();\n+        DetailAST annotation \u003d modifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n                 log(annotation.getLineNo(),\n                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n-            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n+            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                 log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n-                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n+                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkAnnotations(DetailAST modifierNode, int correctLevel)\n    {\n        DetailAST annotation \u003d modifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
          "extendedDetails": {
            "oldValue": "[aModifierNode-DetailAST, aCorrectLevel-int]",
            "newValue": "[modifierNode-DetailAST, correctLevel-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n+    private void checkAnnotations(DetailAST modifierNode, int correctLevel)\n     {\n-        DetailAST annotation \u003d aModifierNode.getFirstChild();\n+        DetailAST annotation \u003d modifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n                 log(annotation.getLineNo(),\n                         MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n-            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n+            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                 log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n-                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n+                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkAnnotations(DetailAST modifierNode, int correctLevel)\n    {\n        DetailAST annotation \u003d modifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d correctLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "09a7ca60414ea04b64f45bb190eaa26c767086be": {
      "type": "Ybodychange",
      "commitMessage": "Issue #537 refactoring: remove copy-paste of messages from UTests\n",
      "commitDate": "28/12/14 3:14 PM",
      "commitName": "09a7ca60414ea04b64f45bb190eaa26c767086be",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "11/11/14 4:48 PM",
      "commitNameOld": "93f02998d44eacb037b6bf206c4e9a14d1dd5da6",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.93,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n     {\n         DetailAST annotation \u003d aModifierNode.getFirstChild();\n \n         while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             final boolean hasParameters \u003d isParameterized(annotation);\n \n             if (!isCorrectLocation(annotation, hasParameters)) {\n                 log(annotation.getLineNo(),\n-                    \"annotation.location.alone\", getAnnotationName(annotation));\n+                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n             }\n             else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n-                log(annotation.getLineNo(), \"annotation.location\",\n+                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                     getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n             }\n             annotation \u003d annotation.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n    {\n        DetailAST annotation \u003d aModifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                        MSG_KEY_ANNOTATION_LOCATION_ALONE, getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), MSG_KEY_ANNOTATION_LOCATION,\n                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
      "extendedDetails": {}
    },
    "93f02998d44eacb037b6bf206c4e9a14d1dd5da6": {
      "type": "Yfilerename",
      "commitMessage": "AnnotationLocationCheck was moved from javadoc to annotation package, changes in xdoc for default value, #356\n",
      "commitDate": "11/11/14 4:48 PM",
      "commitName": "93f02998d44eacb037b6bf206c4e9a14d1dd5da6",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "11/11/14 7:05 AM",
      "commitNameOld": "7b6785343e306845f432154a1a5026ad25306226",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n    {\n        DetailAST annotation \u003d aModifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                    \"annotation.location.alone\", getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), \"annotation.location\",\n                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AnnotationLocationCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java"
      }
    },
    "02655f16a014fcf483ed29eaa134a3ef109c1bbf": {
      "type": "Yintroduced",
      "commitMessage": "AnnotationLocationCheck fixed. #302\n",
      "commitDate": "19/10/14 8:53 AM",
      "commitName": "02655f16a014fcf483ed29eaa134a3ef109c1bbf",
      "commitAuthor": "maxvetrenko",
      "diff": "@@ -0,0 +1,18 @@\n+    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n+    {\n+        DetailAST annotation \u003d aModifierNode.getFirstChild();\n+\n+        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+            final boolean hasParameters \u003d isParameterized(annotation);\n+\n+            if (!isCorrectLocation(annotation, hasParameters)) {\n+                log(annotation.getLineNo(),\n+                    \"annotation.location.alone\", getAnnotationName(annotation));\n+            }\n+            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n+                log(annotation.getLineNo(), \"annotation.location\",\n+                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n+            }\n+            annotation \u003d annotation.getNextSibling();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)\n    {\n        DetailAST annotation \u003d aModifierNode.getFirstChild();\n\n        while (annotation !\u003d null \u0026\u0026 annotation.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            final boolean hasParameters \u003d isParameterized(annotation);\n\n            if (!isCorrectLocation(annotation, hasParameters)) {\n                log(annotation.getLineNo(),\n                    \"annotation.location.alone\", getAnnotationName(annotation));\n            }\n            else if (annotation.getColumnNo() !\u003d aCorrectLevel \u0026\u0026 !hasNodeBefore(annotation)) {\n                log(annotation.getLineNo(), \"annotation.location\",\n                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);\n            }\n            annotation \u003d annotation.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AnnotationLocationCheck.java"
    }
  }
}