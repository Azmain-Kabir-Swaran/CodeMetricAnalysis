{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VisibilityModifierCheck.java",
  "functionName": "findMatchingAnnotation",
  "functionId": "findMatchingAnnotation___variableDef-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
  "functionStartLine": 1053,
  "functionEndLine": 1073,
  "numCommitsSeen": 115,
  "timeTaken": 1613,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "c4a7d06206d86f52665eae47af4db28dc59d93a3",
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "c4a7d06206d86f52665eae47af4db28dc59d93a3": "Yrename",
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "07/05/18 6:56 PM",
      "commitNameOld": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 27.11,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n         DetailAST matchingAnnotation \u003d null;\n \n-        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n+        final DetailAST holder \u003d AnnotationUtil.getAnnotationHolder(variableDef);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST ast \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(ast.getNextSibling()).getText();\n                 if (ignoreAnnotationCanonicalNames.contains(name)\n                          || ignoreAnnotationShortNames.contains(name)) {\n                     matchingAnnotation \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return matchingAnnotation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n        DetailAST matchingAnnotation \u003d null;\n\n        final DetailAST holder \u003d AnnotationUtil.getAnnotationHolder(variableDef);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST ast \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(ast.getNextSibling()).getText();\n                if (ignoreAnnotationCanonicalNames.contains(name)\n                         || ignoreAnnotationShortNames.contains(name)) {\n                    matchingAnnotation \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return matchingAnnotation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "23/09/15 12:35 PM",
      "commitNameOld": "78cec4f822cd966a1293ce0c743d4514517385dc",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 13.22,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n         DetailAST matchingAnnotation \u003d null;\n \n         final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                final DetailAST at \u003d child.getFirstChild();\n+                final DetailAST ast \u003d child.getFirstChild();\n                 final String name \u003d\n-                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n+                    FullIdent.createFullIdent(ast.getNextSibling()).getText();\n                 if (ignoreAnnotationCanonicalNames.contains(name)\n                          || ignoreAnnotationShortNames.contains(name)) {\n                     matchingAnnotation \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return matchingAnnotation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n        DetailAST matchingAnnotation \u003d null;\n\n        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST ast \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(ast.getNextSibling()).getText();\n                if (ignoreAnnotationCanonicalNames.contains(name)\n                         || ignoreAnnotationShortNames.contains(name)) {\n                    matchingAnnotation \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return matchingAnnotation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "c4a7d06206d86f52665eae47af4db28dc59d93a3": {
      "type": "Yrename",
      "commitMessage": "Rename non-boolean method starting with question word. #1555\n\nFixes `NonBooleanMethodNameMayNotStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports non-boolean methods whose names start with a question word. Non-boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "25/08/15 4:40 AM",
      "commitName": "c4a7d06206d86f52665eae47af4db28dc59d93a3",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/08/15 4:32 AM",
      "commitNameOld": "3b452a2e88d0cb670be19818dbd8166335d65884",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-    private DetailAST containsMatchingAnnotation(DetailAST variableDef) {\n+    private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n         DetailAST matchingAnnotation \u003d null;\n \n         final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST at \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(at.getNextSibling()).getText();\n                 if (ignoreAnnotationCanonicalNames.contains(name)\n                          || ignoreAnnotationShortNames.contains(name)) {\n                     matchingAnnotation \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return matchingAnnotation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailAST findMatchingAnnotation(DetailAST variableDef) {\n        DetailAST matchingAnnotation \u003d null;\n\n        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (ignoreAnnotationCanonicalNames.contains(name)\n                         || ignoreAnnotationShortNames.contains(name)) {\n                    matchingAnnotation \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return matchingAnnotation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {
        "oldValue": "containsMatchingAnnotation",
        "newValue": "findMatchingAnnotation"
      }
    },
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac": {
      "type": "Yintroduced",
      "commitMessage": "Visibility Modifier Check, ignore annotated fields\n",
      "commitDate": "07/03/15 5:14 PM",
      "commitName": "5f68bb50fd191fec409f5edb90755a18fce3e0ac",
      "commitAuthor": "alexkravin",
      "diff": "@@ -0,0 +1,24 @@\n+    private DetailAST containsMatchingAnnotation(DetailAST variableDef)\n+    {\n+        DetailAST matchingAnnotation \u003d null;\n+\n+        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n+\n+        for (DetailAST child \u003d holder.getFirstChild();\n+            child !\u003d null; child \u003d child.getNextSibling())\n+        {\n+            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+                final DetailAST at \u003d child.getFirstChild();\n+                final String name \u003d\n+                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n+                if (ignoreAnnotationCanonicalNames.contains(name)\n+                         || ignoreAnnotationShortNames.contains(name))\n+                {\n+                    matchingAnnotation \u003d child;\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return matchingAnnotation;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailAST containsMatchingAnnotation(DetailAST variableDef)\n    {\n        DetailAST matchingAnnotation \u003d null;\n\n        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(variableDef);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling())\n        {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (ignoreAnnotationCanonicalNames.contains(name)\n                         || ignoreAnnotationShortNames.contains(name))\n                {\n                    matchingAnnotation \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return matchingAnnotation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java"
    }
  }
}