{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockTagUtil.java",
  "functionName": "extractBlockTags",
  "functionId": "extractBlockTags___lines-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/BlockTagUtil.java",
  "functionStartLine": 56,
  "functionEndLine": 95,
  "numCommitsSeen": 8,
  "timeTaken": 995,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "d28a60c5529e182e1cdaea184415181e00b70d2a"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "d28a60c5529e182e1cdaea184415181e00b70d2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static List\u003cTagInfo\u003e extractBlockTags(String... lines) {\n        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n\n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            // Starting lines of a comment have a different first line pattern.\n            final boolean isFirstLine \u003d i \u003d\u003d 0;\n            final Pattern pattern;\n            if (isFirstLine) {\n                pattern \u003d BLOCK_TAG_PATTERN_FIRST_LINE;\n            }\n            else {\n                pattern \u003d BLOCK_TAG_PATTERN;\n            }\n\n            final String line \u003d lines[i];\n            final Matcher tagMatcher \u003d pattern.matcher(line);\n\n            if (tagMatcher.find()) {\n                final String tagName \u003d tagMatcher.group(1);\n\n                // offset of one for the @ character\n                final int colNum \u003d tagMatcher.start(1) - 1;\n                final int lineNum \u003d i + 1;\n\n                final String remainder \u003d line.substring(tagMatcher.end(1));\n                String tagValue \u003d remainder.trim();\n\n                // Handle the case where we\u0027re on the last line of a Javadoc comment.\n                if (tagValue.endsWith(JAVADOC_CLOSING_TAG)) {\n                    final int endIndex \u003d tagValue.length() - JAVADOC_CLOSING_TAG.length();\n                    tagValue \u003d tagValue.substring(0, endIndex).trim();\n                }\n\n                final LineColumn position \u003d new LineColumn(lineNum, colNum);\n                tags.add(new TagInfo(tagName, tagValue, position));\n            }\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/BlockTagUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/BlockTagUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/BlockTagUtil.java"
      }
    },
    "d28a60c5529e182e1cdaea184415181e00b70d2a": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2840: UnusedImportsCheck - process javadoc tags that span lines\n",
      "commitDate": "10/07/17 5:35 PM",
      "commitName": "d28a60c5529e182e1cdaea184415181e00b70d2a",
      "commitAuthor": "Nathan Naze",
      "diff": "@@ -0,0 +1,40 @@\n+    public static List\u003cTagInfo\u003e extractBlockTags(String... lines) {\n+        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n+\n+        for (int i \u003d 0; i \u003c lines.length; i++) {\n+            // Starting lines of a comment have a different first line pattern.\n+            final boolean isFirstLine \u003d i \u003d\u003d 0;\n+            final Pattern pattern;\n+            if (isFirstLine) {\n+                pattern \u003d BLOCK_TAG_PATTERN_FIRST_LINE;\n+            }\n+            else {\n+                pattern \u003d BLOCK_TAG_PATTERN;\n+            }\n+\n+            final String line \u003d lines[i];\n+            final Matcher tagMatcher \u003d pattern.matcher(line);\n+\n+            if (tagMatcher.find()) {\n+                final String tagName \u003d tagMatcher.group(1);\n+\n+                // offset of one for the @ character\n+                final int colNum \u003d tagMatcher.start(1) - 1;\n+                final int lineNum \u003d i + 1;\n+\n+                final String remainder \u003d line.substring(tagMatcher.end(1));\n+                String tagValue \u003d remainder.trim();\n+\n+                // Handle the case where we\u0027re on the last line of a Javadoc comment.\n+                if (tagValue.endsWith(JAVADOC_CLOSING_TAG)) {\n+                    final int endIndex \u003d tagValue.length() - JAVADOC_CLOSING_TAG.length();\n+                    tagValue \u003d tagValue.substring(0, endIndex).trim();\n+                }\n+\n+                final LineColumn position \u003d new LineColumn(lineNum, colNum);\n+                tags.add(new TagInfo(tagName, tagValue, position));\n+            }\n+        }\n+\n+        return tags;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static List\u003cTagInfo\u003e extractBlockTags(String... lines) {\n        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n\n        for (int i \u003d 0; i \u003c lines.length; i++) {\n            // Starting lines of a comment have a different first line pattern.\n            final boolean isFirstLine \u003d i \u003d\u003d 0;\n            final Pattern pattern;\n            if (isFirstLine) {\n                pattern \u003d BLOCK_TAG_PATTERN_FIRST_LINE;\n            }\n            else {\n                pattern \u003d BLOCK_TAG_PATTERN;\n            }\n\n            final String line \u003d lines[i];\n            final Matcher tagMatcher \u003d pattern.matcher(line);\n\n            if (tagMatcher.find()) {\n                final String tagName \u003d tagMatcher.group(1);\n\n                // offset of one for the @ character\n                final int colNum \u003d tagMatcher.start(1) - 1;\n                final int lineNum \u003d i + 1;\n\n                final String remainder \u003d line.substring(tagMatcher.end(1));\n                String tagValue \u003d remainder.trim();\n\n                // Handle the case where we\u0027re on the last line of a Javadoc comment.\n                if (tagValue.endsWith(JAVADOC_CLOSING_TAG)) {\n                    final int endIndex \u003d tagValue.length() - JAVADOC_CLOSING_TAG.length();\n                    tagValue \u003d tagValue.substring(0, endIndex).trim();\n                }\n\n                final LineColumn position \u003d new LineColumn(lineNum, colNum);\n                tags.add(new TagInfo(tagName, tagValue, position));\n            }\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/BlockTagUtils.java"
    }
  }
}