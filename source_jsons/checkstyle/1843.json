{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "isLambdaParameter",
  "functionId": "isLambdaParameter___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 1136,
  "functionEndLine": 1164,
  "numCommitsSeen": 91,
  "timeTaken": 1286,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private static boolean isLambdaParameter(DetailAST ast) {\n         DetailAST parent;\n         for (parent \u003d ast.getParent(); parent !\u003d null; parent \u003d parent.getParent()) {\n             if (parent.getType() \u003d\u003d TokenTypes.LAMBDA) {\n                 break;\n             }\n         }\n         final boolean isLambdaParameter;\n         if (parent \u003d\u003d null) {\n             isLambdaParameter \u003d false;\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.PARAMETER_DEF) {\n             isLambdaParameter \u003d true;\n         }\n         else {\n             final DetailAST lambdaParameters \u003d parent.findFirstToken(TokenTypes.PARAMETERS);\n             if (lambdaParameters \u003d\u003d null) {\n                 isLambdaParameter \u003d parent.getFirstChild().getText().equals(ast.getText());\n             }\n             else {\n-                isLambdaParameter \u003d TokenUtils.findFirstTokenByPredicate(lambdaParameters,\n+                isLambdaParameter \u003d TokenUtil.findFirstTokenByPredicate(lambdaParameters,\n                     paramDef -\u003e {\n                         final DetailAST param \u003d paramDef.findFirstToken(TokenTypes.IDENT);\n                         return param !\u003d null \u0026\u0026 param.getText().equals(ast.getText());\n                     }).isPresent();\n             }\n         }\n         return isLambdaParameter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isLambdaParameter(DetailAST ast) {\n        DetailAST parent;\n        for (parent \u003d ast.getParent(); parent !\u003d null; parent \u003d parent.getParent()) {\n            if (parent.getType() \u003d\u003d TokenTypes.LAMBDA) {\n                break;\n            }\n        }\n        final boolean isLambdaParameter;\n        if (parent \u003d\u003d null) {\n            isLambdaParameter \u003d false;\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.PARAMETER_DEF) {\n            isLambdaParameter \u003d true;\n        }\n        else {\n            final DetailAST lambdaParameters \u003d parent.findFirstToken(TokenTypes.PARAMETERS);\n            if (lambdaParameters \u003d\u003d null) {\n                isLambdaParameter \u003d parent.getFirstChild().getText().equals(ast.getText());\n            }\n            else {\n                isLambdaParameter \u003d TokenUtil.findFirstTokenByPredicate(lambdaParameters,\n                    paramDef -\u003e {\n                        final DetailAST param \u003d paramDef.findFirstToken(TokenTypes.IDENT);\n                        return param !\u003d null \u0026\u0026 param.getText().equals(ast.getText());\n                    }).isPresent();\n            }\n        }\n        return isLambdaParameter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": {
      "type": "Yintroduced",
      "commitMessage": "Issue #4207: Fixed false positives from RequireThis for lambdas\n",
      "commitDate": "23/05/17 6:02 AM",
      "commitName": "bb05231428d62fa6e253fa3f55a47335c958f4b4",
      "commitAuthor": "Piyush Sharma",
      "diff": "@@ -0,0 +1,29 @@\n+    private static boolean isLambdaParameter(DetailAST ast) {\n+        DetailAST parent;\n+        for (parent \u003d ast.getParent(); parent !\u003d null; parent \u003d parent.getParent()) {\n+            if (parent.getType() \u003d\u003d TokenTypes.LAMBDA) {\n+                break;\n+            }\n+        }\n+        final boolean isLambdaParameter;\n+        if (parent \u003d\u003d null) {\n+            isLambdaParameter \u003d false;\n+        }\n+        else if (ast.getType() \u003d\u003d TokenTypes.PARAMETER_DEF) {\n+            isLambdaParameter \u003d true;\n+        }\n+        else {\n+            final DetailAST lambdaParameters \u003d parent.findFirstToken(TokenTypes.PARAMETERS);\n+            if (lambdaParameters \u003d\u003d null) {\n+                isLambdaParameter \u003d parent.getFirstChild().getText().equals(ast.getText());\n+            }\n+            else {\n+                isLambdaParameter \u003d TokenUtils.findFirstTokenByPredicate(lambdaParameters,\n+                    paramDef -\u003e {\n+                        final DetailAST param \u003d paramDef.findFirstToken(TokenTypes.IDENT);\n+                        return param !\u003d null \u0026\u0026 param.getText().equals(ast.getText());\n+                    }).isPresent();\n+            }\n+        }\n+        return isLambdaParameter;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isLambdaParameter(DetailAST ast) {\n        DetailAST parent;\n        for (parent \u003d ast.getParent(); parent !\u003d null; parent \u003d parent.getParent()) {\n            if (parent.getType() \u003d\u003d TokenTypes.LAMBDA) {\n                break;\n            }\n        }\n        final boolean isLambdaParameter;\n        if (parent \u003d\u003d null) {\n            isLambdaParameter \u003d false;\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.PARAMETER_DEF) {\n            isLambdaParameter \u003d true;\n        }\n        else {\n            final DetailAST lambdaParameters \u003d parent.findFirstToken(TokenTypes.PARAMETERS);\n            if (lambdaParameters \u003d\u003d null) {\n                isLambdaParameter \u003d parent.getFirstChild().getText().equals(ast.getText());\n            }\n            else {\n                isLambdaParameter \u003d TokenUtils.findFirstTokenByPredicate(lambdaParameters,\n                    paramDef -\u003e {\n                        final DetailAST param \u003d paramDef.findFirstToken(TokenTypes.IDENT);\n                        return param !\u003d null \u0026\u0026 param.getText().equals(ast.getText());\n                    }).isPresent();\n            }\n        }\n        return isLambdaParameter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}