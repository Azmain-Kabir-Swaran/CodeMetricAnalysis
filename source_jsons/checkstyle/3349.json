{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommonUtil.java",
  "functionName": "createBlockCommentNode",
  "functionId": "createBlockCommentNode___content-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java",
  "functionStartLine": 121,
  "functionEndLine": 143,
  "numCommitsSeen": 151,
  "timeTaken": 4306,
  "changeHistory": [
    "45e7e369f5be02806597bbd1a61f64c50d90bae2",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1",
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
    "7fb0cf6870124032136b06eb7572a1de1b92e87a",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d"
  ],
  "changeHistoryShort": {
    "45e7e369f5be02806597bbd1a61f64c50d90bae2": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1": "Ybodychange",
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "7fb0cf6870124032136b06eb7572a1de1b92e87a": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45e7e369f5be02806597bbd1a61f64c50d90bae2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3417: split DetailAST between interface and implementation",
      "commitDate": "07/05/19 4:48 AM",
      "commitName": "45e7e369f5be02806597bbd1a61f64c50d90bae2",
      "commitAuthor": "rnveach",
      "commitDateOld": "13/03/19 11:16 PM",
      "commitNameOld": "87a3357169fa8e91ebfae23b4dcccad60943abd7",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 54.23,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public static DetailAST createBlockCommentNode(String content) {\n-        final DetailAST blockCommentBegin \u003d new DetailAST();\n+        final DetailAstImpl blockCommentBegin \u003d new DetailAstImpl();\n         blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n         blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n         blockCommentBegin.setLineNo(0);\n         blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n-        final DetailAST commentContent \u003d new DetailAST();\n+        final DetailAstImpl commentContent \u003d new DetailAstImpl();\n         commentContent.setType(TokenTypes.COMMENT_CONTENT);\n         commentContent.setText(\"*\" + content);\n         commentContent.setLineNo(0);\n         // javadoc should starts at 0 column, so COMMENT_CONTENT node\n         // that contains javadoc identifier has -1 column\n         commentContent.setColumnNo(-1);\n \n-        final DetailAST blockCommentEnd \u003d new DetailAST();\n+        final DetailAstImpl blockCommentEnd \u003d new DetailAstImpl();\n         blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n         blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n         blockCommentBegin.setFirstChild(commentContent);\n         commentContent.setNextSibling(blockCommentEnd);\n         return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAstImpl blockCommentBegin \u003d new DetailAstImpl();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAstImpl commentContent \u003d new DetailAstImpl();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identifier has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAstImpl blockCommentEnd \u003d new DetailAstImpl();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identifier has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java"
      }
    },
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1": {
      "type": "Ybodychange",
      "commitMessage": "minor: fix typos\n",
      "commitDate": "23/12/17 9:13 PM",
      "commitName": "3b531fe996078098c7fa30b8ab0645a6157dc6d1",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "20/10/17 10:40 AM",
      "commitNameOld": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
      "commitAuthorOld": "Turkin Ivan",
      "daysBetweenCommits": 64.48,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public static DetailAST createBlockCommentNode(String content) {\n         final DetailAST blockCommentBegin \u003d new DetailAST();\n         blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n         blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n         blockCommentBegin.setLineNo(0);\n         blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n         final DetailAST commentContent \u003d new DetailAST();\n         commentContent.setType(TokenTypes.COMMENT_CONTENT);\n         commentContent.setText(\"*\" + content);\n         commentContent.setLineNo(0);\n         // javadoc should starts at 0 column, so COMMENT_CONTENT node\n-        // that contains javadoc identificator has -1 column\n+        // that contains javadoc identifier has -1 column\n         commentContent.setColumnNo(-1);\n \n         final DetailAST blockCommentEnd \u003d new DetailAST();\n         blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n         blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n         blockCommentBegin.setFirstChild(commentContent);\n         commentContent.setNextSibling(blockCommentEnd);\n         return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identifier has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
      "extendedDetails": {}
    },
    "9b383e05bb3b14318c5ec5794ba2df0952a30f8a": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
      "commitDate": "20/10/17 10:40 AM",
      "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
      "commitAuthor": "Turkin Ivan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
          "commitDate": "20/10/17 10:40 AM",
          "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
          "commitAuthor": "Turkin Ivan",
          "commitDateOld": "19/10/17 8:23 AM",
          "commitNameOld": "37264397e4902bfc28c57aec4852daf334fb48a1",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-    private static DetailAST createBlockCommentNode(Token token) {\n-        final DetailAST blockComment \u003d new DetailAST();\n-        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n+    public static DetailAST createBlockCommentNode(String content) {\n+        final DetailAST blockCommentBegin \u003d new DetailAST();\n+        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n+        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n+        blockCommentBegin.setLineNo(0);\n+        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n-        // column counting begins from 0\n-        blockComment.setColumnNo(token.getColumn() - 1);\n-        blockComment.setLineNo(token.getLine());\n+        final DetailAST commentContent \u003d new DetailAST();\n+        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        commentContent.setText(\"*\" + content);\n+        commentContent.setLineNo(0);\n+        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n+        // that contains javadoc identificator has -1 column\n+        commentContent.setColumnNo(-1);\n \n-        final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        final DetailAST blockCommentEnd \u003d new DetailAST();\n+        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n+        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n-        // column counting begins from 0\n-        // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(token.getLine());\n-        blockCommentContent.setText(token.getText());\n-\n-        final DetailAST blockCommentClose \u003d new DetailAST();\n-        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n-\n-        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                token.getText(), token.getLine(), token.getColumn());\n-        blockCommentClose.setLineNo(linesColumns.getKey());\n-        blockCommentClose.setColumnNo(linesColumns.getValue());\n-\n-        blockComment.addChild(blockCommentContent);\n-        blockComment.addChild(blockCommentClose);\n-        return blockComment;\n+        blockCommentBegin.setFirstChild(commentContent);\n+        commentContent.setNextSibling(blockCommentEnd);\n+        return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identificator has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
            "oldMethodName": "createBlockCommentNode",
            "newMethodName": "createBlockCommentNode"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
          "commitDate": "20/10/17 10:40 AM",
          "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
          "commitAuthor": "Turkin Ivan",
          "commitDateOld": "19/10/17 8:23 AM",
          "commitNameOld": "37264397e4902bfc28c57aec4852daf334fb48a1",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-    private static DetailAST createBlockCommentNode(Token token) {\n-        final DetailAST blockComment \u003d new DetailAST();\n-        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n+    public static DetailAST createBlockCommentNode(String content) {\n+        final DetailAST blockCommentBegin \u003d new DetailAST();\n+        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n+        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n+        blockCommentBegin.setLineNo(0);\n+        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n-        // column counting begins from 0\n-        blockComment.setColumnNo(token.getColumn() - 1);\n-        blockComment.setLineNo(token.getLine());\n+        final DetailAST commentContent \u003d new DetailAST();\n+        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        commentContent.setText(\"*\" + content);\n+        commentContent.setLineNo(0);\n+        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n+        // that contains javadoc identificator has -1 column\n+        commentContent.setColumnNo(-1);\n \n-        final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        final DetailAST blockCommentEnd \u003d new DetailAST();\n+        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n+        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n-        // column counting begins from 0\n-        // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(token.getLine());\n-        blockCommentContent.setText(token.getText());\n-\n-        final DetailAST blockCommentClose \u003d new DetailAST();\n-        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n-\n-        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                token.getText(), token.getLine(), token.getColumn());\n-        blockCommentClose.setLineNo(linesColumns.getKey());\n-        blockCommentClose.setColumnNo(linesColumns.getValue());\n-\n-        blockComment.addChild(blockCommentContent);\n-        blockComment.addChild(blockCommentClose);\n-        return blockComment;\n+        blockCommentBegin.setFirstChild(commentContent);\n+        commentContent.setNextSibling(blockCommentEnd);\n+        return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identificator has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
          "commitDate": "20/10/17 10:40 AM",
          "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
          "commitAuthor": "Turkin Ivan",
          "commitDateOld": "19/10/17 8:23 AM",
          "commitNameOld": "37264397e4902bfc28c57aec4852daf334fb48a1",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-    private static DetailAST createBlockCommentNode(Token token) {\n-        final DetailAST blockComment \u003d new DetailAST();\n-        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n+    public static DetailAST createBlockCommentNode(String content) {\n+        final DetailAST blockCommentBegin \u003d new DetailAST();\n+        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n+        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n+        blockCommentBegin.setLineNo(0);\n+        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n-        // column counting begins from 0\n-        blockComment.setColumnNo(token.getColumn() - 1);\n-        blockComment.setLineNo(token.getLine());\n+        final DetailAST commentContent \u003d new DetailAST();\n+        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        commentContent.setText(\"*\" + content);\n+        commentContent.setLineNo(0);\n+        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n+        // that contains javadoc identificator has -1 column\n+        commentContent.setColumnNo(-1);\n \n-        final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        final DetailAST blockCommentEnd \u003d new DetailAST();\n+        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n+        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n-        // column counting begins from 0\n-        // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(token.getLine());\n-        blockCommentContent.setText(token.getText());\n-\n-        final DetailAST blockCommentClose \u003d new DetailAST();\n-        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n-\n-        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                token.getText(), token.getLine(), token.getColumn());\n-        blockCommentClose.setLineNo(linesColumns.getKey());\n-        blockCommentClose.setColumnNo(linesColumns.getValue());\n-\n-        blockComment.addChild(blockCommentContent);\n-        blockComment.addChild(blockCommentClose);\n-        return blockComment;\n+        blockCommentBegin.setFirstChild(commentContent);\n+        commentContent.setNextSibling(blockCommentEnd);\n+        return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identificator has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #4785: Method createBlockCommentNode was created in CommonUtils\n",
          "commitDate": "20/10/17 10:40 AM",
          "commitName": "9b383e05bb3b14318c5ec5794ba2df0952a30f8a",
          "commitAuthor": "Turkin Ivan",
          "commitDateOld": "19/10/17 8:23 AM",
          "commitNameOld": "37264397e4902bfc28c57aec4852daf334fb48a1",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,23 @@\n-    private static DetailAST createBlockCommentNode(Token token) {\n-        final DetailAST blockComment \u003d new DetailAST();\n-        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n+    public static DetailAST createBlockCommentNode(String content) {\n+        final DetailAST blockCommentBegin \u003d new DetailAST();\n+        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n+        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n+        blockCommentBegin.setLineNo(0);\n+        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n \n-        // column counting begins from 0\n-        blockComment.setColumnNo(token.getColumn() - 1);\n-        blockComment.setLineNo(token.getLine());\n+        final DetailAST commentContent \u003d new DetailAST();\n+        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        commentContent.setText(\"*\" + content);\n+        commentContent.setLineNo(0);\n+        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n+        // that contains javadoc identificator has -1 column\n+        commentContent.setColumnNo(-1);\n \n-        final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n+        final DetailAST blockCommentEnd \u003d new DetailAST();\n+        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n+        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n \n-        // column counting begins from 0\n-        // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(token.getLine());\n-        blockCommentContent.setText(token.getText());\n-\n-        final DetailAST blockCommentClose \u003d new DetailAST();\n-        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n-\n-        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                token.getText(), token.getLine(), token.getColumn());\n-        blockCommentClose.setLineNo(linesColumns.getKey());\n-        blockCommentClose.setColumnNo(linesColumns.getValue());\n-\n-        blockComment.addChild(blockCommentContent);\n-        blockComment.addChild(blockCommentClose);\n-        return blockComment;\n+        blockCommentBegin.setFirstChild(commentContent);\n+        commentContent.setNextSibling(blockCommentEnd);\n+        return blockCommentBegin;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST createBlockCommentNode(String content) {\n        final DetailAST blockCommentBegin \u003d new DetailAST();\n        blockCommentBegin.setType(TokenTypes.BLOCK_COMMENT_BEGIN);\n        blockCommentBegin.setText(BLOCK_MULTIPLE_COMMENT_BEGIN);\n        blockCommentBegin.setLineNo(0);\n        blockCommentBegin.setColumnNo(-JAVADOC_START.length());\n\n        final DetailAST commentContent \u003d new DetailAST();\n        commentContent.setType(TokenTypes.COMMENT_CONTENT);\n        commentContent.setText(\"*\" + content);\n        commentContent.setLineNo(0);\n        // javadoc should starts at 0 column, so COMMENT_CONTENT node\n        // that contains javadoc identificator has -1 column\n        commentContent.setColumnNo(-1);\n\n        final DetailAST blockCommentEnd \u003d new DetailAST();\n        blockCommentEnd.setType(TokenTypes.BLOCK_COMMENT_END);\n        blockCommentEnd.setText(BLOCK_MULTIPLE_COMMENT_END);\n\n        blockCommentBegin.setFirstChild(commentContent);\n        commentContent.setNextSibling(blockCommentEnd);\n        return blockCommentBegin;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
          "extendedDetails": {
            "oldValue": "[token-Token]",
            "newValue": "[content-String]"
          }
        }
      ]
    },
    "7fb0cf6870124032136b06eb7572a1de1b92e87a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4398: increase coverage of pitest-checkstyle-tree-walker profile to 94%\n",
      "commitDate": "07/07/17 5:59 AM",
      "commitName": "7fb0cf6870124032136b06eb7572a1de1b92e87a",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "06/07/17 1:22 PM",
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n     private static DetailAST createBlockCommentNode(Token token) {\n         final DetailAST blockComment \u003d new DetailAST();\n         blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n \n         // column counting begins from 0\n         blockComment.setColumnNo(token.getColumn() - 1);\n         blockComment.setLineNo(token.getLine());\n \n         final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.initialize(token);\n         blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n \n         // column counting begins from 0\n         // plus length of \u0027/*\u0027\n         blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n         blockCommentContent.setLineNo(token.getLine());\n         blockCommentContent.setText(token.getText());\n \n         final DetailAST blockCommentClose \u003d new DetailAST();\n         blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n \n         final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n                 token.getText(), token.getLine(), token.getColumn());\n         blockCommentClose.setLineNo(linesColumns.getKey());\n         blockCommentClose.setColumnNo(linesColumns.getValue());\n \n         blockComment.addChild(blockCommentContent);\n         blockComment.addChild(blockCommentClose);\n         return blockComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static DetailAST createBlockCommentNode(Token token) {\n        final DetailAST blockComment \u003d new DetailAST();\n        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n\n        // column counting begins from 0\n        blockComment.setColumnNo(token.getColumn() - 1);\n        blockComment.setLineNo(token.getLine());\n\n        final DetailAST blockCommentContent \u003d new DetailAST();\n        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n\n        // column counting begins from 0\n        // plus length of \u0027/*\u0027\n        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n        blockCommentContent.setLineNo(token.getLine());\n        blockCommentContent.setText(token.getText());\n\n        final DetailAST blockCommentClose \u003d new DetailAST();\n        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n\n        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n                token.getText(), token.getLine(), token.getColumn());\n        blockCommentClose.setLineNo(linesColumns.getKey());\n        blockCommentClose.setColumnNo(linesColumns.getValue());\n\n        blockComment.addChild(blockCommentContent);\n        blockComment.addChild(blockCommentClose);\n        return blockComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "19/01/15 6:38 AM",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "19/01/15 6:38 AM",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    private static DetailAST createBlockCommentNode(Token aToken)\n+    private static DetailAST createBlockCommentNode(Token token)\n     {\n         final DetailAST blockComment \u003d new DetailAST();\n         blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n \n         // column counting begins from 0\n-        blockComment.setColumnNo(aToken.getColumn() - 1);\n-        blockComment.setLineNo(aToken.getLine());\n+        blockComment.setColumnNo(token.getColumn() - 1);\n+        blockComment.setLineNo(token.getLine());\n \n         final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.initialize(aToken);\n+        blockCommentContent.initialize(token);\n         blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n \n         // column counting begins from 0\n         // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(aToken.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(aToken.getLine());\n-        blockCommentContent.setText(aToken.getText());\n+        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n+        blockCommentContent.setLineNo(token.getLine());\n+        blockCommentContent.setText(token.getText());\n \n         final DetailAST blockCommentClose \u003d new DetailAST();\n         blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n \n         final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                aToken.getText(), aToken.getLine(), aToken.getColumn());\n+                token.getText(), token.getLine(), token.getColumn());\n         blockCommentClose.setLineNo(linesColumns.getKey());\n         blockCommentClose.setColumnNo(linesColumns.getValue());\n \n         blockComment.addChild(blockCommentContent);\n         blockComment.addChild(blockCommentClose);\n         return blockComment;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static DetailAST createBlockCommentNode(Token token)\n    {\n        final DetailAST blockComment \u003d new DetailAST();\n        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n\n        // column counting begins from 0\n        blockComment.setColumnNo(token.getColumn() - 1);\n        blockComment.setLineNo(token.getLine());\n\n        final DetailAST blockCommentContent \u003d new DetailAST();\n        blockCommentContent.initialize(token);\n        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n\n        // column counting begins from 0\n        // plus length of \u0027/*\u0027\n        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n        blockCommentContent.setLineNo(token.getLine());\n        blockCommentContent.setText(token.getText());\n\n        final DetailAST blockCommentClose \u003d new DetailAST();\n        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n\n        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n                token.getText(), token.getLine(), token.getColumn());\n        blockCommentClose.setLineNo(linesColumns.getKey());\n        blockCommentClose.setColumnNo(linesColumns.getValue());\n\n        blockComment.addChild(blockCommentContent);\n        blockComment.addChild(blockCommentClose);\n        return blockComment;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java",
          "extendedDetails": {
            "oldValue": "[aToken-Token]",
            "newValue": "[token-Token]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "19/01/15 6:38 AM",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    private static DetailAST createBlockCommentNode(Token aToken)\n+    private static DetailAST createBlockCommentNode(Token token)\n     {\n         final DetailAST blockComment \u003d new DetailAST();\n         blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n \n         // column counting begins from 0\n-        blockComment.setColumnNo(aToken.getColumn() - 1);\n-        blockComment.setLineNo(aToken.getLine());\n+        blockComment.setColumnNo(token.getColumn() - 1);\n+        blockComment.setLineNo(token.getLine());\n \n         final DetailAST blockCommentContent \u003d new DetailAST();\n-        blockCommentContent.initialize(aToken);\n+        blockCommentContent.initialize(token);\n         blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n \n         // column counting begins from 0\n         // plus length of \u0027/*\u0027\n-        blockCommentContent.setColumnNo(aToken.getColumn() - 1 + 2);\n-        blockCommentContent.setLineNo(aToken.getLine());\n-        blockCommentContent.setText(aToken.getText());\n+        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n+        blockCommentContent.setLineNo(token.getLine());\n+        blockCommentContent.setText(token.getText());\n \n         final DetailAST blockCommentClose \u003d new DetailAST();\n         blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n \n         final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n-                aToken.getText(), aToken.getLine(), aToken.getColumn());\n+                token.getText(), token.getLine(), token.getColumn());\n         blockCommentClose.setLineNo(linesColumns.getKey());\n         blockCommentClose.setColumnNo(linesColumns.getValue());\n \n         blockComment.addChild(blockCommentContent);\n         blockComment.addChild(blockCommentClose);\n         return blockComment;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static DetailAST createBlockCommentNode(Token token)\n    {\n        final DetailAST blockComment \u003d new DetailAST();\n        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n\n        // column counting begins from 0\n        blockComment.setColumnNo(token.getColumn() - 1);\n        blockComment.setLineNo(token.getLine());\n\n        final DetailAST blockCommentContent \u003d new DetailAST();\n        blockCommentContent.initialize(token);\n        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n\n        // column counting begins from 0\n        // plus length of \u0027/*\u0027\n        blockCommentContent.setColumnNo(token.getColumn() - 1 + 2);\n        blockCommentContent.setLineNo(token.getLine());\n        blockCommentContent.setText(token.getText());\n\n        final DetailAST blockCommentClose \u003d new DetailAST();\n        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n\n        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n                token.getText(), token.getLine(), token.getColumn());\n        blockCommentClose.setLineNo(linesColumns.getKey());\n        blockCommentClose.setColumnNo(linesColumns.getValue());\n\n        blockComment.addChild(blockCommentContent);\n        blockComment.addChild(blockCommentClose);\n        return blockComment;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java",
          "extendedDetails": {}
        }
      ]
    },
    "a24df47cafeab03fd65cf72b460aad3d2fafce3d": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Added support of single-line and block comments\n",
      "commitDate": "17/10/14 10:19 PM",
      "commitName": "a24df47cafeab03fd65cf72b460aad3d2fafce3d",
      "commitAuthor": "Baratali Izmailov",
      "diff": "@@ -0,0 +1,31 @@\n+    private static DetailAST createBlockCommentNode(Token aToken)\n+    {\n+        final DetailAST blockComment \u003d new DetailAST();\n+        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n+\n+        // column counting begins from 0\n+        blockComment.setColumnNo(aToken.getColumn() - 1);\n+        blockComment.setLineNo(aToken.getLine());\n+\n+        final DetailAST blockCommentContent \u003d new DetailAST();\n+        blockCommentContent.initialize(aToken);\n+        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n+\n+        // column counting begins from 0\n+        // plus length of \u0027/*\u0027\n+        blockCommentContent.setColumnNo(aToken.getColumn() - 1 + 2);\n+        blockCommentContent.setLineNo(aToken.getLine());\n+        blockCommentContent.setText(aToken.getText());\n+\n+        final DetailAST blockCommentClose \u003d new DetailAST();\n+        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n+\n+        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n+                aToken.getText(), aToken.getLine(), aToken.getColumn());\n+        blockCommentClose.setLineNo(linesColumns.getKey());\n+        blockCommentClose.setColumnNo(linesColumns.getValue());\n+\n+        blockComment.addChild(blockCommentContent);\n+        blockComment.addChild(blockCommentClose);\n+        return blockComment;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static DetailAST createBlockCommentNode(Token aToken)\n    {\n        final DetailAST blockComment \u003d new DetailAST();\n        blockComment.initialize(TokenTypes.BLOCK_COMMENT_BEGIN, \"/*\");\n\n        // column counting begins from 0\n        blockComment.setColumnNo(aToken.getColumn() - 1);\n        blockComment.setLineNo(aToken.getLine());\n\n        final DetailAST blockCommentContent \u003d new DetailAST();\n        blockCommentContent.initialize(aToken);\n        blockCommentContent.setType(TokenTypes.COMMENT_CONTENT);\n\n        // column counting begins from 0\n        // plus length of \u0027/*\u0027\n        blockCommentContent.setColumnNo(aToken.getColumn() - 1 + 2);\n        blockCommentContent.setLineNo(aToken.getLine());\n        blockCommentContent.setText(aToken.getText());\n\n        final DetailAST blockCommentClose \u003d new DetailAST();\n        blockCommentClose.initialize(TokenTypes.BLOCK_COMMENT_END, \"*/\");\n\n        final Entry\u003cInteger, Integer\u003e linesColumns \u003d countLinesColumns(\n                aToken.getText(), aToken.getLine(), aToken.getColumn());\n        blockCommentClose.setLineNo(linesColumns.getKey());\n        blockCommentClose.setColumnNo(linesColumns.getValue());\n\n        blockComment.addChild(blockCommentContent);\n        blockComment.addChild(blockCommentClose);\n        return blockComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java"
    }
  }
}