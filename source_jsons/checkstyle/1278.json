{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileTabCharacterCheck.java",
  "functionName": "processFiltered",
  "functionId": "processFiltered___file-File__fileText-FileText",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
  "functionStartLine": 93,
  "functionEndLine": 109,
  "numCommitsSeen": 43,
  "timeTaken": 2742,
  "changeHistory": [
    "87a3357169fa8e91ebfae23b4dcccad60943abd7",
    "0c2abadbb7f2887f31011157d62edf40bea131c3",
    "82979737c4201b4913ea30b9c9431e71783d1c02",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588"
  ],
  "changeHistoryShort": {
    "87a3357169fa8e91ebfae23b4dcccad60943abd7": "Ybodychange",
    "0c2abadbb7f2887f31011157d62edf40bea131c3": "Ybodychange",
    "82979737c4201b4913ea30b9c9431e71783d1c02": "Ymultichange(Yparameterchange,Ybodychange)",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": "Yintroduced"
  },
  "changeHistoryDetails": {
    "87a3357169fa8e91ebfae23b4dcccad60943abd7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6485: added tabWidth to Checker and populated it to all checks",
      "commitDate": "13/03/19 11:16 PM",
      "commitName": "87a3357169fa8e91ebfae23b4dcccad60943abd7",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 57.69,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processFiltered(File file, FileText fileText) {\n         int lineNum \u003d 0;\n         for (int index \u003d 0; index \u003c fileText.size(); index++) {\n             final String line \u003d fileText.get(index);\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n-                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n+                    log(lineNum, tabPosition, MSG_CONTAINS_TAB);\n                 }\n                 else {\n-                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n+                    log(lineNum, tabPosition, MSG_FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        int lineNum \u003d 0;\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition, MSG_CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition, MSG_FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
      "extendedDetails": {}
    },
    "0c2abadbb7f2887f31011157d62edf40bea131c3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
      "commitDate": "10/07/17 12:57 PM",
      "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthor": "Timur",
      "commitDateOld": "06/07/17 1:22 PM",
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n     protected void processFiltered(File file, FileText fileText) {\n         int lineNum \u003d 0;\n-        for (final String line : fileText.getLines()) {\n+        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n+            final String line \u003d fileText.get(index);\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n                     log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                 }\n                 else {\n                     log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        int lineNum \u003d 0;\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
      "extendedDetails": {}
    },
    "82979737c4201b4913ea30b9c9431e71783d1c02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
      "commitDate": "06/07/17 1:22 PM",
      "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthor": "Timur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
          "commitDate": "06/07/17 1:22 PM",
          "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthor": "Timur",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 160.24,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    protected void processFiltered(File file, List\u003cString\u003e lines) {\n+    protected void processFiltered(File file, FileText fileText) {\n         int lineNum \u003d 0;\n-        for (final String line : lines) {\n+        for (final String line : fileText.getLines()) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n                     log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                 }\n                 else {\n                     log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        int lineNum \u003d 0;\n        for (final String line : fileText.getLines()) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {
            "oldValue": "[file-File, lines-List\u003cString\u003e]",
            "newValue": "[file-File, fileText-FileText]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
          "commitDate": "06/07/17 1:22 PM",
          "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthor": "Timur",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 160.24,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    protected void processFiltered(File file, List\u003cString\u003e lines) {\n+    protected void processFiltered(File file, FileText fileText) {\n         int lineNum \u003d 0;\n-        for (final String line : lines) {\n+        for (final String line : fileText.getLines()) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n                     log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                 }\n                 else {\n                     log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        int lineNum \u003d 0;\n        for (final String line : fileText.getLines()) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         int lineNum \u003d 0;\n         for (final String line : lines) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n-                    log(lineNum, tabPosition + 1, CONTAINS_TAB);\n+                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                 }\n                 else {\n-                    log(lineNum, tabPosition + 1, FILE_CONTAINS_TAB);\n+                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        int lineNum \u003d 0;\n        for (final String line : lines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, MSG_CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition + 1, MSG_FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
      "extendedDetails": {}
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         int lineNum \u003d 0;\n         for (final String line : lines) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n                 if (eachLine) {\n-                    log(lineNum, tabPosition + 1, \"containsTab\");\n+                    log(lineNum, tabPosition + 1, CONTAINS_TAB);\n                 }\n                 else {\n-                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n+                    log(lineNum, tabPosition + 1, FILE_CONTAINS_TAB);\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : lines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, CONTAINS_TAB);\n                }\n                else {\n                    log(lineNum, tabPosition + 1, FILE_CONTAINS_TAB);\n                    break;\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
      "extendedDetails": {}
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 459,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         int lineNum \u003d 0;\n-        for (final String line : aLines) {\n+        for (final String line : lines) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n-                if (mEachLine) {\n+                if (eachLine) {\n                     log(lineNum, tabPosition + 1, \"containsTab\");\n                 }\n                 else {\n                     log(lineNum, tabPosition + 1, \"file.containsTab\");\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : lines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {
            "oldValue": "[aFile-File, aLines-List\u003cString\u003e]",
            "newValue": "[file-File, lines-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 459,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         int lineNum \u003d 0;\n-        for (final String line : aLines) {\n+        for (final String line : lines) {\n             lineNum++;\n             final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n             if (tabPosition !\u003d -1) {\n-                if (mEachLine) {\n+                if (eachLine) {\n                     log(lineNum, tabPosition + 1, \"containsTab\");\n                 }\n                 else {\n                     log(lineNum, tabPosition + 1, \"file.containsTab\");\n                     break;\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : lines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (eachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : aLines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (mEachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java"
      }
    },
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
      "commitDate": "09/11/08 1:37 AM",
      "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,17 @@\n-    public void process(final List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n-        for (final File file : aFiles) {\n-            final String path \u003d file.getPath();\n-            msgDispatcher.fireFileStarted(path);\n-            LineNumberReader lnr \u003d null;\n-            try {\n-                lnr \u003d new LineNumberReader(new FileReader(file));\n-                while (true) {\n-                    final String line \u003d lnr.readLine();\n-                    if (null \u003d\u003d line) {\n-                        break;\n-                    }\n-                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n-                    if (tabPosition !\u003d -1) {\n-                        if (mEachLine) {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"containsTab\");\n-                        }\n-                        else {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"file.containsTab\");\n-                            break;\n-                        }\n-                    }\n+        int lineNum \u003d 0;\n+        for (final String line : aLines) {\n+            lineNum++;\n+            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n+            if (tabPosition !\u003d -1) {\n+                if (mEachLine) {\n+                    log(lineNum, tabPosition + 1, \"containsTab\");\n+                }\n+                else {\n+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n+                    break;\n                 }\n             }\n-            catch (IOException ioe) {\n-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n-                log(0, \"Unable to read file: \" + ioe);\n-            }\n-            finally {\n-                Utils.closeQuietly(lnr);\n-            }\n-            fireErrors(path);\n-            msgDispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : aLines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (mEachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {
            "oldValue": "process",
            "newValue": "processFiltered"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,17 @@\n-    public void process(final List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n-        for (final File file : aFiles) {\n-            final String path \u003d file.getPath();\n-            msgDispatcher.fireFileStarted(path);\n-            LineNumberReader lnr \u003d null;\n-            try {\n-                lnr \u003d new LineNumberReader(new FileReader(file));\n-                while (true) {\n-                    final String line \u003d lnr.readLine();\n-                    if (null \u003d\u003d line) {\n-                        break;\n-                    }\n-                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n-                    if (tabPosition !\u003d -1) {\n-                        if (mEachLine) {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"containsTab\");\n-                        }\n-                        else {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"file.containsTab\");\n-                            break;\n-                        }\n-                    }\n+        int lineNum \u003d 0;\n+        for (final String line : aLines) {\n+            lineNum++;\n+            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n+            if (tabPosition !\u003d -1) {\n+                if (mEachLine) {\n+                    log(lineNum, tabPosition + 1, \"containsTab\");\n+                }\n+                else {\n+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n+                    break;\n                 }\n             }\n-            catch (IOException ioe) {\n-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n-                log(0, \"Unable to read file: \" + ioe);\n-            }\n-            finally {\n-                Utils.closeQuietly(lnr);\n-            }\n-            fireErrors(path);\n-            msgDispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : aLines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (mEachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {
            "oldValue": "[aFiles-List\u003cFile\u003e(modifiers-final)]",
            "newValue": "[aFile-File, aLines-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,17 @@\n-    public void process(final List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n-        for (final File file : aFiles) {\n-            final String path \u003d file.getPath();\n-            msgDispatcher.fireFileStarted(path);\n-            LineNumberReader lnr \u003d null;\n-            try {\n-                lnr \u003d new LineNumberReader(new FileReader(file));\n-                while (true) {\n-                    final String line \u003d lnr.readLine();\n-                    if (null \u003d\u003d line) {\n-                        break;\n-                    }\n-                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n-                    if (tabPosition !\u003d -1) {\n-                        if (mEachLine) {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"containsTab\");\n-                        }\n-                        else {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"file.containsTab\");\n-                            break;\n-                        }\n-                    }\n+        int lineNum \u003d 0;\n+        for (final String line : aLines) {\n+            lineNum++;\n+            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n+            if (tabPosition !\u003d -1) {\n+                if (mEachLine) {\n+                    log(lineNum, tabPosition + 1, \"containsTab\");\n+                }\n+                else {\n+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n+                    break;\n                 }\n             }\n-            catch (IOException ioe) {\n-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n-                log(0, \"Unable to read file: \" + ioe);\n-            }\n-            finally {\n-                Utils.closeQuietly(lnr);\n-            }\n-            fireErrors(path);\n-            msgDispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : aLines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (mEachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,17 @@\n-    public void process(final List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n-        for (final File file : aFiles) {\n-            final String path \u003d file.getPath();\n-            msgDispatcher.fireFileStarted(path);\n-            LineNumberReader lnr \u003d null;\n-            try {\n-                lnr \u003d new LineNumberReader(new FileReader(file));\n-                while (true) {\n-                    final String line \u003d lnr.readLine();\n-                    if (null \u003d\u003d line) {\n-                        break;\n-                    }\n-                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n-                    if (tabPosition !\u003d -1) {\n-                        if (mEachLine) {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"containsTab\");\n-                        }\n-                        else {\n-                            log(lnr.getLineNumber(), tabPosition + 1,\n-                                \"file.containsTab\");\n-                            break;\n-                        }\n-                    }\n+        int lineNum \u003d 0;\n+        for (final String line : aLines) {\n+            lineNum++;\n+            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n+            if (tabPosition !\u003d -1) {\n+                if (mEachLine) {\n+                    log(lineNum, tabPosition + 1, \"containsTab\");\n+                }\n+                else {\n+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n+                    break;\n                 }\n             }\n-            catch (IOException ioe) {\n-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n-                log(0, \"Unable to read file: \" + ioe);\n-            }\n-            finally {\n-                Utils.closeQuietly(lnr);\n-            }\n-            fireErrors(path);\n-            msgDispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        int lineNum \u003d 0;\n        for (final String line : aLines) {\n            lineNum++;\n            final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n            if (tabPosition !\u003d -1) {\n                if (mEachLine) {\n                    log(lineNum, tabPosition + 1, \"containsTab\");\n                }\n                else {\n                    log(lineNum, tabPosition + 1, \"file.containsTab\");\n                    break;\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": {
      "type": "Yintroduced",
      "commitMessage": "New check FileTabCharacter  for ensuring that any files does not contain a tab character. It is now used to ensure the documentation files do not contain tabs.\n\nAlso introduced Utils.closeQuietly to clean up code.\n",
      "commitDate": "05/11/08 11:21 PM",
      "commitName": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,39 @@\n+    public void process(final List\u003cFile\u003e aFiles)\n+    {\n+        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n+        for (final File file : aFiles) {\n+            final String path \u003d file.getPath();\n+            msgDispatcher.fireFileStarted(path);\n+            LineNumberReader lnr \u003d null;\n+            try {\n+                lnr \u003d new LineNumberReader(new FileReader(file));\n+                while (true) {\n+                    final String line \u003d lnr.readLine();\n+                    if (null \u003d\u003d line) {\n+                        break;\n+                    }\n+                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n+                    if (tabPosition !\u003d -1) {\n+                        if (mEachLine) {\n+                            log(lnr.getLineNumber(), tabPosition + 1,\n+                                \"containsTab\");\n+                        }\n+                        else {\n+                            log(lnr.getLineNumber(), tabPosition + 1,\n+                                \"file.containsTab\");\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+            catch (IOException ioe) {\n+                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n+                log(0, \"Unable to read file: \" + ioe);\n+            }\n+            finally {\n+                Utils.closeQuietly(lnr);\n+            }\n+            fireErrors(path);\n+            msgDispatcher.fireFileFinished(path);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(final List\u003cFile\u003e aFiles)\n    {\n        final MessageDispatcher msgDispatcher \u003d getMessageDispatcher();\n        for (final File file : aFiles) {\n            final String path \u003d file.getPath();\n            msgDispatcher.fireFileStarted(path);\n            LineNumberReader lnr \u003d null;\n            try {\n                lnr \u003d new LineNumberReader(new FileReader(file));\n                while (true) {\n                    final String line \u003d lnr.readLine();\n                    if (null \u003d\u003d line) {\n                        break;\n                    }\n                    final int tabPosition \u003d line.indexOf(\u0027\\t\u0027);\n                    if (tabPosition !\u003d -1) {\n                        if (mEachLine) {\n                            log(lnr.getLineNumber(), tabPosition + 1,\n                                \"containsTab\");\n                        }\n                        else {\n                            log(lnr.getLineNumber(), tabPosition + 1,\n                                \"file.containsTab\");\n                            break;\n                        }\n                    }\n                }\n            }\n            catch (IOException ioe) {\n                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\n                log(0, \"Unable to read file: \" + ioe);\n            }\n            finally {\n                Utils.closeQuietly(lnr);\n            }\n            fireErrors(path);\n            msgDispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java"
    }
  }
}