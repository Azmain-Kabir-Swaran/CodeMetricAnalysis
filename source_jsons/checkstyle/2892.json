{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotationOnSameLineCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationOnSameLineCheck.java",
  "functionStartLine": 174,
  "functionEndLine": 194,
  "numCommitsSeen": 13,
  "timeTaken": 987,
  "changeHistory": [
    "ff3ba01ca516a4a8fcc69ad730d2113c03b3de39",
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
    "76b6f994e669c147053b47361b2e909dfa5371fd"
  ],
  "changeHistoryShort": {
    "ff3ba01ca516a4a8fcc69ad730d2113c03b3de39": "Ybodychange",
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": "Ybodychange",
    "76b6f994e669c147053b47361b2e909dfa5371fd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ff3ba01ca516a4a8fcc69ad730d2113c03b3de39": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7721: Update AbstractChecks to log DetailAST - AnnotationOnSameLine\n",
      "commitDate": "28/03/20 8:53 AM",
      "commitName": "ff3ba01ca516a4a8fcc69ad730d2113c03b3de39",
      "commitAuthor": "Wilfried Bounsi",
      "commitDateOld": "06/02/20 6:58 PM",
      "commitNameOld": "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
      "commitAuthorOld": "Andrei_Paikin",
      "daysBetweenCommits": 50.54,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void visitToken(DetailAST ast) {\n         DetailAST nodeWithAnnotations \u003d ast;\n         if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n             nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n         }\n         DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiersNode \u003d\u003d null) {\n             modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n         }\n         if (modifiersNode !\u003d null) {\n             for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n                     annotationNode !\u003d null;\n                     annotationNode \u003d annotationNode.getNextSibling()) {\n                 if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n                         \u0026\u0026 !TokenUtil.areOnSameLine(annotationNode, getNextNode(annotationNode))) {\n-                    log(annotationNode.getLineNo(), MSG_KEY_ANNOTATION_ON_SAME_LINE,\n+                    log(annotationNode, MSG_KEY_ANNOTATION_ON_SAME_LINE,\n                           getAnnotationName(annotationNode));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        DetailAST nodeWithAnnotations \u003d ast;\n        if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n            nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n        }\n        DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiersNode \u003d\u003d null) {\n            modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n        }\n        if (modifiersNode !\u003d null) {\n            for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n                    annotationNode !\u003d null;\n                    annotationNode \u003d annotationNode.getNextSibling()) {\n                if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n                        \u0026\u0026 !TokenUtil.areOnSameLine(annotationNode, getNextNode(annotationNode))) {\n                    log(annotationNode, MSG_KEY_ANNOTATION_ON_SAME_LINE,\n                          getAnnotationName(annotationNode));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationOnSameLineCheck.java",
      "extendedDetails": {}
    },
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7518: refactor line comparison\n",
      "commitDate": "06/02/20 6:58 PM",
      "commitName": "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
      "commitAuthor": "Andrei_Paikin",
      "commitDateOld": "10/01/20 7:54 PM",
      "commitNameOld": "1196148e5a316405870b93e2f91a1948fe087215",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 26.96,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void visitToken(DetailAST ast) {\n         DetailAST nodeWithAnnotations \u003d ast;\n         if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n             nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n         }\n         DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiersNode \u003d\u003d null) {\n             modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n         }\n         if (modifiersNode !\u003d null) {\n             for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n                     annotationNode !\u003d null;\n                     annotationNode \u003d annotationNode.getNextSibling()) {\n                 if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n-                        \u0026\u0026 annotationNode.getLineNo() !\u003d getNextNode(annotationNode).getLineNo()) {\n+                        \u0026\u0026 !TokenUtil.areOnSameLine(annotationNode, getNextNode(annotationNode))) {\n                     log(annotationNode.getLineNo(), MSG_KEY_ANNOTATION_ON_SAME_LINE,\n                           getAnnotationName(annotationNode));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        DetailAST nodeWithAnnotations \u003d ast;\n        if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n            nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n        }\n        DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiersNode \u003d\u003d null) {\n            modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n        }\n        if (modifiersNode !\u003d null) {\n            for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n                    annotationNode !\u003d null;\n                    annotationNode \u003d annotationNode.getNextSibling()) {\n                if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n                        \u0026\u0026 !TokenUtil.areOnSameLine(annotationNode, getNextNode(annotationNode))) {\n                    log(annotationNode.getLineNo(), MSG_KEY_ANNOTATION_ON_SAME_LINE,\n                          getAnnotationName(annotationNode));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationOnSameLineCheck.java",
      "extendedDetails": {}
    },
    "76b6f994e669c147053b47361b2e909dfa5371fd": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3440: Added new check for verifying that annotation located on the same line with its target\n",
      "commitDate": "28/08/17 2:34 PM",
      "commitName": "76b6f994e669c147053b47361b2e909dfa5371fd",
      "commitAuthor": "kazachka",
      "diff": "@@ -0,0 +1,21 @@\n+    public void visitToken(DetailAST ast) {\n+        DetailAST nodeWithAnnotations \u003d ast;\n+        if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n+            nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        }\n+        DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n+        if (modifiersNode \u003d\u003d null) {\n+            modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n+        }\n+        if (modifiersNode !\u003d null) {\n+            for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n+                    annotationNode !\u003d null;\n+                    annotationNode \u003d annotationNode.getNextSibling()) {\n+                if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n+                        \u0026\u0026 annotationNode.getLineNo() !\u003d getNextNode(annotationNode).getLineNo()) {\n+                    log(annotationNode.getLineNo(), MSG_KEY_ANNOTATION_ON_SAME_LINE,\n+                          getAnnotationName(annotationNode));\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        DetailAST nodeWithAnnotations \u003d ast;\n        if (ast.getType() \u003d\u003d TokenTypes.TYPECAST) {\n            nodeWithAnnotations \u003d ast.findFirstToken(TokenTypes.TYPE);\n        }\n        DetailAST modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiersNode \u003d\u003d null) {\n            modifiersNode \u003d nodeWithAnnotations.findFirstToken(TokenTypes.ANNOTATIONS);\n        }\n        if (modifiersNode !\u003d null) {\n            for (DetailAST annotationNode \u003d modifiersNode.getFirstChild();\n                    annotationNode !\u003d null;\n                    annotationNode \u003d annotationNode.getNextSibling()) {\n                if (annotationNode.getType() \u003d\u003d TokenTypes.ANNOTATION\n                        \u0026\u0026 annotationNode.getLineNo() !\u003d getNextNode(annotationNode).getLineNo()) {\n                    log(annotationNode.getLineNo(), MSG_KEY_ANNOTATION_ON_SAME_LINE,\n                          getAnnotationName(annotationNode));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationOnSameLineCheck.java"
    }
  }
}