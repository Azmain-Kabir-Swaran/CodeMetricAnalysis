{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommentsIndentationCheck.java",
  "functionName": "handleCommentAtTheEndOfTheCodeBlock",
  "functionId": "handleCommentAtTheEndOfTheCodeBlock___prevStmt-DetailAST__comment-DetailAST__nextStmt-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
  "functionStartLine": 670,
  "functionEndLine": 692,
  "numCommitsSeen": 103,
  "timeTaken": 2188,
  "changeHistory": [
    "6cc0c90f092b816848ebaab1fba5595a776b16fa",
    "43839b3d7107417095b5b915064e7dcf39e3b2b1",
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6",
    "3defd234041f34854f50f1a77ae94d18fb730036",
    "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad"
  ],
  "changeHistoryShort": {
    "6cc0c90f092b816848ebaab1fba5595a776b16fa": "Ybodychange",
    "43839b3d7107417095b5b915064e7dcf39e3b2b1": "Ybodychange",
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6": "Ymultichange(Yrename,Ybodychange)",
    "3defd234041f34854f50f1a77ae94d18fb730036": "Ymultichange(Yrename,Ybodychange)",
    "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6cc0c90f092b816848ebaab1fba5595a776b16fa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7727: Updated ITs for CommentsIndentation\n",
      "commitDate": "28/04/20 12:06 PM",
      "commitName": "6cc0c90f092b816848ebaab1fba5595a776b16fa",
      "commitAuthor": "Shrey Kumar Singh",
      "commitDateOld": "16/04/20 6:39 AM",
      "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
      "commitAuthorOld": "Joseph Mate",
      "daysBetweenCommits": 12.23,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                      DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                     || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n-                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n+                    log(comment, getMessageKey(comment), nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n             else if (isCommentForMultiblock(nextStmt)) {\n                 if (!areSameLevelIndented(comment, prevStmt, nextStmt)) {\n                     logMultilineIndentation(prevStmt, comment, nextStmt);\n                 }\n             }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                 final int prevStmtLineNo \u003d prevStmt.getLineNo();\n-                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n+                log(comment, getMessageKey(comment), prevStmtLineNo,\n                         comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                     DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment, getMessageKey(comment), nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (isCommentForMultiblock(nextStmt)) {\n                if (!areSameLevelIndented(comment, prevStmt, nextStmt)) {\n                    logMultilineIndentation(prevStmt, comment, nextStmt);\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment, getMessageKey(comment), prevStmtLineNo,\n                        comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
      "extendedDetails": {}
    },
    "43839b3d7107417095b5b915064e7dcf39e3b2b1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3220: CommentsIndentation: allow upper comments for following block at multi-block structures (#3270)\n\n",
      "commitDate": "12/06/16 6:50 AM",
      "commitName": "43839b3d7107417095b5b915064e7dcf39e3b2b1",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "08/06/16 7:38 PM",
      "commitNameOld": "e2e8e622a562ae4deda24f219a2e057cf2215786",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,24 @@\n     private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                      DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                     || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                     log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n+            else if (isCommentForMultiblock(nextStmt)) {\n+                if (!areSameLevelIndented(comment, prevStmt, nextStmt)) {\n+                    logMultilineIndentation(prevStmt, comment, nextStmt);\n+                }\n+            }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                 final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                 log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n-                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n+                        comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                     DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (isCommentForMultiblock(nextStmt)) {\n                if (!areSameLevelIndented(comment, prevStmt, nextStmt)) {\n                    logMultilineIndentation(prevStmt, comment, nextStmt);\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n                        comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
      "extendedDetails": {}
    },
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Issue #3126: Fix a lot of CommentsIndentationCheck false-positives and false-negatives\n",
      "commitDate": "30/05/16 6:08 AM",
      "commitName": "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #3126: Fix a lot of CommentsIndentationCheck false-positives and false-negatives\n",
          "commitDate": "30/05/16 6:08 AM",
          "commitName": "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "24/04/16 6:24 AM",
          "commitNameOld": "3defd234041f34854f50f1a77ae94d18fb730036",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 35.99,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,19 @@\n-    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n-                                                               DetailAST comment,\n-                                                               DetailAST nextStmt) {\n+    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n+                                                     DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n-                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n+                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n-                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n+                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                 final int prevStmtLineNo \u003d prevStmt.getLineNo();\n-                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n+                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n                     comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                     DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
          "extendedDetails": {
            "oldValue": "handleSingleLineCommentAtTheEndOfTheCodeBlock",
            "newValue": "handleCommentAtTheEndOfTheCodeBlock"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3126: Fix a lot of CommentsIndentationCheck false-positives and false-negatives\n",
          "commitDate": "30/05/16 6:08 AM",
          "commitName": "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "24/04/16 6:24 AM",
          "commitNameOld": "3defd234041f34854f50f1a77ae94d18fb730036",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 35.99,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,19 @@\n-    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n-                                                               DetailAST comment,\n-                                                               DetailAST nextStmt) {\n+    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n+                                                     DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n-                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n+                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n-                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n+                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                 final int prevStmtLineNo \u003d prevStmt.getLineNo();\n-                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n+                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n                     comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void handleCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt, DetailAST comment,\n                                                     DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment.getLineNo(), getMessageKey(comment), prevStmtLineNo,\n                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "3defd234041f34854f50f1a77ae94d18fb730036": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Issue #2998: Fix CommentsIndentation Check false-positive at the end of a block (#3123)",
      "commitDate": "24/04/16 6:24 AM",
      "commitName": "3defd234041f34854f50f1a77ae94d18fb730036",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #2998: Fix CommentsIndentation Check false-positive at the end of a block (#3123)",
          "commitDate": "24/04/16 6:24 AM",
          "commitName": "3defd234041f34854f50f1a77ae94d18fb730036",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "17/03/16 6:39 AM",
          "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
          "commitAuthorOld": "Rasmus Kaj",
          "daysBetweenCommits": 37.99,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-    private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n+    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n                                                                DetailAST comment,\n                                                                DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                     || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                     || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                     log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n-                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmt.getLineNo(),\n-                    comment.getColumnNo(), prevStmt.getColumnNo());\n+                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n+                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n+                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n                                                               DetailAST comment,\n                                                               DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
          "extendedDetails": {
            "oldValue": "handleSIngleLineCommentAtTheEndOfTheCodeBlock",
            "newValue": "handleSingleLineCommentAtTheEndOfTheCodeBlock"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2998: Fix CommentsIndentation Check false-positive at the end of a block (#3123)",
          "commitDate": "24/04/16 6:24 AM",
          "commitName": "3defd234041f34854f50f1a77ae94d18fb730036",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "17/03/16 6:39 AM",
          "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
          "commitAuthorOld": "Rasmus Kaj",
          "daysBetweenCommits": 37.99,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-    private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n+    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n                                                                DetailAST comment,\n                                                                DetailAST nextStmt) {\n         if (prevStmt !\u003d null) {\n             if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                     || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                     || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                     || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n                 if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                     log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n                         comment.getColumnNo(), nextStmt.getColumnNo());\n                 }\n             }\n             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n-                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmt.getLineNo(),\n-                    comment.getColumnNo(), prevStmt.getColumnNo());\n+                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n+                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n+                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n             }\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n                                                               DetailAST comment,\n                                                               DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                final int prevStmtLineNo \u003d prevStmt.getLineNo();\n                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,\n                    comment.getColumnNo(), getLineStart(prevStmtLineNo));\n            }\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2078: Fix FP violations at the end of the block and in the middle of the method\n",
      "commitDate": "31/10/15 3:48 PM",
      "commitName": "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,20 @@\n+    private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n+                                                               DetailAST comment,\n+                                                               DetailAST nextStmt) {\n+        if (prevStmt !\u003d null) {\n+            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n+                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n+                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n+                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n+                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n+                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n+                        comment.getColumnNo(), nextStmt.getColumnNo());\n+                }\n+            }\n+            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n+                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmt.getLineNo(),\n+                    comment.getColumnNo(), prevStmt.getColumnNo());\n+            }\n+        }\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,\n                                                               DetailAST comment,\n                                                               DetailAST nextStmt) {\n        if (prevStmt !\u003d null) {\n            if (prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_CASE\n                    || prevStmt.getType() \u003d\u003d TokenTypes.CASE_GROUP\n                    || prevStmt.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                    || prevStmt.getType() \u003d\u003d TokenTypes.SINGLE_LINE_COMMENT) {\n                if (comment.getColumnNo() \u003c nextStmt.getColumnNo()) {\n                    log(comment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),\n                        comment.getColumnNo(), nextStmt.getColumnNo());\n                }\n            }\n            else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {\n                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmt.getLineNo(),\n                    comment.getColumnNo(), prevStmt.getColumnNo());\n            }\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java"
    }
  }
}