{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VisibilityModifierCheck.java",
  "functionName": "isImmutableField",
  "functionId": "isImmutableField___variableDef-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
  "functionStartLine": 815,
  "functionEndLine": 838,
  "numCommitsSeen": 83,
  "timeTaken": 1673,
  "changeHistory": [
    "42640b0c92aad5b96f2876f76e15ea455909379b",
    "36a0df872e124bf53ac8d63d95b3b3d1a8c2ec74",
    "57c24460e70860f1851c60db0a939ff46b2bb54c",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "f9f60d3142533c3eebff775e8eb1159935faaba1"
  ],
  "changeHistoryShort": {
    "42640b0c92aad5b96f2876f76e15ea455909379b": "Ybodychange",
    "36a0df872e124bf53ac8d63d95b3b3d1a8c2ec74": "Ybodychange",
    "57c24460e70860f1851c60db0a939ff46b2bb54c": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "f9f60d3142533c3eebff775e8eb1159935faaba1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42640b0c92aad5b96f2876f76e15ea455909379b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for design",
      "commitDate": "01/01/19 9:36 PM",
      "commitName": "42640b0c92aad5b96f2876f76e15ea455909379b",
      "commitAuthor": "rnveach",
      "commitDateOld": "02/12/18 8:23 PM",
      "commitNameOld": "bc4fe1ec9cc2abb9e370af4e8b44a4f7f71f9726",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 30.05,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n     private boolean isImmutableField(DetailAST variableDef) {\n         boolean result \u003d false;\n         if (isFinalField(variableDef)) {\n             final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n             final boolean isCanonicalName \u003d isCanonicalName(type);\n             final String typeName \u003d getTypeName(type, isCanonicalName);\n-            final DetailAST typeArgs \u003d getGenericTypeArgs(type, isCanonicalName);\n-            if (typeArgs \u003d\u003d null) {\n-                result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n-                    || immutableClassShortNames.contains(typeName)\n-                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n+            if (immutableClassShortNames.contains(typeName)\n+                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName)) {\n+                final DetailAST typeArgs \u003d getGenericTypeArgs(type, isCanonicalName);\n+\n+                if (typeArgs \u003d\u003d null) {\n+                    result \u003d true;\n+                }\n+                else {\n+                    final List\u003cString\u003e argsClassNames \u003d getTypeArgsClassNames(typeArgs);\n+                    result \u003d areImmutableTypeArguments(argsClassNames);\n+                }\n             }\n             else {\n-                final List\u003cString\u003e argsClassNames \u003d getTypeArgsClassNames(typeArgs);\n-                result \u003d (immutableClassShortNames.contains(typeName)\n-                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName))\n-                    \u0026\u0026 areImmutableTypeArguments(argsClassNames);\n+                result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type);\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isImmutableField(DetailAST variableDef) {\n        boolean result \u003d false;\n        if (isFinalField(variableDef)) {\n            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n            final boolean isCanonicalName \u003d isCanonicalName(type);\n            final String typeName \u003d getTypeName(type, isCanonicalName);\n            if (immutableClassShortNames.contains(typeName)\n                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName)) {\n                final DetailAST typeArgs \u003d getGenericTypeArgs(type, isCanonicalName);\n\n                if (typeArgs \u003d\u003d null) {\n                    result \u003d true;\n                }\n                else {\n                    final List\u003cString\u003e argsClassNames \u003d getTypeArgsClassNames(typeArgs);\n                    result \u003d areImmutableTypeArguments(argsClassNames);\n                }\n            }\n            else {\n                result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type);\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "36a0df872e124bf53ac8d63d95b3b3d1a8c2ec74": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3142: Add proper support for generics in VisibilityModifierCheck (#3247)\n\n",
      "commitDate": "10/06/16 10:35 AM",
      "commitName": "36a0df872e124bf53ac8d63d95b3b3d1a8c2ec74",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "03/06/16 5:40 AM",
      "commitNameOld": "57c24460e70860f1851c60db0a939ff46b2bb54c",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 7.21,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,21 @@\n     private boolean isImmutableField(DetailAST variableDef) {\n         boolean result \u003d false;\n         if (isFinalField(variableDef)) {\n             final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n-            final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n+            final boolean isCanonicalName \u003d isCanonicalName(type);\n             final String typeName \u003d getTypeName(type, isCanonicalName);\n-\n-            result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n-                     || immutableClassShortNames.contains(typeName)\n-                     || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n+            final DetailAST typeArgs \u003d getGenericTypeArgs(type, isCanonicalName);\n+            if (typeArgs \u003d\u003d null) {\n+                result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n+                    || immutableClassShortNames.contains(typeName)\n+                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n+            }\n+            else {\n+                final List\u003cString\u003e argsClassNames \u003d getTypeArgsClassNames(typeArgs);\n+                result \u003d (immutableClassShortNames.contains(typeName)\n+                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName))\n+                    \u0026\u0026 areImmutableTypeArguments(argsClassNames);\n+            }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isImmutableField(DetailAST variableDef) {\n        boolean result \u003d false;\n        if (isFinalField(variableDef)) {\n            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n            final boolean isCanonicalName \u003d isCanonicalName(type);\n            final String typeName \u003d getTypeName(type, isCanonicalName);\n            final DetailAST typeArgs \u003d getGenericTypeArgs(type, isCanonicalName);\n            if (typeArgs \u003d\u003d null) {\n                result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n                    || immutableClassShortNames.contains(typeName)\n                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n            }\n            else {\n                final List\u003cString\u003e argsClassNames \u003d getTypeArgsClassNames(typeArgs);\n                result \u003d (immutableClassShortNames.contains(typeName)\n                    || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName))\n                    \u0026\u0026 areImmutableTypeArguments(argsClassNames);\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "57c24460e70860f1851c60db0a939ff46b2bb54c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2971: Add allowPublicFinalFields option for VisibilityModifier (#3207)",
      "commitDate": "03/06/16 5:40 AM",
      "commitName": "57c24460e70860f1851c60db0a939ff46b2bb54c",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "01/03/16 6:35 AM",
      "commitNameOld": "cc536c2b9186d746fbf9b16026a6e95d11e67283",
      "commitAuthorOld": "Andrej Vano",
      "daysBetweenCommits": 93.92,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,13 @@\n     private boolean isImmutableField(DetailAST variableDef) {\n         boolean result \u003d false;\n-\n-        final DetailAST modifiers \u003d variableDef.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n-        if (isFinal) {\n+        if (isFinalField(variableDef)) {\n             final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n             final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n             final String typeName \u003d getTypeName(type, isCanonicalName);\n \n             result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n                      || immutableClassShortNames.contains(typeName)\n                      || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isImmutableField(DetailAST variableDef) {\n        boolean result \u003d false;\n        if (isFinalField(variableDef)) {\n            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n            final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n            final String typeName \u003d getTypeName(type, isCanonicalName);\n\n            result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n                     || immutableClassShortNames.contains(typeName)\n                     || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/03/15 5:14 PM",
      "commitNameOld": "5f68bb50fd191fec409f5edb90755a18fce3e0ac",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 2.85,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private boolean isImmutableField(DetailAST variableDef)\n     {\n         boolean result \u003d false;\n \n         final DetailAST modifiers \u003d variableDef.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n         if (isFinal) {\n             final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n             final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n             final String typeName \u003d getTypeName(type, isCanonicalName);\n \n-            result \u003d (!isCanonicalName \u0026\u0026 isPrimitive(type))\n+            result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n                      || immutableClassShortNames.contains(typeName)\n-                     || (isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName));\n+                     || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isImmutableField(DetailAST variableDef)\n    {\n        boolean result \u003d false;\n\n        final DetailAST modifiers \u003d variableDef.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n        if (isFinal) {\n            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n            final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n            final String typeName \u003d getTypeName(type, isCanonicalName);\n\n            result \u003d !isCanonicalName \u0026\u0026 isPrimitive(type)\n                     || immutableClassShortNames.contains(typeName)\n                     || isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "f9f60d3142533c3eebff775e8eb1159935faaba1": {
      "type": "Yintroduced",
      "commitMessage": "Visibility Modifier Check, added option allows public immutable fields, issue #61\n",
      "commitDate": "26/02/15 12:35 PM",
      "commitName": "f9f60d3142533c3eebff775e8eb1159935faaba1",
      "commitAuthor": "alexkravin",
      "diff": "@@ -0,0 +1,17 @@\n+    private boolean isImmutableField(DetailAST variableDef)\n+    {\n+        boolean result \u003d false;\n+\n+        final DetailAST modifiers \u003d variableDef.findFirstToken(TokenTypes.MODIFIERS);\n+        final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n+        if (isFinal) {\n+            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n+            final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n+            final String typeName \u003d getTypeName(type, isCanonicalName);\n+\n+            result \u003d (!isCanonicalName \u0026\u0026 isPrimitive(type))\n+                     || immutableClassShortNames.contains(typeName)\n+                     || (isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName));\n+        }\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isImmutableField(DetailAST variableDef)\n    {\n        boolean result \u003d false;\n\n        final DetailAST modifiers \u003d variableDef.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n        if (isFinal) {\n            final DetailAST type \u003d variableDef.findFirstToken(TokenTypes.TYPE);\n            final boolean isCanonicalName \u003d type.getFirstChild().getType() \u003d\u003d TokenTypes.DOT;\n            final String typeName \u003d getTypeName(type, isCanonicalName);\n\n            result \u003d (!isCanonicalName \u0026\u0026 isPrimitive(type))\n                     || immutableClassShortNames.contains(typeName)\n                     || (isCanonicalName \u0026\u0026 immutableClassCanonicalNames.contains(typeName));\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java"
    }
  }
}