{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImportControlLoader.java",
  "functionName": "startElement",
  "functionId": "startElement___namespaceUri-String__localName-String__qName-String__attributes-Attributes",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
  "functionStartLine": 160,
  "functionEndLine": 194,
  "numCommitsSeen": 142,
  "timeTaken": 4540,
  "changeHistory": [
    "e018b2d6622efa4f1897244856974c45efeda99c",
    "6129b4e7c9532e6a40e95d044cbb758faa43bc73",
    "5c40f7d45d541f53abc912020c7d01bc82ac92b5",
    "93645309d51e68d0a6f1ba42c383b6015ced780f",
    "5530d4c27d508c513b68af67aadede84b4cfa102",
    "e9b3b9cdede98c359157dd8ccb501901ebe4ca88",
    "63e8c1dd4e1da443c8533d40640fe1a3b371afe8",
    "9586ee86d174ff502b9c57332b29f4b6e88e45ec",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "d282053d9ce02c13c779decfd079a8305086f752",
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
    "26513d52336c42432ee21565b253297ba4174530",
    "35fc8622d0e369fb3ddb00e7a21b951d67f98323",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "e292d5fa53a78828d45565e27d305eb3f7cb9d6a",
    "79404974eff1458f4243f8acd6a08b6a8b869342",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "a5d30bf353dde01376d45fb031d9236b11a835d1",
    "1951594e90a04aa2f2b14021ce3318604218ba19"
  ],
  "changeHistoryShort": {
    "e018b2d6622efa4f1897244856974c45efeda99c": "Ybodychange",
    "6129b4e7c9532e6a40e95d044cbb758faa43bc73": "Ybodychange",
    "5c40f7d45d541f53abc912020c7d01bc82ac92b5": "Yparametermetachange",
    "93645309d51e68d0a6f1ba42c383b6015ced780f": "Ybodychange",
    "5530d4c27d508c513b68af67aadede84b4cfa102": "Ybodychange",
    "e9b3b9cdede98c359157dd8ccb501901ebe4ca88": "Ybodychange",
    "63e8c1dd4e1da443c8533d40640fe1a3b371afe8": "Ybodychange",
    "9586ee86d174ff502b9c57332b29f4b6e88e45ec": "Yparameterchange",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "d282053d9ce02c13c779decfd079a8305086f752": "Yparameterchange",
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": "Ymultichange(Yparameterchange,Ybodychange)",
    "26513d52336c42432ee21565b253297ba4174530": "Ybodychange",
    "35fc8622d0e369fb3ddb00e7a21b951d67f98323": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ybodychange",
    "e292d5fa53a78828d45565e27d305eb3f7cb9d6a": "Ybodychange",
    "79404974eff1458f4243f8acd6a08b6a8b869342": "Ybodychange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "a5d30bf353dde01376d45fb031d9236b11a835d1": "Ybodychange",
    "1951594e90a04aa2f2b14021ce3318604218ba19": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e018b2d6622efa4f1897244856974c45efeda99c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3492: add ability to control imports in certain files",
      "commitDate": "20/04/18 5:56 PM",
      "commitName": "e018b2d6622efa4f1897244856974c45efeda99c",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/04/18 11:55 AM",
      "commitNameOld": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,35 @@\n     public void startElement(String namespaceUri,\n                              String localName,\n                              String qName,\n                              Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n+            stack.push(new PkgImportControl(pkg, regex, strategyOnMismatch));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n-            final String name \u003d safeGet(attributes, \"name\");\n+            final String name \u003d safeGet(attributes, NAME_ATTRIBUTE_NAME);\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            final ImportControl parentImportControl \u003d stack.peek();\n-            final ImportControl importControl \u003d new ImportControl(parentImportControl, name,\n-                    regex, strategyOnMismatch);\n+            final PkgImportControl parentImportControl \u003d (PkgImportControl) stack.peek();\n+            final AbstractImportControl importControl \u003d new PkgImportControl(parentImportControl,\n+                    name, regex, strategyOnMismatch);\n+            parentImportControl.addChild(importControl);\n+            stack.push(importControl);\n+        }\n+        else if (FILE_ELEMENT_NAME.equals(qName)) {\n+            final String name \u003d safeGet(attributes, NAME_ATTRIBUTE_NAME);\n+            final boolean regex \u003d containsRegexAttribute(attributes);\n+            final PkgImportControl parentImportControl \u003d (PkgImportControl) stack.peek();\n+            final AbstractImportControl importControl \u003d new FileImportControl(parentImportControl,\n+                    name, regex);\n             parentImportControl.addChild(importControl);\n             stack.push(importControl);\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n-            // Need to handle either \"pkg\" or \"class\" attribute.\n-            // May have \"exact-match\" for \"pkg\"\n-            // May have \"local-only\"\n-            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n-            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n-            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n-            final boolean regex \u003d containsRegexAttribute(attributes);\n-            final AbstractImportRule rule;\n-            if (pkg \u003d\u003d null) {\n-                // handle class names which can be normal class names or regular\n-                // expressions\n-                final String clazz \u003d safeGet(attributes, \"class\");\n-                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n-            }\n-            else {\n-                final boolean exactMatch \u003d\n-                        attributes.getValue(\"exact-match\") !\u003d null;\n-                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n-            }\n+            final AbstractImportRule rule \u003d createImportRule(qName, attributes);\n             stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(String namespaceUri,\n                             String localName,\n                             String qName,\n                             Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new PkgImportControl(pkg, regex, strategyOnMismatch));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, NAME_ATTRIBUTE_NAME);\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final PkgImportControl parentImportControl \u003d (PkgImportControl) stack.peek();\n            final AbstractImportControl importControl \u003d new PkgImportControl(parentImportControl,\n                    name, regex, strategyOnMismatch);\n            parentImportControl.addChild(importControl);\n            stack.push(importControl);\n        }\n        else if (FILE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, NAME_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final PkgImportControl parentImportControl \u003d (PkgImportControl) stack.peek();\n            final AbstractImportControl importControl \u003d new FileImportControl(parentImportControl,\n                    name, regex);\n            parentImportControl.addChild(importControl);\n            stack.push(importControl);\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            final AbstractImportRule rule \u003d createImportRule(qName, attributes);\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "6129b4e7c9532e6a40e95d044cbb758faa43bc73": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4863: fix ThisEscapedInConstructor idea violation for ImportControl class\n",
      "commitDate": "20/08/17 5:49 AM",
      "commitName": "6129b4e7c9532e6a40e95d044cbb758faa43bc73",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "23/06/17 9:34 AM",
      "commitNameOld": "5c40f7d45d541f53abc912020c7d01bc82ac92b5",
      "commitAuthorOld": "sharang108",
      "daysBetweenCommits": 57.84,
      "commitsBetweenForRepo": 308,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n     public void startElement(String namespaceUri,\n                              String localName,\n                              String qName,\n                              Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new ImportControl(stack.peek(), name, regex, strategyOnMismatch));\n+            final ImportControl parentImportControl \u003d stack.peek();\n+            final ImportControl importControl \u003d new ImportControl(parentImportControl, name,\n+                    regex, strategyOnMismatch);\n+            parentImportControl.addChild(importControl);\n+            stack.push(importControl);\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             final AbstractImportRule rule;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(String namespaceUri,\n                             String localName,\n                             String qName,\n                             Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final ImportControl parentImportControl \u003d stack.peek();\n            final ImportControl importControl \u003d new ImportControl(parentImportControl, name,\n                    regex, strategyOnMismatch);\n            parentImportControl.addChild(importControl);\n            stack.push(importControl);\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final AbstractImportRule rule;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "5c40f7d45d541f53abc912020c7d01bc82ac92b5": {
      "type": "Yparametermetachange",
      "commitMessage": "Issue #4353: refactoring: remove \u0027final\u0027 modifier from all arguments of method/c-tor at ImportControlCheck and around\n",
      "commitDate": "23/06/17 9:34 AM",
      "commitName": "5c40f7d45d541f53abc912020c7d01bc82ac92b5",
      "commitAuthor": "sharang108",
      "commitDateOld": "12/06/17 10:11 AM",
      "commitNameOld": "4a087c020c2b97130e94f9292b94cb4bc1f6ed93",
      "commitAuthorOld": "sagar-shah94",
      "daysBetweenCommits": 10.97,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n-    public void startElement(final String namespaceUri,\n-                             final String localName,\n-                             final String qName,\n-                             final Attributes attributes)\n+    public void startElement(String namespaceUri,\n+                             String localName,\n+                             String qName,\n+                             Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             stack.push(new ImportControl(stack.peek(), name, regex, strategyOnMismatch));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             final AbstractImportRule rule;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(String namespaceUri,\n                             String localName,\n                             String qName,\n                             Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(stack.peek(), name, regex, strategyOnMismatch));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final AbstractImportRule rule;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {
        "oldValue": "[namespaceUri-String(modifiers-final), localName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]",
        "newValue": "[namespaceUri-String, localName-String, qName-String, attributes-Attributes]"
      }
    },
    "93645309d51e68d0a6f1ba42c383b6015ced780f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4274: ImportControl: strategyOnMismatch property\n",
      "commitDate": "28/05/17 4:22 PM",
      "commitName": "93645309d51e68d0a6f1ba42c383b6015ced780f",
      "commitAuthor": "Tima",
      "commitDateOld": "12/04/17 11:25 AM",
      "commitNameOld": "739ec9427d4cb94962daf7a88402e9ca07b6094e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 46.21,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n     public void startElement(final String namespaceUri,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n+            final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new ImportControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n+            final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new ImportControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex, strategyOnMismatch));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             final AbstractImportRule rule;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceUri,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForImportControl(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final MismatchStrategy strategyOnMismatch \u003d getStrategyForSubpackage(attributes);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(stack.peek(), name, regex, strategyOnMismatch));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final AbstractImportRule rule;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "5530d4c27d508c513b68af67aadede84b4cfa102": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3514: Rename PkgControl to ImportControl\n",
      "commitDate": "25/10/16 9:46 PM",
      "commitName": "5530d4c27d508c513b68af67aadede84b4cfa102",
      "commitAuthor": "Jochen Van de Velde",
      "commitDateOld": "23/10/16 12:12 PM",
      "commitNameOld": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88",
      "commitAuthorOld": "Jochen Van de Velde",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceUri,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(pkg, regex));\n+            stack.push(new ImportControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            stack.push(new PkgControl(stack.peek(), name, regex));\n+            stack.push(new ImportControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             final AbstractImportRule rule;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceUri,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(pkg, regex));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new ImportControl(stack.peek(), name, regex));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final AbstractImportRule rule;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "e9b3b9cdede98c359157dd8ccb501901ebe4ca88": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3497: Split Guard class in two\n",
      "commitDate": "23/10/16 12:12 PM",
      "commitName": "e9b3b9cdede98c359157dd8ccb501901ebe4ca88",
      "commitAuthor": "Jochen Van de Velde",
      "commitDateOld": "18/10/16 3:40 PM",
      "commitNameOld": "63e8c1dd4e1da443c8533d40640fe1a3b371afe8",
      "commitAuthorOld": "Volker Boerchers",
      "daysBetweenCommits": 4.86,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n     public void startElement(final String namespaceUri,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             stack.push(new PkgControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             final boolean regex \u003d containsRegexAttribute(attributes);\n             stack.push(new PkgControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d containsRegexAttribute(attributes);\n-            final Guard guard;\n+            final AbstractImportRule rule;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n-                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n+                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n-                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n+                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n-\n-            final PkgControl pkgControl \u003d stack.peek();\n-            pkgControl.addGuard(guard);\n+            stack.peek().addImportRule(rule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceUri,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new PkgControl(pkg, regex));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new PkgControl(stack.peek(), name, regex));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final AbstractImportRule rule;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                rule \u003d new ClassImportRule(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                rule \u003d new PkgImportRule(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            stack.peek().addImportRule(rule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "63e8c1dd4e1da443c8533d40640fe1a3b371afe8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2999: allow regex in subpackage and importcontrol element\n",
      "commitDate": "18/10/16 3:40 PM",
      "commitName": "63e8c1dd4e1da443c8533d40640fe1a3b371afe8",
      "commitAuthor": "Volker Boerchers",
      "commitDateOld": "07/05/16 9:41 AM",
      "commitNameOld": "871b20e88b5bfedb324f3e1996b37d0c68eb727b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 164.25,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n     public void startElement(final String namespaceUri,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n             throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n-            stack.push(new PkgControl(pkg));\n+            final boolean regex \u003d containsRegexAttribute(attributes);\n+            stack.push(new PkgControl(pkg, regex));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n-            stack.push(new PkgControl(stack.peek(), name));\n+            final boolean regex \u003d containsRegexAttribute(attributes);\n+            stack.push(new PkgControl(stack.peek(), name, regex));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n-            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n+            final boolean regex \u003d containsRegexAttribute(attributes);\n             final Guard guard;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n \n             final PkgControl pkgControl \u003d stack.peek();\n             pkgControl.addGuard(guard);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceUri,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n            throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new PkgControl(pkg, regex));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            stack.push(new PkgControl(stack.peek(), name, regex));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d containsRegexAttribute(attributes);\n            final Guard guard;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n\n            final PkgControl pkgControl \u003d stack.peek();\n            pkgControl.addGuard(guard);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "9586ee86d174ff502b9c57332b29f4b6e88e45ec": {
      "type": "Yparameterchange",
      "commitMessage": "Issue #2639: URI is removed from allowed abbreviations\n",
      "commitDate": "25/11/15 7:36 AM",
      "commitName": "9586ee86d174ff502b9c57332b29f4b6e88e45ec",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "01/11/15 5:41 AM",
      "commitNameOld": "346387c717048391485fb28f877531aab1095de1",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 24.08,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-    public void startElement(final String namespaceURI,\n+    public void startElement(final String namespaceUri,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n             final Guard guard;\n             if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n             else {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n \n             final PkgControl pkgControl \u003d stack.peek();\n             pkgControl.addGuard(guard);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceUri,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard guard;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n\n            final PkgControl pkgControl \u003d stack.peek();\n            pkgControl.addGuard(guard);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {
        "oldValue": "[namespaceURI-String(modifiers-final), localName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]",
        "newValue": "[namespaceUri-String(modifiers-final), localName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]"
      }
    },
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:56 PM",
      "commitName": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "06/10/15 5:46 PM",
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n             final Guard guard;\n-            if (pkg !\u003d null) {\n-                final boolean exactMatch \u003d\n-                        attributes.getValue(\"exact-match\") !\u003d null;\n-                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n-            }\n-            else {\n+            if (pkg \u003d\u003d null) {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n+            else {\n+                final boolean exactMatch \u003d\n+                        attributes.getValue(\"exact-match\") !\u003d null;\n+                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n+            }\n \n             final PkgControl pkgControl \u003d stack.peek();\n             pkgControl.addGuard(guard);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard guard;\n            if (pkg \u003d\u003d null) {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n            else {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n\n            final PkgControl pkgControl \u003d stack.peek();\n            pkgControl.addGuard(guard);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "24/09/15 3:10 PM",
      "commitNameOld": "d282053d9ce02c13c779decfd079a8305086f752",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 12.11,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String localName,\n                              final String qName,\n                              final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n-            final Guard g;\n+            final Guard guard;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n-                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n+                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n-                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n+                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n-            final PkgControl pc \u003d stack.peek();\n-            pc.addGuard(g);\n+            final PkgControl pkgControl \u003d stack.peek();\n+            pkgControl.addGuard(guard);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard guard;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                guard \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                guard \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pkgControl \u003d stack.peek();\n            pkgControl.addGuard(guard);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "d282053d9ce02c13c779decfd079a8305086f752": {
      "type": "Yparameterchange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "24/09/15 3:10 PM",
      "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "31/08/15 10:02 AM",
      "commitNameOld": "5ca96679525171c73fc4d5c257301f51d2100071",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 24.21,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n-                             final String locqName,\n+                             final String localName,\n                              final String qName,\n                              final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                         attributes.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(attributes, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String localName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {
        "oldValue": "[namespaceURI-String(modifiers-final), locqName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]",
        "newValue": "[namespaceURI-String(modifiers-final), localName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]"
      }
    },
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "27/08/15 10:26 PM",
      "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
          "commitDate": "27/08/15 10:26 PM",
          "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "25/08/15 5:20 AM",
          "commitNameOld": "26513d52336c42432ee21565b253297ba4174530",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 2.71,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String locqName,\n                              final String qName,\n-                             final Attributes atts)\n+                             final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n-            final String pkg \u003d safeGet(atts, PKG_ATTRIBUTE_NAME);\n+            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n-            final String name \u003d safeGet(atts, \"name\");\n+            final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n-            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n-            final String pkg \u003d atts.getValue(PKG_ATTRIBUTE_NAME);\n-            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n+            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n+            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n+            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n-                        atts.getValue(\"exact-match\") !\u003d null;\n+                        attributes.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n-                final String clazz \u003d safeGet(atts, \"class\");\n+                final String clazz \u003d safeGet(attributes, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
          "extendedDetails": {
            "oldValue": "[namespaceURI-String(modifiers-final), locqName-String(modifiers-final), qName-String(modifiers-final), atts-Attributes(modifiers-final)]",
            "newValue": "[namespaceURI-String(modifiers-final), locqName-String(modifiers-final), qName-String(modifiers-final), attributes-Attributes(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
          "commitDate": "27/08/15 10:26 PM",
          "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "25/08/15 5:20 AM",
          "commitNameOld": "26513d52336c42432ee21565b253297ba4174530",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 2.71,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String locqName,\n                              final String qName,\n-                             final Attributes atts)\n+                             final Attributes attributes)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n-            final String pkg \u003d safeGet(atts, PKG_ATTRIBUTE_NAME);\n+            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n         else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n-            final String name \u003d safeGet(atts, \"name\");\n+            final String name \u003d safeGet(attributes, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n-            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n-            final String pkg \u003d atts.getValue(PKG_ATTRIBUTE_NAME);\n-            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n+            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n+            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n+            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n-                        atts.getValue(\"exact-match\") !\u003d null;\n+                        attributes.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n-                final String clazz \u003d safeGet(atts, \"class\");\n+                final String clazz \u003d safeGet(attributes, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes attributes)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(attributes, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(attributes, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d attributes.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d attributes.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d attributes.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        attributes.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(attributes, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
          "extendedDetails": {}
        }
      ]
    },
    "26513d52336c42432ee21565b253297ba4174530": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": "25/08/15 5:20 AM",
      "commitName": "26513d52336c42432ee21565b253297ba4174530",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "18/08/15 1:25 AM",
      "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String locqName,\n                              final String qName,\n                              final Attributes atts)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n-            final String pkg \u003d safeGet(atts, \"pkg\");\n+            final String pkg \u003d safeGet(atts, PKG_ATTRIBUTE_NAME);\n             stack.push(new PkgControl(pkg));\n         }\n-        else if (\"subpackage\".equals(qName)) {\n+        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n             final String name \u003d safeGet(atts, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n-        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n+        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n-            final boolean isAllow \u003d \"allow\".equals(qName);\n+            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n             final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n-            final String pkg \u003d atts.getValue(\"pkg\");\n+            final String pkg \u003d atts.getValue(PKG_ATTRIBUTE_NAME);\n             final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                         atts.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(atts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes atts)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(atts, PKG_ATTRIBUTE_NAME);\n            stack.push(new PkgControl(pkg));\n        }\n        else if (SUBPACKAGE_ELEMENT_NAME.equals(qName)) {\n            final String name \u003d safeGet(atts, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (ALLOW_ELEMENT_NAME.equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d ALLOW_ELEMENT_NAME.equals(qName);\n            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d atts.getValue(PKG_ATTRIBUTE_NAME);\n            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        atts.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(atts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "35fc8622d0e369fb3ddb00e7a21b951d67f98323": {
      "type": "Ybodychange",
      "commitMessage": "Removed asserts from 3 classes #1305\n",
      "commitDate": "06/07/15 11:31 PM",
      "commitName": "35fc8622d0e369fb3ddb00e7a21b951d67f98323",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 50.78,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,38 @@\n     public void startElement(final String namespaceURI,\n                              final String locqName,\n                              final String qName,\n                              final Attributes atts)\n         throws SAXException {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(atts, \"pkg\");\n             stack.push(new PkgControl(pkg));\n         }\n         else if (\"subpackage\".equals(qName)) {\n-            assert !stack.isEmpty();\n             final String name \u003d safeGet(atts, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n-            assert !stack.isEmpty();\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d \"allow\".equals(qName);\n             final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d atts.getValue(\"pkg\");\n             final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                         atts.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(atts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes atts)\n        throws SAXException {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(atts, \"pkg\");\n            stack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(qName)) {\n            final String name \u003d safeGet(atts, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(qName);\n            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d atts.getValue(\"pkg\");\n            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        atts.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(atts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public void startElement(final String namespaceURI,\n                              final String locqName,\n                              final String qName,\n                              final Attributes atts)\n         throws SAXException\n     {\n         if (\"import-control\".equals(qName)) {\n             final String pkg \u003d safeGet(atts, \"pkg\");\n             stack.push(new PkgControl(pkg));\n         }\n         else if (\"subpackage\".equals(qName)) {\n             assert !stack.isEmpty();\n             final String name \u003d safeGet(atts, \"name\");\n             stack.push(new PkgControl(stack.peek(), name));\n         }\n         else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n             assert !stack.isEmpty();\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d \"allow\".equals(qName);\n-            final boolean isLocalOnly \u003d (atts.getValue(\"local-only\") !\u003d null);\n+            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n             final String pkg \u003d atts.getValue(\"pkg\");\n-            final boolean regex \u003d (atts.getValue(\"regex\") !\u003d null);\n+            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n-                    (atts.getValue(\"exact-match\") !\u003d null);\n+                        atts.getValue(\"exact-match\") !\u003d null;\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(atts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes atts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(atts, \"pkg\");\n            stack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(qName)) {\n            assert !stack.isEmpty();\n            final String name \u003d safeGet(atts, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n            assert !stack.isEmpty();\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(qName);\n            final boolean isLocalOnly \u003d atts.getValue(\"local-only\") !\u003d null;\n            final String pkg \u003d atts.getValue(\"pkg\");\n            final boolean regex \u003d atts.getValue(\"regex\") !\u003d null;\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                        atts.getValue(\"exact-match\") !\u003d null;\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(atts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-    public void startElement(final String aNamespaceURI,\n-                             final String aLocalName,\n-                             final String aQName,\n-                             final Attributes aAtts)\n+    public void startElement(final String namespaceURI,\n+                             final String locqName,\n+                             final String qName,\n+                             final Attributes atts)\n         throws SAXException\n     {\n-        if (\"import-control\".equals(aQName)) {\n-            final String pkg \u003d safeGet(aAtts, \"pkg\");\n-            mStack.push(new PkgControl(pkg));\n+        if (\"import-control\".equals(qName)) {\n+            final String pkg \u003d safeGet(atts, \"pkg\");\n+            stack.push(new PkgControl(pkg));\n         }\n-        else if (\"subpackage\".equals(aQName)) {\n-            assert !mStack.isEmpty();\n-            final String name \u003d safeGet(aAtts, \"name\");\n-            mStack.push(new PkgControl(mStack.peek(), name));\n+        else if (\"subpackage\".equals(qName)) {\n+            assert !stack.isEmpty();\n+            final String name \u003d safeGet(atts, \"name\");\n+            stack.push(new PkgControl(stack.peek(), name));\n         }\n-        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n-            assert !mStack.isEmpty();\n+        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n+            assert !stack.isEmpty();\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n-            final boolean isAllow \u003d \"allow\".equals(aQName);\n-            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n-            final String pkg \u003d aAtts.getValue(\"pkg\");\n-            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n+            final boolean isAllow \u003d \"allow\".equals(qName);\n+            final boolean isLocalOnly \u003d (atts.getValue(\"local-only\") !\u003d null);\n+            final String pkg \u003d atts.getValue(\"pkg\");\n+            final boolean regex \u003d (atts.getValue(\"regex\") !\u003d null);\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n-                    (aAtts.getValue(\"exact-match\") !\u003d null);\n+                    (atts.getValue(\"exact-match\") !\u003d null);\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n-                final String clazz \u003d safeGet(aAtts, \"class\");\n+                final String clazz \u003d safeGet(atts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n-            final PkgControl pc \u003d mStack.peek();\n+            final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes atts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(atts, \"pkg\");\n            stack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(qName)) {\n            assert !stack.isEmpty();\n            final String name \u003d safeGet(atts, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n            assert !stack.isEmpty();\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(qName);\n            final boolean isLocalOnly \u003d (atts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d atts.getValue(\"pkg\");\n            final boolean regex \u003d (atts.getValue(\"regex\") !\u003d null);\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (atts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(atts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
          "extendedDetails": {
            "oldValue": "[aNamespaceURI-String(modifiers-final), aLocalName-String(modifiers-final), aQName-String(modifiers-final), aAtts-Attributes(modifiers-final)]",
            "newValue": "[namespaceURI-String(modifiers-final), locqName-String(modifiers-final), qName-String(modifiers-final), atts-Attributes(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-    public void startElement(final String aNamespaceURI,\n-                             final String aLocalName,\n-                             final String aQName,\n-                             final Attributes aAtts)\n+    public void startElement(final String namespaceURI,\n+                             final String locqName,\n+                             final String qName,\n+                             final Attributes atts)\n         throws SAXException\n     {\n-        if (\"import-control\".equals(aQName)) {\n-            final String pkg \u003d safeGet(aAtts, \"pkg\");\n-            mStack.push(new PkgControl(pkg));\n+        if (\"import-control\".equals(qName)) {\n+            final String pkg \u003d safeGet(atts, \"pkg\");\n+            stack.push(new PkgControl(pkg));\n         }\n-        else if (\"subpackage\".equals(aQName)) {\n-            assert !mStack.isEmpty();\n-            final String name \u003d safeGet(aAtts, \"name\");\n-            mStack.push(new PkgControl(mStack.peek(), name));\n+        else if (\"subpackage\".equals(qName)) {\n+            assert !stack.isEmpty();\n+            final String name \u003d safeGet(atts, \"name\");\n+            stack.push(new PkgControl(stack.peek(), name));\n         }\n-        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n-            assert !mStack.isEmpty();\n+        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n+            assert !stack.isEmpty();\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n-            final boolean isAllow \u003d \"allow\".equals(aQName);\n-            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n-            final String pkg \u003d aAtts.getValue(\"pkg\");\n-            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n+            final boolean isAllow \u003d \"allow\".equals(qName);\n+            final boolean isLocalOnly \u003d (atts.getValue(\"local-only\") !\u003d null);\n+            final String pkg \u003d atts.getValue(\"pkg\");\n+            final boolean regex \u003d (atts.getValue(\"regex\") !\u003d null);\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n-                    (aAtts.getValue(\"exact-match\") !\u003d null);\n+                    (atts.getValue(\"exact-match\") !\u003d null);\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n-                final String clazz \u003d safeGet(aAtts, \"class\");\n+                final String clazz \u003d safeGet(atts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n-            final PkgControl pc \u003d mStack.peek();\n+            final PkgControl pc \u003d stack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void startElement(final String namespaceURI,\n                             final String locqName,\n                             final String qName,\n                             final Attributes atts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(qName)) {\n            final String pkg \u003d safeGet(atts, \"pkg\");\n            stack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(qName)) {\n            assert !stack.isEmpty();\n            final String name \u003d safeGet(atts, \"name\");\n            stack.push(new PkgControl(stack.peek(), name));\n        }\n        else if (\"allow\".equals(qName) || \"disallow\".equals(qName)) {\n            assert !stack.isEmpty();\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(qName);\n            final boolean isLocalOnly \u003d (atts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d atts.getValue(\"pkg\");\n            final boolean regex \u003d (atts.getValue(\"regex\") !\u003d null);\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (atts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(atts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d stack.peek();\n            pc.addGuard(g);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(aQName)) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(aQName)) {\n            assert !mStack.isEmpty();\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl(mStack.peek(), name));\n        }\n        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n            assert !mStack.isEmpty();\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(aQName);\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ybodychange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "05/12/13 9:12 AM",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "06/10/13 11:31 PM",
      "commitNameOld": "07939ec7261d7e9e7c8d1492090d6d19d5f98887",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     public void startElement(final String aNamespaceURI,\n                              final String aLocalName,\n                              final String aQName,\n                              final Attributes aAtts)\n         throws SAXException\n     {\n         if (\"import-control\".equals(aQName)) {\n             final String pkg \u003d safeGet(aAtts, \"pkg\");\n             mStack.push(new PkgControl(pkg));\n         }\n         else if (\"subpackage\".equals(aQName)) {\n-            assert mStack.size() \u003e 0;\n+            assert !mStack.isEmpty();\n             final String name \u003d safeGet(aAtts, \"name\");\n             mStack.push(new PkgControl(mStack.peek(), name));\n         }\n         else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n-            assert mStack.size() \u003e 0;\n+            assert !mStack.isEmpty();\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d \"allow\".equals(aQName);\n             final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n             final String pkg \u003d aAtts.getValue(\"pkg\");\n             final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                     (aAtts.getValue(\"exact-match\") !\u003d null);\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n                 // handle class names which can be normal class names or regular\n                 // expressions\n                 final String clazz \u003d safeGet(aAtts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d mStack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(aQName)) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(aQName)) {\n            assert !mStack.isEmpty();\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl(mStack.peek(), name));\n        }\n        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n            assert !mStack.isEmpty();\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(aQName);\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "e292d5fa53a78828d45565e27d305eb3f7cb9d6a": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced the ImportContro check to support regular expressions. Thanks to lbaeumer for patch #2937442.\n",
      "commitDate": "14/02/10 2:24 AM",
      "commitName": "e292d5fa53a78828d45565e27d305eb3f7cb9d6a",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "12/02/10 6:57 PM",
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n     public void startElement(final String aNamespaceURI,\n                              final String aLocalName,\n                              final String aQName,\n                              final Attributes aAtts)\n         throws SAXException\n     {\n         if (\"import-control\".equals(aQName)) {\n             final String pkg \u003d safeGet(aAtts, \"pkg\");\n             mStack.push(new PkgControl(pkg));\n         }\n         else if (\"subpackage\".equals(aQName)) {\n             assert mStack.size() \u003e 0;\n             final String name \u003d safeGet(aAtts, \"name\");\n             mStack.push(new PkgControl(mStack.peek(), name));\n         }\n         else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n             assert mStack.size() \u003e 0;\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d \"allow\".equals(aQName);\n             final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n             final String pkg \u003d aAtts.getValue(\"pkg\");\n+            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                     (aAtts.getValue(\"exact-match\") !\u003d null);\n-                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n+                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n             }\n             else {\n+                // handle class names which can be normal class names or regular\n+                // expressions\n                 final String clazz \u003d safeGet(aAtts, \"class\");\n-                g \u003d new Guard(isAllow, isLocalOnly, clazz);\n+                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n             }\n \n             final PkgControl pc \u003d mStack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(aQName)) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(aQName)) {\n            assert mStack.size() \u003e 0;\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl(mStack.peek(), name));\n        }\n        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n            assert mStack.size() \u003e 0;\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(aQName);\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final boolean regex \u003d (aAtts.getValue(\"regex\") !\u003d null);\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);\n            }\n            else {\n                // handle class names which can be normal class names or regular\n                // expressions\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz, regex);\n            }\n\n            final PkgControl pc \u003d mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "79404974eff1458f4243f8acd6a08b6a8b869342": {
      "type": "Ybodychange",
      "commitMessage": "Integrate patch #1895152, for Avoid Null Equals Comparison Check\n",
      "commitDate": "06/04/08 4:48 AM",
      "commitName": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 83.17,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String aNamespaceURI,\n                              final String aLocalName,\n                              final String aQName,\n                              final Attributes aAtts)\n         throws SAXException\n     {\n-        if (aQName.equals(\"import-control\")) {\n+        if (\"import-control\".equals(aQName)) {\n             final String pkg \u003d safeGet(aAtts, \"pkg\");\n             mStack.push(new PkgControl(pkg));\n         }\n-        else if (aQName.equals(\"subpackage\")) {\n+        else if (\"subpackage\".equals(aQName)) {\n             assert mStack.size() \u003e 0;\n             final String name \u003d safeGet(aAtts, \"name\");\n             mStack.push(new PkgControl(mStack.peek(), name));\n         }\n-        else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n+        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n             assert mStack.size() \u003e 0;\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n-            final boolean isAllow \u003d aQName.equals(\"allow\");\n+            final boolean isAllow \u003d \"allow\".equals(aQName);\n             final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n             final String pkg \u003d aAtts.getValue(\"pkg\");\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                     (aAtts.getValue(\"exact-match\") !\u003d null);\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n             }\n             else {\n                 final String clazz \u003d safeGet(aAtts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz);\n             }\n \n             final PkgControl pc \u003d mStack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (\"import-control\".equals(aQName)) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (\"subpackage\".equals(aQName)) {\n            assert mStack.size() \u003e 0;\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl(mStack.peek(), name));\n        }\n        else if (\"allow\".equals(aQName) || \"disallow\".equals(aQName)) {\n            assert mStack.size() \u003e 0;\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d \"allow\".equals(aQName);\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n            }\n            else {\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz);\n            }\n\n            final PkgControl pc \u003d mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": "15/12/07 12:14 AM",
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/07 9:02 PM",
      "commitNameOld": "7a6bf01c4dac8aedcdbd52aeed7500ba7a3ab0f8",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 194.18,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void startElement(final String aNamespaceURI,\n                              final String aLocalName,\n                              final String aQName,\n                              final Attributes aAtts)\n         throws SAXException\n     {\n         if (aQName.equals(\"import-control\")) {\n             final String pkg \u003d safeGet(aAtts, \"pkg\");\n             mStack.push(new PkgControl(pkg));\n         }\n         else if (aQName.equals(\"subpackage\")) {\n             assert mStack.size() \u003e 0;\n             final String name \u003d safeGet(aAtts, \"name\");\n-            mStack.push(new PkgControl((PkgControl) mStack.peek(), name));\n+            mStack.push(new PkgControl(mStack.peek(), name));\n         }\n         else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n             assert mStack.size() \u003e 0;\n             // Need to handle either \"pkg\" or \"class\" attribute.\n             // May have \"exact-match\" for \"pkg\"\n             // May have \"local-only\"\n             final boolean isAllow \u003d aQName.equals(\"allow\");\n             final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n             final String pkg \u003d aAtts.getValue(\"pkg\");\n             final Guard g;\n             if (pkg !\u003d null) {\n                 final boolean exactMatch \u003d\n                     (aAtts.getValue(\"exact-match\") !\u003d null);\n                 g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n             }\n             else {\n                 final String clazz \u003d safeGet(aAtts, \"class\");\n                 g \u003d new Guard(isAllow, isLocalOnly, clazz);\n             }\n \n-            final PkgControl pc \u003d (PkgControl) mStack.peek();\n+            final PkgControl pc \u003d mStack.peek();\n             pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (aQName.equals(\"import-control\")) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (aQName.equals(\"subpackage\")) {\n            assert mStack.size() \u003e 0;\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl(mStack.peek(), name));\n        }\n        else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n            assert mStack.size() \u003e 0;\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d aQName.equals(\"allow\");\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n            }\n            else {\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz);\n            }\n\n            final PkgControl pc \u003d mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "a5d30bf353dde01376d45fb031d9236b11a835d1": {
      "type": "Ybodychange",
      "commitMessage": "Added a lot more configuration options for the ImportControlCheck that\ncame out of using at work. I still need to improve the unit tests and\nproperly document the support options. Wanted to check in now for\nbackup.\n",
      "commitDate": "31/07/05 5:27 AM",
      "commitName": "a5d30bf353dde01376d45fb031d9236b11a835d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/07/05 1:29 PM",
      "commitNameOld": "1951594e90a04aa2f2b14021ce3318604218ba19",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 3.67,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,38 @@\n     public void startElement(final String aNamespaceURI,\n-        final String aLocalName, final String aQName, final Attributes aAtts)\n+                             final String aLocalName,\n+                             final String aQName,\n+                             final Attributes aAtts)\n         throws SAXException\n     {\n         if (aQName.equals(\"import-control\")) {\n             final String pkg \u003d safeGet(aAtts, \"pkg\");\n             mStack.push(new PkgControl(pkg));\n         }\n         else if (aQName.equals(\"subpackage\")) {\n             assert mStack.size() \u003e 0;\n             final String name \u003d safeGet(aAtts, \"name\");\n             mStack.push(new PkgControl((PkgControl) mStack.peek(), name));\n         }\n         else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n             assert mStack.size() \u003e 0;\n-            final String pkg \u003d safeGet(aAtts, \"pkg\");\n+            // Need to handle either \"pkg\" or \"class\" attribute.\n+            // May have \"exact-match\" for \"pkg\"\n+            // May have \"local-only\"\n+            final boolean isAllow \u003d aQName.equals(\"allow\");\n+            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n+            final String pkg \u003d aAtts.getValue(\"pkg\");\n+            final Guard g;\n+            if (pkg !\u003d null) {\n+                final boolean exactMatch \u003d\n+                    (aAtts.getValue(\"exact-match\") !\u003d null);\n+                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n+            }\n+            else {\n+                final String clazz \u003d safeGet(aAtts, \"class\");\n+                g \u003d new Guard(isAllow, isLocalOnly, clazz);\n+            }\n+\n             final PkgControl pc \u003d (PkgControl) mStack.peek();\n-            pc.addGuard(new Guard(aQName.equals(\"allow\"), pkg));\n+            pc.addGuard(g);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n                             final String aLocalName,\n                             final String aQName,\n                             final Attributes aAtts)\n        throws SAXException\n    {\n        if (aQName.equals(\"import-control\")) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (aQName.equals(\"subpackage\")) {\n            assert mStack.size() \u003e 0;\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl((PkgControl) mStack.peek(), name));\n        }\n        else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n            assert mStack.size() \u003e 0;\n            // Need to handle either \"pkg\" or \"class\" attribute.\n            // May have \"exact-match\" for \"pkg\"\n            // May have \"local-only\"\n            final boolean isAllow \u003d aQName.equals(\"allow\");\n            final boolean isLocalOnly \u003d (aAtts.getValue(\"local-only\") !\u003d null);\n            final String pkg \u003d aAtts.getValue(\"pkg\");\n            final Guard g;\n            if (pkg !\u003d null) {\n                final boolean exactMatch \u003d\n                    (aAtts.getValue(\"exact-match\") !\u003d null);\n                g \u003d new Guard(isAllow, isLocalOnly, pkg, exactMatch);\n            }\n            else {\n                final String clazz \u003d safeGet(aAtts, \"class\");\n                g \u003d new Guard(isAllow, isLocalOnly, clazz);\n            }\n\n            final PkgControl pc \u003d (PkgControl) mStack.peek();\n            pc.addGuard(g);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java",
      "extendedDetails": {}
    },
    "1951594e90a04aa2f2b14021ce3318604218ba19": {
      "type": "Yintroduced",
      "commitMessage": "Added the ImportControl check. This is a check that can be used to\nenforce which packages can import which packages. I was required to\ndevelop this for a large project to enforce application layering rules.\n\nThe check is fairly basic at the moment, but is still sufficiently\npowerful to be useful. I am sure there will be feature requests in the\nfuture.\n",
      "commitDate": "27/07/05 1:29 PM",
      "commitName": "1951594e90a04aa2f2b14021ce3318604218ba19",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,20 @@\n+    public void startElement(final String aNamespaceURI,\n+        final String aLocalName, final String aQName, final Attributes aAtts)\n+        throws SAXException\n+    {\n+        if (aQName.equals(\"import-control\")) {\n+            final String pkg \u003d safeGet(aAtts, \"pkg\");\n+            mStack.push(new PkgControl(pkg));\n+        }\n+        else if (aQName.equals(\"subpackage\")) {\n+            assert mStack.size() \u003e 0;\n+            final String name \u003d safeGet(aAtts, \"name\");\n+            mStack.push(new PkgControl((PkgControl) mStack.peek(), name));\n+        }\n+        else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n+            assert mStack.size() \u003e 0;\n+            final String pkg \u003d safeGet(aAtts, \"pkg\");\n+            final PkgControl pc \u003d (PkgControl) mStack.peek();\n+            pc.addGuard(new Guard(aQName.equals(\"allow\"), pkg));\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void startElement(final String aNamespaceURI,\n        final String aLocalName, final String aQName, final Attributes aAtts)\n        throws SAXException\n    {\n        if (aQName.equals(\"import-control\")) {\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            mStack.push(new PkgControl(pkg));\n        }\n        else if (aQName.equals(\"subpackage\")) {\n            assert mStack.size() \u003e 0;\n            final String name \u003d safeGet(aAtts, \"name\");\n            mStack.push(new PkgControl((PkgControl) mStack.peek(), name));\n        }\n        else if (aQName.equals(\"allow\") || aQName.equals(\"disallow\")) {\n            assert mStack.size() \u003e 0;\n            final String pkg \u003d safeGet(aAtts, \"pkg\");\n            final PkgControl pc \u003d (PkgControl) mStack.peek();\n            pc.addGuard(new Guard(aQName.equals(\"allow\"), pkg));\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java"
    }
  }
}