{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUtil.java",
  "functionName": "parseDouble",
  "functionId": "parseDouble___text-String__type-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
  "functionStartLine": 166,
  "functionEndLine": 196,
  "numCommitsSeen": 112,
  "timeTaken": 5135,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "9fc24b0c27c4692e329558bdcfdf180292cc692f",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5",
    "e249a8cdcfb908cfdd7ef58393449d2251e0c91b",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e00c478dd61d9d883e41b500b780ab217582c2e7",
    "88b72c3df7214b3cb4f4fcb73b92883007caab17",
    "a7bede3cb47427c4853b0375b873d541b99a38f3",
    "03c3efabf3b36fd1b8dd4da30678365c7506370c",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14",
    "679f818267161d9501a73ffdcc0d991537233633",
    "5cf355fad4b8bc613962aac2f52b48d5726f2acc",
    "b5203fd519f61b652a6d56a24eb9d18388eb2155",
    "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ymultichange(Yfilerename,Ybodychange)",
    "9fc24b0c27c4692e329558bdcfdf180292cc692f": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": "Yfilerename",
    "e249a8cdcfb908cfdd7ef58393449d2251e0c91b": "Ybodychange",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": "Ybodychange",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "08ea556aed8265d64a5dd93963b1ce4587cc48b4": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e00c478dd61d9d883e41b500b780ab217582c2e7": "Ybodychange",
    "88b72c3df7214b3cb4f4fcb73b92883007caab17": "Ybodychange",
    "a7bede3cb47427c4853b0375b873d541b99a38f3": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "03c3efabf3b36fd1b8dd4da30678365c7506370c": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": "Yfilerename",
    "679f818267161d9501a73ffdcc0d991537233633": "Ybodychange",
    "5cf355fad4b8bc613962aac2f52b48d5726f2acc": "Ybodychange",
    "b5203fd519f61b652a6d56a24eb9d18388eb2155": "Ybodychange",
    "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n     public static double parseDouble(String text, int type) {\n         String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n         final double result;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n                     radix \u003d BASE_2;\n                     txt \u003d txt.substring(2);\n                 }\n-                else if (CommonUtils.startsWithChar(txt, \u00270\u0027)) {\n+                else if (CommonUtil.startsWithChar(txt, \u00270\u0027)) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n                 result \u003d parseNumber(txt, radix, type);\n                 break;\n             default:\n                 result \u003d Double.NaN;\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        final double result;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n                    radix \u003d BASE_2;\n                    txt \u003d txt.substring(2);\n                }\n                else if (CommonUtil.startsWithChar(txt, \u00270\u0027)) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                result \u003d parseNumber(txt, radix, type);\n                break;\n            default:\n                result \u003d Double.NaN;\n                break;\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n     public static double parseDouble(String text, int type) {\n         String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n         final double result;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n                     radix \u003d BASE_2;\n                     txt \u003d txt.substring(2);\n                 }\n-                else if (CommonUtils.startsWithChar(txt, \u00270\u0027)) {\n+                else if (CommonUtil.startsWithChar(txt, \u00270\u0027)) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n                 result \u003d parseNumber(txt, radix, type);\n                 break;\n             default:\n                 result \u003d Double.NaN;\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        final double result;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n                    radix \u003d BASE_2;\n                    txt \u003d txt.substring(2);\n                }\n                else if (CommonUtil.startsWithChar(txt, \u00270\u0027)) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                result \u003d parseNumber(txt, radix, type);\n                break;\n            default:\n                result \u003d Double.NaN;\n                break;\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "9fc24b0c27c4692e329558bdcfdf180292cc692f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5709: CheckUtils.parseDouble: wrong result for negative values\n",
      "commitDate": "12/04/18 5:18 AM",
      "commitName": "9fc24b0c27c4692e329558bdcfdf180292cc692f",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "746a9d69125211ff44af1cb37732e919368ba620",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 97.87,
      "commitsBetweenForRepo": 216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,31 @@\n     public static double parseDouble(String text, int type) {\n         String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n-        double result \u003d 0;\n+        final double result;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n-                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n+                else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n+                    radix \u003d BASE_2;\n+                    txt \u003d txt.substring(2);\n+                }\n+                else if (CommonUtils.startsWithChar(txt, \u00270\u0027)) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n-                if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n-                    txt \u003d txt.substring(0, txt.length() - 1);\n-                }\n-                if (!txt.isEmpty()) {\n-                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n-                        result \u003d parseInt(txt, radix);\n-                    }\n-                    else {\n-                        result \u003d parseLong(txt, radix);\n-                    }\n-                }\n+                result \u003d parseNumber(txt, radix, type);\n                 break;\n             default:\n+                result \u003d Double.NaN;\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        final double result;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.startsWith(\"0b\") || txt.startsWith(\"0B\")) {\n                    radix \u003d BASE_2;\n                    txt \u003d txt.substring(2);\n                }\n                else if (CommonUtils.startsWithChar(txt, \u00270\u0027)) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                result \u003d parseNumber(txt, radix, type);\n                break;\n            default:\n                result \u003d Double.NaN;\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public static double parseDouble(String text, int type) {\n         String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n         double result \u003d 0;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n-                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n+                if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n                     txt \u003d txt.substring(0, txt.length() - 1);\n                 }\n                 if (!txt.isEmpty()) {\n                     if (type \u003d\u003d TokenTypes.NUM_INT) {\n                         result \u003d parseInt(txt, radix);\n                     }\n                     else {\n                         result \u003d parseLong(txt, radix);\n                     }\n                 }\n                 break;\n             default:\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (!txt.isEmpty()) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {}
    },
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": {
      "type": "Yfilerename",
      "commitMessage": "Utils classes have been moved to utils package. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "26/08/15 6:08 PM",
      "commitNameOld": "f6113bb56d695719a8803274effb3596cb82120f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (!txt.isEmpty()) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java"
      }
    },
    "e249a8cdcfb908cfdd7ef58393449d2251e0c91b": {
      "type": "Ybodychange",
      "commitMessage": "Use compiled pattern instead of dynamic regexp in CheckUtils. #1555\n\nFixes some `SpellDynamicRegexReplaceableByCompiledPattern` inspection violations.\n\nDescription:\n\u003eReports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.\n",
      "commitDate": "25/08/15 4:51 AM",
      "commitName": "e249a8cdcfb908cfdd7ef58393449d2251e0c91b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "21/08/15 5:05 AM",
      "commitNameOld": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public static double parseDouble(String text, int type) {\n-        String txt \u003d text.replaceAll(\"_\", \"\");\n+        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n         double result \u003d 0;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n                 if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                     txt \u003d txt.substring(0, txt.length() - 1);\n                 }\n                 if (!txt.isEmpty()) {\n                     if (type \u003d\u003d TokenTypes.NUM_INT) {\n                         result \u003d parseInt(txt, radix);\n                     }\n                     else {\n                         result \u003d parseLong(txt, radix);\n                     }\n                 }\n                 break;\n             default:\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d UNDERSCORE_PATTERN.matcher(text).replaceAll(\"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (!txt.isEmpty()) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": {
      "type": "Ybodychange",
      "commitMessage": "Use .isEmpty() method instead of comparisons to 0. #1538\n",
      "commitDate": "02/08/15 6:48 PM",
      "commitName": "5c9e55ae70af0456e1634211ccac54c40a92cfba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public static double parseDouble(String text, int type) {\n         String txt \u003d text.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n                 if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                     txt \u003d txt.substring(0, txt.length() - 1);\n                 }\n-                if (txt.length() \u003e 0) {\n+                if (!txt.isEmpty()) {\n                     if (type \u003d\u003d TokenTypes.NUM_INT) {\n                         result \u003d parseInt(txt, radix);\n                     }\n                     else {\n                         result \u003d parseLong(txt, radix);\n                     }\n                 }\n                 break;\n             default:\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type) {\n        String txt \u003d text.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (!txt.isEmpty()) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from SimplifyStartsWith rule, issue #949\n",
      "commitDate": "03/05/15 8:00 AM",
      "commitName": "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "02/05/15 11:27 PM",
      "commitNameOld": "0f543a21fee9dec9b388bb6f2c42540fe8bf02ec",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.36,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public static double parseDouble(String text, int type)\n     {\n         String txt \u003d text.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n-                if (txt.endsWith(\"L\") || txt.endsWith(\"l\")) {\n+                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                     txt \u003d txt.substring(0, txt.length() - 1);\n                 }\n                 if (txt.length() \u003e 0) {\n                     if (type \u003d\u003d TokenTypes.NUM_INT) {\n                         result \u003d parseInt(txt, radix);\n                     }\n                     else {\n                         result \u003d parseLong(txt, radix);\n                     }\n                 }\n                 break;\n             default:\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type)\n    {\n        String txt \u003d text.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (Utils.endsWithChar(txt, \u0027L\u0027) || Utils.endsWithChar(txt, \u0027l\u0027)) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (txt.length() \u003e 0) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public static double parseDouble(String text, int type)\n     {\n         String txt \u003d text.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n         switch (type) {\n             case TokenTypes.NUM_FLOAT:\n             case TokenTypes.NUM_DOUBLE:\n                 result \u003d Double.parseDouble(txt);\n                 break;\n             case TokenTypes.NUM_INT:\n             case TokenTypes.NUM_LONG:\n                 int radix \u003d BASE_10;\n                 if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                     radix \u003d BASE_16;\n                     txt \u003d txt.substring(2);\n                 }\n                 else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                     radix \u003d BASE_8;\n                     txt \u003d txt.substring(1);\n                 }\n-                if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n+                if (txt.endsWith(\"L\") || txt.endsWith(\"l\")) {\n                     txt \u003d txt.substring(0, txt.length() - 1);\n                 }\n                 if (txt.length() \u003e 0) {\n                     if (type \u003d\u003d TokenTypes.NUM_INT) {\n                         result \u003d parseInt(txt, radix);\n                     }\n                     else {\n                         result \u003d parseLong(txt, radix);\n                     }\n                 }\n                 break;\n             default:\n                 break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String text, int type)\n    {\n        String txt \u003d text.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (type) {\n            case TokenTypes.NUM_FLOAT:\n            case TokenTypes.NUM_DOUBLE:\n                result \u003d Double.parseDouble(txt);\n                break;\n            case TokenTypes.NUM_INT:\n            case TokenTypes.NUM_LONG:\n                int radix \u003d BASE_10;\n                if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                    radix \u003d BASE_16;\n                    txt \u003d txt.substring(2);\n                }\n                else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                    radix \u003d BASE_8;\n                    txt \u003d txt.substring(1);\n                }\n                if (txt.endsWith(\"L\") || txt.endsWith(\"l\")) {\n                    txt \u003d txt.substring(0, txt.length() - 1);\n                }\n                if (txt.length() \u003e 0) {\n                    if (type \u003d\u003d TokenTypes.NUM_INT) {\n                        result \u003d parseInt(txt, radix);\n                    }\n                    else {\n                        result \u003d parseLong(txt, radix);\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "08/09/14 3:21 PM",
          "commitNameOld": "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 132.68,
          "commitsBetweenForRepo": 354,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    public static double parseDouble(String aText, int aType)\n+    public static double parseDouble(String text, int type)\n     {\n-        String txt \u003d aText.replaceAll(\"_\", \"\");\n+        String txt \u003d text.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n-        switch (aType) {\n+        switch (type) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n             result \u003d Double.parseDouble(txt);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 txt \u003d txt.substring(2);\n             }\n             else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 txt \u003d txt.substring(1);\n             }\n             if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                 txt \u003d txt.substring(0, txt.length() - 1);\n             }\n             if (txt.length() \u003e 0) {\n-                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                if (type \u003d\u003d TokenTypes.NUM_INT) {\n                     result \u003d parseInt(txt, radix);\n                 }\n                 else {\n                     result \u003d parseLong(txt, radix);\n                 }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String text, int type)\n    {\n        String txt \u003d text.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (type) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(txt);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                txt \u003d txt.substring(2);\n            }\n            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                txt \u003d txt.substring(1);\n            }\n            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                txt \u003d txt.substring(0, txt.length() - 1);\n            }\n            if (txt.length() \u003e 0) {\n                if (type \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(txt, radix);\n                }\n                else {\n                    result \u003d parseLong(txt, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "[aText-String, aType-int]",
            "newValue": "[text-String, type-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "08/09/14 3:21 PM",
          "commitNameOld": "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 132.68,
          "commitsBetweenForRepo": 354,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    public static double parseDouble(String aText, int aType)\n+    public static double parseDouble(String text, int type)\n     {\n-        String txt \u003d aText.replaceAll(\"_\", \"\");\n+        String txt \u003d text.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n-        switch (aType) {\n+        switch (type) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n             result \u003d Double.parseDouble(txt);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 txt \u003d txt.substring(2);\n             }\n             else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 txt \u003d txt.substring(1);\n             }\n             if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                 txt \u003d txt.substring(0, txt.length() - 1);\n             }\n             if (txt.length() \u003e 0) {\n-                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                if (type \u003d\u003d TokenTypes.NUM_INT) {\n                     result \u003d parseInt(txt, radix);\n                 }\n                 else {\n                     result \u003d parseLong(txt, radix);\n                 }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String text, int type)\n    {\n        String txt \u003d text.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (type) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(txt);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                txt \u003d txt.substring(2);\n            }\n            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                txt \u003d txt.substring(1);\n            }\n            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                txt \u003d txt.substring(0, txt.length() - 1);\n            }\n            if (txt.length() \u003e 0) {\n                if (type \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(txt, radix);\n                }\n                else {\n                    result \u003d parseLong(txt, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "08ea556aed8265d64a5dd93963b1ce4587cc48b4": {
      "type": "Ybodychange",
      "commitMessage": "Issue 134: Exception thrown when parsing numeric constant \"3.14_15F\"\n",
      "commitDate": "08/09/14 3:21 PM",
      "commitName": "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 188.21,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public static double parseDouble(String aText, int aType)\n     {\n-        String txt \u003d aText;\n+        String txt \u003d aText.replaceAll(\"_\", \"\");\n         double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n             result \u003d Double.parseDouble(txt);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 txt \u003d txt.substring(2);\n             }\n             else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 txt \u003d txt.substring(1);\n             }\n             if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                 txt \u003d txt.substring(0, txt.length() - 1);\n             }\n             if (txt.length() \u003e 0) {\n                 if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                     result \u003d parseInt(txt, radix);\n                 }\n                 else {\n                     result \u003d parseLong(txt, radix);\n                 }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        String txt \u003d aText.replaceAll(\"_\", \"\");\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(txt);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                txt \u003d txt.substring(2);\n            }\n            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                txt \u003d txt.substring(1);\n            }\n            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                txt \u003d txt.substring(0, txt.length() - 1);\n            }\n            if (txt.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(txt, radix);\n                }\n                else {\n                    result \u003d parseLong(txt, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        String txt \u003d aText;\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(txt);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                txt \u003d txt.substring(2);\n            }\n            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                txt \u003d txt.substring(1);\n            }\n            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                txt \u003d txt.substring(0, txt.length() - 1);\n            }\n            if (txt.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(txt, radix);\n                }\n                else {\n                    result \u003d parseLong(txt, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java"
      }
    },
    "e00c478dd61d9d883e41b500b780ab217582c2e7": {
      "type": "Ybodychange",
      "commitMessage": "clean up the code that was assigning to a parameter.\n",
      "commitDate": "21/10/10 1:42 AM",
      "commitName": "e00c478dd61d9d883e41b500b780ab217582c2e7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/09/10 8:36 PM",
      "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 21.21,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     public static double parseDouble(String aText, int aType)\n     {\n+        String txt \u003d aText;\n         double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n-            result \u003d Double.parseDouble(aText);\n+            result \u003d Double.parseDouble(txt);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n-            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n+            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n-                aText \u003d aText.substring(2);\n+                txt \u003d txt.substring(2);\n             }\n-            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n+            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n-                aText \u003d aText.substring(1);\n+                txt \u003d txt.substring(1);\n             }\n-            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n-                aText \u003d aText.substring(0, aText.length() - 1);\n+            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n+                txt \u003d txt.substring(0, txt.length() - 1);\n             }\n-            if (aText.length() \u003e 0) {\n+            if (txt.length() \u003e 0) {\n                 if (aType \u003d\u003d TokenTypes.NUM_INT) {\n-                    result \u003d parseInt(aText, radix);\n+                    result \u003d parseInt(txt, radix);\n                 }\n                 else {\n-                    result \u003d parseLong(aText, radix);\n+                    result \u003d parseLong(txt, radix);\n                 }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        String txt \u003d aText;\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(txt);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                txt \u003d txt.substring(2);\n            }\n            else if (txt.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                txt \u003d txt.substring(1);\n            }\n            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {\n                txt \u003d txt.substring(0, txt.length() - 1);\n            }\n            if (txt.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(txt, radix);\n                }\n                else {\n                    result \u003d parseLong(txt, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "88b72c3df7214b3cb4f4fcb73b92883007caab17": {
      "type": "Ybodychange",
      "commitMessage": "General clean up - setting up Eclipse 3.0 M6.\n",
      "commitDate": "25/01/04 2:23 AM",
      "commitName": "88b72c3df7214b3cb4f4fcb73b92883007caab17",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "18/01/04 11:37 AM",
      "commitNameOld": "a7bede3cb47427c4853b0375b873d541b99a38f3",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 6.62,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public static double parseDouble(String aText, int aType)\n     {\n         double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n-            result \u003d (double) Double.parseDouble(aText);\n+            result \u003d Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n                 if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                     result \u003d parseInt(aText, radix);\n                 }\n                 else {\n                     result \u003d parseLong(aText, radix);\n                 }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(aText, radix);\n                }\n                else {\n                    result \u003d parseLong(aText, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "a7bede3cb47427c4853b0375b873d541b99a38f3": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Fixed bug: MagicNumberCheck throws NumberFormatException with negative octal and hex ints and longs.\n",
      "commitDate": "18/01/04 11:37 AM",
      "commitName": "a7bede3cb47427c4853b0375b873d541b99a38f3",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Fixed bug: MagicNumberCheck throws NumberFormatException with negative octal and hex ints and longs.\n",
          "commitDate": "18/01/04 11:37 AM",
          "commitName": "a7bede3cb47427c4853b0375b873d541b99a38f3",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "14/01/04 1:10 PM",
          "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-    public static float parseFloat(String aText, int aType)\n+    public static double parseDouble(String aText, int aType)\n     {\n-        float result \u003d 0;\n+        double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n-            result \u003d (float) Double.parseDouble(aText);\n+            result \u003d (double) Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n-            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n-            // nor \u0027l\u0027.\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n-                result \u003d (float) Long.parseLong(aText, radix);\n+                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                    result \u003d parseInt(aText, radix);\n+                }\n+                else {\n+                    result \u003d parseLong(aText, radix);\n+                }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (double) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(aText, radix);\n                }\n                else {\n                    result \u003d parseLong(aText, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "parseFloat",
            "newValue": "parseDouble"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Fixed bug: MagicNumberCheck throws NumberFormatException with negative octal and hex ints and longs.\n",
          "commitDate": "18/01/04 11:37 AM",
          "commitName": "a7bede3cb47427c4853b0375b873d541b99a38f3",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "14/01/04 1:10 PM",
          "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-    public static float parseFloat(String aText, int aType)\n+    public static double parseDouble(String aText, int aType)\n     {\n-        float result \u003d 0;\n+        double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n-            result \u003d (float) Double.parseDouble(aText);\n+            result \u003d (double) Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n-            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n-            // nor \u0027l\u0027.\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n-                result \u003d (float) Long.parseLong(aText, radix);\n+                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                    result \u003d parseInt(aText, radix);\n+                }\n+                else {\n+                    result \u003d parseLong(aText, radix);\n+                }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (double) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(aText, radix);\n                }\n                else {\n                    result \u003d parseLong(aText, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "float",
            "newValue": "double"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed bug: MagicNumberCheck throws NumberFormatException with negative octal and hex ints and longs.\n",
          "commitDate": "18/01/04 11:37 AM",
          "commitName": "a7bede3cb47427c4853b0375b873d541b99a38f3",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "14/01/04 1:10 PM",
          "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-    public static float parseFloat(String aText, int aType)\n+    public static double parseDouble(String aText, int aType)\n     {\n-        float result \u003d 0;\n+        double result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n-            result \u003d (float) Double.parseDouble(aText);\n+            result \u003d (double) Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n-            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n-            // nor \u0027l\u0027.\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n-                result \u003d (float) Long.parseLong(aText, radix);\n+                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                    result \u003d parseInt(aText, radix);\n+                }\n+                else {\n+                    result \u003d parseLong(aText, radix);\n+                }\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static double parseDouble(String aText, int aType)\n    {\n        double result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (double) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                    result \u003d parseInt(aText, radix);\n                }\n                else {\n                    result \u003d parseLong(aText, radix);\n                }\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "03c3efabf3b36fd1b8dd4da30678365c7506370c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "Check for variable explicit initialization (request 614387)\n",
      "commitDate": "04/10/03 10:01 AM",
      "commitName": "03c3efabf3b36fd1b8dd4da30678365c7506370c",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Check for variable explicit initialization (request 614387)\n",
          "commitDate": "04/10/03 10:01 AM",
          "commitName": "03c3efabf3b36fd1b8dd4da30678365c7506370c",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "03/10/03 6:28 PM",
          "commitNameOld": "194f86d2182f4a2adbf58c59a00423b109bd28a3",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.65,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-    private float parseFloat(String aText, int aType)\n+    public static float parseFloat(String aText, int aType)\n     {\n         float result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n             result \u003d (float) Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n             // Long.parseLong requires that the text ends with neither \u0027L\u0027\n             // nor \u0027l\u0027.\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n                 result \u003d (float) Long.parseLong(aText, radix);\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (float) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n            // nor \u0027l\u0027.\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                result \u003d (float) Long.parseLong(aText, radix);\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
            "oldMethodName": "parseFloat",
            "newMethodName": "parseFloat"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Check for variable explicit initialization (request 614387)\n",
          "commitDate": "04/10/03 10:01 AM",
          "commitName": "03c3efabf3b36fd1b8dd4da30678365c7506370c",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "03/10/03 6:28 PM",
          "commitNameOld": "194f86d2182f4a2adbf58c59a00423b109bd28a3",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.65,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-    private float parseFloat(String aText, int aType)\n+    public static float parseFloat(String aText, int aType)\n     {\n         float result \u003d 0;\n         switch (aType) {\n         case TokenTypes.NUM_FLOAT:\n         case TokenTypes.NUM_DOUBLE:\n             result \u003d (float) Double.parseDouble(aText);\n             break;\n         case TokenTypes.NUM_INT:\n         case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n             // Long.parseLong requires that the text ends with neither \u0027L\u0027\n             // nor \u0027l\u0027.\n             if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                 aText \u003d aText.substring(0, aText.length() - 1);\n             }\n             if (aText.length() \u003e 0) {\n                 result \u003d (float) Long.parseLong(aText, radix);\n             }\n             break;\n         default:\n             break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (float) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n            // nor \u0027l\u0027.\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                result \u003d (float) Long.parseLong(aText, radix);\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        }
      ]
    },
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Coding checks\n",
      "commitDate": "15/06/03 5:39 AM",
      "commitName": "9920857810ecc9efdbca19e2749b75abc0cbbf14",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/06/03 10:47 AM",
      "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (float) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n            // nor \u0027l\u0027.\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                result \u003d (float) Long.parseLong(aText, radix);\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java"
      }
    },
    "679f818267161d9501a73ffdcc0d991537233633": {
      "type": "Ybodychange",
      "commitMessage": "fixed NumberFormatException in MagicNumberCheck (bug 748913)\n",
      "commitDate": "04/06/03 9:08 AM",
      "commitName": "679f818267161d9501a73ffdcc0d991537233633",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "30/05/03 1:41 PM",
      "commitNameOld": "a2ed8a53c5ff2fa293cb02556e6ef4ae05515991",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 4.81,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,33 @@\n     private float parseFloat(String aText, int aType)\n     {\n         float result \u003d 0;\n-        if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n-            result \u003d Float.parseFloat(aText);\n-        }\n-        if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n+        switch (aType) {\n+        case TokenTypes.NUM_FLOAT:\n+        case TokenTypes.NUM_DOUBLE:\n             result \u003d (float) Double.parseDouble(aText);\n-        }\n-        else {\n+            break;\n+        case TokenTypes.NUM_INT:\n+        case TokenTypes.NUM_LONG:\n             int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n-            if (aType \u003d\u003d TokenTypes.NUM_INT) {\n-                if (aText.length() \u003e 0) {\n-                    result \u003d (float) Integer.parseInt(aText, radix);\n-                }\n+            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n+            // nor \u0027l\u0027.\n+            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n+                aText \u003d aText.substring(0, aText.length() - 1);\n             }\n-            else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n-                // Long.parseLong requires that the text ends with neither \u0027L\u0027\n-                // nor \u0027l\u0027.\n-                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n-                    aText \u003d aText.substring(0, aText.length() - 1);\n-                }\n-                if (aText.length() \u003e 0) {\n-                    result \u003d (float) Long.parseLong(aText, radix);\n-                }\n+            if (aText.length() \u003e 0) {\n+                result \u003d (float) Long.parseLong(aText, radix);\n             }\n+            break;\n+        default:\n+            break;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        switch (aType) {\n        case TokenTypes.NUM_FLOAT:\n        case TokenTypes.NUM_DOUBLE:\n            result \u003d (float) Double.parseDouble(aText);\n            break;\n        case TokenTypes.NUM_INT:\n        case TokenTypes.NUM_LONG:\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            // Long.parseLong requires that the text ends with neither \u0027L\u0027\n            // nor \u0027l\u0027.\n            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                aText \u003d aText.substring(0, aText.length() - 1);\n            }\n            if (aText.length() \u003e 0) {\n                result \u003d (float) Long.parseLong(aText, radix);\n            }\n            break;\n        default:\n            break;\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "5cf355fad4b8bc613962aac2f52b48d5726f2acc": {
      "type": "Ybodychange",
      "commitMessage": "out magic numbers\n",
      "commitDate": "12/05/03 2:39 AM",
      "commitName": "5cf355fad4b8bc613962aac2f52b48d5726f2acc",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "10/05/03 2:19 AM",
      "commitNameOld": "b5203fd519f61b652a6d56a24eb9d18388eb2155",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private float parseFloat(String aText, int aType)\n     {\n         float result \u003d 0;\n         if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n             result \u003d Float.parseFloat(aText);\n         }\n         if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n             result \u003d (float) Double.parseDouble(aText);\n         }\n         else {\n-            int radix \u003d 10;\n+            int radix \u003d BASE_10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n-                radix \u003d 16;\n+                radix \u003d BASE_16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n-                radix \u003d 8;\n+                radix \u003d BASE_8;\n                 aText \u003d aText.substring(1);\n             }\n             if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                 if (aText.length() \u003e 0) {\n                     result \u003d (float) Integer.parseInt(aText, radix);\n                 }\n             }\n             else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n                 // Long.parseLong requires that the text ends with neither \u0027L\u0027\n                 // nor \u0027l\u0027.\n                 if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                     aText \u003d aText.substring(0, aText.length() - 1);\n                 }\n                 if (aText.length() \u003e 0) {\n                     result \u003d (float) Long.parseLong(aText, radix);\n                 }\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n            result \u003d Float.parseFloat(aText);\n        }\n        if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n            result \u003d (float) Double.parseDouble(aText);\n        }\n        else {\n            int radix \u003d BASE_10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d BASE_16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d BASE_8;\n                aText \u003d aText.substring(1);\n            }\n            if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                if (aText.length() \u003e 0) {\n                    result \u003d (float) Integer.parseInt(aText, radix);\n                }\n            }\n            else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n                // Long.parseLong requires that the text ends with neither \u0027L\u0027\n                // nor \u0027l\u0027.\n                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                    aText \u003d aText.substring(0, aText.length() - 1);\n                }\n                if (aText.length() \u003e 0) {\n                    result \u003d (float) Long.parseLong(aText, radix);\n                }\n            }\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "b5203fd519f61b652a6d56a24eb9d18388eb2155": {
      "type": "Ybodychange",
      "commitMessage": "simplified logic\n",
      "commitDate": "10/05/03 2:19 AM",
      "commitName": "b5203fd519f61b652a6d56a24eb9d18388eb2155",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "10/05/03 1:08 AM",
      "commitNameOld": "ee3ea77d620d2f21a18a0fe878a911a975545024",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,37 @@\n     private float parseFloat(String aText, int aType)\n     {\n+        float result \u003d 0;\n         if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n-            return Float.parseFloat(aText);\n+            result \u003d Float.parseFloat(aText);\n         }\n         if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n-            return (float) Double.parseDouble(aText);\n+            result \u003d (float) Double.parseDouble(aText);\n         }\n         else {\n             int radix \u003d 10;\n             if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                 radix \u003d 16;\n                 aText \u003d aText.substring(2);\n             }\n             else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                 radix \u003d 8;\n                 aText \u003d aText.substring(1);\n             }\n             if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                 if (aText.length() \u003e 0) {\n-                    return (float) Integer.parseInt(aText, radix);\n-                }\n-                else {\n-                    return 0;\n+                    result \u003d (float) Integer.parseInt(aText, radix);\n                 }\n             }\n             else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n                 // Long.parseLong requires that the text ends with neither \u0027L\u0027\n                 // nor \u0027l\u0027.\n                 if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                     aText \u003d aText.substring(0, aText.length() - 1);\n                 }\n                 if (aText.length() \u003e 0) {\n-                    return (float) Long.parseLong(aText, radix);\n+                    result \u003d (float) Long.parseLong(aText, radix);\n                 }\n-                else {\n-                    return 0;\n-                } \n-            }\n-            else {\n-                return 0;\n             }\n         }\n+        return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private float parseFloat(String aText, int aType)\n    {\n        float result \u003d 0;\n        if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n            result \u003d Float.parseFloat(aText);\n        }\n        if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n            result \u003d (float) Double.parseDouble(aText);\n        }\n        else {\n            int radix \u003d 10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d 16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d 8;\n                aText \u003d aText.substring(1);\n            }\n            if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                if (aText.length() \u003e 0) {\n                    result \u003d (float) Integer.parseInt(aText, radix);\n                }\n            }\n            else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n                // Long.parseLong requires that the text ends with neither \u0027L\u0027\n                // nor \u0027l\u0027.\n                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                    aText \u003d aText.substring(0, aText.length() - 1);\n                }\n                if (aText.length() \u003e 0) {\n                    result \u003d (float) Long.parseLong(aText, radix);\n                }\n            }\n        }\n        return result;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e": {
      "type": "Yintroduced",
      "commitMessage": "corrected to handle octal and hex literals\n",
      "commitDate": "09/05/03 6:17 AM",
      "commitName": "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,44 @@\n+    private float parseFloat(String aText, int aType)\n+    {\n+        if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n+            return Float.parseFloat(aText);\n+        }\n+        if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n+            return (float) Double.parseDouble(aText);\n+        }\n+        else {\n+            int radix \u003d 10;\n+            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n+                radix \u003d 16;\n+                aText \u003d aText.substring(2);\n+            }\n+            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n+                radix \u003d 8;\n+                aText \u003d aText.substring(1);\n+            }\n+            if (aType \u003d\u003d TokenTypes.NUM_INT) {\n+                if (aText.length() \u003e 0) {\n+                    return (float) Integer.parseInt(aText, radix);\n+                }\n+                else {\n+                    return 0;\n+                }\n+            }\n+            else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n+                // Long.parseLong requires that the text ends with neither \u0027L\u0027\n+                // nor \u0027l\u0027.\n+                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n+                    aText \u003d aText.substring(0, aText.length() - 1);\n+                }\n+                if (aText.length() \u003e 0) {\n+                    return (float) Long.parseLong(aText, radix);\n+                }\n+                else {\n+                    return 0;\n+                } \n+            }\n+            else {\n+                return 0;\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private float parseFloat(String aText, int aType)\n    {\n        if (aType \u003d\u003d TokenTypes.NUM_FLOAT) {\n            return Float.parseFloat(aText);\n        }\n        if (aType \u003d\u003d TokenTypes.NUM_DOUBLE) {\n            return (float) Double.parseDouble(aText);\n        }\n        else {\n            int radix \u003d 10;\n            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {\n                radix \u003d 16;\n                aText \u003d aText.substring(2);\n            }\n            else if (aText.charAt(0) \u003d\u003d \u00270\u0027) {\n                radix \u003d 8;\n                aText \u003d aText.substring(1);\n            }\n            if (aType \u003d\u003d TokenTypes.NUM_INT) {\n                if (aText.length() \u003e 0) {\n                    return (float) Integer.parseInt(aText, radix);\n                }\n                else {\n                    return 0;\n                }\n            }\n            else if (aType \u003d\u003d TokenTypes.NUM_LONG) {\n                // Long.parseLong requires that the text ends with neither \u0027L\u0027\n                // nor \u0027l\u0027.\n                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {\n                    aText \u003d aText.substring(0, aText.length() - 1);\n                }\n                if (aText.length() \u003e 0) {\n                    return (float) Long.parseLong(aText, radix);\n                }\n                else {\n                    return 0;\n                } \n            }\n            else {\n                return 0;\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java"
    }
  }
}