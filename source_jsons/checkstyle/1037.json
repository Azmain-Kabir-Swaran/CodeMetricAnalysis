{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NPathComplexityCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
  "functionStartLine": 315,
  "functionEndLine": 356,
  "numCommitsSeen": 54,
  "timeTaken": 1431,
  "changeHistory": [
    "e810918205ff8e99a5cd692d6a99b899f5337eef",
    "237dbc6866249f18545d695d75b4577b1f2dfed6",
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c044038c3b932586c0d384b614254cc2d1838838"
  ],
  "changeHistoryShort": {
    "e810918205ff8e99a5cd692d6a99b899f5337eef": "Ybodychange",
    "237dbc6866249f18545d695d75b4577b1f2dfed6": "Ybodychange",
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c044038c3b932586c0d384b614254cc2d1838838": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e810918205ff8e99a5cd692d6a99b899f5337eef": {
      "type": "Ybodychange",
      "commitMessage": "Issue #56: fix NPathComplexityCheck\n",
      "commitDate": "28/04/17 9:38 AM",
      "commitName": "e810918205ff8e99a5cd692d6a99b899f5337eef",
      "commitAuthor": "kazachka",
      "commitDateOld": "17/02/17 2:04 PM",
      "commitNameOld": "6e8d1e06728b7defbd734253b3818a33676b62bc",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 69.77,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,42 @@\n     public void visitToken(DetailAST ast) {\n         switch (ast.getType()) {\n+            case TokenTypes.LITERAL_IF:\n+            case TokenTypes.LITERAL_SWITCH:\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_FOR:\n-            case TokenTypes.LITERAL_IF:\n+                visitConditional(ast, 1);\n+                break;\n             case TokenTypes.QUESTION:\n-            case TokenTypes.LITERAL_TRY:\n-            case TokenTypes.LITERAL_SWITCH:\n-                visitMultiplyingConditional();\n+                visitUnitaryOperator(ast, 2);\n+                break;\n+            case TokenTypes.LITERAL_RETURN:\n+                visitUnitaryOperator(ast, 0);\n+                break;\n+            case TokenTypes.CASE_GROUP:\n+                final int caseNumber \u003d countCaseTokens(ast);\n+                branchVisited \u003d true;\n+                pushValue(caseNumber);\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n+                branchVisited \u003d true;\n+                if (currentRangeValue.equals(BigInteger.ZERO)) {\n+                    currentRangeValue \u003d BigInteger.ONE;\n+                }\n+                pushValue(0);\n+                break;\n+            case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_CATCH:\n-            case TokenTypes.LITERAL_CASE:\n-                visitAddingConditional();\n+            case TokenTypes.LITERAL_DEFAULT:\n+                pushValue(1);\n                 break;\n             case TokenTypes.CTOR_DEF:\n             case TokenTypes.METHOD_DEF:\n             case TokenTypes.INSTANCE_INIT:\n             case TokenTypes.STATIC_INIT:\n-                visitMethodDef();\n+                pushValue(0);\n                 break;\n             default:\n                 break;\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.LITERAL_IF:\n            case TokenTypes.LITERAL_SWITCH:\n            case TokenTypes.LITERAL_WHILE:\n            case TokenTypes.LITERAL_DO:\n            case TokenTypes.LITERAL_FOR:\n                visitConditional(ast, 1);\n                break;\n            case TokenTypes.QUESTION:\n                visitUnitaryOperator(ast, 2);\n                break;\n            case TokenTypes.LITERAL_RETURN:\n                visitUnitaryOperator(ast, 0);\n                break;\n            case TokenTypes.CASE_GROUP:\n                final int caseNumber \u003d countCaseTokens(ast);\n                branchVisited \u003d true;\n                pushValue(caseNumber);\n                break;\n            case TokenTypes.LITERAL_ELSE:\n                branchVisited \u003d true;\n                if (currentRangeValue.equals(BigInteger.ZERO)) {\n                    currentRangeValue \u003d BigInteger.ONE;\n                }\n                pushValue(0);\n                break;\n            case TokenTypes.LITERAL_TRY:\n            case TokenTypes.LITERAL_CATCH:\n            case TokenTypes.LITERAL_DEFAULT:\n                pushValue(1);\n                break;\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.STATIC_INIT:\n                pushValue(0);\n                break;\n            default:\n                break;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
      "extendedDetails": {}
    },
    "237dbc6866249f18545d695d75b4577b1f2dfed6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2451: removed excess hierarchy from NPathComplexityCheck",
      "commitDate": "19/11/15 5:35 AM",
      "commitName": "237dbc6866249f18545d695d75b4577b1f2dfed6",
      "commitAuthor": "rnveach",
      "commitDateOld": "07/10/15 5:57 PM",
      "commitNameOld": "9c0ce8e0ece427b3ee03cab57b2451864d734e3b",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 42.53,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n     public void visitToken(DetailAST ast) {\n         switch (ast.getType()) {\n             case TokenTypes.LITERAL_WHILE:\n             case TokenTypes.LITERAL_DO:\n             case TokenTypes.LITERAL_FOR:\n             case TokenTypes.LITERAL_IF:\n             case TokenTypes.QUESTION:\n             case TokenTypes.LITERAL_TRY:\n             case TokenTypes.LITERAL_SWITCH:\n                 visitMultiplyingConditional();\n                 break;\n             case TokenTypes.LITERAL_ELSE:\n             case TokenTypes.LITERAL_CATCH:\n             case TokenTypes.LITERAL_CASE:\n                 visitAddingConditional();\n                 break;\n+            case TokenTypes.CTOR_DEF:\n+            case TokenTypes.METHOD_DEF:\n+            case TokenTypes.INSTANCE_INIT:\n+            case TokenTypes.STATIC_INIT:\n+                visitMethodDef();\n+                break;\n             default:\n-                super.visitToken(ast);\n+                break;\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.LITERAL_WHILE:\n            case TokenTypes.LITERAL_DO:\n            case TokenTypes.LITERAL_FOR:\n            case TokenTypes.LITERAL_IF:\n            case TokenTypes.QUESTION:\n            case TokenTypes.LITERAL_TRY:\n            case TokenTypes.LITERAL_SWITCH:\n                visitMultiplyingConditional();\n                break;\n            case TokenTypes.LITERAL_ELSE:\n            case TokenTypes.LITERAL_CATCH:\n            case TokenTypes.LITERAL_CASE:\n                visitAddingConditional();\n                break;\n            case TokenTypes.CTOR_DEF:\n            case TokenTypes.METHOD_DEF:\n            case TokenTypes.INSTANCE_INIT:\n            case TokenTypes.STATIC_INIT:\n                visitMethodDef();\n                break;\n            default:\n                break;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
      "extendedDetails": {}
    },
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, metrics, #512\n",
      "commitDate": "19/01/15 6:27 AM",
      "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, metrics, #512\n",
          "commitDate": "19/01/15 6:27 AM",
          "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 465,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        switch (aAST.getType()) {\n+        switch (ast.getType()) {\n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_IF:\n         case TokenTypes.QUESTION:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_SWITCH:\n             visitMultiplyingConditional();\n             break;\n         case TokenTypes.LITERAL_ELSE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_CASE:\n             visitAddingConditional();\n             break;\n         default:\n-            super.visitToken(aAST);\n+            super.visitToken(ast);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        switch (ast.getType()) {\n        case TokenTypes.LITERAL_WHILE:\n        case TokenTypes.LITERAL_DO:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.LITERAL_IF:\n        case TokenTypes.QUESTION:\n        case TokenTypes.LITERAL_TRY:\n        case TokenTypes.LITERAL_SWITCH:\n            visitMultiplyingConditional();\n            break;\n        case TokenTypes.LITERAL_ELSE:\n        case TokenTypes.LITERAL_CATCH:\n        case TokenTypes.LITERAL_CASE:\n            visitAddingConditional();\n            break;\n        default:\n            super.visitToken(ast);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, metrics, #512\n",
          "commitDate": "19/01/15 6:27 AM",
          "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 465,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        switch (aAST.getType()) {\n+        switch (ast.getType()) {\n         case TokenTypes.LITERAL_WHILE:\n         case TokenTypes.LITERAL_DO:\n         case TokenTypes.LITERAL_FOR:\n         case TokenTypes.LITERAL_IF:\n         case TokenTypes.QUESTION:\n         case TokenTypes.LITERAL_TRY:\n         case TokenTypes.LITERAL_SWITCH:\n             visitMultiplyingConditional();\n             break;\n         case TokenTypes.LITERAL_ELSE:\n         case TokenTypes.LITERAL_CATCH:\n         case TokenTypes.LITERAL_CASE:\n             visitAddingConditional();\n             break;\n         default:\n-            super.visitToken(aAST);\n+            super.visitToken(ast);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        switch (ast.getType()) {\n        case TokenTypes.LITERAL_WHILE:\n        case TokenTypes.LITERAL_DO:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.LITERAL_IF:\n        case TokenTypes.QUESTION:\n        case TokenTypes.LITERAL_TRY:\n        case TokenTypes.LITERAL_SWITCH:\n            visitMultiplyingConditional();\n            break;\n        case TokenTypes.LITERAL_ELSE:\n        case TokenTypes.LITERAL_CATCH:\n        case TokenTypes.LITERAL_CASE:\n            visitAddingConditional();\n            break;\n        default:\n            super.visitToken(ast);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        switch (aAST.getType()) {\n        case TokenTypes.LITERAL_WHILE:\n        case TokenTypes.LITERAL_DO:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.LITERAL_IF:\n        case TokenTypes.QUESTION:\n        case TokenTypes.LITERAL_TRY:\n        case TokenTypes.LITERAL_SWITCH:\n            visitMultiplyingConditional();\n            break;\n        case TokenTypes.LITERAL_ELSE:\n        case TokenTypes.LITERAL_CATCH:\n        case TokenTypes.LITERAL_CASE:\n            visitAddingConditional();\n            break;\n        default:\n            super.visitToken(aAST);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java"
      }
    },
    "c044038c3b932586c0d384b614254cc2d1838838": {
      "type": "Yintroduced",
      "commitMessage": "Added NPathComplexity, ClassDataAbstractionCoupling,\nBooleanExpressionComplexity and ClassFanOutComplexity checks\ncontributed by Simon Harris (requests 750757, 750758, 750760 and\n750759).\nIsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils.\n\nTODO: add documentation.\n",
      "commitDate": "02/01/04 12:05 AM",
      "commitName": "c044038c3b932586c0d384b614254cc2d1838838",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,21 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        switch (aAST.getType()) {\n+        case TokenTypes.LITERAL_WHILE:\n+        case TokenTypes.LITERAL_DO:\n+        case TokenTypes.LITERAL_FOR:\n+        case TokenTypes.LITERAL_IF:\n+        case TokenTypes.QUESTION:\n+        case TokenTypes.LITERAL_TRY:\n+        case TokenTypes.LITERAL_SWITCH:\n+            visitMultiplyingConditional();\n+            break;\n+        case TokenTypes.LITERAL_ELSE:\n+        case TokenTypes.LITERAL_CATCH:\n+        case TokenTypes.LITERAL_CASE:\n+            visitAddingConditional();\n+            break;\n+        default:\n+            super.visitToken(aAST);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        switch (aAST.getType()) {\n        case TokenTypes.LITERAL_WHILE:\n        case TokenTypes.LITERAL_DO:\n        case TokenTypes.LITERAL_FOR:\n        case TokenTypes.LITERAL_IF:\n        case TokenTypes.QUESTION:\n        case TokenTypes.LITERAL_TRY:\n        case TokenTypes.LITERAL_SWITCH:\n            visitMultiplyingConditional();\n            break;\n        case TokenTypes.LITERAL_ELSE:\n        case TokenTypes.LITERAL_CATCH:\n        case TokenTypes.LITERAL_CASE:\n            visitAddingConditional();\n            break;\n        default:\n            super.visitToken(aAST);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java"
    }
  }
}