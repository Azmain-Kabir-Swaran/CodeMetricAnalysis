{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultipleStringLiteralsCheck.java",
  "functionName": "finishTree",
  "functionId": "finishTree___rootAST-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
  "functionStartLine": 227,
  "functionEndLine": 235,
  "numCommitsSeen": 76,
  "timeTaken": 1872,
  "changeHistory": [
    "f90ad7d5ed2f9e45eb434f024614f92695064b39",
    "cf1d22f39fbde10e80414896a9424d706c544aaa",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a",
    "08638b5f739d9929698860048c052da2d5f80209",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4"
  ],
  "changeHistoryShort": {
    "f90ad7d5ed2f9e45eb434f024614f92695064b39": "Ybodychange",
    "cf1d22f39fbde10e80414896a9424d706c544aaa": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": "Ybodychange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f90ad7d5ed2f9e45eb434f024614f92695064b39": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5758: converted other line/column checks to log ast",
      "commitDate": "10/11/18 6:45 AM",
      "commitName": "f90ad7d5ed2f9e45eb434f024614f92695064b39",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 159.42,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,9 @@\n     public void finishTree(DetailAST rootAST) {\n-        for (Map.Entry\u003cString, List\u003cStringInfo\u003e\u003e stringListEntry : stringMap.entrySet()) {\n-            final List\u003cStringInfo\u003e hits \u003d stringListEntry.getValue();\n+        for (Map.Entry\u003cString, List\u003cDetailAST\u003e\u003e stringListEntry : stringMap.entrySet()) {\n+            final List\u003cDetailAST\u003e hits \u003d stringListEntry.getValue();\n             if (hits.size() \u003e allowedDuplicates) {\n-                final StringInfo firstFinding \u003d hits.get(0);\n-                final int line \u003d firstFinding.getLine();\n-                final int col \u003d firstFinding.getCol();\n-                log(line, col, MSG_KEY, stringListEntry.getKey(), hits.size());\n+                final DetailAST firstFinding \u003d hits.get(0);\n+                log(firstFinding, MSG_KEY, stringListEntry.getKey(), hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST rootAST) {\n        for (Map.Entry\u003cString, List\u003cDetailAST\u003e\u003e stringListEntry : stringMap.entrySet()) {\n            final List\u003cDetailAST\u003e hits \u003d stringListEntry.getValue();\n            if (hits.size() \u003e allowedDuplicates) {\n                final DetailAST firstFinding \u003d hits.get(0);\n                log(firstFinding, MSG_KEY, stringListEntry.getKey(), hits.size());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "cf1d22f39fbde10e80414896a9424d706c544aaa": {
      "type": "Ybodychange",
      "commitMessage": "Use entrySet iterator to fix FindBugs violations, issue #778\n\nThese methods accessed the value of a `Map` entry, using a key that was retrieved from a `keySet` iterator. It is more efficient to use an iterator on the `entrySet` of the map, to avoid the `Map.get(key)` lookup.\n\nAll violations of FindBugs rule [WMI: Inefficient use of keySet iterator instead of entrySet iterator](http://findbugs.sourceforge.net/bugDescriptions.html#WMI_WRONG_MAP_ITERATOR) are fixed.\n",
      "commitDate": "30/03/15 2:01 PM",
      "commitName": "cf1d22f39fbde10e80414896a9424d706c544aaa",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/03/15 2:39 PM",
      "commitNameOld": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,12 @@\n     public void finishTree(DetailAST rootAST)\n     {\n-        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n-        for (String key : keys) {\n-            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n+        for (Map.Entry\u003cString, List\u003cStringInfo\u003e\u003e stringListEntry : stringMap.entrySet()) {\n+            final List\u003cStringInfo\u003e hits \u003d stringListEntry.getValue();\n             if (hits.size() \u003e allowedDuplicates) {\n                 final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n-                log(line, col, MSG_KEY, key, hits.size());\n+                log(line, col, MSG_KEY, stringListEntry.getKey(), hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST rootAST)\n    {\n        for (Map.Entry\u003cString, List\u003cStringInfo\u003e\u003e stringListEntry : stringMap.entrySet()) {\n            final List\u003cStringInfo\u003e hits \u003d stringListEntry.getValue();\n            if (hits.size() \u003e allowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, MSG_KEY, stringListEntry.getKey(), hits.size());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     public void finishTree(DetailAST rootAST)\n     {\n         final Set\u003cString\u003e keys \u003d stringMap.keySet();\n         for (String key : keys) {\n             final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n             if (hits.size() \u003e allowedDuplicates) {\n                 final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n-                log(line, col, \"multiple.string.literal\", key, hits.size());\n+                log(line, col, MSG_KEY, key, hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST rootAST)\n    {\n        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n            if (hits.size() \u003e allowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, MSG_KEY, key, hits.size());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/07/14 12:44 PM",
          "commitNameOld": "dfb851e673a879120c80caca7167de3e5c3aa662",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 180.77,
          "commitsBetweenForRepo": 396,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-    public void finishTree(DetailAST aRootAST)\n+    public void finishTree(DetailAST rootAST)\n     {\n-        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n+        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n         for (String key : keys) {\n-            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n-            if (hits.size() \u003e mAllowedDuplicates) {\n+            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n+            if (hits.size() \u003e allowedDuplicates) {\n                 final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n                 log(line, col, \"multiple.string.literal\", key, hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void finishTree(DetailAST rootAST)\n    {\n        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n            if (hits.size() \u003e allowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, \"multiple.string.literal\", key, hits.size());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
          "extendedDetails": {
            "oldValue": "[aRootAST-DetailAST]",
            "newValue": "[rootAST-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/07/14 12:44 PM",
          "commitNameOld": "dfb851e673a879120c80caca7167de3e5c3aa662",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 180.77,
          "commitsBetweenForRepo": 396,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-    public void finishTree(DetailAST aRootAST)\n+    public void finishTree(DetailAST rootAST)\n     {\n-        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n+        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n         for (String key : keys) {\n-            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n-            if (hits.size() \u003e mAllowedDuplicates) {\n+            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n+            if (hits.size() \u003e allowedDuplicates) {\n                 final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n                 log(line, col, \"multiple.string.literal\", key, hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void finishTree(DetailAST rootAST)\n    {\n        final Set\u003cString\u003e keys \u003d stringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d stringMap.get(key);\n            if (hits.size() \u003e allowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, \"multiple.string.literal\", key, hits.size());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, \"multiple.string.literal\", key, hits.size());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java"
      }
    },
    "ef58eba6d1b95443ff240ed05634c7e373b3445a": {
      "type": "Ybodychange",
      "commitMessage": "General clean up with the new logging.\n",
      "commitDate": "20/12/07 3:08 AM",
      "commitName": "ef58eba6d1b95443ff240ed05634c7e373b3445a",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 2:28 AM",
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,13 @@\n     public void finishTree(DetailAST aRootAST)\n     {\n         final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n         for (String key : keys) {\n             final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n             if (hits.size() \u003e mAllowedDuplicates) {\n                 final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n-                final Object[] args \u003d\n-                    new Object[]{key, new Integer(hits.size())};\n-                log(line, col, \"multiple.string.literal\", args);\n+                log(line, col, \"multiple.string.literal\", key, hits.size());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                log(line, col, \"multiple.string.literal\", key, hits.size());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 10:36 PM",
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "11/02/07 5:37 AM",
      "commitNameOld": "a501b8d95ac2840ce201549e552f2cc540fde4ce",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 306.71,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n     public void finishTree(DetailAST aRootAST)\n     {\n-        final Set keys \u003d mStringMap.keySet();\n-        final Iterator keyIterator \u003d keys.iterator();\n-        while (keyIterator.hasNext()) {\n-            final String key \u003d (String) keyIterator.next();\n-            final ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n+        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n+        for (String key : keys) {\n+            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n             if (hits.size() \u003e mAllowedDuplicates) {\n-                final StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n+                final StringInfo firstFinding \u003d hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n                 final int col \u003d firstFinding.getCol();\n                 final Object[] args \u003d\n                     new Object[]{key, new Integer(hits.size())};\n                 log(line, col, \"multiple.string.literal\", args);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        final Set\u003cString\u003e keys \u003d mStringMap.keySet();\n        for (String key : keys) {\n            final List\u003cStringInfo\u003e hits \u003d mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                final StringInfo firstFinding \u003d hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                final Object[] args \u003d\n                    new Object[]{key, new Integer(hits.size())};\n                log(line, col, \"multiple.string.literal\", args);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "26/08/04 6:34 AM",
      "commitNameOld": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n     public void finishTree(DetailAST aRootAST)\n     {\n         final Set keys \u003d mStringMap.keySet();\n         final Iterator keyIterator \u003d keys.iterator();\n         while (keyIterator.hasNext()) {\n             final String key \u003d (String) keyIterator.next();\n             final ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n             if (hits.size() \u003e mAllowedDuplicates) {\n                 final StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n                 final int line \u003d firstFinding.getLine();\n-                int col \u003d firstFinding.getCol();\n-                Object[] args \u003d new Object[]{key, new Integer(hits.size())};\n+                final int col \u003d firstFinding.getCol();\n+                final Object[] args \u003d\n+                    new Object[]{key, new Integer(hits.size())};\n                 log(line, col, \"multiple.string.literal\", args);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        final Set keys \u003d mStringMap.keySet();\n        final Iterator keyIterator \u003d keys.iterator();\n        while (keyIterator.hasNext()) {\n            final String key \u003d (String) keyIterator.next();\n            final ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                final StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                final int col \u003d firstFinding.getCol();\n                final Object[] args \u003d\n                    new Object[]{key, new Integer(hits.size())};\n                log(line, col, \"multiple.string.literal\", args);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "19/05/04 3:54 PM",
      "commitNameOld": "0e3f18dd62db45aa8819294b44805b67fd8e55a4",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 98.61,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     public void finishTree(DetailAST aRootAST)\n     {\n-        Set keys \u003d mStringMap.keySet();\n-        Iterator keyIterator \u003d keys.iterator();\n+        final Set keys \u003d mStringMap.keySet();\n+        final Iterator keyIterator \u003d keys.iterator();\n         while (keyIterator.hasNext()) {\n-            String key \u003d (String) keyIterator.next();\n-            ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n+            final String key \u003d (String) keyIterator.next();\n+            final ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n             if (hits.size() \u003e mAllowedDuplicates) {\n-                StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n-                int line \u003d firstFinding.getLine();\n+                final StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n+                final int line \u003d firstFinding.getLine();\n                 int col \u003d firstFinding.getCol();\n                 Object[] args \u003d new Object[]{key, new Integer(hits.size())};\n                 log(line, col, \"multiple.string.literal\", args);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        final Set keys \u003d mStringMap.keySet();\n        final Iterator keyIterator \u003d keys.iterator();\n        while (keyIterator.hasNext()) {\n            final String key \u003d (String) keyIterator.next();\n            final ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                final StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n                final int line \u003d firstFinding.getLine();\n                int col \u003d firstFinding.getCol();\n                Object[] args \u003d new Object[]{key, new Integer(hits.size())};\n                log(line, col, \"multiple.string.literal\", args);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4": {
      "type": "Yintroduced",
      "commitMessage": "MultipleStringLiteralsCheck contributed by Daniel Grenner, patch 929882\n",
      "commitDate": "19/05/04 3:54 PM",
      "commitName": "0e3f18dd62db45aa8819294b44805b67fd8e55a4",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,16 @@\n+    public void finishTree(DetailAST aRootAST)\n+    {\n+        Set keys \u003d mStringMap.keySet();\n+        Iterator keyIterator \u003d keys.iterator();\n+        while (keyIterator.hasNext()) {\n+            String key \u003d (String) keyIterator.next();\n+            ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n+            if (hits.size() \u003e mAllowedDuplicates) {\n+                StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n+                int line \u003d firstFinding.getLine();\n+                int col \u003d firstFinding.getCol();\n+                Object[] args \u003d new Object[]{key, new Integer(hits.size())};\n+                log(line, col, \"multiple.string.literal\", args);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void finishTree(DetailAST aRootAST)\n    {\n        Set keys \u003d mStringMap.keySet();\n        Iterator keyIterator \u003d keys.iterator();\n        while (keyIterator.hasNext()) {\n            String key \u003d (String) keyIterator.next();\n            ArrayList hits \u003d (ArrayList) mStringMap.get(key);\n            if (hits.size() \u003e mAllowedDuplicates) {\n                StringInfo firstFinding \u003d (StringInfo) hits.get(0);\n                int line \u003d firstFinding.getLine();\n                int col \u003d firstFinding.getCol();\n                Object[] args \u003d new Object[]{key, new Integer(hits.size())};\n                log(line, col, \"multiple.string.literal\", args);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java"
    }
  }
}