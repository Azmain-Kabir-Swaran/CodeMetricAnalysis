{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AutomaticBean.java",
  "functionName": "convert",
  "functionId": "convert___type-Class__value-Object",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
  "functionStartLine": 324,
  "functionEndLine": 326,
  "numCommitsSeen": 156,
  "timeTaken": 3375,
  "changeHistory": [
    "f506a61fa3c530090ee7599dde578621397268a0",
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "40684b5eba043eb5d07f40ae222cbac299506a27",
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "31c8b8561a880f91735349da8afde60fd6e4c34f",
    "987d2d67d56e054adbe5ec56136dddb49f533137",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
    "302031989566e096adc3e87c935ab47202a7ce3e",
    "bd2731070adac1d8b714025e7c7fbbae278499a0"
  ],
  "changeHistoryShort": {
    "f506a61fa3c530090ee7599dde578621397268a0": "Ybodychange",
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf": "Ybodychange",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "40684b5eba043eb5d07f40ae222cbac299506a27": "Yparametermetachange",
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423": "Ybodychange",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "31c8b8561a880f91735349da8afde60fd6e4c34f": "Yparametermetachange",
    "987d2d67d56e054adbe5ec56136dddb49f533137": "Ymultichange(Yexceptionschange,Ybodychange)",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9": "Ybodychange",
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c": "Ybodychange",
    "302031989566e096adc3e87c935ab47202a7ce3e": "Ybodychange",
    "bd2731070adac1d8b714025e7c7fbbae278499a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f506a61fa3c530090ee7599dde578621397268a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5949: fix \u0027toArray() with zero-length array argument\u0027 violations\n",
      "commitDate": "24/06/18 3:51 PM",
      "commitName": "f506a61fa3c530090ee7599dde578621397268a0",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 20.76,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n         public Object convert(Class type, Object value) {\n             // Converts to a String and trims it for the tokenizer.\n             final StringTokenizer tokenizer \u003d new StringTokenizer(\n                 value.toString().trim(), COMMA_SEPARATOR);\n             final List\u003cAccessModifier\u003e result \u003d new ArrayList\u003c\u003e();\n \n             while (tokenizer.hasMoreTokens()) {\n                 final String token \u003d tokenizer.nextToken();\n                 result.add(AccessModifier.getInstance(token.trim()));\n             }\n \n-            return result.toArray(new AccessModifier[result.size()]);\n+            return result.toArray(EMPTY_MODIFIER_ARRAY);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(Class type, Object value) {\n            // Converts to a String and trims it for the tokenizer.\n            final StringTokenizer tokenizer \u003d new StringTokenizer(\n                value.toString().trim(), COMMA_SEPARATOR);\n            final List\u003cAccessModifier\u003e result \u003d new ArrayList\u003c\u003e();\n\n            while (tokenizer.hasMoreTokens()) {\n                final String token \u003d tokenizer.nextToken();\n                result.add(AccessModifier.getInstance(token.trim()));\n            }\n\n            return result.toArray(EMPTY_MODIFIER_ARRAY);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3675: Replace Scope with AccessModifier in ParameterNameCheck to avoid wrong scopes comparison\n",
      "commitDate": "26/01/17 8:47 AM",
      "commitName": "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "05/12/16 1:00 PM",
      "commitNameOld": "292ad0ebf2d18e1d8131127d60b3fde99aa0adf0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 51.82,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n         public Object convert(Class type, Object value) {\n-            // Convert to a String and trim it for the tokenizer.\n+            // Converts to a String and trims it for the tokenizer.\n             final StringTokenizer tokenizer \u003d new StringTokenizer(\n-                value.toString().trim(), \",\");\n-            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+                value.toString().trim(), COMMA_SEPARATOR);\n+            final List\u003cAccessModifier\u003e result \u003d new ArrayList\u003c\u003e();\n \n             while (tokenizer.hasMoreTokens()) {\n                 final String token \u003d tokenizer.nextToken();\n-                result.add(token.trim());\n+                result.add(AccessModifier.getInstance(token.trim()));\n             }\n \n-            return result.toArray(new String[result.size()]);\n+            return result.toArray(new AccessModifier[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(Class type, Object value) {\n            // Converts to a String and trims it for the tokenizer.\n            final StringTokenizer tokenizer \u003d new StringTokenizer(\n                value.toString().trim(), COMMA_SEPARATOR);\n            final List\u003cAccessModifier\u003e result \u003d new ArrayList\u003c\u003e();\n\n            while (tokenizer.hasMoreTokens()) {\n                final String token \u003d tokenizer.nextToken();\n                result.add(AccessModifier.getInstance(token.trim()));\n            }\n\n            return result.toArray(new AccessModifier[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3433: Cut down on Checkstyle\u0027s dependencies on Guava (part 2) (#3454)\n\n",
      "commitDate": "20/09/16 7:52 PM",
      "commitName": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "07/05/16 9:41 AM",
      "commitNameOld": "871b20e88b5bfedb324f3e1996b37d0c68eb727b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 136.42,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n         public Object convert(Class type, Object value) {\n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer tokenizer \u003d new StringTokenizer(\n                 value.toString().trim(), \",\");\n-            final List\u003cString\u003e result \u003d Lists.newArrayList();\n+            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n             while (tokenizer.hasMoreTokens()) {\n                 final String token \u003d tokenizer.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(Class type, Object value) {\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer tokenizer \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n            while (tokenizer.hasMoreTokens()) {\n                final String token \u003d tokenizer.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "31/08/15 11:51 AM",
      "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 36.25,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n         public Object convert(Class type, Object value) {\n             // Convert to a String and trim it for the tokenizer.\n-            final StringTokenizer st \u003d new StringTokenizer(\n+            final StringTokenizer tokenizer \u003d new StringTokenizer(\n                 value.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n-            while (st.hasMoreTokens()) {\n-                final String token \u003d st.nextToken();\n+            while (tokenizer.hasMoreTokens()) {\n+                final String token \u003d tokenizer.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(Class type, Object value) {\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer tokenizer \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (tokenizer.hasMoreTokens()) {\n                final String token \u003d tokenizer.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "40684b5eba043eb5d07f40ae222cbac299506a27": {
      "type": "Yparametermetachange",
      "commitMessage": "Add additional suppression for unchecked operation. #1555\n\nFixes `UNCHECKED_WARNING` inspection violations.\n\nDescription:\n\u003eUnchecked overriding: return type requires unchecked conversion. Found \u0027java.lang.Object\u0027, required \u0027T\u0027 (at line 251).\nSignals places where an unchecked warning is issued by the compiler, for example:\n```\nvoid f(HashMap map) {\n  map.put(\"key\", \"value\");\n  }\n```\n",
      "commitDate": "08/08/15 7:21 PM",
      "commitName": "40684b5eba043eb5d07f40ae222cbac299506a27",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "02/08/15 6:41 PM",
      "commitNameOld": "fd794d428cc0854ddd4d416f0208d49f1ee9cbe1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.03,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n-        public Object convert(@SuppressWarnings(\"rawtypes\") Class type, Object value) {\n+        public Object convert(Class type, Object value) {\n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer st \u003d new StringTokenizer(\n                 value.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n             while (st.hasMoreTokens()) {\n                 final String token \u003d st.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(Class type, Object value) {\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {
        "oldValue": "[type-Class(annotations-@SuppressWarnings(\"rawtypes\")), value-Object]",
        "newValue": "[type-Class, value-Object]"
      }
    },
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423": {
      "type": "Ybodychange",
      "commitMessage": "coverage for Automatic bean, #1295\n",
      "commitDate": "23/07/15 9:57 PM",
      "commitName": "5ebfb82c0168a5ebc5057ab3d0673682e21b7423",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,13 @@\n-        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,\n-            Object value) {\n-            if (null \u003d\u003d type) {\n-                throw new ConversionException(\"Cannot convert from null.\");\n-            }\n-\n+        public Object convert(@SuppressWarnings(\"rawtypes\") Class type, Object value) {\n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer st \u003d new StringTokenizer(\n                 value.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n             while (st.hasMoreTokens()) {\n                 final String token \u003d st.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(@SuppressWarnings(\"rawtypes\") Class type, Object value) {\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": "19/01/15 6:19 AM",
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,\n-            Object aValue)\n+        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,\n+            Object value)\n         {\n-            if (null \u003d\u003d aType) {\n+            if (null \u003d\u003d type) {\n                 throw new ConversionException(\"Cannot convert from null.\");\n             }\n \n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer st \u003d new StringTokenizer(\n-                aValue.toString().trim(), \",\");\n+                value.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n             while (st.hasMoreTokens()) {\n                 final String token \u003d st.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
          "actualSource": "        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,\n            Object value)\n        {\n            if (null \u003d\u003d type) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {
            "oldValue": "[aType-Class(annotations-@SuppressWarnings(\"rawtypes\")), aValue-Object]",
            "newValue": "[type-Class(annotations-@SuppressWarnings(\"rawtypes\")), value-Object]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,\n-            Object aValue)\n+        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,\n+            Object value)\n         {\n-            if (null \u003d\u003d aType) {\n+            if (null \u003d\u003d type) {\n                 throw new ConversionException(\"Cannot convert from null.\");\n             }\n \n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer st \u003d new StringTokenizer(\n-                aValue.toString().trim(), \",\");\n+                value.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n             while (st.hasMoreTokens()) {\n                 final String token \u003d st.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
          "actualSource": "        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,\n            Object value)\n        {\n            if (null \u003d\u003d type) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                value.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,\n            Object aValue)\n        {\n            if (null \u003d\u003d aType) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                aValue.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java"
      }
    },
    "31c8b8561a880f91735349da8afde60fd6e4c34f": {
      "type": "Yparametermetachange",
      "commitMessage": "general clean up\n",
      "commitDate": "07/10/10 3:16 AM",
      "commitName": "31c8b8561a880f91735349da8afde60fd6e4c34f",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/10/10 4:33 AM",
      "commitNameOld": "987d2d67d56e054adbe5ec56136dddb49f533137",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n-        public Object convert(Class aType, Object aValue)\n+        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,\n+            Object aValue)\n         {\n             if (null \u003d\u003d aType) {\n                 throw new ConversionException(\"Cannot convert from null.\");\n             }\n \n             // Convert to a String and trim it for the tokenizer.\n             final StringTokenizer st \u003d new StringTokenizer(\n                 aValue.toString().trim(), \",\");\n             final List\u003cString\u003e result \u003d Lists.newArrayList();\n \n             while (st.hasMoreTokens()) {\n                 final String token \u003d st.nextToken();\n                 result.add(token.trim());\n             }\n \n             return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,\n            Object aValue)\n        {\n            if (null \u003d\u003d aType) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                aValue.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {
        "oldValue": "[aType-Class, aValue-Object]",
        "newValue": "[aType-Class(annotations-@SuppressWarnings(\"rawtypes\")), aValue-Object]"
      }
    },
    "987d2d67d56e054adbe5ec56136dddb49f533137": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Break dependence of deprecated API from Beanutils.\n\nAlso fixed Checkstyle errors (oh the shame:-).\n",
      "commitDate": "04/10/10 4:33 AM",
      "commitName": "987d2d67d56e054adbe5ec56136dddb49f533137",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Break dependence of deprecated API from Beanutils.\n\nAlso fixed Checkstyle errors (oh the shame:-).\n",
          "commitDate": "04/10/10 4:33 AM",
          "commitName": "987d2d67d56e054adbe5ec56136dddb49f533137",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "29/09/10 8:36 PM",
          "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 4.33,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,18 @@\n         public Object convert(Class aType, Object aValue)\n-            throws ConversionException\n         {\n-            // Deal with a null value\n-            if (aValue \u003d\u003d null) {\n-                if (useDefault) {\n-                    return (defaultValue);\n-                }\n-                throw new ConversionException(\"No value specified\");\n+            if (null \u003d\u003d aType) {\n+                throw new ConversionException(\"Cannot convert from null.\");\n             }\n \n-            // Deal with the no-conversion-needed case\n-            if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n-                return (aValue);\n+            // Convert to a String and trim it for the tokenizer.\n+            final StringTokenizer st \u003d new StringTokenizer(\n+                aValue.toString().trim(), \",\");\n+            final List\u003cString\u003e result \u003d Lists.newArrayList();\n+\n+            while (st.hasMoreTokens()) {\n+                final String token \u003d st.nextToken();\n+                result.add(token.trim());\n             }\n \n-            // Parse the input value as a String into elements\n-            // and convert to the appropriate type\n-            try {\n-                final List list \u003d parseElements(aValue.toString());\n-                final String[] results \u003d new String[list.size()];\n-\n-                for (int i \u003d 0; i \u003c results.length; i++) {\n-                    results[i] \u003d (String) list.get(i);\n-                }\n-                return (results);\n-            }\n-            catch (final Exception e) {\n-                if (useDefault) {\n-                    return (defaultValue);\n-                }\n-                throw new ConversionException(aValue.toString(), e);\n-            }\n+            return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
          "actualSource": "        public Object convert(Class aType, Object aValue)\n        {\n            if (null \u003d\u003d aType) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                aValue.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {
            "oldValue": "[ConversionException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Break dependence of deprecated API from Beanutils.\n\nAlso fixed Checkstyle errors (oh the shame:-).\n",
          "commitDate": "04/10/10 4:33 AM",
          "commitName": "987d2d67d56e054adbe5ec56136dddb49f533137",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "29/09/10 8:36 PM",
          "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 4.33,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,18 @@\n         public Object convert(Class aType, Object aValue)\n-            throws ConversionException\n         {\n-            // Deal with a null value\n-            if (aValue \u003d\u003d null) {\n-                if (useDefault) {\n-                    return (defaultValue);\n-                }\n-                throw new ConversionException(\"No value specified\");\n+            if (null \u003d\u003d aType) {\n+                throw new ConversionException(\"Cannot convert from null.\");\n             }\n \n-            // Deal with the no-conversion-needed case\n-            if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n-                return (aValue);\n+            // Convert to a String and trim it for the tokenizer.\n+            final StringTokenizer st \u003d new StringTokenizer(\n+                aValue.toString().trim(), \",\");\n+            final List\u003cString\u003e result \u003d Lists.newArrayList();\n+\n+            while (st.hasMoreTokens()) {\n+                final String token \u003d st.nextToken();\n+                result.add(token.trim());\n             }\n \n-            // Parse the input value as a String into elements\n-            // and convert to the appropriate type\n-            try {\n-                final List list \u003d parseElements(aValue.toString());\n-                final String[] results \u003d new String[list.size()];\n-\n-                for (int i \u003d 0; i \u003c results.length; i++) {\n-                    results[i] \u003d (String) list.get(i);\n-                }\n-                return (results);\n-            }\n-            catch (final Exception e) {\n-                if (useDefault) {\n-                    return (defaultValue);\n-                }\n-                throw new ConversionException(aValue.toString(), e);\n-            }\n+            return result.toArray(new String[result.size()]);\n         }\n\\ No newline at end of file\n",
          "actualSource": "        public Object convert(Class aType, Object aValue)\n        {\n            if (null \u003d\u003d aType) {\n                throw new ConversionException(\"Cannot convert from null.\");\n            }\n\n            // Convert to a String and trim it for the tokenizer.\n            final StringTokenizer st \u003d new StringTokenizer(\n                aValue.toString().trim(), \",\");\n            final List\u003cString\u003e result \u003d Lists.newArrayList();\n\n            while (st.hasMoreTokens()) {\n                final String token \u003d st.nextToken();\n                result.add(token.trim());\n            }\n\n            return result.toArray(new String[result.size()]);\n        }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {}
        }
      ]
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:33 PM",
      "commitNameOld": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public Object convert(Class aType, Object aValue)\n         throws ConversionException\n     {\n         // Deal with a null value\n         if (aValue \u003d\u003d null) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             throw new ConversionException(\"No value specified\");\n         }\n \n         // Deal with the no-conversion-needed case\n         if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n             return (aValue);\n         }\n \n         // Parse the input value as a String into elements\n         // and convert to the appropriate type\n         try {\n             final List list \u003d parseElements(aValue.toString());\n             final String[] results \u003d new String[list.size()];\n \n             for (int i \u003d 0; i \u003c results.length; i++) {\n                 results[i] \u003d (String) list.get(i);\n             }\n             return (results);\n         }\n-        catch (Exception e) {\n+        catch (final Exception e) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             throw new ConversionException(aValue.toString(), e);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object convert(Class aType, Object aValue)\n        throws ConversionException\n    {\n        // Deal with a null value\n        if (aValue \u003d\u003d null) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(\"No value specified\");\n        }\n\n        // Deal with the no-conversion-needed case\n        if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n            return (aValue);\n        }\n\n        // Parse the input value as a String into elements\n        // and convert to the appropriate type\n        try {\n            final List list \u003d parseElements(aValue.toString());\n            final String[] results \u003d new String[list.size()];\n\n            for (int i \u003d 0; i \u003c results.length; i++) {\n                results[i] \u003d (String) list.get(i);\n            }\n            return (results);\n        }\n        catch (final Exception e) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(aValue.toString(), e);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9": {
      "type": "Ybodychange",
      "commitMessage": "Make member variables final where appropriate.\n",
      "commitDate": "06/07/06 8:33 PM",
      "commitName": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public Object convert(Class aType, Object aValue)\n         throws ConversionException\n     {\n         // Deal with a null value\n         if (aValue \u003d\u003d null) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             throw new ConversionException(\"No value specified\");\n         }\n \n         // Deal with the no-conversion-needed case\n-        if (sModel.getClass() \u003d\u003d aValue.getClass()) {\n+        if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n             return (aValue);\n         }\n \n         // Parse the input value as a String into elements\n         // and convert to the appropriate type\n         try {\n             final List list \u003d parseElements(aValue.toString());\n             final String[] results \u003d new String[list.size()];\n \n             for (int i \u003d 0; i \u003c results.length; i++) {\n                 results[i] \u003d (String) list.get(i);\n             }\n             return (results);\n         }\n         catch (Exception e) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             throw new ConversionException(aValue.toString(), e);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object convert(Class aType, Object aValue)\n        throws ConversionException\n    {\n        // Deal with a null value\n        if (aValue \u003d\u003d null) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(\"No value specified\");\n        }\n\n        // Deal with the no-conversion-needed case\n        if (MODEL.getClass() \u003d\u003d aValue.getClass()) {\n            return (aValue);\n        }\n\n        // Parse the input value as a String into elements\n        // and convert to the appropriate type\n        try {\n            final List list \u003d parseElements(aValue.toString());\n            final String[] results \u003d new String[list.size()];\n\n            for (int i \u003d 0; i \u003c results.length; i++) {\n                results[i] \u003d (String) list.get(i);\n            }\n            return (results);\n        }\n        catch (Exception e) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(aValue.toString(), e);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c": {
      "type": "Ybodychange",
      "commitMessage": "General cleanup.\n",
      "commitDate": "21/07/04 4:35 AM",
      "commitName": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 188.6,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n     public Object convert(Class aType, Object aValue)\n         throws ConversionException\n     {\n         // Deal with a null value\n         if (aValue \u003d\u003d null) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n-            else {\n-                throw new ConversionException(\"No value specified\");\n-            }\n+            throw new ConversionException(\"No value specified\");\n         }\n \n         // Deal with the no-conversion-needed case\n         if (sModel.getClass() \u003d\u003d aValue.getClass()) {\n             return (aValue);\n         }\n \n         // Parse the input value as a String into elements\n         // and convert to the appropriate type\n         try {\n             final List list \u003d parseElements(aValue.toString());\n             final String[] results \u003d new String[list.size()];\n \n             for (int i \u003d 0; i \u003c results.length; i++) {\n                 results[i] \u003d (String) list.get(i);\n             }\n             return (results);\n         }\n         catch (Exception e) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n-            else {\n-                throw new ConversionException(aValue.toString(), e);\n-            }\n+            throw new ConversionException(aValue.toString(), e);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object convert(Class aType, Object aValue)\n        throws ConversionException\n    {\n        // Deal with a null value\n        if (aValue \u003d\u003d null) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(\"No value specified\");\n        }\n\n        // Deal with the no-conversion-needed case\n        if (sModel.getClass() \u003d\u003d aValue.getClass()) {\n            return (aValue);\n        }\n\n        // Parse the input value as a String into elements\n        // and convert to the appropriate type\n        try {\n            final List list \u003d parseElements(aValue.toString());\n            final String[] results \u003d new String[list.size()];\n\n            for (int i \u003d 0; i \u003c results.length; i++) {\n                results[i] \u003d (String) list.get(i);\n            }\n            return (results);\n        }\n        catch (Exception e) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            throw new ConversionException(aValue.toString(), e);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "302031989566e096adc3e87c935ab47202a7ce3e": {
      "type": "Ybodychange",
      "commitMessage": "corrected checkstyle errors\n",
      "commitDate": "06/12/02 2:38 AM",
      "commitName": "302031989566e096adc3e87c935ab47202a7ce3e",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "05/12/02 3:47 PM",
      "commitNameOld": "bd2731070adac1d8b714025e7c7fbbae278499a0",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public Object convert(Class aType, Object aValue)\n         throws ConversionException\n     {\n         // Deal with a null value\n         if (aValue \u003d\u003d null) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             else {\n                 throw new ConversionException(\"No value specified\");\n             }\n         }\n \n         // Deal with the no-conversion-needed case\n-        if (mModel.getClass() \u003d\u003d aValue.getClass()) {\n+        if (sModel.getClass() \u003d\u003d aValue.getClass()) {\n             return (aValue);\n         }\n \n         // Parse the input value as a String into elements\n         // and convert to the appropriate type\n         try {\n             final List list \u003d parseElements(aValue.toString());\n             final String[] results \u003d new String[list.size()];\n \n             for (int i \u003d 0; i \u003c results.length; i++) {\n                 results[i] \u003d (String) list.get(i);\n             }\n             return (results);\n         }\n         catch (Exception e) {\n             if (useDefault) {\n                 return (defaultValue);\n             }\n             else {\n                 throw new ConversionException(aValue.toString(), e);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object convert(Class aType, Object aValue)\n        throws ConversionException\n    {\n        // Deal with a null value\n        if (aValue \u003d\u003d null) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            else {\n                throw new ConversionException(\"No value specified\");\n            }\n        }\n\n        // Deal with the no-conversion-needed case\n        if (sModel.getClass() \u003d\u003d aValue.getClass()) {\n            return (aValue);\n        }\n\n        // Parse the input value as a String into elements\n        // and convert to the appropriate type\n        try {\n            final List list \u003d parseElements(aValue.toString());\n            final String[] results \u003d new String[list.size()];\n\n            for (int i \u003d 0; i \u003c results.length; i++) {\n                results[i] \u003d (String) list.get(i);\n            }\n            return (results);\n        }\n        catch (Exception e) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            else {\n                throw new ConversionException(aValue.toString(), e);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "bd2731070adac1d8b714025e7c7fbbae278499a0": {
      "type": "Yintroduced",
      "commitMessage": "Hacked replacement class for StringArrayConverter so that it\nproperly converts an array of tokens with an element\ncontaining an underscore :(\n",
      "commitDate": "05/12/02 3:47 PM",
      "commitName": "bd2731070adac1d8b714025e7c7fbbae278499a0",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,38 @@\n+    public Object convert(Class aType, Object aValue)\n+        throws ConversionException\n+    {\n+        // Deal with a null value\n+        if (aValue \u003d\u003d null) {\n+            if (useDefault) {\n+                return (defaultValue);\n+            }\n+            else {\n+                throw new ConversionException(\"No value specified\");\n+            }\n+        }\n+\n+        // Deal with the no-conversion-needed case\n+        if (mModel.getClass() \u003d\u003d aValue.getClass()) {\n+            return (aValue);\n+        }\n+\n+        // Parse the input value as a String into elements\n+        // and convert to the appropriate type\n+        try {\n+            final List list \u003d parseElements(aValue.toString());\n+            final String[] results \u003d new String[list.size()];\n+\n+            for (int i \u003d 0; i \u003c results.length; i++) {\n+                results[i] \u003d (String) list.get(i);\n+            }\n+            return (results);\n+        }\n+        catch (Exception e) {\n+            if (useDefault) {\n+                return (defaultValue);\n+            }\n+            else {\n+                throw new ConversionException(aValue.toString(), e);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public Object convert(Class aType, Object aValue)\n        throws ConversionException\n    {\n        // Deal with a null value\n        if (aValue \u003d\u003d null) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            else {\n                throw new ConversionException(\"No value specified\");\n            }\n        }\n\n        // Deal with the no-conversion-needed case\n        if (mModel.getClass() \u003d\u003d aValue.getClass()) {\n            return (aValue);\n        }\n\n        // Parse the input value as a String into elements\n        // and convert to the appropriate type\n        try {\n            final List list \u003d parseElements(aValue.toString());\n            final String[] results \u003d new String[list.size()];\n\n            for (int i \u003d 0; i \u003c results.length; i++) {\n                results[i] \u003d (String) list.get(i);\n            }\n            return (results);\n        }\n        catch (Exception e) {\n            if (useDefault) {\n                return (defaultValue);\n            }\n            else {\n                throw new ConversionException(aValue.toString(), e);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java"
    }
  }
}