{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EqualsAvoidNullCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
  "functionStartLine": 152,
  "functionEndLine": 176,
  "numCommitsSeen": 92,
  "timeTaken": 2879,
  "changeHistory": [
    "eae1de67fff3ec77f58dab7d05275532d0be0042",
    "0024de5711531372850e883c970414563ab8e3ad",
    "6ebcf2733b6c635d5f044aa35caf2a610c7723ff",
    "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "5646a5ebba28a22408fb0d8ebb9f2311a619f53f",
    "a8e60736f4d66e806ffe1d250da3b58bf5dc2132",
    "49862970ac522ae85fa014b5ac4985e56645fcff",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "79404974eff1458f4243f8acd6a08b6a8b869342"
  ],
  "changeHistoryShort": {
    "eae1de67fff3ec77f58dab7d05275532d0be0042": "Ybodychange",
    "0024de5711531372850e883c970414563ab8e3ad": "Ymultichange(Yparameterchange,Ybodychange)",
    "6ebcf2733b6c635d5f044aa35caf2a610c7723ff": "Ybodychange",
    "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ybodychange",
    "5646a5ebba28a22408fb0d8ebb9f2311a619f53f": "Ybodychange",
    "a8e60736f4d66e806ffe1d250da3b58bf5dc2132": "Ybodychange",
    "49862970ac522ae85fa014b5ac4985e56645fcff": "Ybodychange",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "79404974eff1458f4243f8acd6a08b6a8b869342": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eae1de67fff3ec77f58dab7d05275532d0be0042": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6373: fixed frame tracking for EqualsAvoidNull",
      "commitDate": "12/01/19 4:16 PM",
      "commitName": "eae1de67fff3ec77f58dab7d05275532d0be0042",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/12/18 7:35 AM",
      "commitNameOld": "ea7b2dd0a9060d427273bd88909e370cb9f88436",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 25.36,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,25 @@\n     public void visitToken(final DetailAST ast) {\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF:\n             case TokenTypes.PARAMETER_DEF:\n                 currentFrame.addField(ast);\n                 break;\n             case TokenTypes.METHOD_CALL:\n                 processMethodCall(ast);\n                 break;\n             case TokenTypes.SLIST:\n                 processSlist(ast);\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 processLiteralNew(ast);\n                 break;\n+            case TokenTypes.OBJBLOCK:\n+                final int parentType \u003d ast.getParent().getType();\n+                if (parentType !\u003d TokenTypes.CLASS_DEF \u0026\u0026 parentType !\u003d TokenTypes.ENUM_DEF) {\n+                    processFrame(ast);\n+                }\n+                break;\n             default:\n                 processFrame(ast);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF:\n            case TokenTypes.PARAMETER_DEF:\n                currentFrame.addField(ast);\n                break;\n            case TokenTypes.METHOD_CALL:\n                processMethodCall(ast);\n                break;\n            case TokenTypes.SLIST:\n                processSlist(ast);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                processLiteralNew(ast);\n                break;\n            case TokenTypes.OBJBLOCK:\n                final int parentType \u003d ast.getParent().getType();\n                if (parentType !\u003d TokenTypes.CLASS_DEF \u0026\u0026 parentType !\u003d TokenTypes.ENUM_DEF) {\n                    processFrame(ast);\n                }\n                break;\n            default:\n                processFrame(ast);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "0024de5711531372850e883c970414563ab8e3ad": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "reimplement EqualsAvoidNullCheck, #1377",
      "commitDate": "28/08/15 3:41 AM",
      "commitName": "0024de5711531372850e883c970414563ab8e3ad",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "reimplement EqualsAvoidNullCheck, #1377",
          "commitDate": "28/08/15 3:41 AM",
          "commitName": "0024de5711531372850e883c970414563ab8e3ad",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "27/08/15 10:29 PM",
          "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,19 @@\n-    public void visitToken(final DetailAST methodCall) {\n-        final DetailAST dot \u003d methodCall.getFirstChild();\n-        if (dot.getType() !\u003d TokenTypes.DOT) {\n-            return;\n-        }\n-\n-        final DetailAST objCalledOn \u003d dot.getFirstChild();\n-        if (isStringLiteral(objCalledOn)) {\n-            return;\n-        }\n-\n-        final DetailAST method \u003d objCalledOn.getNextSibling();\n-        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n-\n-        if (\"equals\".equals(method.getText())\n-            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n-            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                MSG_EQUALS_AVOID_NULL);\n-        }\n-\n-        if (!ignoreEqualsIgnoreCase\n-            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n-            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n-            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n+    public void visitToken(final DetailAST ast) {\n+        switch (ast.getType()) {\n+            case TokenTypes.VARIABLE_DEF:\n+            case TokenTypes.PARAMETER_DEF:\n+                currentFrame.addField(ast);\n+                break;\n+            case TokenTypes.METHOD_CALL:\n+                processMethodCall(ast);\n+                break;\n+            case TokenTypes.SLIST:\n+                processSlist(ast);\n+                break;\n+            case TokenTypes.LITERAL_NEW:\n+                processLiteralNew(ast);\n+                break;\n+            default:\n+                processFrame(ast);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF:\n            case TokenTypes.PARAMETER_DEF:\n                currentFrame.addField(ast);\n                break;\n            case TokenTypes.METHOD_CALL:\n                processMethodCall(ast);\n                break;\n            case TokenTypes.SLIST:\n                processSlist(ast);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                processLiteralNew(ast);\n                break;\n            default:\n                processFrame(ast);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {
            "oldValue": "[methodCall-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "reimplement EqualsAvoidNullCheck, #1377",
          "commitDate": "28/08/15 3:41 AM",
          "commitName": "0024de5711531372850e883c970414563ab8e3ad",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "27/08/15 10:29 PM",
          "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,19 @@\n-    public void visitToken(final DetailAST methodCall) {\n-        final DetailAST dot \u003d methodCall.getFirstChild();\n-        if (dot.getType() !\u003d TokenTypes.DOT) {\n-            return;\n-        }\n-\n-        final DetailAST objCalledOn \u003d dot.getFirstChild();\n-        if (isStringLiteral(objCalledOn)) {\n-            return;\n-        }\n-\n-        final DetailAST method \u003d objCalledOn.getNextSibling();\n-        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n-\n-        if (\"equals\".equals(method.getText())\n-            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n-            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                MSG_EQUALS_AVOID_NULL);\n-        }\n-\n-        if (!ignoreEqualsIgnoreCase\n-            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n-            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n-            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n+    public void visitToken(final DetailAST ast) {\n+        switch (ast.getType()) {\n+            case TokenTypes.VARIABLE_DEF:\n+            case TokenTypes.PARAMETER_DEF:\n+                currentFrame.addField(ast);\n+                break;\n+            case TokenTypes.METHOD_CALL:\n+                processMethodCall(ast);\n+                break;\n+            case TokenTypes.SLIST:\n+                processSlist(ast);\n+                break;\n+            case TokenTypes.LITERAL_NEW:\n+                processLiteralNew(ast);\n+                break;\n+            default:\n+                processFrame(ast);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF:\n            case TokenTypes.PARAMETER_DEF:\n                currentFrame.addField(ast);\n                break;\n            case TokenTypes.METHOD_CALL:\n                processMethodCall(ast);\n                break;\n            case TokenTypes.SLIST:\n                processSlist(ast);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                processLiteralNew(ast);\n                break;\n            default:\n                processFrame(ast);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ebcf2733b6c635d5f044aa35caf2a610c7723ff": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1293: Refactoring of EqualsAvoidNullCheck. More UTs.\n",
      "commitDate": "12/07/15 7:02 AM",
      "commitName": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "07/07/15 7:40 PM",
      "commitNameOld": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.47,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(final DetailAST methodCall) {\n         final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n         if (isStringLiteral(objCalledOn)) {\n             return;\n         }\n \n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n-            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n+            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_AVOID_NULL);\n         }\n \n         if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n-            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n+            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST methodCall) {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n        if (isStringLiteral(objCalledOn)) {\n            return;\n        }\n\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_AVOID_NULL);\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArgument(methodCall) \u0026\u0026 containsAllSafeTokens(expr)) {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893": {
      "type": "Ybodychange",
      "commitMessage": "EqualsAvoidNullCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,28 @@\n     public void visitToken(final DetailAST methodCall) {\n         final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n-\n-        //checks for calling equals on String literal and\n-        //anon object which cannot be null\n-        //Also, checks if calling using strange inner class\n-        //syntax outter.inner.equals(otherObj) by looking\n-        //for the dot operator which cannot be improved\n-        if (objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n-                || objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n-                || objCalledOn.getType() \u003d\u003d TokenTypes.DOT) {\n+        if (isStringLiteral(objCalledOn)) {\n             return;\n         }\n \n+\n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_AVOID_NULL);\n         }\n \n         if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST methodCall) {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n        if (isStringLiteral(objCalledOn)) {\n            return;\n        }\n\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_AVOID_NULL);\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public void visitToken(final DetailAST methodCall)\n     {\n         final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n-        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n-                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n-                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n+        if (objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n+                || objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n+                || objCalledOn.getType() \u003d\u003d TokenTypes.DOT)\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_AVOID_NULL);\n         }\n \n         if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST methodCall)\n    {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if (objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                || objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW\n                || objCalledOn.getType() \u003d\u003d TokenTypes.DOT)\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_AVOID_NULL);\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public void visitToken(final DetailAST methodCall)\n     {\n         final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                \"equals.avoid.null\");\n+                MSG_EQUALS_AVOID_NULL);\n         }\n \n         if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n             log(methodCall.getLineNo(), methodCall.getColumnNo(),\n-                \"equalsIgnoreCase.avoid.null\");\n+                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST methodCall)\n    {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_AVOID_NULL);\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    public void visitToken(final DetailAST aMethodCall)\n+    public void visitToken(final DetailAST methodCall)\n     {\n-        final DetailAST dot \u003d aMethodCall.getFirstChild();\n+        final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 \"equals.avoid.null\");\n         }\n \n-        if (!mIgnoreEqualsIgnoreCase\n+        if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 \"equalsIgnoreCase.avoid.null\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST methodCall)\n    {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                \"equals.avoid.null\");\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                \"equalsIgnoreCase.avoid.null\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {
            "oldValue": "[aMethodCall-DetailAST(modifiers-final)]",
            "newValue": "[methodCall-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    public void visitToken(final DetailAST aMethodCall)\n+    public void visitToken(final DetailAST methodCall)\n     {\n-        final DetailAST dot \u003d aMethodCall.getFirstChild();\n+        final DetailAST dot \u003d methodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 \"equals.avoid.null\");\n         }\n \n-        if (!mIgnoreEqualsIgnoreCase\n+        if (!ignoreEqualsIgnoreCase\n             \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n             \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                 \"equalsIgnoreCase.avoid.null\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST methodCall)\n    {\n        final DetailAST dot \u003d methodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                \"equals.avoid.null\");\n        }\n\n        if (!ignoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(methodCall.getLineNo(), methodCall.getColumnNo(),\n                \"equalsIgnoreCase.avoid.null\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                \"equals.avoid.null\");\n        }\n\n        if (!mIgnoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                \"equalsIgnoreCase.avoid.null\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ybodychange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "05/12/13 9:12 AM",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "06/10/13 11:31 PM",
      "commitNameOld": "07939ec7261d7e9e7c8d1492090d6d19d5f98887",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n     public void visitToken(final DetailAST aMethodCall)\n     {\n         final DetailAST dot \u003d aMethodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n-                || (!mIgnoreEqualsIgnoreCase \u0026\u0026 \"equalsIgnoreCase\"\n-                        .equals(method.getText())))\n+            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n         {\n-            if (containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n-                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n-                    \"equals\".equals(method.getText())\n-                    ? \"equals.avoid.null\"\n-                    : \"equalsIgnoreCase.avoid.null\");\n-            }\n+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+                \"equals.avoid.null\");\n+        }\n+\n+        if (!mIgnoreEqualsIgnoreCase\n+            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n+            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n+        {\n+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+                \"equalsIgnoreCase.avoid.null\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                \"equals.avoid.null\");\n        }\n\n        if (!mIgnoreEqualsIgnoreCase\n            \u0026\u0026 \"equalsIgnoreCase\".equals(method.getText())\n            \u0026\u0026 containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr))\n        {\n            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                \"equalsIgnoreCase.avoid.null\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "5646a5ebba28a22408fb0d8ebb9f2311a619f53f": {
      "type": "Ybodychange",
      "commitMessage": "convert the logic to be false by default\n",
      "commitDate": "31/12/10 5:00 PM",
      "commitName": "5646a5ebba28a22408fb0d8ebb9f2311a619f53f",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/12/10 4:48 PM",
      "commitNameOld": "a8e60736f4d66e806ffe1d250da3b58bf5dc2132",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public void visitToken(final DetailAST aMethodCall)\n     {\n         final DetailAST dot \u003d aMethodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n \n         if (\"equals\".equals(method.getText())\n-                || (mPerformEqualsIgnoreCaseCheck \u0026\u0026 \"equalsIgnoreCase\"\n+                || (!mIgnoreEqualsIgnoreCase \u0026\u0026 \"equalsIgnoreCase\"\n                         .equals(method.getText())))\n         {\n             if (containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n                 log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                     \"equals\".equals(method.getText())\n                     ? \"equals.avoid.null\"\n                     : \"equalsIgnoreCase.avoid.null\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n                || (!mIgnoreEqualsIgnoreCase \u0026\u0026 \"equalsIgnoreCase\"\n                        .equals(method.getText())))\n        {\n            if (containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                    \"equals\".equals(method.getText())\n                    ? \"equals.avoid.null\"\n                    : \"equalsIgnoreCase.avoid.null\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "a8e60736f4d66e806ffe1d250da3b58bf5dc2132": {
      "type": "Ybodychange",
      "commitMessage": "clean up the code\n",
      "commitDate": "31/12/10 4:48 PM",
      "commitName": "a8e60736f4d66e806ffe1d250da3b58bf5dc2132",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "30/12/10 11:49 PM",
      "commitNameOld": "49862970ac522ae85fa014b5ac4985e56645fcff",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n     public void visitToken(final DetailAST aMethodCall)\n     {\n         final DetailAST dot \u003d aMethodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n-        if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n-            if (containsAllSafeTokens(expr)) {\n+\n+        if (\"equals\".equals(method.getText())\n+                || (mPerformEqualsIgnoreCaseCheck \u0026\u0026 \"equalsIgnoreCase\"\n+                        .equals(method.getText())))\n+        {\n+            if (containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n                 log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n-                        \"equals.avoid.null\");\n-            }\n-        } else if(performEqualsIgnoreCaseCheck) {\n-            if(\"equalsIgnoreCase\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n-                if (containsAllSafeTokens(expr)) {\n-                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n-                            \"equalsIgnoreCase.avoid.null\");\n-                }\n+                    \"equals\".equals(method.getText())\n+                    ? \"equals.avoid.null\"\n+                    : \"equalsIgnoreCase.avoid.null\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n\n        if (\"equals\".equals(method.getText())\n                || (mPerformEqualsIgnoreCaseCheck \u0026\u0026 \"equalsIgnoreCase\"\n                        .equals(method.getText())))\n        {\n            if (containsOneArg(expr) \u0026\u0026 containsAllSafeTokens(expr)) {\n                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                    \"equals\".equals(method.getText())\n                    ? \"equals.avoid.null\"\n                    : \"equalsIgnoreCase.avoid.null\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "49862970ac522ae85fa014b5ac4985e56645fcff": {
      "type": "Ybodychange",
      "commitMessage": "apply patch 3107393: EqualsAvoidNull should also check for equalsIgnoreCase\n",
      "commitDate": "30/12/10 11:49 PM",
      "commitName": "49862970ac522ae85fa014b5ac4985e56645fcff",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/09/10 8:36 PM",
      "commitNameOld": "6f46bd4e83204417edf9605f97098bb9d34da728",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 92.18,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,37 @@\n     public void visitToken(final DetailAST aMethodCall)\n     {\n         final DetailAST dot \u003d aMethodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n         final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n         final DetailAST method \u003d objCalledOn.getNextSibling();\n         final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n         if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n             if (containsAllSafeTokens(expr)) {\n                 log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                         \"equals.avoid.null\");\n             }\n+        } else if(performEqualsIgnoreCaseCheck) {\n+            if(\"equalsIgnoreCase\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n+                if (containsAllSafeTokens(expr)) {\n+                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+                            \"equalsIgnoreCase.avoid.null\");\n+                }\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n        if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n            if (containsAllSafeTokens(expr)) {\n                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                        \"equals.avoid.null\");\n            }\n        } else if(performEqualsIgnoreCaseCheck) {\n            if(\"equalsIgnoreCase\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n                if (containsAllSafeTokens(expr)) {\n                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                            \"equalsIgnoreCase.avoid.null\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/04/08 4:48 AM",
      "commitNameOld": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 164.99,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(final DetailAST aMethodCall)\n     {\n-        final AST dot \u003d aMethodCall.getFirstChild();\n+        final DetailAST dot \u003d aMethodCall.getFirstChild();\n         if (dot.getType() !\u003d TokenTypes.DOT) {\n             return;\n         }\n \n-        final AST objCalledOn \u003d dot.getFirstChild();\n+        final DetailAST objCalledOn \u003d dot.getFirstChild();\n \n         //checks for calling equals on String literal and\n         //anon object which cannot be null\n         //Also, checks if calling using strange inner class\n         //syntax outter.inner.equals(otherObj) by looking\n         //for the dot operator which cannot be improved\n         if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                 || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n         {\n             return;\n         }\n \n-        final AST method \u003d objCalledOn.getNextSibling();\n-        final AST expr \u003d dot.getNextSibling().getFirstChild();\n+        final DetailAST method \u003d objCalledOn.getNextSibling();\n+        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n         if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n             if (containsAllSafeTokens(expr)) {\n                 log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                         \"equals.avoid.null\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final DetailAST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final DetailAST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final DetailAST method \u003d objCalledOn.getNextSibling();\n        final DetailAST expr \u003d dot.getNextSibling().getFirstChild();\n        if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n            if (containsAllSafeTokens(expr)) {\n                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                        \"equals.avoid.null\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "79404974eff1458f4243f8acd6a08b6a8b869342": {
      "type": "Yintroduced",
      "commitMessage": "Integrate patch #1895152, for Avoid Null Equals Comparison Check\n",
      "commitDate": "06/04/08 4:48 AM",
      "commitName": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,30 @@\n+    public void visitToken(final DetailAST aMethodCall)\n+    {\n+        final AST dot \u003d aMethodCall.getFirstChild();\n+        if (dot.getType() !\u003d TokenTypes.DOT) {\n+            return;\n+        }\n+\n+        final AST objCalledOn \u003d dot.getFirstChild();\n+\n+        //checks for calling equals on String literal and\n+        //anon object which cannot be null\n+        //Also, checks if calling using strange inner class\n+        //syntax outter.inner.equals(otherObj) by looking\n+        //for the dot operator which cannot be improved\n+        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n+                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n+                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n+        {\n+            return;\n+        }\n+\n+        final AST method \u003d objCalledOn.getNextSibling();\n+        final AST expr \u003d dot.getNextSibling().getFirstChild();\n+        if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n+            if (containsAllSafeTokens(expr)) {\n+                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n+                        \"equals.avoid.null\");\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aMethodCall)\n    {\n        final AST dot \u003d aMethodCall.getFirstChild();\n        if (dot.getType() !\u003d TokenTypes.DOT) {\n            return;\n        }\n\n        final AST objCalledOn \u003d dot.getFirstChild();\n\n        //checks for calling equals on String literal and\n        //anon object which cannot be null\n        //Also, checks if calling using strange inner class\n        //syntax outter.inner.equals(otherObj) by looking\n        //for the dot operator which cannot be improved\n        if ((objCalledOn.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n                || (objCalledOn.getType() \u003d\u003d TokenTypes.DOT))\n        {\n            return;\n        }\n\n        final AST method \u003d objCalledOn.getNextSibling();\n        final AST expr \u003d dot.getNextSibling().getFirstChild();\n        if (\"equals\".equals(method.getText()) \u0026\u0026 containsOneArg(expr)) {\n            if (containsAllSafeTokens(expr)) {\n                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),\n                        \"equals.avoid.null\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java"
    }
  }
}