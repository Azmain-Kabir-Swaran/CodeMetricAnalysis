{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Main.java",
  "functionName": "runCheckstyle",
  "functionId": "runCheckstyle___options-CliOptions__filesToProcess-List__File__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
  "functionStartLine": 348,
  "functionEndLine": 415,
  "numCommitsSeen": 220,
  "timeTaken": 3791,
  "changeHistory": [
    "f3e4f0e9fa4cff9306429797f59e67f4a402aa95",
    "af39d97d6fef72de57e804e63a8207cfe5906670",
    "d2cf01e20f8e628483757327ebffb13cbfd12c9e",
    "f3143fa28a339d6409932362307e906741b8c6f9",
    "433f8b0577a6afb7e8552c0b2a9de1b33892b9d5",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
    "dc88a9954baf88df6543cf73baabed710f882363",
    "036582d728d2e2bb37f360bb3a74f899f04d587d",
    "fe7655e7d82152b57fd68d37df621d22b47132ad",
    "9765cda41ba8767f1f187dc1b097793a1dccedcd",
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
    "b6d9344d1c152f225a22ce9ce09341b3cc9488af",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b"
  ],
  "changeHistoryShort": {
    "f3e4f0e9fa4cff9306429797f59e67f4a402aa95": "Ybodychange",
    "af39d97d6fef72de57e804e63a8207cfe5906670": "Ybodychange",
    "d2cf01e20f8e628483757327ebffb13cbfd12c9e": "Ybodychange",
    "f3143fa28a339d6409932362307e906741b8c6f9": "Ymultichange(Yparameterchange,Ybodychange)",
    "433f8b0577a6afb7e8552c0b2a9de1b33892b9d5": "Ybodychange",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": "Yexceptionschange",
    "dc88a9954baf88df6543cf73baabed710f882363": "Ybodychange",
    "036582d728d2e2bb37f360bb3a74f899f04d587d": "Ybodychange",
    "fe7655e7d82152b57fd68d37df621d22b47132ad": "Ybodychange",
    "9765cda41ba8767f1f187dc1b097793a1dccedcd": "Ybodychange",
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923": "Ybodychange",
    "b6d9344d1c152f225a22ce9ce09341b3cc9488af": "Yexceptionschange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f3e4f0e9fa4cff9306429797f59e67f4a402aa95": {
      "type": "Ybodychange",
      "commitMessage": "Issue #8181: Remove cli options -C and -W\n",
      "commitDate": "25/04/20 8:12 AM",
      "commitName": "f3e4f0e9fa4cff9306429797f59e67f4a402aa95",
      "commitAuthor": "Gaurab Dasgupta",
      "commitDateOld": "16/04/20 6:39 AM",
      "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
      "commitAuthorOld": "Joseph Mate",
      "daysBetweenCommits": 9.06,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n         if (options.propertiesFile \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(options.propertiesFile);\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n-                new ThreadModeSettings(options.checkerThreadsNumber,\n-                        options.treeWalkerThreadsNumber);\n+                new ThreadModeSettings(CliOptions.CHECKER_THREADS_NUMBER,\n+                        CliOptions.TREE_WALKER_THREADS_NUMBER);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n         if (options.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 options.configurationFile, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             final AuditListener listener;\n             if (options.generateXpathSuppressionsFile) {\n                 // create filter to print generated xpath suppressions file\n                 final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                 if (treeWalkerConfig !\u003d null) {\n                     final DefaultConfiguration moduleConfig \u003d\n                             new DefaultConfiguration(\n                                     XpathFileGeneratorAstFilter.class.getName());\n                     moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                             String.valueOf(options.tabWidth));\n                     ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                 }\n \n                 listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n                         getOutputStreamOptions(options.outputPath));\n             }\n             else {\n                 listener \u003d createListener(options.format, options.outputPath);\n             }\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (options.propertiesFile \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(options.propertiesFile);\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(CliOptions.CHECKER_THREADS_NUMBER,\n                        CliOptions.TREE_WALKER_THREADS_NUMBER);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (options.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                options.configurationFile, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (options.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                            String.valueOf(options.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n                        getOutputStreamOptions(options.outputPath));\n            }\n            else {\n                listener \u003d createListener(options.format, options.outputPath);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(filesToProcess);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "af39d97d6fef72de57e804e63a8207cfe5906670": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7382: Fix Appveyor junit5 tests\n",
      "commitDate": "17/12/19 12:58 PM",
      "commitName": "af39d97d6fef72de57e804e63a8207cfe5906670",
      "commitAuthor": "pbludov",
      "commitDateOld": "07/12/19 8:15 AM",
      "commitNameOld": "ad97946912b6278fe7898418058b0405f82ae1b9",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 10.2,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n         if (options.propertiesFile \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(options.propertiesFile);\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n                 new ThreadModeSettings(options.checkerThreadsNumber,\n                         options.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n         if (options.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 options.configurationFile, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             final AuditListener listener;\n             if (options.generateXpathSuppressionsFile) {\n                 // create filter to print generated xpath suppressions file\n                 final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                 if (treeWalkerConfig !\u003d null) {\n                     final DefaultConfiguration moduleConfig \u003d\n                             new DefaultConfiguration(\n                                     XpathFileGeneratorAstFilter.class.getName());\n                     moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                             String.valueOf(options.tabWidth));\n                     ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                 }\n \n                 listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n-                        AutomaticBean.OutputStreamOptions.NONE);\n+                        getOutputStreamOptions(options.outputPath));\n             }\n             else {\n                 listener \u003d createListener(options.format, options.outputPath);\n             }\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (options.propertiesFile \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(options.propertiesFile);\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(options.checkerThreadsNumber,\n                        options.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (options.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                options.configurationFile, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (options.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                            String.valueOf(options.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n                        getOutputStreamOptions(options.outputPath));\n            }\n            else {\n                listener \u003d createListener(options.format, options.outputPath);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(filesToProcess);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "d2cf01e20f8e628483757327ebffb13cbfd12c9e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6934: fix suppression generation with custom output location\n",
      "commitDate": "11/08/19 2:04 PM",
      "commitName": "d2cf01e20f8e628483757327ebffb13cbfd12c9e",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "01/08/19 6:42 PM",
      "commitNameOld": "0f8e281e05fb0d2fbeef6ad561b6d23a8f2b4a11",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n         if (options.propertiesFile \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(options.propertiesFile);\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n                 new ThreadModeSettings(options.checkerThreadsNumber,\n                         options.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n         if (options.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 options.configurationFile, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             final AuditListener listener;\n             if (options.generateXpathSuppressionsFile) {\n                 // create filter to print generated xpath suppressions file\n                 final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                 if (treeWalkerConfig !\u003d null) {\n                     final DefaultConfiguration moduleConfig \u003d\n                             new DefaultConfiguration(\n                                     XpathFileGeneratorAstFilter.class.getName());\n                     moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                             String.valueOf(options.tabWidth));\n                     ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                 }\n \n-                listener \u003d new XpathFileGeneratorAuditListener(System.out,\n+                listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n                         AutomaticBean.OutputStreamOptions.NONE);\n             }\n             else {\n                 listener \u003d createListener(options.format, options.outputPath);\n             }\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (options.propertiesFile \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(options.propertiesFile);\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(options.checkerThreadsNumber,\n                        options.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (options.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                options.configurationFile, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (options.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                            String.valueOf(options.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(getOutputStream(options.outputPath),\n                        AutomaticBean.OutputStreamOptions.NONE);\n            }\n            else {\n                listener \u003d createListener(options.format, options.outputPath);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(filesToProcess);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "f3143fa28a339d6409932362307e906741b8c6f9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
      "commitDate": "29/10/18 4:33 PM",
      "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
      "commitAuthor": "Remko Popma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,68 @@\n-    private static int runCheckstyle(CliOptions cliOptions)\n+    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n-        if (cliOptions.propertiesLocation \u003d\u003d null) {\n+        if (options.propertiesFile \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n-            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n+            props \u003d loadProperties(options.propertiesFile);\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n-                new ThreadModeSettings(\n-                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n+                new ThreadModeSettings(options.checkerThreadsNumber,\n+                        options.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n-        if (cliOptions.executeIgnoredModules) {\n+        if (options.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n-                cliOptions.configLocation, new PropertiesExpander(props),\n+                options.configurationFile, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             final AuditListener listener;\n-            if (cliOptions.generateXpathSuppressionsFile) {\n+            if (options.generateXpathSuppressionsFile) {\n                 // create filter to print generated xpath suppressions file\n                 final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                 if (treeWalkerConfig !\u003d null) {\n                     final DefaultConfiguration moduleConfig \u003d\n                             new DefaultConfiguration(\n                                     XpathFileGeneratorAstFilter.class.getName());\n-                    moduleConfig.addAttribute(OPTION_TAB_WIDTH_NAME,\n-                            Integer.toString(cliOptions.tabWidth));\n+                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n+                            String.valueOf(options.tabWidth));\n                     ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                 }\n \n                 listener \u003d new XpathFileGeneratorAuditListener(System.out,\n                         AutomaticBean.OutputStreamOptions.NONE);\n             }\n             else {\n-                listener \u003d createListener(cliOptions.format,\n-                        cliOptions.outputLocation);\n+                listener \u003d createListener(options.format, options.outputPath);\n             }\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n-            errorCounter \u003d rootModule.process(cliOptions.files);\n+            errorCounter \u003d rootModule.process(filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (options.propertiesFile \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(options.propertiesFile);\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(options.checkerThreadsNumber,\n                        options.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (options.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                options.configurationFile, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (options.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                            String.valueOf(options.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(System.out,\n                        AutomaticBean.OutputStreamOptions.NONE);\n            }\n            else {\n                listener \u003d createListener(options.format, options.outputPath);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(filesToProcess);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {
            "oldValue": "[cliOptions-CliOptions]",
            "newValue": "[options-CliOptions, filesToProcess-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,68 @@\n-    private static int runCheckstyle(CliOptions cliOptions)\n+    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n-        if (cliOptions.propertiesLocation \u003d\u003d null) {\n+        if (options.propertiesFile \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n-            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n+            props \u003d loadProperties(options.propertiesFile);\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n-                new ThreadModeSettings(\n-                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n+                new ThreadModeSettings(options.checkerThreadsNumber,\n+                        options.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n-        if (cliOptions.executeIgnoredModules) {\n+        if (options.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n-                cliOptions.configLocation, new PropertiesExpander(props),\n+                options.configurationFile, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             final AuditListener listener;\n-            if (cliOptions.generateXpathSuppressionsFile) {\n+            if (options.generateXpathSuppressionsFile) {\n                 // create filter to print generated xpath suppressions file\n                 final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                 if (treeWalkerConfig !\u003d null) {\n                     final DefaultConfiguration moduleConfig \u003d\n                             new DefaultConfiguration(\n                                     XpathFileGeneratorAstFilter.class.getName());\n-                    moduleConfig.addAttribute(OPTION_TAB_WIDTH_NAME,\n-                            Integer.toString(cliOptions.tabWidth));\n+                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n+                            String.valueOf(options.tabWidth));\n                     ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                 }\n \n                 listener \u003d new XpathFileGeneratorAuditListener(System.out,\n                         AutomaticBean.OutputStreamOptions.NONE);\n             }\n             else {\n-                listener \u003d createListener(cliOptions.format,\n-                        cliOptions.outputLocation);\n+                listener \u003d createListener(options.format, options.outputPath);\n             }\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n-            errorCounter \u003d rootModule.process(cliOptions.files);\n+            errorCounter \u003d rootModule.process(filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int runCheckstyle(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (options.propertiesFile \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(options.propertiesFile);\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(options.checkerThreadsNumber,\n                        options.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (options.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                options.configurationFile, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (options.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(CliOptions.ATTRIB_TAB_WIDTH_NAME,\n                            String.valueOf(options.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(System.out,\n                        AutomaticBean.OutputStreamOptions.NONE);\n            }\n            else {\n                listener \u003d createListener(options.format, options.outputPath);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(filesToProcess);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {}
        }
      ]
    },
    "433f8b0577a6afb7e8552c0b2a9de1b33892b9d5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #102: Generate a suppressions.xml file from the errors list\n",
      "commitDate": "29/06/18 6:58 AM",
      "commitName": "433f8b0577a6afb7e8552c0b2a9de1b33892b9d5",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 25.39,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,69 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n                 new ThreadModeSettings(\n                         cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n         if (cliOptions.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n-        // create a listener for output\n-        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n-\n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n+            final AuditListener listener;\n+            if (cliOptions.generateXpathSuppressionsFile) {\n+                // create filter to print generated xpath suppressions file\n+                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n+                if (treeWalkerConfig !\u003d null) {\n+                    final DefaultConfiguration moduleConfig \u003d\n+                            new DefaultConfiguration(\n+                                    XpathFileGeneratorAstFilter.class.getName());\n+                    moduleConfig.addAttribute(OPTION_TAB_WIDTH_NAME,\n+                            Integer.toString(cliOptions.tabWidth));\n+                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n+                }\n+\n+                listener \u003d new XpathFileGeneratorAuditListener(System.out,\n+                        AutomaticBean.OutputStreamOptions.NONE);\n+            }\n+            else {\n+                listener \u003d createListener(cliOptions.format,\n+                        cliOptions.outputLocation);\n+            }\n+\n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(\n                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (cliOptions.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            final AuditListener listener;\n            if (cliOptions.generateXpathSuppressionsFile) {\n                // create filter to print generated xpath suppressions file\n                final Configuration treeWalkerConfig \u003d getTreeWalkerConfig(config);\n                if (treeWalkerConfig !\u003d null) {\n                    final DefaultConfiguration moduleConfig \u003d\n                            new DefaultConfiguration(\n                                    XpathFileGeneratorAstFilter.class.getName());\n                    moduleConfig.addAttribute(OPTION_TAB_WIDTH_NAME,\n                            Integer.toString(cliOptions.tabWidth));\n                    ((DefaultConfiguration) treeWalkerConfig).addChild(moduleConfig);\n                }\n\n                listener \u003d new XpathFileGeneratorAuditListener(System.out,\n                        AutomaticBean.OutputStreamOptions.NONE);\n            }\n            else {\n                listener \u003d createListener(cliOptions.format,\n                        cliOptions.outputLocation);\n            }\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": {
      "type": "Yexceptionschange",
      "commitMessage": "Issue #5638: File{Input,Output}Stream to Files.new{Input,Output}Stream\n",
      "commitDate": "14/04/18 5:52 AM",
      "commitName": "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "23/01/18 10:39 PM",
      "commitNameOld": "58327e1dd9707b09f82ae2d4d4ce14c253247154",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 80.26,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n-            throws CheckstyleException, FileNotFoundException {\n+            throws CheckstyleException, IOException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n                 new ThreadModeSettings(\n                         cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n \n         final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n         if (cliOptions.executeIgnoredModules) {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n         }\n         else {\n             ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n         }\n \n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props),\n                 ignoredModulesOptions, multiThreadModeSettings);\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, IOException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(\n                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (cliOptions.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {
        "oldValue": "[CheckstyleException, FileNotFoundException]",
        "newValue": "[CheckstyleException, IOException]"
      }
    },
    "dc88a9954baf88df6543cf73baabed710f882363": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4709: fix avoid boolean parameters for public methods\n",
      "commitDate": "09/08/17 4:54 AM",
      "commitName": "dc88a9954baf88df6543cf73baabed710f882363",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "29/07/17 6:40 PM",
      "commitNameOld": "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 10.43,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,53 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final ThreadModeSettings multiThreadModeSettings \u003d\n                 new ThreadModeSettings(\n                         cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n+\n+        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n+        if (cliOptions.executeIgnoredModules) {\n+            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n+        }\n+        else {\n+            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n+        }\n+\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props),\n-                !cliOptions.executeIgnoredModules, multiThreadModeSettings);\n+                ignoredModulesOptions, multiThreadModeSettings);\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n \n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(\n                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n\n        final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n        if (cliOptions.executeIgnoredModules) {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n        }\n        else {\n            ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n        }\n\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props),\n                ignoredModulesOptions, multiThreadModeSettings);\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "036582d728d2e2bb37f360bb3a74f899f04d587d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4370: Add multi thread mode to checkstyle launcher\n",
      "commitDate": "02/07/17 7:43 PM",
      "commitName": "036582d728d2e2bb37f360bb3a74f899f04d587d",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": "19/06/17 2:53 PM",
      "commitNameOld": "fe7655e7d82152b57fd68d37df621d22b47132ad",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.2,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n+        final ThreadModeSettings multiThreadModeSettings \u003d\n+                new ThreadModeSettings(\n+                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props),\n-                !cliOptions.executeIgnoredModules);\n+                !cliOptions.executeIgnoredModules, multiThreadModeSettings);\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n \n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final ThreadModeSettings multiThreadModeSettings \u003d\n                new ThreadModeSettings(\n                        cliOptions.checkerThreadsNumber, cliOptions.treeWalkerThreadsNumber);\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props),\n                !cliOptions.executeIgnoredModules, multiThreadModeSettings);\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "fe7655e7d82152b57fd68d37df621d22b47132ad": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3566: added execute ignored modules to CLI",
      "commitDate": "19/06/17 2:53 PM",
      "commitName": "fe7655e7d82152b57fd68d37df621d22b47132ad",
      "commitAuthor": "rnveach",
      "commitDateOld": "12/06/17 3:51 PM",
      "commitNameOld": "35d5d4d9e8cea4b9fec731b67a15f488d61cdf61",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 6.96,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n-                cliOptions.configLocation, new PropertiesExpander(props));\n+                cliOptions.configLocation, new PropertiesExpander(props),\n+                !cliOptions.executeIgnoredModules);\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create RootModule object and run it\n         final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n \n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props),\n                !cliOptions.executeIgnoredModules);\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "9765cda41ba8767f1f187dc1b097793a1dccedcd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4250: fix for seleveral inspection violations(ignored return value, deprecated package, extra variable initialization)\n",
      "commitDate": "23/04/17 12:27 PM",
      "commitName": "9765cda41ba8767f1f187dc1b097793a1dccedcd",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 86.21,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props));\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create RootModule object and run it\n-        int errorCounter \u003d 0;\n+        final int errorCounter;\n         final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n         final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n \n             rootModule.setModuleClassLoader(moduleClassLoader);\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n \n             // run RootModule\n             errorCounter \u003d rootModule.process(cliOptions.files);\n \n         }\n         finally {\n             rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props));\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        final int errorCounter;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "8c8fee7432c89b47936c27bcc2c7f60f5cc79923": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3515: allowed cli to override and swap checker",
      "commitDate": "08/11/16 9:30 PM",
      "commitName": "8c8fee7432c89b47936c27bcc2c7f60f5cc79923",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/09/16 7:52 PM",
      "commitNameOld": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 49.11,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props));\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n-        // create Checker object and run it\n+        // create RootModule object and run it\n         int errorCounter \u003d 0;\n-        final Checker checker \u003d new Checker();\n+        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n+        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n \n         try {\n \n-            final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n-            checker.setModuleClassLoader(moduleClassLoader);\n-            checker.configure(config);\n-            checker.addListener(listener);\n+            rootModule.setModuleClassLoader(moduleClassLoader);\n+            rootModule.configure(config);\n+            rootModule.addListener(listener);\n \n-            // run Checker\n-            errorCounter \u003d checker.process(cliOptions.files);\n+            // run RootModule\n+            errorCounter \u003d rootModule.process(cliOptions.files);\n \n         }\n         finally {\n-            checker.destroy();\n+            rootModule.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props));\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create RootModule object and run it\n        int errorCounter \u003d 0;\n        final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n        final RootModule rootModule \u003d getRootModule(config.getName(), moduleClassLoader);\n\n        try {\n\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(config);\n            rootModule.addListener(listener);\n\n            // run RootModule\n            errorCounter \u003d rootModule.process(cliOptions.files);\n\n        }\n        finally {\n            rootModule.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "b6d9344d1c152f225a22ce9ce09341b3cc9488af": {
      "type": "Yexceptionschange",
      "commitMessage": "Pull #2034: Use StandardCharsets and get rid of UnsupportedEncodingException\n",
      "commitDate": "17/09/15 3:01 PM",
      "commitName": "b6d9344d1c152f225a22ce9ce09341b3cc9488af",
      "commitAuthor": "Michael Osipov",
      "commitDateOld": "11/09/15 4:32 PM",
      "commitNameOld": "0fc8b62a35beddc89cb3412388c27e88cd8cab4a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n-            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException {\n+            throws CheckstyleException, FileNotFoundException {\n         // setup the properties\n         final Properties props;\n \n         if (cliOptions.propertiesLocation \u003d\u003d null) {\n             props \u003d System.getProperties();\n         }\n         else {\n             props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n         }\n \n         // create a configuration\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props));\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create Checker object and run it\n         int errorCounter \u003d 0;\n         final Checker checker \u003d new Checker();\n \n         try {\n \n             final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n             checker.setModuleClassLoader(moduleClassLoader);\n             checker.configure(config);\n             checker.addListener(listener);\n \n             // run Checker\n             errorCounter \u003d checker.process(cliOptions.files);\n \n         }\n         finally {\n             checker.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props));\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create Checker object and run it\n        int errorCounter \u003d 0;\n        final Checker checker \u003d new Checker();\n\n        try {\n\n            final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n            checker.setModuleClassLoader(moduleClassLoader);\n            checker.configure(config);\n            checker.addListener(listener);\n\n            // run Checker\n            errorCounter \u003d checker.process(cliOptions.files);\n\n        }\n        finally {\n            checker.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {
        "oldValue": "[CheckstyleException, UnsupportedEncodingException, FileNotFoundException]",
        "newValue": "[CheckstyleException, FileNotFoundException]"
      }
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": "16/08/15 9:01 PM",
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "15/08/15 8:23 PM",
      "commitNameOld": "259cc41625b88390ce26737a819aa446cfc72541",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n     private static int runCheckstyle(CliOptions cliOptions)\n             throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException {\n         // setup the properties\n-        final Properties props \u003d\n-                cliOptions.propertiesLocation !\u003d null\n-                        ? loadProperties(new File(cliOptions.propertiesLocation))\n-                        : System.getProperties();\n+        final Properties props;\n+\n+        if (cliOptions.propertiesLocation \u003d\u003d null) {\n+            props \u003d System.getProperties();\n+        }\n+        else {\n+            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n+        }\n \n         // create a configuration\n         final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                 cliOptions.configLocation, new PropertiesExpander(props));\n \n         // create a listener for output\n         final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n \n         // create Checker object and run it\n         int errorCounter \u003d 0;\n         final Checker checker \u003d new Checker();\n \n         try {\n \n             final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n             checker.setModuleClassLoader(moduleClassLoader);\n             checker.configure(config);\n             checker.addListener(listener);\n \n             // run Checker\n             errorCounter \u003d checker.process(cliOptions.files);\n \n         }\n         finally {\n             checker.destroy();\n         }\n \n         return errorCounter;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException {\n        // setup the properties\n        final Properties props;\n\n        if (cliOptions.propertiesLocation \u003d\u003d null) {\n            props \u003d System.getProperties();\n        }\n        else {\n            props \u003d loadProperties(new File(cliOptions.propertiesLocation));\n        }\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props));\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create Checker object and run it\n        int errorCounter \u003d 0;\n        final Checker checker \u003d new Checker();\n\n        try {\n\n            final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n            checker.setModuleClassLoader(moduleClassLoader);\n            checker.configure(config);\n            checker.addListener(listener);\n\n            // run Checker\n            errorCounter \u003d checker.process(cliOptions.files);\n\n        }\n        finally {\n            checker.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": {
      "type": "Yintroduced",
      "commitMessage": "huge refactoring for CLI Main class. Issue #596\n",
      "commitDate": "05/05/15 11:12 AM",
      "commitName": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,37 @@\n+    private static int runCheckstyle(CliOptions cliOptions)\n+            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException\n+    {\n+        // setup the properties\n+        final Properties props \u003d\n+                cliOptions.propertiesLocation !\u003d null\n+                        ? loadProperties(new File(cliOptions.propertiesLocation))\n+                        : System.getProperties();\n+\n+        // create a configuration\n+        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n+                cliOptions.configLocation, new PropertiesExpander(props));\n+\n+        // create a listener for output\n+        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n+\n+        // create Checker object and run it\n+        int errorCounter \u003d 0;\n+        final Checker checker \u003d new Checker();\n+\n+        try {\n+\n+            final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n+            checker.setModuleClassLoader(moduleClassLoader);\n+            checker.configure(config);\n+            checker.addListener(listener);\n+\n+            // run Checker\n+            errorCounter \u003d checker.process(cliOptions.files);\n+\n+        }\n+        finally {\n+            checker.destroy();\n+        }\n+\n+        return errorCounter;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCheckstyle(CliOptions cliOptions)\n            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException\n    {\n        // setup the properties\n        final Properties props \u003d\n                cliOptions.propertiesLocation !\u003d null\n                        ? loadProperties(new File(cliOptions.propertiesLocation))\n                        : System.getProperties();\n\n        // create a configuration\n        final Configuration config \u003d ConfigurationLoader.loadConfiguration(\n                cliOptions.configLocation, new PropertiesExpander(props));\n\n        // create a listener for output\n        final AuditListener listener \u003d createListener(cliOptions.format, cliOptions.outputLocation);\n\n        // create Checker object and run it\n        int errorCounter \u003d 0;\n        final Checker checker \u003d new Checker();\n\n        try {\n\n            final ClassLoader moduleClassLoader \u003d Checker.class.getClassLoader();\n            checker.setModuleClassLoader(moduleClassLoader);\n            checker.configure(config);\n            checker.addListener(listener);\n\n            // run Checker\n            errorCounter \u003d checker.process(cliOptions.files);\n\n        }\n        finally {\n            checker.destroy();\n        }\n\n        return errorCounter;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java"
    }
  }
}