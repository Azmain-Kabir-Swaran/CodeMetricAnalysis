{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TagParser.java",
  "functionName": "parseTag",
  "functionId": "parseTag___text-String[]__lineNo-int__nLines-int(modifiers-final)__position-Point",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java",
  "functionStartLine": 125,
  "functionEndLine": 151,
  "numCommitsSeen": 40,
  "timeTaken": 642,
  "changeHistory": [
    "88830ca708e2deb22cae333057ebddd15f7f9c57"
  ],
  "changeHistoryShort": {
    "88830ca708e2deb22cae333057ebddd15f7f9c57": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88830ca708e2deb22cae333057ebddd15f7f9c57": {
      "type": "Yintroduced",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:56 PM",
      "commitName": "88830ca708e2deb22cae333057ebddd15f7f9c57",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,27 @@\n+    private Point parseTag(String[] text, int lineNo, final int nLines, Point position) {\n+        // find end of tag\n+        final Point endTag \u003d findChar(text, \u0027\u003e\u0027, position);\n+        final boolean incompleteTag \u003d endTag.getLineNo() \u003e\u003d nLines;\n+        // get tag id (one word)\n+        final String tagId;\n+\n+        if (incompleteTag) {\n+            tagId \u003d \"\";\n+        }\n+        else {\n+            tagId \u003d getTagId(text, position);\n+        }\n+        // is this closed tag\n+        final boolean closedTag \u003d\n+                endTag.getLineNo() \u003c nLines\n+                 \u0026\u0026 text[endTag.getLineNo()]\n+                 .charAt(endTag.getColumnNo() - 1) \u003d\u003d \u0027/\u0027;\n+        // add new tag\n+        add(new HtmlTag(tagId,\n+                        position.getLineNo() + lineNo,\n+                        position.getColumnNo(),\n+                        closedTag,\n+                        incompleteTag,\n+                        text[position.getLineNo()]));\n+        return endTag;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Point parseTag(String[] text, int lineNo, final int nLines, Point position) {\n        // find end of tag\n        final Point endTag \u003d findChar(text, \u0027\u003e\u0027, position);\n        final boolean incompleteTag \u003d endTag.getLineNo() \u003e\u003d nLines;\n        // get tag id (one word)\n        final String tagId;\n\n        if (incompleteTag) {\n            tagId \u003d \"\";\n        }\n        else {\n            tagId \u003d getTagId(text, position);\n        }\n        // is this closed tag\n        final boolean closedTag \u003d\n                endTag.getLineNo() \u003c nLines\n                 \u0026\u0026 text[endTag.getLineNo()]\n                 .charAt(endTag.getColumnNo() - 1) \u003d\u003d \u0027/\u0027;\n        // add new tag\n        add(new HtmlTag(tagId,\n                        position.getLineNo() + lineNo,\n                        position.getColumnNo(),\n                        closedTag,\n                        incompleteTag,\n                        text[position.getLineNo()]));\n        return endTag;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java"
    }
  }
}