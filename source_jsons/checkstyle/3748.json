{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AutomaticBean.java",
  "functionName": "configure",
  "functionId": "configure___config-Configuration",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
  "functionStartLine": 185,
  "functionEndLine": 203,
  "numCommitsSeen": 131,
  "timeTaken": 3191,
  "changeHistory": [
    "906adae57d549bef09d8839f19376053b041f7e7",
    "aeb68b7da9776ef599b02e3d0fcb449aabcaf809",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "050d1e55a819d639fe9116ec3ebd99902530c3f9",
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3",
    "91d979ef8eab8d8f6fe5e5b64ec0586b49ea0315",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "2c02a737d97980eb4c984056c33265b8a917a717",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "eeba08c1028a79bdc2140476b24ce8d60f04657a",
    "ee6de76ea79d5e8400670dcf441f481e291d40e5",
    "8ec36bc770a78f423f6c0d0c37b9efd7981815ed",
    "e8d025321c3d1f5741e860bd96a93e7d2169ca9c",
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4",
    "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
    "39651f60d0c1352b33e510d8d398d38bdab3382b"
  ],
  "changeHistoryShort": {
    "906adae57d549bef09d8839f19376053b041f7e7": "Ybodychange",
    "aeb68b7da9776ef599b02e3d0fcb449aabcaf809": "Ybodychange",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ymultichange(Yparameterchange,Ybodychange)",
    "050d1e55a819d639fe9116ec3ebd99902530c3f9": "Ybodychange",
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423": "Ybodychange",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": "Ybodychange",
    "91d979ef8eab8d8f6fe5e5b64ec0586b49ea0315": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "2c02a737d97980eb4c984056c33265b8a917a717": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "eeba08c1028a79bdc2140476b24ce8d60f04657a": "Ybodychange",
    "ee6de76ea79d5e8400670dcf441f481e291d40e5": "Ybodychange",
    "8ec36bc770a78f423f6c0d0c37b9efd7981815ed": "Ybodychange",
    "e8d025321c3d1f5741e860bd96a93e7d2169ca9c": "Ybodychange",
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4": "Ybodychange",
    "08d6efe49d2960d9bd61bfb9cca65910f0c19b58": "Ymultichange(Ymodifierchange,Ybodychange)",
    "39651f60d0c1352b33e510d8d398d38bdab3382b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "906adae57d549bef09d8839f19376053b041f7e7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4814: added try/catch to setting up TreeWalker children",
      "commitDate": "23/02/19 3:54 AM",
      "commitName": "906adae57d549bef09d8839f19376053b041f7e7",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 38.92,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public final void configure(Configuration config)\n             throws CheckstyleException {\n         configuration \u003d config;\n \n         final String[] attributes \u003d config.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d config.getAttribute(key);\n \n-            tryCopyProperty(config.getName(), key, value, true);\n+            tryCopyProperty(key, value, true);\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d config.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration config)\n            throws CheckstyleException {\n        configuration \u003d config;\n\n        final String[] attributes \u003d config.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d config.getAttribute(key);\n\n            tryCopyProperty(key, value, true);\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "aeb68b7da9776ef599b02e3d0fcb449aabcaf809": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this in test code. #1555\n\nFixes `UnnecessaryThis` inspection violations in test code.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n",
      "commitDate": "17/08/15 10:52 PM",
      "commitName": "aeb68b7da9776ef599b02e3d0fcb449aabcaf809",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public final void configure(Configuration config)\n         throws CheckstyleException {\n-        this.configuration \u003d config;\n+        configuration \u003d config;\n \n         final String[] attributes \u003d config.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d config.getAttribute(key);\n \n             tryCopyProperty(config.getName(), key, value, true);\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d config.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration config)\n        throws CheckstyleException {\n        configuration \u003d config;\n\n        final String[] attributes \u003d config.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d config.getAttribute(key);\n\n            tryCopyProperty(config.getName(), key, value, true);\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #1566: HiddenField violations fixed\n",
          "commitDate": "11/08/15 10:19 PM",
          "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "11/08/15 5:22 AM",
          "commitNameOld": "f5f1d754e28ee1e3c5472fd4d5292f24a335e64e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    public final void configure(Configuration configuration)\n+    public final void configure(Configuration config)\n         throws CheckstyleException {\n-        this.configuration \u003d configuration;\n+        this.configuration \u003d config;\n \n-        final String[] attributes \u003d configuration.getAttributeNames();\n+        final String[] attributes \u003d config.getAttributeNames();\n \n         for (final String key : attributes) {\n-            final String value \u003d configuration.getAttribute(key);\n+            final String value \u003d config.getAttribute(key);\n \n-            tryCopyProperty(configuration.getName(), key, value, true);\n+            tryCopyProperty(config.getName(), key, value, true);\n         }\n \n         finishLocalSetup();\n \n-        final Configuration[] childConfigs \u003d configuration.getChildren();\n+        final Configuration[] childConfigs \u003d config.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration config)\n        throws CheckstyleException {\n        this.configuration \u003d config;\n\n        final String[] attributes \u003d config.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d config.getAttribute(key);\n\n            tryCopyProperty(config.getName(), key, value, true);\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {
            "oldValue": "[configuration-Configuration]",
            "newValue": "[config-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1566: HiddenField violations fixed\n",
          "commitDate": "11/08/15 10:19 PM",
          "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "11/08/15 5:22 AM",
          "commitNameOld": "f5f1d754e28ee1e3c5472fd4d5292f24a335e64e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    public final void configure(Configuration configuration)\n+    public final void configure(Configuration config)\n         throws CheckstyleException {\n-        this.configuration \u003d configuration;\n+        this.configuration \u003d config;\n \n-        final String[] attributes \u003d configuration.getAttributeNames();\n+        final String[] attributes \u003d config.getAttributeNames();\n \n         for (final String key : attributes) {\n-            final String value \u003d configuration.getAttribute(key);\n+            final String value \u003d config.getAttribute(key);\n \n-            tryCopyProperty(configuration.getName(), key, value, true);\n+            tryCopyProperty(config.getName(), key, value, true);\n         }\n \n         finishLocalSetup();\n \n-        final Configuration[] childConfigs \u003d configuration.getChildren();\n+        final Configuration[] childConfigs \u003d config.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration config)\n        throws CheckstyleException {\n        this.configuration \u003d config;\n\n        final String[] attributes \u003d config.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d config.getAttribute(key);\n\n            tryCopyProperty(config.getName(), key, value, true);\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {}
        }
      ]
    },
    "050d1e55a819d639fe9116ec3ebd99902530c3f9": {
      "type": "Ybodychange",
      "commitMessage": "100% code coverage for AutomaticBean. #1295\n",
      "commitDate": "25/07/15 3:17 PM",
      "commitName": "050d1e55a819d639fe9116ec3ebd99902530c3f9",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "23/07/15 9:57 PM",
      "commitNameOld": "5ebfb82c0168a5ebc5057ab3d0673682e21b7423",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,19 @@\n     public final void configure(Configuration configuration)\n         throws CheckstyleException {\n         this.configuration \u003d configuration;\n \n-        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n-\n         final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d configuration.getAttribute(key);\n \n-            try {\n-                // BeanUtilsBean.copyProperties silently ignores missing setters\n-                // for key, so we have to go through great lengths here to\n-                // figure out if the bean property really exists.\n-                final PropertyDescriptor pd \u003d\n-                    PropertyUtils.getPropertyDescriptor(this, key);\n-                if (pd \u003d\u003d null) {\n-                    throw new CheckstyleException(\n-                        \"Property \u0027\" + key + \"\u0027 in module \"\n-                        + configuration.getName()\n-                        + \" does not exist, please check the documentation\");\n-                }\n-\n-                // finally we can set the bean property\n-                beanUtils.copyProperty(this, key, value);\n-            }\n-            catch (final InvocationTargetException e) {\n-                throw new CheckstyleException(\n-                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n-                    + configuration.getName() + \" to \u0027\" + value\n-                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n-            }\n-            catch (final IllegalAccessException | NoSuchMethodException e) {\n-                throw new CheckstyleException(\n-                    \"cannot access \" + key + \" in \"\n-                    + this.getClass().getName(), e);\n-            }\n-            catch (final IllegalArgumentException | ConversionException e) {\n-                throw new CheckstyleException(\n-                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + configuration.getName(), e);\n-            }\n+            tryCopyProperty(configuration.getName(), key, value, true);\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException {\n        this.configuration \u003d configuration;\n\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            tryCopyProperty(configuration.getName(), key, value, true);\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "5ebfb82c0168a5ebc5057ab3d0673682e21b7423": {
      "type": "Ybodychange",
      "commitMessage": "coverage for Automatic bean, #1295\n",
      "commitDate": "23/07/15 9:57 PM",
      "commitName": "5ebfb82c0168a5ebc5057ab3d0673682e21b7423",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     public final void configure(Configuration configuration)\n         throws CheckstyleException {\n         this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n-                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n+                if (pd \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException | NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException | ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + configuration.getName(), e);\n             }\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException | NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException | ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": {
      "type": "Ybodychange",
      "commitMessage": "all TODO/FIXME were removed , some of them converted to issues\n",
      "commitDate": "23/04/15 10:38 AM",
      "commitName": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "21/03/15 3:35 PM",
      "commitNameOld": "91d979ef8eab8d8f6fe5e5b64ec0586b49ea0315",
      "commitAuthorOld": "Damian Szczepanik",
      "daysBetweenCommits": 32.79,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,53 @@\n     public final void configure(Configuration configuration)\n         throws CheckstyleException\n     {\n         this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n-        // TODO: debug log messages\n         final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException | NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException | ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + configuration.getName(), e);\n             }\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException\n    {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException | NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException | ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "91d979ef8eab8d8f6fe5e5b64ec0586b49ea0315": {
      "type": "Ybodychange",
      "commitMessage": "Reduce complexity in indentation/HandlerFactory class by grouping catch blocks\n\nPull #833\n",
      "commitDate": "21/03/15 3:35 PM",
      "commitName": "91d979ef8eab8d8f6fe5e5b64ec0586b49ea0315",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 11.04,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,54 @@\n     public final void configure(Configuration configuration)\n         throws CheckstyleException\n     {\n         this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n         final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n-            catch (final IllegalAccessException e) {\n+            catch (final IllegalAccessException | NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n-            catch (final NoSuchMethodException e) {\n-                throw new CheckstyleException(\n-                    \"cannot access \" + key + \" in \"\n-                    + this.getClass().getName(), e);\n-            }\n-            catch (final IllegalArgumentException e) {\n+            catch (final IllegalArgumentException | ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + configuration.getName(), e);\n             }\n-            catch (final ConversionException e) {\n-                throw new CheckstyleException(\n-                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + configuration.getName(), e);\n-            }\n-\n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException\n    {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException | NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException | ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n     public final void configure(Configuration configuration)\n         throws CheckstyleException\n     {\n         this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n         final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n             final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n-                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n+                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + configuration.getName(), e);\n             }\n             catch (final ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + configuration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException\n    {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": "19/01/15 6:19 AM",
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,65 @@\n-    public final void configure(Configuration aConfiguration)\n+    public final void configure(Configuration configuration)\n         throws CheckstyleException\n     {\n-        mConfiguration \u003d aConfiguration;\n+        this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n-        final String[] attributes \u003d aConfiguration.getAttributeNames();\n+        final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n-            final String value \u003d aConfiguration.getAttribute(key);\n+            final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n-                        + aConfiguration.getName()\n+                        + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n-                    + aConfiguration.getName() + \" to \u0027\" + value\n+                    + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n+                    + \"\u0027 of module \" + configuration.getName(), e);\n             }\n             catch (final ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n+                    + \"\u0027 of module \" + configuration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n-        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n+        final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException\n    {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {
            "oldValue": "[aConfiguration-Configuration]",
            "newValue": "[configuration-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,65 @@\n-    public final void configure(Configuration aConfiguration)\n+    public final void configure(Configuration configuration)\n         throws CheckstyleException\n     {\n-        mConfiguration \u003d aConfiguration;\n+        this.configuration \u003d configuration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n-        final String[] attributes \u003d aConfiguration.getAttributeNames();\n+        final String[] attributes \u003d configuration.getAttributeNames();\n \n         for (final String key : attributes) {\n-            final String value \u003d aConfiguration.getAttribute(key);\n+            final String value \u003d configuration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n-                        + aConfiguration.getName()\n+                        + configuration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n-                    + aConfiguration.getName() + \" to \u0027\" + value\n+                    + configuration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n+                    + \"\u0027 of module \" + configuration.getName(), e);\n             }\n             catch (final ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n+                    + \"\u0027 of module \" + configuration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n-        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n+        final Configuration[] childConfigs \u003d configuration.getChildren();\n         for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration configuration)\n        throws CheckstyleException\n    {\n        this.configuration \u003d configuration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d configuration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d configuration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + configuration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + configuration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + configuration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d configuration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java"
      }
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/12/07 9:40 PM",
      "commitNameOld": "262209477f39964a63103613f3e2c985da083371",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,65 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n-        for (int i \u003d 0; i \u003c attributes.length; i++) {\n-            final String key \u003d attributes[i];\n+        for (final String key : attributes) {\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (final IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (final IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n             catch (final ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n-        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n-            final Configuration childConfig \u003d childConfigs[i];\n+        for (final Configuration childConfig : childConfigs) {\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (final String key : attributes) {\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:33 PM",
      "commitNameOld": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n-        BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n+        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n-            catch (InvocationTargetException e) {\n+            catch (final InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n-            catch (IllegalAccessException e) {\n+            catch (final IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n-            catch (NoSuchMethodException e) {\n+            catch (final NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n-            catch (IllegalArgumentException e) {\n+            catch (final IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n-            catch (ConversionException e) {\n+            catch (final ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        final BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (final InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (final IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (final IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (final ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "02/07/06 3:41 AM",
      "commitNameOld": "302f80bd65e3670d296bba40de712be7a0932bd3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n-                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n+                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 beanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n             catch (ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if ((pd \u003d\u003d null) || (pd.getWriteMethod() \u003d\u003d null)) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "2c02a737d97980eb4c984056c33265b8a917a717": {
      "type": "Ybodychange",
      "commitMessage": "Updated to V 1.7 of commons-beanutils (Apache license 2.0).\n\nThis allows us to change the type converters locally in AutomaticBean,\nnot globally per classloader. This change is beneficial mainly\nin some embedded scenarios like IDE plugins.\n",
      "commitDate": "08/10/04 10:43 PM",
      "commitName": "2c02a737d97980eb4c984056c33265b8a917a717",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "26/08/04 6:34 AM",
      "commitNameOld": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 43.67,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,67 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n+        BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n+\n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n-                // BeanUtils.copyProperties silently ignores missing setters\n+                // BeanUtilsBean.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 final PropertyDescriptor pd \u003d\n                     PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n-                BeanUtils.copyProperty(this, key, value);\n+                beanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n             catch (ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        BeanUtilsBean beanUtils \u003d createBeanUtilsBean();\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtilsBean.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                beanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/07/04 4:53 AM",
      "commitNameOld": "09dd78602f86ca6c996d1a79672c7614c5e42b96",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtils.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n-                PropertyDescriptor pd \u003d\n-                        PropertyUtils.getPropertyDescriptor(this, key);\n+                final PropertyDescriptor pd \u003d\n+                    PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName(), e);\n             }\n             catch (IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n             catch (ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n-        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n+        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtils.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                final PropertyDescriptor pd \u003d\n                    PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        final Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "eeba08c1028a79bdc2140476b24ce8d60f04657a": {
      "type": "Ybodychange",
      "commitMessage": "CheckstyleException now supports nested exceptions\n",
      "commitDate": "04/02/03 11:32 AM",
      "commitName": "eeba08c1028a79bdc2140476b24ce8d60f04657a",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "11/01/03 11:50 PM",
      "commitNameOld": "fc75ad9c263cc7096ddf63824e7319a49071ffb6",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 23.49,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtils.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 PropertyDescriptor pd \u003d\n                         PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n-                    + \"\u0027: \" + e.getTargetException().getMessage());\n+                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n-                    + this.getClass().getName());\n+                    + this.getClass().getName(), e);\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n-                    + this.getClass().getName());\n+                    + this.getClass().getName(), e);\n             }\n             catch (IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName());\n+                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n             catch (ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n-                    + \"\u0027 of module \" + aConfiguration.getName());\n+                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n             }\n \n         }\n \n         finishLocalSetup();\n \n         Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtils.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                PropertyDescriptor pd \u003d\n                        PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage(), e);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName(), e);\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName(), e);\n            }\n\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "ee6de76ea79d5e8400670dcf441f481e291d40e5": {
      "type": "Ybodychange",
      "commitMessage": "fixed error message\n",
      "commitDate": "30/12/02 7:29 AM",
      "commitName": "ee6de76ea79d5e8400670dcf441f481e291d40e5",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/12/02 4:19 AM",
      "commitNameOld": "8ec36bc770a78f423f6c0d0c37b9efd7981815ed",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtils.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 PropertyDescriptor pd \u003d\n                         PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n-                    \"Cannot set property \u0027\" + key + \"\u0027 in module\"\n+                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage());\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n             catch (IllegalArgumentException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName());\n             }\n             catch (ConversionException e) {\n                 throw new CheckstyleException(\n                     \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                     + \"\u0027 of module \" + aConfiguration.getName());\n             }\n \n         }\n \n         finishLocalSetup();\n \n         Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtils.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                PropertyDescriptor pd \u003d\n                        PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module \"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage());\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName());\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName());\n            }\n\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "8ec36bc770a78f423f6c0d0c37b9efd7981815ed": {
      "type": "Ybodychange",
      "commitMessage": "improved error handling for illegal property values, e.g.\n1. \u003cproperty name\u003d\"classLoader\" value\u003d\"\"/\u003e. Is it by accident or by\ndesign that bean properties like this cannot be set because they aren\u0027t \"simple\" types?\n2. \u003cproperty name\u003d\"tabWidth\" value\u003d\"eight\"/\u003e\n",
      "commitDate": "28/12/02 4:19 AM",
      "commitName": "8ec36bc770a78f423f6c0d0c37b9efd7981815ed",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "22/12/02 11:39 PM",
      "commitNameOld": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 5.19,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,65 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 // BeanUtils.copyProperties silently ignores missing setters\n                 // for key, so we have to go through great lengths here to\n                 // figure out if the bean property really exists.\n                 PropertyDescriptor pd \u003d\n                         PropertyUtils.getPropertyDescriptor(this, key);\n                 if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                     throw new CheckstyleException(\n                         \"Property \u0027\" + key + \"\u0027 in module \"\n                         + aConfiguration.getName()\n                         + \" does not exist, please check the documentation\");\n                 }\n \n                 // finally we can set the bean property\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"Cannot set property \u0027\" + key + \"\u0027 in module\"\n                     + aConfiguration.getName() + \" to \u0027\" + value\n                     + \"\u0027: \" + e.getTargetException().getMessage());\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n             catch (NoSuchMethodException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n+            catch (IllegalArgumentException e) {\n+                throw new CheckstyleException(\n+                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n+                    + \"\u0027 of module \" + aConfiguration.getName());\n+            }\n+            catch (ConversionException e) {\n+                throw new CheckstyleException(\n+                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n+                    + \"\u0027 of module \" + aConfiguration.getName());\n+            }\n+\n         }\n \n         finishLocalSetup();\n \n         Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtils.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                PropertyDescriptor pd \u003d\n                        PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module\"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage());\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n            catch (IllegalArgumentException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName());\n            }\n            catch (ConversionException e) {\n                throw new CheckstyleException(\n                    \"illegal value \u0027\" + value + \"\u0027 for property \u0027\" + key\n                    + \"\u0027 of module \" + aConfiguration.getName());\n            }\n\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "e8d025321c3d1f5741e860bd96a93e7d2169ca9c": {
      "type": "Ybodychange",
      "commitMessage": "don\u0027t silently ignore misspelled property names\n",
      "commitDate": "22/12/02 11:39 PM",
      "commitName": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "11/12/02 8:19 PM",
      "commitNameOld": "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 11.14,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,54 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n+                // BeanUtils.copyProperties silently ignores missing setters\n+                // for key, so we have to go through great lengths here to\n+                // figure out if the bean property really exists.\n+                PropertyDescriptor pd \u003d\n+                        PropertyUtils.getPropertyDescriptor(this, key);\n+                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n+                    throw new CheckstyleException(\n+                        \"Property \u0027\" + key + \"\u0027 in module \"\n+                        + aConfiguration.getName()\n+                        + \" does not exist, please check the documentation\");\n+                }\n+\n+                // finally we can set the bean property\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n-                    \"for \" + aConfiguration.getName() + \" unable to set \" + key\n-                    + \" with \" + value);\n+                    \"Cannot set property \u0027\" + key + \"\u0027 in module\"\n+                    + aConfiguration.getName() + \" to \u0027\" + value\n+                    + \"\u0027: \" + e.getTargetException().getMessage());\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n+            catch (NoSuchMethodException e) {\n+                throw new CheckstyleException(\n+                    \"cannot access \" + key + \" in \"\n+                    + this.getClass().getName());\n+            }\n         }\n \n         finishLocalSetup();\n \n         Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n             final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                // BeanUtils.copyProperties silently ignores missing setters\n                // for key, so we have to go through great lengths here to\n                // figure out if the bean property really exists.\n                PropertyDescriptor pd \u003d\n                        PropertyUtils.getPropertyDescriptor(this, key);\n                if (pd \u003d\u003d null || pd.getWriteMethod() \u003d\u003d null) {\n                    throw new CheckstyleException(\n                        \"Property \u0027\" + key + \"\u0027 in module \"\n                        + aConfiguration.getName()\n                        + \" does not exist, please check the documentation\");\n                }\n\n                // finally we can set the bean property\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"Cannot set property \u0027\" + key + \"\u0027 in module\"\n                    + aConfiguration.getName() + \" to \u0027\" + value\n                    + \"\u0027: \" + e.getTargetException().getMessage());\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n            catch (NoSuchMethodException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4": {
      "type": "Ybodychange",
      "commitMessage": "Fix bug where init/destroy not called for Checks.\n",
      "commitDate": "11/12/02 8:19 PM",
      "commitName": "b3caa3b7ad0a135038c2c1c5bda4fccb897a00c4",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "10/12/02 11:13 AM",
      "commitNameOld": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.38,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n         mConfiguration \u003d aConfiguration;\n \n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                     + \" with \" + value);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n         }\n \n         finishLocalSetup();\n \n         Configuration[] childConfigs \u003d aConfiguration.getChildren();\n         for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n-            Configuration childConfig \u003d childConfigs[i];\n+            final Configuration childConfig \u003d childConfigs[i];\n             setupChild(childConfig);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                    + \" with \" + value);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            final Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
      "extendedDetails": {}
    },
    "08d6efe49d2960d9bd61bfb9cca65910f0c19b58": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "make AutomaticBean.configure() final and provide defined extension points\nto prevent programming errors in user classes.\n",
      "commitDate": "10/12/02 11:13 AM",
      "commitName": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "make AutomaticBean.configure() final and provide defined extension points\nto prevent programming errors in user classes.\n",
          "commitDate": "10/12/02 11:13 AM",
          "commitName": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "06/12/02 2:38 AM",
          "commitNameOld": "302031989566e096adc3e87c935ab47202a7ce3e",
          "commitAuthorOld": "Rick Giles",
          "daysBetweenCommits": 4.36,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,35 @@\n-    public void configure(Configuration aConfiguration)\n+    public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n+        mConfiguration \u003d aConfiguration;\n+\n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                     + \" with \" + value);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n         }\n+\n+        finishLocalSetup();\n+\n+        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n+        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n+            Configuration childConfig \u003d childConfigs[i];\n+            setupChild(childConfig);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                    + \" with \" + value);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, final]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "make AutomaticBean.configure() final and provide defined extension points\nto prevent programming errors in user classes.\n",
          "commitDate": "10/12/02 11:13 AM",
          "commitName": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "06/12/02 2:38 AM",
          "commitNameOld": "302031989566e096adc3e87c935ab47202a7ce3e",
          "commitAuthorOld": "Rick Giles",
          "daysBetweenCommits": 4.36,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,35 @@\n-    public void configure(Configuration aConfiguration)\n+    public final void configure(Configuration aConfiguration)\n         throws CheckstyleException\n     {\n+        mConfiguration \u003d aConfiguration;\n+\n         // TODO: debug log messages\n         final String[] attributes \u003d aConfiguration.getAttributeNames();\n \n         for (int i \u003d 0; i \u003c attributes.length; i++) {\n             final String key \u003d attributes[i];\n             final String value \u003d aConfiguration.getAttribute(key);\n \n             try {\n                 BeanUtils.copyProperty(this, key, value);\n             }\n             catch (InvocationTargetException e) {\n                 throw new CheckstyleException(\n                     \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                     + \" with \" + value);\n             }\n             catch (IllegalAccessException e) {\n                 throw new CheckstyleException(\n                     \"cannot access \" + key + \" in \"\n                     + this.getClass().getName());\n             }\n         }\n+\n+        finishLocalSetup();\n+\n+        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n+        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n+            Configuration childConfig \u003d childConfigs[i];\n+            setupChild(childConfig);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public final void configure(Configuration aConfiguration)\n        throws CheckstyleException\n    {\n        mConfiguration \u003d aConfiguration;\n\n        // TODO: debug log messages\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n\n            try {\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                    \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                    + \" with \" + value);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                    \"cannot access \" + key + \" in \"\n                    + this.getClass().getName());\n            }\n        }\n\n        finishLocalSetup();\n\n        Configuration[] childConfigs \u003d aConfiguration.getChildren();\n        for (int i \u003d 0; i \u003c childConfigs.length; i++) {\n            Configuration childConfig \u003d childConfigs[i];\n            setupChild(childConfig);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java",
          "extendedDetails": {}
        }
      ]
    },
    "39651f60d0c1352b33e510d8d398d38bdab3382b": {
      "type": "Yintroduced",
      "commitMessage": "avalonization\n",
      "commitDate": "30/11/02 3:59 AM",
      "commitName": "39651f60d0c1352b33e510d8d398d38bdab3382b",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,23 @@\n+    public void configure(Configuration aConfiguration)\n+            throws CheckstyleException\n+    {\n+        // TODO: debug log messages\n+\n+        final String[] attributes \u003d aConfiguration.getAttributeNames();\n+        for (int i \u003d 0; i \u003c attributes.length; i++) {\n+            final String key \u003d attributes[i];\n+            final String value \u003d aConfiguration.getAttribute(key);\n+            try {\n+                BeanUtils.copyProperty(this, key, value);\n+            }\n+            catch (InvocationTargetException e) {\n+                throw new CheckstyleException(\n+                        \"for \" + aConfiguration.getName() + \" unable to set \" + key\n+                        + \" with \" + value);\n+            }\n+            catch (IllegalAccessException e) {\n+                throw new CheckstyleException(\n+                        \"cannot access \" + key + \" in \" + this.getClass().getName());\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void configure(Configuration aConfiguration)\n            throws CheckstyleException\n    {\n        // TODO: debug log messages\n\n        final String[] attributes \u003d aConfiguration.getAttributeNames();\n        for (int i \u003d 0; i \u003c attributes.length; i++) {\n            final String key \u003d attributes[i];\n            final String value \u003d aConfiguration.getAttribute(key);\n            try {\n                BeanUtils.copyProperty(this, key, value);\n            }\n            catch (InvocationTargetException e) {\n                throw new CheckstyleException(\n                        \"for \" + aConfiguration.getName() + \" unable to set \" + key\n                        + \" with \" + value);\n            }\n            catch (IllegalAccessException e) {\n                throw new CheckstyleException(\n                        \"cannot access \" + key + \" in \" + this.getClass().getName());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java"
    }
  }
}