{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocDetailNodeParser.java",
  "functionName": "convertParseTreeToDetailNode",
  "functionId": "convertParseTreeToDetailNode___parseTreeNode-ParseTree",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
  "functionStartLine": 197,
  "functionEndLine": 245,
  "numCommitsSeen": 134,
  "timeTaken": 3938,
  "changeHistory": [
    "3de6a350321e6f2cfb5da3a7bbf8b9912d57f0a5",
    "9df8cd050b4e5dfb955cb4ee2eab3d3281f31274",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "561df9fc0c36be06c558049afad7467dbb0130ad",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534"
  ],
  "changeHistoryShort": {
    "3de6a350321e6f2cfb5da3a7bbf8b9912d57f0a5": "Ybodychange",
    "9df8cd050b4e5dfb955cb4ee2eab3d3281f31274": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ymovefromfile",
    "561df9fc0c36be06c558049afad7467dbb0130ad": "Ybodychange",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Yrename",
    "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71": "Ymultichange(Yparameterchange,Ybodychange)",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": "Ymodifierchange",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3de6a350321e6f2cfb5da3a7bbf8b9912d57f0a5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7309: fix teamcity inspections issues\n",
      "commitDate": "05/12/19 9:43 AM",
      "commitName": "3de6a350321e6f2cfb5da3a7bbf8b9912d57f0a5",
      "commitAuthor": "pbludov",
      "commitDateOld": "06/10/19 5:54 AM",
      "commitNameOld": "625865d270a788ed727cf1b819978747e4f34b44",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 60.2,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n         final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             // remove unnecessary children tokens\n             if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n-                currentJavadocParent\n-                        .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n+                currentJavadocParent.setChildren(JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n             }\n \n             final JavadocNodeImpl[] children \u003d\n                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n \n             insertChildrenNodes(children, parseTreeParent);\n \n             if (children.length \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 while (nextJavadocSibling \u003d\u003d null) {\n                     currentJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     parseTreeParent \u003d parseTreeParent.getParent();\n \n                     if (currentJavadocParent \u003d\u003d null) {\n                         break;\n                     }\n \n                     nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                             .getNextSibling(currentJavadocParent);\n \n                     nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            // remove unnecessary children tokens\n            if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                currentJavadocParent.setChildren(JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n            }\n\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                while (nextJavadocSibling \u003d\u003d null) {\n                    currentJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    parseTreeParent \u003d parseTreeParent.getParent();\n\n                    if (currentJavadocParent \u003d\u003d null) {\n                        break;\n                    }\n\n                    nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                            .getNextSibling(currentJavadocParent);\n\n                    nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "9df8cd050b4e5dfb955cb4ee2eab3d3281f31274": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for treewalker",
      "commitDate": "31/12/18 2:21 PM",
      "commitName": "9df8cd050b4e5dfb955cb4ee2eab3d3281f31274",
      "commitAuthor": "rnveach",
      "commitDateOld": "10/11/18 9:48 AM",
      "commitNameOld": "7f663daeef9478cf9597b90924972efdb0069f2e",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 51.19,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n         final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             // remove unnecessary children tokens\n             if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                 currentJavadocParent\n                         .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n             }\n \n             final JavadocNodeImpl[] children \u003d\n                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n \n             insertChildrenNodes(children, parseTreeParent);\n \n             if (children.length \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n-                if (nextJavadocSibling \u003d\u003d null) {\n-                    JavadocNodeImpl tempJavadocParent \u003d\n+                while (nextJavadocSibling \u003d\u003d null) {\n+                    currentJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n-                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n+                    parseTreeParent \u003d parseTreeParent.getParent();\n \n-                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n-                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n-                                .getNextSibling(tempJavadocParent);\n-\n-                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n-\n-                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n-                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n+                    if (currentJavadocParent \u003d\u003d null) {\n+                        break;\n                     }\n+\n+                    nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n+                            .getNextSibling(currentJavadocParent);\n+\n+                    nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            // remove unnecessary children tokens\n            if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                currentJavadocParent\n                        .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n            }\n\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                while (nextJavadocSibling \u003d\u003d null) {\n                    currentJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    parseTreeParent \u003d parseTreeParent.getParent();\n\n                    if (currentJavadocParent \u003d\u003d null) {\n                        break;\n                    }\n\n                    nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                            .getNextSibling(currentJavadocParent);\n\n                    nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n         final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             // remove unnecessary children tokens\n             if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                 currentJavadocParent\n                         .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n             }\n \n             final JavadocNodeImpl[] children \u003d\n                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n \n             insertChildrenNodes(children, parseTreeParent);\n \n             if (children.length \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n-                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n+                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n-                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n+                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            // remove unnecessary children tokens\n            if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                currentJavadocParent\n                        .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n            }\n\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtil\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3170: delete children from javadoc TEXT",
      "commitDate": "18/11/16 4:15 PM",
      "commitName": "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a",
      "commitAuthor": "rnveach",
      "commitDateOld": "23/06/16 5:32 AM",
      "commitNameOld": "1395a92adb0d8fd0767bee81dc407c5e58b37252",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 148.49,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,52 @@\n     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n         final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n+            // remove unnecessary children tokens\n+            if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n+                currentJavadocParent\n+                        .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n+            }\n+\n             final JavadocNodeImpl[] children \u003d\n                     (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n \n             insertChildrenNodes(children, parseTreeParent);\n \n             if (children.length \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            // remove unnecessary children tokens\n            if (currentJavadocParent.getType() \u003d\u003d JavadocTokenTypes.TEXT) {\n                currentJavadocParent\n                        .setChildren((DetailNode[]) JavadocNodeImpl.EMPTY_DETAIL_NODE_ARRAY);\n            }\n\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ymovefromfile",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": "17/03/16 6:19 AM",
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "16/03/16 11:32 AM",
      "commitNameOld": "888594049a74a7d8e9bbdfb5672c07db1f7ba220",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
        "oldMethodName": "convertParseTreeToDetailNode",
        "newMethodName": "convertParseTreeToDetailNode"
      }
    },
    "561df9fc0c36be06c558049afad7467dbb0130ad": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Refactoring of AbstractJavadocCheck to reduce method length\n",
      "commitDate": "26/08/15 12:50 PM",
      "commitName": "561df9fc0c36be06c558049afad7467dbb0130ad",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "22/08/15 4:33 AM",
      "commitNameOld": "8abfa48f2eb5edaf3f5a2cc2350e4e3c232f4152",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.35,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,46 @@\n     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n-        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n-\n-        int childCount \u003d parseTreeNode.getChildCount();\n-        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n-\n-        for (int i \u003d 0; i \u003c childCount; i++) {\n-            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i),\n-                    rootJavadocNode, i);\n-            children[i] \u003d child;\n-        }\n-        rootJavadocNode.setChildren(children);\n+        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n-            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n-            childCount \u003d children.length;\n+            final JavadocNodeImpl[] children \u003d\n+                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n \n-            for (int i \u003d 0; i \u003c childCount; i++) {\n-                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n-                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n+            insertChildrenNodes(children, parseTreeParent);\n \n-                final JavadocNodeImpl[] subChildren \u003d\n-                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n-\n-                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n-                    final JavadocNodeImpl child \u003d\n-                            createJavadocNode(currentParseTreeNodeChild.getChild(j),\n-                                    currentJavadocNode, j);\n-\n-                    subChildren[j] \u003d child;\n-                }\n-                currentJavadocNode.setChildren(subChildren);\n-            }\n-\n-            if (childCount \u003e 0) {\n+            if (children.length \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createRootJavadocNode(parseTreeNode);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            final JavadocNodeImpl[] children \u003d\n                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n\n            insertChildrenNodes(children, parseTreeParent);\n\n            if (children.length \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {}
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Yrename",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": "14/08/15 7:00 AM",
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n-    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode) {\n+    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n         final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n \n         int childCount \u003d parseTreeNode.getChildCount();\n         JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n             final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i),\n                     rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n         rootJavadocNode.setChildren(children);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                 final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n \n                 final JavadocNodeImpl[] subChildren \u003d\n                         new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j),\n                                     currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n                 currentJavadocNode.setChildren(subChildren);\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode) {\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n\n        int childCount \u003d parseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i),\n                    rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n        rootJavadocNode.setChildren(children);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d\n                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j),\n                                    currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n                currentJavadocNode.setChildren(subChildren);\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {
        "oldValue": "convertParseTree2DetailNode",
        "newValue": "convertParseTreeToDetailNode"
      }
    },
    "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "fix for EI_EXPOSE_REP. Issue #778\n",
      "commitDate": "08/04/15 8:33 AM",
      "commitName": "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71",
      "commitAuthor": "Roman Ivanov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "fix for EI_EXPOSE_REP. Issue #778\n",
          "commitDate": "08/04/15 8:33 AM",
          "commitName": "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71",
          "commitAuthor": "Roman Ivanov",
          "commitDateOld": "14/03/15 3:23 PM",
          "commitNameOld": "95cb60790924d1df7e4e2f091a368c22c02852e3",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 24.72,
          "commitsBetweenForRepo": 110,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,72 @@\n-    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n+    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)\n     {\n-        final ParseTree currentParseTreeNode \u003d rootParseTree;\n-        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n+        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n \n-        int childCount \u003d currentParseTreeNode.getChildCount();\n-        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n+        int childCount \u003d parseTreeNode.getChildCount();\n+        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n-            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n+            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i)\n                     , rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n+        rootJavadocNode.setChildren(children);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n-        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n+        ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n-                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n+                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n \n-                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n-                        .getChildren();\n+                final JavadocNodeImpl[] subChildren \u003d\n+                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                     , currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n+                currentJavadocNode.setChildren(subChildren);\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n-                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n+                parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n-                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n+                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n-                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n+                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n-                currentParseTreeParent \u003d nextParseTreeSibling;\n+                parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)\n    {\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n\n        int childCount \u003d parseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n        rootJavadocNode.setChildren(children);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d\n                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n                currentJavadocNode.setChildren(subChildren);\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {
            "oldValue": "[rootParseTree-ParseTree]",
            "newValue": "[parseTreeNode-ParseTree]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "fix for EI_EXPOSE_REP. Issue #778\n",
          "commitDate": "08/04/15 8:33 AM",
          "commitName": "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71",
          "commitAuthor": "Roman Ivanov",
          "commitDateOld": "14/03/15 3:23 PM",
          "commitNameOld": "95cb60790924d1df7e4e2f091a368c22c02852e3",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 24.72,
          "commitsBetweenForRepo": 110,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,72 @@\n-    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n+    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)\n     {\n-        final ParseTree currentParseTreeNode \u003d rootParseTree;\n-        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n+        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n \n-        int childCount \u003d currentParseTreeNode.getChildCount();\n-        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n+        int childCount \u003d parseTreeNode.getChildCount();\n+        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n-            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n+            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i)\n                     , rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n+        rootJavadocNode.setChildren(children);\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n-        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n+        ParseTree parseTreeParent \u003d parseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n-                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n+                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n \n-                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n-                        .getChildren();\n+                final JavadocNodeImpl[] subChildren \u003d\n+                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                     , currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n+                currentJavadocNode.setChildren(subChildren);\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n-                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n+                parseTreeParent \u003d parseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n-                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n+                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n-                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n+                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n-                currentParseTreeParent \u003d nextParseTreeSibling;\n+                parseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)\n    {\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(parseTreeNode, null, -1);\n\n        int childCount \u003d parseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d new JavadocNodeImpl[childCount];\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(parseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n        rootJavadocNode.setChildren(children);\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree parseTreeParent \u003d parseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d parseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d\n                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n                currentJavadocNode.setChildren(subChildren);\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                parseTreeParent \u003d parseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(parseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d parseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                parseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "24/11/14 4:22 PM",
          "commitNameOld": "be6a7ca77be3de342656ec381aaa02b89da252d4",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,71 @@\n-    private DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n+    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n     {\n-        final ParseTree currentParseTreeNode \u003d aRootParseTree;\n+        final ParseTree currentParseTreeNode \u003d rootParseTree;\n         final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n \n         int childCount \u003d currentParseTreeNode.getChildCount();\n         JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n             final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                     , rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                 final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n \n                 final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                         .getChildren();\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                     , currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 currentParseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n    {\n        final ParseTree currentParseTreeNode \u003d rootParseTree;\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n\n        int childCount \u003d currentParseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                        .getChildren();\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                currentParseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {
            "oldValue": "[aRootParseTree-ParseTree]",
            "newValue": "[rootParseTree-ParseTree]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "24/11/14 4:22 PM",
          "commitNameOld": "be6a7ca77be3de342656ec381aaa02b89da252d4",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,71 @@\n-    private DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n+    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n     {\n-        final ParseTree currentParseTreeNode \u003d aRootParseTree;\n+        final ParseTree currentParseTreeNode \u003d rootParseTree;\n         final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n \n         int childCount \u003d currentParseTreeNode.getChildCount();\n         JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n             final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                     , rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                 final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n \n                 final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                         .getChildren();\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                     , currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 currentParseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)\n    {\n        final ParseTree currentParseTreeNode \u003d rootParseTree;\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n\n        int childCount \u003d currentParseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                        .getChildren();\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                currentParseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #49. Caching DetailNode trees in AbstractJavadocCheck\n",
      "commitDate": "07/11/14 2:24 PM",
      "commitName": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "19/10/14 1:32 PM",
      "commitNameOld": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 19.08,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n-    public DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n+    private DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n     {\n         final ParseTree currentParseTreeNode \u003d aRootParseTree;\n         final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n \n         int childCount \u003d currentParseTreeNode.getChildCount();\n         JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n \n         for (int i \u003d 0; i \u003c childCount; i++) {\n             final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                     , rootJavadocNode, i);\n             children[i] \u003d child;\n         }\n \n         JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n         ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n \n         while (currentJavadocParent !\u003d null) {\n             children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n             childCount \u003d children.length;\n \n             for (int i \u003d 0; i \u003c childCount; i++) {\n                 final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                 final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n \n                 final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                         .getChildren();\n \n                 for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                     final JavadocNodeImpl child \u003d\n                             createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                     , currentJavadocNode, j);\n \n                     subChildren[j] \u003d child;\n                 }\n             }\n \n             if (childCount \u003e 0) {\n                 currentJavadocParent \u003d children[0];\n                 currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n             }\n             else {\n                 JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                         .getNextSibling(currentJavadocParent);\n \n                 ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n \n                 if (nextJavadocSibling \u003d\u003d null) {\n                     JavadocNodeImpl tempJavadocParent \u003d\n                             (JavadocNodeImpl) currentJavadocParent.getParent();\n \n                     ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n \n                     while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n \n                         nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                 .getNextSibling(tempJavadocParent);\n \n                         nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n \n                         tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                         tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                     }\n                 }\n                 currentJavadocParent \u003d nextJavadocSibling;\n                 currentParseTreeParent \u003d nextParseTreeSibling;\n             }\n         }\n \n         return rootJavadocNode;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n    {\n        final ParseTree currentParseTreeNode \u003d aRootParseTree;\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n\n        int childCount \u003d currentParseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                        .getChildren();\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                currentParseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[private]"
      }
    },
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Added support of Javadoc comments. Extended API to create Javadoc Checks.\n",
      "commitDate": "19/10/14 1:32 PM",
      "commitName": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthor": "Baratali Izmailov",
      "diff": "@@ -0,0 +1,71 @@\n+    public DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n+    {\n+        final ParseTree currentParseTreeNode \u003d aRootParseTree;\n+        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n+\n+        int childCount \u003d currentParseTreeNode.getChildCount();\n+        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n+\n+        for (int i \u003d 0; i \u003c childCount; i++) {\n+            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n+                    , rootJavadocNode, i);\n+            children[i] \u003d child;\n+        }\n+\n+        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n+        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n+\n+        while (currentJavadocParent !\u003d null) {\n+            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n+            childCount \u003d children.length;\n+\n+            for (int i \u003d 0; i \u003c childCount; i++) {\n+                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n+                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n+\n+                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n+                        .getChildren();\n+\n+                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n+                    final JavadocNodeImpl child \u003d\n+                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n+                                    , currentJavadocNode, j);\n+\n+                    subChildren[j] \u003d child;\n+                }\n+            }\n+\n+            if (childCount \u003e 0) {\n+                currentJavadocParent \u003d children[0];\n+                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n+            }\n+            else {\n+                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n+                        .getNextSibling(currentJavadocParent);\n+\n+                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n+\n+                if (nextJavadocSibling \u003d\u003d null) {\n+                    JavadocNodeImpl tempJavadocParent \u003d\n+                            (JavadocNodeImpl) currentJavadocParent.getParent();\n+\n+                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n+\n+                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n+\n+                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n+                                .getNextSibling(tempJavadocParent);\n+\n+                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n+\n+                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n+                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n+                    }\n+                }\n+                currentJavadocParent \u003d nextJavadocSibling;\n+                currentParseTreeParent \u003d nextParseTreeSibling;\n+            }\n+        }\n+\n+        return rootJavadocNode;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public DetailNode convertParseTree2DetailNode(ParseTree aRootParseTree)\n    {\n        final ParseTree currentParseTreeNode \u003d aRootParseTree;\n        final JavadocNodeImpl rootJavadocNode \u003d createJavadocNode(currentParseTreeNode, null, -1);\n\n        int childCount \u003d currentParseTreeNode.getChildCount();\n        JavadocNodeImpl[] children \u003d (JavadocNodeImpl[]) rootJavadocNode.getChildren();\n\n        for (int i \u003d 0; i \u003c childCount; i++) {\n            final JavadocNodeImpl child \u003d createJavadocNode(currentParseTreeNode.getChild(i)\n                    , rootJavadocNode, i);\n            children[i] \u003d child;\n        }\n\n        JavadocNodeImpl currentJavadocParent \u003d rootJavadocNode;\n        ParseTree currentParseTreeParent \u003d currentParseTreeNode;\n\n        while (currentJavadocParent !\u003d null) {\n            children \u003d (JavadocNodeImpl[]) currentJavadocParent.getChildren();\n            childCount \u003d children.length;\n\n            for (int i \u003d 0; i \u003c childCount; i++) {\n                final JavadocNodeImpl currentJavadocNode \u003d children[i];\n                final ParseTree currentParseTreeNodeChild \u003d currentParseTreeParent.getChild(i);\n\n                final JavadocNodeImpl[] subChildren \u003d (JavadocNodeImpl[]) currentJavadocNode\n                        .getChildren();\n\n                for (int j \u003d 0; j \u003c subChildren.length; j++) {\n                    final JavadocNodeImpl child \u003d\n                            createJavadocNode(currentParseTreeNodeChild.getChild(j)\n                                    , currentJavadocNode, j);\n\n                    subChildren[j] \u003d child;\n                }\n            }\n\n            if (childCount \u003e 0) {\n                currentJavadocParent \u003d children[0];\n                currentParseTreeParent \u003d currentParseTreeParent.getChild(0);\n            }\n            else {\n                JavadocNodeImpl nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                        .getNextSibling(currentJavadocParent);\n\n                ParseTree nextParseTreeSibling \u003d getNextSibling(currentParseTreeParent);\n\n                if (nextJavadocSibling \u003d\u003d null) {\n                    JavadocNodeImpl tempJavadocParent \u003d\n                            (JavadocNodeImpl) currentJavadocParent.getParent();\n\n                    ParseTree tempParseTreeParent \u003d currentParseTreeParent.getParent();\n\n                    while (nextJavadocSibling \u003d\u003d null \u0026\u0026 tempJavadocParent !\u003d null) {\n\n                        nextJavadocSibling \u003d (JavadocNodeImpl) JavadocUtils\n                                .getNextSibling(tempJavadocParent);\n\n                        nextParseTreeSibling \u003d getNextSibling(tempParseTreeParent);\n\n                        tempJavadocParent \u003d (JavadocNodeImpl) tempJavadocParent.getParent();\n                        tempParseTreeParent \u003d tempParseTreeParent.getParent();\n                    }\n                }\n                currentJavadocParent \u003d nextJavadocSibling;\n                currentParseTreeParent \u003d nextParseTreeSibling;\n            }\n        }\n\n        return rootJavadocNode;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java"
    }
  }
}