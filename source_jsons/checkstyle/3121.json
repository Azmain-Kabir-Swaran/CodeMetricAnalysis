{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InlineTagUtil.java",
  "functionName": "extractInlineTags",
  "functionId": "extractInlineTags___lines-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java",
  "functionStartLine": 68,
  "functionEndLine": 100,
  "numCommitsSeen": 12,
  "timeTaken": 969,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "d28a60c5529e182e1cdaea184415181e00b70d2a"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "d28a60c5529e182e1cdaea184415181e00b70d2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static List\u003cTagInfo\u003e extractInlineTags(String... lines) {\n        for (String line : lines) {\n            if (line.contains(LINE_FEED) || line.contains(CARRIAGE_RETURN)) {\n                throw new IllegalArgumentException(\"comment lines cannot contain newlines\");\n            }\n        }\n\n        final String commentText \u003d convertLinesToString(lines);\n        final Matcher inlineTagMatcher \u003d INLINE_TAG_PATTERN.matcher(commentText);\n\n        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n\n        while (inlineTagMatcher.find()) {\n            final String tagName \u003d inlineTagMatcher.group(1);\n\n            // Remove the leading asterisks (in case the tag spans a line) and collapse\n            // the whitespace.\n            String matchedTagValue \u003d inlineTagMatcher.group(2);\n            matchedTagValue \u003d removeLeadingJavaDoc(matchedTagValue);\n            matchedTagValue \u003d collapseWhitespace(matchedTagValue);\n\n            final String tagValue \u003d matchedTagValue;\n\n            final int startIndex \u003d inlineTagMatcher.start(1);\n            final LineColumn position \u003d getLineColumnOfIndex(commentText,\n                // correct start index offset\n                startIndex - 1);\n\n            tags.add(new TagInfo(tagName, tagValue, position));\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java"
      }
    },
    "d28a60c5529e182e1cdaea184415181e00b70d2a": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2840: UnusedImportsCheck - process javadoc tags that span lines\n",
      "commitDate": "10/07/17 5:35 PM",
      "commitName": "d28a60c5529e182e1cdaea184415181e00b70d2a",
      "commitAuthor": "Nathan Naze",
      "diff": "@@ -0,0 +1,33 @@\n+    public static List\u003cTagInfo\u003e extractInlineTags(String... lines) {\n+        for (String line : lines) {\n+            if (line.contains(LINE_FEED) || line.contains(CARRIAGE_RETURN)) {\n+                throw new IllegalArgumentException(\"comment lines cannot contain newlines\");\n+            }\n+        }\n+\n+        final String commentText \u003d convertLinesToString(lines);\n+        final Matcher inlineTagMatcher \u003d INLINE_TAG_PATTERN.matcher(commentText);\n+\n+        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n+\n+        while (inlineTagMatcher.find()) {\n+            final String tagName \u003d inlineTagMatcher.group(1);\n+\n+            // Remove the leading asterisks (in case the tag spans a line) and collapse\n+            // the whitespace.\n+            String matchedTagValue \u003d inlineTagMatcher.group(2);\n+            matchedTagValue \u003d removeLeadingJavaDoc(matchedTagValue);\n+            matchedTagValue \u003d collapseWhitespace(matchedTagValue);\n+\n+            final String tagValue \u003d matchedTagValue;\n+\n+            final int startIndex \u003d inlineTagMatcher.start(1);\n+            final LineColumn position \u003d getLineColumnOfIndex(commentText,\n+                // correct start index offset\n+                startIndex - 1);\n+\n+            tags.add(new TagInfo(tagName, tagValue, position));\n+        }\n+\n+        return tags;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static List\u003cTagInfo\u003e extractInlineTags(String... lines) {\n        for (String line : lines) {\n            if (line.contains(LINE_FEED) || line.contains(CARRIAGE_RETURN)) {\n                throw new IllegalArgumentException(\"comment lines cannot contain newlines\");\n            }\n        }\n\n        final String commentText \u003d convertLinesToString(lines);\n        final Matcher inlineTagMatcher \u003d INLINE_TAG_PATTERN.matcher(commentText);\n\n        final List\u003cTagInfo\u003e tags \u003d new ArrayList\u003c\u003e();\n\n        while (inlineTagMatcher.find()) {\n            final String tagName \u003d inlineTagMatcher.group(1);\n\n            // Remove the leading asterisks (in case the tag spans a line) and collapse\n            // the whitespace.\n            String matchedTagValue \u003d inlineTagMatcher.group(2);\n            matchedTagValue \u003d removeLeadingJavaDoc(matchedTagValue);\n            matchedTagValue \u003d collapseWhitespace(matchedTagValue);\n\n            final String tagValue \u003d matchedTagValue;\n\n            final int startIndex \u003d inlineTagMatcher.start(1);\n            final LineColumn position \u003d getLineColumnOfIndex(commentText,\n                // correct start index offset\n                startIndex - 1);\n\n            tags.add(new TagInfo(tagName, tagValue, position));\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtils.java"
    }
  }
}