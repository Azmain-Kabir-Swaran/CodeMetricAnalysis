{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EmptyLineSeparatorCheck.java",
  "functionName": "checkCommentsInsideToken",
  "functionId": "checkCommentsInsideToken___token-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java",
  "functionStartLine": 602,
  "functionEndLine": 625,
  "numCommitsSeen": 56,
  "timeTaken": 593,
  "changeHistory": [
    "8c3743118478035f927056f958eb50a58aa30c2a"
  ],
  "changeHistoryShort": {
    "8c3743118478035f927056f958eb50a58aa30c2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c3743118478035f927056f958eb50a58aa30c2a": {
      "type": "Yintroduced",
      "commitMessage": "Issue #5981: add validation of new lines before comments\n",
      "commitDate": "27/04/19 8:48 AM",
      "commitName": "8c3743118478035f927056f958eb50a58aa30c2a",
      "commitAuthor": "kazachka",
      "diff": "@@ -0,0 +1,24 @@\n+    private void checkCommentsInsideToken(DetailAST token) {\n+        final List\u003cDetailAST\u003e childNodes \u003d new LinkedList\u003c\u003e();\n+        DetailAST childNode \u003d token.getLastChild();\n+        while (childNode !\u003d null) {\n+            if (childNode.getType() \u003d\u003d TokenTypes.MODIFIERS) {\n+                for (DetailAST node \u003d token.getFirstChild().getLastChild();\n+                         node !\u003d null;\n+                         node \u003d node.getPreviousSibling()) {\n+                    if (isCommentInBeginningOfLine(node)) {\n+                        childNodes.add(node);\n+                    }\n+                }\n+            }\n+            else if (isCommentInBeginningOfLine(childNode)) {\n+                childNodes.add(childNode);\n+            }\n+            childNode \u003d childNode.getPreviousSibling();\n+        }\n+        for (DetailAST node : childNodes) {\n+            if (hasEmptyLineBefore(node) \u0026\u0026 isPrePreviousLineEmpty(node)) {\n+                log(node, MSG_MULTIPLE_LINES, node.getText());\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkCommentsInsideToken(DetailAST token) {\n        final List\u003cDetailAST\u003e childNodes \u003d new LinkedList\u003c\u003e();\n        DetailAST childNode \u003d token.getLastChild();\n        while (childNode !\u003d null) {\n            if (childNode.getType() \u003d\u003d TokenTypes.MODIFIERS) {\n                for (DetailAST node \u003d token.getFirstChild().getLastChild();\n                         node !\u003d null;\n                         node \u003d node.getPreviousSibling()) {\n                    if (isCommentInBeginningOfLine(node)) {\n                        childNodes.add(node);\n                    }\n                }\n            }\n            else if (isCommentInBeginningOfLine(childNode)) {\n                childNodes.add(childNode);\n            }\n            childNode \u003d childNode.getPreviousSibling();\n        }\n        for (DetailAST node : childNodes) {\n            if (hasEmptyLineBefore(node) \u0026\u0026 isPrePreviousLineEmpty(node)) {\n                log(node, MSG_MULTIPLE_LINES, node.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java"
    }
  }
}