{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaNCSSCheck.java",
  "functionName": "isExpressionCountable",
  "functionId": "isExpressionCountable___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
  "functionStartLine": 409,
  "functionEndLine": 434,
  "numCommitsSeen": 72,
  "timeTaken": 2063,
  "changeHistory": [
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "36c152edea29cb79e3130742098434a415e6eee4"
  ],
  "changeHistoryShort": {
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "36c152edea29cb79e3130742098434a415e6eee4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": "24/01/16 6:35 AM",
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private static boolean isExpressionCountable(DetailAST ast) {\n-        boolean countable;\n+        final boolean countable;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.SLIST :\n             case TokenTypes.LABELED_STAT :\n             case TokenTypes.LITERAL_FOR :\n             case TokenTypes.LITERAL_DO :\n             case TokenTypes.LITERAL_WHILE :\n             case TokenTypes.LITERAL_IF :\n             case TokenTypes.LITERAL_ELSE :\n                 //don\u0027t count if or loop conditions\n                 final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                 countable \u003d prevSibling \u003d\u003d null\n                     || prevSibling.getType() !\u003d TokenTypes.LPAREN;\n                 break;\n             default :\n                 countable \u003d false;\n                 break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isExpressionCountable(DetailAST ast) {\n        final boolean countable;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n            case TokenTypes.SLIST :\n            case TokenTypes.LABELED_STAT :\n            case TokenTypes.LITERAL_FOR :\n            case TokenTypes.LITERAL_DO :\n            case TokenTypes.LITERAL_WHILE :\n            case TokenTypes.LITERAL_IF :\n            case TokenTypes.LITERAL_ELSE :\n                //don\u0027t count if or loop conditions\n                final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                countable \u003d prevSibling \u003d\u003d null\n                    || prevSibling.getType() !\u003d TokenTypes.LPAREN;\n                break;\n            default :\n                countable \u003d false;\n                break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 9:38 PM",
      "commitNameOld": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private static boolean isExpressionCountable(DetailAST ast) {\n         boolean countable;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.SLIST :\n             case TokenTypes.LABELED_STAT :\n             case TokenTypes.LITERAL_FOR :\n             case TokenTypes.LITERAL_DO :\n             case TokenTypes.LITERAL_WHILE :\n             case TokenTypes.LITERAL_IF :\n             case TokenTypes.LITERAL_ELSE :\n                 //don\u0027t count if or loop conditions\n                 final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                 countable \u003d prevSibling \u003d\u003d null\n-                    || TokenTypes.LPAREN !\u003d prevSibling.getType();\n+                    || prevSibling.getType() !\u003d TokenTypes.LPAREN;\n                 break;\n             default :\n                 countable \u003d false;\n                 break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isExpressionCountable(DetailAST ast) {\n        boolean countable;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n            case TokenTypes.SLIST :\n            case TokenTypes.LABELED_STAT :\n            case TokenTypes.LITERAL_FOR :\n            case TokenTypes.LITERAL_DO :\n            case TokenTypes.LITERAL_WHILE :\n            case TokenTypes.LITERAL_IF :\n            case TokenTypes.LITERAL_ELSE :\n                //don\u0027t count if or loop conditions\n                final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                countable \u003d prevSibling \u003d\u003d null\n                    || prevSibling.getType() !\u003d TokenTypes.LPAREN;\n                break;\n            default :\n                countable \u003d false;\n                break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": "07/08/15 9:12 PM",
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 15.93,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private static boolean isExpressionCountable(DetailAST ast) {\n-        boolean countable \u003d true;\n+        boolean countable;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.SLIST :\n             case TokenTypes.LABELED_STAT :\n             case TokenTypes.LITERAL_FOR :\n             case TokenTypes.LITERAL_DO :\n             case TokenTypes.LITERAL_WHILE :\n             case TokenTypes.LITERAL_IF :\n             case TokenTypes.LITERAL_ELSE :\n                 //don\u0027t count if or loop conditions\n                 final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                 countable \u003d prevSibling \u003d\u003d null\n                     || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                 break;\n             default :\n                 countable \u003d false;\n                 break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isExpressionCountable(DetailAST ast) {\n        boolean countable;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n            case TokenTypes.SLIST :\n            case TokenTypes.LABELED_STAT :\n            case TokenTypes.LITERAL_FOR :\n            case TokenTypes.LITERAL_DO :\n            case TokenTypes.LITERAL_WHILE :\n            case TokenTypes.LITERAL_IF :\n            case TokenTypes.LITERAL_ELSE :\n                //don\u0027t count if or loop conditions\n                final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                countable \u003d prevSibling \u003d\u003d null\n                    || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                break;\n            default :\n                countable \u003d false;\n                break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-    private boolean isExpressionCountable(DetailAST ast) {\n+    private static boolean isExpressionCountable(DetailAST ast) {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.SLIST :\n             case TokenTypes.LABELED_STAT :\n             case TokenTypes.LITERAL_FOR :\n             case TokenTypes.LITERAL_DO :\n             case TokenTypes.LITERAL_WHILE :\n             case TokenTypes.LITERAL_IF :\n             case TokenTypes.LITERAL_ELSE :\n                 //don\u0027t count if or loop conditions\n                 final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                 countable \u003d prevSibling \u003d\u003d null\n                     || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                 break;\n             default :\n                 countable \u003d false;\n                 break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isExpressionCountable(DetailAST ast) {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n            case TokenTypes.SLIST :\n            case TokenTypes.LABELED_STAT :\n            case TokenTypes.LITERAL_FOR :\n            case TokenTypes.LITERAL_DO :\n            case TokenTypes.LITERAL_WHILE :\n            case TokenTypes.LITERAL_IF :\n            case TokenTypes.LITERAL_ELSE :\n                //don\u0027t count if or loop conditions\n                final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                countable \u003d prevSibling \u003d\u003d null\n                    || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                break;\n            default :\n                countable \u003d false;\n                break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "d8f8de2b53a6abc0f8ca011acbe6f18bf9ed4ca9",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean isExpressionCountable(DetailAST ast)\n     {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n             case TokenTypes.SLIST :\n             case TokenTypes.LABELED_STAT :\n             case TokenTypes.LITERAL_FOR :\n             case TokenTypes.LITERAL_DO :\n             case TokenTypes.LITERAL_WHILE :\n             case TokenTypes.LITERAL_IF :\n             case TokenTypes.LITERAL_ELSE :\n                 //don\u0027t count if or loop conditions\n                 final DetailAST prevSibling \u003d ast.getPreviousSibling();\n-                countable \u003d (prevSibling \u003d\u003d null)\n-                    || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n+                countable \u003d prevSibling \u003d\u003d null\n+                    || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                 break;\n             default :\n                 countable \u003d false;\n                 break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isExpressionCountable(DetailAST ast)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n            case TokenTypes.SLIST :\n            case TokenTypes.LABELED_STAT :\n            case TokenTypes.LITERAL_FOR :\n            case TokenTypes.LITERAL_DO :\n            case TokenTypes.LITERAL_WHILE :\n            case TokenTypes.LITERAL_IF :\n            case TokenTypes.LITERAL_ELSE :\n                //don\u0027t count if or loop conditions\n                final DetailAST prevSibling \u003d ast.getPreviousSibling();\n                countable \u003d prevSibling \u003d\u003d null\n                    || TokenTypes.LPAREN !\u003d prevSibling.getType();\n                break;\n            default :\n                countable \u003d false;\n                break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, metrics, #512\n",
      "commitDate": "19/01/15 6:27 AM",
      "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, metrics, #512\n",
          "commitDate": "19/01/15 6:27 AM",
          "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean isExpressionCountable(DetailAST aAST)\n+    private boolean isExpressionCountable(DetailAST ast)\n     {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n-        final int parentType \u003d aAST.getParent().getType();\n+        final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n         case TokenTypes.SLIST :\n         case TokenTypes.LABELED_STAT :\n         case TokenTypes.LITERAL_FOR :\n         case TokenTypes.LITERAL_DO :\n         case TokenTypes.LITERAL_WHILE :\n         case TokenTypes.LITERAL_IF :\n         case TokenTypes.LITERAL_ELSE :\n             //don\u0027t count if or loop conditions\n-            final DetailAST prevSibling \u003d aAST.getPreviousSibling();\n+            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n             countable \u003d (prevSibling \u003d\u003d null)\n                 || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n             break;\n         default :\n             countable \u003d false;\n             break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isExpressionCountable(DetailAST ast)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n            countable \u003d (prevSibling \u003d\u003d null)\n                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, metrics, #512\n",
          "commitDate": "19/01/15 6:27 AM",
          "commitName": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean isExpressionCountable(DetailAST aAST)\n+    private boolean isExpressionCountable(DetailAST ast)\n     {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n-        final int parentType \u003d aAST.getParent().getType();\n+        final int parentType \u003d ast.getParent().getType();\n         switch (parentType) {\n         case TokenTypes.SLIST :\n         case TokenTypes.LABELED_STAT :\n         case TokenTypes.LITERAL_FOR :\n         case TokenTypes.LITERAL_DO :\n         case TokenTypes.LITERAL_WHILE :\n         case TokenTypes.LITERAL_IF :\n         case TokenTypes.LITERAL_ELSE :\n             //don\u0027t count if or loop conditions\n-            final DetailAST prevSibling \u003d aAST.getPreviousSibling();\n+            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n             countable \u003d (prevSibling \u003d\u003d null)\n                 || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n             break;\n         default :\n             countable \u003d false;\n             break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isExpressionCountable(DetailAST ast)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d ast.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n            countable \u003d (prevSibling \u003d\u003d null)\n                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean isExpressionCountable(DetailAST aAST)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d aAST.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            final DetailAST prevSibling \u003d aAST.getPreviousSibling();\n            countable \u003d (prevSibling \u003d\u003d null)\n                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java"
      }
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean isExpressionCountable(DetailAST aAST)\n     {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n-        int parentType \u003d aAST.getParent().getType();\n+        final int parentType \u003d aAST.getParent().getType();\n         switch (parentType) {\n         case TokenTypes.SLIST :\n         case TokenTypes.LABELED_STAT :\n         case TokenTypes.LITERAL_FOR :\n         case TokenTypes.LITERAL_DO :\n         case TokenTypes.LITERAL_WHILE :\n         case TokenTypes.LITERAL_IF :\n         case TokenTypes.LITERAL_ELSE :\n             //don\u0027t count if or loop conditions\n-            DetailAST prevSibling \u003d aAST.getPreviousSibling();\n+            final DetailAST prevSibling \u003d aAST.getPreviousSibling();\n             countable \u003d (prevSibling \u003d\u003d null)\n                 || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n             break;\n         default :\n             countable \u003d false;\n             break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isExpressionCountable(DetailAST aAST)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        final int parentType \u003d aAST.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            final DetailAST prevSibling \u003d aAST.getPreviousSibling();\n            countable \u003d (prevSibling \u003d\u003d null)\n                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/01/06 4:43 AM",
      "commitNameOld": "c38185458ab824874b8465c46b4dc42646440aaa",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 166.61,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean isExpressionCountable(DetailAST aAST)\n     {\n         boolean countable \u003d true;\n \n         //count expressions only if they are direct child to a slist (method\n         // body, for loop...)\n         //or direct child of label,if,else,do,while,for\n         int parentType \u003d aAST.getParent().getType();\n         switch (parentType) {\n         case TokenTypes.SLIST :\n         case TokenTypes.LABELED_STAT :\n         case TokenTypes.LITERAL_FOR :\n         case TokenTypes.LITERAL_DO :\n         case TokenTypes.LITERAL_WHILE :\n         case TokenTypes.LITERAL_IF :\n         case TokenTypes.LITERAL_ELSE :\n             //don\u0027t count if or loop conditions\n             DetailAST prevSibling \u003d aAST.getPreviousSibling();\n-            countable \u003d prevSibling \u003d\u003d null\n-                || TokenTypes.LPAREN !\u003d prevSibling.getType();\n+            countable \u003d (prevSibling \u003d\u003d null)\n+                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n             break;\n         default :\n             countable \u003d false;\n             break;\n         }\n         return countable;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isExpressionCountable(DetailAST aAST)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        int parentType \u003d aAST.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            DetailAST prevSibling \u003d aAST.getPreviousSibling();\n            countable \u003d (prevSibling \u003d\u003d null)\n                || (TokenTypes.LPAREN !\u003d prevSibling.getType());\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java",
      "extendedDetails": {}
    },
    "36c152edea29cb79e3130742098434a415e6eee4": {
      "type": "Yintroduced",
      "commitMessage": "Added check for the ncss metric.\n",
      "commitDate": "25/04/04 1:19 AM",
      "commitName": "36c152edea29cb79e3130742098434a415e6eee4",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,27 @@\n+    private boolean isExpressionCountable(DetailAST aAST)\n+    {\n+        boolean countable \u003d true;\n+\n+        //count expressions only if they are direct child to a slist (method\n+        // body, for loop...)\n+        //or direct child of label,if,else,do,while,for\n+        int parentType \u003d aAST.getParent().getType();\n+        switch (parentType) {\n+        case TokenTypes.SLIST :\n+        case TokenTypes.LABELED_STAT :\n+        case TokenTypes.LITERAL_FOR :\n+        case TokenTypes.LITERAL_DO :\n+        case TokenTypes.LITERAL_WHILE :\n+        case TokenTypes.LITERAL_IF :\n+        case TokenTypes.LITERAL_ELSE :\n+            //don\u0027t count if or loop conditions\n+            DetailAST prevSibling \u003d aAST.getPreviousSibling();\n+            countable \u003d prevSibling \u003d\u003d null\n+                || TokenTypes.LPAREN !\u003d prevSibling.getType();\n+            break;\n+        default :\n+            countable \u003d false;\n+            break;\n+        }\n+        return countable;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isExpressionCountable(DetailAST aAST)\n    {\n        boolean countable \u003d true;\n\n        //count expressions only if they are direct child to a slist (method\n        // body, for loop...)\n        //or direct child of label,if,else,do,while,for\n        int parentType \u003d aAST.getParent().getType();\n        switch (parentType) {\n        case TokenTypes.SLIST :\n        case TokenTypes.LABELED_STAT :\n        case TokenTypes.LITERAL_FOR :\n        case TokenTypes.LITERAL_DO :\n        case TokenTypes.LITERAL_WHILE :\n        case TokenTypes.LITERAL_IF :\n        case TokenTypes.LITERAL_ELSE :\n            //don\u0027t count if or loop conditions\n            DetailAST prevSibling \u003d aAST.getPreviousSibling();\n            countable \u003d prevSibling \u003d\u003d null\n                || TokenTypes.LPAREN !\u003d prevSibling.getType();\n            break;\n        default :\n            countable \u003d false;\n            break;\n        }\n        return countable;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java"
    }
  }
}