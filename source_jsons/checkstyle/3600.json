{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Main.java",
  "functionName": "validateCli",
  "functionId": "validateCli___parseResult-ParseResult__filesToProcess-List__File__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
  "functionStartLine": 797,
  "functionEndLine": 843,
  "numCommitsSeen": 280,
  "timeTaken": 4437,
  "changeHistory": [
    "9a7a8e15ed9820f3b325ef2fd2f7e3295c17d6b3",
    "5ed866347e51cac0a4835d93467908d2910a4b8f",
    "f3143fa28a339d6409932362307e906741b8c6f9",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "c94c2c494a156dfc77f737ef43664a89ce600ad4",
    "036582d728d2e2bb37f360bb3a74f899f04d587d",
    "980e53562ac1f29d2d9e8c434ada60515e9890e5",
    "1549ea4822139938296a58f59c38ae14f633c5aa",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "25621a3c3391ddf4bc0bb56535d23e73cd293657",
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
    "c225479c7d3a7b82fec7d26131ac27496d336853",
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
    "88f75f5413914bea5b39ba318edf912ee706226d",
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25",
    "3004b4d8810fae5956864d1493ea94f183b9442c",
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b"
  ],
  "changeHistoryShort": {
    "9a7a8e15ed9820f3b325ef2fd2f7e3295c17d6b3": "Ybodychange",
    "5ed866347e51cac0a4835d93467908d2910a4b8f": "Ybodychange",
    "f3143fa28a339d6409932362307e906741b8c6f9": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "c94c2c494a156dfc77f737ef43664a89ce600ad4": "Ybodychange",
    "036582d728d2e2bb37f360bb3a74f899f04d587d": "Ybodychange",
    "980e53562ac1f29d2d9e8c434ada60515e9890e5": "Ybodychange",
    "1549ea4822139938296a58f59c38ae14f633c5aa": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ybodychange",
    "25621a3c3391ddf4bc0bb56535d23e73cd293657": "Ybodychange",
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6": "Ymultichange(Yparameterchange,Ybodychange)",
    "c225479c7d3a7b82fec7d26131ac27496d336853": "Ybodychange",
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e": "Ybodychange",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": "Ybodychange",
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": "Ybodychange",
    "88f75f5413914bea5b39ba318edf912ee706226d": "Ybodychange",
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25": "Ybodychange",
    "3004b4d8810fae5956864d1493ea94f183b9442c": "Ybodychange",
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0": "Ybodychange",
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a7a8e15ed9820f3b325ef2fd2f7e3295c17d6b3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7475: resolve Cognitive Complexity cases above 20\n",
      "commitDate": "18/01/20 2:10 PM",
      "commitName": "9a7a8e15ed9820f3b325ef2fd2f7e3295c17d6b3",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 16.9,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,47 @@\n         private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n             final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n             final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n             final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n \n             if (filesToProcess.isEmpty()) {\n                 result.add(\"Files to process must be specified, found 0.\");\n             }\n             // ensure there is no conflicting options\n             else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc\n                 || xpath !\u003d null) {\n                 if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                         || propertiesFile !\u003d null || outputPath !\u003d null\n                         || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                     result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                 }\n                 else if (filesToProcess.size() \u003e 1) {\n                     result.add(\"Printing AST is allowed for only one file.\");\n                 }\n             }\n             else if (hasSuppressionLineColumnNumber) {\n                 if (configurationFile !\u003d null || propertiesFile !\u003d null\n                         || outputPath !\u003d null\n                         || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                     result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                 }\n                 else if (filesToProcess.size() \u003e 1) {\n                     result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                 }\n             }\n             else if (hasConfigurationFile) {\n                 try {\n                     // test location only\n                     CommonUtil.getUriByFilename(configurationFile);\n                 }\n                 catch (CheckstyleException ignored) {\n                     final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                     result.add(String.format(Locale.ROOT, msg, configurationFile));\n                 }\n-\n-                // validate optional parameters\n-                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n-                    result.add(String.format(Locale.ROOT,\n-                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n-                }\n-                if (checkerThreadsNumber \u003c 1) {\n-                    result.add(\"Checker threads number must be greater than zero\");\n-                }\n-                if (treeWalkerThreadsNumber \u003c 1) {\n-                    result.add(\"TreeWalker threads number must be greater than zero\");\n-                }\n+                result.addAll(validateOptionalCliParametersIfConfigDefined());\n             }\n             else {\n                 result.add(\"Must specify a config XML file.\");\n             }\n \n             return result;\n         }\n\\ No newline at end of file\n",
      "actualSource": "        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n\n            if (filesToProcess.isEmpty()) {\n                result.add(\"Files to process must be specified, found 0.\");\n            }\n            // ensure there is no conflicting options\n            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc\n                || xpath !\u003d null) {\n                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                        || propertiesFile !\u003d null || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing AST is allowed for only one file.\");\n                }\n            }\n            else if (hasSuppressionLineColumnNumber) {\n                if (configurationFile !\u003d null || propertiesFile !\u003d null\n                        || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                }\n            }\n            else if (hasConfigurationFile) {\n                try {\n                    // test location only\n                    CommonUtil.getUriByFilename(configurationFile);\n                }\n                catch (CheckstyleException ignored) {\n                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n                }\n                result.addAll(validateOptionalCliParametersIfConfigDefined());\n            }\n            else {\n                result.add(\"Must specify a config XML file.\");\n            }\n\n            return result;\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "5ed866347e51cac0a4835d93467908d2910a4b8f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6660: add xpath branch print\n",
      "commitDate": "08/09/19 6:04 AM",
      "commitName": "5ed866347e51cac0a4835d93467908d2910a4b8f",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "07/09/19 4:32 PM",
      "commitNameOld": "0764f80584b35691ace2ab6cc093d4d4a203c529",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n         private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n             final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n             final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n             final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n \n             if (filesToProcess.isEmpty()) {\n                 result.add(\"Files to process must be specified, found 0.\");\n             }\n             // ensure there is no conflicting options\n-            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n+            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc\n+                || xpath !\u003d null) {\n                 if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                         || propertiesFile !\u003d null || outputPath !\u003d null\n                         || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                     result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                 }\n                 else if (filesToProcess.size() \u003e 1) {\n                     result.add(\"Printing AST is allowed for only one file.\");\n                 }\n             }\n             else if (hasSuppressionLineColumnNumber) {\n                 if (configurationFile !\u003d null || propertiesFile !\u003d null\n                         || outputPath !\u003d null\n                         || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                     result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                 }\n                 else if (filesToProcess.size() \u003e 1) {\n                     result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                 }\n             }\n             else if (hasConfigurationFile) {\n                 try {\n                     // test location only\n                     CommonUtil.getUriByFilename(configurationFile);\n                 }\n                 catch (CheckstyleException ignored) {\n                     final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                     result.add(String.format(Locale.ROOT, msg, configurationFile));\n                 }\n \n                 // validate optional parameters\n                 if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n                     result.add(String.format(Locale.ROOT,\n                             \"Could not find file \u0027%s\u0027.\", propertiesFile));\n                 }\n                 if (checkerThreadsNumber \u003c 1) {\n                     result.add(\"Checker threads number must be greater than zero\");\n                 }\n                 if (treeWalkerThreadsNumber \u003c 1) {\n                     result.add(\"TreeWalker threads number must be greater than zero\");\n                 }\n             }\n             else {\n                 result.add(\"Must specify a config XML file.\");\n             }\n \n             return result;\n         }\n\\ No newline at end of file\n",
      "actualSource": "        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n\n            if (filesToProcess.isEmpty()) {\n                result.add(\"Files to process must be specified, found 0.\");\n            }\n            // ensure there is no conflicting options\n            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc\n                || xpath !\u003d null) {\n                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                        || propertiesFile !\u003d null || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing AST is allowed for only one file.\");\n                }\n            }\n            else if (hasSuppressionLineColumnNumber) {\n                if (configurationFile !\u003d null || propertiesFile !\u003d null\n                        || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                }\n            }\n            else if (hasConfigurationFile) {\n                try {\n                    // test location only\n                    CommonUtil.getUriByFilename(configurationFile);\n                }\n                catch (CheckstyleException ignored) {\n                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n                }\n\n                // validate optional parameters\n                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n                    result.add(String.format(Locale.ROOT,\n                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n                }\n                if (checkerThreadsNumber \u003c 1) {\n                    result.add(\"Checker threads number must be greater than zero\");\n                }\n                if (treeWalkerThreadsNumber \u003c 1) {\n                    result.add(\"TreeWalker threads number must be greater than zero\");\n                }\n            }\n            else {\n                result.add(\"Must specify a config XML file.\");\n            }\n\n            return result;\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "f3143fa28a339d6409932362307e906741b8c6f9": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
      "commitDate": "29/10/18 4:33 PM",
      "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
      "commitAuthor": "Remko Popma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,57 @@\n-    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n-        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n+            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n+            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n \n-        if (filesToProcess.isEmpty()) {\n-            result.add(\"Files to process must be specified, found 0.\");\n-        }\n-        // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n-                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n-                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n-                    || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+            if (filesToProcess.isEmpty()) {\n+                result.add(\"Files to process must be specified, found 0.\");\n             }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing AST is allowed for only one file.\");\n-            }\n-        }\n-        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n-            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n-                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n-            }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n-            }\n-        }\n-        // ensure a configuration file is specified\n-        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n-            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n-            try {\n-                // test location only\n-                CommonUtil.getUriByFilename(configLocation);\n-            }\n-            catch (CheckstyleException ignored) {\n-                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n-            }\n-\n-            // validate optional parameters\n-            if (cmdLine.hasOption(OPTION_F_NAME)) {\n-                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n-                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n-                    result.add(String.format(\"Invalid output format.\"\n-                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n-                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n+            // ensure there is no conflicting options\n+            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n+                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n+                        || propertiesFile !\u003d null || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing AST is allowed for only one file.\");\n                 }\n             }\n-            if (cmdLine.hasOption(OPTION_P_NAME)) {\n-                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n-                final File file \u003d new File(propertiesLocation);\n-                if (!file.exists()) {\n-                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n+            else if (hasSuppressionLineColumnNumber) {\n+                if (configurationFile !\u003d null || propertiesFile !\u003d null\n+                        || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                 }\n             }\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n-                \"Checker threads number must be greater than zero\",\n-                \"Invalid Checker threads number\");\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n-                \"TreeWalker threads number must be greater than zero\",\n-                \"Invalid TreeWalker threads number\");\n-        }\n-        else {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n+            else if (hasConfigurationFile) {\n+                try {\n+                    // test location only\n+                    CommonUtil.getUriByFilename(configurationFile);\n+                }\n+                catch (CheckstyleException ignored) {\n+                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n+                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n+                }\n \n-        return result;\n-    }\n\\ No newline at end of file\n+                // validate optional parameters\n+                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n+                    result.add(String.format(Locale.ROOT,\n+                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n+                }\n+                if (checkerThreadsNumber \u003c 1) {\n+                    result.add(\"Checker threads number must be greater than zero\");\n+                }\n+                if (treeWalkerThreadsNumber \u003c 1) {\n+                    result.add(\"TreeWalker threads number must be greater than zero\");\n+                }\n+            }\n+            else {\n+                result.add(\"Must specify a config XML file.\");\n+            }\n+\n+            return result;\n+        }\n\\ No newline at end of file\n",
          "actualSource": "        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n\n            if (filesToProcess.isEmpty()) {\n                result.add(\"Files to process must be specified, found 0.\");\n            }\n            // ensure there is no conflicting options\n            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                        || propertiesFile !\u003d null || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing AST is allowed for only one file.\");\n                }\n            }\n            else if (hasSuppressionLineColumnNumber) {\n                if (configurationFile !\u003d null || propertiesFile !\u003d null\n                        || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                }\n            }\n            else if (hasConfigurationFile) {\n                try {\n                    // test location only\n                    CommonUtil.getUriByFilename(configurationFile);\n                }\n                catch (CheckstyleException ignored) {\n                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n                }\n\n                // validate optional parameters\n                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n                    result.add(String.format(Locale.ROOT,\n                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n                }\n                if (checkerThreadsNumber \u003c 1) {\n                    result.add(\"Checker threads number must be greater than zero\");\n                }\n                if (treeWalkerThreadsNumber \u003c 1) {\n                    result.add(\"TreeWalker threads number must be greater than zero\");\n                }\n            }\n            else {\n                result.add(\"Must specify a config XML file.\");\n            }\n\n            return result;\n        }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {
            "oldValue": "[cmdLine-CommandLine, filesToProcess-List\u003cFile\u003e]",
            "newValue": "[parseResult-ParseResult, filesToProcess-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,57 @@\n-    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n-        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n+            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n+            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n \n-        if (filesToProcess.isEmpty()) {\n-            result.add(\"Files to process must be specified, found 0.\");\n-        }\n-        // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n-                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n-                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n-                    || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+            if (filesToProcess.isEmpty()) {\n+                result.add(\"Files to process must be specified, found 0.\");\n             }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing AST is allowed for only one file.\");\n-            }\n-        }\n-        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n-            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n-                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n-            }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n-            }\n-        }\n-        // ensure a configuration file is specified\n-        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n-            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n-            try {\n-                // test location only\n-                CommonUtil.getUriByFilename(configLocation);\n-            }\n-            catch (CheckstyleException ignored) {\n-                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n-            }\n-\n-            // validate optional parameters\n-            if (cmdLine.hasOption(OPTION_F_NAME)) {\n-                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n-                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n-                    result.add(String.format(\"Invalid output format.\"\n-                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n-                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n+            // ensure there is no conflicting options\n+            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n+                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n+                        || propertiesFile !\u003d null || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing AST is allowed for only one file.\");\n                 }\n             }\n-            if (cmdLine.hasOption(OPTION_P_NAME)) {\n-                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n-                final File file \u003d new File(propertiesLocation);\n-                if (!file.exists()) {\n-                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n+            else if (hasSuppressionLineColumnNumber) {\n+                if (configurationFile !\u003d null || propertiesFile !\u003d null\n+                        || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                 }\n             }\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n-                \"Checker threads number must be greater than zero\",\n-                \"Invalid Checker threads number\");\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n-                \"TreeWalker threads number must be greater than zero\",\n-                \"Invalid TreeWalker threads number\");\n-        }\n-        else {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n+            else if (hasConfigurationFile) {\n+                try {\n+                    // test location only\n+                    CommonUtil.getUriByFilename(configurationFile);\n+                }\n+                catch (CheckstyleException ignored) {\n+                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n+                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n+                }\n \n-        return result;\n-    }\n\\ No newline at end of file\n+                // validate optional parameters\n+                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n+                    result.add(String.format(Locale.ROOT,\n+                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n+                }\n+                if (checkerThreadsNumber \u003c 1) {\n+                    result.add(\"Checker threads number must be greater than zero\");\n+                }\n+                if (treeWalkerThreadsNumber \u003c 1) {\n+                    result.add(\"TreeWalker threads number must be greater than zero\");\n+                }\n+            }\n+            else {\n+                result.add(\"Must specify a config XML file.\");\n+            }\n+\n+            return result;\n+        }\n\\ No newline at end of file\n",
          "actualSource": "        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n\n            if (filesToProcess.isEmpty()) {\n                result.add(\"Files to process must be specified, found 0.\");\n            }\n            // ensure there is no conflicting options\n            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                        || propertiesFile !\u003d null || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing AST is allowed for only one file.\");\n                }\n            }\n            else if (hasSuppressionLineColumnNumber) {\n                if (configurationFile !\u003d null || propertiesFile !\u003d null\n                        || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                }\n            }\n            else if (hasConfigurationFile) {\n                try {\n                    // test location only\n                    CommonUtil.getUriByFilename(configurationFile);\n                }\n                catch (CheckstyleException ignored) {\n                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n                }\n\n                // validate optional parameters\n                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n                    result.add(String.format(Locale.ROOT,\n                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n                }\n                if (checkerThreadsNumber \u003c 1) {\n                    result.add(\"Checker threads number must be greater than zero\");\n                }\n                if (treeWalkerThreadsNumber \u003c 1) {\n                    result.add(\"TreeWalker threads number must be greater than zero\");\n                }\n            }\n            else {\n                result.add(\"Must specify a config XML file.\");\n            }\n\n            return result;\n        }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,57 @@\n-    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n-        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n+            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n+            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n \n-        if (filesToProcess.isEmpty()) {\n-            result.add(\"Files to process must be specified, found 0.\");\n-        }\n-        // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n-                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n-                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n-                    || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+            if (filesToProcess.isEmpty()) {\n+                result.add(\"Files to process must be specified, found 0.\");\n             }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing AST is allowed for only one file.\");\n-            }\n-        }\n-        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n-            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n-                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n-                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n-            }\n-            else if (filesToProcess.size() \u003e 1) {\n-                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n-            }\n-        }\n-        // ensure a configuration file is specified\n-        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n-            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n-            try {\n-                // test location only\n-                CommonUtil.getUriByFilename(configLocation);\n-            }\n-            catch (CheckstyleException ignored) {\n-                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n-            }\n-\n-            // validate optional parameters\n-            if (cmdLine.hasOption(OPTION_F_NAME)) {\n-                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n-                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n-                    result.add(String.format(\"Invalid output format.\"\n-                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n-                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n+            // ensure there is no conflicting options\n+            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n+                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n+                        || propertiesFile !\u003d null || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing AST is allowed for only one file.\");\n                 }\n             }\n-            if (cmdLine.hasOption(OPTION_P_NAME)) {\n-                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n-                final File file \u003d new File(propertiesLocation);\n-                if (!file.exists()) {\n-                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n+            else if (hasSuppressionLineColumnNumber) {\n+                if (configurationFile !\u003d null || propertiesFile !\u003d null\n+                        || outputPath !\u003d null\n+                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n+                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n+                }\n+                else if (filesToProcess.size() \u003e 1) {\n+                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                 }\n             }\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n-                \"Checker threads number must be greater than zero\",\n-                \"Invalid Checker threads number\");\n-            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n-                \"TreeWalker threads number must be greater than zero\",\n-                \"Invalid TreeWalker threads number\");\n-        }\n-        else {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n+            else if (hasConfigurationFile) {\n+                try {\n+                    // test location only\n+                    CommonUtil.getUriByFilename(configurationFile);\n+                }\n+                catch (CheckstyleException ignored) {\n+                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n+                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n+                }\n \n-        return result;\n-    }\n\\ No newline at end of file\n+                // validate optional parameters\n+                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n+                    result.add(String.format(Locale.ROOT,\n+                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n+                }\n+                if (checkerThreadsNumber \u003c 1) {\n+                    result.add(\"Checker threads number must be greater than zero\");\n+                }\n+                if (treeWalkerThreadsNumber \u003c 1) {\n+                    result.add(\"TreeWalker threads number must be greater than zero\");\n+                }\n+            }\n+            else {\n+                result.add(\"Must specify a config XML file.\");\n+            }\n+\n+            return result;\n+        }\n\\ No newline at end of file\n",
          "actualSource": "        private List\u003cString\u003e validateCli(ParseResult parseResult, List\u003cFile\u003e filesToProcess) {\n            final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n            final boolean hasConfigurationFile \u003d configurationFile !\u003d null;\n            final boolean hasSuppressionLineColumnNumber \u003d suppressionLineColumnNumber !\u003d null;\n\n            if (filesToProcess.isEmpty()) {\n                result.add(\"Files to process must be specified, found 0.\");\n            }\n            // ensure there is no conflicting options\n            else if (printAst || printAstWithComments || printJavadocTree || printTreeWithJavadoc) {\n                if (suppressionLineColumnNumber !\u003d null || configurationFile !\u003d null\n                        || propertiesFile !\u003d null || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing AST is allowed for only one file.\");\n                }\n            }\n            else if (hasSuppressionLineColumnNumber) {\n                if (configurationFile !\u003d null || propertiesFile !\u003d null\n                        || outputPath !\u003d null\n                        || parseResult.hasMatchedOption(OUTPUT_FORMAT_OPTION)) {\n                    result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n                }\n                else if (filesToProcess.size() \u003e 1) {\n                    result.add(\"Printing xpath suppressions is allowed for only one file.\");\n                }\n            }\n            else if (hasConfigurationFile) {\n                try {\n                    // test location only\n                    CommonUtil.getUriByFilename(configurationFile);\n                }\n                catch (CheckstyleException ignored) {\n                    final String msg \u003d \"Could not find config XML file \u0027%s\u0027.\";\n                    result.add(String.format(Locale.ROOT, msg, configurationFile));\n                }\n\n                // validate optional parameters\n                if (propertiesFile !\u003d null \u0026\u0026 !propertiesFile.exists()) {\n                    result.add(String.format(Locale.ROOT,\n                            \"Could not find file \u0027%s\u0027.\", propertiesFile));\n                }\n                if (checkerThreadsNumber \u003c 1) {\n                    result.add(\"Checker threads number must be greater than zero\");\n                }\n                if (treeWalkerThreadsNumber \u003c 1) {\n                    result.add(\"TreeWalker threads number must be greater than zero\");\n                }\n            }\n            else {\n                result.add(\"Must specify a config XML file.\");\n            }\n\n            return result;\n        }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {}
        }
      ]
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/05/18 1:09 PM",
      "commitNameOld": "effba275df3b43bc0df4d00ca9a05b144e8006f8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 16.35,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n                     || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n                     || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         else if (cmdLine.hasOption(OPTION_S_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing xpath suppressions is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n-                CommonUtils.getUriByFilename(configLocation);\n+                CommonUtil.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n                 \"Checker threads number must be greater than zero\",\n                 \"Invalid Checker threads number\");\n             verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n                 \"TreeWalker threads number must be greater than zero\",\n                 \"Invalid TreeWalker threads number\");\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n                    || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtil.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n                \"Checker threads number must be greater than zero\",\n                \"Invalid Checker threads number\");\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n                \"TreeWalker threads number must be greater than zero\",\n                \"Invalid TreeWalker threads number\");\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "c94c2c494a156dfc77f737ef43664a89ce600ad4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4530: Add the new option for Checkstyle CLI to generate the basic suppression xpath\n",
      "commitDate": "14/04/18 8:52 PM",
      "commitName": "c94c2c494a156dfc77f737ef43664a89ce600ad4",
      "commitAuthor": "Timur Tibeyev",
      "commitDateOld": "14/04/18 5:52 AM",
      "commitNameOld": "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,67 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n-                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n+            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n+                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n+                    || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n+        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n+            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n+                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n+                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n+            }\n+            else if (filesToProcess.size() \u003e 1) {\n+                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n+            }\n+        }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n                 \"Checker threads number must be greater than zero\",\n                 \"Invalid Checker threads number\");\n             verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n                 \"TreeWalker threads number must be greater than zero\",\n                 \"Invalid TreeWalker threads number\");\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_S_NAME) || cmdLine.hasOption(OPTION_C_NAME)\n                    || cmdLine.hasOption(OPTION_P_NAME) || cmdLine.hasOption(OPTION_F_NAME)\n                    || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        else if (cmdLine.hasOption(OPTION_S_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-s\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing xpath suppressions is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n                \"Checker threads number must be greater than zero\",\n                \"Invalid Checker threads number\");\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n                \"TreeWalker threads number must be greater than zero\",\n                \"Invalid TreeWalker threads number\");\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "036582d728d2e2bb37f360bb3a74f899f04d587d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4370: Add multi thread mode to checkstyle launcher\n",
      "commitDate": "02/07/17 7:43 PM",
      "commitName": "036582d728d2e2bb37f360bb3a74f899f04d587d",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": "19/06/17 2:53 PM",
      "commitNameOld": "fe7655e7d82152b57fd68d37df621d22b47132ad",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.2,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,57 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n+            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n+                \"Checker threads number must be greater than zero\",\n+                \"Invalid Checker threads number\");\n+            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n+                \"TreeWalker threads number must be greater than zero\",\n+                \"Invalid TreeWalker threads number\");\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_C_NAME,\n                \"Checker threads number must be greater than zero\",\n                \"Invalid Checker threads number\");\n            verifyThreadsNumberParameter(cmdLine, result, OPTION_CAPITAL_W_NAME,\n                \"TreeWalker threads number must be greater than zero\",\n                \"Invalid TreeWalker threads number\");\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "980e53562ac1f29d2d9e8c434ada60515e9890e5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3177: Remove validation of rw access for output file in Main#validateCli (#3284)\n\n",
      "commitDate": "17/06/16 10:48 AM",
      "commitName": "980e53562ac1f29d2d9e8c434ada60515e9890e5",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "27/05/16 6:18 AM",
      "commitNameOld": "a6ab6053e6b3d421d19764418cba3858c683e6e8",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 21.19,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,51 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                 || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-            if (cmdLine.hasOption(OPTION_O_NAME)) {\n-                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n-                final File file \u003d new File(outputLocation);\n-                if (file.exists() \u0026\u0026 !file.canWrite()) {\n-                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n-                }\n-            }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "1549ea4822139938296a58f59c38ae14f633c5aa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3040: New CLI option to print full tree (java+comments+javadoc). (#3078)",
      "commitDate": "10/04/16 2:08 PM",
      "commitName": "1549ea4822139938296a58f59c38ae14f633c5aa",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "17/03/16 6:19 AM",
      "commitNameOld": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 24.33,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n-                || cmdLine.hasOption(OPTION_J_NAME)) {\n+                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME) || cmdLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": "17/03/16 6:19 AM",
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "23/02/16 7:07 AM",
      "commitNameOld": "25621a3c3391ddf4bc0bb56535d23e73cd293657",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 22.93,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n+                || cmdLine.hasOption(OPTION_J_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)\n                || cmdLine.hasOption(OPTION_J_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "25621a3c3391ddf4bc0bb56535d23e73cd293657": {
      "type": "Ybodychange",
      "commitMessage": "Issue #652: New option to print AST with comment nodes.\n",
      "commitDate": "23/02/16 7:07 AM",
      "commitName": "25621a3c3391ddf4bc0bb56535d23e73cd293657",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "10/02/16 6:07 AM",
      "commitNameOld": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.04,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n-        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME) || cmdLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2103: removed excess file gathering in main",
      "commitDate": "10/02/16 6:07 AM",
      "commitName": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2103: removed excess file gathering in main",
          "commitDate": "10/02/16 6:07 AM",
          "commitName": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
          "commitAuthor": "rnveach",
          "commitDateOld": "04/02/16 2:32 AM",
          "commitNameOld": "c225479c7d3a7b82fec7d26131ac27496d336853",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 6.15,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n-    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n+    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n-        final List\u003cFile\u003e filesToProcess \u003d getFilesToProcess(cmdLine.getArgs());\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {
            "oldValue": "[cmdLine-CommandLine]",
            "newValue": "[cmdLine-CommandLine, filesToProcess-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2103: removed excess file gathering in main",
          "commitDate": "10/02/16 6:07 AM",
          "commitName": "1b72b4905bf3520aa47697cc7d1bcdad8b7ad1e6",
          "commitAuthor": "rnveach",
          "commitDateOld": "04/02/16 2:32 AM",
          "commitNameOld": "c225479c7d3a7b82fec7d26131ac27496d336853",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 6.15,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n-    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n+    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n-        final List\u003cFile\u003e filesToProcess \u003d getFilesToProcess(cmdLine.getArgs());\n \n         if (filesToProcess.isEmpty()) {\n             result.add(\"Files to process must be specified, found 0.\");\n         }\n         // ensure there is no conflicting options\n         else if (cmdLine.hasOption(OPTION_T_NAME)) {\n             if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                     || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                 result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n             }\n             else if (filesToProcess.size() \u003e 1) {\n                 result.add(\"Printing AST is allowed for only one file.\");\n             }\n         }\n         // ensure a configuration file is specified\n         else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine, List\u003cFile\u003e filesToProcess) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {}
        }
      ]
    },
    "c225479c7d3a7b82fec7d26131ac27496d336853": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2638: Print parse tree from CLI to terminal\n",
      "commitDate": "04/02/16 2:32 AM",
      "commitName": "c225479c7d3a7b82fec7d26131ac27496d336853",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "24/01/16 6:35 AM",
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,58 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        final List\u003cFile\u003e filesToProcess \u003d getFilesToProcess(cmdLine.getArgs());\n+\n+        if (filesToProcess.isEmpty()) {\n+            result.add(\"Files to process must be specified, found 0.\");\n+        }\n+        // ensure there is no conflicting options\n+        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n+            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n+                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n+                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n+            }\n+            else if (filesToProcess.size() \u003e 1) {\n+                result.add(\"Printing AST is allowed for only one file.\");\n+            }\n+        }\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(OPTION_C_NAME)) {\n+        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n             final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n             try {\n                 // test location only\n                 CommonUtils.getUriByFilename(configLocation);\n             }\n             catch (CheckstyleException ignored) {\n                 result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n             }\n \n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n-            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n-            if (files.isEmpty()) {\n-                result.add(\"Must specify files to process, found 0.\");\n-            }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        final List\u003cFile\u003e filesToProcess \u003d getFilesToProcess(cmdLine.getArgs());\n\n        if (filesToProcess.isEmpty()) {\n            result.add(\"Files to process must be specified, found 0.\");\n        }\n        // ensure there is no conflicting options\n        else if (cmdLine.hasOption(OPTION_T_NAME)) {\n            if (cmdLine.hasOption(OPTION_C_NAME) || cmdLine.hasOption(OPTION_P_NAME)\n                    || cmdLine.hasOption(OPTION_F_NAME) || cmdLine.hasOption(OPTION_O_NAME)) {\n                result.add(\"Option \u0027-t\u0027 cannot be used with other options.\");\n            }\n            else if (filesToProcess.size() \u003e 1) {\n                result.add(\"Printing AST is allowed for only one file.\");\n            }\n        }\n        // ensure a configuration file is specified\n        else if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1267: validate existence of config file sooner",
      "commitDate": "03/11/15 6:04 AM",
      "commitName": "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e",
      "commitAuthor": "rnveach",
      "commitDateOld": "01/11/15 5:52 AM",
      "commitNameOld": "f020066f8bdfb378df36904af3df8b5bc48858fd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,47 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (cmdLine.hasOption(OPTION_C_NAME)) {\n+            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n+            try {\n+                // test location only\n+                CommonUtils.getUriByFilename(configLocation);\n+            }\n+            catch (CheckstyleException ignored) {\n+                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n+            }\n+\n             // validate optional parameters\n             if (cmdLine.hasOption(OPTION_F_NAME)) {\n                 final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                 if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                             format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_P_NAME)) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(OPTION_O_NAME)) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (cmdLine.hasOption(OPTION_C_NAME)) {\n            final String configLocation \u003d cmdLine.getOptionValue(OPTION_C_NAME);\n            try {\n                // test location only\n                CommonUtils.getUriByFilename(configLocation);\n            }\n            catch (CheckstyleException ignored) {\n                result.add(String.format(\"Could not find config XML file \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": "25/08/15 5:12 AM",
      "commitName": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:42 PM",
      "commitNameOld": "da6a8d083cb82a94707146de559911578f39affe",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(\"c\")) {\n+        if (cmdLine.hasOption(OPTION_C_NAME)) {\n             // validate optional parameters\n-            if (cmdLine.hasOption(\"f\")) {\n-                final String format \u003d cmdLine.getOptionValue(\"f\");\n-                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n+            if (cmdLine.hasOption(OPTION_F_NAME)) {\n+                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n+                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n-                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n+                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n+                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                 }\n             }\n-            if (cmdLine.hasOption(\"p\")) {\n-                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n+            if (cmdLine.hasOption(OPTION_P_NAME)) {\n+                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-            if (cmdLine.hasOption(\"o\")) {\n-                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n+            if (cmdLine.hasOption(OPTION_O_NAME)) {\n+                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n         else {\n             result.add(\"Must specify a config XML file.\");\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (cmdLine.hasOption(OPTION_C_NAME)) {\n            // validate optional parameters\n            if (cmdLine.hasOption(OPTION_F_NAME)) {\n                final String format \u003d cmdLine.getOptionValue(OPTION_F_NAME);\n                if (!PLAIN_FORMAT_NAME.equals(format) \u0026\u0026 !XML_FORMAT_NAME.equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027%s\u0027 or \u0027%s\u0027.\",\n                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_P_NAME)) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(OPTION_P_NAME);\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(OPTION_O_NAME)) {\n                final String outputLocation \u003d cmdLine.getOptionValue(OPTION_O_NAME);\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1": {
      "type": "Ybodychange",
      "commitMessage": "Invert if statements with negated conditions. #1555\n\nFixes `NegatedIfElse` inspection violations.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": "09/08/15 11:46 PM",
      "commitName": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 10:23 PM",
      "commitNameOld": "186625600d7678f597f56aa6a83d4b0a89e1fe35",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (!cmdLine.hasOption(\"c\")) {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n-        else {\n+        if (cmdLine.hasOption(\"c\")) {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n+        else {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (cmdLine.hasOption(\"c\")) {\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "88f75f5413914bea5b39ba318edf912ee706226d": {
      "type": "Ybodychange",
      "commitMessage": "Investigate UTs failure to MainTest on Windows. #1510\n",
      "commitDate": "30/07/15 3:23 AM",
      "commitName": "88f75f5413914bea5b39ba318edf912ee706226d",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "29/07/15 12:29 AM",
      "commitNameOld": "aaf39002ac7fa00b95f4719beca058f6f7445574",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (!cmdLine.hasOption(\"c\")) {\n             result.add(\"Must specify a config XML file.\");\n         }\n         else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n-                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n+                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (!cmdLine.hasOption(\"c\")) {\n            result.add(\"Must specify a config XML file.\");\n        }\n        else {\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !file.canWrite()) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "bff2e1754acddcbf199986d8796e88fb7bf7bf25": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Checking existance of config file before processing target file.\", due to #1267\n\nThis reverts commit 3004b4d8810fae5956864d1493ea94f183b9442c.\n",
      "commitDate": "30/06/15 8:10 PM",
      "commitName": "bff2e1754acddcbf199986d8796e88fb7bf7bf25",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "14/06/15 7:37 AM",
      "commitNameOld": "4299a4b408304cd0bcad6c25b4a322dbd94169a3",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 16.52,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (cmdLine.hasOption(\"c\")) {\n-            final String configLocation \u003d cmdLine.getOptionValue(\"c\");\n-            final File configFile \u003d  new File(configLocation);\n-            if (!configFile.exists()) {\n-                result.add(String.format(\"unable to find \u0027%s\u0027.\", configLocation));\n-            }\n-\n+        if (!cmdLine.hasOption(\"c\")) {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n+        else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n-\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n-\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n-\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n-        else {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (!cmdLine.hasOption(\"c\")) {\n            result.add(\"Must specify a config XML file.\");\n        }\n        else {\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "3004b4d8810fae5956864d1493ea94f183b9442c": {
      "type": "Ybodychange",
      "commitMessage": "Checking existance of config file before processing target file.\n",
      "commitDate": "13/06/15 8:41 AM",
      "commitName": "3004b4d8810fae5956864d1493ea94f183b9442c",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "08/06/15 11:42 AM",
      "commitNameOld": "fe6db3ab8a864e11eebfb0496f6a41852bdee019",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,46 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n-        if (!cmdLine.hasOption(\"c\")) {\n-            result.add(\"Must specify a config XML file.\");\n-        }\n-        else {\n+        if (cmdLine.hasOption(\"c\")) {\n+            final String configLocation \u003d cmdLine.getOptionValue(\"c\");\n+            final File configFile \u003d  new File(configLocation);\n+            if (!configFile.exists()) {\n+                result.add(String.format(\"unable to find \u0027%s\u0027.\", configLocation));\n+            }\n+\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n+\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n+\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n                 if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                     result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n+\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n+        else {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (cmdLine.hasOption(\"c\")) {\n            final String configLocation \u003d cmdLine.getOptionValue(\"c\");\n            final File configFile \u003d  new File(configLocation);\n            if (!configFile.exists()) {\n                result.add(String.format(\"unable to find \u0027%s\u0027.\", configLocation));\n            }\n\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n        else {\n            result.add(\"Must specify a config XML file.\");\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0": {
      "type": "Ybodychange",
      "commitMessage": "solution to CLI fails when it could not find output file. solves #1181\n",
      "commitDate": "07/06/15 8:42 AM",
      "commitName": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "21/05/15 3:16 PM",
      "commitNameOld": "f786378e2325aaa95974d70b7df07f8dc109648e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n         final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n         // ensure a configuration file is specified\n         if (!cmdLine.hasOption(\"c\")) {\n             result.add(\"Must specify a config XML file.\");\n         }\n         else {\n             // validate optional parameters\n             if (cmdLine.hasOption(\"f\")) {\n                 final String format \u003d cmdLine.getOptionValue(\"f\");\n                 if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                     result.add(String.format(\"Invalid output format.\"\n                             + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                 }\n             }\n             if (cmdLine.hasOption(\"p\")) {\n                 final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                 final File file \u003d new File(propertiesLocation);\n                 if (!file.exists()) {\n                     result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                 }\n             }\n             if (cmdLine.hasOption(\"o\")) {\n                 final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                 final File file \u003d new File(outputLocation);\n-                if (!file.exists()) {\n-                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", outputLocation));\n+                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n+                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                 }\n             }\n             final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n             if (files.isEmpty()) {\n                 result.add(\"Must specify files to process, found 0.\");\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine) {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (!cmdLine.hasOption(\"c\")) {\n            result.add(\"Must specify a config XML file.\");\n        }\n        else {\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (file.exists() \u0026\u0026 !(file.canRead() \u0026\u0026 file.canWrite())) {\n                    result.add(String.format(\"Permission denied : \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "1a2c318e22a0b2b22ccc76019217c0892fe2d59b": {
      "type": "Yintroduced",
      "commitMessage": "huge refactoring for CLI Main class. Issue #596\n",
      "commitDate": "05/05/15 11:12 AM",
      "commitName": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,38 @@\n+    private static List\u003cString\u003e validateCli(CommandLine cmdLine)\n+    {\n+        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n+        // ensure a configuration file is specified\n+        if (!cmdLine.hasOption(\"c\")) {\n+            result.add(\"Must specify a config XML file.\");\n+        }\n+        else {\n+            // validate optional parameters\n+            if (cmdLine.hasOption(\"f\")) {\n+                final String format \u003d cmdLine.getOptionValue(\"f\");\n+                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n+                    result.add(String.format(\"Invalid output format.\"\n+                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n+                }\n+            }\n+            if (cmdLine.hasOption(\"p\")) {\n+                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n+                final File file \u003d new File(propertiesLocation);\n+                if (!file.exists()) {\n+                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n+                }\n+            }\n+            if (cmdLine.hasOption(\"o\")) {\n+                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n+                final File file \u003d new File(outputLocation);\n+                if (!file.exists()) {\n+                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", outputLocation));\n+                }\n+            }\n+            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n+            if (files.isEmpty()) {\n+                result.add(\"Must specify files to process, found 0.\");\n+            }\n+        }\n+\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e validateCli(CommandLine cmdLine)\n    {\n        final List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();\n        // ensure a configuration file is specified\n        if (!cmdLine.hasOption(\"c\")) {\n            result.add(\"Must specify a config XML file.\");\n        }\n        else {\n            // validate optional parameters\n            if (cmdLine.hasOption(\"f\")) {\n                final String format \u003d cmdLine.getOptionValue(\"f\");\n                if (!\"plain\".equals(format) \u0026\u0026 !\"xml\".equals(format)) {\n                    result.add(String.format(\"Invalid output format.\"\n                            + \" Found \u0027%s\u0027 but expected \u0027plain\u0027 or \u0027xml\u0027.\", format));\n                }\n            }\n            if (cmdLine.hasOption(\"p\")) {\n                final String propertiesLocation \u003d cmdLine.getOptionValue(\"p\");\n                final File file \u003d new File(propertiesLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", propertiesLocation));\n                }\n            }\n            if (cmdLine.hasOption(\"o\")) {\n                final String outputLocation \u003d cmdLine.getOptionValue(\"o\");\n                final File file \u003d new File(outputLocation);\n                if (!file.exists()) {\n                    result.add(String.format(\"Could not find file \u0027%s\u0027.\", outputLocation));\n                }\n            }\n            final List\u003cFile\u003e files \u003d getFilesToProcess(cmdLine.getArgs());\n            if (files.isEmpty()) {\n                result.add(\"Must specify files to process, found 0.\");\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java"
    }
  }
}