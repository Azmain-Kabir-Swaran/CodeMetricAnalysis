{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OperatorWrapCheck.java",
  "functionName": "getAcceptableTokens",
  "functionId": "getAcceptableTokens",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
  "functionStartLine": 240,
  "functionEndLine": 279,
  "numCommitsSeen": 77,
  "timeTaken": 1609,
  "changeHistory": [
    "dbac7fb8e605c3f29172d7f4a894b1b91e380edc",
    "bd6a0421920f5d56832b92005d37e33706e0341a",
    "05211d164a1156c7d7b17e7cf72e49903bc532ac",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "f6792356657254ae2f279a123c5fbcb1405338e2"
  ],
  "changeHistoryShort": {
    "dbac7fb8e605c3f29172d7f4a894b1b91e380edc": "Ybodychange",
    "bd6a0421920f5d56832b92005d37e33706e0341a": "Ybodychange",
    "05211d164a1156c7d7b17e7cf72e49903bc532ac": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "f6792356657254ae2f279a123c5fbcb1405338e2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dbac7fb8e605c3f29172d7f4a894b1b91e380edc": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce space after before comment text (#7388)\n",
      "commitDate": "04/02/20 1:04 AM",
      "commitName": "dbac7fb8e605c3f29172d7f4a894b1b91e380edc",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 33.35,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public int[] getAcceptableTokens() {\n         return new int[] {\n             TokenTypes.QUESTION,          // \u0027?\u0027\n             TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n             TokenTypes.EQUAL,             // \"\u003d\u003d\"\n             TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n             TokenTypes.DIV,               // \u0027/\u0027\n-            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n+            TokenTypes.PLUS,              // \u0027+\u0027 (unary plus is UNARY_PLUS)\n             TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             TokenTypes.STAR,              // \u0027*\u0027\n             TokenTypes.MOD,               // \u0027%\u0027\n             TokenTypes.SR,                // \"\u003e\u003e\"\n             TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n             TokenTypes.GE,                // \"\u003e\u003d\"\n             TokenTypes.GT,                // \"\u003e\"\n             TokenTypes.SL,                // \"\u003c\u003c\"\n             TokenTypes.LE,                // \"\u003c\u003d\"\n             TokenTypes.LT,                // \u0027\u003c\u0027\n             TokenTypes.BXOR,              // \u0027^\u0027\n             TokenTypes.BOR,               // \u0027|\u0027\n             TokenTypes.LOR,               // \"||\"\n             TokenTypes.BAND,              // \u0027\u0026\u0027\n             TokenTypes.LAND,              // \"\u0026\u0026\"\n             TokenTypes.LITERAL_INSTANCEOF,\n             TokenTypes.TYPE_EXTENSION_AND,\n             TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n             TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n             TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n-            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n+            TokenTypes.MINUS_ASSIGN,      // \"-\u003d\"\n             TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n             TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n             TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n             TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n             TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n             TokenTypes.METHOD_REF,        // \"::\"\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getAcceptableTokens() {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              // \u0027+\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.TYPE_EXTENSION_AND,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      // \"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n            TokenTypes.METHOD_REF,        // \"::\"\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "bd6a0421920f5d56832b92005d37e33706e0341a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3472: Add METHOD_REF to tokens of OperatorWrapCheck\n",
      "commitDate": "08/10/16 7:02 AM",
      "commitName": "bd6a0421920f5d56832b92005d37e33706e0341a",
      "commitAuthor": "alberto.cuda",
      "commitDateOld": "27/05/16 6:42 AM",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 134.01,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n     public int[] getAcceptableTokens() {\n         return new int[] {\n             TokenTypes.QUESTION,          // \u0027?\u0027\n             TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n             TokenTypes.EQUAL,             // \"\u003d\u003d\"\n             TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n             TokenTypes.DIV,               // \u0027/\u0027\n             TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n             TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             TokenTypes.STAR,              // \u0027*\u0027\n             TokenTypes.MOD,               // \u0027%\u0027\n             TokenTypes.SR,                // \"\u003e\u003e\"\n             TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n             TokenTypes.GE,                // \"\u003e\u003d\"\n             TokenTypes.GT,                // \"\u003e\"\n             TokenTypes.SL,                // \"\u003c\u003c\"\n             TokenTypes.LE,                // \"\u003c\u003d\"\n             TokenTypes.LT,                // \u0027\u003c\u0027\n             TokenTypes.BXOR,              // \u0027^\u0027\n             TokenTypes.BOR,               // \u0027|\u0027\n             TokenTypes.LOR,               // \"||\"\n             TokenTypes.BAND,              // \u0027\u0026\u0027\n             TokenTypes.LAND,              // \"\u0026\u0026\"\n             TokenTypes.LITERAL_INSTANCEOF,\n             TokenTypes.TYPE_EXTENSION_AND,\n             TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n             TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n             TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n             TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n             TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n             TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n             TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n             TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n             TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n+            TokenTypes.METHOD_REF,        // \"::\"\n \n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getAcceptableTokens() {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.TYPE_EXTENSION_AND,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n            TokenTypes.METHOD_REF,        // \"::\"\n\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "05211d164a1156c7d7b17e7cf72e49903bc532ac": {
      "type": "Ybodychange",
      "commitMessage": "SeparatorWrapCheck #179. Covers separators like \u0027,\u0027, \u0027.\u0027.\n",
      "commitDate": "15/07/14 7:57 PM",
      "commitName": "05211d164a1156c7d7b17e7cf72e49903bc532ac",
      "commitAuthor": "Max",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 133.4,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n     public int[] getAcceptableTokens()\n     {\n         return new int[] {\n             TokenTypes.QUESTION,          // \u0027?\u0027\n             TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n             TokenTypes.EQUAL,             // \"\u003d\u003d\"\n             TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n             TokenTypes.DIV,               // \u0027/\u0027\n             TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n             TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             TokenTypes.STAR,              // \u0027*\u0027\n             TokenTypes.MOD,               // \u0027%\u0027\n             TokenTypes.SR,                // \"\u003e\u003e\"\n             TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n             TokenTypes.GE,                // \"\u003e\u003d\"\n             TokenTypes.GT,                // \"\u003e\"\n             TokenTypes.SL,                // \"\u003c\u003c\"\n             TokenTypes.LE,                // \"\u003c\u003d\"\n             TokenTypes.LT,                // \u0027\u003c\u0027\n             TokenTypes.BXOR,              // \u0027^\u0027\n             TokenTypes.BOR,               // \u0027|\u0027\n             TokenTypes.LOR,               // \"||\"\n             TokenTypes.BAND,              // \u0027\u0026\u0027\n             TokenTypes.LAND,              // \"\u0026\u0026\"\n             TokenTypes.LITERAL_INSTANCEOF,\n+            TokenTypes.TYPE_EXTENSION_AND,\n             TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n             TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n             TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n             TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n             TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n             TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n             TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n             TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n             TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n \n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getAcceptableTokens()\n    {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.TYPE_EXTENSION_AND,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public int[] getAcceptableTokens()\n    {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java"
      }
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": "04/06/03 4:55 AM",
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 3:42 AM",
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public int[] getAcceptableTokens()\n    {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java"
      }
    },
    "f6792356657254ae2f279a123c5fbcb1405338e2": {
      "type": "Yintroduced",
      "commitMessage": "added assignment operators to acceptable tokens\n",
      "commitDate": "10/11/02 11:44 AM",
      "commitName": "f6792356657254ae2f279a123c5fbcb1405338e2",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,40 @@\n+    public int[] getAcceptableTokens()\n+    {\n+        return new int[] {\n+            TokenTypes.QUESTION,          // \u0027?\u0027\n+            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n+            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n+            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n+            TokenTypes.DIV,               // \u0027/\u0027\n+            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n+            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n+            TokenTypes.STAR,              // \u0027*\u0027\n+            TokenTypes.MOD,               // \u0027%\u0027\n+            TokenTypes.SR,                // \"\u003e\u003e\"\n+            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n+            TokenTypes.GE,                // \"\u003e\u003d\"\n+            TokenTypes.GT,                // \"\u003e\"\n+            TokenTypes.SL,                // \"\u003c\u003c\"\n+            TokenTypes.LE,                // \"\u003c\u003d\"\n+            TokenTypes.LT,                // \u0027\u003c\u0027\n+            TokenTypes.BXOR,              // \u0027^\u0027\n+            TokenTypes.BOR,               // \u0027|\u0027\n+            TokenTypes.LOR,               // \"||\"\n+            TokenTypes.BAND,              // \u0027\u0026\u0027\n+            TokenTypes.LAND,              // \"\u0026\u0026\"\n+            TokenTypes.LITERAL_INSTANCEOF,\n+            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n+            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n+            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n+            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n+            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n+            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n+            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n+            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n+            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n+            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n+            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n+            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n+\n+        };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getAcceptableTokens()\n    {\n        return new int[] {\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 (not reported for a case)\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unary plus is UNARY_PLUS)\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_INSTANCEOF,\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java"
    }
  }
}