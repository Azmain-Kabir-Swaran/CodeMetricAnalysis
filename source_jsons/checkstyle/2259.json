{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClassMemberImpliedModifierCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java",
  "functionStartLine": 165,
  "functionEndLine": 185,
  "numCommitsSeen": 5,
  "timeTaken": 491,
  "changeHistory": [
    "2df4da139a24da5ae54596f30c5315c18196b98a"
  ],
  "changeHistoryShort": {
    "2df4da139a24da5ae54596f30c5315c18196b98a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2df4da139a24da5ae54596f30c5315c18196b98a": {
      "type": "Yintroduced",
      "commitMessage": "Issue #5885: Add ClassMemberImpliedModifierCheck\n",
      "commitDate": "09/12/18 10:19 AM",
      "commitName": "2df4da139a24da5ae54596f30c5315c18196b98a",
      "commitAuthor": "Stephen Colebourne (CI)",
      "diff": "@@ -0,0 +1,21 @@\n+    public void visitToken(DetailAST ast) {\n+        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n+            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+            switch (ast.getType()) {\n+                case TokenTypes.ENUM_DEF:\n+                    if (violateImpliedStaticOnNestedEnum\n+                            \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n+                        log(ast, MSG_KEY, STATIC_KEYWORD);\n+                    }\n+                    break;\n+                case TokenTypes.INTERFACE_DEF:\n+                    if (violateImpliedStaticOnNestedInterface\n+                            \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n+                        log(ast, MSG_KEY, STATIC_KEYWORD);\n+                    }\n+                    break;\n+                default:\n+                    throw new IllegalStateException(ast.toString());\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            switch (ast.getType()) {\n                case TokenTypes.ENUM_DEF:\n                    if (violateImpliedStaticOnNestedEnum\n                            \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                        log(ast, MSG_KEY, STATIC_KEYWORD);\n                    }\n                    break;\n                case TokenTypes.INTERFACE_DEF:\n                    if (violateImpliedStaticOnNestedInterface\n                            \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                        log(ast, MSG_KEY, STATIC_KEYWORD);\n                    }\n                    break;\n                default:\n                    throw new IllegalStateException(ast.toString());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ClassMemberImpliedModifierCheck.java"
    }
  }
}