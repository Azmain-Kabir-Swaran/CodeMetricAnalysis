{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EqualsAvoidNullCheck.java",
  "functionName": "containsAllSafeTokens",
  "functionId": "containsAllSafeTokens___expr-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
  "functionStartLine": 346,
  "functionEndLine": 365,
  "numCommitsSeen": 77,
  "timeTaken": 2824,
  "changeHistory": [
    "4a702e64e74cd1d3194a9a416ebfdc48bb103277",
    "7790f3104d2770ac909c61e96ae66daba8d372ec",
    "61afa5374e2df61b421357868481edcc4e94845f",
    "0024de5711531372850e883c970414563ab8e3ad",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "79404974eff1458f4243f8acd6a08b6a8b869342"
  ],
  "changeHistoryShort": {
    "4a702e64e74cd1d3194a9a416ebfdc48bb103277": "Ybodychange",
    "7790f3104d2770ac909c61e96ae66daba8d372ec": "Ymodifierchange",
    "61afa5374e2df61b421357868481edcc4e94845f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0024de5711531372850e883c970414563ab8e3ad": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ymultichange(Yparameterchange,Ybodychange)",
    "79404974eff1458f4243f8acd6a08b6a8b869342": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a702e64e74cd1d3194a9a416ebfdc48bb103277": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: remove usages of branchContains for EqualsAvoidNullCheck\n",
      "commitDate": "02/10/19 7:23 PM",
      "commitName": "4a702e64e74cd1d3194a9a416ebfdc48bb103277",
      "commitAuthor": "pbludov",
      "commitDateOld": "22/07/19 12:00 PM",
      "commitNameOld": "bfc6adf4c43afa24a6f2c67724500a93b8527124",
      "commitAuthorOld": "Emil Bremer Orloff",
      "daysBetweenCommits": 72.31,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     private static boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n         arg \u003d skipVariableAssign(arg);\n \n         boolean argIsNotNull \u003d false;\n         if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n             DetailAST child \u003d arg.getFirstChild();\n             while (child !\u003d null\n                     \u0026\u0026 !argIsNotNull) {\n                 argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                         || child.getType() \u003d\u003d TokenTypes.IDENT;\n                 child \u003d child.getNextSibling();\n             }\n         }\n+        else {\n+            argIsNotNull \u003d arg.getType() \u003d\u003d TokenTypes.STRING_LITERAL;\n+        }\n \n-        return argIsNotNull\n-                || !arg.branchContains(TokenTypes.IDENT)\n-                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n+        return argIsNotNull;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n        arg \u003d skipVariableAssign(arg);\n\n        boolean argIsNotNull \u003d false;\n        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n            DetailAST child \u003d arg.getFirstChild();\n            while (child !\u003d null\n                    \u0026\u0026 !argIsNotNull) {\n                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n                child \u003d child.getNextSibling();\n            }\n        }\n        else {\n            argIsNotNull \u003d arg.getType() \u003d\u003d TokenTypes.STRING_LITERAL;\n        }\n\n        return argIsNotNull;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "7790f3104d2770ac909c61e96ae66daba8d372ec": {
      "type": "Ymodifierchange",
      "commitMessage": "minor: eclipse violations - methods can be static",
      "commitDate": "31/07/16 7:57 AM",
      "commitName": "7790f3104d2770ac909c61e96ae66daba8d372ec",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 177.04,
      "commitsBetweenForRepo": 430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-    private boolean containsAllSafeTokens(final DetailAST expr) {\n+    private static boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n         arg \u003d skipVariableAssign(arg);\n \n         boolean argIsNotNull \u003d false;\n         if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n             DetailAST child \u003d arg.getFirstChild();\n             while (child !\u003d null\n                     \u0026\u0026 !argIsNotNull) {\n                 argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                         || child.getType() \u003d\u003d TokenTypes.IDENT;\n                 child \u003d child.getNextSibling();\n             }\n         }\n \n         return argIsNotNull\n                 || !arg.branchContains(TokenTypes.IDENT)\n                     \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n        arg \u003d skipVariableAssign(arg);\n\n        boolean argIsNotNull \u003d false;\n        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n            DetailAST child \u003d arg.getFirstChild();\n            while (child !\u003d null\n                    \u0026\u0026 !argIsNotNull) {\n                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n                child \u003d child.getNextSibling();\n            }\n        }\n\n        return argIsNotNull\n                || !arg.branchContains(TokenTypes.IDENT)\n                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "61afa5374e2df61b421357868481edcc4e94845f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #1930: EqualsAvoidNull check should check String concatenations",
      "commitDate": "06/11/15 6:09 AM",
      "commitName": "61afa5374e2df61b421357868481edcc4e94845f",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #1930: EqualsAvoidNull check should check String concatenations",
          "commitDate": "06/11/15 6:09 AM",
          "commitName": "61afa5374e2df61b421357868481edcc4e94845f",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "31/10/15 2:52 PM",
          "commitNameOld": "a172cb76e245dfeb01e9957cfe196f26bde555d7",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 5.68,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private static boolean containsAllSafeTokens(final DetailAST expr) {\n+    private boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n-            return false;\n-        }\n         arg \u003d skipVariableAssign(arg);\n \n-        //Plus assignment can have ill affects\n-        //do not want to recommend moving expression\n-        //See example:\n-        //String s \u003d \"SweetString\";\n-        //s.equals(s +\u003d \"SweetString\"); //false\n-        //s \u003d \"SweetString\";\n-        //(s +\u003d \"SweetString\").equals(s); //true\n+        boolean argIsNotNull \u003d false;\n+        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n+            DetailAST child \u003d arg.getFirstChild();\n+            while (child !\u003d null\n+                    \u0026\u0026 !argIsNotNull) {\n+                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n+                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n+                child \u003d child.getNextSibling();\n+            }\n+        }\n \n-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n-                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT)\n-                \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n+        return argIsNotNull\n+                || !arg.branchContains(TokenTypes.IDENT)\n+                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n        arg \u003d skipVariableAssign(arg);\n\n        boolean argIsNotNull \u003d false;\n        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n            DetailAST child \u003d arg.getFirstChild();\n            while (child !\u003d null\n                    \u0026\u0026 !argIsNotNull) {\n                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n                child \u003d child.getNextSibling();\n            }\n        }\n\n        return argIsNotNull\n                || !arg.branchContains(TokenTypes.IDENT)\n                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1930: EqualsAvoidNull check should check String concatenations",
          "commitDate": "06/11/15 6:09 AM",
          "commitName": "61afa5374e2df61b421357868481edcc4e94845f",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "31/10/15 2:52 PM",
          "commitNameOld": "a172cb76e245dfeb01e9957cfe196f26bde555d7",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 5.68,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private static boolean containsAllSafeTokens(final DetailAST expr) {\n+    private boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n-            return false;\n-        }\n         arg \u003d skipVariableAssign(arg);\n \n-        //Plus assignment can have ill affects\n-        //do not want to recommend moving expression\n-        //See example:\n-        //String s \u003d \"SweetString\";\n-        //s.equals(s +\u003d \"SweetString\"); //false\n-        //s \u003d \"SweetString\";\n-        //(s +\u003d \"SweetString\").equals(s); //true\n+        boolean argIsNotNull \u003d false;\n+        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n+            DetailAST child \u003d arg.getFirstChild();\n+            while (child !\u003d null\n+                    \u0026\u0026 !argIsNotNull) {\n+                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n+                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n+                child \u003d child.getNextSibling();\n+            }\n+        }\n \n-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n-                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT)\n-                \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n+        return argIsNotNull\n+                || !arg.branchContains(TokenTypes.IDENT)\n+                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n        arg \u003d skipVariableAssign(arg);\n\n        boolean argIsNotNull \u003d false;\n        if (arg.getType() \u003d\u003d TokenTypes.PLUS) {\n            DetailAST child \u003d arg.getFirstChild();\n            while (child !\u003d null\n                    \u0026\u0026 !argIsNotNull) {\n                argIsNotNull \u003d child.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                        || child.getType() \u003d\u003d TokenTypes.IDENT;\n                child \u003d child.getNextSibling();\n            }\n        }\n\n        return argIsNotNull\n                || !arg.branchContains(TokenTypes.IDENT)\n                    \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "0024de5711531372850e883c970414563ab8e3ad": {
      "type": "Ybodychange",
      "commitMessage": "reimplement EqualsAvoidNullCheck, #1377",
      "commitDate": "28/08/15 3:41 AM",
      "commitName": "0024de5711531372850e883c970414563ab8e3ad",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "27/08/15 10:29 PM",
      "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,19 @@\n     private static boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n-\n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n-        //arg \u003d skipVariablePlusAssign(arg);\n \n-        //must be just String literals to return true\n         return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n-                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT);\n+                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT)\n+                \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n\n        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT)\n                \u0026\u0026 !arg.branchContains(TokenTypes.LITERAL_NULL);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "12/07/15 7:02 AM",
      "commitNameOld": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.62,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-    private boolean containsAllSafeTokens(final DetailAST expr) {\n+    private static boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n \n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n         //must be just String literals to return true\n         return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n                 \u0026\u0026 !arg.branchContains(TokenTypes.IDENT);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        //must be just String literals to return true\n        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a": {
      "type": "Ybodychange",
      "commitMessage": "Update Maven PMD Plugin to 3.5. #1300\n",
      "commitDate": "07/07/15 7:40 PM",
      "commitName": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "13/06/15 11:01 PM",
      "commitNameOld": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 23.86,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,21 @@\n     private boolean containsAllSafeTokens(final DetailAST expr) {\n         DetailAST arg \u003d expr.getFirstChild();\n \n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n-        if (arg.branchContains(TokenTypes.PLUS_ASSIGN)\n-                || arg.branchContains(TokenTypes.IDENT)) {\n-            return false;\n-        }\n-\n-        //must be just String literals if got here\n-        return true;\n+        //must be just String literals to return true\n+        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n+                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr) {\n        DetailAST arg \u003d expr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        //must be just String literals to return true\n        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)\n                \u0026\u0026 !arg.branchContains(TokenTypes.IDENT);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean containsAllSafeTokens(final DetailAST expr)\n     {\n         DetailAST arg \u003d expr.getFirstChild();\n \n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n-        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n-                || (arg).branchContains(TokenTypes.IDENT))\n+        if (arg.branchContains(TokenTypes.PLUS_ASSIGN)\n+                || arg.branchContains(TokenTypes.IDENT))\n         {\n             return false;\n         }\n \n         //must be just String literals if got here\n         return true;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr)\n    {\n        DetailAST arg \u003d expr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if (arg.branchContains(TokenTypes.PLUS_ASSIGN)\n                || arg.branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean containsAllSafeTokens(final DetailAST aExpr)\n+    private boolean containsAllSafeTokens(final DetailAST expr)\n     {\n-        DetailAST arg \u003d aExpr.getFirstChild();\n+        DetailAST arg \u003d expr.getFirstChild();\n \n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n         if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                 || (arg).branchContains(TokenTypes.IDENT))\n         {\n             return false;\n         }\n \n         //must be just String literals if got here\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr)\n    {\n        DetailAST arg \u003d expr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || (arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {
            "oldValue": "[aExpr-DetailAST(modifiers-final)]",
            "newValue": "[expr-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean containsAllSafeTokens(final DetailAST aExpr)\n+    private boolean containsAllSafeTokens(final DetailAST expr)\n     {\n-        DetailAST arg \u003d aExpr.getFirstChild();\n+        DetailAST arg \u003d expr.getFirstChild();\n \n         if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n         if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                 || (arg).branchContains(TokenTypes.IDENT))\n         {\n             return false;\n         }\n \n         //must be just String literals if got here\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST expr)\n    {\n        DetailAST arg \u003d expr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || (arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean containsAllSafeTokens(final DetailAST aExpr)\n    {\n        DetailAST arg \u003d aExpr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || (arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
          "commitDate": "18/09/08 4:34 AM",
          "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "06/04/08 4:48 AM",
          "commitNameOld": "79404974eff1458f4243f8acd6a08b6a8b869342",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 164.99,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean containsAllSafeTokens(final AST aExpr)\n+    private boolean containsAllSafeTokens(final DetailAST aExpr)\n     {\n-        AST arg \u003d aExpr.getFirstChild();\n+        DetailAST arg \u003d aExpr.getFirstChild();\n \n-        if (((DetailAST) arg).branchContains(TokenTypes.METHOD_CALL)) {\n+        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n-        if (((DetailAST) arg).branchContains(TokenTypes.PLUS_ASSIGN)\n-                || ((DetailAST) arg).branchContains(TokenTypes.IDENT))\n+        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n+                || (arg).branchContains(TokenTypes.IDENT))\n         {\n             return false;\n         }\n \n         //must be just String literals if got here\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST aExpr)\n    {\n        DetailAST arg \u003d aExpr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || (arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {
            "oldValue": "[aExpr-AST(modifiers-final)]",
            "newValue": "[aExpr-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
          "commitDate": "18/09/08 4:34 AM",
          "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "06/04/08 4:48 AM",
          "commitNameOld": "79404974eff1458f4243f8acd6a08b6a8b869342",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 164.99,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean containsAllSafeTokens(final AST aExpr)\n+    private boolean containsAllSafeTokens(final DetailAST aExpr)\n     {\n-        AST arg \u003d aExpr.getFirstChild();\n+        DetailAST arg \u003d aExpr.getFirstChild();\n \n-        if (((DetailAST) arg).branchContains(TokenTypes.METHOD_CALL)) {\n+        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n             return false;\n         }\n         arg \u003d skipVariableAssign(arg);\n \n         //Plus assignment can have ill affects\n         //do not want to recommend moving expression\n         //See example:\n         //String s \u003d \"SweetString\";\n         //s.equals(s +\u003d \"SweetString\"); //false\n         //s \u003d \"SweetString\";\n         //(s +\u003d \"SweetString\").equals(s); //true\n         //arg \u003d skipVariablePlusAssign(arg);\n \n-        if (((DetailAST) arg).branchContains(TokenTypes.PLUS_ASSIGN)\n-                || ((DetailAST) arg).branchContains(TokenTypes.IDENT))\n+        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n+                || (arg).branchContains(TokenTypes.IDENT))\n         {\n             return false;\n         }\n \n         //must be just String literals if got here\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean containsAllSafeTokens(final DetailAST aExpr)\n    {\n        DetailAST arg \u003d aExpr.getFirstChild();\n\n        if (arg.branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if ((arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || (arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "79404974eff1458f4243f8acd6a08b6a8b869342": {
      "type": "Yintroduced",
      "commitMessage": "Integrate patch #1895152, for Avoid Null Equals Comparison Check\n",
      "commitDate": "06/04/08 4:48 AM",
      "commitName": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,27 @@\n+    private boolean containsAllSafeTokens(final AST aExpr)\n+    {\n+        AST arg \u003d aExpr.getFirstChild();\n+\n+        if (((DetailAST) arg).branchContains(TokenTypes.METHOD_CALL)) {\n+            return false;\n+        }\n+        arg \u003d skipVariableAssign(arg);\n+\n+        //Plus assignment can have ill affects\n+        //do not want to recommend moving expression\n+        //See example:\n+        //String s \u003d \"SweetString\";\n+        //s.equals(s +\u003d \"SweetString\"); //false\n+        //s \u003d \"SweetString\";\n+        //(s +\u003d \"SweetString\").equals(s); //true\n+        //arg \u003d skipVariablePlusAssign(arg);\n+\n+        if (((DetailAST) arg).branchContains(TokenTypes.PLUS_ASSIGN)\n+                || ((DetailAST) arg).branchContains(TokenTypes.IDENT))\n+        {\n+            return false;\n+        }\n+\n+        //must be just String literals if got here\n+        return true;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean containsAllSafeTokens(final AST aExpr)\n    {\n        AST arg \u003d aExpr.getFirstChild();\n\n        if (((DetailAST) arg).branchContains(TokenTypes.METHOD_CALL)) {\n            return false;\n        }\n        arg \u003d skipVariableAssign(arg);\n\n        //Plus assignment can have ill affects\n        //do not want to recommend moving expression\n        //See example:\n        //String s \u003d \"SweetString\";\n        //s.equals(s +\u003d \"SweetString\"); //false\n        //s \u003d \"SweetString\";\n        //(s +\u003d \"SweetString\").equals(s); //true\n        //arg \u003d skipVariablePlusAssign(arg);\n\n        if (((DetailAST) arg).branchContains(TokenTypes.PLUS_ASSIGN)\n                || ((DetailAST) arg).branchContains(TokenTypes.IDENT))\n        {\n            return false;\n        }\n\n        //must be just String literals if got here\n        return true;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java"
    }
  }
}