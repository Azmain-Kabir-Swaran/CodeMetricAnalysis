{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "getClassFrameWhereViolationIsFound",
  "functionId": "getClassFrameWhereViolationIsFound___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 622,
  "functionEndLine": 665,
  "numCommitsSeen": 91,
  "timeTaken": 2096,
  "changeHistory": [
    "54b8917b3ebdc8cfddb9af30605633838bee4836",
    "6e00dae52329f8b7ea5ead5c4eaf991996fa042c",
    "db64216a19b480855058d85f489d22fface4ff13",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25"
  ],
  "changeHistoryShort": {
    "54b8917b3ebdc8cfddb9af30605633838bee4836": "Ybodychange",
    "6e00dae52329f8b7ea5ead5c4eaf991996fa042c": "Ybodychange",
    "db64216a19b480855058d85f489d22fface4ff13": "Ybodychange",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Yintroduced"
  },
  "changeHistoryDetails": {
    "54b8917b3ebdc8cfddb9af30605633838bee4836": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7306: fix RequireThis for method reference\n",
      "commitDate": "06/12/19 9:03 AM",
      "commitName": "54b8917b3ebdc8cfddb9af30605633838bee4836",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "04/11/19 5:59 AM",
      "commitNameOld": "6e00dae52329f8b7ea5ead5c4eaf991996fa042c",
      "commitAuthorOld": "Andrei Paikin",
      "daysBetweenCommits": 32.13,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n         AbstractFrame frameWhereViolationIsFound \u003d null;\n         final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n         final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n         final DetailAST prevSibling \u003d ast.getPreviousSibling();\n         if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                 \u0026\u0026 !validateOnlyOverlapping\n-                \u0026\u0026 (prevSibling \u003d\u003d null || ast.getParent().getType() !\u003d TokenTypes.DOT)\n+                \u0026\u0026 (prevSibling \u003d\u003d null || !isInExpression(ast))\n                 \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n             frameWhereViolationIsFound \u003d variableDeclarationFrame;\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n             if (isOverlappingByArgument(ast)) {\n                 if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                         \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                         \u0026\u0026 canAssignValueToClassField(ast)) {\n                     frameWhereViolationIsFound \u003d findFrame(ast, true);\n                 }\n             }\n             else if (!validateOnlyOverlapping\n                      \u0026\u0026 prevSibling \u003d\u003d null\n                      \u0026\u0026 isAssignToken(ast.getParent().getType())\n                      \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                      \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                      \u0026\u0026 canAssignValueToClassField(ast)) {\n                 frameWhereViolationIsFound \u003d findFrame(ast, true);\n             }\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                  \u0026\u0026 isOverlappingByArgument(ast)\n                  \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n             frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n                     \u0026\u0026 isOverlappingByLocalVariable(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n             frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n         return frameWhereViolationIsFound;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n        AbstractFrame frameWhereViolationIsFound \u003d null;\n        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n        final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n        final DetailAST prevSibling \u003d ast.getPreviousSibling();\n        if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                \u0026\u0026 !validateOnlyOverlapping\n                \u0026\u0026 (prevSibling \u003d\u003d null || !isInExpression(ast))\n                \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d variableDeclarationFrame;\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n            if (isOverlappingByArgument(ast)) {\n                if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                        \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                        \u0026\u0026 canAssignValueToClassField(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n            else if (!validateOnlyOverlapping\n                     \u0026\u0026 prevSibling \u003d\u003d null\n                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n            }\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                 \u0026\u0026 isOverlappingByArgument(ast)\n                 \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n                    \u0026\u0026 isOverlappingByLocalVariable(ast)\n                    \u0026\u0026 canAssignValueToClassField(ast)\n                    \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                    \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        return frameWhereViolationIsFound;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "6e00dae52329f8b7ea5ead5c4eaf991996fa042c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7066: correct RequireThis for expression cases\n",
      "commitDate": "04/11/19 5:59 AM",
      "commitName": "6e00dae52329f8b7ea5ead5c4eaf991996fa042c",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "22/07/19 12:00 PM",
      "commitNameOld": "bfc6adf4c43afa24a6f2c67724500a93b8527124",
      "commitAuthorOld": "Emil Bremer Orloff",
      "daysBetweenCommits": 104.79,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n         AbstractFrame frameWhereViolationIsFound \u003d null;\n         final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n         final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n         final DetailAST prevSibling \u003d ast.getPreviousSibling();\n         if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                 \u0026\u0026 !validateOnlyOverlapping\n-                \u0026\u0026 prevSibling \u003d\u003d null\n+                \u0026\u0026 (prevSibling \u003d\u003d null || ast.getParent().getType() !\u003d TokenTypes.DOT)\n                 \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n             frameWhereViolationIsFound \u003d variableDeclarationFrame;\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n             if (isOverlappingByArgument(ast)) {\n                 if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                         \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                         \u0026\u0026 canAssignValueToClassField(ast)) {\n                     frameWhereViolationIsFound \u003d findFrame(ast, true);\n                 }\n             }\n             else if (!validateOnlyOverlapping\n                      \u0026\u0026 prevSibling \u003d\u003d null\n                      \u0026\u0026 isAssignToken(ast.getParent().getType())\n                      \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                      \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                      \u0026\u0026 canAssignValueToClassField(ast)) {\n                 frameWhereViolationIsFound \u003d findFrame(ast, true);\n             }\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                  \u0026\u0026 isOverlappingByArgument(ast)\n                  \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n             frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n                     \u0026\u0026 isOverlappingByLocalVariable(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n             frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n         return frameWhereViolationIsFound;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n        AbstractFrame frameWhereViolationIsFound \u003d null;\n        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n        final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n        final DetailAST prevSibling \u003d ast.getPreviousSibling();\n        if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                \u0026\u0026 !validateOnlyOverlapping\n                \u0026\u0026 (prevSibling \u003d\u003d null || ast.getParent().getType() !\u003d TokenTypes.DOT)\n                \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d variableDeclarationFrame;\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n            if (isOverlappingByArgument(ast)) {\n                if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                        \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                        \u0026\u0026 canAssignValueToClassField(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n            else if (!validateOnlyOverlapping\n                     \u0026\u0026 prevSibling \u003d\u003d null\n                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n            }\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                 \u0026\u0026 isOverlappingByArgument(ast)\n                 \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n                    \u0026\u0026 isOverlappingByLocalVariable(ast)\n                    \u0026\u0026 canAssignValueToClassField(ast)\n                    \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                    \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        return frameWhereViolationIsFound;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "db64216a19b480855058d85f489d22fface4ff13": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3423: Allow local vars without any unnecessary violations from RequireThisCheck. Added UT. Fixed related UT\n",
      "commitDate": "12/04/17 6:09 PM",
      "commitName": "db64216a19b480855058d85f489d22fface4ff13",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": "05/04/17 4:59 AM",
      "commitNameOld": "d4bd21d46ceda66dee90b820d9ad487d3ed0d40e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.55,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,45 @@\n     private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n         AbstractFrame frameWhereViolationIsFound \u003d null;\n         final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n         final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n         final DetailAST prevSibling \u003d ast.getPreviousSibling();\n         if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                 \u0026\u0026 !validateOnlyOverlapping\n                 \u0026\u0026 prevSibling \u003d\u003d null\n                 \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n             frameWhereViolationIsFound \u003d variableDeclarationFrame;\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n             if (isOverlappingByArgument(ast)) {\n                 if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                         \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                         \u0026\u0026 canAssignValueToClassField(ast)) {\n                     frameWhereViolationIsFound \u003d findFrame(ast, true);\n                 }\n             }\n             else if (!validateOnlyOverlapping\n                      \u0026\u0026 prevSibling \u003d\u003d null\n                      \u0026\u0026 isAssignToken(ast.getParent().getType())\n                      \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                      \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                      \u0026\u0026 canAssignValueToClassField(ast)) {\n                 frameWhereViolationIsFound \u003d findFrame(ast, true);\n \n             }\n         }\n         else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                  \u0026\u0026 isOverlappingByArgument(ast)\n                  \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n             frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n-        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n-            if (isOverlappingByLocalVariable(ast)) {\n-                if (canAssignValueToClassField(ast)\n-                        \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n-                        \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n-                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n-                }\n-            }\n-            else if (!validateOnlyOverlapping\n-                     \u0026\u0026 prevSibling \u003d\u003d null\n-                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n-                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                     \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n-                frameWhereViolationIsFound \u003d findFrame(ast, true);\n-            }\n+        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n+                    \u0026\u0026 isOverlappingByLocalVariable(ast)\n+                    \u0026\u0026 canAssignValueToClassField(ast)\n+                    \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                    \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n+                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+            frameWhereViolationIsFound \u003d findFrame(ast, true);\n         }\n         return frameWhereViolationIsFound;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n        AbstractFrame frameWhereViolationIsFound \u003d null;\n        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n        final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n        final DetailAST prevSibling \u003d ast.getPreviousSibling();\n        if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                \u0026\u0026 !validateOnlyOverlapping\n                \u0026\u0026 prevSibling \u003d\u003d null\n                \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d variableDeclarationFrame;\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n            if (isOverlappingByArgument(ast)) {\n                if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                        \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                        \u0026\u0026 canAssignValueToClassField(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n            else if (!validateOnlyOverlapping\n                     \u0026\u0026 prevSibling \u003d\u003d null\n                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n\n            }\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                 \u0026\u0026 isOverlappingByArgument(ast)\n                 \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME\n                    \u0026\u0026 isOverlappingByLocalVariable(ast)\n                    \u0026\u0026 canAssignValueToClassField(ast)\n                    \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                    \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        return frameWhereViolationIsFound;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3335: prevented static variables being checked for RequireThis (#3355)\n\n",
      "commitDate": "25/07/16 9:51 PM",
      "commitName": "81c030e322201085e463b9cc97e3e8dbce0e38d4",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/07/16 9:56 AM",
      "commitNameOld": "0a85131b141a185ec3d7bb92df8ccbd92d38570e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 20.5,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,54 @@\n     private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n         AbstractFrame frameWhereViolationIsFound \u003d null;\n         final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n-        if (variableDeclarationFrame !\u003d null) {\n-            final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n-            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n-            if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n-                    \u0026\u0026 !validateOnlyOverlapping\n-                    \u0026\u0026 prevSibling \u003d\u003d null\n-                    \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)\n-                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n-                frameWhereViolationIsFound \u003d variableDeclarationFrame;\n-            }\n-            else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n-                if (isOverlappingByArgument(ast)) {\n-                    if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n-                            \u0026\u0026 canBeReferencedFromStaticContext(ast)\n-                            \u0026\u0026 canAssignValueToClassField(ast)) {\n-                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n-                    }\n-                }\n-                else if (!validateOnlyOverlapping\n-                         \u0026\u0026 prevSibling \u003d\u003d null\n-                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n-                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n-                         \u0026\u0026 canAssignValueToClassField(ast)) {\n+        final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n+        final DetailAST prevSibling \u003d ast.getPreviousSibling();\n+        if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n+                \u0026\u0026 !validateOnlyOverlapping\n+                \u0026\u0026 prevSibling \u003d\u003d null\n+                \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+            frameWhereViolationIsFound \u003d variableDeclarationFrame;\n+        }\n+        else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n+            if (isOverlappingByArgument(ast)) {\n+                if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n+                        \u0026\u0026 canBeReferencedFromStaticContext(ast)\n+                        \u0026\u0026 canAssignValueToClassField(ast)) {\n                     frameWhereViolationIsFound \u003d findFrame(ast, true);\n-\n                 }\n             }\n-            else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n-                     \u0026\u0026 isOverlappingByArgument(ast)\n-                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n+            else if (!validateOnlyOverlapping\n+                     \u0026\u0026 prevSibling \u003d\u003d null\n+                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n+                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                     \u0026\u0026 canBeReferencedFromStaticContext(ast)\n+                     \u0026\u0026 canAssignValueToClassField(ast)) {\n                 frameWhereViolationIsFound \u003d findFrame(ast, true);\n+\n             }\n-            else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n-                if (isOverlappingByLocalVariable(ast)) {\n-                    if (canAssignValueToClassField(ast)\n-                            \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n-                            \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n-                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n-                    }\n-                }\n-                else if (!validateOnlyOverlapping\n-                         \u0026\u0026 prevSibling \u003d\u003d null\n-                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n-                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n-                         \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+        }\n+        else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n+                 \u0026\u0026 isOverlappingByArgument(ast)\n+                 \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n+            frameWhereViolationIsFound \u003d findFrame(ast, true);\n+        }\n+        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n+            if (isOverlappingByLocalVariable(ast)) {\n+                if (canAssignValueToClassField(ast)\n+                        \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n+                        \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                     frameWhereViolationIsFound \u003d findFrame(ast, true);\n                 }\n             }\n+            else if (!validateOnlyOverlapping\n+                     \u0026\u0026 prevSibling \u003d\u003d null\n+                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n+                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                     \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+                frameWhereViolationIsFound \u003d findFrame(ast, true);\n+            }\n         }\n         return frameWhereViolationIsFound;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n        AbstractFrame frameWhereViolationIsFound \u003d null;\n        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n        final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n        final DetailAST prevSibling \u003d ast.getPreviousSibling();\n        if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                \u0026\u0026 !validateOnlyOverlapping\n                \u0026\u0026 prevSibling \u003d\u003d null\n                \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n            frameWhereViolationIsFound \u003d variableDeclarationFrame;\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n            if (isOverlappingByArgument(ast)) {\n                if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                        \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                        \u0026\u0026 canAssignValueToClassField(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n            else if (!validateOnlyOverlapping\n                     \u0026\u0026 prevSibling \u003d\u003d null\n                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                     \u0026\u0026 canAssignValueToClassField(ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n\n            }\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                 \u0026\u0026 isOverlappingByArgument(ast)\n                 \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n            frameWhereViolationIsFound \u003d findFrame(ast, true);\n        }\n        else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n            if (isOverlappingByLocalVariable(ast)) {\n                if (canAssignValueToClassField(ast)\n                        \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                        \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                        \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n            else if (!validateOnlyOverlapping\n                     \u0026\u0026 prevSibling \u003d\u003d null\n                     \u0026\u0026 isAssignToken(ast.getParent().getType())\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                     \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n            }\n        }\n        return frameWhereViolationIsFound;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": "04/03/16 6:34 AM",
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,57 @@\n+    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n+        AbstractFrame frameWhereViolationIsFound \u003d null;\n+        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n+        if (variableDeclarationFrame !\u003d null) {\n+            final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n+            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n+            if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n+                    \u0026\u0026 !validateOnlyOverlapping\n+                    \u0026\u0026 prevSibling \u003d\u003d null\n+                    \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)\n+                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+                frameWhereViolationIsFound \u003d variableDeclarationFrame;\n+            }\n+            else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n+                if (isOverlappingByArgument(ast)) {\n+                    if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n+                            \u0026\u0026 canBeReferencedFromStaticContext(ast)\n+                            \u0026\u0026 canAssignValueToClassField(ast)) {\n+                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n+                    }\n+                }\n+                else if (!validateOnlyOverlapping\n+                         \u0026\u0026 prevSibling \u003d\u003d null\n+                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n+                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n+                         \u0026\u0026 canAssignValueToClassField(ast)) {\n+                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n+\n+                }\n+            }\n+            else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n+                     \u0026\u0026 isOverlappingByArgument(ast)\n+                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n+                frameWhereViolationIsFound \u003d findFrame(ast, true);\n+            }\n+            else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n+                if (isOverlappingByLocalVariable(ast)) {\n+                    if (canAssignValueToClassField(ast)\n+                            \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n+                            \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n+                    }\n+                }\n+                else if (!validateOnlyOverlapping\n+                         \u0026\u0026 prevSibling \u003d\u003d null\n+                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n+                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n+                         \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n+                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n+                }\n+            }\n+        }\n+        return frameWhereViolationIsFound;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getClassFrameWhereViolationIsFound(DetailAST ast) {\n        AbstractFrame frameWhereViolationIsFound \u003d null;\n        final AbstractFrame variableDeclarationFrame \u003d findFrame(ast, false);\n        if (variableDeclarationFrame !\u003d null) {\n            final FrameType variableDeclarationFrameType \u003d variableDeclarationFrame.getType();\n            final DetailAST prevSibling \u003d ast.getPreviousSibling();\n            if (variableDeclarationFrameType \u003d\u003d FrameType.CLASS_FRAME\n                    \u0026\u0026 !validateOnlyOverlapping\n                    \u0026\u0026 prevSibling \u003d\u003d null\n                    \u0026\u0026 !ScopeUtils.isInInterfaceBlock(ast)\n                    \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                frameWhereViolationIsFound \u003d variableDeclarationFrame;\n            }\n            else if (variableDeclarationFrameType \u003d\u003d FrameType.METHOD_FRAME) {\n                if (isOverlappingByArgument(ast)) {\n                    if (!isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                            \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                            \u0026\u0026 canAssignValueToClassField(ast)) {\n                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n                    }\n                }\n                else if (!validateOnlyOverlapping\n                         \u0026\u0026 prevSibling \u003d\u003d null\n                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                         \u0026\u0026 canBeReferencedFromStaticContext(ast)\n                         \u0026\u0026 canAssignValueToClassField(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n\n                }\n            }\n            else if (variableDeclarationFrameType \u003d\u003d FrameType.CTOR_FRAME\n                     \u0026\u0026 isOverlappingByArgument(ast)\n                     \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)) {\n                frameWhereViolationIsFound \u003d findFrame(ast, true);\n            }\n            else if (variableDeclarationFrameType \u003d\u003d FrameType.BLOCK_FRAME) {\n                if (isOverlappingByLocalVariable(ast)) {\n                    if (canAssignValueToClassField(ast)\n                            \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                            \u0026\u0026 !isReturnedVariable(variableDeclarationFrame, ast)\n                            \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                        frameWhereViolationIsFound \u003d findFrame(ast, true);\n                    }\n                }\n                else if (!validateOnlyOverlapping\n                         \u0026\u0026 prevSibling \u003d\u003d null\n                         \u0026\u0026 isAssignToken(ast.getParent().getType())\n                         \u0026\u0026 !isUserDefinedArrangementOfThis(variableDeclarationFrame, ast)\n                         \u0026\u0026 canBeReferencedFromStaticContext(ast)) {\n                    frameWhereViolationIsFound \u003d findFrame(ast, true);\n                }\n            }\n        }\n        return frameWhereViolationIsFound;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}