{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocTypeCheck.java",
  "functionName": "checkTag",
  "functionId": "checkTag___ast-DetailAST__tags-List__JavadocTag____tagName-String__formatPattern-Pattern",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
  "functionStartLine": 407,
  "functionEndLine": 425,
  "numCommitsSeen": 288,
  "timeTaken": 4426,
  "changeHistory": [
    "5338fe396102dd4bf669c220531e31ec5ffeb789",
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "c18071b7561b99767e871be9d4d7711eb15b76f1",
    "e27489c7721909245ea5055eac3b9c7c659081f6",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
    "661274b68096ccd5876abb8eacf7c8d42a939a0b"
  ],
  "changeHistoryShort": {
    "5338fe396102dd4bf669c220531e31ec5ffeb789": "Ymultichange(Yparameterchange,Ybodychange)",
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": "Ybodychange",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": "Ymultichange(Yparameterchange,Ybodychange)",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yparameterchange,Ybodychange)",
    "c18071b7561b99767e871be9d4d7711eb15b76f1": "Yparameterchange",
    "e27489c7721909245ea5055eac3b9c7c659081f6": "Ymultichange(Yparameterchange,Ybodychange)",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": "Ymultichange(Yparameterchange,Ybodychange)",
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc": "Yfilerename",
    "661274b68096ccd5876abb8eacf7c8d42a939a0b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5338fe396102dd4bf669c220531e31ec5ffeb789": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #7741: Update AbstractChecks to log DetailAST - JavadocType\n",
      "commitDate": "18/04/20 7:53 AM",
      "commitName": "5338fe396102dd4bf669c220531e31ec5ffeb789",
      "commitAuthor": "wltan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #7741: Update AbstractChecks to log DetailAST - JavadocType\n",
          "commitDate": "18/04/20 7:53 AM",
          "commitName": "5338fe396102dd4bf669c220531e31ec5ffeb789",
          "commitAuthor": "wltan",
          "commitDateOld": "16/04/20 6:39 AM",
          "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
          "commitAuthorOld": "Joseph Mate",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n+    private void checkTag(DetailAST ast, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern) {\n         if (formatPattern !\u003d null) {\n             boolean hasTag \u003d false;\n             final String tagPrefix \u003d \"@\";\n             for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                 final JavadocTag tag \u003d tags.get(i);\n                 if (tag.getTagName().equals(tagName)) {\n                     hasTag \u003d true;\n                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n+                        log(ast, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                     }\n                 }\n             }\n             if (!hasTag) {\n-                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n+                log(ast, MSG_MISSING_TAG, tagPrefix + tagName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(DetailAST ast, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern) {\n        if (formatPattern !\u003d null) {\n            boolean hasTag \u003d false;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    hasTag \u003d true;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(ast, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                    }\n                }\n            }\n            if (!hasTag) {\n                log(ast, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[lineNo-int, tags-List\u003cJavadocTag\u003e, tagName-String, formatPattern-Pattern]",
            "newValue": "[ast-DetailAST, tags-List\u003cJavadocTag\u003e, tagName-String, formatPattern-Pattern]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #7741: Update AbstractChecks to log DetailAST - JavadocType\n",
          "commitDate": "18/04/20 7:53 AM",
          "commitName": "5338fe396102dd4bf669c220531e31ec5ffeb789",
          "commitAuthor": "wltan",
          "commitDateOld": "16/04/20 6:39 AM",
          "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
          "commitAuthorOld": "Joseph Mate",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n+    private void checkTag(DetailAST ast, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern) {\n         if (formatPattern !\u003d null) {\n             boolean hasTag \u003d false;\n             final String tagPrefix \u003d \"@\";\n             for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                 final JavadocTag tag \u003d tags.get(i);\n                 if (tag.getTagName().equals(tagName)) {\n                     hasTag \u003d true;\n                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n+                        log(ast, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                     }\n                 }\n             }\n             if (!hasTag) {\n-                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n+                log(ast, MSG_MISSING_TAG, tagPrefix + tagName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(DetailAST ast, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern) {\n        if (formatPattern !\u003d null) {\n            boolean hasTag \u003d false;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    hasTag \u003d true;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(ast, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                    }\n                }\n            }\n            if (!hasTag) {\n                log(ast, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6295: changed code to remove javadoc profile mutations",
      "commitDate": "27/12/18 5:47 PM",
      "commitName": "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
      "commitAuthor": "rnveach",
      "commitDateOld": "13/11/18 9:09 PM",
      "commitNameOld": "20e7c597f4ddfdbd8b1025f909d354b9ddfcf3bb",
      "commitAuthorOld": "Nikolaos Georgiou",
      "daysBetweenCommits": 43.86,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern) {\n         if (formatPattern !\u003d null) {\n-            int tagCount \u003d 0;\n+            boolean hasTag \u003d false;\n             final String tagPrefix \u003d \"@\";\n             for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                 final JavadocTag tag \u003d tags.get(i);\n                 if (tag.getTagName().equals(tagName)) {\n-                    tagCount++;\n+                    hasTag \u003d true;\n                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                         log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                     }\n                 }\n             }\n-            if (tagCount \u003d\u003d 0) {\n+            if (!hasTag) {\n                 log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern) {\n        if (formatPattern !\u003d null) {\n            boolean hasTag \u003d false;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    hasTag \u003d true;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                    }\n                }\n            }\n            if (!hasTag) {\n                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
      "commitDate": "10/11/16 10:34 AM",
      "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
          "commitDate": "10/11/16 10:34 AM",
          "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
          "commitAuthor": "rnveach",
          "commitDateOld": "09/11/16 4:34 AM",
          "commitNameOld": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n-                          Pattern formatPattern, String format) {\n+                          Pattern formatPattern) {\n         if (formatPattern !\u003d null) {\n             int tagCount \u003d 0;\n             final String tagPrefix \u003d \"@\";\n             for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                 final JavadocTag tag \u003d tags.get(i);\n                 if (tag.getTagName().equals(tagName)) {\n                     tagCount++;\n                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n+                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                     }\n                 }\n             }\n             if (tagCount \u003d\u003d 0) {\n                 log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern) {\n        if (formatPattern !\u003d null) {\n            int tagCount \u003d 0;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    tagCount++;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                    }\n                }\n            }\n            if (tagCount \u003d\u003d 0) {\n                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[lineNo-int, tags-List\u003cJavadocTag\u003e, tagName-String, formatPattern-Pattern, format-String]",
            "newValue": "[lineNo-int, tags-List\u003cJavadocTag\u003e, tagName-String, formatPattern-Pattern]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
          "commitDate": "10/11/16 10:34 AM",
          "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
          "commitAuthor": "rnveach",
          "commitDateOld": "09/11/16 4:34 AM",
          "commitNameOld": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n-                          Pattern formatPattern, String format) {\n+                          Pattern formatPattern) {\n         if (formatPattern !\u003d null) {\n             int tagCount \u003d 0;\n             final String tagPrefix \u003d \"@\";\n             for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                 final JavadocTag tag \u003d tags.get(i);\n                 if (tag.getTagName().equals(tagName)) {\n                     tagCount++;\n                     if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n+                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                     }\n                 }\n             }\n             if (tagCount \u003d\u003d 0) {\n                 log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern) {\n        if (formatPattern !\u003d null) {\n            int tagCount \u003d 0;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    tagCount++;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, formatPattern.pattern());\n                    }\n                }\n            }\n            if (tagCount \u003d\u003d 0) {\n                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,19 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern, String format) {\n-        if (formatPattern \u003d\u003d null) {\n-            return;\n-        }\n-\n-        int tagCount \u003d 0;\n-        final String tagPrefix \u003d \"@\";\n-        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d tags.get(i);\n-            if (tag.getTagName().equals(tagName)) {\n-                tagCount++;\n-                if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                    log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n+        if (formatPattern !\u003d null) {\n+            int tagCount \u003d 0;\n+            final String tagPrefix \u003d \"@\";\n+            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n+                final JavadocTag tag \u003d tags.get(i);\n+                if (tag.getTagName().equals(tagName)) {\n+                    tagCount++;\n+                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n+                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n+                    }\n                 }\n             }\n-        }\n-        if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n+            if (tagCount \u003d\u003d 0) {\n+                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format) {\n        if (formatPattern !\u003d null) {\n            int tagCount \u003d 0;\n            final String tagPrefix \u003d \"@\";\n            for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n                final JavadocTag tag \u003d tags.get(i);\n                if (tag.getTagName().equals(tagName)) {\n                    tagCount++;\n                    if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                        log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n                    }\n                }\n            }\n            if (tagCount \u003d\u003d 0) {\n                log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern, String format) {\n         if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         final String tagPrefix \u003d \"@\";\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n                 if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                    log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);\n+                    log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tagPrefix + tagName);\n+            log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format) {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        final String tagPrefix \u003d \"@\";\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                    log(lineNo, MSG_TAG_FORMAT, tagPrefix + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MSG_MISSING_TAG, tagPrefix + tagName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": "25/08/15 4:00 PM",
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.82,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern, String format) {\n         if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n+        final String tagPrefix \u003d \"@\";\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n                 if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n-                    log(lineNo, TAG_FORMAT, \"@\" + tagName, format);\n+                    log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, \"@\" + tagName);\n+            log(lineNo, MISSING_TAG, tagPrefix + tagName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format) {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        final String tagPrefix \u003d \"@\";\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                    log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tagPrefix + tagName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": "14/08/15 7:00 AM",
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern, String format) {\n         if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n-                if (!formatPattern.matcher(tag.getArg1()).find()) {\n+                if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                     log(lineNo, TAG_FORMAT, \"@\" + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, \"@\" + tagName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format) {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getFirstArg()).find()) {\n                    log(lineNo, TAG_FORMAT, \"@\" + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, \"@\" + tagName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                           Pattern formatPattern, String format)\n     {\n         if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n                 if (!formatPattern.matcher(tag.getArg1()).find()) {\n-                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);\n+                    log(lineNo, TAG_FORMAT, \"@\" + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, \"type.missingTag\", \"@\" + tagName);\n+            log(lineNo, MISSING_TAG, \"@\" + tagName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format)\n    {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getArg1()).find()) {\n                    log(lineNo, TAG_FORMAT, \"@\" + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, \"@\" + tagName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n-                          Pattern aFormatPattern, String aFormat)\n+    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n+                          Pattern formatPattern, String format)\n     {\n-        if (aFormatPattern \u003d\u003d null) {\n+        if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d aTags.get(i);\n-            if (tag.getTagName().equals(aTag)) {\n+        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d tags.get(i);\n+            if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n-                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n-                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n+                if (!formatPattern.matcher(tag.getArg1()).find()) {\n+                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n+            log(lineNo, \"type.missingTag\", \"@\" + tagName);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format)\n    {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getArg1()).find()) {\n                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, \"type.missingTag\", \"@\" + tagName);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aTags-List\u003cJavadocTag\u003e, aTag-String, aFormatPattern-Pattern, aFormat-String]",
            "newValue": "[lineNo-int, tags-List\u003cJavadocTag\u003e, tagName-String, formatPattern-Pattern, format-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n-                          Pattern aFormatPattern, String aFormat)\n+    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n+                          Pattern formatPattern, String format)\n     {\n-        if (aFormatPattern \u003d\u003d null) {\n+        if (formatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d aTags.get(i);\n-            if (tag.getTagName().equals(aTag)) {\n+        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d tags.get(i);\n+            if (tag.getTagName().equals(tagName)) {\n                 tagCount++;\n-                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n-                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n+                if (!formatPattern.matcher(tag.getArg1()).find()) {\n+                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n+            log(lineNo, \"type.missingTag\", \"@\" + tagName);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, List\u003cJavadocTag\u003e tags, String tagName,\n                          Pattern formatPattern, String format)\n    {\n        if (formatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.getTagName().equals(tagName)) {\n                tagCount++;\n                if (!formatPattern.matcher(tag.getArg1()).find()) {\n                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, \"type.missingTag\", \"@\" + tagName);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTagName().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
      }
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                           Pattern aFormatPattern, String aFormat)\n     {\n         if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d aTags.get(i);\n-            if (tag.getTag().equals(aTag)) {\n+            if (tag.getTagName().equals(aTag)) {\n                 tagCount++;\n                 if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTagName().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/12/07 3:31 PM",
          "commitNameOld": "c18071b7561b99767e871be9d4d7711eb15b76f1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 1.22,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private void checkTag(int aLineNo, List aTags, String aTag,\n+    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                           Pattern aFormatPattern, String aFormat)\n     {\n         if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            final JavadocTag tag \u003d aTags.get(i);\n             if (tag.getTag().equals(aTag)) {\n                 tagCount++;\n                 if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aTags-List, aTag-String, aFormatPattern-Pattern, aFormat-String]",
            "newValue": "[aLineNo-int, aTags-List\u003cJavadocTag\u003e, aTag-String, aFormatPattern-Pattern, aFormat-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/12/07 3:31 PM",
          "commitNameOld": "c18071b7561b99767e871be9d4d7711eb15b76f1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 1.22,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private void checkTag(int aLineNo, List aTags, String aTag,\n+    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                           Pattern aFormatPattern, String aFormat)\n     {\n         if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            final JavadocTag tag \u003d aTags.get(i);\n             if (tag.getTag().equals(aTag)) {\n                 tagCount++;\n                 if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, List\u003cJavadocTag\u003e aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "c18071b7561b99767e871be9d4d7711eb15b76f1": {
      "type": "Yparameterchange",
      "commitMessage": "repeat changes made in CVS.\n",
      "commitDate": "13/12/07 3:31 PM",
      "commitName": "c18071b7561b99767e871be9d4d7711eb15b76f1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 320.36,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-    private void checkTag(int aLineNo, Vector aTags, String aTag,\n+    private void checkTag(int aLineNo, List aTags, String aTag,\n                           Pattern aFormatPattern, String aFormat)\n     {\n         if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(aTag)) {\n                 tagCount++;\n                 if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int aLineNo, List aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldValue": "[aLineNo-int, aTags-Vector, aTag-String, aFormatPattern-Pattern, aFormat-String]",
        "newValue": "[aLineNo-int, aTags-List, aTag-String, aFormatPattern-Pattern, aFormat-String]"
      }
    },
    "e27489c7721909245ea5055eac3b9c7c659081f6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
      "commitDate": "11/05/05 9:48 AM",
      "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "11/05/05 9:48 AM",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "21/03/05 5:10 AM",
          "commitNameOld": "df91057c1ead21b974824440a3363efb346e660f",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 51.15,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n     private void checkTag(int aLineNo, Vector aTags, String aTag,\n-                          RE aFormatRE, String aFormat)\n+                          Pattern aFormatPattern, String aFormat)\n     {\n-        if (aFormatRE \u003d\u003d null) {\n+        if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(aTag)) {\n                 tagCount++;\n-                if (!aFormatRE.match(tag.getArg1())) {\n+                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, Vector aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aTags-Vector, aTag-String, aFormatRE-RE, aFormat-String]",
            "newValue": "[aLineNo-int, aTags-Vector, aTag-String, aFormatPattern-Pattern, aFormat-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
          "commitDate": "11/05/05 9:48 AM",
          "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "21/03/05 5:10 AM",
          "commitNameOld": "df91057c1ead21b974824440a3363efb346e660f",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 51.15,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n     private void checkTag(int aLineNo, Vector aTags, String aTag,\n-                          RE aFormatRE, String aFormat)\n+                          Pattern aFormatPattern, String aFormat)\n     {\n-        if (aFormatRE \u003d\u003d null) {\n+        if (aFormatPattern \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(aTag)) {\n                 tagCount++;\n-                if (!aFormatRE.match(tag.getArg1())) {\n+                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                     log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, Vector aTags, String aTag,\n                          Pattern aFormatPattern, String aFormat)\n    {\n        if (aFormatPattern \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatPattern.matcher(tag.getArg1()).find()) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Some improvements for JavadocType check.\n",
      "commitDate": "08/03/04 10:22 AM",
      "commitName": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Some improvements for JavadocType check.\n",
          "commitDate": "08/03/04 10:22 AM",
          "commitName": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "14/01/04 1:10 PM",
          "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 53.88,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,21 @@\n-    private void checkTag(\n-            int aLineNo,\n-            String[] aCmt,\n-            String aTag,\n-            RE aTagRE,\n-            RE aFormatRE,\n-            String aFormat)\n+    private void checkTag(int aLineNo, Vector aTags, String aTag,\n+                          RE aFormatRE, String aFormat)\n     {\n-        if (aTagRE \u003d\u003d null) {\n+        if (aFormatRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n-            final String s \u003d aCmt[i];\n-            if (aTagRE.match(s)) {\n-                tagCount +\u003d 1;\n-                final int contentStart \u003d aTagRE.getParenStart(1);\n-                final String content \u003d s.substring(contentStart);\n-                if (!aFormatRE.match(content)) {\n-                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);\n+        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            if (tag.getTag().equals(aTag)) {\n+                tagCount++;\n+                if (!aFormatRE.match(tag.getArg1())) {\n+                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n-\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", aTag);\n+            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n-\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, Vector aTags, String aTag,\n                          RE aFormatRE, String aFormat)\n    {\n        if (aFormatRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatRE.match(tag.getArg1())) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aCmt-String[], aTag-String, aTagRE-RE, aFormatRE-RE, aFormat-String]",
            "newValue": "[aLineNo-int, aTags-Vector, aTag-String, aFormatRE-RE, aFormat-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Some improvements for JavadocType check.\n",
          "commitDate": "08/03/04 10:22 AM",
          "commitName": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "14/01/04 1:10 PM",
          "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 53.88,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,21 @@\n-    private void checkTag(\n-            int aLineNo,\n-            String[] aCmt,\n-            String aTag,\n-            RE aTagRE,\n-            RE aFormatRE,\n-            String aFormat)\n+    private void checkTag(int aLineNo, Vector aTags, String aTag,\n+                          RE aFormatRE, String aFormat)\n     {\n-        if (aTagRE \u003d\u003d null) {\n+        if (aFormatRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n-            final String s \u003d aCmt[i];\n-            if (aTagRE.match(s)) {\n-                tagCount +\u003d 1;\n-                final int contentStart \u003d aTagRE.getParenStart(1);\n-                final String content \u003d s.substring(contentStart);\n-                if (!aFormatRE.match(content)) {\n-                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);\n+        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            if (tag.getTag().equals(aTag)) {\n+                tagCount++;\n+                if (!aFormatRE.match(tag.getArg1())) {\n+                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                 }\n-\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", aTag);\n+            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n         }\n-\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int aLineNo, Vector aTags, String aTag,\n                          RE aFormatRE, String aFormat)\n    {\n        if (aFormatRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(aTag)) {\n                tagCount++;\n                if (!aFormatRE.match(tag.getArg1())) {\n                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", \"@\" + aTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc": {
      "type": "Yfilerename",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": "03/06/03 6:33 AM",
      "commitName": "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/03 6:24 AM",
      "commitNameOld": "7f0e2b8f92ef375f2de3f59b9464746a0113b126",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aCmt,\n            String aTag,\n            RE aTagRE,\n            RE aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n            final String s \u003d aCmt[i];\n            if (aTagRE.match(s)) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d aTagRE.getParenStart(1);\n                final String content \u003d s.substring(contentStart);\n                if (!aFormatRE.match(content)) {\n                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
      }
    },
    "661274b68096ccd5876abb8eacf7c8d42a939a0b": {
      "type": "Yintroduced",
      "commitMessage": "improved error messages for JavadocTypeCheck\n",
      "commitDate": "23/12/02 7:58 AM",
      "commitName": "661274b68096ccd5876abb8eacf7c8d42a939a0b",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,27 @@\n+    private void checkTag(\n+            int aLineNo, String[] aCmt,\n+            String aTag, RE aTagRE, RE aFormatRE, String aFormat)\n+    {\n+        if (aTagRE \u003d\u003d null) {\n+            return;\n+        }\n+\n+        int tagCount \u003d 0;\n+        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n+            final String s \u003d aCmt[i];\n+            if (aTagRE.match(s)) {\n+                tagCount +\u003d 1;\n+                final int contentStart \u003d aTagRE.getParenStart(1);\n+                final String content \u003d s.substring(contentStart);\n+                if (!aFormatRE.match(content))\n+                {\n+                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);\n+                }\n+\n+            }\n+        }\n+        if (tagCount \u003d\u003d 0) {\n+            log(aLineNo, \"type.missingTag\", aTag);\n+        }\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int aLineNo, String[] aCmt,\n            String aTag, RE aTagRE, RE aFormatRE, String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n            final String s \u003d aCmt[i];\n            if (aTagRE.match(s)) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d aTagRE.getParenStart(1);\n                final String content \u003d s.substring(contentStart);\n                if (!aFormatRE.match(content))\n                {\n                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java"
    }
  }
}