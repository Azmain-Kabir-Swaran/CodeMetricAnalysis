{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IllegalTypeCheck.java",
  "functionName": "checkBaseTypes",
  "functionId": "checkBaseTypes___clause-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java",
  "functionStartLine": 593,
  "functionEndLine": 604,
  "numCommitsSeen": 76,
  "timeTaken": 623,
  "changeHistory": [
    "22fab018ad719cf35a58ab99d0daddfb8d29da7b"
  ],
  "changeHistoryShort": {
    "22fab018ad719cf35a58ab99d0daddfb8d29da7b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "22fab018ad719cf35a58ab99d0daddfb8d29da7b": {
      "type": "Yintroduced",
      "commitMessage": "Issue #6118: IllegalType should check extends \u0026 implements\n",
      "commitDate": "23/10/18 1:37 PM",
      "commitName": "22fab018ad719cf35a58ab99d0daddfb8d29da7b",
      "commitAuthor": "Pavel Bludov",
      "diff": "@@ -0,0 +1,12 @@\n+    private void checkBaseTypes(DetailAST clause) {\n+        DetailAST child \u003d clause.getFirstChild();\n+        while (child !\u003d null) {\n+            if (child.getType() \u003d\u003d TokenTypes.IDENT) {\n+                checkIdent(child);\n+            }\n+            else if (child.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS) {\n+                TokenUtil.forEachChild(child, TokenTypes.TYPE_ARGUMENT, this::checkType);\n+            }\n+            child \u003d child.getNextSibling();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkBaseTypes(DetailAST clause) {\n        DetailAST child \u003d clause.getFirstChild();\n        while (child !\u003d null) {\n            if (child.getType() \u003d\u003d TokenTypes.IDENT) {\n                checkIdent(child);\n            }\n            else if (child.getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS) {\n                TokenUtil.forEachChild(child, TokenTypes.TYPE_ARGUMENT, this::checkType);\n            }\n            child \u003d child.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java"
    }
  }
}