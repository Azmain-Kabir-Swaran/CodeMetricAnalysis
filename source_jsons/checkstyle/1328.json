{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SuppressWarningsHolder.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
  "functionStartLine": 287,
  "functionEndLine": 325,
  "numCommitsSeen": 95,
  "timeTaken": 3377,
  "changeHistory": [
    "225a58e2a094f430a1c532bda931839271f7975d",
    "1d152188dcae6b1cd4fe5a414bff576b51f69c06",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "423ed9e469db620671459827b58c89025d8f6c66",
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
    "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5",
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3",
    "242028813d3d993bbb8a61af6c4f214705c4d7da",
    "5844ab2d3460cdb94e16158e9fefb69344577950",
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a",
    "7b74f65b1048400bd37b2e897811e1591929da0a",
    "bc9eae330a4fc5c37eb368c85753ae11f2f2c322",
    "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "aa829d408fe23bf21a948971a4cad61b36caea94",
    "238bacaf90133590ea029a4ac4e2b27d97eb7bc3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a"
  ],
  "changeHistoryShort": {
    "225a58e2a094f430a1c532bda931839271f7975d": "Ybodychange",
    "1d152188dcae6b1cd4fe5a414bff576b51f69c06": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "423ed9e469db620671459827b58c89025d8f6c66": "Ybodychange",
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": "Ybodychange",
    "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5": "Ybodychange",
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3": "Ybodychange",
    "242028813d3d993bbb8a61af6c4f214705c4d7da": "Ybodychange",
    "5844ab2d3460cdb94e16158e9fefb69344577950": "Ybodychange",
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a": "Ybodychange",
    "7b74f65b1048400bd37b2e897811e1591929da0a": "Ybodychange",
    "bc9eae330a4fc5c37eb368c85753ae11f2f2c322": "Ybodychange",
    "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "aa829d408fe23bf21a948971a4cad61b36caea94": "Ybodychange",
    "238bacaf90133590ea029a4ac4e2b27d97eb7bc3": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "225a58e2a094f430a1c532bda931839271f7975d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7848: SuppressWarningsHolder should not report violations\n",
      "commitDate": "19/04/20 9:01 AM",
      "commitName": "225a58e2a094f430a1c532bda931839271f7975d",
      "commitAuthor": "AmrDeveloper",
      "commitDateOld": "16/04/20 6:39 AM",
      "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
      "commitAuthorOld": "Joseph Mate",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,39 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (!isAnnotationEmpty(values)) {\n                 final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n-                if (targetAST \u003d\u003d null) {\n-                    log(ast, MSG_KEY);\n+                // get text range of target\n+                final int firstLine \u003d targetAST.getLineNo();\n+                final int firstColumn \u003d targetAST.getColumnNo();\n+                final DetailAST nextAST \u003d targetAST.getNextSibling();\n+                final int lastLine;\n+                final int lastColumn;\n+                if (nextAST \u003d\u003d null) {\n+                    lastLine \u003d Integer.MAX_VALUE;\n+                    lastColumn \u003d Integer.MAX_VALUE;\n                 }\n                 else {\n-                    // get text range of target\n-                    final int firstLine \u003d targetAST.getLineNo();\n-                    final int firstColumn \u003d targetAST.getColumnNo();\n-                    final DetailAST nextAST \u003d targetAST.getNextSibling();\n-                    final int lastLine;\n-                    final int lastColumn;\n-                    if (nextAST \u003d\u003d null) {\n-                        lastLine \u003d Integer.MAX_VALUE;\n-                        lastColumn \u003d Integer.MAX_VALUE;\n-                    }\n-                    else {\n-                        lastLine \u003d nextAST.getLineNo();\n-                        lastColumn \u003d nextAST.getColumnNo() - 1;\n-                    }\n+                    lastLine \u003d nextAST.getLineNo();\n+                    lastColumn \u003d nextAST.getColumnNo() - 1;\n+                }\n \n-                    // add suppression entries for listed checks\n-                    final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n-                    for (String value : values) {\n-                        String checkName \u003d value;\n-                        // strip off the checkstyle-only prefix if present\n-                        checkName \u003d removeCheckstylePrefixIfExists(checkName);\n-                        entries.add(new Entry(checkName, firstLine, firstColumn,\n-                                lastLine, lastColumn));\n-                    }\n+                // add suppression entries for listed checks\n+                final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n+                for (String value : values) {\n+                    String checkName \u003d value;\n+                    // strip off the checkstyle-only prefix if present\n+                    checkName \u003d removeCheckstylePrefixIfExists(checkName);\n+                    entries.add(new Entry(checkName, firstLine, firstColumn,\n+                            lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (!isAnnotationEmpty(values)) {\n                final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n                // get text range of target\n                final int firstLine \u003d targetAST.getLineNo();\n                final int firstColumn \u003d targetAST.getColumnNo();\n                final DetailAST nextAST \u003d targetAST.getNextSibling();\n                final int lastLine;\n                final int lastColumn;\n                if (nextAST \u003d\u003d null) {\n                    lastLine \u003d Integer.MAX_VALUE;\n                    lastColumn \u003d Integer.MAX_VALUE;\n                }\n                else {\n                    lastLine \u003d nextAST.getLineNo();\n                    lastColumn \u003d nextAST.getColumnNo() - 1;\n                }\n\n                // add suppression entries for listed checks\n                final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n                for (String value : values) {\n                    String checkName \u003d value;\n                    // strip off the checkstyle-only prefix if present\n                    checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                    entries.add(new Entry(checkName, firstLine, firstColumn,\n                            lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "1d152188dcae6b1cd4fe5a414bff576b51f69c06": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7761: Update AbstractChecks to log DetailAST - SuppressWarningsHolder\n",
      "commitDate": "14/03/20 4:37 AM",
      "commitName": "1d152188dcae6b1cd4fe5a414bff576b51f69c06",
      "commitAuthor": "Wilfried Bounsi",
      "commitDateOld": "11/03/20 6:40 AM",
      "commitNameOld": "e6ca1a022622944282cf880839781955c0a60b47",
      "commitAuthorOld": "AmrDeveloper",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (!isAnnotationEmpty(values)) {\n                 final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n                 if (targetAST \u003d\u003d null) {\n-                    log(ast.getLineNo(), MSG_KEY);\n+                    log(ast, MSG_KEY);\n                 }\n                 else {\n                     // get text range of target\n                     final int firstLine \u003d targetAST.getLineNo();\n                     final int firstColumn \u003d targetAST.getColumnNo();\n                     final DetailAST nextAST \u003d targetAST.getNextSibling();\n                     final int lastLine;\n                     final int lastColumn;\n                     if (nextAST \u003d\u003d null) {\n                         lastLine \u003d Integer.MAX_VALUE;\n                         lastColumn \u003d Integer.MAX_VALUE;\n                     }\n                     else {\n                         lastLine \u003d nextAST.getLineNo();\n                         lastColumn \u003d nextAST.getColumnNo() - 1;\n                     }\n \n                     // add suppression entries for listed checks\n                     final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n                     for (String value : values) {\n                         String checkName \u003d value;\n                         // strip off the checkstyle-only prefix if present\n                         checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                         entries.add(new Entry(checkName, firstLine, firstColumn,\n                                 lastLine, lastColumn));\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (!isAnnotationEmpty(values)) {\n                final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n                if (targetAST \u003d\u003d null) {\n                    log(ast, MSG_KEY);\n                }\n                else {\n                    // get text range of target\n                    final int firstLine \u003d targetAST.getLineNo();\n                    final int firstColumn \u003d targetAST.getColumnNo();\n                    final DetailAST nextAST \u003d targetAST.getNextSibling();\n                    final int lastLine;\n                    final int lastColumn;\n                    if (nextAST \u003d\u003d null) {\n                        lastLine \u003d Integer.MAX_VALUE;\n                        lastColumn \u003d Integer.MAX_VALUE;\n                    }\n                    else {\n                        lastLine \u003d nextAST.getLineNo();\n                        lastColumn \u003d nextAST.getColumnNo() - 1;\n                    }\n\n                    // add suppression entries for listed checks\n                    final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n                    for (String value : values) {\n                        String checkName \u003d value;\n                        // strip off the checkstyle-only prefix if present\n                        checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                        entries.add(new Entry(checkName, firstLine, firstColumn,\n                                lastLine, lastColumn));\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "16/03/16 11:32 AM",
      "commitNameOld": "888594049a74a7d8e9bbdfb5672c07db1f7ba220",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 71.8,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n-            if (isAnnotationEmpty(values)) {\n-                return;\n-            }\n+            if (!isAnnotationEmpty(values)) {\n+                final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n-            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n+                if (targetAST \u003d\u003d null) {\n+                    log(ast.getLineNo(), MSG_KEY);\n+                }\n+                else {\n+                    // get text range of target\n+                    final int firstLine \u003d targetAST.getLineNo();\n+                    final int firstColumn \u003d targetAST.getColumnNo();\n+                    final DetailAST nextAST \u003d targetAST.getNextSibling();\n+                    final int lastLine;\n+                    final int lastColumn;\n+                    if (nextAST \u003d\u003d null) {\n+                        lastLine \u003d Integer.MAX_VALUE;\n+                        lastColumn \u003d Integer.MAX_VALUE;\n+                    }\n+                    else {\n+                        lastLine \u003d nextAST.getLineNo();\n+                        lastColumn \u003d nextAST.getColumnNo() - 1;\n+                    }\n \n-            if (targetAST \u003d\u003d null) {\n-                log(ast.getLineNo(), MSG_KEY);\n-                return;\n-            }\n-\n-            // get text range of target\n-            final int firstLine \u003d targetAST.getLineNo();\n-            final int firstColumn \u003d targetAST.getColumnNo();\n-            final DetailAST nextAST \u003d targetAST.getNextSibling();\n-            final int lastLine;\n-            final int lastColumn;\n-            if (nextAST \u003d\u003d null) {\n-                lastLine \u003d Integer.MAX_VALUE;\n-                lastColumn \u003d Integer.MAX_VALUE;\n-            }\n-            else {\n-                lastLine \u003d nextAST.getLineNo();\n-                lastColumn \u003d nextAST.getColumnNo() - 1;\n-            }\n-\n-            // add suppression entries for listed checks\n-            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n-            for (String value : values) {\n-                String checkName \u003d value;\n-                // strip off the checkstyle-only prefix if present\n-                checkName \u003d removeCheckstylePrefixIfExists(checkName);\n-                entries.add(new Entry(checkName, firstLine, firstColumn,\n-                        lastLine, lastColumn));\n+                    // add suppression entries for listed checks\n+                    final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n+                    for (String value : values) {\n+                        String checkName \u003d value;\n+                        // strip off the checkstyle-only prefix if present\n+                        checkName \u003d removeCheckstylePrefixIfExists(checkName);\n+                        entries.add(new Entry(checkName, firstLine, firstColumn,\n+                                lastLine, lastColumn));\n+                    }\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (!isAnnotationEmpty(values)) {\n                final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n                if (targetAST \u003d\u003d null) {\n                    log(ast.getLineNo(), MSG_KEY);\n                }\n                else {\n                    // get text range of target\n                    final int firstLine \u003d targetAST.getLineNo();\n                    final int firstColumn \u003d targetAST.getColumnNo();\n                    final DetailAST nextAST \u003d targetAST.getNextSibling();\n                    final int lastLine;\n                    final int lastColumn;\n                    if (nextAST \u003d\u003d null) {\n                        lastLine \u003d Integer.MAX_VALUE;\n                        lastColumn \u003d Integer.MAX_VALUE;\n                    }\n                    else {\n                        lastLine \u003d nextAST.getLineNo();\n                        lastColumn \u003d nextAST.getColumnNo() - 1;\n                    }\n\n                    // add suppression entries for listed checks\n                    final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n                    for (String value : values) {\n                        String checkName \u003d value;\n                        // strip off the checkstyle-only prefix if present\n                        checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                        entries.add(new Entry(checkName, firstLine, firstColumn,\n                                lastLine, lastColumn));\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "423ed9e469db620671459827b58c89025d8f6c66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:55 PM",
      "commitName": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "30/09/15 6:05 PM",
      "commitNameOld": "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n             if (targetAST \u003d\u003d null) {\n                 log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n-            if (nextAST !\u003d null) {\n-                lastLine \u003d nextAST.getLineNo();\n-                lastColumn \u003d nextAST.getColumnNo() - 1;\n-            }\n-            else {\n+            if (nextAST \u003d\u003d null) {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n+            else {\n+                lastLine \u003d nextAST.getLineNo();\n+                lastColumn \u003d nextAST.getColumnNo() - 1;\n+            }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             for (String value : values) {\n                 String checkName \u003d value;\n                 // strip off the checkstyle-only prefix if present\n                 checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                 entries.add(new Entry(checkName, firstLine, firstColumn,\n                         lastLine, lastColumn));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST \u003d\u003d null) {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n            else {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            for (String value : values) {\n                String checkName \u003d value;\n                // strip off the checkstyle-only prefix if present\n                checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                entries.add(new Entry(checkName, firstLine, firstColumn,\n                        lastLine, lastColumn));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1290: Coverage has been increased to 100% in SuppressWarningsHolder.\n",
      "commitDate": "30/09/15 6:05 PM",
      "commitName": "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "29/09/15 4:52 PM",
      "commitNameOld": "d877cb15cfeae5f06a5d546dcc860c2aa32caac4",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n             if (targetAST \u003d\u003d null) {\n                 log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n-            if (entries !\u003d null) {\n-                for (String value : values) {\n-                    String checkName \u003d value;\n-                    // strip off the checkstyle-only prefix if present\n-                    checkName \u003d removeCheckstylePrefixIfExists(checkName);\n-                    entries.add(new Entry(checkName, firstLine, firstColumn,\n+            for (String value : values) {\n+                String checkName \u003d value;\n+                // strip off the checkstyle-only prefix if present\n+                checkName \u003d removeCheckstylePrefixIfExists(checkName);\n+                entries.add(new Entry(checkName, firstLine, firstColumn,\n                         lastLine, lastColumn));\n-                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            for (String value : values) {\n                String checkName \u003d value;\n                // strip off the checkstyle-only prefix if present\n                checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                entries.add(new Entry(checkName, firstLine, firstColumn,\n                        lastLine, lastColumn));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "21/09/15 3:02 PM",
      "commitName": "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "31/08/15 12:58 PM",
      "commitNameOld": "49a0ee81710e0c43ed06a01f1d64ac7f5598a934",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 21.09,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n             if (targetAST \u003d\u003d null) {\n                 log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     String checkName \u003d value;\n                     // strip off the checkstyle-only prefix if present\n-                    checkName \u003d removeChecktylePrefixIfExests(checkName);\n+                    checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                     entries.add(new Entry(checkName, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    String checkName \u003d value;\n                    // strip off the checkstyle-only prefix if present\n                    checkName \u003d removeCheckstylePrefixIfExists(checkName);\n                    entries.add(new Entry(checkName, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: Statements shouldn\u0027t be nested too deep\n",
      "commitDate": "29/08/15 10:46 PM",
      "commitName": "603c5bb53ea12900f6a1c8af0c4a765af36786e3",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "28/08/15 10:59 PM",
      "commitNameOld": "c3674faad8a38656e910750fb22a7eef714fb8a7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n             if (targetAST \u003d\u003d null) {\n                 log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     String checkName \u003d value;\n                     // strip off the checkstyle-only prefix if present\n-                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n-                        checkName \u003d checkName.substring(CHECKSTYLE_PREFIX.length());\n-                    }\n+                    checkName \u003d removeChecktylePrefixIfExests(checkName);\n                     entries.add(new Entry(checkName, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    String checkName \u003d value;\n                    // strip off the checkstyle-only prefix if present\n                    checkName \u003d removeChecktylePrefixIfExests(checkName);\n                    entries.add(new Entry(checkName, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "242028813d3d993bbb8a61af6c4f214705c4d7da": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ModifiedControlVariable violations fixed\n",
      "commitDate": "14/08/15 6:56 AM",
      "commitName": "242028813d3d993bbb8a61af6c4f214705c4d7da",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "08/08/15 10:01 PM",
      "commitNameOld": "0f4494ebeb6c6008fbb29d3d66569c4a7b609b7f",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 5.37,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n             if (targetAST \u003d\u003d null) {\n                 log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n+                    String checkName \u003d value;\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n-                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n+                        checkName \u003d checkName.substring(CHECKSTYLE_PREFIX.length());\n                     }\n-                    entries.add(new Entry(value, firstLine, firstColumn,\n+                    entries.add(new Entry(checkName, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    String checkName \u003d value;\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        checkName \u003d checkName.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(checkName, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "5844ab2d3460cdb94e16158e9fefb69344577950": {
      "type": "Ybodychange",
      "commitMessage": "provide human message for SuppressWarningsHolder, #1158",
      "commitDate": "05/07/15 12:10 PM",
      "commitName": "5844ab2d3460cdb94e16158e9fefb69344577950",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "13/06/15 11:01 PM",
      "commitNameOld": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 21.55,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n \n             if (targetAST \u003d\u003d null) {\n-                log(ast, \"suppress.warnings.invalid.target\");\n+                log(ast.getLineNo(), MSG_KEY);\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n\n            if (targetAST \u003d\u003d null) {\n                log(ast.getLineNo(), MSG_KEY);\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a": {
      "type": "Ybodychange",
      "commitMessage": "SuppressWarningsHolder updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "07/06/15 1:00 PM",
      "commitNameOld": "7b74f65b1048400bd37b2e897811e1591929da0a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.42,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,51 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n-            // get values of annotation\n-            List\u003cString\u003e values \u003d null;\n-            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n-            if (lparenAST !\u003d null) {\n-                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n-                if (nextAST !\u003d null) {\n-                    final int nextType \u003d nextAST.getType();\n-                    switch (nextType) {\n-                        case TokenTypes.EXPR:\n-                        case TokenTypes.ANNOTATION_ARRAY_INIT:\n-                            values \u003d getAnnotationValues(nextAST);\n-                            break;\n-\n-                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n-                            // expected children: IDENT ASSIGN ( EXPR |\n-                            // ANNOTATION_ARRAY_INIT )\n-                            values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n-                            break;\n-\n-                        case TokenTypes.RPAREN:\n-                            // no value present (not valid Java)\n-                            break;\n-\n-                        default:\n-                            // unknown annotation value type (new syntax?)\n-                    }\n-                }\n-            }\n+            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n             if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n \n             if (targetAST \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            final List\u003cString\u003e values \u003d getAllAnnotationValues(ast);\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "7b74f65b1048400bd37b2e897811e1591929da0a": {
      "type": "Ybodychange",
      "commitMessage": "Do not generate violation for empty SuppressWarnings. #1187\n",
      "commitDate": "07/06/15 1:00 PM",
      "commitName": "7b74f65b1048400bd37b2e897811e1591929da0a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "03/06/15 8:09 AM",
      "commitNameOld": "4b2962136f5b47b80b43e32a94b6e260f686c77d",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,78 @@\n     public void visitToken(DetailAST ast) {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n             final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                         case TokenTypes.EXPR:\n                         case TokenTypes.ANNOTATION_ARRAY_INIT:\n                             values \u003d getAnnotationValues(nextAST);\n                             break;\n \n                         case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                             // expected children: IDENT ASSIGN ( EXPR |\n                             // ANNOTATION_ARRAY_INIT )\n                             values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                             break;\n \n                         case TokenTypes.RPAREN:\n                             // no value present (not valid Java)\n                             break;\n \n                         default:\n                             // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n-            if (values \u003d\u003d null) {\n-                log(ast, \"suppress.warnings.missing.value\");\n+            if (isAnnotationEmpty(values)) {\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n \n             if (targetAST \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine;\n             final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                        case TokenTypes.EXPR:\n                        case TokenTypes.ANNOTATION_ARRAY_INIT:\n                            values \u003d getAnnotationValues(nextAST);\n                            break;\n\n                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                            // expected children: IDENT ASSIGN ( EXPR |\n                            // ANNOTATION_ARRAY_INIT )\n                            values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                            break;\n\n                        case TokenTypes.RPAREN:\n                            // no value present (not valid Java)\n                            break;\n\n                        default:\n                            // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (isAnnotationEmpty(values)) {\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "bc9eae330a4fc5c37eb368c85753ae11f2f2c322": {
      "type": "Ybodychange",
      "commitMessage": "PMD Rule:OneDeclarationPerLine Priority:4 Use one line for each declaration, it enhances code readability. Issue #744\n",
      "commitDate": "22/04/15 2:05 PM",
      "commitName": "bc9eae330a4fc5c37eb368c85753ae11f2f2c322",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "21/04/15 9:52 AM",
      "commitNameOld": "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,80 @@\n     public void visitToken(DetailAST ast)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n             final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                         case TokenTypes.EXPR:\n                         case TokenTypes.ANNOTATION_ARRAY_INIT:\n                             values \u003d getAnnotationValues(nextAST);\n                             break;\n \n                         case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                             // expected children: IDENT ASSIGN ( EXPR |\n                             // ANNOTATION_ARRAY_INIT )\n                             values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                             break;\n \n                         case TokenTypes.RPAREN:\n                             // no value present (not valid Java)\n                             break;\n \n                         default:\n                             // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n             final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n \n             if (targetAST \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n-            final int lastLine, lastColumn;\n+            final int lastLine;\n+            final int lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                        case TokenTypes.EXPR:\n                        case TokenTypes.ANNOTATION_ARRAY_INIT:\n                            values \u003d getAnnotationValues(nextAST);\n                            break;\n\n                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                            // expected children: IDENT ASSIGN ( EXPR |\n                            // ANNOTATION_ARRAY_INIT )\n                            values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                            break;\n\n                        case TokenTypes.RPAREN:\n                            // no value present (not valid Java)\n                            break;\n\n                        default:\n                            // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(ast, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine;\n            final int lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f": {
      "type": "Ybodychange",
      "commitMessage": "PMD Rule:ExcessiveMethodLength Priority:3 Avoid really long methods . Issue #744\n",
      "commitDate": "21/04/15 9:52 AM",
      "commitName": "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "15/04/15 8:56 AM",
      "commitNameOld": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,79 @@\n     public void visitToken(DetailAST ast)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n             final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                         case TokenTypes.EXPR:\n                         case TokenTypes.ANNOTATION_ARRAY_INIT:\n                             values \u003d getAnnotationValues(nextAST);\n                             break;\n \n                         case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                             // expected children: IDENT ASSIGN ( EXPR |\n                             // ANNOTATION_ARRAY_INIT )\n                             values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                             break;\n \n                         case TokenTypes.RPAREN:\n                             // no value present (not valid Java)\n                             break;\n \n                         default:\n                             // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n-            // get target of annotation\n-            DetailAST targetAST \u003d null;\n-            DetailAST parentAST \u003d ast.getParent();\n-            if (parentAST !\u003d null) {\n-                switch (parentAST.getType()) {\n-                    case TokenTypes.MODIFIERS:\n-                    case TokenTypes.ANNOTATIONS:\n-                        parentAST \u003d parentAST.getParent();\n-                        if (parentAST !\u003d null) {\n-                            switch (parentAST.getType()) {\n-                                case TokenTypes.ANNOTATION_DEF:\n-                                case TokenTypes.PACKAGE_DEF:\n-                                case TokenTypes.CLASS_DEF:\n-                                case TokenTypes.INTERFACE_DEF:\n-                                case TokenTypes.ENUM_DEF:\n-                                case TokenTypes.ENUM_CONSTANT_DEF:\n-                                case TokenTypes.CTOR_DEF:\n-                                case TokenTypes.METHOD_DEF:\n-                                case TokenTypes.PARAMETER_DEF:\n-                                case TokenTypes.VARIABLE_DEF:\n-                                    targetAST \u003d parentAST;\n-                                    break;\n+            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n \n-                                default:\n-                                    // unexpected target type\n-                            }\n-                        }\n-                        break;\n \n-                    default:\n-                        // unexpected container type\n-                }\n-            }\n             if (targetAST \u003d\u003d null) {\n                 log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine, lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                        case TokenTypes.EXPR:\n                        case TokenTypes.ANNOTATION_ARRAY_INIT:\n                            values \u003d getAnnotationValues(nextAST);\n                            break;\n\n                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                            // expected children: IDENT ASSIGN ( EXPR |\n                            // ANNOTATION_ARRAY_INIT )\n                            values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                            break;\n\n                        case TokenTypes.RPAREN:\n                            // no value present (not valid Java)\n                            break;\n\n                        default:\n                            // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(ast, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            final DetailAST targetAST \u003d getAnnotationTarget(ast);\n\n\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "30/12/14 9:11 AM",
          "commitNameOld": "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 19.89,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,109 +1,109 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n-        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n+        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n-            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                     case TokenTypes.EXPR:\n                     case TokenTypes.ANNOTATION_ARRAY_INIT:\n                         values \u003d getAnnotationValues(nextAST);\n                         break;\n \n                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                         // expected children: IDENT ASSIGN ( EXPR |\n                         // ANNOTATION_ARRAY_INIT )\n                         values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                         break;\n \n                     case TokenTypes.RPAREN:\n                         // no value present (not valid Java)\n                         break;\n \n                     default:\n                         // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n-                log(aAST, \"suppress.warnings.missing.value\");\n+                log(ast, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n             // get target of annotation\n             DetailAST targetAST \u003d null;\n-            DetailAST parentAST \u003d aAST.getParent();\n+            DetailAST parentAST \u003d ast.getParent();\n             if (parentAST !\u003d null) {\n                 switch (parentAST.getType()) {\n                 case TokenTypes.MODIFIERS:\n                 case TokenTypes.ANNOTATIONS:\n                     parentAST \u003d parentAST.getParent();\n                     if (parentAST !\u003d null) {\n                         switch (parentAST.getType()) {\n                         case TokenTypes.ANNOTATION_DEF:\n                         case TokenTypes.PACKAGE_DEF:\n                         case TokenTypes.CLASS_DEF:\n                         case TokenTypes.INTERFACE_DEF:\n                         case TokenTypes.ENUM_DEF:\n                         case TokenTypes.ENUM_CONSTANT_DEF:\n                         case TokenTypes.CTOR_DEF:\n                         case TokenTypes.METHOD_DEF:\n                         case TokenTypes.PARAMETER_DEF:\n                         case TokenTypes.VARIABLE_DEF:\n                             targetAST \u003d parentAST;\n                             break;\n \n                         default:\n                             // unexpected target type\n                         }\n                     }\n                     break;\n \n                 default:\n                     // unexpected container type\n                 }\n             }\n             if (targetAST \u003d\u003d null) {\n-                log(aAST, \"suppress.warnings.invalid.target\");\n+                log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine, lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(ast, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d ast.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.ANNOTATION_DEF:\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.ENUM_CONSTANT_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "30/12/14 9:11 AM",
          "commitNameOld": "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 19.89,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,109 +1,109 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n-        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n+        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n-            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                     case TokenTypes.EXPR:\n                     case TokenTypes.ANNOTATION_ARRAY_INIT:\n                         values \u003d getAnnotationValues(nextAST);\n                         break;\n \n                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                         // expected children: IDENT ASSIGN ( EXPR |\n                         // ANNOTATION_ARRAY_INIT )\n                         values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                         break;\n \n                     case TokenTypes.RPAREN:\n                         // no value present (not valid Java)\n                         break;\n \n                     default:\n                         // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n-                log(aAST, \"suppress.warnings.missing.value\");\n+                log(ast, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n             // get target of annotation\n             DetailAST targetAST \u003d null;\n-            DetailAST parentAST \u003d aAST.getParent();\n+            DetailAST parentAST \u003d ast.getParent();\n             if (parentAST !\u003d null) {\n                 switch (parentAST.getType()) {\n                 case TokenTypes.MODIFIERS:\n                 case TokenTypes.ANNOTATIONS:\n                     parentAST \u003d parentAST.getParent();\n                     if (parentAST !\u003d null) {\n                         switch (parentAST.getType()) {\n                         case TokenTypes.ANNOTATION_DEF:\n                         case TokenTypes.PACKAGE_DEF:\n                         case TokenTypes.CLASS_DEF:\n                         case TokenTypes.INTERFACE_DEF:\n                         case TokenTypes.ENUM_DEF:\n                         case TokenTypes.ENUM_CONSTANT_DEF:\n                         case TokenTypes.CTOR_DEF:\n                         case TokenTypes.METHOD_DEF:\n                         case TokenTypes.PARAMETER_DEF:\n                         case TokenTypes.VARIABLE_DEF:\n                             targetAST \u003d parentAST;\n                             break;\n \n                         default:\n                             // unexpected target type\n                         }\n                     }\n                     break;\n \n                 default:\n                     // unexpected container type\n                 }\n             }\n             if (targetAST \u003d\u003d null) {\n-                log(aAST, \"suppress.warnings.invalid.target\");\n+                log(ast, \"suppress.warnings.invalid.target\");\n                 return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine, lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(ast, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(ast, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d ast.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.ANNOTATION_DEF:\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.ENUM_CONSTANT_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(ast, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
          "extendedDetails": {}
        }
      ]
    },
    "aa829d408fe23bf21a948971a4cad61b36caea94": {
      "type": "Ybodychange",
      "commitMessage": "Issue #353 NullPointerException with SuppressWarningsHolder and enum fields\n",
      "commitDate": "06/12/14 12:41 PM",
      "commitName": "aa829d408fe23bf21a948971a4cad61b36caea94",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "20/07/14 6:22 AM",
      "commitNameOld": "238bacaf90133590ea029a4ac4e2b27d97eb7bc3",
      "commitAuthorOld": "Dominic Jones",
      "daysBetweenCommits": 139.31,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,109 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n             final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                     case TokenTypes.EXPR:\n                     case TokenTypes.ANNOTATION_ARRAY_INIT:\n                         values \u003d getAnnotationValues(nextAST);\n                         break;\n \n                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                         // expected children: IDENT ASSIGN ( EXPR |\n                         // ANNOTATION_ARRAY_INIT )\n                         values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                         break;\n \n                     case TokenTypes.RPAREN:\n                         // no value present (not valid Java)\n                         break;\n \n                     default:\n                         // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n                 log(aAST, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n             // get target of annotation\n             DetailAST targetAST \u003d null;\n             DetailAST parentAST \u003d aAST.getParent();\n             if (parentAST !\u003d null) {\n                 switch (parentAST.getType()) {\n                 case TokenTypes.MODIFIERS:\n                 case TokenTypes.ANNOTATIONS:\n                     parentAST \u003d parentAST.getParent();\n                     if (parentAST !\u003d null) {\n                         switch (parentAST.getType()) {\n                         case TokenTypes.ANNOTATION_DEF:\n                         case TokenTypes.PACKAGE_DEF:\n                         case TokenTypes.CLASS_DEF:\n                         case TokenTypes.INTERFACE_DEF:\n                         case TokenTypes.ENUM_DEF:\n+                        case TokenTypes.ENUM_CONSTANT_DEF:\n                         case TokenTypes.CTOR_DEF:\n                         case TokenTypes.METHOD_DEF:\n                         case TokenTypes.PARAMETER_DEF:\n                         case TokenTypes.VARIABLE_DEF:\n                             targetAST \u003d parentAST;\n                             break;\n \n                         default:\n                             // unexpected target type\n                         }\n                     }\n                     break;\n \n                 default:\n                     // unexpected container type\n                 }\n             }\n             if (targetAST \u003d\u003d null) {\n                 log(aAST, \"suppress.warnings.invalid.target\");\n+                return;\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine, lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d aAST.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.ANNOTATION_DEF:\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.ENUM_CONSTANT_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.invalid.target\");\n                return;\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "238bacaf90133590ea029a4ac4e2b27d97eb7bc3": {
      "type": "Ybodychange",
      "commitMessage": "Adding ANNOTATION_DEF to the valid list of parentASTs for the SuppressWarningsHolder. Without this, any @SuppressWarnings (checkstyle or not) present on an annotation definition class will fail.\n",
      "commitDate": "20/07/14 6:22 AM",
      "commitName": "238bacaf90133590ea029a4ac4e2b27d97eb7bc3",
      "commitAuthor": "Dominic Jones",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 137.84,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,107 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // check whether annotation is SuppressWarnings\n         // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n         String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n         if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n             identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n         }\n         if (\"SuppressWarnings\".equals(identifier)) {\n \n             // get values of annotation\n             List\u003cString\u003e values \u003d null;\n             final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n             if (lparenAST !\u003d null) {\n                 final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                 if (nextAST !\u003d null) {\n                     final int nextType \u003d nextAST.getType();\n                     switch (nextType) {\n                     case TokenTypes.EXPR:\n                     case TokenTypes.ANNOTATION_ARRAY_INIT:\n                         values \u003d getAnnotationValues(nextAST);\n                         break;\n \n                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                         // expected children: IDENT ASSIGN ( EXPR |\n                         // ANNOTATION_ARRAY_INIT )\n                         values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                         break;\n \n                     case TokenTypes.RPAREN:\n                         // no value present (not valid Java)\n                         break;\n \n                     default:\n                         // unknown annotation value type (new syntax?)\n                     }\n                 }\n             }\n             if (values \u003d\u003d null) {\n                 log(aAST, \"suppress.warnings.missing.value\");\n                 return;\n             }\n \n             // get target of annotation\n             DetailAST targetAST \u003d null;\n             DetailAST parentAST \u003d aAST.getParent();\n             if (parentAST !\u003d null) {\n                 switch (parentAST.getType()) {\n                 case TokenTypes.MODIFIERS:\n                 case TokenTypes.ANNOTATIONS:\n                     parentAST \u003d parentAST.getParent();\n                     if (parentAST !\u003d null) {\n                         switch (parentAST.getType()) {\n+                        case TokenTypes.ANNOTATION_DEF:\n                         case TokenTypes.PACKAGE_DEF:\n                         case TokenTypes.CLASS_DEF:\n                         case TokenTypes.INTERFACE_DEF:\n                         case TokenTypes.ENUM_DEF:\n                         case TokenTypes.CTOR_DEF:\n                         case TokenTypes.METHOD_DEF:\n                         case TokenTypes.PARAMETER_DEF:\n                         case TokenTypes.VARIABLE_DEF:\n                             targetAST \u003d parentAST;\n                             break;\n \n                         default:\n                             // unexpected target type\n                         }\n                     }\n                     break;\n \n                 default:\n                     // unexpected container type\n                 }\n             }\n             if (targetAST \u003d\u003d null) {\n                 log(aAST, \"suppress.warnings.invalid.target\");\n             }\n \n             // get text range of target\n             final int firstLine \u003d targetAST.getLineNo();\n             final int firstColumn \u003d targetAST.getColumnNo();\n             final DetailAST nextAST \u003d targetAST.getNextSibling();\n             final int lastLine, lastColumn;\n             if (nextAST !\u003d null) {\n                 lastLine \u003d nextAST.getLineNo();\n                 lastColumn \u003d nextAST.getColumnNo() - 1;\n             }\n             else {\n                 lastLine \u003d Integer.MAX_VALUE;\n                 lastColumn \u003d Integer.MAX_VALUE;\n             }\n \n             // add suppression entries for listed checks\n             final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n             if (entries !\u003d null) {\n                 for (String value : values) {\n                     // strip off the checkstyle-only prefix if present\n                     if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                         value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                     }\n                     entries.add(new Entry(value, firstLine, firstColumn,\n                         lastLine, lastColumn));\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d aAST.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.ANNOTATION_DEF:\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.invalid.target\");\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d aAST.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.invalid.target\");\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java"
      }
    },
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a": {
      "type": "Yintroduced",
      "commitMessage": "Apply patch# #156 Check suppression with @SuppressWarnings\n",
      "commitDate": "12/06/13 4:28 AM",
      "commitName": "fbe0d8d932d74d39801d15e3305fa3ef83b5032a",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,106 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // check whether annotation is SuppressWarnings\n+        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n+        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n+        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n+            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n+        }\n+        if (\"SuppressWarnings\".equals(identifier)) {\n+\n+            // get values of annotation\n+            List\u003cString\u003e values \u003d null;\n+            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            if (lparenAST !\u003d null) {\n+                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n+                if (nextAST !\u003d null) {\n+                    final int nextType \u003d nextAST.getType();\n+                    switch (nextType) {\n+                    case TokenTypes.EXPR:\n+                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n+                        values \u003d getAnnotationValues(nextAST);\n+                        break;\n+\n+                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n+                        // expected children: IDENT ASSIGN ( EXPR |\n+                        // ANNOTATION_ARRAY_INIT )\n+                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n+                        break;\n+\n+                    case TokenTypes.RPAREN:\n+                        // no value present (not valid Java)\n+                        break;\n+\n+                    default:\n+                        // unknown annotation value type (new syntax?)\n+                    }\n+                }\n+            }\n+            if (values \u003d\u003d null) {\n+                log(aAST, \"suppress.warnings.missing.value\");\n+                return;\n+            }\n+\n+            // get target of annotation\n+            DetailAST targetAST \u003d null;\n+            DetailAST parentAST \u003d aAST.getParent();\n+            if (parentAST !\u003d null) {\n+                switch (parentAST.getType()) {\n+                case TokenTypes.MODIFIERS:\n+                case TokenTypes.ANNOTATIONS:\n+                    parentAST \u003d parentAST.getParent();\n+                    if (parentAST !\u003d null) {\n+                        switch (parentAST.getType()) {\n+                        case TokenTypes.PACKAGE_DEF:\n+                        case TokenTypes.CLASS_DEF:\n+                        case TokenTypes.INTERFACE_DEF:\n+                        case TokenTypes.ENUM_DEF:\n+                        case TokenTypes.CTOR_DEF:\n+                        case TokenTypes.METHOD_DEF:\n+                        case TokenTypes.PARAMETER_DEF:\n+                        case TokenTypes.VARIABLE_DEF:\n+                            targetAST \u003d parentAST;\n+                            break;\n+\n+                        default:\n+                            // unexpected target type\n+                        }\n+                    }\n+                    break;\n+\n+                default:\n+                    // unexpected container type\n+                }\n+            }\n+            if (targetAST \u003d\u003d null) {\n+                log(aAST, \"suppress.warnings.invalid.target\");\n+            }\n+\n+            // get text range of target\n+            final int firstLine \u003d targetAST.getLineNo();\n+            final int firstColumn \u003d targetAST.getColumnNo();\n+            final DetailAST nextAST \u003d targetAST.getNextSibling();\n+            final int lastLine, lastColumn;\n+            if (nextAST !\u003d null) {\n+                lastLine \u003d nextAST.getLineNo();\n+                lastColumn \u003d nextAST.getColumnNo() - 1;\n+            }\n+            else {\n+                lastLine \u003d Integer.MAX_VALUE;\n+                lastColumn \u003d Integer.MAX_VALUE;\n+            }\n+\n+            // add suppression entries for listed checks\n+            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n+            if (entries !\u003d null) {\n+                for (String value : values) {\n+                    // strip off the checkstyle-only prefix if present\n+                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n+                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n+                    }\n+                    entries.add(new Entry(value, firstLine, firstColumn,\n+                        lastLine, lastColumn));\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // check whether annotation is SuppressWarnings\n        // expected children: AT ( IDENT | DOT ) LPAREN \u003cvalues\u003e RPAREN\n        String identifier \u003d getIdentifier(getNthChild(aAST, 1));\n        if (identifier.startsWith(JAVA_LANG_PREFIX)) {\n            identifier \u003d identifier.substring(JAVA_LANG_PREFIX.length());\n        }\n        if (\"SuppressWarnings\".equals(identifier)) {\n\n            // get values of annotation\n            List\u003cString\u003e values \u003d null;\n            final DetailAST lparenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            if (lparenAST !\u003d null) {\n                final DetailAST nextAST \u003d lparenAST.getNextSibling();\n                if (nextAST !\u003d null) {\n                    final int nextType \u003d nextAST.getType();\n                    switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                    }\n                }\n            }\n            if (values \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.missing.value\");\n                return;\n            }\n\n            // get target of annotation\n            DetailAST targetAST \u003d null;\n            DetailAST parentAST \u003d aAST.getParent();\n            if (parentAST !\u003d null) {\n                switch (parentAST.getType()) {\n                case TokenTypes.MODIFIERS:\n                case TokenTypes.ANNOTATIONS:\n                    parentAST \u003d parentAST.getParent();\n                    if (parentAST !\u003d null) {\n                        switch (parentAST.getType()) {\n                        case TokenTypes.PACKAGE_DEF:\n                        case TokenTypes.CLASS_DEF:\n                        case TokenTypes.INTERFACE_DEF:\n                        case TokenTypes.ENUM_DEF:\n                        case TokenTypes.CTOR_DEF:\n                        case TokenTypes.METHOD_DEF:\n                        case TokenTypes.PARAMETER_DEF:\n                        case TokenTypes.VARIABLE_DEF:\n                            targetAST \u003d parentAST;\n                            break;\n\n                        default:\n                            // unexpected target type\n                        }\n                    }\n                    break;\n\n                default:\n                    // unexpected container type\n                }\n            }\n            if (targetAST \u003d\u003d null) {\n                log(aAST, \"suppress.warnings.invalid.target\");\n            }\n\n            // get text range of target\n            final int firstLine \u003d targetAST.getLineNo();\n            final int firstColumn \u003d targetAST.getColumnNo();\n            final DetailAST nextAST \u003d targetAST.getNextSibling();\n            final int lastLine, lastColumn;\n            if (nextAST !\u003d null) {\n                lastLine \u003d nextAST.getLineNo();\n                lastColumn \u003d nextAST.getColumnNo() - 1;\n            }\n            else {\n                lastLine \u003d Integer.MAX_VALUE;\n                lastColumn \u003d Integer.MAX_VALUE;\n            }\n\n            // add suppression entries for listed checks\n            final List\u003cEntry\u003e entries \u003d ENTRIES.get();\n            if (entries !\u003d null) {\n                for (String value : values) {\n                    // strip off the checkstyle-only prefix if present\n                    if (value.startsWith(CHECKSTYLE_PREFIX)) {\n                        value \u003d value.substring(CHECKSTYLE_PREFIX.length());\n                    }\n                    entries.add(new Entry(value, firstLine, firstColumn,\n                        lastLine, lastColumn));\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java"
    }
  }
}