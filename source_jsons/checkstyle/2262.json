{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DescendantTokenCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
  "functionStartLine": 337,
  "functionEndLine": 348,
  "numCommitsSeen": 75,
  "timeTaken": 1850,
  "changeHistory": [
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae",
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "5ede09997c283b4c418f0f540848e006be04fa87",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "6a5d1ff83441b0163195dbac42aa872edf5dbee7",
    "91db1968e34b4f777ab146e37a827c20b35e5c52",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "1d1ff53c2010232d65371a457d013fa518916cca"
  ],
  "changeHistoryShort": {
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae": "Ybodychange",
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "5ede09997c283b4c418f0f540848e006be04fa87": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "6a5d1ff83441b0163195dbac42aa872edf5dbee7": "Ybodychange",
    "91db1968e34b4f777ab146e37a827c20b35e5c52": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "1d1ff53c2010232d65371a457d013fa518916cca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae": {
      "type": "Ybodychange",
      "commitMessage": "DescendantTokenCheck  updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "40bb6812631517615cfc45efeb5bdcc93b95a8ae",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,12 @@\n     public void visitToken(DetailAST ast) {\n         //reset counts\n         Arrays.fill(counts, 0);\n         countTokens(ast, 0);\n \n-        // name of this token\n-        final String name \u003d Utils.getTokenName(ast.getType());\n-\n         if (sumTokenCounts) {\n-            int total \u003d 0;\n-            for (int element : limitedTokens) {\n-                total +\u003d counts[element - 1];\n-            }\n-            if (total \u003c minimumNumber) {\n-                log(ast.getLineNo(), ast.getColumnNo(),\n-                        null \u003d\u003d minimumMessage ? MSG_KEY_SUM_MIN\n-                                : minimumMessage,\n-                        String.valueOf(total),\n-                        String.valueOf(minimumNumber), name);\n-            }\n-            if (total \u003e maximumNumber) {\n-                log(ast.getLineNo(), ast.getColumnNo(),\n-                        null \u003d\u003d maximumMessage ? MSG_KEY_SUM_MAX\n-                                : maximumMessage,\n-                        String.valueOf(total),\n-                        String.valueOf(maximumNumber),\n-                        name);\n-            }\n+            logAsTotal(ast);\n         }\n         else {\n-            for (int element : limitedTokens) {\n-                final int tokenCount \u003d counts[element - 1];\n-                if (tokenCount \u003c minimumNumber) {\n-                    final String descendantName \u003d Utils\n-                            .getTokenName(element);\n-                    log(ast.getLineNo(), ast.getColumnNo(),\n-                            null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n-                                    : minimumMessage,\n-                            String.valueOf(tokenCount),\n-                            String.valueOf(minimumNumber),\n-                            name,\n-                            descendantName);\n-                }\n-                if (tokenCount \u003e maximumNumber) {\n-                    final String descendantName \u003d Utils\n-                            .getTokenName(element);\n-                    log(ast.getLineNo(), ast.getColumnNo(),\n-                            null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n-                                    : maximumMessage,\n-                            String.valueOf(tokenCount),\n-                            String.valueOf(maximumNumber),\n-                            name,\n-                            descendantName);\n-                }\n-            }\n+            logAsSeparated(ast);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        if (sumTokenCounts) {\n            logAsTotal(ast);\n        }\n        else {\n            logAsSeparated(ast);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037": {
      "type": "Ybodychange",
      "commitMessage": "Findbugs violation: api.TokenTypes do System.exit(...). #923\n",
      "commitDate": "15/05/15 3:31 PM",
      "commitName": "5e0b6286ac1e4f52c9769c764bc2978ab0fc0037",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "01/05/15 4:32 PM",
      "commitNameOld": "31421dcdda3b3534f2fcc5c6e88a8fdbc5d15311",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 13.96,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public void visitToken(DetailAST ast)\n     {\n         //reset counts\n         Arrays.fill(counts, 0);\n         countTokens(ast, 0);\n \n         // name of this token\n-        final String name \u003d TokenTypes.getTokenName(ast.getType());\n+        final String name \u003d Utils.getTokenName(ast.getType());\n \n         if (sumTokenCounts) {\n             int total \u003d 0;\n             for (int element : limitedTokens) {\n                 total +\u003d counts[element - 1];\n             }\n             if (total \u003c minimumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                         null \u003d\u003d minimumMessage ? MSG_KEY_SUM_MIN\n                                 : minimumMessage,\n                         String.valueOf(total),\n                         String.valueOf(minimumNumber), name);\n             }\n             if (total \u003e maximumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                         null \u003d\u003d maximumMessage ? MSG_KEY_SUM_MAX\n                                 : maximumMessage,\n                         String.valueOf(total),\n                         String.valueOf(maximumNumber),\n                         name);\n             }\n         }\n         else {\n             for (int element : limitedTokens) {\n                 final int tokenCount \u003d counts[element - 1];\n                 if (tokenCount \u003c minimumNumber) {\n-                    final String descendantName \u003d TokenTypes\n+                    final String descendantName \u003d Utils\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                             null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n                                     : minimumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(minimumNumber),\n                             name,\n                             descendantName);\n                 }\n                 if (tokenCount \u003e maximumNumber) {\n-                    final String descendantName \u003d TokenTypes\n+                    final String descendantName \u003d Utils\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                             null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n                                     : maximumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(maximumNumber),\n                             name,\n                             descendantName);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        // name of this token\n        final String name \u003d Utils.getTokenName(ast.getType());\n\n        if (sumTokenCounts) {\n            int total \u003d 0;\n            for (int element : limitedTokens) {\n                total +\u003d counts[element - 1];\n            }\n            if (total \u003c minimumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d minimumMessage ? MSG_KEY_SUM_MIN\n                                : minimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(minimumNumber), name);\n            }\n            if (total \u003e maximumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d maximumMessage ? MSG_KEY_SUM_MAX\n                                : maximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(maximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : limitedTokens) {\n                final int tokenCount \u003d counts[element - 1];\n                if (tokenCount \u003c minimumNumber) {\n                    final String descendantName \u003d Utils\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n                                    : minimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(minimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e maximumNumber) {\n                    final String descendantName \u003d Utils\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n                                    : maximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(maximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "09/03/15 11:26 PM",
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public void visitToken(DetailAST ast)\n     {\n         //reset counts\n         Arrays.fill(counts, 0);\n         countTokens(ast, 0);\n \n         // name of this token\n         final String name \u003d TokenTypes.getTokenName(ast.getType());\n \n         if (sumTokenCounts) {\n             int total \u003d 0;\n             for (int element : limitedTokens) {\n                 total +\u003d counts[element - 1];\n             }\n             if (total \u003c minimumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        (null \u003d\u003d minimumMessage) ? MSG_KEY_SUM_MIN\n+                        null \u003d\u003d minimumMessage ? MSG_KEY_SUM_MIN\n                                 : minimumMessage,\n                         String.valueOf(total),\n                         String.valueOf(minimumNumber), name);\n             }\n             if (total \u003e maximumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        (null \u003d\u003d maximumMessage) ? MSG_KEY_SUM_MAX\n+                        null \u003d\u003d maximumMessage ? MSG_KEY_SUM_MAX\n                                 : maximumMessage,\n                         String.valueOf(total),\n                         String.valueOf(maximumNumber),\n                         name);\n             }\n         }\n         else {\n             for (int element : limitedTokens) {\n                 final int tokenCount \u003d counts[element - 1];\n                 if (tokenCount \u003c minimumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                            (null \u003d\u003d minimumMessage) ? MSG_KEY_MIN\n+                            null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n                                     : minimumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(minimumNumber),\n                             name,\n                             descendantName);\n                 }\n                 if (tokenCount \u003e maximumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                            (null \u003d\u003d maximumMessage) ? MSG_KEY_MAX\n+                            null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n                                     : maximumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(maximumNumber),\n                             name,\n                             descendantName);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(ast.getType());\n\n        if (sumTokenCounts) {\n            int total \u003d 0;\n            for (int element : limitedTokens) {\n                total +\u003d counts[element - 1];\n            }\n            if (total \u003c minimumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d minimumMessage ? MSG_KEY_SUM_MIN\n                                : minimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(minimumNumber), name);\n            }\n            if (total \u003e maximumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d maximumMessage ? MSG_KEY_SUM_MAX\n                                : maximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(maximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : limitedTokens) {\n                final int tokenCount \u003d counts[element - 1];\n                if (tokenCount \u003c minimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n                                    : minimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(minimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e maximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n                                    : maximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(maximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "5ede09997c283b4c418f0f540848e006be04fa87": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, checks package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "5ede09997c283b4c418f0f540848e006be04fa87",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public void visitToken(DetailAST ast)\n     {\n         //reset counts\n         Arrays.fill(counts, 0);\n         countTokens(ast, 0);\n \n         // name of this token\n         final String name \u003d TokenTypes.getTokenName(ast.getType());\n \n         if (sumTokenCounts) {\n             int total \u003d 0;\n             for (int element : limitedTokens) {\n                 total +\u003d counts[element - 1];\n             }\n             if (total \u003c minimumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        (null \u003d\u003d minimumMessage) ? \"descendant.token.sum.min\"\n+                        (null \u003d\u003d minimumMessage) ? MSG_KEY_SUM_MIN\n                                 : minimumMessage,\n                         String.valueOf(total),\n                         String.valueOf(minimumNumber), name);\n             }\n             if (total \u003e maximumNumber) {\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        (null \u003d\u003d maximumMessage) ? \"descendant.token.sum.max\"\n+                        (null \u003d\u003d maximumMessage) ? MSG_KEY_SUM_MAX\n                                 : maximumMessage,\n                         String.valueOf(total),\n                         String.valueOf(maximumNumber),\n                         name);\n             }\n         }\n         else {\n             for (int element : limitedTokens) {\n                 final int tokenCount \u003d counts[element - 1];\n                 if (tokenCount \u003c minimumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                            (null \u003d\u003d minimumMessage) ? \"descendant.token.min\"\n+                            (null \u003d\u003d minimumMessage) ? MSG_KEY_MIN\n                                     : minimumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(minimumNumber),\n                             name,\n                             descendantName);\n                 }\n                 if (tokenCount \u003e maximumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                            (null \u003d\u003d maximumMessage) ? \"descendant.token.max\"\n+                            (null \u003d\u003d maximumMessage) ? MSG_KEY_MAX\n                                     : maximumMessage,\n                             String.valueOf(tokenCount),\n                             String.valueOf(maximumNumber),\n                             name,\n                             descendantName);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(ast.getType());\n\n        if (sumTokenCounts) {\n            int total \u003d 0;\n            for (int element : limitedTokens) {\n                total +\u003d counts[element - 1];\n            }\n            if (total \u003c minimumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d minimumMessage) ? MSG_KEY_SUM_MIN\n                                : minimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(minimumNumber), name);\n            }\n            if (total \u003e maximumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d maximumMessage) ? MSG_KEY_SUM_MAX\n                                : maximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(maximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : limitedTokens) {\n                final int tokenCount \u003d counts[element - 1];\n                if (tokenCount \u003c minimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d minimumMessage) ? MSG_KEY_MIN\n                                    : minimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(minimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e maximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d maximumMessage) ? MSG_KEY_MAX\n                                    : maximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(maximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,58 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         //reset counts\n-        Arrays.fill(mCounts, 0);\n-        countTokens(aAST, 0);\n+        Arrays.fill(counts, 0);\n+        countTokens(ast, 0);\n \n         // name of this token\n-        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n+        final String name \u003d TokenTypes.getTokenName(ast.getType());\n \n-        if (mSumTokenCounts) {\n+        if (sumTokenCounts) {\n             int total \u003d 0;\n-            for (int element : mLimitedTokens) {\n-                total +\u003d mCounts[element - 1];\n+            for (int element : limitedTokens) {\n+                total +\u003d counts[element - 1];\n             }\n-            if (total \u003c mMinimumNumber) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(),\n-                        (null \u003d\u003d mMinimumMessage) ? \"descendant.token.sum.min\"\n-                                : mMinimumMessage,\n+            if (total \u003c minimumNumber) {\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        (null \u003d\u003d minimumMessage) ? \"descendant.token.sum.min\"\n+                                : minimumMessage,\n                         String.valueOf(total),\n-                        String.valueOf(mMinimumNumber), name);\n+                        String.valueOf(minimumNumber), name);\n             }\n-            if (total \u003e mMaximumNumber) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(),\n-                        (null \u003d\u003d mMaximumMessage) ? \"descendant.token.sum.max\"\n-                                : mMaximumMessage,\n+            if (total \u003e maximumNumber) {\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        (null \u003d\u003d maximumMessage) ? \"descendant.token.sum.max\"\n+                                : maximumMessage,\n                         String.valueOf(total),\n-                        String.valueOf(mMaximumNumber),\n+                        String.valueOf(maximumNumber),\n                         name);\n             }\n         }\n         else {\n-            for (int element : mLimitedTokens) {\n-                final int tokenCount \u003d mCounts[element - 1];\n-                if (tokenCount \u003c mMinimumNumber) {\n+            for (int element : limitedTokens) {\n+                final int tokenCount \u003d counts[element - 1];\n+                if (tokenCount \u003c minimumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-                            (null \u003d\u003d mMinimumMessage) ? \"descendant.token.min\"\n-                                    : mMinimumMessage,\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n+                            (null \u003d\u003d minimumMessage) ? \"descendant.token.min\"\n+                                    : minimumMessage,\n                             String.valueOf(tokenCount),\n-                            String.valueOf(mMinimumNumber),\n+                            String.valueOf(minimumNumber),\n                             name,\n                             descendantName);\n                 }\n-                if (tokenCount \u003e mMaximumNumber) {\n+                if (tokenCount \u003e maximumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-                            (null \u003d\u003d mMaximumMessage) ? \"descendant.token.max\"\n-                                    : mMaximumMessage,\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n+                            (null \u003d\u003d maximumMessage) ? \"descendant.token.max\"\n+                                    : maximumMessage,\n                             String.valueOf(tokenCount),\n-                            String.valueOf(mMaximumNumber),\n+                            String.valueOf(maximumNumber),\n                             name,\n                             descendantName);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(ast.getType());\n\n        if (sumTokenCounts) {\n            int total \u003d 0;\n            for (int element : limitedTokens) {\n                total +\u003d counts[element - 1];\n            }\n            if (total \u003c minimumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d minimumMessage) ? \"descendant.token.sum.min\"\n                                : minimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(minimumNumber), name);\n            }\n            if (total \u003e maximumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d maximumMessage) ? \"descendant.token.sum.max\"\n                                : maximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(maximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : limitedTokens) {\n                final int tokenCount \u003d counts[element - 1];\n                if (tokenCount \u003c minimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d minimumMessage) ? \"descendant.token.min\"\n                                    : minimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(minimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e maximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d maximumMessage) ? \"descendant.token.max\"\n                                    : maximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(maximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,58 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         //reset counts\n-        Arrays.fill(mCounts, 0);\n-        countTokens(aAST, 0);\n+        Arrays.fill(counts, 0);\n+        countTokens(ast, 0);\n \n         // name of this token\n-        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n+        final String name \u003d TokenTypes.getTokenName(ast.getType());\n \n-        if (mSumTokenCounts) {\n+        if (sumTokenCounts) {\n             int total \u003d 0;\n-            for (int element : mLimitedTokens) {\n-                total +\u003d mCounts[element - 1];\n+            for (int element : limitedTokens) {\n+                total +\u003d counts[element - 1];\n             }\n-            if (total \u003c mMinimumNumber) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(),\n-                        (null \u003d\u003d mMinimumMessage) ? \"descendant.token.sum.min\"\n-                                : mMinimumMessage,\n+            if (total \u003c minimumNumber) {\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        (null \u003d\u003d minimumMessage) ? \"descendant.token.sum.min\"\n+                                : minimumMessage,\n                         String.valueOf(total),\n-                        String.valueOf(mMinimumNumber), name);\n+                        String.valueOf(minimumNumber), name);\n             }\n-            if (total \u003e mMaximumNumber) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(),\n-                        (null \u003d\u003d mMaximumMessage) ? \"descendant.token.sum.max\"\n-                                : mMaximumMessage,\n+            if (total \u003e maximumNumber) {\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        (null \u003d\u003d maximumMessage) ? \"descendant.token.sum.max\"\n+                                : maximumMessage,\n                         String.valueOf(total),\n-                        String.valueOf(mMaximumNumber),\n+                        String.valueOf(maximumNumber),\n                         name);\n             }\n         }\n         else {\n-            for (int element : mLimitedTokens) {\n-                final int tokenCount \u003d mCounts[element - 1];\n-                if (tokenCount \u003c mMinimumNumber) {\n+            for (int element : limitedTokens) {\n+                final int tokenCount \u003d counts[element - 1];\n+                if (tokenCount \u003c minimumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-                            (null \u003d\u003d mMinimumMessage) ? \"descendant.token.min\"\n-                                    : mMinimumMessage,\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n+                            (null \u003d\u003d minimumMessage) ? \"descendant.token.min\"\n+                                    : minimumMessage,\n                             String.valueOf(tokenCount),\n-                            String.valueOf(mMinimumNumber),\n+                            String.valueOf(minimumNumber),\n                             name,\n                             descendantName);\n                 }\n-                if (tokenCount \u003e mMaximumNumber) {\n+                if (tokenCount \u003e maximumNumber) {\n                     final String descendantName \u003d TokenTypes\n                             .getTokenName(element);\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n-                            (null \u003d\u003d mMaximumMessage) ? \"descendant.token.max\"\n-                                    : mMaximumMessage,\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n+                            (null \u003d\u003d maximumMessage) ? \"descendant.token.max\"\n+                                    : maximumMessage,\n                             String.valueOf(tokenCount),\n-                            String.valueOf(mMaximumNumber),\n+                            String.valueOf(maximumNumber),\n                             name,\n                             descendantName);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        //reset counts\n        Arrays.fill(counts, 0);\n        countTokens(ast, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(ast.getType());\n\n        if (sumTokenCounts) {\n            int total \u003d 0;\n            for (int element : limitedTokens) {\n                total +\u003d counts[element - 1];\n            }\n            if (total \u003c minimumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d minimumMessage) ? \"descendant.token.sum.min\"\n                                : minimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(minimumNumber), name);\n            }\n            if (total \u003e maximumNumber) {\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        (null \u003d\u003d maximumMessage) ? \"descendant.token.sum.max\"\n                                : maximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(maximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : limitedTokens) {\n                final int tokenCount \u003d counts[element - 1];\n                if (tokenCount \u003c minimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d minimumMessage) ? \"descendant.token.min\"\n                                    : minimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(minimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e maximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            (null \u003d\u003d maximumMessage) ? \"descendant.token.max\"\n                                    : maximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(maximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        //reset counts\n        Arrays.fill(mCounts, 0);\n        countTokens(aAST, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n\n        if (mSumTokenCounts) {\n            int total \u003d 0;\n            for (int element : mLimitedTokens) {\n                total +\u003d mCounts[element - 1];\n            }\n            if (total \u003c mMinimumNumber) {\n                log(aAST.getLineNo(), aAST.getColumnNo(),\n                        (null \u003d\u003d mMinimumMessage) ? \"descendant.token.sum.min\"\n                                : mMinimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(mMinimumNumber), name);\n            }\n            if (total \u003e mMaximumNumber) {\n                log(aAST.getLineNo(), aAST.getColumnNo(),\n                        (null \u003d\u003d mMaximumMessage) ? \"descendant.token.sum.max\"\n                                : mMaximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(mMaximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : mLimitedTokens) {\n                final int tokenCount \u003d mCounts[element - 1];\n                if (tokenCount \u003c mMinimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            (null \u003d\u003d mMinimumMessage) ? \"descendant.token.min\"\n                                    : mMinimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(mMinimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e mMaximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            (null \u003d\u003d mMaximumMessage) ? \"descendant.token.max\"\n                                    : mMaximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(mMaximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java"
      }
    },
    "6a5d1ff83441b0163195dbac42aa872edf5dbee7": {
      "type": "Ybodychange",
      "commitMessage": "enhanced the DescendantTokenCheck to have a property to use the total of found tokens, not the individual counts. This allows a check to be configured to find code like:\n\n   if (this !\u003d null) { ...\n\nWhere it is crazy to \"this\" in this way (pun intended!).\n\nStill need to document the change.\n",
      "commitDate": "04/11/08 12:10 PM",
      "commitName": "6a5d1ff83441b0163195dbac42aa872edf5dbee7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 295.52,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,58 @@\n     public void visitToken(DetailAST aAST)\n     {\n         //reset counts\n         Arrays.fill(mCounts, 0);\n-\n         countTokens(aAST, 0);\n \n         // name of this token\n         final String name \u003d TokenTypes.getTokenName(aAST.getType());\n \n-        for (int element : mLimitedTokens) {\n-            final int tokenCount \u003d mCounts[element - 1];\n-            if (tokenCount \u003c mMinimumNumber) {\n-                final String descendantName \u003d\n-                    TokenTypes.getTokenName(element);\n-                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,\n-                    \"\" + tokenCount, \"\" + mMinimumNumber,\n-                    name, descendantName);\n+        if (mSumTokenCounts) {\n+            int total \u003d 0;\n+            for (int element : mLimitedTokens) {\n+                total +\u003d mCounts[element - 1];\n             }\n-            if (tokenCount \u003e mMaximumNumber) {\n-                final String descendantName \u003d\n-                    TokenTypes.getTokenName(element);\n-                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,\n-                    \"\" + tokenCount, \"\" + mMaximumNumber,\n-                    name, descendantName);\n+            if (total \u003c mMinimumNumber) {\n+                log(aAST.getLineNo(), aAST.getColumnNo(),\n+                        (null \u003d\u003d mMinimumMessage) ? \"descendant.token.sum.min\"\n+                                : mMinimumMessage,\n+                        String.valueOf(total),\n+                        String.valueOf(mMinimumNumber), name);\n+            }\n+            if (total \u003e mMaximumNumber) {\n+                log(aAST.getLineNo(), aAST.getColumnNo(),\n+                        (null \u003d\u003d mMaximumMessage) ? \"descendant.token.sum.max\"\n+                                : mMaximumMessage,\n+                        String.valueOf(total),\n+                        String.valueOf(mMaximumNumber),\n+                        name);\n+            }\n+        }\n+        else {\n+            for (int element : mLimitedTokens) {\n+                final int tokenCount \u003d mCounts[element - 1];\n+                if (tokenCount \u003c mMinimumNumber) {\n+                    final String descendantName \u003d TokenTypes\n+                            .getTokenName(element);\n+                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                            (null \u003d\u003d mMinimumMessage) ? \"descendant.token.min\"\n+                                    : mMinimumMessage,\n+                            String.valueOf(tokenCount),\n+                            String.valueOf(mMinimumNumber),\n+                            name,\n+                            descendantName);\n+                }\n+                if (tokenCount \u003e mMaximumNumber) {\n+                    final String descendantName \u003d TokenTypes\n+                            .getTokenName(element);\n+                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                            (null \u003d\u003d mMaximumMessage) ? \"descendant.token.max\"\n+                                    : mMaximumMessage,\n+                            String.valueOf(tokenCount),\n+                            String.valueOf(mMaximumNumber),\n+                            name,\n+                            descendantName);\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        //reset counts\n        Arrays.fill(mCounts, 0);\n        countTokens(aAST, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n\n        if (mSumTokenCounts) {\n            int total \u003d 0;\n            for (int element : mLimitedTokens) {\n                total +\u003d mCounts[element - 1];\n            }\n            if (total \u003c mMinimumNumber) {\n                log(aAST.getLineNo(), aAST.getColumnNo(),\n                        (null \u003d\u003d mMinimumMessage) ? \"descendant.token.sum.min\"\n                                : mMinimumMessage,\n                        String.valueOf(total),\n                        String.valueOf(mMinimumNumber), name);\n            }\n            if (total \u003e mMaximumNumber) {\n                log(aAST.getLineNo(), aAST.getColumnNo(),\n                        (null \u003d\u003d mMaximumMessage) ? \"descendant.token.sum.max\"\n                                : mMaximumMessage,\n                        String.valueOf(total),\n                        String.valueOf(mMaximumNumber),\n                        name);\n            }\n        }\n        else {\n            for (int element : mLimitedTokens) {\n                final int tokenCount \u003d mCounts[element - 1];\n                if (tokenCount \u003c mMinimumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            (null \u003d\u003d mMinimumMessage) ? \"descendant.token.min\"\n                                    : mMinimumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(mMinimumNumber),\n                            name,\n                            descendantName);\n                }\n                if (tokenCount \u003e mMaximumNumber) {\n                    final String descendantName \u003d TokenTypes\n                            .getTokenName(element);\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            (null \u003d\u003d mMaximumMessage) ? \"descendant.token.max\"\n                                    : mMaximumMessage,\n                            String.valueOf(tokenCount),\n                            String.valueOf(mMaximumNumber),\n                            name,\n                            descendantName);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "91db1968e34b4f777ab146e37a827c20b35e5c52": {
      "type": "Ybodychange",
      "commitMessage": "Using varargs for logging.\n",
      "commitDate": "20/12/07 2:51 AM",
      "commitName": "91db1968e34b4f777ab146e37a827c20b35e5c52",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 2:28 AM",
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.02,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         //reset counts\n         Arrays.fill(mCounts, 0);\n \n         countTokens(aAST, 0);\n \n         // name of this token\n         final String name \u003d TokenTypes.getTokenName(aAST.getType());\n \n         for (int element : mLimitedTokens) {\n             final int tokenCount \u003d mCounts[element - 1];\n             if (tokenCount \u003c mMinimumNumber) {\n                 final String descendantName \u003d\n                     TokenTypes.getTokenName(element);\n-                log(aAST.getLineNo(),\n-                    aAST.getColumnNo(),\n-                    mMinimumMessage,\n-                    new String[] {\n-                        \"\" + tokenCount,\n-                        \"\" + mMinimumNumber,\n-                        name,\n-                        descendantName,\n-                    });\n+                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,\n+                    \"\" + tokenCount, \"\" + mMinimumNumber,\n+                    name, descendantName);\n             }\n             if (tokenCount \u003e mMaximumNumber) {\n                 final String descendantName \u003d\n                     TokenTypes.getTokenName(element);\n-                log(aAST.getLineNo(),\n-                    aAST.getColumnNo(),\n-                    mMaximumMessage,\n-                    new String[] {\n-                        \"\" + tokenCount,\n-                        \"\" + mMaximumNumber,\n-                        name,\n-                        descendantName,\n-                    });\n+                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,\n+                    \"\" + tokenCount, \"\" + mMaximumNumber,\n+                    name, descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        //reset counts\n        Arrays.fill(mCounts, 0);\n\n        countTokens(aAST, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n\n        for (int element : mLimitedTokens) {\n            final int tokenCount \u003d mCounts[element - 1];\n            if (tokenCount \u003c mMinimumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(element);\n                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,\n                    \"\" + tokenCount, \"\" + mMinimumNumber,\n                    name, descendantName);\n            }\n            if (tokenCount \u003e mMaximumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(element);\n                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,\n                    \"\" + tokenCount, \"\" + mMaximumNumber,\n                    name, descendantName);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/12/07 10:36 PM",
      "commitNameOld": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void visitToken(DetailAST aAST)\n     {\n         //reset counts\n         Arrays.fill(mCounts, 0);\n \n         countTokens(aAST, 0);\n \n         // name of this token\n         final String name \u003d TokenTypes.getTokenName(aAST.getType());\n \n-        for (int i \u003d 0; i \u003c mLimitedTokens.length; i++) {\n-            final int tokenCount \u003d mCounts[mLimitedTokens[i] - 1];\n+        for (int element : mLimitedTokens) {\n+            final int tokenCount \u003d mCounts[element - 1];\n             if (tokenCount \u003c mMinimumNumber) {\n                 final String descendantName \u003d\n-                    TokenTypes.getTokenName(mLimitedTokens[i]);\n+                    TokenTypes.getTokenName(element);\n                 log(aAST.getLineNo(),\n                     aAST.getColumnNo(),\n                     mMinimumMessage,\n                     new String[] {\n                         \"\" + tokenCount,\n                         \"\" + mMinimumNumber,\n                         name,\n                         descendantName,\n                     });\n             }\n             if (tokenCount \u003e mMaximumNumber) {\n                 final String descendantName \u003d\n-                    TokenTypes.getTokenName(mLimitedTokens[i]);\n+                    TokenTypes.getTokenName(element);\n                 log(aAST.getLineNo(),\n                     aAST.getColumnNo(),\n                     mMaximumMessage,\n                     new String[] {\n                         \"\" + tokenCount,\n                         \"\" + mMaximumNumber,\n                         name,\n                         descendantName,\n                     });\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        //reset counts\n        Arrays.fill(mCounts, 0);\n\n        countTokens(aAST, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n\n        for (int element : mLimitedTokens) {\n            final int tokenCount \u003d mCounts[element - 1];\n            if (tokenCount \u003c mMinimumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(element);\n                log(aAST.getLineNo(),\n                    aAST.getColumnNo(),\n                    mMinimumMessage,\n                    new String[] {\n                        \"\" + tokenCount,\n                        \"\" + mMinimumNumber,\n                        name,\n                        descendantName,\n                    });\n            }\n            if (tokenCount \u003e mMaximumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(element);\n                log(aAST.getLineNo(),\n                    aAST.getColumnNo(),\n                    mMaximumMessage,\n                    new String[] {\n                        \"\" + tokenCount,\n                        \"\" + mMaximumNumber,\n                        name,\n                        descendantName,\n                    });\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "1d1ff53c2010232d65371a457d013fa518916cca": {
      "type": "Yintroduced",
      "commitMessage": "Moving DescendantToken check to main distribution.\n",
      "commitDate": "18/08/03 11:15 PM",
      "commitName": "1d1ff53c2010232d65371a457d013fa518916cca",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,42 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        //reset counts\n+        Arrays.fill(mCounts, 0);\n+\n+        countTokens(aAST, 0);\n+\n+        // name of this token\n+        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n+\n+        for (int i \u003d 0; i \u003c mLimitedTokens.length; i++) {\n+            final int tokenCount \u003d mCounts[mLimitedTokens[i] - 1];\n+            if (tokenCount \u003c mMinimumNumber) {\n+                final String descendantName \u003d\n+                    TokenTypes.getTokenName(mLimitedTokens[i]);\n+                log(\n+                    aAST.getLineNo(),\n+                    aAST.getColumnNo(),\n+                    mMinimumMessage,\n+                    new String[] {\n+                        \"\" + tokenCount,\n+                        \"\" + mMinimumNumber,\n+                        name,\n+                        descendantName,\n+                    });\n+            }\n+            if (tokenCount \u003e mMaximumNumber) {\n+                final String descendantName \u003d\n+                    TokenTypes.getTokenName(mLimitedTokens[i]);\n+                log(\n+                    aAST.getLineNo(),\n+                    aAST.getColumnNo(),\n+                    mMaximumMessage,\n+                    new String[] {\n+                        \"\" + tokenCount,\n+                        \"\" + mMaximumNumber,\n+                        name,\n+                        descendantName,\n+                    });\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        //reset counts\n        Arrays.fill(mCounts, 0);\n\n        countTokens(aAST, 0);\n\n        // name of this token\n        final String name \u003d TokenTypes.getTokenName(aAST.getType());\n\n        for (int i \u003d 0; i \u003c mLimitedTokens.length; i++) {\n            final int tokenCount \u003d mCounts[mLimitedTokens[i] - 1];\n            if (tokenCount \u003c mMinimumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(mLimitedTokens[i]);\n                log(\n                    aAST.getLineNo(),\n                    aAST.getColumnNo(),\n                    mMinimumMessage,\n                    new String[] {\n                        \"\" + tokenCount,\n                        \"\" + mMinimumNumber,\n                        name,\n                        descendantName,\n                    });\n            }\n            if (tokenCount \u003e mMaximumNumber) {\n                final String descendantName \u003d\n                    TokenTypes.getTokenName(mLimitedTokens[i]);\n                log(\n                    aAST.getLineNo(),\n                    aAST.getColumnNo(),\n                    mMaximumMessage,\n                    new String[] {\n                        \"\" + tokenCount,\n                        \"\" + mMaximumNumber,\n                        name,\n                        descendantName,\n                    });\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java"
    }
  }
}