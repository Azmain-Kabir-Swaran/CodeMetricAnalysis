{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PropertyCacheFile.java",
  "functionName": "getHashCodeBasedOnObjectContent",
  "functionId": "getHashCodeBasedOnObjectContent___object-Serializable",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
  "functionStartLine": 212,
  "functionEndLine": 230,
  "numCommitsSeen": 193,
  "timeTaken": 3769,
  "changeHistory": [
    "0bb9038582406af853dd064d9c699ddc93c0994d",
    "fc44df83dfaecd3d7b08ae41f6a88a958d38cf60",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
    "b5d2fc84d781d32d4d3369a4791de3733ee9d42d",
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
    "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
    "1b5c3936f53b0dd9f149faef9ead6fce20a4cb31",
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d2af4accdde3eac0a2103353f490e97bf62f61d2",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "864c681eef6521082729167ffdaabd2af1e813ed",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
    "ec1e3e834918a32d63025d60175189b3437769d7"
  ],
  "changeHistoryShort": {
    "0bb9038582406af853dd064d9c699ddc93c0994d": "Ybodychange",
    "fc44df83dfaecd3d7b08ae41f6a88a958d38cf60": "Ybodychange",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": "Ybodychange",
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7": "Yrename",
    "b5d2fc84d781d32d4d3369a4791de3733ee9d42d": "Ybodychange",
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad": "Ybodychange",
    "ea9ff3965d9c657b5b7bd2d969e075f430635c47": "Ymultichange(Yparameterchange,Ybodychange)",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymultichange(Ymodifierchange,Ybodychange)",
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e": "Ybodychange",
    "1b5c3936f53b0dd9f149faef9ead6fce20a4cb31": "Ybodychange",
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d2af4accdde3eac0a2103353f490e97bf62f61d2": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "864c681eef6521082729167ffdaabd2af1e813ed": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": "Ymultichange(Yparameterchange,Ybodychange)",
    "ec1e3e834918a32d63025d60175189b3437769d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0bb9038582406af853dd064d9c699ddc93c0994d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3484: removed the last of guava",
      "commitDate": "09/03/19 10:49 PM",
      "commitName": "0bb9038582406af853dd064d9c699ddc93c0994d",
      "commitAuthor": "rnveach",
      "commitDateOld": "23/02/19 3:46 AM",
      "commitNameOld": "86dcb80041a872232b108a51cb502da082f3c640",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 14.79,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private static String getHashCodeBasedOnObjectContent(Serializable object) {\n         try {\n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             // in-memory serialization of Configuration\n             serialize(object, outputStream);\n             // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n-            return BaseEncoding.base16().upperCase().encode(digest.digest());\n+            return new BigInteger(1, digest.digest()).toString(BASE_16).toUpperCase(Locale.ROOT);\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getHashCodeBasedOnObjectContent(Serializable object) {\n        try {\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            // in-memory serialization of Configuration\n            serialize(object, outputStream);\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return new BigInteger(1, digest.digest()).toString(BASE_16).toUpperCase(Locale.ROOT);\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "fc44df83dfaecd3d7b08ae41f6a88a958d38cf60": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5027: remove use of javax.xml.bind.DatatypeConverter\n",
      "commitDate": "30/08/17 2:04 PM",
      "commitName": "fc44df83dfaecd3d7b08ae41f6a88a958d38cf60",
      "commitAuthor": "Oliver Siegmar",
      "commitDateOld": "17/08/17 5:06 PM",
      "commitNameOld": "4acf7a786285d95d2c544f6d7daf6b31b86e0b44",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 12.87,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private static String getHashCodeBasedOnObjectContent(Serializable object) {\n         try {\n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             // in-memory serialization of Configuration\n             serialize(object, outputStream);\n             // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n-            return DatatypeConverter.printHexBinary(digest.digest());\n+            return BaseEncoding.base16().upperCase().encode(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getHashCodeBasedOnObjectContent(Serializable object) {\n        try {\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            // in-memory serialization of Configuration\n            serialize(object, outputStream);\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return BaseEncoding.base16().upperCase().encode(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4713: fix all violations from the third part of idea violations\n",
      "commitDate": "20/07/17 10:04 PM",
      "commitName": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "25/05/17 5:49 PM",
      "commitNameOld": "ec159c79a34b221802724a5ce8d252419b6a9139",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 56.18,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,19 @@\n     private static String getHashCodeBasedOnObjectContent(Serializable object) {\n         try {\n-            // im-memory serialization of Configuration\n-\n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n-            ObjectOutputStream oos \u003d null;\n-            try {\n-                oos \u003d new ObjectOutputStream(outputStream);\n-                oos.writeObject(object);\n-            }\n-            finally {\n-                flushAndCloseOutStream(oos);\n-            }\n-\n+            // in-memory serialization of Configuration\n+            serialize(object, outputStream);\n             // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n             return DatatypeConverter.printHexBinary(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getHashCodeBasedOnObjectContent(Serializable object) {\n        try {\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            // in-memory serialization of Configuration\n            serialize(object, outputStream);\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return DatatypeConverter.printHexBinary(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "ecbeaa6e1df7cb021745e111b04395b9fbd509c7": {
      "type": "Yrename",
      "commitMessage": "Issue #407: Fix cache usage in presence of modules which use external resources for configuration (#3092)",
      "commitDate": "16/05/16 1:53 PM",
      "commitName": "ecbeaa6e1df7cb021745e111b04395b9fbd509c7",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "13/04/16 6:39 AM",
      "commitNameOld": "b5d2fc84d781d32d4d3369a4791de3733ee9d42d",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-    private static String getConfigHashCode(Serializable object) {\n+    private static String getHashCodeBasedOnObjectContent(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(outputStream);\n                 oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n             return DatatypeConverter.printHexBinary(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getHashCodeBasedOnObjectContent(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(outputStream);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return DatatypeConverter.printHexBinary(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {
        "oldValue": "getConfigHashCode",
        "newValue": "getHashCodeBasedOnObjectContent"
      }
    },
    "b5d2fc84d781d32d4d3369a4791de3733ee9d42d": {
      "type": "Ybodychange",
      "commitMessage": "Pull #3093: Use DatatypeConverter#printHexBinary to convert byte array to hex String in PropertyCacheFile (#3093)",
      "commitDate": "13/04/16 6:39 AM",
      "commitName": "b5d2fc84d781d32d4d3369a4791de3733ee9d42d",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "19/02/16 5:38 AM",
      "commitNameOld": "f6bec165c9c6b6d8cc430cb0694dd42ccb0b7f69",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 54.0,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(outputStream);\n                 oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n-            return hexEncode(digest.digest());\n+            return DatatypeConverter.printHexBinary(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(outputStream);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return DatatypeConverter.printHexBinary(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "18/10/15 6:03 AM",
      "commitName": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "06/10/15 5:46 PM",
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 11.51,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(outputStream);\n                 oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n-            // Instead of hexEncoding baos.toByteArray() directly we\n+            // Instead of hexEncoding outputStream.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n             digest.update(outputStream.toByteArray());\n \n             return hexEncode(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(outputStream);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding outputStream.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return hexEncode(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "03/09/15 6:06 PM",
      "commitNameOld": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 32.99,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(outputStream);\n                 oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n-            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n-            md.update(outputStream.toByteArray());\n+            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n+            digest.update(outputStream.toByteArray());\n \n-            return hexEncode(md.digest());\n+            return hexEncode(digest.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(outputStream);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-1\");\n            digest.update(outputStream.toByteArray());\n\n            return hexEncode(digest.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "2b4a02d2c8a498a8a1ee38e9396426209fa65fad": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n\nFixes `SpellCheckingInspection` inspection violations introduced in recent commits.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "03/09/15 6:06 PM",
      "commitName": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "31/08/15 12:58 PM",
      "commitNameOld": "49a0ee81710e0c43ed06a01f1d64ac7f5598a934",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n-            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n-                oos \u003d new ObjectOutputStream(baos);\n+                oos \u003d new ObjectOutputStream(outputStream);\n                 oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n-            md.update(baos.toByteArray());\n+            md.update(outputStream.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(outputStream);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(outputStream.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "ea9ff3965d9c657b5b7bd2d969e075f430635c47": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "100% UTs coverage for PropertyCacheFile. Refactoring of PropertyCacheFile. #1294\n",
      "commitDate": "28/07/15 10:12 AM",
      "commitName": "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
      "commitAuthor": "Roman Ivanov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "100% UTs coverage for PropertyCacheFile. Refactoring of PropertyCacheFile. #1294\n",
          "commitDate": "28/07/15 10:12 AM",
          "commitName": "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
          "commitAuthor": "Roman Ivanov",
          "commitDateOld": "22/07/15 10:58 PM",
          "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
          "commitAuthorOld": "Aleksandr Ivanov",
          "daysBetweenCommits": 5.47,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    private static String getConfigHashCode(Serializable configuration) {\n+    private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n-                oos.writeObject(configuration);\n+                oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {
            "oldValue": "[configuration-Serializable]",
            "newValue": "[object-Serializable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "100% UTs coverage for PropertyCacheFile. Refactoring of PropertyCacheFile. #1294\n",
          "commitDate": "28/07/15 10:12 AM",
          "commitName": "ea9ff3965d9c657b5b7bd2d969e075f430635c47",
          "commitAuthor": "Roman Ivanov",
          "commitDateOld": "22/07/15 10:58 PM",
          "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
          "commitAuthorOld": "Aleksandr Ivanov",
          "daysBetweenCommits": 5.47,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    private static String getConfigHashCode(Serializable configuration) {\n+    private static String getConfigHashCode(Serializable object) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n-                oos.writeObject(configuration);\n+                oos.writeObject(object);\n             }\n             finally {\n                 flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getConfigHashCode(Serializable object) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(object);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
          "commitDate": "17/07/15 9:51 PM",
          "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "28/06/15 10:13 AM",
          "commitNameOld": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 19.48,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    private String getConfigHashCode(Serializable configuration) {\n+    private static String getConfigHashCode(Serializable configuration) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n                 oos.writeObject(configuration);\n             }\n             finally {\n-                this.flushAndCloseOutStream(oos);\n+                flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getConfigHashCode(Serializable configuration) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
          "commitDate": "17/07/15 9:51 PM",
          "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "28/06/15 10:13 AM",
          "commitNameOld": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 19.48,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    private String getConfigHashCode(Serializable configuration) {\n+    private static String getConfigHashCode(Serializable configuration) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n                 oos.writeObject(configuration);\n             }\n             finally {\n-                this.flushAndCloseOutStream(oos);\n+                flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final IOException | NoSuchAlgorithmException ex) {\n             // rethrow as unchecked exception\n             throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getConfigHashCode(Serializable configuration) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations of AvoidCatchingGenericException rule. #959\n",
      "commitDate": "28/06/15 10:13 AM",
      "commitName": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/06/15 10:13 AM",
      "commitNameOld": "1b5c3936f53b0dd9f149faef9ead6fce20a4cb31",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private String getConfigHashCode(Serializable configuration) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n                 oos.writeObject(configuration);\n             }\n             finally {\n                 this.flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n-        catch (final Exception ex) { // IO, NoSuchAlgorithm\n-            LOG.debug(\"Unable to calculate hashcode.\", ex);\n-            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n+        catch (final IOException | NoSuchAlgorithmException ex) {\n+            // rethrow as unchecked exception\n+            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable configuration) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final IOException | NoSuchAlgorithmException ex) {\n            // rethrow as unchecked exception\n            throw new IllegalStateException(\"Unable to calculate hashcode.\", ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "1b5c3936f53b0dd9f149faef9ead6fce20a4cb31": {
      "type": "Ybodychange",
      "commitMessage": "Use SHA-1 instead on non-standard SHA in PropertyCacheFile. #1251\n",
      "commitDate": "28/06/15 10:13 AM",
      "commitName": "1b5c3936f53b0dd9f149faef9ead6fce20a4cb31",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 42.23,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private String getConfigHashCode(Serializable configuration) {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n                 oos.writeObject(configuration);\n             }\n             finally {\n                 this.flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n-            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n+            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final Exception ex) { // IO, NoSuchAlgorithm\n             LOG.debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable configuration) {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            LOG.debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027logging-jakarta\u0027 ruleset, issue #871\n",
      "commitDate": "13/04/15 2:43 PM",
      "commitName": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/04/15 4:15 PM",
      "commitNameOld": "547fb51b1db4533e6e1a03aa528a2fed5de828e9",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n     private String getConfigHashCode(Serializable configuration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n                 oos.writeObject(configuration);\n             }\n             finally {\n                 this.flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final Exception ex) { // IO, NoSuchAlgorithm\n-            Utils.getExceptionLogger()\n-                .debug(\"Unable to calculate hashcode.\", ex);\n+            LOG.debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable configuration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            LOG.debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "19/01/15 6:38 AM",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "19/01/15 6:38 AM",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/11/14 9:14 AM",
          "commitNameOld": "485e05db239279af4caeaf76b406b058144ea438",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 66.89,
          "commitsBetweenForRepo": 231,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private String getConfigHashCode(Serializable aConfiguration)\n+    private String getConfigHashCode(Serializable configuration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n-                oos.writeObject(aConfiguration);\n+                oos.writeObject(configuration);\n             }\n             finally {\n                 this.flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final Exception ex) { // IO, NoSuchAlgorithm\n             Utils.getExceptionLogger()\n                 .debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(Serializable configuration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {
            "oldValue": "[aConfiguration-Serializable]",
            "newValue": "[configuration-Serializable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
          "commitDate": "19/01/15 6:38 AM",
          "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/11/14 9:14 AM",
          "commitNameOld": "485e05db239279af4caeaf76b406b058144ea438",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 66.89,
          "commitsBetweenForRepo": 231,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private String getConfigHashCode(Serializable aConfiguration)\n+    private String getConfigHashCode(Serializable configuration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d null;\n             try {\n                 oos \u003d new ObjectOutputStream(baos);\n-                oos.writeObject(aConfiguration);\n+                oos.writeObject(configuration);\n             }\n             finally {\n                 this.flushAndCloseOutStream(oos);\n             }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final Exception ex) { // IO, NoSuchAlgorithm\n             Utils.getExceptionLogger()\n                 .debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(Serializable configuration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(configuration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(aConfiguration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java"
      }
    },
    "d2af4accdde3eac0a2103353f490e97bf62f61d2": {
      "type": "Ybodychange",
      "commitMessage": "Apply parts of patch #1952556 fixing some FindBugs bugs. Thanks to Travis Schneeberger\n",
      "commitDate": "01/07/08 8:16 PM",
      "commitName": "d2af4accdde3eac0a2103353f490e97bf62f61d2",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "12/01/08 6:47 PM",
      "commitNameOld": "5a7e221b757e91d49be1aea105eb4b839e653fbd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 171.02,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n     private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-            final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n-            oos.writeObject(aConfiguration);\n-            oos.flush();\n-            oos.close();\n+            ObjectOutputStream oos \u003d null;\n+            try {\n+                oos \u003d new ObjectOutputStream(baos);\n+                oos.writeObject(aConfiguration);\n+            }\n+            finally {\n+                this.flushAndCloseOutStream(oos);\n+            }\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (final Exception ex) { // IO, NoSuchAlgorithm\n             Utils.getExceptionLogger()\n                 .debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d null;\n            try {\n                oos \u003d new ObjectOutputStream(baos);\n                oos.writeObject(aConfiguration);\n            }\n            finally {\n                this.flushAndCloseOutStream(oos);\n            }\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:33 PM",
      "commitNameOld": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n-        catch (Exception ex) { // IO, NoSuchAlgorithm\n+        catch (final Exception ex) { // IO, NoSuchAlgorithm\n             Utils.getExceptionLogger()\n                 .debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (final Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "864c681eef6521082729167ffdaabd2af1e813ed": {
      "type": "Ybodychange",
      "commitMessage": "Applied fix for cache file from patch 1012389\n",
      "commitDate": "18/07/05 9:35 AM",
      "commitName": "864c681eef6521082729167ffdaabd2af1e813ed",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 190.24,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n             final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n-            ex.printStackTrace();\n+            Utils.getExceptionLogger()\n+                .debug(\"Unable to calculate hashcode.\", ex);\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            Utils.getExceptionLogger()\n                .debug(\"Unable to calculate hashcode.\", ex);\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 224.68,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n             // im-memory serialization of Configuration\n \n-            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n-            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n+            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+            final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n-            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n+            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n             ex.printStackTrace();\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            final ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            final ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            final MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
      "extendedDetails": {}
    },
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "avalonization\n",
      "commitDate": "30/11/02 10:29 AM",
      "commitName": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "avalonization\n",
          "commitDate": "30/11/02 10:29 AM",
          "commitName": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "14/11/02 2:07 AM",
          "commitNameOld": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
          "commitAuthorOld": "Rick Giles",
          "daysBetweenCommits": 16.35,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private String getConfigHashCode(GlobalProperties aConfiguration)\n+    private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n-            // im-memory serialization of GlobalProperties\n+            // im-memory serialization of Configuration\n \n             ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n             ex.printStackTrace();\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {
            "oldValue": "[aConfiguration-GlobalProperties]",
            "newValue": "[aConfiguration-Serializable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "avalonization\n",
          "commitDate": "30/11/02 10:29 AM",
          "commitName": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "14/11/02 2:07 AM",
          "commitNameOld": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
          "commitAuthorOld": "Rick Giles",
          "daysBetweenCommits": 16.35,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private String getConfigHashCode(GlobalProperties aConfiguration)\n+    private String getConfigHashCode(Serializable aConfiguration)\n     {\n         try {\n-            // im-memory serialization of GlobalProperties\n+            // im-memory serialization of Configuration\n \n             ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n             ex.printStackTrace();\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(Serializable aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "rename Configuration to GlobalProperties\n",
      "commitDate": "14/11/02 2:07 AM",
      "commitName": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "rename Configuration to GlobalProperties\n",
          "commitDate": "14/11/02 2:07 AM",
          "commitName": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "28/05/02 6:39 AM",
          "commitNameOld": "34770c3eaa9ad06297c13fd43a55739c02c7d67d",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 169.85,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private String getConfigHashCode(Configuration aConfiguration)\n+    private String getConfigHashCode(GlobalProperties aConfiguration)\n     {\n         try {\n-            // im-memory serialization of Configuration\n+            // im-memory serialization of GlobalProperties\n \n             ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n             ex.printStackTrace();\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(GlobalProperties aConfiguration)\n    {\n        try {\n            // im-memory serialization of GlobalProperties\n\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {
            "oldValue": "[aConfiguration-Configuration]",
            "newValue": "[aConfiguration-GlobalProperties]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "rename Configuration to GlobalProperties\n",
          "commitDate": "14/11/02 2:07 AM",
          "commitName": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "28/05/02 6:39 AM",
          "commitNameOld": "34770c3eaa9ad06297c13fd43a55739c02c7d67d",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 169.85,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private String getConfigHashCode(Configuration aConfiguration)\n+    private String getConfigHashCode(GlobalProperties aConfiguration)\n     {\n         try {\n-            // im-memory serialization of Configuration\n+            // im-memory serialization of GlobalProperties\n \n             ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n             ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n             oos.writeObject(aConfiguration);\n             oos.flush();\n             oos.close();\n \n             // Instead of hexEncoding baos.toByteArray() directly we\n             // use a message digest here to keep the length of the\n             // hashcode reasonable\n \n             MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n             md.update(baos.toByteArray());\n \n             return hexEncode(md.digest());\n         }\n         catch (Exception ex) { // IO, NoSuchAlgorithm\n             ex.printStackTrace();\n             return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String getConfigHashCode(GlobalProperties aConfiguration)\n    {\n        try {\n            // im-memory serialization of GlobalProperties\n\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject(aConfiguration);\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java",
          "extendedDetails": {}
        }
      ]
    },
    "ec1e3e834918a32d63025d60175189b3437769d7": {
      "type": "Yintroduced",
      "commitMessage": "fix for bug #522282, \"Cache not invalidated upon param. change\"\n\n- all classes that contribute to Configuration are now Serializable\n- use in-memory serialization to compute a hashcode of the Configuration\n- store the hashcode in the cache file\n- compare cached hashcode with current hashcode and invalidate cache accordingly\n",
      "commitDate": "05/03/02 12:53 PM",
      "commitName": "ec1e3e834918a32d63025d60175189b3437769d7",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,25 @@\n+    private String getConfigHashCode(Configuration aConfiguration)\n+    {\n+        try {\n+            // im-memory serialization of Configuration\n+\n+            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n+            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n+            oos.writeObject( aConfiguration );\n+            oos.flush();\n+            oos.close();\n+\n+            // Instead of hexEncoding baos.toByteArray() directly we\n+            // use a message digest here to keep the length of the\n+            // hashcode reasonable\n+\n+            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n+            md.update(baos.toByteArray());\n+\n+            return hexEncode(md.digest());\n+        }\n+        catch (Exception ex) { // IO, NoSuchAlgorithm\n+            ex.printStackTrace();\n+            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private String getConfigHashCode(Configuration aConfiguration)\n    {\n        try {\n            // im-memory serialization of Configuration\n\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            ObjectOutputStream oos \u003d new ObjectOutputStream(baos);\n            oos.writeObject( aConfiguration );\n            oos.flush();\n            oos.close();\n\n            // Instead of hexEncoding baos.toByteArray() directly we\n            // use a message digest here to keep the length of the\n            // hashcode reasonable\n\n            MessageDigest md \u003d MessageDigest.getInstance(\"SHA\");\n            md.update(baos.toByteArray());\n\n            return hexEncode(md.digest());\n        }\n        catch (Exception ex) { // IO, NoSuchAlgorithm\n            ex.printStackTrace();\n            return \"ALWAYS FRESH: \" + System.currentTimeMillis();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java"
    }
  }
}