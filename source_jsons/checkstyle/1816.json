{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "collectDeclarations",
  "functionId": "collectDeclarations___frameStack-Deque__AbstractFrame____ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 484,
  "functionEndLine": 546,
  "numCommitsSeen": 125,
  "timeTaken": 3618,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "253de634b108f3869a0136d33049e28877fea038",
    "e702daf7bff9409a96a9df6bd7eb9405feb62549",
    "c5e71f74c3089c3370385f6673366c53a1c224bc",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4",
    "e4d90d68f56a67ea79fbafd09dba4ace1f7f023c",
    "619e3b3dce014c88ca403b068c00e8bf02db2892",
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
    "6c04cd63af392376159dc7aae41d85bbc348e96d",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
    "4424370783f1c41fc1e146f554468f89e8f0e88b"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "253de634b108f3869a0136d33049e28877fea038": "Ybodychange",
    "e702daf7bff9409a96a9df6bd7eb9405feb62549": "Ybodychange",
    "c5e71f74c3089c3370385f6673366c53a1c224bc": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": "Ybodychange",
    "e4d90d68f56a67ea79fbafd09dba4ace1f7f023c": "Ybodychange",
    "619e3b3dce014c88ca403b068c00e8bf02db2892": "Ybodychange",
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Ybodychange",
    "6c04cd63af392376159dc7aae41d85bbc348e96d": "Ymultichange(Yparameterchange,Ybodychange)",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": "Ybodychange",
    "4424370783f1c41fc1e146f554468f89e8f0e88b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n-                if (!CheckUtils.isReceiverParameter(ast)\n+                if (!CheckUtil.isReceiverParameter(ast)\n                         \u0026\u0026 !isLambdaParameter(ast)\n                         \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                 if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                     ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 else {\n                     ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             case TokenTypes.ENUM_CONSTANT_DEF :\n                 final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 ((ClassFrame) frame).addStaticMember(ident);\n                 break;\n             case TokenTypes.LITERAL_CATCH:\n                 final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                 catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                         TokenTypes.IDENT));\n                 frameStack.addFirst(catchFrame);\n                 break;\n             case TokenTypes.LITERAL_FOR:\n                 final AbstractFrame forFrame \u003d new ForFrame(frame, ast);\n                 frameStack.addFirst(forFrame);\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtil.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)\n                        \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.ENUM_CONSTANT_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                ((ClassFrame) frame).addStaticMember(ident);\n                break;\n            case TokenTypes.LITERAL_CATCH:\n                final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                        TokenTypes.IDENT));\n                frameStack.addFirst(catchFrame);\n                break;\n            case TokenTypes.LITERAL_FOR:\n                final AbstractFrame forFrame \u003d new ForFrame(frame, ast);\n                frameStack.addFirst(forFrame);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "253de634b108f3869a0136d33049e28877fea038": {
      "type": "Ybodychange",
      "commitMessage": "Pull #5392: fixed RequireThisCheck and for loop variable handling",
      "commitDate": "26/12/17 1:51 PM",
      "commitName": "253de634b108f3869a0136d33049e28877fea038",
      "commitAuthor": "rnveach",
      "commitDateOld": "25/12/17 3:16 PM",
      "commitNameOld": "36fdb1ba18843c9e5a6e3a7e3bbacfad7fde7369",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)\n                         \u0026\u0026 !isLambdaParameter(ast)\n                         \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                 if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                     ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 else {\n                     ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             case TokenTypes.ENUM_CONSTANT_DEF :\n                 final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 ((ClassFrame) frame).addStaticMember(ident);\n                 break;\n             case TokenTypes.LITERAL_CATCH:\n                 final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                 catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                         TokenTypes.IDENT));\n                 frameStack.addFirst(catchFrame);\n                 break;\n+            case TokenTypes.LITERAL_FOR:\n+                final AbstractFrame forFrame \u003d new ForFrame(frame, ast);\n+                frameStack.addFirst(forFrame);\n+                break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)\n                        \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.ENUM_CONSTANT_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                ((ClassFrame) frame).addStaticMember(ident);\n                break;\n            case TokenTypes.LITERAL_CATCH:\n                final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                        TokenTypes.IDENT));\n                frameStack.addFirst(catchFrame);\n                break;\n            case TokenTypes.LITERAL_FOR:\n                final AbstractFrame forFrame \u003d new ForFrame(frame, ast);\n                frameStack.addFirst(forFrame);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "e702daf7bff9409a96a9df6bd7eb9405feb62549": {
      "type": "Ybodychange",
      "commitMessage": "Pull #5361: fixed RequireThisCheck and enum constants handling",
      "commitDate": "15/12/17 10:27 AM",
      "commitName": "e702daf7bff9409a96a9df6bd7eb9405feb62549",
      "commitAuthor": "rnveach",
      "commitDateOld": "13/12/17 9:43 PM",
      "commitNameOld": "c5e71f74c3089c3370385f6673366c53a1c224bc",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.53,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,59 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)\n                         \u0026\u0026 !isLambdaParameter(ast)\n                         \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                 if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                     ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 else {\n                     ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n+            case TokenTypes.ENUM_CONSTANT_DEF :\n+                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                ((ClassFrame) frame).addStaticMember(ident);\n+                break;\n             case TokenTypes.LITERAL_CATCH:\n                 final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                 catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                         TokenTypes.IDENT));\n                 frameStack.addFirst(catchFrame);\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)\n                        \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.ENUM_CONSTANT_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                ((ClassFrame) frame).addStaticMember(ident);\n                break;\n            case TokenTypes.LITERAL_CATCH:\n                final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                        TokenTypes.IDENT));\n                frameStack.addFirst(catchFrame);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "c5e71f74c3089c3370385f6673366c53a1c224bc": {
      "type": "Ybodychange",
      "commitMessage": "Pull #5351: fixed RequireThisCheck and catch variable handling",
      "commitDate": "13/12/17 9:43 PM",
      "commitName": "c5e71f74c3089c3370385f6673366c53a1c224bc",
      "commitAuthor": "rnveach",
      "commitDateOld": "14/11/17 5:16 PM",
      "commitNameOld": "32e2b7ba57e189074662d84a04535a87c3a19b0c",
      "commitAuthorOld": "Subbu Dantu",
      "daysBetweenCommits": 29.19,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,55 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)\n-                        \u0026\u0026 !isLambdaParameter(ast)) {\n+                        \u0026\u0026 !isLambdaParameter(ast)\n+                        \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                 if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                     ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 else {\n                     ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n+            case TokenTypes.LITERAL_CATCH:\n+                final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n+                catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n+                        TokenTypes.IDENT));\n+                frameStack.addFirst(catchFrame);\n+                break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)\n                        \u0026\u0026 ast.getParent().getType() !\u003d TokenTypes.LITERAL_CATCH) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.LITERAL_CATCH:\n                final AbstractFrame catchFrame \u003d new CatchFrame(frame, ast);\n                catchFrame.addIdent(ast.findFirstToken(TokenTypes.PARAMETER_DEF).findFirstToken(\n                        TokenTypes.IDENT));\n                frameStack.addFirst(catchFrame);\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "01/08/17 4:59 AM",
      "commitNameOld": "1efd7acd6ca48569fd09a2a00e5a78505d772743",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 85.62,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)\n                         \u0026\u0026 !isLambdaParameter(ast)) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n-                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n+                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n+                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 else {\n-                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n+                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4207: Fixed false positives from RequireThis for lambdas\n",
      "commitDate": "23/05/17 6:02 AM",
      "commitName": "bb05231428d62fa6e253fa3f55a47335c958f4b4",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": "11/05/17 2:56 PM",
      "commitNameOld": "073c370de2e65fc346b51ef09763ecb30b5cd14f",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.63,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n-                if (!CheckUtils.isReceiverParameter(ast)) {\n+                if (!CheckUtils.isReceiverParameter(ast)\n+                        \u0026\u0026 !isLambdaParameter(ast)) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                 if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                     ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                 }\n                 else {\n                     ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)\n                        \u0026\u0026 !isLambdaParameter(ast)) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "e4d90d68f56a67ea79fbafd09dba4ace1f7f023c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3848: Remove unnecessary if-block to increase code coverage\n",
      "commitDate": "26/02/17 9:43 AM",
      "commitName": "e4d90d68f56a67ea79fbafd09dba4ace1f7f023c",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "25/02/17 6:55 AM",
      "commitNameOld": "55aa8cedc60d4faa776d7a36f8ae2d0bed0ada45",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n-                    final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n-                        ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n-                    }\n-                    else {\n-                        ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n-                    }\n+                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n+                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n+                }\n+                else {\n+                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             case TokenTypes.LITERAL_NEW:\n                 if (isAnonymousClassDef(ast)) {\n                     frameStack.addFirst(new AnonymousClassFrame(frame,\n                             ast.getFirstChild().toString()));\n                 }\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                    ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                }\n                else {\n                    ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "619e3b3dce014c88ca403b068c00e8bf02db2892": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3041: RequireThisCheck doesn\u0027t see outer classes for anonymous classes\n",
      "commitDate": "28/01/17 5:02 AM",
      "commitName": "619e3b3dce014c88ca403b068c00e8bf02db2892",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,49 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 if (!CheckUtils.isReceiverParameter(ast)) {\n                     final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                     frame.addIdent(parameterIdent);\n                 }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                     final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                         ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                     }\n                     else {\n                         ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                     }\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n+            case TokenTypes.LITERAL_NEW:\n+                if (isAnonymousClassDef(ast)) {\n+                    frameStack.addFirst(new AnonymousClassFrame(frame,\n+                            ast.getFirstChild().toString()));\n+                }\n+                break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                    final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            case TokenTypes.LITERAL_NEW:\n                if (isAnonymousClassDef(ast)) {\n                    frameStack.addFirst(new AnonymousClassFrame(frame,\n                            ast.getFirstChild().toString()));\n                }\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3239: fixed checks that fail on new receiver parameter (#3272)\n\n",
      "commitDate": "16/06/16 2:33 PM",
      "commitName": "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/03/16 6:34 AM",
      "commitNameOld": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 104.29,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n     private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n-                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frame.addIdent(parameterIdent);\n+                if (!CheckUtils.isReceiverParameter(ast)) {\n+                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                    frame.addIdent(parameterIdent);\n+                }\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                     final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                         ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                     }\n                     else {\n                         ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                     }\n                 }\n                 frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                if (!CheckUtils.isReceiverParameter(ast)) {\n                    final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                    frame.addIdent(parameterIdent);\n                }\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                    final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": "04/03/16 6:34 AM",
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "19/02/16 5:38 AM",
      "commitNameOld": "f6bec165c9c6b6d8cc430cb0694dd42ccb0b7f69",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 14.04,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,41 @@\n-    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack,\n-        DetailAST ast) {\n+    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n         final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frame.addIdent(parameterIdent);\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n-                final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frameStack.addFirst(new ClassFrame(frame, classIdent.getText()));\n+                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                 break;\n             case TokenTypes.SLIST :\n-                frameStack.addFirst(new BlockFrame(frame));\n+                frameStack.addFirst(new BlockFrame(frame, ast));\n                 break;\n             case TokenTypes.METHOD_DEF :\n-                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n-                    final DetailAST mods \u003d\n-                            ast.findFirstToken(TokenTypes.MODIFIERS);\n+                    final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n-                        ((ClassFrame) frame).addStaticMethod(ident);\n+                        ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                     }\n                     else {\n-                        ((ClassFrame) frame).addInstanceMethod(ident);\n+                        ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                     }\n                 }\n-                frameStack.addFirst(new MethodFrame(frame));\n+                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                 break;\n             case TokenTypes.CTOR_DEF :\n-                frameStack.addFirst(new MethodFrame(frame));\n+                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack, DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addIdent(parameterIdent);\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classFrameNameIdent));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame, ast));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST methodFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                    final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(methodFrameNameIdent);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(methodFrameNameIdent);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame, methodFrameNameIdent));\n                break;\n            case TokenTypes.CTOR_DEF :\n                final DetailAST ctorFrameNameIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ConstructorFrame(frame, ctorFrameNameIdent));\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "6c04cd63af392376159dc7aae41d85bbc348e96d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2239: Extend RequireThis check message\n",
      "commitDate": "24/12/15 1:56 PM",
      "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2239: Extend RequireThis check message\n",
          "commitDate": "24/12/15 1:56 PM",
          "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "15/11/15 11:01 PM",
          "commitNameOld": "11639b8437306390798d85fc54422b4559f553c3",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 38.62,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,42 @@\n-    private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n+    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack,\n         DetailAST ast) {\n-        final LexicalFrame frame \u003d frameStack.peek();\n+        final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frame.addIdent(parameterIdent);\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frame.addIdent(classIdent);\n-                frameStack.addFirst(new ClassFrame(frame));\n+                frameStack.addFirst(new ClassFrame(frame, classIdent.getText()));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                if (frame instanceof ClassFrame) {\n+                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                     final DetailAST mods \u003d\n                             ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                         ((ClassFrame) frame).addStaticMethod(ident);\n                     }\n                     else {\n                         ((ClassFrame) frame).addInstanceMethod(ident);\n                     }\n                 }\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack,\n        DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addIdent(parameterIdent);\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classIdent.getText()));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                    final DetailAST mods \u003d\n                            ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(ident);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(ident);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            case TokenTypes.CTOR_DEF :\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            default:\n                // do nothing\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {
            "oldValue": "[frameStack-Deque\u003cLexicalFrame\u003e, ast-DetailAST]",
            "newValue": "[frameStack-Deque\u003cAbstractFrame\u003e, ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2239: Extend RequireThis check message\n",
          "commitDate": "24/12/15 1:56 PM",
          "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "15/11/15 11:01 PM",
          "commitNameOld": "11639b8437306390798d85fc54422b4559f553c3",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 38.62,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,42 @@\n-    private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n+    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack,\n         DetailAST ast) {\n-        final LexicalFrame frame \u003d frameStack.peek();\n+        final AbstractFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n                 final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 frame.addIdent(parameterIdent);\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n                 final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frame.addIdent(classIdent);\n-                frameStack.addFirst(new ClassFrame(frame));\n+                frameStack.addFirst(new ClassFrame(frame, classIdent.getText()));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame));\n                 break;\n             case TokenTypes.METHOD_DEF :\n                 final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                if (frame instanceof ClassFrame) {\n+                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                     final DetailAST mods \u003d\n                             ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                         ((ClassFrame) frame).addStaticMethod(ident);\n                     }\n                     else {\n                         ((ClassFrame) frame).addInstanceMethod(ident);\n                     }\n                 }\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static void collectDeclarations(Deque\u003cAbstractFrame\u003e frameStack,\n        DetailAST ast) {\n        final AbstractFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addIdent(parameterIdent);\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frameStack.addFirst(new ClassFrame(frame, classIdent.getText()));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                    final DetailAST mods \u003d\n                            ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(ident);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(ident);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            case TokenTypes.CTOR_DEF :\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            default:\n                // do nothing\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2240: Fix false negative in RequireThisCheck\n",
      "commitDate": "15/11/15 6:23 AM",
      "commitName": "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "07/11/15 5:12 PM",
      "commitNameOld": "4424370783f1c41fc1e146f554468f89e8f0e88b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.55,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n         DetailAST ast) {\n         final LexicalFrame frame \u003d frameStack.peek();\n         switch (ast.getType()) {\n             case TokenTypes.VARIABLE_DEF :\n                 collectVariableDeclarations(ast, frame);\n                 break;\n             case TokenTypes.PARAMETER_DEF :\n-                final DetailAST parameterAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frame.addName(parameterAST.getText());\n+                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frame.addIdent(parameterIdent);\n                 break;\n             case TokenTypes.CLASS_DEF :\n             case TokenTypes.INTERFACE_DEF :\n             case TokenTypes.ENUM_DEF :\n             case TokenTypes.ANNOTATION_DEF :\n-                final DetailAST classAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-                frame.addName(classAST.getText());\n+                final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frame.addIdent(classIdent);\n                 frameStack.addFirst(new ClassFrame(frame));\n                 break;\n             case TokenTypes.SLIST :\n                 frameStack.addFirst(new BlockFrame(frame));\n                 break;\n             case TokenTypes.METHOD_DEF :\n-                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 if (frame instanceof ClassFrame) {\n                     final DetailAST mods \u003d\n                             ast.findFirstToken(TokenTypes.MODIFIERS);\n                     if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n-                        ((ClassFrame) frame).addStaticMethod(name);\n+                        ((ClassFrame) frame).addStaticMethod(ident);\n                     }\n                     else {\n-                        ((ClassFrame) frame).addInstanceMethod(name);\n+                        ((ClassFrame) frame).addInstanceMethod(ident);\n                     }\n                 }\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             case TokenTypes.CTOR_DEF :\n                 frameStack.addFirst(new MethodFrame(frame));\n                 break;\n             default:\n                 // do nothing\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n        DetailAST ast) {\n        final LexicalFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                final DetailAST parameterIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addIdent(parameterIdent);\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classIdent \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addIdent(classIdent);\n                frameStack.addFirst(new ClassFrame(frame));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                if (frame instanceof ClassFrame) {\n                    final DetailAST mods \u003d\n                            ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(ident);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(ident);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            case TokenTypes.CTOR_DEF :\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "4424370783f1c41fc1e146f554468f89e8f0e88b": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2451: removed excess hierarchy from RequireThisCheck",
      "commitDate": "07/11/15 5:12 PM",
      "commitName": "4424370783f1c41fc1e146f554468f89e8f0e88b",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,43 @@\n+    private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n+        DetailAST ast) {\n+        final LexicalFrame frame \u003d frameStack.peek();\n+        switch (ast.getType()) {\n+            case TokenTypes.VARIABLE_DEF :\n+                collectVariableDeclarations(ast, frame);\n+                break;\n+            case TokenTypes.PARAMETER_DEF :\n+                final DetailAST parameterAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frame.addName(parameterAST.getText());\n+                break;\n+            case TokenTypes.CLASS_DEF :\n+            case TokenTypes.INTERFACE_DEF :\n+            case TokenTypes.ENUM_DEF :\n+            case TokenTypes.ANNOTATION_DEF :\n+                final DetailAST classAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                frame.addName(classAST.getText());\n+                frameStack.addFirst(new ClassFrame(frame));\n+                break;\n+            case TokenTypes.SLIST :\n+                frameStack.addFirst(new BlockFrame(frame));\n+                break;\n+            case TokenTypes.METHOD_DEF :\n+                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+                if (frame instanceof ClassFrame) {\n+                    final DetailAST mods \u003d\n+                            ast.findFirstToken(TokenTypes.MODIFIERS);\n+                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n+                        ((ClassFrame) frame).addStaticMethod(name);\n+                    }\n+                    else {\n+                        ((ClassFrame) frame).addInstanceMethod(name);\n+                    }\n+                }\n+                frameStack.addFirst(new MethodFrame(frame));\n+                break;\n+            case TokenTypes.CTOR_DEF :\n+                frameStack.addFirst(new MethodFrame(frame));\n+                break;\n+            default:\n+                // do nothing\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static void collectDeclarations(Deque\u003cLexicalFrame\u003e frameStack,\n        DetailAST ast) {\n        final LexicalFrame frame \u003d frameStack.peek();\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF :\n                collectVariableDeclarations(ast, frame);\n                break;\n            case TokenTypes.PARAMETER_DEF :\n                final DetailAST parameterAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addName(parameterAST.getText());\n                break;\n            case TokenTypes.CLASS_DEF :\n            case TokenTypes.INTERFACE_DEF :\n            case TokenTypes.ENUM_DEF :\n            case TokenTypes.ANNOTATION_DEF :\n                final DetailAST classAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n                frame.addName(classAST.getText());\n                frameStack.addFirst(new ClassFrame(frame));\n                break;\n            case TokenTypes.SLIST :\n                frameStack.addFirst(new BlockFrame(frame));\n                break;\n            case TokenTypes.METHOD_DEF :\n                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                if (frame instanceof ClassFrame) {\n                    final DetailAST mods \u003d\n                            ast.findFirstToken(TokenTypes.MODIFIERS);\n                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {\n                        ((ClassFrame) frame).addStaticMethod(name);\n                    }\n                    else {\n                        ((ClassFrame) frame).addInstanceMethod(name);\n                    }\n                }\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            case TokenTypes.CTOR_DEF :\n                frameStack.addFirst(new MethodFrame(frame));\n                break;\n            default:\n                // do nothing\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}