{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocTypeCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
  "functionStartLine": 323,
  "functionEndLine": 352,
  "numCommitsSeen": 120,
  "timeTaken": 4058,
  "changeHistory": [
    "5338fe396102dd4bf669c220531e31ec5ffeb789",
    "dd45616a0df1ba00e9e62ae9626df5929d94b225",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9",
    "9df81b38a8207ee85a55644b2f7a4c8828433f4b",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d8286130e83dc672d30cd00eddbf6b5f77112521",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "c18071b7561b99767e871be9d4d7711eb15b76f1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
    "e27489c7721909245ea5055eac3b9c7c659081f6",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
    "24ba45a971569b9702e6bf78c5c07c48beb25464",
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
    "661274b68096ccd5876abb8eacf7c8d42a939a0b",
    "730ade67d5f3f286c1004ce9a772fd4bc3bc9307",
    "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e",
    "eecd476fa8c6dba62f919a5ff1740d108848c867",
    "4d9e56e2b3253c5ccd4e7a4292afc9936512036a"
  ],
  "changeHistoryShort": {
    "5338fe396102dd4bf669c220531e31ec5ffeb789": "Ybodychange",
    "dd45616a0df1ba00e9e62ae9626df5929d94b225": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ybodychange",
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9": "Ybodychange",
    "9df81b38a8207ee85a55644b2f7a4c8828433f4b": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d8286130e83dc672d30cd00eddbf6b5f77112521": "Ybodychange",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ybodychange",
    "c18071b7561b99767e871be9d4d7711eb15b76f1": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": "Ybodychange",
    "e27489c7721909245ea5055eac3b9c7c659081f6": "Ybodychange",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": "Ybodychange",
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": "Ybodychange",
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": "Ybodychange",
    "24ba45a971569b9702e6bf78c5c07c48beb25464": "Ybodychange",
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc": "Yfilerename",
    "661274b68096ccd5876abb8eacf7c8d42a939a0b": "Ybodychange",
    "730ade67d5f3f286c1004ce9a772fd4bc3bc9307": "Ybodychange",
    "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e": "Ybodychange",
    "eecd476fa8c6dba62f919a5ff1740d108848c867": "Ybodychange",
    "4d9e56e2b3253c5ccd4e7a4292afc9936512036a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5338fe396102dd4bf669c220531e31ec5ffeb789": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7741: Update AbstractChecks to log DetailAST - JavadocType\n",
      "commitDate": "18/04/20 7:53 AM",
      "commitName": "5338fe396102dd4bf669c220531e31ec5ffeb789",
      "commitAuthor": "wltan",
      "commitDateOld": "16/04/20 6:39 AM",
      "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
      "commitAuthorOld": "Joseph Mate",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n             if (textBlock !\u003d null) {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                 if (ScopeUtil.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n-                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n+                    checkTag(ast, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormat);\n-                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n+                    checkTag(ast, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtil.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     // Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n-                            lineNo, tags, typeParamName);\n+                            ast, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock !\u003d null) {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtil.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(ast, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormat);\n                    checkTag(ast, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtil.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    // Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            ast, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "dd45616a0df1ba00e9e62ae9626df5929d94b225": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5411: split JavadocType for missing javadocs",
      "commitDate": "05/04/19 9:33 AM",
      "commitName": "dd45616a0df1ba00e9e62ae9626df5929d94b225",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 80.12,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n-            if (textBlock \u003d\u003d null) {\n-                log(lineNo, MSG_JAVADOC_MISSING);\n-            }\n-            else {\n+            if (textBlock !\u003d null) {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                 if (ScopeUtil.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtil.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock !\u003d null) {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtil.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtil.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n             if (textBlock \u003d\u003d null) {\n                 log(lineNo, MSG_JAVADOC_MISSING);\n             }\n             else {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n-                if (ScopeUtils.isOuterMostType(ast)) {\n+                if (ScopeUtil.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n-                    CheckUtils.getTypeParameterNames(ast);\n+                    CheckUtil.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock \u003d\u003d null) {\n                log(lineNo, MSG_JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtil.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtil.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
      "commitDate": "10/11/16 10:34 AM",
      "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
      "commitAuthor": "rnveach",
      "commitDateOld": "09/11/16 4:34 AM",
      "commitNameOld": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.25,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n             if (textBlock \u003d\u003d null) {\n                 log(lineNo, MSG_JAVADOC_MISSING);\n             }\n             else {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                 if (ScopeUtils.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n-                            authorFormatPattern, authorFormat);\n+                            authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n-                            versionFormatPattern, versionFormat);\n+                            versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock \u003d\u003d null) {\n                log(lineNo, MSG_JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtils.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n             if (textBlock \u003d\u003d null) {\n-                log(lineNo, JAVADOC_MISSING);\n+                log(lineNo, MSG_JAVADOC_MISSING);\n             }\n             else {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                 if (ScopeUtils.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormatPattern, authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormatPattern, versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock \u003d\u003d null) {\n                log(lineNo, MSG_JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtils.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormatPattern, authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormatPattern, versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "16/10/15 4:35 PM",
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/09/15 9:14 AM",
      "commitNameOld": "319b04ff74aaf0c08b9c417274872be47b93b346",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 31.31,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n-            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n-            if (cmt \u003d\u003d null) {\n+            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n+            if (textBlock \u003d\u003d null) {\n                 log(lineNo, JAVADOC_MISSING);\n             }\n             else {\n-                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n+                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                 if (ScopeUtils.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormatPattern, authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormatPattern, versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock textBlock \u003d contents.getJavadocBefore(lineNo);\n            if (textBlock \u003d\u003d null) {\n                log(lineNo, JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(textBlock);\n                if (ScopeUtils.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormatPattern, authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormatPattern, versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "4c1148db9982918e65f8d1156e8fb9c07b206fc9": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with questionable names. #1555\n\nFixes `QuestionableName` inspection violations.\n\nDescription:\n\u003eReports on any variables, methods, or classes with questionable names. This inspection is best used to report common metasyntactic variables which may be used as names by lazy or confused developers.\n Use the list below to specify names which should be reported\n",
      "commitDate": "07/08/15 9:40 PM",
      "commitName": "4c1148db9982918e65f8d1156e8fb9c07b206fc9",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "01/08/15 1:24 PM",
      "commitNameOld": "081c654df8d801f576506265681654a730cfc375",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, JAVADOC_MISSING);\n             }\n             else {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 if (ScopeUtils.isOuterMostType(ast)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                             authorFormatPattern, authorFormat);\n                     checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                             versionFormatPattern, versionFormat);\n                 }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n-                    for (final String string : typeParamNames) {\n+                    for (final String typeParamName : typeParamNames) {\n                         checkTypeParamTag(\n-                            lineNo, tags, string);\n+                            lineNo, tags, typeParamName);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                if (ScopeUtils.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormatPattern, authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormatPattern, versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String typeParamName : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamName);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "9df81b38a8207ee85a55644b2f7a4c8828433f4b": {
      "type": "Ybodychange",
      "commitMessage": "JavadocType does not check parameters in inner classes. #1421\n",
      "commitDate": "21/07/15 2:21 AM",
      "commitName": "9df81b38a8207ee85a55644b2f7a4c8828433f4b",
      "commitAuthor": "Pavel Baranchikov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 64.9,
      "commitsBetweenForRepo": 428,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, JAVADOC_MISSING);\n             }\n-            else if (ScopeUtils.isOuterMostType(ast)) {\n-                // don\u0027t check author/version for inner classes\n+            else {\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n-                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n-                         authorFormatPattern, authorFormat);\n-                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n-                         versionFormatPattern, versionFormat);\n+                if (ScopeUtils.isOuterMostType(ast)) {\n+                    // don\u0027t check author/version for inner classes\n+                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n+                            authorFormatPattern, authorFormat);\n+                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n+                            versionFormatPattern, versionFormat);\n+                }\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, JAVADOC_MISSING);\n            }\n            else {\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                if (ScopeUtils.isOuterMostType(ast)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                            authorFormatPattern, authorFormat);\n                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                            versionFormatPattern, versionFormat);\n                }\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d ast.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n-                log(lineNo, \"javadoc.missing\");\n+                log(lineNo, JAVADOC_MISSING);\n             }\n             else if (ScopeUtils.isOuterMostType(ast)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                          authorFormatPattern, authorFormat);\n                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                          versionFormatPattern, versionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(ast);\n \n                 if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, JAVADOC_MISSING);\n            }\n            else if (ScopeUtils.isOuterMostType(ast)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         authorFormatPattern, authorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         versionFormatPattern, versionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (shouldCheck(aAST)) {\n+        if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n-            final int lineNo \u003d aAST.getLineNo();\n+            final int lineNo \u003d ast.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n-            else if (ScopeUtils.isOuterMostType(aAST)) {\n+            else if (ScopeUtils.isOuterMostType(ast)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n-                         mAuthorFormatPattern, mAuthorFormat);\n+                         authorFormatPattern, authorFormat);\n                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n-                         mVersionFormatPattern, mVersionFormat);\n+                         versionFormatPattern, versionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n-                    CheckUtils.getTypeParameterNames(aAST);\n+                    CheckUtils.getTypeParameterNames(ast);\n \n-                if (!mAllowMissingParamTags) {\n+                if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(ast)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         authorFormatPattern, authorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         versionFormatPattern, versionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (shouldCheck(aAST)) {\n+        if (shouldCheck(ast)) {\n             final FileContents contents \u003d getFileContents();\n-            final int lineNo \u003d aAST.getLineNo();\n+            final int lineNo \u003d ast.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n-            else if (ScopeUtils.isOuterMostType(aAST)) {\n+            else if (ScopeUtils.isOuterMostType(ast)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n-                         mAuthorFormatPattern, mAuthorFormat);\n+                         authorFormatPattern, authorFormat);\n                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n-                         mVersionFormatPattern, mVersionFormat);\n+                         versionFormatPattern, versionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n-                    CheckUtils.getTypeParameterNames(aAST);\n+                    CheckUtils.getTypeParameterNames(ast);\n \n-                if (!mAllowMissingParamTags) {\n+                if (!allowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (shouldCheck(ast)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d ast.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(ast)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         authorFormatPattern, authorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         versionFormatPattern, versionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(ast);\n\n                if (!allowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
      }
    },
    "d8286130e83dc672d30cd00eddbf6b5f77112521": {
      "type": "Ybodychange",
      "commitMessage": "Make the code \"checkstyle compliant\"\n",
      "commitDate": "11/07/11 6:47 PM",
      "commitName": "d8286130e83dc672d30cd00eddbf6b5f77112521",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "11/07/11 5:58 PM",
      "commitNameOld": "7d097b6fa682f8dcfedd95da2db8fed980c51705",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                          mVersionFormatPattern, mVersionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(aAST);\n \n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n-                    for (String string : typeParamNames) {\n+                    for (final String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n-                checkTag(lineNo, tags, \"author\",\n+                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                          mAuthorFormatPattern, mAuthorFormat);\n-                checkTag(lineNo, tags, \"version\",\n+                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                          mVersionFormatPattern, mVersionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(aAST);\n \n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (String string : typeParamNames) {\n                         checkTypeParamTag(\n                             lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/12/07 8:51 PM",
      "commitNameOld": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n                 final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n                          mVersionFormatPattern, mVersionFormat);\n \n                 final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(aAST);\n \n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n-                    for (final Iterator\u003cString\u003e typeParamNameIt \u003d\n-                             typeParamNames.iterator();\n-                         typeParamNameIt.hasNext();)\n-                    {\n+                    for (String string : typeParamNames) {\n                         checkTypeParamTag(\n-                            lineNo, tags, typeParamNameIt.next());\n+                            lineNo, tags, string);\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (String string : typeParamNames) {\n                        checkTypeParamTag(\n                            lineNo, tags, string);\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/12/07 3:31 PM",
      "commitNameOld": "c18071b7561b99767e871be9d4d7711eb15b76f1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n-                final List tags \u003d getJavadocTags(cmt);\n+                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n                          mVersionFormatPattern, mVersionFormat);\n \n-                final List typeParamNames \u003d\n+                final List\u003cString\u003e typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(aAST);\n \n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n-                    for (final Iterator typeParamNameIt \u003d\n+                    for (final Iterator\u003cString\u003e typeParamNameIt \u003d\n                              typeParamNames.iterator();\n                          typeParamNameIt.hasNext();)\n                     {\n                         checkTypeParamTag(\n-                            lineNo, tags, (String) typeParamNameIt.next());\n+                            lineNo, tags, typeParamNameIt.next());\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List\u003cJavadocTag\u003e tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List\u003cString\u003e typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final Iterator\u003cString\u003e typeParamNameIt \u003d\n                             typeParamNames.iterator();\n                         typeParamNameIt.hasNext();)\n                    {\n                        checkTypeParamTag(\n                            lineNo, tags, typeParamNameIt.next());\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "c18071b7561b99767e871be9d4d7711eb15b76f1": {
      "type": "Ybodychange",
      "commitMessage": "repeat changes made in CVS.\n",
      "commitDate": "13/12/07 3:31 PM",
      "commitName": "c18071b7561b99767e871be9d4d7711eb15b76f1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 320.36,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n-                final Vector tags \u003d getJavadocTags(cmt);\n+                final List tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n                          mVersionFormatPattern, mVersionFormat);\n \n                 final List typeParamNames \u003d\n                     CheckUtils.getTypeParameterNames(aAST);\n \n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n                     for (final Iterator typeParamNameIt \u003d\n                              typeParamNames.iterator();\n                          typeParamNameIt.hasNext();)\n                     {\n                         checkTypeParamTag(\n                             lineNo, tags, (String) typeParamNameIt.next());\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final List tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final Iterator typeParamNameIt \u003d\n                             typeParamNames.iterator();\n                         typeParamNameIt.hasNext();)\n                    {\n                        checkTypeParamTag(\n                            lineNo, tags, (String) typeParamNameIt.next());\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n-                Vector tags \u003d getJavadocTags(cmt);\n+                final Vector tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n                          mVersionFormatPattern, mVersionFormat);\n \n-                List typeParamNames \u003d CheckUtils.getTypeParameterNames(aAST);\n+                final List typeParamNames \u003d\n+                    CheckUtils.getTypeParameterNames(aAST);\n+\n                 if (!mAllowMissingParamTags) {\n                     //Check type parameters that should exist, do\n-                    for (Iterator typeParamNameIt \u003d typeParamNames.iterator();\n+                    for (final Iterator typeParamNameIt \u003d\n+                             typeParamNames.iterator();\n                          typeParamNameIt.hasNext();)\n                     {\n                         checkTypeParamTag(\n                             lineNo, tags, (String) typeParamNameIt.next());\n                     }\n                 }\n \n                 checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                final Vector tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n\n                final List typeParamNames \u003d\n                    CheckUtils.getTypeParameterNames(aAST);\n\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (final Iterator typeParamNameIt \u003d\n                             typeParamNames.iterator();\n                         typeParamNameIt.hasNext();)\n                    {\n                        checkTypeParamTag(\n                            lineNo, tags, (String) typeParamNameIt.next());\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 1185501.\n",
      "commitDate": "05/06/05 3:36 PM",
      "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "11/05/05 9:48 AM",
      "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 25.24,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,31 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n                 Vector tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n                          mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n                          mVersionFormatPattern, mVersionFormat);\n+\n+                List typeParamNames \u003d CheckUtils.getTypeParameterNames(aAST);\n+                if (!mAllowMissingParamTags) {\n+                    //Check type parameters that should exist, do\n+                    for (Iterator typeParamNameIt \u003d typeParamNames.iterator();\n+                         typeParamNameIt.hasNext();) {\n+                        checkTypeParamTag(\n+                            lineNo, tags, (String) typeParamNameIt.next());\n+                    }\n+                }\n+\n+                checkUnusedTypeParamTags(tags, typeParamNames);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                Vector tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n\n                List typeParamNames \u003d CheckUtils.getTypeParameterNames(aAST);\n                if (!mAllowMissingParamTags) {\n                    //Check type parameters that should exist, do\n                    for (Iterator typeParamNameIt \u003d typeParamNames.iterator();\n                         typeParamNameIt.hasNext();) {\n                        checkTypeParamTag(\n                            lineNo, tags, (String) typeParamNameIt.next());\n                    }\n                }\n\n                checkUnusedTypeParamTags(tags, typeParamNames);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "e27489c7721909245ea5055eac3b9c7c659081f6": {
      "type": "Ybodychange",
      "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
      "commitDate": "11/05/05 9:48 AM",
      "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "21/03/05 5:10 AM",
      "commitNameOld": "df91057c1ead21b974824440a3363efb346e660f",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 51.15,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (shouldCheck(aAST)) {\n             final FileContents contents \u003d getFileContents();\n             final int lineNo \u003d aAST.getLineNo();\n             final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n             if (cmt \u003d\u003d null) {\n                 log(lineNo, \"javadoc.missing\");\n             }\n             else if (ScopeUtils.isOuterMostType(aAST)) {\n                 // don\u0027t check author/version for inner classes\n                 Vector tags \u003d getJavadocTags(cmt);\n                 checkTag(lineNo, tags, \"author\",\n-                         mAuthorFormatRE, mAuthorFormat);\n+                         mAuthorFormatPattern, mAuthorFormat);\n                 checkTag(lineNo, tags, \"version\",\n-                         mVersionFormatRE, mVersionFormat);\n+                         mVersionFormatPattern, mVersionFormat);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                Vector tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatPattern, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatPattern, mVersionFormat);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": {
      "type": "Ybodychange",
      "commitMessage": "Scoping for javadoc checks\n",
      "commitDate": "27/03/04 1:10 PM",
      "commitName": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "08/03/04 10:22 AM",
      "commitNameOld": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,19 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n-        final Scope typeScope \u003d\n-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n-        if (typeScope.isIn(mScope)) {\n-            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n-            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n-                final FileContents contents \u003d getFileContents();\n-                final int lineNo \u003d aAST.getLineNo();\n-                final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n-                if (cmt \u003d\u003d null) {\n-                    log(lineNo, \"javadoc.missing\");\n-                }\n-                else if (ScopeUtils.isOuterMostType(aAST)) {\n-                    // don\u0027t check author/version for inner classes\n-                    Vector tags \u003d getJavadocTags(cmt);\n-                    checkTag(lineNo, tags, \"author\",\n-                             mAuthorFormatRE, mAuthorFormat);\n-                    checkTag(lineNo, tags, \"version\",\n-                             mVersionFormatRE, mVersionFormat);\n-                }\n+        if (shouldCheck(aAST)) {\n+            final FileContents contents \u003d getFileContents();\n+            final int lineNo \u003d aAST.getLineNo();\n+            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n+            if (cmt \u003d\u003d null) {\n+                log(lineNo, \"javadoc.missing\");\n+            }\n+            else if (ScopeUtils.isOuterMostType(aAST)) {\n+                // don\u0027t check author/version for inner classes\n+                Vector tags \u003d getJavadocTags(cmt);\n+                checkTag(lineNo, tags, \"author\",\n+                         mAuthorFormatRE, mAuthorFormat);\n+                checkTag(lineNo, tags, \"version\",\n+                         mVersionFormatRE, mVersionFormat);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (shouldCheck(aAST)) {\n            final FileContents contents \u003d getFileContents();\n            final int lineNo \u003d aAST.getLineNo();\n            final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n            if (cmt \u003d\u003d null) {\n                log(lineNo, \"javadoc.missing\");\n            }\n            else if (ScopeUtils.isOuterMostType(aAST)) {\n                // don\u0027t check author/version for inner classes\n                Vector tags \u003d getJavadocTags(cmt);\n                checkTag(lineNo, tags, \"author\",\n                         mAuthorFormatRE, mAuthorFormat);\n                checkTag(lineNo, tags, \"version\",\n                         mVersionFormatRE, mVersionFormat);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "9ce0ceb04ae90185f95643fb4484e525bcb0d3df": {
      "type": "Ybodychange",
      "commitMessage": "Some improvements for JavadocType check.\n",
      "commitDate": "08/03/04 10:22 AM",
      "commitName": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 53.88,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final int lineNo \u003d aAST.getLineNo();\n                 final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n                 if (cmt \u003d\u003d null) {\n                     log(lineNo, \"javadoc.missing\");\n                 }\n                 else if (ScopeUtils.isOuterMostType(aAST)) {\n                     // don\u0027t check author/version for inner classes\n-                    checkTag(lineNo, cmt.getText(), \"@author\",\n-                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n-                    checkTag(lineNo, cmt.getText(), \"@version\",\n-                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n+                    Vector tags \u003d getJavadocTags(cmt);\n+                    checkTag(lineNo, tags, \"author\",\n+                             mAuthorFormatRE, mAuthorFormat);\n+                    checkTag(lineNo, tags, \"version\",\n+                             mVersionFormatRE, mVersionFormat);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final int lineNo \u003d aAST.getLineNo();\n                final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n                if (cmt \u003d\u003d null) {\n                    log(lineNo, \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    Vector tags \u003d getJavadocTags(cmt);\n                    checkTag(lineNo, tags, \"author\",\n                             mAuthorFormatRE, mAuthorFormat);\n                    checkTag(lineNo, tags, \"version\",\n                             mVersionFormatRE, mVersionFormat);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "8fb2acd39b7db6223486f5e06126c7f0a2642a72": {
      "type": "Ybodychange",
      "commitMessage": "replaced Comment class with TextBlock interface, Comment is now a package private implementation\n",
      "commitDate": "23/11/03 10:45 PM",
      "commitName": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "23/11/03 12:33 AM",
      "commitNameOld": "24ba45a971569b9702e6bf78c5c07c48beb25464",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final int lineNo \u003d aAST.getLineNo();\n-                final Comment cmt \u003d\n-                    contents.getJavadocBefore(lineNo);\n+                final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n                 if (cmt \u003d\u003d null) {\n                     log(lineNo, \"javadoc.missing\");\n                 }\n                 else if (ScopeUtils.isOuterMostType(aAST)) {\n                     // don\u0027t check author/version for inner classes\n                     checkTag(lineNo, cmt.getText(), \"@author\",\n                             mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n                     checkTag(lineNo, cmt.getText(), \"@version\",\n                             mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final int lineNo \u003d aAST.getLineNo();\n                final TextBlock cmt \u003d contents.getJavadocBefore(lineNo);\n                if (cmt \u003d\u003d null) {\n                    log(lineNo, \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, cmt.getText(), \"@author\",\n                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n                    checkTag(lineNo, cmt.getText(), \"@version\",\n                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "24ba45a971569b9702e6bf78c5c07c48beb25464": {
      "type": "Ybodychange",
      "commitMessage": "Fix for ArrayIndexOutOfBounds in JavadocStyle (bug 841942 )\n",
      "commitDate": "23/11/03 12:33 AM",
      "commitName": "24ba45a971569b9702e6bf78c5c07c48beb25464",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "08/10/03 10:46 AM",
      "commitNameOld": "984eb8d7427038effd8ee8d2d9c90c74eee57e2b",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 45.62,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final int lineNo \u003d aAST.getLineNo();\n-                final String[] cmt \u003d\n+                final Comment cmt \u003d\n                     contents.getJavadocBefore(lineNo);\n                 if (cmt \u003d\u003d null) {\n                     log(lineNo, \"javadoc.missing\");\n                 }\n                 else if (ScopeUtils.isOuterMostType(aAST)) {\n                     // don\u0027t check author/version for inner classes\n-                    checkTag(lineNo, cmt, \"@author\",\n+                    checkTag(lineNo, cmt.getText(), \"@author\",\n                             mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n-                    checkTag(lineNo, cmt, \"@version\",\n+                    checkTag(lineNo, cmt.getText(), \"@version\",\n                             mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final int lineNo \u003d aAST.getLineNo();\n                final Comment cmt \u003d\n                    contents.getJavadocBefore(lineNo);\n                if (cmt \u003d\u003d null) {\n                    log(lineNo, \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, cmt.getText(), \"@author\",\n                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n                    checkTag(lineNo, cmt.getText(), \"@version\",\n                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc": {
      "type": "Yfilerename",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": "03/06/03 6:33 AM",
      "commitName": "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/03 6:24 AM",
      "commitNameOld": "7f0e2b8f92ef375f2de3f59b9464746a0113b126",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final int lineNo \u003d aAST.getLineNo();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(lineNo);\n                if (cmt \u003d\u003d null) {\n                    log(lineNo, \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, cmt, \"@author\",\n                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n                    checkTag(lineNo, cmt, \"@version\",\n                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
      }
    },
    "661274b68096ccd5876abb8eacf7c8d42a939a0b": {
      "type": "Ybodychange",
      "commitMessage": "improved error messages for JavadocTypeCheck\n",
      "commitDate": "23/12/02 7:58 AM",
      "commitName": "661274b68096ccd5876abb8eacf7c8d42a939a0b",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "15/12/02 4:37 PM",
      "commitNameOld": "fa0c0353c280c30f2d1cfda01ecfe6597ff46f6b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,26 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n+                final int lineNo \u003d aAST.getLineNo();\n                 final String[] cmt \u003d\n-                    contents.getJavadocBefore(aAST.getLineNo());\n+                    contents.getJavadocBefore(lineNo);\n                 if (cmt \u003d\u003d null) {\n-                    log(aAST.getLineNo(), \"javadoc.missing\");\n+                    log(lineNo, \"javadoc.missing\");\n                 }\n                 else if (ScopeUtils.isOuterMostType(aAST)) {\n                     // don\u0027t check author/version for inner classes\n-                    if ((mAuthorRE !\u003d null)\n-                        \u0026\u0026 (mAuthorRE.grep(cmt).length \u003d\u003d 0))\n-                    {\n-                        // TODO: better error message\n-                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");\n-                    }\n-\n-                    if ((mVersionRE !\u003d null)\n-                        \u0026\u0026 (mVersionRE.grep(cmt).length \u003d\u003d 0))\n-                    {\n-                        // TODO: better error message\n-                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");\n-                    }\n-\n+                    checkTag(lineNo, cmt, \"@author\",\n+                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n+                    checkTag(lineNo, cmt, \"@version\",\n+                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final int lineNo \u003d aAST.getLineNo();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(lineNo);\n                if (cmt \u003d\u003d null) {\n                    log(lineNo, \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    checkTag(lineNo, cmt, \"@author\",\n                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);\n                    checkTag(lineNo, cmt, \"@version\",\n                            mVersionTagRE, mVersionFormatRE, mVersionFormat);\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "730ade67d5f3f286c1004ce9a772fd4bc3bc9307": {
      "type": "Ybodychange",
      "commitMessage": "changed to regular expressions for @author and @version tags\n- thanks to Lars for suggestion\n",
      "commitDate": "07/12/02 4:02 AM",
      "commitName": "730ade67d5f3f286c1004ce9a772fd4bc3bc9307",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "25/11/02 10:01 PM",
      "commitNameOld": "5851470c4d888a4242e5bac829a010107084bcc5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 11.25,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final String[] cmt \u003d\n                     contents.getJavadocBefore(aAST.getLineNo());\n                 if (cmt \u003d\u003d null) {\n                     log(aAST.getLineNo(), \"javadoc.missing\");\n                 }\n                 else if (ScopeUtils.isOuterMostType(aAST)) {\n                     // don\u0027t check author/version for inner classes\n-                    if (!mAllowNoAuthor\n-                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0))\n+                    if ((mAuthorRE !\u003d null)\n+                        \u0026\u0026 (mAuthorRE.grep(cmt).length \u003d\u003d 0))\n                     {\n+                        // TODO: better error message\n                         log(aAST.getLineNo(), \"type.missingTag\", \"@author\");\n                     }\n \n-                    if (mRequireVersion\n-                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0))\n+                    if ((mVersionRE !\u003d null)\n+                        \u0026\u0026 (mVersionRE.grep(cmt).length \u003d\u003d 0))\n                     {\n+                        // TODO: better error message\n                         log(aAST.getLineNo(), \"type.missingTag\", \"@version\");\n                     }\n+\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(aAST.getLineNo());\n                if (cmt \u003d\u003d null) {\n                    log(aAST.getLineNo(), \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    if ((mAuthorRE !\u003d null)\n                        \u0026\u0026 (mAuthorRE.grep(cmt).length \u003d\u003d 0))\n                    {\n                        // TODO: better error message\n                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");\n                    }\n\n                    if ((mVersionRE !\u003d null)\n                        \u0026\u0026 (mVersionRE.grep(cmt).length \u003d\u003d 0))\n                    {\n                        // TODO: better error message\n                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");\n                    }\n\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e": {
      "type": "Ybodychange",
      "commitMessage": "Finished porting across the Javadoc checking for types.\nCleaned up Javadoc errors.\nRemoved unused imports.\nMinor refactoring.\n",
      "commitDate": "29/10/02 4:39 AM",
      "commitName": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "28/10/02 1:31 AM",
      "commitNameOld": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final String[] cmt \u003d\n                     contents.getJavadocBefore(aAST.getLineNo());\n                 if (cmt \u003d\u003d null) {\n                     log(aAST.getLineNo(), \"javadoc.missing\");\n                 }\n-//                else if (mInScope.size() \u003d\u003d 0) {\n-//                    // don\u0027t check author/version for inner classes\n-//                    if (!mConfig.isAllowNoAuthor()\n-//                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0)) {\n-//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");\n-//                    }\n-//                    if (mConfig.isRequireVersion()\n-//                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0)) {\n-//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");\n-//                    }\n-//                }\n+                else if (ScopeUtils.isOuterMostType(aAST)) {\n+                    // don\u0027t check author/version for inner classes\n+                    if (!mAllowNoAuthor\n+                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0))\n+                    {\n+                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");\n+                    }\n+                    \n+                    if (mRequireVersion\n+                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0))\n+                    {\n+                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");\n+                    }\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(aAST.getLineNo());\n                if (cmt \u003d\u003d null) {\n                    log(aAST.getLineNo(), \"javadoc.missing\");\n                }\n                else if (ScopeUtils.isOuterMostType(aAST)) {\n                    // don\u0027t check author/version for inner classes\n                    if (!mAllowNoAuthor\n                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0))\n                    {\n                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");\n                    }\n                    \n                    if (mRequireVersion\n                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0))\n                    {\n                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "eecd476fa8c6dba62f919a5ff1740d108848c867": {
      "type": "Ybodychange",
      "commitMessage": "moved static AST helpers in Util to DetailAST\n",
      "commitDate": "28/10/02 1:31 AM",
      "commitName": "eecd476fa8c6dba62f919a5ff1740d108848c867",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "26/10/02 1:00 AM",
      "commitNameOld": "4d9e56e2b3253c5ccd4e7a4292afc9936512036a",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        final DetailAST mods \u003d\n-            Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.MODIFIERS);\n+        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope typeScope \u003d\n             ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n         if (typeScope.isIn(mScope)) {\n             final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n             if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                 final FileContents contents \u003d getFileContents();\n                 final String[] cmt \u003d\n                     contents.getJavadocBefore(aAST.getLineNo());\n                 if (cmt \u003d\u003d null) {\n                     log(aAST.getLineNo(), \"javadoc.missing\");\n                 }\n //                else if (mInScope.size() \u003d\u003d 0) {\n //                    // don\u0027t check author/version for inner classes\n //                    if (!mConfig.isAllowNoAuthor()\n //                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0)) {\n //                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");\n //                    }\n //                    if (mConfig.isRequireVersion()\n //                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0)) {\n //                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");\n //                    }\n //                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(aAST.getLineNo());\n                if (cmt \u003d\u003d null) {\n                    log(aAST.getLineNo(), \"javadoc.missing\");\n                }\n//                else if (mInScope.size() \u003d\u003d 0) {\n//                    // don\u0027t check author/version for inner classes\n//                    if (!mConfig.isAllowNoAuthor()\n//                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0)) {\n//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");\n//                    }\n//                    if (mConfig.isRequireVersion()\n//                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0)) {\n//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");\n//                    }\n//                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "4d9e56e2b3253c5ccd4e7a4292afc9936512036a": {
      "type": "Yintroduced",
      "commitMessage": "Start of port of javadoc check for types.\n",
      "commitDate": "26/10/02 1:00 AM",
      "commitName": "4d9e56e2b3253c5ccd4e7a4292afc9936512036a",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,30 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        final DetailAST mods \u003d\n+            Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.MODIFIERS);\n+        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n+        final Scope typeScope \u003d\n+            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n+        if (typeScope.isIn(mScope)) {\n+            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n+                final FileContents contents \u003d getFileContents();\n+                final String[] cmt \u003d\n+                    contents.getJavadocBefore(aAST.getLineNo());\n+                if (cmt \u003d\u003d null) {\n+                    log(aAST.getLineNo(), \"javadoc.missing\");\n+                }\n+//                else if (mInScope.size() \u003d\u003d 0) {\n+//                    // don\u0027t check author/version for inner classes\n+//                    if (!mConfig.isAllowNoAuthor()\n+//                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0)) {\n+//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");\n+//                    }\n+//                    if (mConfig.isRequireVersion()\n+//                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0)) {\n+//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");\n+//                    }\n+//                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST mods \u003d\n            Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope typeScope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        if (typeScope.isIn(mScope)) {\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n            if ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope)) {\n                final FileContents contents \u003d getFileContents();\n                final String[] cmt \u003d\n                    contents.getJavadocBefore(aAST.getLineNo());\n                if (cmt \u003d\u003d null) {\n                    log(aAST.getLineNo(), \"javadoc.missing\");\n                }\n//                else if (mInScope.size() \u003d\u003d 0) {\n//                    // don\u0027t check author/version for inner classes\n//                    if (!mConfig.isAllowNoAuthor()\n//                        \u0026\u0026 (MATCH_JAVADOC_AUTHOR.grep(cmt).length \u003d\u003d 0)) {\n//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");\n//                    }\n//                    if (mConfig.isRequireVersion()\n//                        \u0026\u0026 (MATCH_JAVADOC_VERSION.grep(cmt).length \u003d\u003d 0)) {\n//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");\n//                    }\n//                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java"
    }
  }
}