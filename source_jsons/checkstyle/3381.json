{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUtil.java",
  "functionName": "parseNumber",
  "functionId": "parseNumber___text-String(modifiers-final)__radix-int(modifiers-final)__type-int(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
  "functionStartLine": 210,
  "functionEndLine": 239,
  "numCommitsSeen": 37,
  "timeTaken": 1638,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "9fc24b0c27c4692e329558bdcfdf180292cc692f"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ymultichange(Yfilerename,Ybodychange)",
    "9fc24b0c27c4692e329558bdcfdf180292cc692f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n     private static double parseNumber(final String text, final int radix, final int type) {\n         String txt \u003d text;\n-        if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n+        if (CommonUtil.endsWithChar(txt, \u0027L\u0027) || CommonUtil.endsWithChar(txt, \u0027l\u0027)) {\n             txt \u003d txt.substring(0, txt.length() - 1);\n         }\n         final double result;\n         if (txt.isEmpty()) {\n             result \u003d 0.0;\n         }\n         else {\n             final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n             if (type \u003d\u003d TokenTypes.NUM_INT) {\n                 if (negative) {\n                     result \u003d Integer.parseInt(txt, radix);\n                 }\n                 else {\n                     result \u003d Integer.parseUnsignedInt(txt, radix);\n                 }\n             }\n             else {\n                 if (negative) {\n                     result \u003d Long.parseLong(txt, radix);\n                 }\n                 else {\n                     result \u003d Long.parseUnsignedLong(txt, radix);\n                 }\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static double parseNumber(final String text, final int radix, final int type) {\n        String txt \u003d text;\n        if (CommonUtil.endsWithChar(txt, \u0027L\u0027) || CommonUtil.endsWithChar(txt, \u0027l\u0027)) {\n            txt \u003d txt.substring(0, txt.length() - 1);\n        }\n        final double result;\n        if (txt.isEmpty()) {\n            result \u003d 0.0;\n        }\n        else {\n            final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n            if (type \u003d\u003d TokenTypes.NUM_INT) {\n                if (negative) {\n                    result \u003d Integer.parseInt(txt, radix);\n                }\n                else {\n                    result \u003d Integer.parseUnsignedInt(txt, radix);\n                }\n            }\n            else {\n                if (negative) {\n                    result \u003d Long.parseLong(txt, radix);\n                }\n                else {\n                    result \u003d Long.parseUnsignedLong(txt, radix);\n                }\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n     private static double parseNumber(final String text, final int radix, final int type) {\n         String txt \u003d text;\n-        if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n+        if (CommonUtil.endsWithChar(txt, \u0027L\u0027) || CommonUtil.endsWithChar(txt, \u0027l\u0027)) {\n             txt \u003d txt.substring(0, txt.length() - 1);\n         }\n         final double result;\n         if (txt.isEmpty()) {\n             result \u003d 0.0;\n         }\n         else {\n             final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n             if (type \u003d\u003d TokenTypes.NUM_INT) {\n                 if (negative) {\n                     result \u003d Integer.parseInt(txt, radix);\n                 }\n                 else {\n                     result \u003d Integer.parseUnsignedInt(txt, radix);\n                 }\n             }\n             else {\n                 if (negative) {\n                     result \u003d Long.parseLong(txt, radix);\n                 }\n                 else {\n                     result \u003d Long.parseUnsignedLong(txt, radix);\n                 }\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static double parseNumber(final String text, final int radix, final int type) {\n        String txt \u003d text;\n        if (CommonUtil.endsWithChar(txt, \u0027L\u0027) || CommonUtil.endsWithChar(txt, \u0027l\u0027)) {\n            txt \u003d txt.substring(0, txt.length() - 1);\n        }\n        final double result;\n        if (txt.isEmpty()) {\n            result \u003d 0.0;\n        }\n        else {\n            final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n            if (type \u003d\u003d TokenTypes.NUM_INT) {\n                if (negative) {\n                    result \u003d Integer.parseInt(txt, radix);\n                }\n                else {\n                    result \u003d Integer.parseUnsignedInt(txt, radix);\n                }\n            }\n            else {\n                if (negative) {\n                    result \u003d Long.parseLong(txt, radix);\n                }\n                else {\n                    result \u003d Long.parseUnsignedLong(txt, radix);\n                }\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "9fc24b0c27c4692e329558bdcfdf180292cc692f": {
      "type": "Yintroduced",
      "commitMessage": "Issue #5709: CheckUtils.parseDouble: wrong result for negative values\n",
      "commitDate": "12/04/18 5:18 AM",
      "commitName": "9fc24b0c27c4692e329558bdcfdf180292cc692f",
      "commitAuthor": "Pavel Bludov",
      "diff": "@@ -0,0 +1,30 @@\n+    private static double parseNumber(final String text, final int radix, final int type) {\n+        String txt \u003d text;\n+        if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n+            txt \u003d txt.substring(0, txt.length() - 1);\n+        }\n+        final double result;\n+        if (txt.isEmpty()) {\n+            result \u003d 0.0;\n+        }\n+        else {\n+            final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n+            if (type \u003d\u003d TokenTypes.NUM_INT) {\n+                if (negative) {\n+                    result \u003d Integer.parseInt(txt, radix);\n+                }\n+                else {\n+                    result \u003d Integer.parseUnsignedInt(txt, radix);\n+                }\n+            }\n+            else {\n+                if (negative) {\n+                    result \u003d Long.parseLong(txt, radix);\n+                }\n+                else {\n+                    result \u003d Long.parseUnsignedLong(txt, radix);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static double parseNumber(final String text, final int radix, final int type) {\n        String txt \u003d text;\n        if (CommonUtils.endsWithChar(txt, \u0027L\u0027) || CommonUtils.endsWithChar(txt, \u0027l\u0027)) {\n            txt \u003d txt.substring(0, txt.length() - 1);\n        }\n        final double result;\n        if (txt.isEmpty()) {\n            result \u003d 0.0;\n        }\n        else {\n            final boolean negative \u003d txt.charAt(0) \u003d\u003d \u0027-\u0027;\n            if (type \u003d\u003d TokenTypes.NUM_INT) {\n                if (negative) {\n                    result \u003d Integer.parseInt(txt, radix);\n                }\n                else {\n                    result \u003d Integer.parseUnsignedInt(txt, radix);\n                }\n            }\n            else {\n                if (negative) {\n                    result \u003d Long.parseLong(txt, radix);\n                }\n                else {\n                    result \u003d Long.parseUnsignedLong(txt, radix);\n                }\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java"
    }
  }
}