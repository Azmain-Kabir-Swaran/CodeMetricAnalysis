{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 285,
  "functionEndLine": 317,
  "numCommitsSeen": 66,
  "timeTaken": 2331,
  "changeHistory": [
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "a707819ab73dded873917fd33e22d45d0e3e1860",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
    "04ceb4b91f4e66439479406834f42014c5be62ed",
    "44e274bfbaf09a067726164e01a9c277f4a97090",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "9324fdcf34b60f100b43dd18f52898c6418893eb",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96"
  ],
  "changeHistoryShort": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "a707819ab73dded873917fd33e22d45d0e3e1860": "Ybodychange",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": "Ybodychange",
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": "Ybodychange",
    "04ceb4b91f4e66439479406834f42014c5be62ed": "Ybodychange",
    "44e274bfbaf09a067726164e01a9c277f4a97090": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "9324fdcf34b60f100b43dd18f52898c6418893eb": "Ybodychange",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 271.52,
      "commitsBetweenForRepo": 1006,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         if (parentType !\u003d TokenTypes.OBJBLOCK\n-                \u0026\u0026 (!ignoreFinal || !modifiers.branchContains(TokenTypes.FINAL))) {\n+                \u0026\u0026 (!ignoreFinal || modifiers.findFirstToken(TokenTypes.FINAL) \u003d\u003d null)) {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 final Entry\u003cDetailAST, Integer\u003e entry;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (parentType !\u003d TokenTypes.OBJBLOCK\n                \u0026\u0026 (!ignoreFinal || modifiers.findFirstToken(TokenTypes.FINAL) \u003d\u003d null)) {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                final Entry\u003cDetailAST, Integer\u003e entry;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": "24/01/16 6:35 AM",
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         if (parentType !\u003d TokenTypes.OBJBLOCK\n                 \u0026\u0026 (!ignoreFinal || !modifiers.branchContains(TokenTypes.FINAL))) {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n-                Entry\u003cDetailAST, Integer\u003e entry;\n+                final Entry\u003cDetailAST, Integer\u003e entry;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (parentType !\u003d TokenTypes.OBJBLOCK\n                \u0026\u0026 (!ignoreFinal || !modifiers.branchContains(TokenTypes.FINAL))) {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                final Entry\u003cDetailAST, Integer\u003e entry;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "a707819ab73dded873917fd33e22d45d0e3e1860": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce AvoidConditionInversionCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "24/12/15 2:01 PM",
      "commitName": "a707819ab73dded873917fd33e22d45d0e3e1860",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "24/12/15 1:59 PM",
      "commitNameOld": "6ee4a0f805d528cdee03cfc175502d15b5722dab",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if (!(parentType \u003d\u003d TokenTypes.OBJBLOCK\n-                || ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))) {\n+        if (parentType !\u003d TokenTypes.OBJBLOCK\n+                \u0026\u0026 (!ignoreFinal || !modifiers.branchContains(TokenTypes.FINAL))) {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (parentType !\u003d TokenTypes.OBJBLOCK\n                \u0026\u0026 (!ignoreFinal || !modifiers.branchContains(TokenTypes.FINAL))) {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce LogicConditionNeedOptimizationCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "24/12/15 1:59 PM",
      "commitName": "6ee4a0f805d528cdee03cfc175502d15b5722dab",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "23/10/15 3:55 PM",
      "commitNameOld": "24f73e69dc69add5fb33af0f54af7ad186b285eb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 61.96,
      "commitsBetweenForRepo": 317,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if (!(ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n-                || parentType \u003d\u003d TokenTypes.OBJBLOCK)) {\n+        if (!(parentType \u003d\u003d TokenTypes.OBJBLOCK\n+                || ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))) {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (!(parentType \u003d\u003d TokenTypes.OBJBLOCK\n                || ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))) {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "8a3f5bf6d5389b9e175c9c769992faece6d76ada": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignments. #1555\n\nFixes UnusedAssignment inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment, i.e.:\n- the variable never gets read after assignment OR\n- the value is always overwritten with another assignment before the next variable read OR\n - the variable initializer is redundant (for one of the above two reasons) OR\n - the variable is never used.\n",
      "commitDate": "07/08/15 9:12 PM",
      "commitName": "8a3f5bf6d5389b9e175c9c769992faece6d76ada",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/07/15 9:51 PM",
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 20.97,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     public void visitToken(DetailAST ast) {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         if (!(ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)) {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n-                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n+                Entry\u003cDetailAST, Integer\u003e entry;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (!(ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)) {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText())) {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "04ceb4b91f4e66439479406834f42014c5be62ed": {
      "type": "Ybodychange",
      "commitMessage": "Remove empty if statements to fix PMD violations, issue #744\n\nViolations of PMD rule [EmptyIfStmt](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyIfStmt) are fixed. All transformations were done by IDE automatically.\n",
      "commitDate": "21/03/15 9:45 PM",
      "commitName": "04ceb4b91f4e66439479406834f42014c5be62ed",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "11/03/15 3:40 PM",
      "commitNameOld": "44e274bfbaf09a067726164e01a9c277f4a97090",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 10.25,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,36 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if (ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n-                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n+        if (!(ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n+                || parentType \u003d\u003d TokenTypes.OBJBLOCK))\n         {\n-            // no code\n-        }\n-        else {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (!(ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK))\n        {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "44e274bfbaf09a067726164e01a9c277f4a97090": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary semicolons to fix PMD violations, issue #744\n\nAll violations of rule [EmptyStatementNotInLoop](http://pmd.sourceforge.net/pmd-5.2.3/pmd-java/rules/java/empty.html#EmptyStatementNotInLoop) are fixed. Empty statements sometimes were used to trick Checkstyle to allow empty blocks. While generally empty blocks are bad practice, there are too many of them in Checkstyle code to fix them in scope of this commit. Instead, [EmplyBlock](http://checkstyle.sourceforge.net/config_blocks.html#EmptyBlock) setting was changed to allow empty block when there is comment inside it for Checkstyle codebase.\n",
      "commitDate": "11/03/15 3:40 PM",
      "commitName": "44e274bfbaf09a067726164e01a9c277f4a97090",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         if (ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n         {\n-            ;// no code\n+            // no code\n         }\n         else {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            // no code\n        }\n        else {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public void visitToken(DetailAST ast)\n     {\n         final int parentType \u003d ast.getParent().getType();\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if ((ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+        if (ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n         {\n             ;// no code\n         }\n         else {\n             final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                 if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n                     if (ignoreFinal) {\n                         log(variable.getLineNo(),\n                                 MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n                                 MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if (ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            ;// no code\n        }\n        else {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final int parentType \u003d aAST.getParent().getType();\n-        final DetailAST modifiers \u003d aAST.getFirstChild();\n+        final int parentType \u003d ast.getParent().getType();\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+        if ((ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n         {\n             ;// no code\n         }\n         else {\n-            final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n-                final DetailAST semicolonAst \u003d aAST.getNextSibling();\n+                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n-                if (mValidateBetweenScopes) {\n+                if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n-                if (dist \u003e mAllowedDistance\n+                if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n-                    if (mIgnoreFinal) {\n+                    if (ignoreFinal) {\n                         log(variable.getLineNo(),\n-                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);\n+                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n-                                MSG_KEY, variable.getText(), dist, mAllowedDistance);\n+                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if ((ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            ;// no code\n        }\n        else {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final int parentType \u003d aAST.getParent().getType();\n-        final DetailAST modifiers \u003d aAST.getFirstChild();\n+        final int parentType \u003d ast.getParent().getType();\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+        if ((ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n         {\n             ;// no code\n         }\n         else {\n-            final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n-                final DetailAST semicolonAst \u003d aAST.getNextSibling();\n+                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n-                if (mValidateBetweenScopes) {\n+                if (validateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n-                if (dist \u003e mAllowedDistance\n+                if (dist \u003e allowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n-                    if (mIgnoreFinal) {\n+                    if (ignoreFinal) {\n                         log(variable.getLineNo(),\n-                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);\n+                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                     }\n                     else {\n                         log(variable.getLineNo(),\n-                                MSG_KEY, variable.getText(), dist, mAllowedDistance);\n+                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final int parentType \u003d ast.getParent().getType();\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        if ((ignoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            ;// no code\n        }\n        else {\n            final DetailAST variable \u003d ast.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d ast.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (validateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e allowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (ignoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, allowedDistance);\n                    }\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "9324fdcf34b60f100b43dd18f52898c6418893eb": {
      "type": "Ybodychange",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was update. Create new extended message in case ignoreFinal\u003dtrue #239\n",
      "commitDate": "11/08/14 3:57 PM",
      "commitName": "9324fdcf34b60f100b43dd18f52898c6418893eb",
      "commitAuthor": "Max",
      "commitDateOld": "06/08/14 10:50 PM",
      "commitNameOld": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 4.71,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final int parentType \u003d aAST.getParent().getType();\n         final DetailAST modifiers \u003d aAST.getFirstChild();\n \n         if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                 || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n         {\n             ;// no code\n         }\n         else {\n             final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n \n             if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                 final DetailAST semicolonAst \u003d aAST.getNextSibling();\n                 Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                 if (mValidateBetweenScopes) {\n                     entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                 }\n                 else {\n                     entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                 }\n                 final DetailAST variableUsageAst \u003d entry.getKey();\n                 final int dist \u003d entry.getValue();\n                 if (dist \u003e mAllowedDistance\n                         \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                 {\n-                    log(variable.getLineNo(),\n-                            MSG_KEY, variable.getText(), dist, mAllowedDistance);\n+                    if (mIgnoreFinal) {\n+                        log(variable.getLineNo(),\n+                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);\n+                    }\n+                    else {\n+                        log(variable.getLineNo(),\n+                                MSG_KEY, variable.getText(), dist, mAllowedDistance);\n+                    }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final int parentType \u003d aAST.getParent().getType();\n        final DetailAST modifiers \u003d aAST.getFirstChild();\n\n        if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            ;// no code\n        }\n        else {\n            final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d aAST.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (mValidateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e mAllowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    if (mIgnoreFinal) {\n                        log(variable.getLineNo(),\n                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);\n                    }\n                    else {\n                        log(variable.getLineNo(),\n                                MSG_KEY, variable.getText(), dist, mAllowedDistance);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": {
      "type": "Yintroduced",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was imported #223\n",
      "commitDate": "06/08/14 10:50 PM",
      "commitName": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthor": "Max",
      "diff": "@@ -0,0 +1,33 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        final int parentType \u003d aAST.getParent().getType();\n+        final DetailAST modifiers \u003d aAST.getFirstChild();\n+\n+        if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n+        {\n+            ;// no code\n+        }\n+        else {\n+            final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+\n+            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n+                final DetailAST semicolonAst \u003d aAST.getNextSibling();\n+                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n+                if (mValidateBetweenScopes) {\n+                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n+                }\n+                else {\n+                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n+                }\n+                final DetailAST variableUsageAst \u003d entry.getKey();\n+                final int dist \u003d entry.getValue();\n+                if (dist \u003e mAllowedDistance\n+                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n+                {\n+                    log(variable.getLineNo(),\n+                            MSG_KEY, variable.getText(), dist, mAllowedDistance);\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final int parentType \u003d aAST.getParent().getType();\n        final DetailAST modifiers \u003d aAST.getFirstChild();\n\n        if ((mIgnoreFinal \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                || parentType \u003d\u003d TokenTypes.OBJBLOCK)\n        {\n            ;// no code\n        }\n        else {\n            final DetailAST variable \u003d aAST.findFirstToken(TokenTypes.IDENT);\n\n            if (!isVariableMatchesIgnorePattern(variable.getText())) {\n                final DetailAST semicolonAst \u003d aAST.getNextSibling();\n                Entry\u003cDetailAST, Integer\u003e entry \u003d null;\n                if (mValidateBetweenScopes) {\n                    entry \u003d calculateDistanceBetweenScopes(semicolonAst, variable);\n                }\n                else {\n                    entry \u003d calculateDistanceInSingleScope(semicolonAst, variable);\n                }\n                final DetailAST variableUsageAst \u003d entry.getKey();\n                final int dist \u003d entry.getValue();\n                if (dist \u003e mAllowedDistance\n                        \u0026\u0026 !isInitializationSequence(variableUsageAst, variable.getText()))\n                {\n                    log(variable.getLineNo(),\n                            MSG_KEY, variable.getText(), dist, mAllowedDistance);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java"
    }
  }
}