{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocMethodCheck.java",
  "functionName": "getMultilineNoArgTags",
  "functionId": "getMultilineNoArgTags___noargMultilineStart-Matcher(modifiers-final)__lines-String[](modifiers-final)__lineIndex-int(modifiers-final)__tagLine-int(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
  "functionStartLine": 681,
  "functionEndLine": 702,
  "numCommitsSeen": 121,
  "timeTaken": 1922,
  "changeHistory": [
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
    "9e9b817c6558d1141617e52444716c0f802c1417",
    "5f5142b2325051f9ed31130167c73d154d547211",
    "5b01236f52f59b632659cac386768805f7a9006f"
  ],
  "changeHistoryShort": {
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": "Ybodychange",
    "9e9b817c6558d1141617e52444716c0f802c1417": "Ybodychange",
    "5f5142b2325051f9ed31130167c73d154d547211": "Ybodychange",
    "5b01236f52f59b632659cac386768805f7a9006f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6295: changed code to remove javadoc profile mutations",
      "commitDate": "27/12/18 5:47 PM",
      "commitName": "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/12/18 4:43 PM",
      "commitNameOld": "50d6707c867f0da2521319b3f72e861f878e9ac7",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n             final String[] lines, final int lineIndex, final int tagLine) {\n-        final String param1 \u003d noargMultilineStart.group(1);\n-        final int col \u003d noargMultilineStart.start(1) - 1;\n-        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n-        int remIndex \u003d lineIndex + 1;\n-        while (remIndex \u003c lines.length) {\n-            final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n-                    .matcher(lines[remIndex]);\n-            if (multilineCont.find()) {\n-                remIndex \u003d lines.length;\n-                final String lFin \u003d multilineCont.group(1);\n-                if (!lFin.equals(NEXT_TAG)\n-                    \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n-                    tags.add(new JavadocTag(tagLine, col, param1));\n-                }\n-            }\n+        int remIndex \u003d lineIndex;\n+        Matcher multilineCont;\n+\n+        do {\n             remIndex++;\n+            multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);\n+        } while (!multilineCont.find());\n+\n+        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n+        final String lFin \u003d multilineCont.group(1);\n+        if (!lFin.equals(NEXT_TAG)\n+            \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n+            final String param1 \u003d noargMultilineStart.group(1);\n+            final int col \u003d noargMultilineStart.start(1) - 1;\n+\n+            tags.add(new JavadocTag(tagLine, col, param1));\n         }\n \n         return tags;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n            final String[] lines, final int lineIndex, final int tagLine) {\n        int remIndex \u003d lineIndex;\n        Matcher multilineCont;\n\n        do {\n            remIndex++;\n            multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);\n        } while (!multilineCont.find());\n\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        final String lFin \u003d multilineCont.group(1);\n        if (!lFin.equals(NEXT_TAG)\n            \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n            final String param1 \u003d noargMultilineStart.group(1);\n            final int col \u003d noargMultilineStart.start(1) - 1;\n\n            tags.add(new JavadocTag(tagLine, col, param1));\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "9e9b817c6558d1141617e52444716c0f802c1417": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2398: Fix for error where an exception is thrown if empty return tag is followed by blank line\n",
      "commitDate": "21/10/15 11:00 PM",
      "commitName": "9e9b817c6558d1141617e52444716c0f802c1417",
      "commitAuthor": "John Erik Halse",
      "commitDateOld": "18/10/15 6:04 AM",
      "commitNameOld": "f14025ac008f8a2ef506b9e7cfcc820c637d28d5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n     private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n             final String[] lines, final int lineIndex, final int tagLine) {\n         final String param1 \u003d noargMultilineStart.group(1);\n         final int col \u003d noargMultilineStart.start(1) - 1;\n         final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n         int remIndex \u003d lineIndex + 1;\n         while (remIndex \u003c lines.length) {\n             final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n                     .matcher(lines[remIndex]);\n-            multilineCont.find();\n-            remIndex \u003d lines.length;\n-            final String lFin \u003d multilineCont.group(1);\n-            if (!lFin.equals(NEXT_TAG)\n-                \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n-                tags.add(new JavadocTag(tagLine, col, param1));\n+            if (multilineCont.find()) {\n+                remIndex \u003d lines.length;\n+                final String lFin \u003d multilineCont.group(1);\n+                if (!lFin.equals(NEXT_TAG)\n+                    \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n+                    tags.add(new JavadocTag(tagLine, col, param1));\n+                }\n             }\n             remIndex++;\n         }\n \n         return tags;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n            final String[] lines, final int lineIndex, final int tagLine) {\n        final String param1 \u003d noargMultilineStart.group(1);\n        final int col \u003d noargMultilineStart.start(1) - 1;\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        int remIndex \u003d lineIndex + 1;\n        while (remIndex \u003c lines.length) {\n            final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n                    .matcher(lines[remIndex]);\n            if (multilineCont.find()) {\n                remIndex \u003d lines.length;\n                final String lFin \u003d multilineCont.group(1);\n                if (!lFin.equals(NEXT_TAG)\n                    \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                    tags.add(new JavadocTag(tagLine, col, param1));\n                }\n            }\n            remIndex++;\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "5f5142b2325051f9ed31130167c73d154d547211": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 7:33 PM",
      "commitName": "5f5142b2325051f9ed31130167c73d154d547211",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "06/10/15 6:56 AM",
      "commitNameOld": "e2b4e687d7b8f9d6d5e1346d874b90e4567aff81",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.53,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n             final String[] lines, final int lineIndex, final int tagLine) {\n-        final String p1 \u003d noargMultilineStart.group(1);\n+        final String param1 \u003d noargMultilineStart.group(1);\n         final int col \u003d noargMultilineStart.start(1) - 1;\n         final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n         int remIndex \u003d lineIndex + 1;\n         while (remIndex \u003c lines.length) {\n             final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n                     .matcher(lines[remIndex]);\n             multilineCont.find();\n             remIndex \u003d lines.length;\n             final String lFin \u003d multilineCont.group(1);\n             if (!lFin.equals(NEXT_TAG)\n                 \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n-                tags.add(new JavadocTag(tagLine, col, p1));\n+                tags.add(new JavadocTag(tagLine, col, param1));\n             }\n             remIndex++;\n         }\n \n         return tags;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n            final String[] lines, final int lineIndex, final int tagLine) {\n        final String param1 \u003d noargMultilineStart.group(1);\n        final int col \u003d noargMultilineStart.start(1) - 1;\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        int remIndex \u003d lineIndex + 1;\n        while (remIndex \u003c lines.length) {\n            final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n                    .matcher(lines[remIndex]);\n            multilineCont.find();\n            remIndex \u003d lines.length;\n            final String lFin \u003d multilineCont.group(1);\n            if (!lFin.equals(NEXT_TAG)\n                \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                tags.add(new JavadocTag(tagLine, col, param1));\n            }\n            remIndex++;\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "5b01236f52f59b632659cac386768805f7a9006f": {
      "type": "Yintroduced",
      "commitMessage": "Issue #1566: Refactoring of JavadocMethodCheck to reduce its method length.\n",
      "commitDate": "27/08/15 6:30 AM",
      "commitName": "5b01236f52f59b632659cac386768805f7a9006f",
      "commitAuthor": "Baratali Izmailov",
      "diff": "@@ -0,0 +1,21 @@\n+    private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n+            final String[] lines, final int lineIndex, final int tagLine) {\n+        final String p1 \u003d noargMultilineStart.group(1);\n+        final int col \u003d noargMultilineStart.start(1) - 1;\n+        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n+        int remIndex \u003d lineIndex + 1;\n+        while (remIndex \u003c lines.length) {\n+            final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n+                    .matcher(lines[remIndex]);\n+            multilineCont.find();\n+            remIndex \u003d lines.length;\n+            final String lFin \u003d multilineCont.group(1);\n+            if (!lFin.equals(NEXT_TAG)\n+                \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n+                tags.add(new JavadocTag(tagLine, col, p1));\n+            }\n+            remIndex++;\n+        }\n+\n+        return tags;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cJavadocTag\u003e getMultilineNoArgTags(final Matcher noargMultilineStart,\n            final String[] lines, final int lineIndex, final int tagLine) {\n        final String p1 \u003d noargMultilineStart.group(1);\n        final int col \u003d noargMultilineStart.start(1) - 1;\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        int remIndex \u003d lineIndex + 1;\n        while (remIndex \u003c lines.length) {\n            final Matcher multilineCont \u003d MATCH_JAVADOC_MULTILINE_CONT\n                    .matcher(lines[remIndex]);\n            multilineCont.find();\n            remIndex \u003d lines.length;\n            final String lFin \u003d multilineCont.group(1);\n            if (!lFin.equals(NEXT_TAG)\n                \u0026\u0026 !lFin.equals(END_JAVADOC)) {\n                tags.add(new JavadocTag(tagLine, col, p1));\n            }\n            remIndex++;\n        }\n\n        return tags;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java"
    }
  }
}