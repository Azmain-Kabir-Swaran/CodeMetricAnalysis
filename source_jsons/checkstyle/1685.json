{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IllegalInstantiationCheck.java",
  "functionName": "isStandardClass",
  "functionId": "isStandardClass___className-String__illegal-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
  "functionStartLine": 327,
  "functionEndLine": 346,
  "numCommitsSeen": 83,
  "timeTaken": 1931,
  "changeHistory": [
    "8d4a40d677afebb91dd094a529b30896a5e3f9b8",
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1",
    "6054b46c9b717a03cf000c7884d0256335fc01e9",
    "a707819ab73dded873917fd33e22d45d0e3e1860",
    "16ae5032c5e25ad35475c9a0f2de578ea6e640e5",
    "d64bdf0caa867be3913f2665ef4fcc654524937e"
  ],
  "changeHistoryShort": {
    "8d4a40d677afebb91dd094a529b30896a5e3f9b8": "Ybodychange",
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1": "Ybodychange",
    "6054b46c9b717a03cf000c7884d0256335fc01e9": "Ybodychange",
    "a707819ab73dded873917fd33e22d45d0e3e1860": "Ybodychange",
    "16ae5032c5e25ad35475c9a0f2de578ea6e640e5": "Ymultichange(Yparameterchange,Ybodychange)",
    "d64bdf0caa867be3913f2665ef4fcc654524937e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d4a40d677afebb91dd094a529b30896a5e3f9b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6272: added FALSE_RETURNS pitest mutator",
      "commitDate": "19/12/18 10:42 PM",
      "commitName": "8d4a40d677afebb91dd094a529b30896a5e3f9b8",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 199.09,
      "commitsBetweenForRepo": 272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n     private boolean isStandardClass(String className, String illegal) {\n         boolean isStandardClass \u003d false;\n         // class from java.lang\n         if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n-            final boolean isSamePackage \u003d isSamePackage(className);\n \n-            if (!isSameFile \u0026\u0026 !isSamePackage) {\n+            if (!isSameFile) {\n                 isStandardClass \u003d true;\n             }\n         }\n         return isStandardClass;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        boolean isStandardClass \u003d false;\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n\n            if (!isSameFile) {\n                isStandardClass \u003d true;\n            }\n        }\n        return isStandardClass;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
      "extendedDetails": {}
    },
    "3b531fe996078098c7fa30b8ab0645a6157dc6d1": {
      "type": "Ybodychange",
      "commitMessage": "minor: fix typos\n",
      "commitDate": "23/12/17 9:13 PM",
      "commitName": "3b531fe996078098c7fa30b8ab0645a6157dc6d1",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "06/12/17 6:58 PM",
      "commitNameOld": "350a5a513d3655a12541b7411c8bf73abba6a0c8",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 17.09,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private boolean isStandardClass(String className, String illegal) {\n-        boolean isStandardCalss \u003d false;\n+        boolean isStandardClass \u003d false;\n         // class from java.lang\n         if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n             final boolean isSamePackage \u003d isSamePackage(className);\n \n             if (!isSameFile \u0026\u0026 !isSamePackage) {\n-                isStandardCalss \u003d true;\n+                isStandardClass \u003d true;\n             }\n         }\n-        return isStandardCalss;\n+        return isStandardClass;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        boolean isStandardClass \u003d false;\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!isSameFile \u0026\u0026 !isSamePackage) {\n                isStandardClass \u003d true;\n            }\n        }\n        return isStandardClass;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
      "extendedDetails": {}
    },
    "6054b46c9b717a03cf000c7884d0256335fc01e9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4940: fix MultipleReturnPointsPerMethod idea violation\n",
      "commitDate": "19/08/17 10:29 PM",
      "commitName": "6054b46c9b717a03cf000c7884d0256335fc01e9",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "12/06/17 10:11 AM",
      "commitNameOld": "4a087c020c2b97130e94f9292b94cb4bc1f6ed93",
      "commitAuthorOld": "sagar-shah94",
      "daysBetweenCommits": 68.51,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private boolean isStandardClass(String className, String illegal) {\n+        boolean isStandardCalss \u003d false;\n         // class from java.lang\n         if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n             final boolean isSamePackage \u003d isSamePackage(className);\n \n             if (!isSameFile \u0026\u0026 !isSamePackage) {\n-                return true;\n+                isStandardCalss \u003d true;\n             }\n         }\n-        return false;\n+        return isStandardCalss;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        boolean isStandardCalss \u003d false;\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!isSameFile \u0026\u0026 !isSamePackage) {\n                isStandardCalss \u003d true;\n            }\n        }\n        return isStandardCalss;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
      "extendedDetails": {}
    },
    "a707819ab73dded873917fd33e22d45d0e3e1860": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce AvoidConditionInversionCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "24/12/15 2:01 PM",
      "commitName": "a707819ab73dded873917fd33e22d45d0e3e1860",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "23/12/15 12:51 PM",
      "commitNameOld": "2864c10cd45d23b91717299954aaaf41d36a6cb0",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private boolean isStandardClass(String className, String illegal) {\n         // class from java.lang\n         if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n             final boolean isSamePackage \u003d isSamePackage(className);\n \n-            if (!(isSameFile || isSamePackage)) {\n+            if (!isSameFile \u0026\u0026 !isSamePackage) {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!isSameFile \u0026\u0026 !isSamePackage) {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
      "extendedDetails": {}
    },
    "16ae5032c5e25ad35475c9a0f2de578ea6e640e5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1293: Improved coverage for IllegalInstantiationCheck\n",
      "commitDate": "08/08/15 7:32 PM",
      "commitName": "16ae5032c5e25ad35475c9a0f2de578ea6e640e5",
      "commitAuthor": "Baratali Izmailov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #1293: Improved coverage for IllegalInstantiationCheck\n",
          "commitDate": "08/08/15 7:32 PM",
          "commitName": "16ae5032c5e25ad35475c9a0f2de578ea6e640e5",
          "commitAuthor": "Baratali Izmailov",
          "commitDateOld": "07/08/15 10:17 PM",
          "commitNameOld": "4fd298b00126d60147dce7631c6e0d3e0921f82f",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.89,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,20 @@\n-    private boolean isStandardClass(String className, int clsNameLen, String illegal,\n-                                    int illegalLen) {\n+    private boolean isStandardClass(String className, String illegal) {\n         // class from java.lang\n-        if (illegalLen - JAVA_LANG.length() \u003d\u003d clsNameLen\n+        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n             final boolean isSamePackage \u003d isSamePackage(className);\n \n             if (!(isSameFile || isSamePackage)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!(isSameFile || isSamePackage)) {\n                return true;\n            }\n        }\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
          "extendedDetails": {
            "oldValue": "[className-String, clsNameLen-int, illegal-String, illegalLen-int]",
            "newValue": "[className-String, illegal-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1293: Improved coverage for IllegalInstantiationCheck\n",
          "commitDate": "08/08/15 7:32 PM",
          "commitName": "16ae5032c5e25ad35475c9a0f2de578ea6e640e5",
          "commitAuthor": "Baratali Izmailov",
          "commitDateOld": "07/08/15 10:17 PM",
          "commitNameOld": "4fd298b00126d60147dce7631c6e0d3e0921f82f",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.89,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,20 @@\n-    private boolean isStandardClass(String className, int clsNameLen, String illegal,\n-                                    int illegalLen) {\n+    private boolean isStandardClass(String className, String illegal) {\n         // class from java.lang\n-        if (illegalLen - JAVA_LANG.length() \u003d\u003d clsNameLen\n+        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n             \u0026\u0026 illegal.endsWith(className)\n             \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n             // java.lang needs no import, but a class without import might\n             // also come from the same file or be in the same package.\n             // E.g. if a class defines an inner class \"Boolean\",\n             // the expression \"new Boolean()\" refers to that class,\n             // not to java.lang.Boolean\n \n             final boolean isSameFile \u003d classNames.contains(className);\n             final boolean isSamePackage \u003d isSamePackage(className);\n \n             if (!(isSameFile || isSamePackage)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isStandardClass(String className, String illegal) {\n        // class from java.lang\n        if (illegal.length() - JAVA_LANG.length() \u003d\u003d className.length()\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!(isSameFile || isSamePackage)) {\n                return true;\n            }\n        }\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "d64bdf0caa867be3913f2665ef4fcc654524937e": {
      "type": "Yintroduced",
      "commitMessage": "IllegalInstantiationCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "d64bdf0caa867be3913f2665ef4fcc654524937e",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,21 @@\n+    private boolean isStandardClass(String className, int clsNameLen, String illegal,\n+                                    int illegalLen) {\n+        // class from java.lang\n+        if (illegalLen - JAVA_LANG.length() \u003d\u003d clsNameLen\n+            \u0026\u0026 illegal.endsWith(className)\n+            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n+            // java.lang needs no import, but a class without import might\n+            // also come from the same file or be in the same package.\n+            // E.g. if a class defines an inner class \"Boolean\",\n+            // the expression \"new Boolean()\" refers to that class,\n+            // not to java.lang.Boolean\n+\n+            final boolean isSameFile \u003d classNames.contains(className);\n+            final boolean isSamePackage \u003d isSamePackage(className);\n+\n+            if (!(isSameFile || isSamePackage)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isStandardClass(String className, int clsNameLen, String illegal,\n                                    int illegalLen) {\n        // class from java.lang\n        if (illegalLen - JAVA_LANG.length() \u003d\u003d clsNameLen\n            \u0026\u0026 illegal.endsWith(className)\n            \u0026\u0026 illegal.startsWith(JAVA_LANG)) {\n            // java.lang needs no import, but a class without import might\n            // also come from the same file or be in the same package.\n            // E.g. if a class defines an inner class \"Boolean\",\n            // the expression \"new Boolean()\" refers to that class,\n            // not to java.lang.Boolean\n\n            final boolean isSameFile \u003d classNames.contains(className);\n            final boolean isSamePackage \u003d isSamePackage(className);\n\n            if (!(isSameFile || isSamePackage)) {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java"
    }
  }
}