{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SinglelineDetector.java",
  "functionName": "checkLine",
  "functionId": "checkLine___lineNo-int__line-String__matcher-Matcher__startPosition-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
  "functionStartLine": 101,
  "functionEndLine": 129,
  "numCommitsSeen": 45,
  "timeTaken": 2186,
  "changeHistory": [
    "0a43d1d6d5340fe06606d135a71c45b579d170f0",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "cd8f1c3183f391e13f409d8e9b71d842e7a164bc",
    "d282053d9ce02c13c779decfd079a8305086f752",
    "23a1b6253f6296c1a3888361953da47f2808ca3d",
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525",
    "075b3084de3934dbf73f108110b36e01dcf10d1e",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "61f25fbed0f49e67e18b988eb47c86d72544ac23"
  ],
  "changeHistoryShort": {
    "0a43d1d6d5340fe06606d135a71c45b579d170f0": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "cd8f1c3183f391e13f409d8e9b71d842e7a164bc": "Ybodychange",
    "d282053d9ce02c13c779decfd079a8305086f752": "Ymultichange(Yparameterchange,Ybodychange)",
    "23a1b6253f6296c1a3888361953da47f2808ca3d": "Ybodychange",
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525": "Ybodychange",
    "075b3084de3934dbf73f108110b36e01dcf10d1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "61f25fbed0f49e67e18b988eb47c86d72544ac23": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a43d1d6d5340fe06606d135a71c45b579d170f0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4988: increased coverage of pitest-checks-regexp to 100%\n",
      "commitDate": "22/08/17 5:35 PM",
      "commitName": "0a43d1d6d5340fe06606d135a71c45b579d170f0",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "10/07/17 12:57 PM",
      "commitNameOld": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 43.19,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,29 @@\n     private void checkLine(int lineNo, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (foundMatch) {\n             // match is found, check for intersection with comment\n             final int startCol \u003d matcher.start(0);\n             final int endCol \u003d matcher.end(0);\n             // Note that Matcher.end(int) returns the offset AFTER the\n             // last matched character, but shouldSuppress()\n             // needs column number of the last character.\n             // So we need to use (endCol - 1) here.\n             if (options.getSuppressor()\n                     .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n-                if (endCol \u003c line.length()) {\n-                    // check if the expression is on the rest of the line\n-                    checkLine(lineNo, line, matcher, endCol);\n-                }\n+                checkLine(lineNo, line, matcher, endCol);\n             }\n             else {\n                 currentMatches++;\n                 if (currentMatches \u003e options.getMaximum()) {\n                     if (options.getMessage().isEmpty()) {\n                         options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n                                 matcher.pattern().toString());\n                     }\n                     else {\n                         options.getReporter().log(lineNo, options.getMessage());\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int lineNo, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (foundMatch) {\n            // match is found, check for intersection with comment\n            final int startCol \u003d matcher.start(0);\n            final int endCol \u003d matcher.end(0);\n            // Note that Matcher.end(int) returns the offset AFTER the\n            // last matched character, but shouldSuppress()\n            // needs column number of the last character.\n            // So we need to use (endCol - 1) here.\n            if (options.getSuppressor()\n                    .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n                checkLine(lineNo, line, matcher, endCol);\n            }\n            else {\n                currentMatches++;\n                if (currentMatches \u003e options.getMaximum()) {\n                    if (options.getMessage().isEmpty()) {\n                        options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n                                matcher.pattern().toString());\n                    }\n                    else {\n                        options.getReporter().log(lineNo, options.getMessage());\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "21/01/16 6:40 AM",
      "commitNameOld": "cd8f1c3183f391e13f409d8e9b71d842e7a164bc",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 126.96,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n     private void checkLine(int lineNo, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n-        if (!foundMatch) {\n-            return;\n-        }\n-\n-        // match is found, check for intersection with comment\n-        final int startCol \u003d matcher.start(0);\n-        final int endCol \u003d matcher.end(0);\n-        // Note that Matcher.end(int) returns the offset AFTER the\n-        // last matched character, but shouldSuppress()\n-        // needs column number of the last character.\n-        // So we need to use (endCol - 1) here.\n-        if (options.getSuppressor()\n-                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n-            if (endCol \u003c line.length()) {\n-                // check if the expression is on the rest of the line\n-                checkLine(lineNo, line, matcher, endCol);\n-            }\n-            return;\n-        }\n-\n-        currentMatches++;\n-        if (currentMatches \u003e options.getMaximum()) {\n-            if (options.getMessage().isEmpty()) {\n-                options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n-                        matcher.pattern().toString());\n+        if (foundMatch) {\n+            // match is found, check for intersection with comment\n+            final int startCol \u003d matcher.start(0);\n+            final int endCol \u003d matcher.end(0);\n+            // Note that Matcher.end(int) returns the offset AFTER the\n+            // last matched character, but shouldSuppress()\n+            // needs column number of the last character.\n+            // So we need to use (endCol - 1) here.\n+            if (options.getSuppressor()\n+                    .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n+                if (endCol \u003c line.length()) {\n+                    // check if the expression is on the rest of the line\n+                    checkLine(lineNo, line, matcher, endCol);\n+                }\n             }\n             else {\n-                options.getReporter().log(lineNo, options.getMessage());\n+                currentMatches++;\n+                if (currentMatches \u003e options.getMaximum()) {\n+                    if (options.getMessage().isEmpty()) {\n+                        options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n+                                matcher.pattern().toString());\n+                    }\n+                    else {\n+                        options.getReporter().log(lineNo, options.getMessage());\n+                    }\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int lineNo, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (foundMatch) {\n            // match is found, check for intersection with comment\n            final int startCol \u003d matcher.start(0);\n            final int endCol \u003d matcher.end(0);\n            // Note that Matcher.end(int) returns the offset AFTER the\n            // last matched character, but shouldSuppress()\n            // needs column number of the last character.\n            // So we need to use (endCol - 1) here.\n            if (options.getSuppressor()\n                    .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n                if (endCol \u003c line.length()) {\n                    // check if the expression is on the rest of the line\n                    checkLine(lineNo, line, matcher, endCol);\n                }\n            }\n            else {\n                currentMatches++;\n                if (currentMatches \u003e options.getMaximum()) {\n                    if (options.getMessage().isEmpty()) {\n                        options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n                                matcher.pattern().toString());\n                    }\n                    else {\n                        options.getReporter().log(lineNo, options.getMessage());\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {}
    },
    "cd8f1c3183f391e13f409d8e9b71d842e7a164bc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: moved inline strings to error message fields",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "cd8f1c3183f391e13f409d8e9b71d842e7a164bc",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkLine(int lineNo, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n         final int startCol \u003d matcher.start(0);\n         final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n         if (options.getSuppressor()\n                 .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n             if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n                 checkLine(lineNo, line, matcher, endCol);\n             }\n             return;\n         }\n \n         currentMatches++;\n         if (currentMatches \u003e options.getMaximum()) {\n             if (options.getMessage().isEmpty()) {\n-                options.getReporter().log(lineNo, \"regexp.exceeded\",\n+                options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n                         matcher.pattern().toString());\n             }\n             else {\n                 options.getReporter().log(lineNo, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int lineNo, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineNo, line, matcher, endCol);\n            }\n            return;\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (options.getMessage().isEmpty()) {\n                options.getReporter().log(lineNo, MSG_REGEXP_EXCEEDED,\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineNo, options.getMessage());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {}
    },
    "d282053d9ce02c13c779decfd079a8305086f752": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "24/09/15 3:10 PM",
      "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2080: Fix typos in code\n",
          "commitDate": "24/09/15 3:10 PM",
          "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "25/08/15 4:43 AM",
          "commitNameOld": "e615817b5bff08ada2fce5f43e9e1bcae4e77c38",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 30.44,
          "commitsBetweenForRepo": 361,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    private void checkLine(int lineno, String line, Matcher matcher,\n+    private void checkLine(int lineNo, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n         final int startCol \u003d matcher.start(0);\n         final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n         if (options.getSuppressor()\n-                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n+                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n             if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n-                checkLine(lineno, line, matcher, endCol);\n+                checkLine(lineNo, line, matcher, endCol);\n             }\n             return;\n         }\n \n         currentMatches++;\n         if (currentMatches \u003e options.getMaximum()) {\n             if (options.getMessage().isEmpty()) {\n-                options.getReporter().log(lineno, \"regexp.exceeded\",\n+                options.getReporter().log(lineNo, \"regexp.exceeded\",\n                         matcher.pattern().toString());\n             }\n             else {\n-                options.getReporter().log(lineno, options.getMessage());\n+                options.getReporter().log(lineNo, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkLine(int lineNo, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineNo, line, matcher, endCol);\n            }\n            return;\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (options.getMessage().isEmpty()) {\n                options.getReporter().log(lineNo, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineNo, options.getMessage());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
          "extendedDetails": {
            "oldValue": "[lineno-int, line-String, matcher-Matcher, startPosition-int]",
            "newValue": "[lineNo-int, line-String, matcher-Matcher, startPosition-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2080: Fix typos in code\n",
          "commitDate": "24/09/15 3:10 PM",
          "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "25/08/15 4:43 AM",
          "commitNameOld": "e615817b5bff08ada2fce5f43e9e1bcae4e77c38",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 30.44,
          "commitsBetweenForRepo": 361,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    private void checkLine(int lineno, String line, Matcher matcher,\n+    private void checkLine(int lineNo, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n         final int startCol \u003d matcher.start(0);\n         final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n         if (options.getSuppressor()\n-                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n+                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n             if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n-                checkLine(lineno, line, matcher, endCol);\n+                checkLine(lineNo, line, matcher, endCol);\n             }\n             return;\n         }\n \n         currentMatches++;\n         if (currentMatches \u003e options.getMaximum()) {\n             if (options.getMessage().isEmpty()) {\n-                options.getReporter().log(lineno, \"regexp.exceeded\",\n+                options.getReporter().log(lineNo, \"regexp.exceeded\",\n                         matcher.pattern().toString());\n             }\n             else {\n-                options.getReporter().log(lineno, options.getMessage());\n+                options.getReporter().log(lineNo, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkLine(int lineNo, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineNo, line, matcher, endCol);\n            }\n            return;\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (options.getMessage().isEmpty()) {\n                options.getReporter().log(lineNo, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineNo, options.getMessage());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
          "extendedDetails": {}
        }
      ]
    },
    "23a1b6253f6296c1a3888361953da47f2808ca3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fix for \u0027Don\u0027t use trailing comments\u0027 (partial)\n",
      "commitDate": "21/08/15 5:05 AM",
      "commitName": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "16/08/15 9:13 PM",
      "commitNameOld": "20e6e9afcad4cf6ba8ac455becbcddd7f9e36284",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.33,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkLine(int lineno, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n         final int startCol \u003d matcher.start(0);\n         final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n         if (options.getSuppressor()\n                 .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n             if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n                 checkLine(lineno, line, matcher, endCol);\n             }\n-            return; // end processing here\n+            return;\n         }\n \n         currentMatches++;\n         if (currentMatches \u003e options.getMaximum()) {\n             if (options.getMessage().isEmpty()) {\n                 options.getReporter().log(lineno, \"regexp.exceeded\",\n                         matcher.pattern().toString());\n             }\n             else {\n                 options.getReporter().log(lineno, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int lineno, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineno, line, matcher, endCol);\n            }\n            return;\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (options.getMessage().isEmpty()) {\n                options.getReporter().log(lineno, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineno, options.getMessage());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {}
    },
    "084809c3b9e0d039c818cc4d8c5e640ea9e26525": {
      "type": "Ybodychange",
      "commitMessage": "Simplify empty string check. #1555\n\nFixes `Simplify empty string check` inspection violations.\n\nDescription:\n\u003eReports .equals() being called to compare a String with an empty string. It is normally more performant to test a String for emptiness by comparing its .length() to zero instead.\n",
      "commitDate": "07/08/15 10:11 PM",
      "commitName": "084809c3b9e0d039c818cc4d8c5e640ea9e26525",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 82.73,
      "commitsBetweenForRepo": 621,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkLine(int lineno, String line, Matcher matcher,\n             int startPosition) {\n         final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n         final int startCol \u003d matcher.start(0);\n         final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n         if (options.getSuppressor()\n                 .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n             if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n                 checkLine(lineno, line, matcher, endCol);\n             }\n             return; // end processing here\n         }\n \n         currentMatches++;\n         if (currentMatches \u003e options.getMaximum()) {\n-            if (\"\".equals(options.getMessage())) {\n+            if (options.getMessage().isEmpty()) {\n                 options.getReporter().log(lineno, \"regexp.exceeded\",\n                         matcher.pattern().toString());\n             }\n             else {\n                 options.getReporter().log(lineno, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int lineno, String line, Matcher matcher,\n            int startPosition) {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineno, line, matcher, endCol);\n            }\n            return; // end processing here\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (options.getMessage().isEmpty()) {\n                options.getReporter().log(lineno, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineno, options.getMessage());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {}
    },
    "075b3084de3934dbf73f108110b36e01dcf10d1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, regexp, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "075b3084de3934dbf73f108110b36e01dcf10d1e",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, regexp, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "075b3084de3934dbf73f108110b36e01dcf10d1e",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-    private void checkLine(int aLineno, String aLine, Matcher aMatcher,\n-            int aStartPosition)\n+    private void checkLine(int lineno, String line, Matcher matcher,\n+            int startPosition)\n     {\n-        final boolean foundMatch \u003d aMatcher.find(aStartPosition);\n+        final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n-        final int startCol \u003d aMatcher.start(0);\n-        final int endCol \u003d aMatcher.end(0);\n+        final int startCol \u003d matcher.start(0);\n+        final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n-        if (mOptions.getSuppressor()\n-                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))\n+        if (options.getSuppressor()\n+                .shouldSuppress(lineno, startCol, lineno, endCol - 1))\n         {\n-            if (endCol \u003c aLine.length()) {\n+            if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n-                checkLine(aLineno, aLine, aMatcher, endCol);\n+                checkLine(lineno, line, matcher, endCol);\n             }\n             return; // end processing here\n         }\n \n-        mCurrentMatches++;\n-        if (mCurrentMatches \u003e mOptions.getMaximum()) {\n-            if (\"\".equals(mOptions.getMessage())) {\n-                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",\n-                        aMatcher.pattern().toString());\n+        currentMatches++;\n+        if (currentMatches \u003e options.getMaximum()) {\n+            if (\"\".equals(options.getMessage())) {\n+                options.getReporter().log(lineno, \"regexp.exceeded\",\n+                        matcher.pattern().toString());\n             }\n             else {\n-                mOptions.getReporter().log(aLineno, mOptions.getMessage());\n+                options.getReporter().log(lineno, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkLine(int lineno, String line, Matcher matcher,\n            int startPosition)\n    {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineno, startCol, lineno, endCol - 1))\n        {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineno, line, matcher, endCol);\n            }\n            return; // end processing here\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (\"\".equals(options.getMessage())) {\n                options.getReporter().log(lineno, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineno, options.getMessage());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
          "extendedDetails": {
            "oldValue": "[aLineno-int, aLine-String, aMatcher-Matcher, aStartPosition-int]",
            "newValue": "[lineno-int, line-String, matcher-Matcher, startPosition-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, regexp, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "075b3084de3934dbf73f108110b36e01dcf10d1e",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-    private void checkLine(int aLineno, String aLine, Matcher aMatcher,\n-            int aStartPosition)\n+    private void checkLine(int lineno, String line, Matcher matcher,\n+            int startPosition)\n     {\n-        final boolean foundMatch \u003d aMatcher.find(aStartPosition);\n+        final boolean foundMatch \u003d matcher.find(startPosition);\n         if (!foundMatch) {\n             return;\n         }\n \n         // match is found, check for intersection with comment\n-        final int startCol \u003d aMatcher.start(0);\n-        final int endCol \u003d aMatcher.end(0);\n+        final int startCol \u003d matcher.start(0);\n+        final int endCol \u003d matcher.end(0);\n         // Note that Matcher.end(int) returns the offset AFTER the\n         // last matched character, but shouldSuppress()\n         // needs column number of the last character.\n         // So we need to use (endCol - 1) here.\n-        if (mOptions.getSuppressor()\n-                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))\n+        if (options.getSuppressor()\n+                .shouldSuppress(lineno, startCol, lineno, endCol - 1))\n         {\n-            if (endCol \u003c aLine.length()) {\n+            if (endCol \u003c line.length()) {\n                 // check if the expression is on the rest of the line\n-                checkLine(aLineno, aLine, aMatcher, endCol);\n+                checkLine(lineno, line, matcher, endCol);\n             }\n             return; // end processing here\n         }\n \n-        mCurrentMatches++;\n-        if (mCurrentMatches \u003e mOptions.getMaximum()) {\n-            if (\"\".equals(mOptions.getMessage())) {\n-                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",\n-                        aMatcher.pattern().toString());\n+        currentMatches++;\n+        if (currentMatches \u003e options.getMaximum()) {\n+            if (\"\".equals(options.getMessage())) {\n+                options.getReporter().log(lineno, \"regexp.exceeded\",\n+                        matcher.pattern().toString());\n             }\n             else {\n-                mOptions.getReporter().log(aLineno, mOptions.getMessage());\n+                options.getReporter().log(lineno, options.getMessage());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkLine(int lineno, String line, Matcher matcher,\n            int startPosition)\n    {\n        final boolean foundMatch \u003d matcher.find(startPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d matcher.start(0);\n        final int endCol \u003d matcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (options.getSuppressor()\n                .shouldSuppress(lineno, startCol, lineno, endCol - 1))\n        {\n            if (endCol \u003c line.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(lineno, line, matcher, endCol);\n            }\n            return; // end processing here\n        }\n\n        currentMatches++;\n        if (currentMatches \u003e options.getMaximum()) {\n            if (\"\".equals(options.getMessage())) {\n                options.getReporter().log(lineno, \"regexp.exceeded\",\n                        matcher.pattern().toString());\n            }\n            else {\n                options.getReporter().log(lineno, options.getMessage());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkLine(int aLineno, String aLine, Matcher aMatcher,\n            int aStartPosition)\n    {\n        final boolean foundMatch \u003d aMatcher.find(aStartPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d aMatcher.start(0);\n        final int endCol \u003d aMatcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (mOptions.getSuppressor()\n                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))\n        {\n            if (endCol \u003c aLine.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(aLineno, aLine, aMatcher, endCol);\n            }\n            return; // end processing here\n        }\n\n        mCurrentMatches++;\n        if (mCurrentMatches \u003e mOptions.getMaximum()) {\n            if (\"\".equals(mOptions.getMessage())) {\n                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",\n                        aMatcher.pattern().toString());\n            }\n            else {\n                mOptions.getReporter().log(aLineno, mOptions.getMessage());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java"
      }
    },
    "61f25fbed0f49e67e18b988eb47c86d72544ac23": {
      "type": "Yintroduced",
      "commitMessage": "start of refactoring to consolidate all the regexp checks.\n",
      "commitDate": "22/12/08 3:21 AM",
      "commitName": "61f25fbed0f49e67e18b988eb47c86d72544ac23",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,36 @@\n+    private void checkLine(int aLineno, String aLine, Matcher aMatcher,\n+            int aStartPosition)\n+    {\n+        final boolean foundMatch \u003d aMatcher.find(aStartPosition);\n+        if (!foundMatch) {\n+            return;\n+        }\n+\n+        // match is found, check for intersection with comment\n+        final int startCol \u003d aMatcher.start(0);\n+        final int endCol \u003d aMatcher.end(0);\n+        // Note that Matcher.end(int) returns the offset AFTER the\n+        // last matched character, but shouldSuppress()\n+        // needs column number of the last character.\n+        // So we need to use (endCol - 1) here.\n+        if (mOptions.getSuppressor()\n+                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))\n+        {\n+            if (endCol \u003c aLine.length()) {\n+                // check if the expression is on the rest of the line\n+                checkLine(aLineno, aLine, aMatcher, endCol);\n+            }\n+            return; // end processing here\n+        }\n+\n+        mCurrentMatches++;\n+        if (mCurrentMatches \u003e mOptions.getMaximum()) {\n+            if (\"\".equals(mOptions.getMessage())) {\n+                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",\n+                        aMatcher.pattern().toString());\n+            }\n+            else {\n+                mOptions.getReporter().log(aLineno, mOptions.getMessage());\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkLine(int aLineno, String aLine, Matcher aMatcher,\n            int aStartPosition)\n    {\n        final boolean foundMatch \u003d aMatcher.find(aStartPosition);\n        if (!foundMatch) {\n            return;\n        }\n\n        // match is found, check for intersection with comment\n        final int startCol \u003d aMatcher.start(0);\n        final int endCol \u003d aMatcher.end(0);\n        // Note that Matcher.end(int) returns the offset AFTER the\n        // last matched character, but shouldSuppress()\n        // needs column number of the last character.\n        // So we need to use (endCol - 1) here.\n        if (mOptions.getSuppressor()\n                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))\n        {\n            if (endCol \u003c aLine.length()) {\n                // check if the expression is on the rest of the line\n                checkLine(aLineno, aLine, aMatcher, endCol);\n            }\n            return; // end processing here\n        }\n\n        mCurrentMatches++;\n        if (mCurrentMatches \u003e mOptions.getMaximum()) {\n            if (\"\".equals(mOptions.getMessage())) {\n                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",\n                        aMatcher.pattern().toString());\n            }\n            else {\n                mOptions.getReporter().log(aLineno, mOptions.getMessage());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java"
    }
  }
}