{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UniquePropertiesCheck.java",
  "functionName": "getLineNumber",
  "functionId": "getLineNumber___fileText-FileText__keyName-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
  "functionStartLine": 119,
  "functionEndLine": 137,
  "numCommitsSeen": 69,
  "timeTaken": 2140,
  "changeHistory": [
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
    "74c41b3aaa97a1b013656d04bba3835920008bbd",
    "8c08011e09bef5b739ca59366aaa83f698104eb1",
    "0c2abadbb7f2887f31011157d62edf40bea131c3",
    "738c7f184d7e8b7c9d11dcb3cc47e0895945d1e3",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "3ba599059682310f72e0fb7e5354be29e9ead169"
  ],
  "changeHistoryShort": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": "Ybodychange",
    "74c41b3aaa97a1b013656d04bba3835920008bbd": "Ybodychange",
    "8c08011e09bef5b739ca59366aaa83f698104eb1": "Ymodifierchange",
    "0c2abadbb7f2887f31011157d62edf40bea131c3": "Ymultichange(Yparameterchange,Ybodychange)",
    "738c7f184d7e8b7c9d11dcb3cc47e0895945d1e3": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "3ba599059682310f72e0fb7e5354be29e9ead169": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6000: Fix zero line violations\n",
      "commitDate": "05/09/18 5:54 AM",
      "commitName": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
      "commitAuthor": "Boxuan Li",
      "commitDateOld": "07/05/18 6:47 PM",
      "commitNameOld": "0461a0f839c8cd2306354912b4956267c1d0ec20",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 120.46,
      "commitsBetweenForRepo": 270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private static int getLineNumber(FileText fileText, String keyName) {\n         final Pattern keyPattern \u003d getKeyPattern(keyName);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n         for (int index \u003d 0; index \u003c fileText.size(); index++) {\n             final String line \u003d fileText.get(index);\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n         // -1 as check seeks for the first duplicate occurrence in file,\n         // so it cannot be the last line.\n         if (lineNumber \u003e fileText.size() - 1) {\n-            lineNumber \u003d 0;\n+            lineNumber \u003d 1;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int getLineNumber(FileText fileText, String keyName) {\n        final Pattern keyPattern \u003d getKeyPattern(keyName);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        // -1 as check seeks for the first duplicate occurrence in file,\n        // so it cannot be the last line.\n        if (lineNumber \u003e fileText.size() - 1) {\n            lineNumber \u003d 1;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "74c41b3aaa97a1b013656d04bba3835920008bbd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4675: increase coverage of pitest-checks-misc to 93%\n",
      "commitDate": "21/08/17 5:47 AM",
      "commitName": "74c41b3aaa97a1b013656d04bba3835920008bbd",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "09/08/17 5:02 AM",
      "commitNameOld": "2a5654734a64c5459819c5ced97bdacd0285ccc7",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 12.03,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n     private static int getLineNumber(FileText fileText, String keyName) {\n         final Pattern keyPattern \u003d getKeyPattern(keyName);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n         for (int index \u003d 0; index \u003c fileText.size(); index++) {\n             final String line \u003d fileText.get(index);\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n-        if (lineNumber \u003e fileText.size()) {\n+        // -1 as check seeks for the first duplicate occurance in file,\n+        // so it cannot be the last line.\n+        if (lineNumber \u003e fileText.size() - 1) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int getLineNumber(FileText fileText, String keyName) {\n        final Pattern keyPattern \u003d getKeyPattern(keyName);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        // -1 as check seeks for the first duplicate occurance in file,\n        // so it cannot be the last line.\n        if (lineNumber \u003e fileText.size() - 1) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "8c08011e09bef5b739ca59366aaa83f698104eb1": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #4694: UniquePropertiesCheck.getLineNumber should be private\n",
      "commitDate": "13/07/17 5:29 AM",
      "commitName": "8c08011e09bef5b739ca59366aaa83f698104eb1",
      "commitAuthor": "BBG",
      "commitDateOld": "10/07/17 12:57 PM",
      "commitNameOld": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-    protected static int getLineNumber(FileText fileText, String keyName) {\n+    private static int getLineNumber(FileText fileText, String keyName) {\n         final Pattern keyPattern \u003d getKeyPattern(keyName);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n         for (int index \u003d 0; index \u003c fileText.size(); index++) {\n             final String line \u003d fileText.get(index);\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n         if (lineNumber \u003e fileText.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int getLineNumber(FileText fileText, String keyName) {\n        final Pattern keyPattern \u003d getKeyPattern(keyName);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e fileText.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {
        "oldValue": "[protected, static]",
        "newValue": "[private, static]"
      }
    },
    "0c2abadbb7f2887f31011157d62edf40bea131c3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
      "commitDate": "10/07/17 12:57 PM",
      "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthor": "Timur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
          "commitDate": "10/07/17 12:57 PM",
          "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
          "commitAuthor": "Timur",
          "commitDateOld": "06/07/17 1:22 PM",
          "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthorOld": "Timur",
          "daysBetweenCommits": 3.98,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n-    protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n-        final String keyPatternString \u003d \"^\" + SPACE_PATTERN.matcher(keyName)\n-                        .replaceAll(Matcher.quoteReplacement(\"\\\\\\\\ \")) + \"[\\\\s:\u003d].*$\";\n-        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n+    protected static int getLineNumber(FileText fileText, String keyName) {\n+        final Pattern keyPattern \u003d getKeyPattern(keyName);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n-        for (String line : lines) {\n+        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n+            final String line \u003d fileText.get(index);\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n-        if (lineNumber \u003e lines.size()) {\n+        if (lineNumber \u003e fileText.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected static int getLineNumber(FileText fileText, String keyName) {\n        final Pattern keyPattern \u003d getKeyPattern(keyName);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e fileText.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {
            "oldValue": "[lines-List\u003cString\u003e, keyName-String]",
            "newValue": "[fileText-FileText, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
          "commitDate": "10/07/17 12:57 PM",
          "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
          "commitAuthor": "Timur",
          "commitDateOld": "06/07/17 1:22 PM",
          "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthorOld": "Timur",
          "daysBetweenCommits": 3.98,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,17 @@\n-    protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n-        final String keyPatternString \u003d \"^\" + SPACE_PATTERN.matcher(keyName)\n-                        .replaceAll(Matcher.quoteReplacement(\"\\\\\\\\ \")) + \"[\\\\s:\u003d].*$\";\n-        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n+    protected static int getLineNumber(FileText fileText, String keyName) {\n+        final Pattern keyPattern \u003d getKeyPattern(keyName);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n-        for (String line : lines) {\n+        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n+            final String line \u003d fileText.get(index);\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n-        if (lineNumber \u003e lines.size()) {\n+        if (lineNumber \u003e fileText.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected static int getLineNumber(FileText fileText, String keyName) {\n        final Pattern keyPattern \u003d getKeyPattern(keyName);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (int index \u003d 0; index \u003c fileText.size(); index++) {\n            final String line \u003d fileText.get(index);\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e fileText.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "738c7f184d7e8b7c9d11dcb3cc47e0895945d1e3": {
      "type": "Ybodychange",
      "commitMessage": "Use compiled pattern instead of dynamic regexp. #1555\n\nFixes `DynamicRegexReplaceableByCompiledPattern` inspection violations.\n\nDescription:\n\u003eReports calls to the regular expression methods of java.lang.String using constants arguments. Such calls may be profitably replaced with a private static final Pattern field so that the regular expression does not have to be compiled each time it is used.\n",
      "commitDate": "27/08/15 5:42 AM",
      "commitName": "738c7f184d7e8b7c9d11dcb3cc47e0895945d1e3",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "19/08/15 1:14 PM",
      "commitNameOld": "ea963bb721aafd9584242cedf2781f0294f2b18d",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 7.69,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n-        final String keyPatternString \u003d\n-                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n+        final String keyPatternString \u003d \"^\" + SPACE_PATTERN.matcher(keyName)\n+                        .replaceAll(Matcher.quoteReplacement(\"\\\\\\\\ \")) + \"[\\\\s:\u003d].*$\";\n         final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n         for (String line : lines) {\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n         if (lineNumber \u003e lines.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n        final String keyPatternString \u003d \"^\" + SPACE_PATTERN.matcher(keyName)\n                        .replaceAll(Matcher.quoteReplacement(\"\\\\\\\\ \")) + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : lines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e lines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-    protected int getLineNumber(List\u003cString\u003e lines, String keyName) {\n+    protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n         final String keyPatternString \u003d\n                 \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n         final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n         for (String line : lines) {\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n         if (lineNumber \u003e lines.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected static int getLineNumber(List\u003cString\u003e lines, String keyName) {\n        final String keyPatternString \u003d\n                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : lines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e lines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[protected, static]"
      }
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    protected int getLineNumber(List\u003cString\u003e aLines, String aKeyNane)\n+    protected int getLineNumber(List\u003cString\u003e lines, String keyName)\n     {\n         final String keyPatternString \u003d\n-                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n+                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n         final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n-        for (String line : aLines) {\n+        for (String line : lines) {\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n-        if (lineNumber \u003e aLines.size()) {\n+        if (lineNumber \u003e lines.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected int getLineNumber(List\u003cString\u003e lines, String keyName)\n    {\n        final String keyPatternString \u003d\n                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : lines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e lines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {
            "oldValue": "[aLines-List\u003cString\u003e, aKeyNane-String]",
            "newValue": "[lines-List\u003cString\u003e, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    protected int getLineNumber(List\u003cString\u003e aLines, String aKeyNane)\n+    protected int getLineNumber(List\u003cString\u003e lines, String keyName)\n     {\n         final String keyPatternString \u003d\n-                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n+                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n         final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n         int lineNumber \u003d 1;\n         final Matcher matcher \u003d keyPattern.matcher(\"\");\n-        for (String line : aLines) {\n+        for (String line : lines) {\n             matcher.reset(line);\n             if (matcher.matches()) {\n                 break;\n             }\n             ++lineNumber;\n         }\n-        if (lineNumber \u003e aLines.size()) {\n+        if (lineNumber \u003e lines.size()) {\n             lineNumber \u003d 0;\n         }\n         return lineNumber;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected int getLineNumber(List\u003cString\u003e lines, String keyName)\n    {\n        final String keyPatternString \u003d\n                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : lines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e lines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected int getLineNumber(List\u003cString\u003e aLines, String aKeyNane)\n    {\n        final String keyPatternString \u003d\n                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : aLines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e aLines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java"
      }
    },
    "3ba599059682310f72e0fb7e5354be29e9ead169": {
      "type": "Yintroduced",
      "commitMessage": "Implemented UniqueProperties check\n",
      "commitDate": "25/10/13 1:11 AM",
      "commitName": "3ba599059682310f72e0fb7e5354be29e9ead169",
      "commitAuthor": "Pavel Baranchikov",
      "diff": "@@ -0,0 +1,19 @@\n+    protected int getLineNumber(List\u003cString\u003e aLines, String aKeyNane)\n+    {\n+        final String keyPatternString \u003d\n+                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n+        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n+        int lineNumber \u003d 1;\n+        final Matcher matcher \u003d keyPattern.matcher(\"\");\n+        for (String line : aLines) {\n+            matcher.reset(line);\n+            if (matcher.matches()) {\n+                break;\n+            }\n+            ++lineNumber;\n+        }\n+        if (lineNumber \u003e aLines.size()) {\n+            lineNumber \u003d 0;\n+        }\n+        return lineNumber;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected int getLineNumber(List\u003cString\u003e aLines, String aKeyNane)\n    {\n        final String keyPatternString \u003d\n                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:\u003d].*$\";\n        final Pattern keyPattern \u003d Pattern.compile(keyPatternString);\n        int lineNumber \u003d 1;\n        final Matcher matcher \u003d keyPattern.matcher(\"\");\n        for (String line : aLines) {\n            matcher.reset(line);\n            if (matcher.matches()) {\n                break;\n            }\n            ++lineNumber;\n        }\n        if (lineNumber \u003e aLines.size()) {\n            lineNumber \u003d 0;\n        }\n        return lineNumber;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java"
    }
  }
}