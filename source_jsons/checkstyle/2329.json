{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DesignForExtensionCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
  "functionStartLine": 260,
  "functionEndLine": 273,
  "numCommitsSeen": 89,
  "timeTaken": 3155,
  "changeHistory": [
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "3eaa031fb7de67dc205fbbff370712bb92fc8259",
    "06716249cfb86d9f213f33a26877112e8ab45adc",
    "d282053d9ce02c13c779decfd079a8305086f752",
    "f02d45fd6d0615ca856e6cc79a37596e70e4ece9",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "e912c46b5bb5c085323930bd1e500b180c1bea8d",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "0c3c817b224c6fa50db166c0d1edb2b5d3f4162a",
    "6125beffc437f970eae276b4a6542265c6547784",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "4039611539fec37edd9abeb85f68563ec6702cf1",
    "2dda964c91b5bc5dc42b78a6d0d74060b7062613",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1",
    "9bb2ad91c98b3d590579f34abff774c4375581fc",
    "d0f2c7d53f76cdee498224fb9ca31477b0534181",
    "b42ddf006f0f45055f3a094e9b8eb25e279082db",
    "669def894ec6fa19946acd3b586508aed450a4de"
  ],
  "changeHistoryShort": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "3eaa031fb7de67dc205fbbff370712bb92fc8259": "Ybodychange",
    "06716249cfb86d9f213f33a26877112e8ab45adc": "Ybodychange",
    "d282053d9ce02c13c779decfd079a8305086f752": "Ybodychange",
    "f02d45fd6d0615ca856e6cc79a37596e70e4ece9": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "e912c46b5bb5c085323930bd1e500b180c1bea8d": "Ybodychange",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "0c3c817b224c6fa50db166c0d1edb2b5d3f4162a": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "4039611539fec37edd9abeb85f68563ec6702cf1": "Ybodychange",
    "2dda964c91b5bc5dc42b78a6d0d74060b7062613": "Ybodychange",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": "Yfilerename",
    "9bb2ad91c98b3d590579f34abff774c4375581fc": "Ymultichange(Yfilerename,Ybodychange)",
    "d0f2c7d53f76cdee498224fb9ca31477b0534181": "Ybodychange",
    "b42ddf006f0f45055f3a094e9b8eb25e279082db": "Ybodychange",
    "669def894ec6fa19946acd3b586508aed450a4de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     public void visitToken(DetailAST ast) {\n         if (!hasJavadocComment(ast)\n                 \u0026\u0026 canBeOverridden(ast)\n                 \u0026\u0026 (isNativeMethod(ast)\n                     || !hasEmptyImplementation(ast))\n                 \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n             final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n             if (canBeSubclassed(classDef)) {\n                 final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n                 final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n-                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, className, methodName);\n+                log(ast, MSG_KEY, className, methodName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!hasJavadocComment(ast)\n                \u0026\u0026 canBeOverridden(ast)\n                \u0026\u0026 (isNativeMethod(ast)\n                    || !hasEmptyImplementation(ast))\n                \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n            final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n            if (canBeSubclassed(classDef)) {\n                final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n                final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                log(ast, MSG_KEY, className, methodName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "3eaa031fb7de67dc205fbbff370712bb92fc8259": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3843: Fix coverage problem for DesignForExtension\n",
      "commitDate": "19/02/17 3:09 PM",
      "commitName": "3eaa031fb7de67dc205fbbff370712bb92fc8259",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "15/02/17 8:38 PM",
      "commitNameOld": "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     public void visitToken(DetailAST ast) {\n         if (!hasJavadocComment(ast)\n+                \u0026\u0026 canBeOverridden(ast)\n                 \u0026\u0026 (isNativeMethod(ast)\n                     || !hasEmptyImplementation(ast))\n-                \u0026\u0026 canBeOverridden(ast)\n                 \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n \n             final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n             if (canBeSubclassed(classDef)) {\n                 final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n                 final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, className, methodName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!hasJavadocComment(ast)\n                \u0026\u0026 canBeOverridden(ast)\n                \u0026\u0026 (isNativeMethod(ast)\n                    || !hasEmptyImplementation(ast))\n                \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n\n            final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n            if (canBeSubclassed(classDef)) {\n                final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n                final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, className, methodName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "06716249cfb86d9f213f33a26877112e8ab45adc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3102: DesignForExtension: consider overridable methods and javadoc\n",
      "commitDate": "22/10/16 3:36 PM",
      "commitName": "06716249cfb86d9f213f33a26877112e8ab45adc",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "15/04/16 6:55 AM",
      "commitNameOld": "6f2d94ae829c303f1bd2f0099ccbe5f395280e46",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 190.36,
      "commitsBetweenForRepo": 330,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,15 @@\n     public void visitToken(DetailAST ast) {\n-        // nothing to do for Interfaces\n-        if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n-                \u0026\u0026 !isPrivateOrFinalOrAbstract(ast)\n-                \u0026\u0026 ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n+        if (!hasJavadocComment(ast)\n+                \u0026\u0026 (isNativeMethod(ast)\n+                    || !hasEmptyImplementation(ast))\n+                \u0026\u0026 canBeOverridden(ast)\n+                \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n \n-            // method is ok if it is implementation can verified to be empty\n-            // Note: native methods don\u0027t have impl in java code, so\n-            // implementation can be null even if method not abstract\n-            final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n-            final boolean nonEmptyImplementation \u003d implementation \u003d\u003d null\n-                    || implementation.getFirstChild().getType() !\u003d TokenTypes.RCURLY;\n-\n-            final DetailAST classDef \u003d findContainingClass(ast);\n-            final DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n-            // check if the containing class can be subclassed\n-            final boolean classCanBeSubclassed \u003d classDef.getType() !\u003d TokenTypes.ENUM_DEF\n-                    \u0026\u0026 !classMods.branchContains(TokenTypes.FINAL);\n-\n-            if (nonEmptyImplementation \u0026\u0026 classCanBeSubclassed\n-                    \u0026\u0026 hasDefaultOrExplicitNonPrivateCtor(classDef)) {\n-\n-                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n-                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);\n+            final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n+            if (canBeSubclassed(classDef)) {\n+                final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n+                final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, className, methodName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!hasJavadocComment(ast)\n                \u0026\u0026 (isNativeMethod(ast)\n                    || !hasEmptyImplementation(ast))\n                \u0026\u0026 canBeOverridden(ast)\n                \u0026\u0026 !hasIgnoredAnnotation(ast, ignoredAnnotations)) {\n\n            final DetailAST classDef \u003d getNearestClassOrEnumDefinition(ast);\n            if (canBeSubclassed(classDef)) {\n                final String className \u003d classDef.findFirstToken(TokenTypes.IDENT).getText();\n                final String methodName \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, className, methodName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "d282053d9ce02c13c779decfd079a8305086f752": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "24/09/15 3:10 PM",
      "commitName": "d282053d9ce02c13c779decfd079a8305086f752",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "06/09/15 5:17 AM",
      "commitNameOld": "4d8d047f465f9eb101390da63ee62a735fbedba5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 18.41,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     public void visitToken(DetailAST ast) {\n         // nothing to do for Interfaces\n         if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                 \u0026\u0026 !isPrivateOrFinalOrAbstract(ast)\n                 \u0026\u0026 ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n \n             // method is ok if it is implementation can verified to be empty\n             // Note: native methods don\u0027t have impl in java code, so\n             // implementation can be null even if method not abstract\n             final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n             final boolean nonEmptyImplementation \u003d implementation \u003d\u003d null\n                     || implementation.getFirstChild().getType() !\u003d TokenTypes.RCURLY;\n \n             final DetailAST classDef \u003d findContainingClass(ast);\n             final DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n             // check if the containing class can be subclassed\n             final boolean classCanBeSubclassed \u003d classDef.getType() !\u003d TokenTypes.ENUM_DEF\n                     \u0026\u0026 !classMods.branchContains(TokenTypes.FINAL);\n \n             if (nonEmptyImplementation \u0026\u0026 classCanBeSubclassed\n-                    \u0026\u0026 hasDefaultOrExplNonPrivateCtor(classDef)) {\n+                    \u0026\u0026 hasDefaultOrExplicitNonPrivateCtor(classDef)) {\n \n                 final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // nothing to do for Interfaces\n        if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                \u0026\u0026 !isPrivateOrFinalOrAbstract(ast)\n                \u0026\u0026 ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n\n            // method is ok if it is implementation can verified to be empty\n            // Note: native methods don\u0027t have impl in java code, so\n            // implementation can be null even if method not abstract\n            final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n            final boolean nonEmptyImplementation \u003d implementation \u003d\u003d null\n                    || implementation.getFirstChild().getType() !\u003d TokenTypes.RCURLY;\n\n            final DetailAST classDef \u003d findContainingClass(ast);\n            final DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n            // check if the containing class can be subclassed\n            final boolean classCanBeSubclassed \u003d classDef.getType() !\u003d TokenTypes.ENUM_DEF\n                    \u0026\u0026 !classMods.branchContains(TokenTypes.FINAL);\n\n            if (nonEmptyImplementation \u0026\u0026 classCanBeSubclassed\n                    \u0026\u0026 hasDefaultOrExplicitNonPrivateCtor(classDef)) {\n\n                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "f02d45fd6d0615ca856e6cc79a37596e70e4ece9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for DesignForExtensionCheck\n",
      "commitDate": "28/08/15 10:44 PM",
      "commitName": "f02d45fd6d0615ca856e6cc79a37596e70e4ece9",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "27/08/15 12:53 PM",
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,27 @@\n     public void visitToken(DetailAST ast) {\n         // nothing to do for Interfaces\n-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n-            return;\n-        }\n-        if (isPrivateOrFinalOrAbstract(ast)) {\n-            return;\n-        }\n+        if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n+                \u0026\u0026 !isPrivateOrFinalOrAbstract(ast)\n+                \u0026\u0026 ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n \n-        // method is ok if containing class is not visible in API and\n-        // cannot be extended by 3rd parties (bug #884035)\n-        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n-            return;\n-        }\n+            // method is ok if it is implementation can verified to be empty\n+            // Note: native methods don\u0027t have impl in java code, so\n+            // implementation can be null even if method not abstract\n+            final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n+            final boolean nonEmptyImplementation \u003d implementation \u003d\u003d null\n+                    || implementation.getFirstChild().getType() !\u003d TokenTypes.RCURLY;\n \n-        // method is ok if it is implementation can verified to be empty\n-        // Note: native methods don\u0027t have impl in java code, so\n-        // implementation can be null even if method not abstract\n-        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n-        if (implementation !\u003d null\n-            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n-            return;\n-        }\n+            final DetailAST classDef \u003d findContainingClass(ast);\n+            final DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n+            // check if the containing class can be subclassed\n+            final boolean classCanBeSubclassed \u003d classDef.getType() !\u003d TokenTypes.ENUM_DEF\n+                    \u0026\u0026 !classMods.branchContains(TokenTypes.FINAL);\n \n-        // check if the containing class can be subclassed\n-        final DetailAST classDef \u003d findContainingClass(ast);\n-        final DetailAST classMods \u003d\n-            classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n-            || classMods.branchContains(TokenTypes.FINAL)) {\n-            return;\n-        }\n+            if (nonEmptyImplementation \u0026\u0026 classCanBeSubclassed\n+                    \u0026\u0026 hasDefaultOrExplNonPrivateCtor(classDef)) {\n \n-        if (hasDefaultOrExplNonPrivateCtor(classDef)) {\n-            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n-            log(ast.getLineNo(), ast.getColumnNo(),\n-                MSG_KEY, name);\n+                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // nothing to do for Interfaces\n        if (!ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                \u0026\u0026 !isPrivateOrFinalOrAbstract(ast)\n                \u0026\u0026 ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n\n            // method is ok if it is implementation can verified to be empty\n            // Note: native methods don\u0027t have impl in java code, so\n            // implementation can be null even if method not abstract\n            final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n            final boolean nonEmptyImplementation \u003d implementation \u003d\u003d null\n                    || implementation.getFirstChild().getType() !\u003d TokenTypes.RCURLY;\n\n            final DetailAST classDef \u003d findContainingClass(ast);\n            final DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n            // check if the containing class can be subclassed\n            final boolean classCanBeSubclassed \u003d classDef.getType() !\u003d TokenTypes.ENUM_DEF\n                    \u0026\u0026 !classMods.branchContains(TokenTypes.FINAL);\n\n            if (nonEmptyImplementation \u0026\u0026 classCanBeSubclassed\n                    \u0026\u0026 hasDefaultOrExplNonPrivateCtor(classDef)) {\n\n                final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     public void visitToken(DetailAST ast) {\n         // nothing to do for Interfaces\n-        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n         if (isPrivateOrFinalOrAbstract(ast)) {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n             || classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         if (hasDefaultOrExplNonPrivateCtor(classDef)) {\n             final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n             log(ast.getLineNo(), ast.getColumnNo(),\n                 MSG_KEY, name);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // nothing to do for Interfaces\n        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n        if (isPrivateOrFinalOrAbstract(ast)) {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n            || classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        if (hasDefaultOrExplNonPrivateCtor(classDef)) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                MSG_KEY, name);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555": {
      "type": "Ybodychange",
      "commitMessage": "DesignForExtensionCheck  updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "14/06/15 9:56 PM",
      "commitName": "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,39 @@\n     public void visitToken(DetailAST ast) {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n-\n-        // method is ok if it is private or abstract or final\n-        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n-            || modifiers.branchContains(TokenTypes.ABSTRACT)\n-            || modifiers.branchContains(TokenTypes.FINAL)\n-            || modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {\n+        if (isPrivateOrFinalOrAbstract(ast)) {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n             || classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n-        // check if subclassing is prevented by having only private ctors\n-        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n-\n-        boolean hasDefaultConstructor \u003d true;\n-        boolean hasExplNonPrivateCtor \u003d false;\n-\n-        DetailAST candidate \u003d objBlock.getFirstChild();\n-\n-        while (candidate !\u003d null) {\n-            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n-                hasDefaultConstructor \u003d false;\n-\n-                final DetailAST ctorMods \u003d\n-                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n-                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n-                    hasExplNonPrivateCtor \u003d true;\n-                    break;\n-                }\n-            }\n-            candidate \u003d candidate.getNextSibling();\n-        }\n-\n-        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n+        if (hasDefaultOrExplNonPrivateCtor(classDef)) {\n             final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n             log(ast.getLineNo(), ast.getColumnNo(),\n                 MSG_KEY, name);\n         }\n-\n-\n-\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n        if (isPrivateOrFinalOrAbstract(ast)) {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n            || classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        if (hasDefaultOrExplNonPrivateCtor(classDef)) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                MSG_KEY, name);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "e912c46b5bb5c085323930bd1e500b180c1bea8d",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n     public void visitToken(DetailAST ast)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n-        if ((implementation !\u003d null)\n-            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n+        if (implementation !\u003d null\n+            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n+        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n             log(ast.getLineNo(), ast.getColumnNo(),\n                 MSG_KEY, name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                MSG_KEY, name);\n        }\n\n\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "e912c46b5bb5c085323930bd1e500b180c1bea8d": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, design package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "e912c46b5bb5c085323930bd1e500b180c1bea8d",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n     public void visitToken(DetailAST ast)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if ((implementation !\u003d null)\n             \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n             log(ast.getLineNo(), ast.getColumnNo(),\n-                \"design.forExtension\", name);\n+                MSG_KEY, name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                MSG_KEY, name);\n        }\n\n\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, design, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 347,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // nothing to do for Interfaces\n-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n-        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n+        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n-        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if ((implementation !\u003d null)\n             \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n-        final DetailAST classDef \u003d findContainingClass(aAST);\n+        final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n-            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n-            log(aAST.getLineNo(), aAST.getColumnNo(),\n+            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+            log(ast.getLineNo(), ast.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 347,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // nothing to do for Interfaces\n-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n-        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n+        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n-        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if ((implementation !\u003d null)\n             \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n-        final DetailAST classDef \u003d findContainingClass(aAST);\n+        final DetailAST classDef \u003d findContainingClass(ast);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n-            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n-            log(aAST.getLineNo(), aAST.getColumnNo(),\n+            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n+            log(ast.getLineNo(), ast.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(ast);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d ast.findFirstToken(TokenTypes.IDENT).getText();\n            log(ast.getLineNo(), ast.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 248.16,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if ((implementation !\u003d null)\n             \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(aAST);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n-        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n+        DetailAST candidate \u003d objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n-            candidate \u003d (DetailAST) candidate.getNextSibling();\n+            candidate \u003d candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n-        if (implementation !\u003d null\n-            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n+        if ((implementation !\u003d null)\n+            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(aAST);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n+        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n             || classMods.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if ((implementation !\u003d null)\n            \u0026\u0026 (implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY))\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if ((classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF)\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "0c3c817b224c6fa50db166c0d1edb2b5d3f4162a": {
      "type": "Ybodychange",
      "commitMessage": "fix for 1194470 (DesignForExtension should ignore enums)\n",
      "commitDate": "04/05/05 6:02 AM",
      "commitName": "0c3c817b224c6fa50db166c0d1edb2b5d3f4162a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 115.09,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(aAST);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        if (classMods.branchContains(TokenTypes.FINAL)) {\n+        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n+            || classMods.branchContains(TokenTypes.FINAL))\n+        {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classDef.getType() \u003d\u003d TokenTypes.ENUM_DEF\n            || classMods.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "26/08/04 6:47 AM",
      "commitNameOld": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 32.21,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n-        if (ScopeUtils.inInterfaceBlock(aAST)) {\n+        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         final DetailAST classDef \u003d findContainingClass(aAST);\n         final DetailAST classMods \u003d\n             classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "25/03/04 4:23 AM",
      "commitNameOld": "5e7932be70b20345b77f6fc2adb8423f2d6a091c",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 154.06,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,72 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n-        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if containing class is not visible in API and\n         // cannot be extended by 3rd parties (bug #884035)\n         if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n             return;\n         }\n \n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n-        DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n-        DetailAST classDef \u003d findContainingClass(aAST);\n-        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST classDef \u003d findContainingClass(aAST);\n+        final DetailAST classMods \u003d\n+            classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n-        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n+        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n-                DetailAST ctorMods \u003d\n+                final DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n-            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n+            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        final DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        final DetailAST classDef \u003d findContainingClass(aAST);\n        final DetailAST classMods \u003d\n            classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        final DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                final DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            final String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "4039611539fec37edd9abeb85f68563ec6702cf1": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 884035, DesignForExtension fires for private inner classes\n",
      "commitDate": "23/03/04 2:28 PM",
      "commitName": "4039611539fec37edd9abeb85f68563ec6702cf1",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "17/01/04 4:02 AM",
      "commitNameOld": "2dda964c91b5bc5dc42b78a6d0d74060b7062613",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 66.43,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,72 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n+        // method is ok if containing class is not visible in API and\n+        // cannot be extended by 3rd parties (bug #884035)\n+        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED))\n+        {\n+            return;\n+        }\n+\n         // method is ok if it is implementation can verified to be empty\n         // Note: native methods don\u0027t have impl in java code, so\n         // implementation can be null even if method not abstract\n         DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implementation !\u003d null\n             \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n         {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if containing class is not visible in API and\n        // cannot be extended by 3rd parties (bug #884035)\n        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED))\n        {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "2dda964c91b5bc5dc42b78a6d0d74060b7062613": {
      "type": "Ybodychange",
      "commitMessage": "fixed NPE in DesignForExtension when checking native methods\n",
      "commitDate": "17/01/04 4:02 AM",
      "commitName": "2dda964c91b5bc5dc42b78a6d0d74060b7062613",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,65 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n-        // method is ok if it is empty\n-        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n-        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n+        // method is ok if it is implementation can verified to be empty\n+        // Note: native methods don\u0027t have impl in java code, so\n+        // implementation can be null even if method not abstract\n+        DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        if (implementation !\u003d null\n+            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n+        {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if it is implementation can verified to be empty\n        // Note: native methods don\u0027t have impl in java code, so\n        // implementation can be null even if method not abstract\n        DetailAST implementation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implementation !\u003d null\n            \u0026\u0026 implementation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY)\n        {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Design checks\n",
      "commitDate": "04/06/03 4:52 PM",
      "commitName": "32d19d680144540a83c5dde5588f5a7ac302f8e1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 9:08 AM",
      "commitNameOld": "679f818267161d9501a73ffdcc0d991537233633",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForExtensionCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java"
      }
    },
    "9bb2ad91c98b3d590579f34abff774c4375581fc": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "renamed DesignForInheritanceCheck to DesignForExtensionCheck\n",
      "commitDate": "22/05/03 4:25 PM",
      "commitName": "9bb2ad91c98b3d590579f34abff774c4375581fc",
      "commitAuthor": "Rick Giles",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "renamed DesignForInheritanceCheck to DesignForExtensionCheck\n",
          "commitDate": "22/05/03 4:25 PM",
          "commitName": "9bb2ad91c98b3d590579f34abff774c4375581fc",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "22/05/03 4:48 AM",
          "commitNameOld": "3925906faee1cf9310942708e2946d3e598f5f71",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.48,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if it is empty\n         DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n-                \"design.forInheritance\", name);\n+                \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForExtensionCheck.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForExtensionCheck.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "renamed DesignForInheritanceCheck to DesignForExtensionCheck\n",
          "commitDate": "22/05/03 4:25 PM",
          "commitName": "9bb2ad91c98b3d590579f34abff774c4375581fc",
          "commitAuthor": "Rick Giles",
          "commitDateOld": "22/05/03 4:48 AM",
          "commitNameOld": "3925906faee1cf9310942708e2946d3e598f5f71",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.48,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,61 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL)\n             || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if it is empty\n         DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n-                \"design.forInheritance\", name);\n+                \"design.forExtension\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forExtension\", name);\n        }\n\n\n\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForExtensionCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "d0f2c7d53f76cdee498224fb9ca31477b0534181": {
      "type": "Ybodychange",
      "commitMessage": "don\u0027t flag static methods, bugrport and fix by Christopher Lenz\n",
      "commitDate": "09/04/03 9:37 PM",
      "commitName": "d0f2c7d53f76cdee498224fb9ca31477b0534181",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "30/03/03 5:25 AM",
      "commitNameOld": "b42ddf006f0f45055f3a094e9b8eb25e279082db",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 10.63,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n-            || modifiers.branchContains(TokenTypes.FINAL))\n+            || modifiers.branchContains(TokenTypes.FINAL)\n+            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n         {\n             return;\n         }\n \n         // method is ok if it is empty\n         DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                 \"design.forInheritance\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL)\n            || modifiers.branchContains(TokenTypes.LITERAL_STATIC))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forInheritance\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java",
      "extendedDetails": {}
    },
    "b42ddf006f0f45055f3a094e9b8eb25e279082db": {
      "type": "Ybodychange",
      "commitMessage": "i18n DesignForInheritance\n",
      "commitDate": "30/03/03 5:25 AM",
      "commitName": "b42ddf006f0f45055f3a094e9b8eb25e279082db",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/02/03 11:24 PM",
      "commitNameOld": "632b1cd8cf34ff5b7e7cd0678c8cc717c7c3dac7",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 29.25,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,60 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // nothing to do for Interfaces\n         if (ScopeUtils.inInterfaceBlock(aAST)) {\n             return;\n         }\n \n         // method is ok if it is private or abstract or final\n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n             || modifiers.branchContains(TokenTypes.ABSTRACT)\n             || modifiers.branchContains(TokenTypes.FINAL))\n         {\n             return;\n         }\n \n         // method is ok if it is empty\n         DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n         if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n             return;\n         }\n \n         // check if the containing class can be subclassed\n         DetailAST classDef \u003d findContainingClass(aAST);\n         DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n         if (classMods.branchContains(TokenTypes.FINAL)) {\n             return;\n         }\n \n         // check if subclassing is prevented by having only private ctors\n         DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n \n         boolean hasDefaultConstructor \u003d true;\n         boolean hasExplNonPrivateCtor \u003d false;\n \n         DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n \n         while (candidate !\u003d null) {\n             if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                 hasDefaultConstructor \u003d false;\n \n                 DetailAST ctorMods \u003d\n                     candidate.findFirstToken(TokenTypes.MODIFIERS);\n                 if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                     hasExplNonPrivateCtor \u003d true;\n                     break;\n                 }\n             }\n             candidate \u003d (DetailAST) candidate.getNextSibling();\n         }\n \n         if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n             String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n-            // TODO: i18n\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n-                \"Method \u0027\" + name + \"\u0027 is not designed for inheritance \"\n-                + \"- needs to be abstract, final or empty.\");\n+                \"design.forInheritance\", name);\n         }\n \n \n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"design.forInheritance\", name);\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java",
      "extendedDetails": {}
    },
    "669def894ec6fa19946acd3b586508aed450a4de": {
      "type": "Yintroduced",
      "commitMessage": "finally added all the new checks that I built during feature freeze\nneed to do more tests and write docs\n",
      "commitDate": "17/02/03 9:19 PM",
      "commitName": "669def894ec6fa19946acd3b586508aed450a4de",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,62 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // nothing to do for Interfaces\n+        if (ScopeUtils.inInterfaceBlock(aAST)) {\n+            return;\n+        }\n+\n+        // method is ok if it is private or abstract or final\n+        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n+            || modifiers.branchContains(TokenTypes.ABSTRACT)\n+            || modifiers.branchContains(TokenTypes.FINAL))\n+        {\n+            return;\n+        }\n+\n+        // method is ok if it is empty\n+        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n+        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n+            return;\n+        }\n+\n+        // check if the containing class can be subclassed\n+        DetailAST classDef \u003d findContainingClass(aAST);\n+        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n+        if (classMods.branchContains(TokenTypes.FINAL)) {\n+            return;\n+        }\n+\n+        // check if subclassing is prevented by having only private ctors\n+        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n+\n+        boolean hasDefaultConstructor \u003d true;\n+        boolean hasExplNonPrivateCtor \u003d false;\n+\n+        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n+\n+        while (candidate !\u003d null) {\n+            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n+                hasDefaultConstructor \u003d false;\n+\n+                DetailAST ctorMods \u003d\n+                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n+                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n+                    hasExplNonPrivateCtor \u003d true;\n+                    break;\n+                }\n+            }\n+            candidate \u003d (DetailAST) candidate.getNextSibling();\n+        }\n+\n+        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n+            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n+            // TODO: i18n\n+            log(aAST.getLineNo(), aAST.getColumnNo(),\n+                \"Method \u0027\" + name + \"\u0027 is not designed for inheritance \"\n+                + \"- needs to be abstract, final or empty.\");\n+        }\n+\n+\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // nothing to do for Interfaces\n        if (ScopeUtils.inInterfaceBlock(aAST)) {\n            return;\n        }\n\n        // method is ok if it is private or abstract or final\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)\n            || modifiers.branchContains(TokenTypes.FINAL))\n        {\n            return;\n        }\n\n        // method is ok if it is empty\n        DetailAST implemetation \u003d aAST.findFirstToken(TokenTypes.SLIST);\n        if (implemetation.getFirstChild().getType() \u003d\u003d TokenTypes.RCURLY) {\n            return;\n        }\n\n        // check if the containing class can be subclassed\n        DetailAST classDef \u003d findContainingClass(aAST);\n        DetailAST classMods \u003d classDef.findFirstToken(TokenTypes.MODIFIERS);\n        if (classMods.branchContains(TokenTypes.FINAL)) {\n            return;\n        }\n\n        // check if subclassing is prevented by having only private ctors\n        DetailAST objBlock \u003d classDef.findFirstToken(TokenTypes.OBJBLOCK);\n\n        boolean hasDefaultConstructor \u003d true;\n        boolean hasExplNonPrivateCtor \u003d false;\n\n        DetailAST candidate \u003d (DetailAST) objBlock.getFirstChild();\n\n        while (candidate !\u003d null) {\n            if (candidate.getType() \u003d\u003d TokenTypes.CTOR_DEF) {\n                hasDefaultConstructor \u003d false;\n\n                DetailAST ctorMods \u003d\n                    candidate.findFirstToken(TokenTypes.MODIFIERS);\n                if (!ctorMods.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                    hasExplNonPrivateCtor \u003d true;\n                    break;\n                }\n            }\n            candidate \u003d (DetailAST) candidate.getNextSibling();\n        }\n\n        if (hasDefaultConstructor || hasExplNonPrivateCtor) {\n            String name \u003d aAST.findFirstToken(TokenTypes.IDENT).getText();\n            // TODO: i18n\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                \"Method \u0027\" + name + \"\u0027 is not designed for inheritance \"\n                + \"- needs to be abstract, final or empty.\");\n        }\n\n\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DesignForInheritanceCheck.java"
    }
  }
}