{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WhitespaceAroundCheck.java",
  "functionName": "getDefaultTokens",
  "functionId": "getDefaultTokens",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
  "functionStartLine": 474,
  "functionEndLine": 528,
  "numCommitsSeen": 124,
  "timeTaken": 2038,
  "changeHistory": [
    "88bd2e4055506771ca31567c134d620843b81f33",
    "d4c8bd11ed1f32078a49cd3750fb81df21a17f40",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "ac596b1c3ab07d52cafd96abf471016900861100",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd",
    "d7df762a65d0b123331588b5da385ac00c40b598",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "3a5f587882ed215b863a17c03104c8fff9766b68",
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46",
    "aa1032931c3bcb327e77c5d21f63f48a27e947a5",
    "4cbd709c019cf1b69796858506d673f7b66d37c7",
    "b1cfd257eb46dba42033984145134eae5880f657",
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
    "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1",
    "8313819dcbf3e9cc0700120014c78a99706d88bb",
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d"
  ],
  "changeHistoryShort": {
    "88bd2e4055506771ca31567c134d620843b81f33": "Ybodychange",
    "d4c8bd11ed1f32078a49cd3750fb81df21a17f40": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "ac596b1c3ab07d52cafd96abf471016900861100": "Ybodychange",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": "Ybodychange",
    "d7df762a65d0b123331588b5da385ac00c40b598": "Ybodychange",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "3a5f587882ed215b863a17c03104c8fff9766b68": "Ybodychange",
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46": "Ybodychange",
    "aa1032931c3bcb327e77c5d21f63f48a27e947a5": "Ybodychange",
    "4cbd709c019cf1b69796858506d673f7b66d37c7": "Ybodychange",
    "b1cfd257eb46dba42033984145134eae5880f657": "Ybodychange",
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3": "Ybodychange",
    "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1": "Ybodychange",
    "8313819dcbf3e9cc0700120014c78a99706d88bb": "Ybodychange",
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a": "Ybodychange",
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827": "Ybodychange",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88bd2e4055506771ca31567c134d620843b81f33": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2924: Add support for LAMDA token in WhitespaceAround check\n",
      "commitDate": "27/03/16 12:41 PM",
      "commitName": "88bd2e4055506771ca31567c134d620843b81f33",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 10.25,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n     public int[] getDefaultTokens() {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON,\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.DO_WHILE,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n+            TokenTypes.LAMBDA,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SWITCH,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.LITERAL_ASSERT,\n             TokenTypes.TYPE_EXTENSION_AND,\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens() {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON,\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.DO_WHILE,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAMBDA,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SWITCH,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.TYPE_EXTENSION_AND,\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "d4c8bd11ed1f32078a49cd3750fb81df21a17f40": {
      "type": "Ybodychange",
      "commitMessage": "Enhance WhitespaceAroundCheck\n\nEnhance WhitespaceAroundCheck to check DO_WHILE and LITERAL_SWITCH\ntokens.\n",
      "commitDate": "08/07/14 5:50 PM",
      "commitName": "d4c8bd11ed1f32078a49cd3750fb81df21a17f40",
      "commitAuthor": "Maroontress Fast Software",
      "commitDateOld": "05/07/14 9:30 AM",
      "commitNameOld": "55c2560774f0624afeae9e6c29fd19ae59e8c24b",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON,\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n+            TokenTypes.DO_WHILE,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n+            TokenTypes.LITERAL_SWITCH,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.LITERAL_ASSERT,\n             TokenTypes.TYPE_EXTENSION_AND,\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON,\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.DO_WHILE,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SWITCH,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.TYPE_EXTENSION_AND,\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON,\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.TYPE_EXTENSION_AND,\n        };\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java"
      }
    },
    "ac596b1c3ab07d52cafd96abf471016900861100": {
      "type": "Ybodychange",
      "commitMessage": "Implementation of a check to ensure \"correct\" whitespace around the Generic statements. A long overdue check.\n",
      "commitDate": "15/12/07 7:59 PM",
      "commitName": "ac596b1c3ab07d52cafd96abf471016900861100",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 322.55,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,53 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON,\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.LITERAL_ASSERT,\n-            TokenTypes.GENERIC_START,\n-            TokenTypes.GENERIC_END,\n             TokenTypes.TYPE_EXTENSION_AND,\n-            TokenTypes.WILDCARD_TYPE,\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON,\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.TYPE_EXTENSION_AND,\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": {
      "type": "Ybodychange",
      "commitMessage": "Changes for grammer to keep as much text in AST tree as we can.\nFor now I do nothing with this/super in (SUPER_)CTOR_CALL.\nShould think more about this.\n\nAlso I\u0027ve changed grammer to not generate extends/implement cleases\nif there is no such in the code.\n\nMade some refactoring for build.xml to make possible to redirect build\noutput to custom directory (and we used too much hardcoded paths there\n:)\n\nIt looks like this is my last commit before vacation, so I hope\nI will break nothing :)\n",
      "commitDate": "16/08/05 11:55 PM",
      "commitName": "865ba5284aace7651f93dc81b0c196d1316a9fdd",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "12/04/05 5:58 PM",
      "commitNameOld": "d7df762a65d0b123331588b5da385ac00c40b598",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 126.25,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n-            TokenTypes.COLON, // TODO: dont flag after \"case\"\n+            TokenTypes.COLON,\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.LITERAL_ASSERT,\n             TokenTypes.GENERIC_START,\n             TokenTypes.GENERIC_END,\n             TokenTypes.TYPE_EXTENSION_AND,\n             TokenTypes.WILDCARD_TYPE,\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON,\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.GENERIC_START,\n            TokenTypes.GENERIC_END,\n            TokenTypes.TYPE_EXTENSION_AND,\n            TokenTypes.WILDCARD_TYPE,\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "d7df762a65d0b123331588b5da385ac00c40b598": {
      "type": "Ybodychange",
      "commitMessage": "no message\n",
      "commitDate": "12/04/05 5:58 PM",
      "commitName": "d7df762a65d0b123331588b5da385ac00c40b598",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 93.59,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,56 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON, // TODO: dont flag after \"case\"\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.LITERAL_ASSERT,\n+            TokenTypes.GENERIC_START,\n+            TokenTypes.GENERIC_END,\n+            TokenTypes.TYPE_EXTENSION_AND,\n+            TokenTypes.WILDCARD_TYPE,\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON, // TODO: dont flag after \"case\"\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n            TokenTypes.GENERIC_START,\n            TokenTypes.GENERIC_END,\n            TokenTypes.TYPE_EXTENSION_AND,\n            TokenTypes.WILDCARD_TYPE,\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": "04/06/03 4:55 AM",
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 3:42 AM",
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON, // TODO: dont flag after \"case\"\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT,\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java"
      }
    },
    "3a5f587882ed215b863a17c03104c8fff9766b68": {
      "type": "Ybodychange",
      "commitMessage": "renamed ASSERT to LITERAL_ASSERT for consistency with other literal tokens\n",
      "commitDate": "15/12/02 1:02 AM",
      "commitName": "3a5f587882ed215b863a17c03104c8fff9766b68",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "12/12/02 3:39 AM",
      "commitNameOld": "b25fe8281bd36c2aed22b0948141faa505e5f350",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.89,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON, // TODO: dont flag after \"case\"\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n             TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n-            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n-                                  // maybe it\u0027s a bug in the grammar?\n+            TokenTypes.LITERAL_ASSERT\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON, // TODO: dont flag after \"case\"\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.LITERAL_ASSERT\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug in handling \u0027{\u0027 for whitespace checking.\n",
      "commitDate": "23/11/02 12:08 AM",
      "commitName": "6a5a68f6d8768a7dcec7c1a4b6e1cd478cd02c46",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "22/11/02 11:54 PM",
      "commitNameOld": "aa1032931c3bcb327e77c5d21f63f48a27e947a5",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             TokenTypes.ASSIGN,\n             TokenTypes.BAND,\n             TokenTypes.BAND_ASSIGN,\n             TokenTypes.BOR,\n             TokenTypes.BOR_ASSIGN,\n             TokenTypes.BSR,\n             TokenTypes.BSR_ASSIGN,\n             TokenTypes.BXOR,\n             TokenTypes.BXOR_ASSIGN,\n             TokenTypes.COLON, // TODO: dont flag after \"case\"\n             TokenTypes.DIV,\n             TokenTypes.DIV_ASSIGN,\n             TokenTypes.EQUAL,\n             TokenTypes.GE,\n             TokenTypes.GT,\n             TokenTypes.LAND,\n             TokenTypes.LCURLY,\n             TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n             TokenTypes.LOR,\n             TokenTypes.LT,\n             TokenTypes.MINUS,\n             TokenTypes.MINUS_ASSIGN,\n             TokenTypes.MOD,\n             TokenTypes.MOD_ASSIGN,\n             TokenTypes.NOT_EQUAL,\n             TokenTypes.PLUS,\n             TokenTypes.PLUS_ASSIGN,\n             TokenTypes.QUESTION,\n             TokenTypes.RCURLY,\n             TokenTypes.SL,\n+            TokenTypes.SLIST,\n             TokenTypes.SL_ASSIGN,\n             TokenTypes.SR,\n             TokenTypes.SR_ASSIGN,\n             TokenTypes.STAR,\n             TokenTypes.STAR_ASSIGN,\n             TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON, // TODO: dont flag after \"case\"\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SLIST,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "aa1032931c3bcb327e77c5d21f63f48a27e947a5": {
      "type": "Ybodychange",
      "commitMessage": "Tighten the checks.\n",
      "commitDate": "22/11/02 11:54 PM",
      "commitName": "aa1032931c3bcb327e77c5d21f63f48a27e947a5",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "22/11/02 6:51 PM",
      "commitNameOld": "e4a4b6dc01240034cacf0886862805e3dcc58a93",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n-            TokenTypes.RCURLY,            // \u0027}\u0027\n-            TokenTypes.QUESTION,          // \u0027?\u0027\n-            TokenTypes.COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n-            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n-            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n-            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n-            TokenTypes.DIV,               // \u0027/\u0027\n-            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n-            TokenTypes.PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n-            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n-            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n-            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n-            TokenTypes.STAR,              // \u0027*\u0027\n-            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n-            TokenTypes.MOD,               // \u0027%\u0027\n-            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n-            TokenTypes.SR,                // \"\u003e\u003e\"\n-            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n-            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n-            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n-            TokenTypes.GE,                // \"\u003e\u003d\"\n-            TokenTypes.GT,                // \"\u003e\"\n-            TokenTypes.SL,                // \"\u003c\u003c\"\n-            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n-            TokenTypes.LE,                // \"\u003c\u003d\"\n-            TokenTypes.LT,                // \u0027\u003c\u0027\n-            TokenTypes.BXOR,              // \u0027^\u0027\n-            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n-            TokenTypes.BOR,               // \u0027|\u0027\n-            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n-            TokenTypes.LOR,               // \"||\"\n-            TokenTypes.BAND,              // \u0027\u0026\u0027\n-            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n-            TokenTypes.LAND,              // \"\u0026\u0026\"\n+            TokenTypes.ASSIGN,\n+            TokenTypes.BAND,\n+            TokenTypes.BAND_ASSIGN,\n+            TokenTypes.BOR,\n+            TokenTypes.BOR_ASSIGN,\n+            TokenTypes.BSR,\n+            TokenTypes.BSR_ASSIGN,\n+            TokenTypes.BXOR,\n+            TokenTypes.BXOR_ASSIGN,\n+            TokenTypes.COLON, // TODO: dont flag after \"case\"\n+            TokenTypes.DIV,\n+            TokenTypes.DIV_ASSIGN,\n+            TokenTypes.EQUAL,\n+            TokenTypes.GE,\n+            TokenTypes.GT,\n+            TokenTypes.LAND,\n+            TokenTypes.LCURLY,\n+            TokenTypes.LE,\n             TokenTypes.LITERAL_CATCH,\n             TokenTypes.LITERAL_DO,\n             TokenTypes.LITERAL_ELSE,\n             TokenTypes.LITERAL_FINALLY,\n             TokenTypes.LITERAL_FOR,\n             TokenTypes.LITERAL_IF,\n             TokenTypes.LITERAL_RETURN,\n             TokenTypes.LITERAL_SYNCHRONIZED,\n             TokenTypes.LITERAL_TRY,\n             TokenTypes.LITERAL_WHILE,\n+            TokenTypes.LOR,\n+            TokenTypes.LT,\n+            TokenTypes.MINUS,\n+            TokenTypes.MINUS_ASSIGN,\n+            TokenTypes.MOD,\n+            TokenTypes.MOD_ASSIGN,\n+            TokenTypes.NOT_EQUAL,\n+            TokenTypes.PLUS,\n+            TokenTypes.PLUS_ASSIGN,\n+            TokenTypes.QUESTION,\n+            TokenTypes.RCURLY,\n+            TokenTypes.SL,\n+            TokenTypes.SL_ASSIGN,\n+            TokenTypes.SR,\n+            TokenTypes.SR_ASSIGN,\n+            TokenTypes.STAR,\n+            TokenTypes.STAR_ASSIGN,\n             TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.ASSIGN,\n            TokenTypes.BAND,\n            TokenTypes.BAND_ASSIGN,\n            TokenTypes.BOR,\n            TokenTypes.BOR_ASSIGN,\n            TokenTypes.BSR,\n            TokenTypes.BSR_ASSIGN,\n            TokenTypes.BXOR,\n            TokenTypes.BXOR_ASSIGN,\n            TokenTypes.COLON, // TODO: dont flag after \"case\"\n            TokenTypes.DIV,\n            TokenTypes.DIV_ASSIGN,\n            TokenTypes.EQUAL,\n            TokenTypes.GE,\n            TokenTypes.GT,\n            TokenTypes.LAND,\n            TokenTypes.LCURLY,\n            TokenTypes.LE,\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.LOR,\n            TokenTypes.LT,\n            TokenTypes.MINUS,\n            TokenTypes.MINUS_ASSIGN,\n            TokenTypes.MOD,\n            TokenTypes.MOD_ASSIGN,\n            TokenTypes.NOT_EQUAL,\n            TokenTypes.PLUS,\n            TokenTypes.PLUS_ASSIGN,\n            TokenTypes.QUESTION,\n            TokenTypes.RCURLY,\n            TokenTypes.SL,\n            TokenTypes.SL_ASSIGN,\n            TokenTypes.SR,\n            TokenTypes.SR_ASSIGN,\n            TokenTypes.STAR,\n            TokenTypes.STAR_ASSIGN,\n            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "4cbd709c019cf1b69796858506d673f7b66d37c7": {
      "type": "Ybodychange",
      "commitMessage": "This is a really enjoyable commit to make. I have finally got to remove the\nugly Verifier class. The only remaining check are based on the new fileset\ncheck that Lars putting together. Magic. :-)\n",
      "commitDate": "12/11/02 8:21 PM",
      "commitName": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "11/11/02 4:01 PM",
      "commitNameOld": "a298a50d48358e58be31eaea6b9f0e263f5f046e",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n-            RCURLY,            // \u0027}\u0027\n-            QUESTION,          // \u0027?\u0027\n-            COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n-            ASSIGN,            // \u0027\u003d\u0027\n-            EQUAL,             // \"\u003d\u003d\"\n-            NOT_EQUAL,         // \"!\u003d\"\n-            DIV,               // \u0027/\u0027\n-            DIV_ASSIGN,        // \"/\u003d\"\n-            PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n-            PLUS_ASSIGN,       // \"+\u003d\"\n-            MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n-            MINUS_ASSIGN,      //\"-\u003d\"\n-            STAR,              // \u0027*\u0027\n-            STAR_ASSIGN,       // \"*\u003d\"\n-            MOD,               // \u0027%\u0027\n-            MOD_ASSIGN,        // \"%\u003d\"\n-            SR,                // \"\u003e\u003e\"\n-            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n-            BSR,               // \"\u003e\u003e\u003e\"\n-            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n-            GE,                // \"\u003e\u003d\"\n-            GT,                // \"\u003e\"\n-            SL,                // \"\u003c\u003c\"\n-            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n-            LE,                // \"\u003c\u003d\"\n-            LT,                // \u0027\u003c\u0027\n-            BXOR,              // \u0027^\u0027\n-            BXOR_ASSIGN,       // \"^\u003d\"\n-            BOR,               // \u0027|\u0027\n-            BOR_ASSIGN,        // \"|\u003d\"\n-            LOR,               // \"||\"\n-            BAND,              // \u0027\u0026\u0027\n-            BAND_ASSIGN,       // \"\u0026\u003d\"\n-            LAND,              // \"\u0026\u0026\"\n-            LITERAL_catch,\n-            LITERAL_do,\n-            LITERAL_else,\n-            LITERAL_finally,\n-            LITERAL_for,\n-            LITERAL_if,\n-            LITERAL_return,\n-            LITERAL_synchronized,\n-            LITERAL_try,\n-            LITERAL_while,\n-            ASSERT                // TODO: why is it not LITERAL_assert?\n+            TokenTypes.RCURLY,            // \u0027}\u0027\n+            TokenTypes.QUESTION,          // \u0027?\u0027\n+            TokenTypes.COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n+            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n+            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n+            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n+            TokenTypes.DIV,               // \u0027/\u0027\n+            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n+            TokenTypes.PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n+            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n+            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n+            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n+            TokenTypes.STAR,              // \u0027*\u0027\n+            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n+            TokenTypes.MOD,               // \u0027%\u0027\n+            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n+            TokenTypes.SR,                // \"\u003e\u003e\"\n+            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n+            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n+            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n+            TokenTypes.GE,                // \"\u003e\u003d\"\n+            TokenTypes.GT,                // \"\u003e\"\n+            TokenTypes.SL,                // \"\u003c\u003c\"\n+            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n+            TokenTypes.LE,                // \"\u003c\u003d\"\n+            TokenTypes.LT,                // \u0027\u003c\u0027\n+            TokenTypes.BXOR,              // \u0027^\u0027\n+            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n+            TokenTypes.BOR,               // \u0027|\u0027\n+            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n+            TokenTypes.LOR,               // \"||\"\n+            TokenTypes.BAND,              // \u0027\u0026\u0027\n+            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n+            TokenTypes.LAND,              // \"\u0026\u0026\"\n+            TokenTypes.LITERAL_CATCH,\n+            TokenTypes.LITERAL_DO,\n+            TokenTypes.LITERAL_ELSE,\n+            TokenTypes.LITERAL_FINALLY,\n+            TokenTypes.LITERAL_FOR,\n+            TokenTypes.LITERAL_IF,\n+            TokenTypes.LITERAL_RETURN,\n+            TokenTypes.LITERAL_SYNCHRONIZED,\n+            TokenTypes.LITERAL_TRY,\n+            TokenTypes.LITERAL_WHILE,\n+            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            TokenTypes.RCURLY,            // \u0027}\u0027\n            TokenTypes.QUESTION,          // \u0027?\u0027\n            TokenTypes.COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            TokenTypes.ASSIGN,            // \u0027\u003d\u0027\n            TokenTypes.EQUAL,             // \"\u003d\u003d\"\n            TokenTypes.NOT_EQUAL,         // \"!\u003d\"\n            TokenTypes.DIV,               // \u0027/\u0027\n            TokenTypes.DIV_ASSIGN,        // \"/\u003d\"\n            TokenTypes.PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n            TokenTypes.PLUS_ASSIGN,       // \"+\u003d\"\n            TokenTypes.MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            TokenTypes.MINUS_ASSIGN,      //\"-\u003d\"\n            TokenTypes.STAR,              // \u0027*\u0027\n            TokenTypes.STAR_ASSIGN,       // \"*\u003d\"\n            TokenTypes.MOD,               // \u0027%\u0027\n            TokenTypes.MOD_ASSIGN,        // \"%\u003d\"\n            TokenTypes.SR,                // \"\u003e\u003e\"\n            TokenTypes.SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            TokenTypes.BSR,               // \"\u003e\u003e\u003e\"\n            TokenTypes.BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            TokenTypes.GE,                // \"\u003e\u003d\"\n            TokenTypes.GT,                // \"\u003e\"\n            TokenTypes.SL,                // \"\u003c\u003c\"\n            TokenTypes.SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            TokenTypes.LE,                // \"\u003c\u003d\"\n            TokenTypes.LT,                // \u0027\u003c\u0027\n            TokenTypes.BXOR,              // \u0027^\u0027\n            TokenTypes.BXOR_ASSIGN,       // \"^\u003d\"\n            TokenTypes.BOR,               // \u0027|\u0027\n            TokenTypes.BOR_ASSIGN,        // \"|\u003d\"\n            TokenTypes.LOR,               // \"||\"\n            TokenTypes.BAND,              // \u0027\u0026\u0027\n            TokenTypes.BAND_ASSIGN,       // \"\u0026\u003d\"\n            TokenTypes.LAND,              // \"\u0026\u0026\"\n            TokenTypes.LITERAL_CATCH,\n            TokenTypes.LITERAL_DO,\n            TokenTypes.LITERAL_ELSE,\n            TokenTypes.LITERAL_FINALLY,\n            TokenTypes.LITERAL_FOR,\n            TokenTypes.LITERAL_IF,\n            TokenTypes.LITERAL_RETURN,\n            TokenTypes.LITERAL_SYNCHRONIZED,\n            TokenTypes.LITERAL_TRY,\n            TokenTypes.LITERAL_WHILE,\n            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "b1cfd257eb46dba42033984145134eae5880f657": {
      "type": "Ybodychange",
      "commitMessage": "Major refactor to implement the RightCurly check. Required the ANTLR grammar\nto be worked to:\n\n- Not silently eat tokens (more to be done)\n\n- Not get the token tree out of order for try/finally\n",
      "commitDate": "07/10/02 2:17 AM",
      "commitName": "b1cfd257eb46dba42033984145134eae5880f657",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "01/10/02 1:47 AM",
      "commitNameOld": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n+            RCURLY,            // \u0027}\u0027\n             QUESTION,          // \u0027?\u0027\n             COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n             ASSIGN,            // \u0027\u003d\u0027\n             EQUAL,             // \"\u003d\u003d\"\n             NOT_EQUAL,         // \"!\u003d\"\n             DIV,               // \u0027/\u0027\n             DIV_ASSIGN,        // \"/\u003d\"\n             PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n             PLUS_ASSIGN,       // \"+\u003d\"\n             MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             MINUS_ASSIGN,      //\"-\u003d\"\n             STAR,              // \u0027*\u0027\n             STAR_ASSIGN,       // \"*\u003d\"\n             MOD,               // \u0027%\u0027\n             MOD_ASSIGN,        // \"%\u003d\"\n             SR,                // \"\u003e\u003e\"\n             SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             BSR,               // \"\u003e\u003e\u003e\"\n             BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             GE,                // \"\u003e\u003d\"\n             GT,                // \"\u003e\"\n             SL,                // \"\u003c\u003c\"\n             SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             LE,                // \"\u003c\u003d\"\n             LT,                // \u0027\u003c\u0027\n             BXOR,              // \u0027^\u0027\n             BXOR_ASSIGN,       // \"^\u003d\"\n             BOR,               // \u0027|\u0027\n             BOR_ASSIGN,        // \"|\u003d\"\n             LOR,               // \"||\"\n             BAND,              // \u0027\u0026\u0027\n             BAND_ASSIGN,       // \"\u0026\u003d\"\n             LAND,              // \"\u0026\u0026\"\n             LITERAL_catch,\n             LITERAL_do,\n             LITERAL_else,\n             LITERAL_finally,\n             LITERAL_for,\n             LITERAL_if,\n             LITERAL_return,\n             LITERAL_synchronized,\n             LITERAL_try,\n             LITERAL_while,\n             ASSERT                // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            RCURLY,            // \u0027}\u0027\n            QUESTION,          // \u0027?\u0027\n            COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            ASSIGN,            // \u0027\u003d\u0027\n            EQUAL,             // \"\u003d\u003d\"\n            NOT_EQUAL,         // \"!\u003d\"\n            DIV,               // \u0027/\u0027\n            DIV_ASSIGN,        // \"/\u003d\"\n            PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n            PLUS_ASSIGN,       // \"+\u003d\"\n            MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            MINUS_ASSIGN,      //\"-\u003d\"\n            STAR,              // \u0027*\u0027\n            STAR_ASSIGN,       // \"*\u003d\"\n            MOD,               // \u0027%\u0027\n            MOD_ASSIGN,        // \"%\u003d\"\n            SR,                // \"\u003e\u003e\"\n            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            BSR,               // \"\u003e\u003e\u003e\"\n            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            GE,                // \"\u003e\u003d\"\n            GT,                // \"\u003e\"\n            SL,                // \"\u003c\u003c\"\n            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            LE,                // \"\u003c\u003d\"\n            LT,                // \u0027\u003c\u0027\n            BXOR,              // \u0027^\u0027\n            BXOR_ASSIGN,       // \"^\u003d\"\n            BOR,               // \u0027|\u0027\n            BOR_ASSIGN,        // \"|\u003d\"\n            LOR,               // \"||\"\n            BAND,              // \u0027\u0026\u0027\n            BAND_ASSIGN,       // \"\u0026\u003d\"\n            LAND,              // \"\u0026\u0026\"\n            LITERAL_catch,\n            LITERAL_do,\n            LITERAL_else,\n            LITERAL_finally,\n            LITERAL_for,\n            LITERAL_if,\n            LITERAL_return,\n            LITERAL_synchronized,\n            LITERAL_try,\n            LITERAL_while,\n            ASSERT                // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring to support correct column numbers. Also removed all the old\ncode for whitespace checking around things. This required fixing the grammar\nto not consume COLON tokens. Looks like you are onto something Lars with your\nprevious email (made it easy to find the bug).\n",
      "commitDate": "01/10/02 1:47 AM",
      "commitName": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "26/09/02 11:41 PM",
      "commitNameOld": "d077a402da51bb238a7da99d5e2542437b145192",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             QUESTION,          // \u0027?\u0027\n-            // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n+            COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n             ASSIGN,            // \u0027\u003d\u0027\n             EQUAL,             // \"\u003d\u003d\"\n             NOT_EQUAL,         // \"!\u003d\"\n             DIV,               // \u0027/\u0027\n             DIV_ASSIGN,        // \"/\u003d\"\n             PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n             PLUS_ASSIGN,       // \"+\u003d\"\n             MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             MINUS_ASSIGN,      //\"-\u003d\"\n             STAR,              // \u0027*\u0027\n             STAR_ASSIGN,       // \"*\u003d\"\n             MOD,               // \u0027%\u0027\n             MOD_ASSIGN,        // \"%\u003d\"\n             SR,                // \"\u003e\u003e\"\n             SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             BSR,               // \"\u003e\u003e\u003e\"\n             BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             GE,                // \"\u003e\u003d\"\n             GT,                // \"\u003e\"\n             SL,                // \"\u003c\u003c\"\n             SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             LE,                // \"\u003c\u003d\"\n             LT,                // \u0027\u003c\u0027\n             BXOR,              // \u0027^\u0027\n             BXOR_ASSIGN,       // \"^\u003d\"\n             BOR,               // \u0027|\u0027\n             BOR_ASSIGN,        // \"|\u003d\"\n             LOR,               // \"||\"\n             BAND,              // \u0027\u0026\u0027\n             BAND_ASSIGN,       // \"\u0026\u003d\"\n             LAND,              // \"\u0026\u0026\"\n-            LITERAL_if,\n-            LITERAL_else,\n-            LITERAL_for,\n-            LITERAL_do,\n-            LITERAL_return,\n-            LITERAL_try,\n             LITERAL_catch,\n+            LITERAL_do,\n+            LITERAL_else,\n             LITERAL_finally,\n+            LITERAL_for,\n+            LITERAL_if,\n+            LITERAL_return,\n             LITERAL_synchronized,\n+            LITERAL_try,\n+            LITERAL_while,\n             ASSERT                // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            QUESTION,          // \u0027?\u0027\n            COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            ASSIGN,            // \u0027\u003d\u0027\n            EQUAL,             // \"\u003d\u003d\"\n            NOT_EQUAL,         // \"!\u003d\"\n            DIV,               // \u0027/\u0027\n            DIV_ASSIGN,        // \"/\u003d\"\n            PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n            PLUS_ASSIGN,       // \"+\u003d\"\n            MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            MINUS_ASSIGN,      //\"-\u003d\"\n            STAR,              // \u0027*\u0027\n            STAR_ASSIGN,       // \"*\u003d\"\n            MOD,               // \u0027%\u0027\n            MOD_ASSIGN,        // \"%\u003d\"\n            SR,                // \"\u003e\u003e\"\n            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            BSR,               // \"\u003e\u003e\u003e\"\n            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            GE,                // \"\u003e\u003d\"\n            GT,                // \"\u003e\"\n            SL,                // \"\u003c\u003c\"\n            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            LE,                // \"\u003c\u003d\"\n            LT,                // \u0027\u003c\u0027\n            BXOR,              // \u0027^\u0027\n            BXOR_ASSIGN,       // \"^\u003d\"\n            BOR,               // \u0027|\u0027\n            BOR_ASSIGN,        // \"|\u003d\"\n            LOR,               // \"||\"\n            BAND,              // \u0027\u0026\u0027\n            BAND_ASSIGN,       // \"\u0026\u003d\"\n            LAND,              // \"\u0026\u0026\"\n            LITERAL_catch,\n            LITERAL_do,\n            LITERAL_else,\n            LITERAL_finally,\n            LITERAL_for,\n            LITERAL_if,\n            LITERAL_return,\n            LITERAL_synchronized,\n            LITERAL_try,\n            LITERAL_while,\n            ASSERT                // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1": {
      "type": "Ybodychange",
      "commitMessage": "WhitespaceAround PLUS and MINUS\n",
      "commitDate": "22/09/02 7:00 AM",
      "commitName": "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "22/09/02 6:29 AM",
      "commitNameOld": "8313819dcbf3e9cc0700120014c78a99706d88bb",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             QUESTION,          // \u0027?\u0027\n             // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n             ASSIGN,            // \u0027\u003d\u0027\n             EQUAL,             // \"\u003d\u003d\"\n             NOT_EQUAL,         // \"!\u003d\"\n             DIV,               // \u0027/\u0027\n             DIV_ASSIGN,        // \"/\u003d\"\n-            // PLUS,              //\u0027 +\u0027 TODO: unaray plus\n+            PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n             PLUS_ASSIGN,       // \"+\u003d\"\n-            // MINUS,             // \u0027-\u0027 TODO: unary minus\n+            MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n             MINUS_ASSIGN,      //\"-\u003d\"\n             STAR,              // \u0027*\u0027\n             STAR_ASSIGN,       // \"*\u003d\"\n             MOD,               // \u0027%\u0027\n             MOD_ASSIGN,        // \"%\u003d\"\n             SR,                // \"\u003e\u003e\"\n             SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             BSR,               // \"\u003e\u003e\u003e\"\n             BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             GE,                // \"\u003e\u003d\"\n             GT,                // \"\u003e\"\n             SL,                // \"\u003c\u003c\"\n             SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             LE,                // \"\u003c\u003d\"\n             LT,                // \u0027\u003c\u0027\n             BXOR,              // \u0027^\u0027\n             BXOR_ASSIGN,       // \"^\u003d\"\n             BOR,               // \u0027|\u0027\n             BOR_ASSIGN,        // \"|\u003d\"\n             LOR,               // \"||\"\n             BAND,              // \u0027\u0026\u0027\n             BAND_ASSIGN,       // \"\u0026\u003d\"\n             LAND,              // \"\u0026\u0026\"\n             LITERAL_if,\n             LITERAL_else,\n             LITERAL_for,\n             LITERAL_do,\n             LITERAL_return,\n             LITERAL_try,\n             LITERAL_catch,\n             LITERAL_finally,\n             LITERAL_synchronized,\n             ASSERT                // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            QUESTION,          // \u0027?\u0027\n            // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            ASSIGN,            // \u0027\u003d\u0027\n            EQUAL,             // \"\u003d\u003d\"\n            NOT_EQUAL,         // \"!\u003d\"\n            DIV,               // \u0027/\u0027\n            DIV_ASSIGN,        // \"/\u003d\"\n            PLUS,              //\u0027 +\u0027 (unaray plus is UNARY_PLUS)\n            PLUS_ASSIGN,       // \"+\u003d\"\n            MINUS,             // \u0027-\u0027 (unary minus is UNARY_MINUS)\n            MINUS_ASSIGN,      //\"-\u003d\"\n            STAR,              // \u0027*\u0027\n            STAR_ASSIGN,       // \"*\u003d\"\n            MOD,               // \u0027%\u0027\n            MOD_ASSIGN,        // \"%\u003d\"\n            SR,                // \"\u003e\u003e\"\n            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            BSR,               // \"\u003e\u003e\u003e\"\n            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            GE,                // \"\u003e\u003d\"\n            GT,                // \"\u003e\"\n            SL,                // \"\u003c\u003c\"\n            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            LE,                // \"\u003c\u003d\"\n            LT,                // \u0027\u003c\u0027\n            BXOR,              // \u0027^\u0027\n            BXOR_ASSIGN,       // \"^\u003d\"\n            BOR,               // \u0027|\u0027\n            BOR_ASSIGN,        // \"|\u003d\"\n            LOR,               // \"||\"\n            BAND,              // \u0027\u0026\u0027\n            BAND_ASSIGN,       // \"\u0026\u003d\"\n            LAND,              // \"\u0026\u0026\"\n            LITERAL_if,\n            LITERAL_else,\n            LITERAL_for,\n            LITERAL_do,\n            LITERAL_return,\n            LITERAL_try,\n            LITERAL_catch,\n            LITERAL_finally,\n            LITERAL_synchronized,\n            ASSERT                // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "8313819dcbf3e9cc0700120014c78a99706d88bb": {
      "type": "Ybodychange",
      "commitMessage": "WhitespaceAround deals with \u0027return;\u0027\n",
      "commitDate": "22/09/02 6:29 AM",
      "commitName": "8313819dcbf3e9cc0700120014c78a99706d88bb",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "22/09/02 5:27 AM",
      "commitNameOld": "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     public int[] getDefaultTokens()\n     {\n         return new int[] {\n             QUESTION,          // \u0027?\u0027\n             // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n             ASSIGN,            // \u0027\u003d\u0027\n             EQUAL,             // \"\u003d\u003d\"\n             NOT_EQUAL,         // \"!\u003d\"\n             DIV,               // \u0027/\u0027\n             DIV_ASSIGN,        // \"/\u003d\"\n             // PLUS,              //\u0027 +\u0027 TODO: unaray plus\n             PLUS_ASSIGN,       // \"+\u003d\"\n             // MINUS,             // \u0027-\u0027 TODO: unary minus\n             MINUS_ASSIGN,      //\"-\u003d\"\n             STAR,              // \u0027*\u0027\n             STAR_ASSIGN,       // \"*\u003d\"\n             MOD,               // \u0027%\u0027\n             MOD_ASSIGN,        // \"%\u003d\"\n             SR,                // \"\u003e\u003e\"\n             SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n             BSR,               // \"\u003e\u003e\u003e\"\n             BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n             GE,                // \"\u003e\u003d\"\n             GT,                // \"\u003e\"\n             SL,                // \"\u003c\u003c\"\n             SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n             LE,                // \"\u003c\u003d\"\n             LT,                // \u0027\u003c\u0027\n             BXOR,              // \u0027^\u0027\n             BXOR_ASSIGN,       // \"^\u003d\"\n             BOR,               // \u0027|\u0027\n             BOR_ASSIGN,        // \"|\u003d\"\n             LOR,               // \"||\"\n             BAND,              // \u0027\u0026\u0027\n             BAND_ASSIGN,       // \"\u0026\u003d\"\n             LAND,              // \"\u0026\u0026\"\n             LITERAL_if,\n             LITERAL_else,\n             LITERAL_for,\n             LITERAL_do,\n-            // LITERAL_return,    // TODO: \"return;\" is OK, return(2) is not\n+            LITERAL_return,\n             LITERAL_try,\n             LITERAL_catch,\n             LITERAL_finally,\n             LITERAL_synchronized,\n             ASSERT                // TODO: why is it not LITERAL_assert?\n                                   // maybe it\u0027s a bug in the grammar?\n         };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            QUESTION,          // \u0027?\u0027\n            // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            ASSIGN,            // \u0027\u003d\u0027\n            EQUAL,             // \"\u003d\u003d\"\n            NOT_EQUAL,         // \"!\u003d\"\n            DIV,               // \u0027/\u0027\n            DIV_ASSIGN,        // \"/\u003d\"\n            // PLUS,              //\u0027 +\u0027 TODO: unaray plus\n            PLUS_ASSIGN,       // \"+\u003d\"\n            // MINUS,             // \u0027-\u0027 TODO: unary minus\n            MINUS_ASSIGN,      //\"-\u003d\"\n            STAR,              // \u0027*\u0027\n            STAR_ASSIGN,       // \"*\u003d\"\n            MOD,               // \u0027%\u0027\n            MOD_ASSIGN,        // \"%\u003d\"\n            SR,                // \"\u003e\u003e\"\n            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            BSR,               // \"\u003e\u003e\u003e\"\n            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            GE,                // \"\u003e\u003d\"\n            GT,                // \"\u003e\"\n            SL,                // \"\u003c\u003c\"\n            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            LE,                // \"\u003c\u003d\"\n            LT,                // \u0027\u003c\u0027\n            BXOR,              // \u0027^\u0027\n            BXOR_ASSIGN,       // \"^\u003d\"\n            BOR,               // \u0027|\u0027\n            BOR_ASSIGN,        // \"|\u003d\"\n            LOR,               // \"||\"\n            BAND,              // \u0027\u0026\u0027\n            BAND_ASSIGN,       // \"\u0026\u003d\"\n            LAND,              // \"\u0026\u0026\"\n            LITERAL_if,\n            LITERAL_else,\n            LITERAL_for,\n            LITERAL_do,\n            LITERAL_return,\n            LITERAL_try,\n            LITERAL_catch,\n            LITERAL_finally,\n            LITERAL_synchronized,\n            ASSERT                // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "0fdfc2f36086a108407fc7d51edc5b8c934b658a": {
      "type": "Ybodychange",
      "commitMessage": "intruduced AbstractCheckTestCase to provide common functionality for\nall tests for Checks\n\nuse Java14 grammar in TreeWalker to be able to parse InputWhitespace.java\n\nimproved WhitespaceAroundCheck and added test\n",
      "commitDate": "22/09/02 5:27 AM",
      "commitName": "0fdfc2f36086a108407fc7d51edc5b8c934b658a",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "15/09/02 10:08 PM",
      "commitNameOld": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,49 @@\n     public int[] getDefaultTokens()\n     {\n-        // TODO: add all operators\n-        return new int[] {JavaTokenTypes.ASSIGN};\n+        return new int[] {\n+            QUESTION,          // \u0027?\u0027\n+            // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n+            ASSIGN,            // \u0027\u003d\u0027\n+            EQUAL,             // \"\u003d\u003d\"\n+            NOT_EQUAL,         // \"!\u003d\"\n+            DIV,               // \u0027/\u0027\n+            DIV_ASSIGN,        // \"/\u003d\"\n+            // PLUS,              //\u0027 +\u0027 TODO: unaray plus\n+            PLUS_ASSIGN,       // \"+\u003d\"\n+            // MINUS,             // \u0027-\u0027 TODO: unary minus\n+            MINUS_ASSIGN,      //\"-\u003d\"\n+            STAR,              // \u0027*\u0027\n+            STAR_ASSIGN,       // \"*\u003d\"\n+            MOD,               // \u0027%\u0027\n+            MOD_ASSIGN,        // \"%\u003d\"\n+            SR,                // \"\u003e\u003e\"\n+            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n+            BSR,               // \"\u003e\u003e\u003e\"\n+            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n+            GE,                // \"\u003e\u003d\"\n+            GT,                // \"\u003e\"\n+            SL,                // \"\u003c\u003c\"\n+            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n+            LE,                // \"\u003c\u003d\"\n+            LT,                // \u0027\u003c\u0027\n+            BXOR,              // \u0027^\u0027\n+            BXOR_ASSIGN,       // \"^\u003d\"\n+            BOR,               // \u0027|\u0027\n+            BOR_ASSIGN,        // \"|\u003d\"\n+            LOR,               // \"||\"\n+            BAND,              // \u0027\u0026\u0027\n+            BAND_ASSIGN,       // \"\u0026\u003d\"\n+            LAND,              // \"\u0026\u0026\"\n+            LITERAL_if,\n+            LITERAL_else,\n+            LITERAL_for,\n+            LITERAL_do,\n+            // LITERAL_return,    // TODO: \"return;\" is OK, return(2) is not\n+            LITERAL_try,\n+            LITERAL_catch,\n+            LITERAL_finally,\n+            LITERAL_synchronized,\n+            ASSERT                // TODO: why is it not LITERAL_assert?\n+                                  // maybe it\u0027s a bug in the grammar?\n+        };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {\n            QUESTION,          // \u0027?\u0027\n            // COLON,             // \u0027:\u0027 TODO: dont flag after \"case\"\n            ASSIGN,            // \u0027\u003d\u0027\n            EQUAL,             // \"\u003d\u003d\"\n            NOT_EQUAL,         // \"!\u003d\"\n            DIV,               // \u0027/\u0027\n            DIV_ASSIGN,        // \"/\u003d\"\n            // PLUS,              //\u0027 +\u0027 TODO: unaray plus\n            PLUS_ASSIGN,       // \"+\u003d\"\n            // MINUS,             // \u0027-\u0027 TODO: unary minus\n            MINUS_ASSIGN,      //\"-\u003d\"\n            STAR,              // \u0027*\u0027\n            STAR_ASSIGN,       // \"*\u003d\"\n            MOD,               // \u0027%\u0027\n            MOD_ASSIGN,        // \"%\u003d\"\n            SR,                // \"\u003e\u003e\"\n            SR_ASSIGN,         // \"\u003e\u003e\u003d\"\n            BSR,               // \"\u003e\u003e\u003e\"\n            BSR_ASSIGN,        // \"\u003e\u003e\u003e\u003d\"\n            GE,                // \"\u003e\u003d\"\n            GT,                // \"\u003e\"\n            SL,                // \"\u003c\u003c\"\n            SL_ASSIGN,         // \"\u003c\u003c\u003d\"\n            LE,                // \"\u003c\u003d\"\n            LT,                // \u0027\u003c\u0027\n            BXOR,              // \u0027^\u0027\n            BXOR_ASSIGN,       // \"^\u003d\"\n            BOR,               // \u0027|\u0027\n            BOR_ASSIGN,        // \"|\u003d\"\n            LOR,               // \"||\"\n            BAND,              // \u0027\u0026\u0027\n            BAND_ASSIGN,       // \"\u0026\u003d\"\n            LAND,              // \"\u0026\u0026\"\n            LITERAL_if,\n            LITERAL_else,\n            LITERAL_for,\n            LITERAL_do,\n            // LITERAL_return,    // TODO: \"return;\" is OK, return(2) is not\n            LITERAL_try,\n            LITERAL_catch,\n            LITERAL_finally,\n            LITERAL_synchronized,\n            ASSERT                // TODO: why is it not LITERAL_assert?\n                                  // maybe it\u0027s a bug in the grammar?\n        };\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827": {
      "type": "Ybodychange",
      "commitMessage": "some javadoc and TODO comments\n",
      "commitDate": "15/09/02 10:08 PM",
      "commitName": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "15/09/02 9:55 AM",
      "commitNameOld": "1d528505f9e45f64c40700871823fa3f774abd5c",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,5 @@\n     public int[] getDefaultTokens()\n     {\n+        // TODO: add all operators\n         return new int[] {JavaTokenTypes.ASSIGN};\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        // TODO: add all operators\n        return new int[] {JavaTokenTypes.ASSIGN};\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java",
      "extendedDetails": {}
    },
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": {
      "type": "Yintroduced",
      "commitMessage": "initial checkin of check implementations\n",
      "commitDate": "15/09/02 9:35 AM",
      "commitName": "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,4 @@\n+    public int[] getDefaultTokens()\n+    {\n+        return new int[] {JavaTokenTypes.ASSIGN};\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int[] getDefaultTokens()\n    {\n        return new int[] {JavaTokenTypes.ASSIGN};\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java"
    }
  }
}