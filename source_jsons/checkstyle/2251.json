{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ModifierOrderCheck.java",
  "functionName": "checkOrderSuggestedByJls",
  "functionId": "checkOrderSuggestedByJls___modifiers-List__DetailAST__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
  "functionStartLine": 149,
  "functionEndLine": 190,
  "numCommitsSeen": 110,
  "timeTaken": 3144,
  "changeHistory": [
    "4c3a5dcdd0e264fe708cfcc65bd2f36092c5bfa4",
    "bf9325be913ce46a1427232c455f4830b574ba44",
    "e04cbbf23e9273cca31b1cc12142e34fae753542",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae",
    "a827b7cbbf1f29e24e3f814149809941e754c93c",
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "0ff261c5acaae68262f9083b15b4c0db4f72af90",
    "857dc7720f31430e2ba61878e0bfb3dc11ceb396",
    "dba746ba9387bee04ed362254abb5d9ed35169cd",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "0fcae24380f86386ada6b2bb017c2ffe98ecb17e",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "262209477f39964a63103613f3e2c985da083371",
    "f38937b575880adfae6cf427d7203f04f294114d",
    "6125beffc437f970eae276b4a6542265c6547784",
    "5ce6ad4df6ccdd575168b54e712707e9f77bb524",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d"
  ],
  "changeHistoryShort": {
    "4c3a5dcdd0e264fe708cfcc65bd2f36092c5bfa4": "Ybodychange",
    "bf9325be913ce46a1427232c455f4830b574ba44": "Yrename",
    "e04cbbf23e9273cca31b1cc12142e34fae753542": "Ymodifierchange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae": "Ybodychange",
    "a827b7cbbf1f29e24e3f814149809941e754c93c": "Ybodychange",
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "0ff261c5acaae68262f9083b15b4c0db4f72af90": "Ybodychange",
    "857dc7720f31430e2ba61878e0bfb3dc11ceb396": "Ybodychange",
    "dba746ba9387bee04ed362254abb5d9ed35169cd": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "0fcae24380f86386ada6b2bb017c2ffe98ecb17e": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "262209477f39964a63103613f3e2c985da083371": "Ymultichange(Yparameterchange,Ybodychange)",
    "f38937b575880adfae6cf427d7203f04f294114d": "Yfilerename",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "5ce6ad4df6ccdd575168b54e712707e9f77bb524": "Yfilerename",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c3a5dcdd0e264fe708cfcc65bd2f36092c5bfa4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #903: Skip type annotations from validation of ModifierOrderCheck\n",
      "commitDate": "15/02/16 5:48 AM",
      "commitName": "4c3a5dcdd0e264fe708cfcc65bd2f36092c5bfa4",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 9.99,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n     private static DetailAST checkOrderSuggestedByJls(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier \u003d skipAnnotations(iterator);\n \n         DetailAST offendingModifier \u003d null;\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n             int index \u003d 0;\n \n             while (modifier !\u003d null\n                     \u0026\u0026 offendingModifier \u003d\u003d null) {\n \n                 if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                    //Annotation not at start of modifiers, bad\n-                    offendingModifier \u003d modifier;\n+                    if (!isAnnotationOnType(modifier)) {\n+                        //Annotation not at start of modifiers, bad\n+                        offendingModifier \u003d modifier;\n+                    }\n                     break;\n                 }\n \n                 while (index \u003c JLS_ORDER.length\n                        \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                     index++;\n                 }\n \n                 if (index \u003d\u003d JLS_ORDER.length) {\n                     //Current modifier is out of JLS order\n                     offendingModifier \u003d modifier;\n                 }\n                 else if (iterator.hasNext()) {\n                     modifier \u003d iterator.next();\n                 }\n                 else {\n                     //Reached end of modifiers without problem\n                     modifier \u003d null;\n                 }\n             }\n         }\n         return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static DetailAST checkOrderSuggestedByJls(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier \u003d skipAnnotations(iterator);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int index \u003d 0;\n\n            while (modifier !\u003d null\n                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    if (!isAnnotationOnType(modifier)) {\n                        //Annotation not at start of modifiers, bad\n                        offendingModifier \u003d modifier;\n                    }\n                    break;\n                }\n\n                while (index \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                    index++;\n                }\n\n                if (index \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                }\n                else if (iterator.hasNext()) {\n                    modifier \u003d iterator.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "bf9325be913ce46a1427232c455f4830b574ba44": {
      "type": "Yrename",
      "commitMessage": "Issue #2639: adjust AbbreviationAsWordInName in checkstyle_checks.xml to catch unexpected abbreviations\n",
      "commitDate": "21/11/15 5:51 PM",
      "commitName": "bf9325be913ce46a1427232c455f4830b574ba44",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "13/10/15 2:53 PM",
      "commitNameOld": "e04cbbf23e9273cca31b1cc12142e34fae753542",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 39.17,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n-    private static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n+    private static DetailAST checkOrderSuggestedByJls(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier \u003d skipAnnotations(iterator);\n \n         DetailAST offendingModifier \u003d null;\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n             int index \u003d 0;\n \n             while (modifier !\u003d null\n                     \u0026\u0026 offendingModifier \u003d\u003d null) {\n \n                 if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                     //Annotation not at start of modifiers, bad\n                     offendingModifier \u003d modifier;\n                     break;\n                 }\n \n                 while (index \u003c JLS_ORDER.length\n                        \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                     index++;\n                 }\n \n                 if (index \u003d\u003d JLS_ORDER.length) {\n                     //Current modifier is out of JLS order\n                     offendingModifier \u003d modifier;\n                 }\n                 else if (iterator.hasNext()) {\n                     modifier \u003d iterator.next();\n                 }\n                 else {\n                     //Reached end of modifiers without problem\n                     modifier \u003d null;\n                 }\n             }\n         }\n         return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static DetailAST checkOrderSuggestedByJls(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier \u003d skipAnnotations(iterator);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int index \u003d 0;\n\n            while (modifier !\u003d null\n                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    //Annotation not at start of modifiers, bad\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n\n                while (index \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                    index++;\n                }\n\n                if (index \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                }\n                else if (iterator.hasNext()) {\n                    modifier \u003d iterator.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldValue": "checkOrderSuggestedByJLS",
        "newValue": "checkOrderSuggestedByJls"
      }
    },
    "e04cbbf23e9273cca31b1cc12142e34fae753542": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #957: Decrease visibility of package-private methods\n",
      "commitDate": "13/10/15 2:53 PM",
      "commitName": "e04cbbf23e9273cca31b1cc12142e34fae753542",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "06/10/15 5:46 PM",
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n-    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n+    private static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier \u003d skipAnnotations(iterator);\n \n         DetailAST offendingModifier \u003d null;\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n             int index \u003d 0;\n \n             while (modifier !\u003d null\n                     \u0026\u0026 offendingModifier \u003d\u003d null) {\n \n                 if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                     //Annotation not at start of modifiers, bad\n                     offendingModifier \u003d modifier;\n                     break;\n                 }\n \n                 while (index \u003c JLS_ORDER.length\n                        \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                     index++;\n                 }\n \n                 if (index \u003d\u003d JLS_ORDER.length) {\n                     //Current modifier is out of JLS order\n                     offendingModifier \u003d modifier;\n                 }\n                 else if (iterator.hasNext()) {\n                     modifier \u003d iterator.next();\n                 }\n                 else {\n                     //Reached end of modifiers without problem\n                     modifier \u003d null;\n                 }\n             }\n         }\n         return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier \u003d skipAnnotations(iterator);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int index \u003d 0;\n\n            while (modifier !\u003d null\n                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    //Annotation not at start of modifiers, bad\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n\n                while (index \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                    index++;\n                }\n\n                if (index \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                }\n                else if (iterator.hasNext()) {\n                    modifier \u003d iterator.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldValue": "[static]",
        "newValue": "[private, static]"
      }
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "03/09/15 6:24 PM",
      "commitNameOld": "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 32.97,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n     static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n-        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n+        final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n-        DetailAST modifier \u003d skipAnnotations(it);\n+        DetailAST modifier \u003d skipAnnotations(iterator);\n \n         DetailAST offendingModifier \u003d null;\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n-            int i \u003d 0;\n+            int index \u003d 0;\n \n             while (modifier !\u003d null\n                     \u0026\u0026 offendingModifier \u003d\u003d null) {\n \n                 if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                     //Annotation not at start of modifiers, bad\n                     offendingModifier \u003d modifier;\n                     break;\n                 }\n \n-                while (i \u003c JLS_ORDER.length\n-                       \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n-                    i++;\n+                while (index \u003c JLS_ORDER.length\n+                       \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n+                    index++;\n                 }\n \n-                if (i \u003d\u003d JLS_ORDER.length) {\n+                if (index \u003d\u003d JLS_ORDER.length) {\n                     //Current modifier is out of JLS order\n                     offendingModifier \u003d modifier;\n                 }\n-                else if (it.hasNext()) {\n-                    modifier \u003d it.next();\n+                else if (iterator.hasNext()) {\n+                    modifier \u003d iterator.next();\n                 }\n                 else {\n                     //Reached end of modifiers without problem\n                     modifier \u003d null;\n                 }\n             }\n         }\n         return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e iterator \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier \u003d skipAnnotations(iterator);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int index \u003d 0;\n\n            while (modifier !\u003d null\n                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    //Annotation not at start of modifiers, bad\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n\n                while (index \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[index].equals(modifier.getText())) {\n                    index++;\n                }\n\n                if (index \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                }\n                else if (iterator.hasNext()) {\n                    modifier \u003d iterator.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: loops should not contain more then one break.\n",
      "commitDate": "03/09/15 6:24 PM",
      "commitName": "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "31/08/15 10:43 AM",
      "commitNameOld": "a1128cd7428ba71035c132a072de0da2e5c4c9cd",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 3.32,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,41 @@\n     static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n-        DetailAST modifier;\n-        do {\n-            modifier \u003d it.next();\n-        }\n-        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n+        DetailAST modifier \u003d skipAnnotations(it);\n \n         DetailAST offendingModifier \u003d null;\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n             int i \u003d 0;\n \n-            while (modifier !\u003d null) {\n+            while (modifier !\u003d null\n+                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n+\n                 if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                     //Annotation not at start of modifiers, bad\n                     offendingModifier \u003d modifier;\n                     break;\n                 }\n \n                 while (i \u003c JLS_ORDER.length\n                        \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                     i++;\n                 }\n \n                 if (i \u003d\u003d JLS_ORDER.length) {\n                     //Current modifier is out of JLS order\n                     offendingModifier \u003d modifier;\n-                    break;\n                 }\n                 else if (it.hasNext()) {\n                     modifier \u003d it.next();\n                 }\n                 else {\n                     //Reached end of modifiers without problem\n                     modifier \u003d null;\n                 }\n             }\n         }\n         return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier \u003d skipAnnotations(it);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int i \u003d 0;\n\n            while (modifier !\u003d null\n                    \u0026\u0026 offendingModifier \u003d\u003d null) {\n\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    //Annotation not at start of modifiers, bad\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n\n                while (i \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                    i++;\n                }\n\n                if (i \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                }\n                else if (it.hasNext()) {\n                    modifier \u003d it.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "a827b7cbbf1f29e24e3f814149809941e754c93c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for ModifierOrderCheck\n",
      "commitDate": "28/08/15 10:47 PM",
      "commitName": "a827b7cbbf1f29e24e3f814149809941e754c93c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 12.09,
      "commitsBetweenForRepo": 270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n     static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n+        DetailAST offendingModifier \u003d null;\n+\n         //All modifiers are annotations, no problem\n-        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-            return null;\n-        }\n+        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n+            int i \u003d 0;\n \n-        int i \u003d 0;\n-        while (modifier !\u003d null) {\n-            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                //Annotation not at start of modifiers, bad\n-                return modifier;\n-            }\n+            while (modifier !\u003d null) {\n+                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+                    //Annotation not at start of modifiers, bad\n+                    offendingModifier \u003d modifier;\n+                    break;\n+                }\n \n-            while (i \u003c JLS_ORDER.length\n-                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n-                i++;\n-            }\n+                while (i \u003c JLS_ORDER.length\n+                       \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n+                    i++;\n+                }\n \n-            if (i \u003d\u003d JLS_ORDER.length) {\n-                //Current modifier is out of JLS order\n-                return modifier;\n-            }\n-            else if (it.hasNext()) {\n-                modifier \u003d it.next();\n-            }\n-            else {\n-                //Reached end of modifiers without problem\n-                modifier \u003d null;\n+                if (i \u003d\u003d JLS_ORDER.length) {\n+                    //Current modifier is out of JLS order\n+                    offendingModifier \u003d modifier;\n+                    break;\n+                }\n+                else if (it.hasNext()) {\n+                    modifier \u003d it.next();\n+                }\n+                else {\n+                    //Reached end of modifiers without problem\n+                    modifier \u003d null;\n+                }\n             }\n         }\n-\n-        return null;\n+        return offendingModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        DetailAST offendingModifier \u003d null;\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() !\u003d TokenTypes.ANNOTATION) {\n            int i \u003d 0;\n\n            while (modifier !\u003d null) {\n                if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                    //Annotation not at start of modifiers, bad\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n\n                while (i \u003c JLS_ORDER.length\n                       \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                    i++;\n                }\n\n                if (i \u003d\u003d JLS_ORDER.length) {\n                    //Current modifier is out of JLS order\n                    offendingModifier \u003d modifier;\n                    break;\n                }\n                else if (it.hasNext()) {\n                    modifier \u003d it.next();\n                }\n                else {\n                    //Reached end of modifiers without problem\n                    modifier \u003d null;\n                }\n            }\n        }\n        return offendingModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "931af7ec1411aa04b3f0b5d94373a3da43ce7e27": {
      "type": "Ybodychange",
      "commitMessage": "Simplify expressions that are constant. #1555\n\nFixes `ConstantConditions` inspection violations.\n\nDescription:\n\u003eThis inspection analyzes method control and data flow to report possible conditions that are always true or false and expressions whose value is statically proven to be constant.\n",
      "commitDate": "15/08/15 9:00 PM",
      "commitName": "931af7ec1411aa04b3f0b5d94373a3da43ce7e27",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "02/08/15 6:41 PM",
      "commitNameOld": "fd794d428cc0854ddd4d416f0208d49f1ee9cbe1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 13.1,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         int i \u003d 0;\n         while (modifier !\u003d null) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (it.hasNext()) {\n                 modifier \u003d it.next();\n             }\n             else {\n                 //Reached end of modifiers without problem\n                 modifier \u003d null;\n             }\n         }\n \n-        return modifier;\n+        return null;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        int i \u003d 0;\n        while (modifier !\u003d null) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (it.hasNext()) {\n                modifier \u003d it.next();\n            }\n            else {\n                //Reached end of modifiers without problem\n                modifier \u003d null;\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/07/15 12:05 PM",
      "commitNameOld": "0ff261c5acaae68262f9083b15b4c0db4f72af90",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 12.41,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n-    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n+    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         int i \u003d 0;\n         while (modifier !\u003d null) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (it.hasNext()) {\n                 modifier \u003d it.next();\n             }\n             else {\n                 //Reached end of modifiers without problem\n                 modifier \u003d null;\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        int i \u003d 0;\n        while (modifier !\u003d null) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (it.hasNext()) {\n                modifier \u003d it.next();\n            }\n            else {\n                //Reached end of modifiers without problem\n                modifier \u003d null;\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[static]"
      }
    },
    "0ff261c5acaae68262f9083b15b4c0db4f72af90": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1286: \u0027ModifierOrderCheck\u0027 was refactored, UT coverage improved; .classpath and .project were added to ignore list\n",
      "commitDate": "05/07/15 12:05 PM",
      "commitName": "0ff261c5acaae68262f9083b15b4c0db4f72af90",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "15/06/15 8:27 PM",
      "commitNameOld": "857dc7720f31430e2ba61878e0bfb3dc11ceb396",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.65,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n \n         //Speed past all initial annotations\n         DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         int i \u003d 0;\n-        while (i \u003c JLS_ORDER.length) {\n+        while (modifier !\u003d null) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n-            else if (!it.hasNext()) {\n-                //Reached end of modifiers without problem\n-                return null;\n+            else if (it.hasNext()) {\n+                modifier \u003d it.next();\n             }\n             else {\n-                modifier \u003d it.next();\n+                //Reached end of modifiers without problem\n+                modifier \u003d null;\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        int i \u003d 0;\n        while (modifier !\u003d null) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (it.hasNext()) {\n                modifier \u003d it.next();\n            }\n            else {\n                //Reached end of modifiers without problem\n                modifier \u003d null;\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "857dc7720f31430e2ba61878e0bfb3dc11ceb396": {
      "type": "Ybodychange",
      "commitMessage": "ModifierOrderCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "15/06/15 8:27 PM",
      "commitName": "857dc7720f31430e2ba61878e0bfb3dc11ceb396",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 29.65,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,42 @@\n     DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n-        //No modifiers, no problems\n-        if (!it.hasNext()) {\n-            return null;\n-        }\n \n         //Speed past all initial annotations\n         DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         int i \u003d 0;\n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n                 modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers) {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        int i \u003d 0;\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText())) {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "dba746ba9387bee04ed362254abb5d9ed35169cd": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from PrematureDeclaration rule. #948\n",
      "commitDate": "13/05/15 9:58 AM",
      "commitName": "dba746ba9387bee04ed362254abb5d9ed35169cd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "01/05/15 4:32 PM",
      "commitNameOld": "31421dcdda3b3534f2fcc5c6e88a8fdbc5d15311",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 11.73,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n     {\n-        int i \u003d 0;\n-        DetailAST modifier;\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n+        DetailAST modifier;\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n+        int i \u003d 0;\n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n                 modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n    {\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        DetailAST modifier;\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        int i \u003d 0;\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "0b98c0389e2cf745cb125a89dece57538fc672b7",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n         final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n         do {\n             modifier \u003d it.next();\n         }\n-        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n+        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n-            while ((i \u003c JLS_ORDER.length)\n+            while (i \u003c JLS_ORDER.length\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n                 modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 modifier.getType() \u003d\u003d TokenTypes.ANNOTATION);\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while (i \u003c JLS_ORDER.length\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "0fcae24380f86386ada6b2bb017c2ffe98ecb17e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, modifier, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, modifier, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.91,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n+    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n-        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n+        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while ((i \u003c JLS_ORDER.length)\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n                 modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[aModifiers-List\u003cDetailAST\u003e]",
            "newValue": "[modifiers-List\u003cDetailAST\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, modifier, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.91,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n+    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n-        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n+        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n         do {\n             modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while ((i \u003c JLS_ORDER.length)\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n                 modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e modifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d modifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java"
      }
    },
    "262209477f39964a63103613f3e2c985da083371": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 9:40 PM",
      "commitName": "262209477f39964a63103613f3e2c985da083371",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 9:40 PM",
          "commitName": "262209477f39964a63103613f3e2c985da083371",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "14/12/07 9:01 PM",
          "commitNameOld": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n+    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n-        final Iterator it \u003d aModifiers.iterator();\n+        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n         do {\n-            modifier \u003d (DetailAST) it.next();\n+            modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while ((i \u003c JLS_ORDER.length)\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n-                modifier \u003d (DetailAST) it.next();\n+                modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[aModifiers-List]",
            "newValue": "[aModifiers-List\u003cDetailAST\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 9:40 PM",
          "commitName": "262209477f39964a63103613f3e2c985da083371",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "14/12/07 9:01 PM",
          "commitNameOld": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n+    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n-        final Iterator it \u003d aModifiers.iterator();\n+        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n         //No modifiers, no problems\n         if (!it.hasNext()) {\n             return null;\n         }\n \n         //Speed past all initial annotations\n         do {\n-            modifier \u003d (DetailAST) it.next();\n+            modifier \u003d it.next();\n         }\n         while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n \n         //All modifiers are annotations, no problem\n         if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n             return null;\n         }\n \n         while (i \u003c JLS_ORDER.length) {\n             if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 //Annotation not at start of modifiers, bad\n                 return modifier;\n             }\n \n             while ((i \u003c JLS_ORDER.length)\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n \n             if (i \u003d\u003d JLS_ORDER.length) {\n                 //Current modifier is out of JLS order\n                 return modifier;\n             }\n             else if (!it.hasNext()) {\n                 //Reached end of modifiers without problem\n                 return null;\n             }\n             else {\n-                modifier \u003d (DetailAST) it.next();\n+                modifier \u003d it.next();\n             }\n         }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    DetailAST checkOrderSuggestedByJLS(List\u003cDetailAST\u003e aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator\u003cDetailAST\u003e it \u003d aModifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d it.next();\n            }\n        }\n\n        return modifier;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f38937b575880adfae6cf427d7203f04f294114d": {
      "type": "Yfilerename",
      "commitMessage": "Moved the ModifierOrderCheck.\n",
      "commitDate": "23/03/05 9:35 PM",
      "commitName": "f38937b575880adfae6cf427d7203f04f294114d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "23/03/05 4:15 AM",
      "commitNameOld": "bc66e150c2654deb6dcf1806b02e8f816e533d83",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator it \u003d aModifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d (DetailAST) it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d (DetailAST) it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java"
      }
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,48 @@\n     DetailAST checkOrderSuggestedByJLS(List aModifiers)\n     {\n         int i \u003d 0;\n         DetailAST modifier;\n         final Iterator it \u003d aModifiers.iterator();\n+        //No modifiers, no problems\n+        if (!it.hasNext()) {\n+            return null;\n+        }\n+\n+        //Speed past all initial annotations\n         do {\n-            if (!it.hasNext()) {\n-                return null;\n+            modifier \u003d (DetailAST) it.next();\n+        }\n+        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n+\n+        //All modifiers are annotations, no problem\n+        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+            return null;\n+        }\n+\n+        while (i \u003c JLS_ORDER.length) {\n+            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+                //Annotation not at start of modifiers, bad\n+                return modifier;\n             }\n \n-            modifier \u003d (DetailAST) it.next();\n             while ((i \u003c JLS_ORDER.length)\n                    \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n             {\n                 i++;\n             }\n-        } while (i \u003c JLS_ORDER.length);\n+\n+            if (i \u003d\u003d JLS_ORDER.length) {\n+                //Current modifier is out of JLS order\n+                return modifier;\n+            }\n+            else if (!it.hasNext()) {\n+                //Reached end of modifiers without problem\n+                return null;\n+            }\n+            else {\n+                modifier \u003d (DetailAST) it.next();\n+            }\n+        }\n \n         return modifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator it \u003d aModifiers.iterator();\n        //No modifiers, no problems\n        if (!it.hasNext()) {\n            return null;\n        }\n\n        //Speed past all initial annotations\n        do {\n            modifier \u003d (DetailAST) it.next();\n        }\n        while (it.hasNext() \u0026\u0026 (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION));\n\n        //All modifiers are annotations, no problem\n        if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n            return null;\n        }\n\n        while (i \u003c JLS_ORDER.length) {\n            if (modifier.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                //Annotation not at start of modifiers, bad\n                return modifier;\n            }\n\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n\n            if (i \u003d\u003d JLS_ORDER.length) {\n                //Current modifier is out of JLS order\n                return modifier;\n            }\n            else if (!it.hasNext()) {\n                //Reached end of modifiers without problem\n                return null;\n            }\n            else {\n                modifier \u003d (DetailAST) it.next();\n            }\n        }\n\n        return modifier;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java",
      "extendedDetails": {}
    },
    "5ce6ad4df6ccdd575168b54e712707e9f77bb524": {
      "type": "Yfilerename",
      "commitMessage": "ModifierCheck to ModifierOrderCheck\n",
      "commitDate": "29/12/02 12:46 AM",
      "commitName": "5ce6ad4df6ccdd575168b54e712707e9f77bb524",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/12/02 4:19 AM",
      "commitNameOld": "8ec36bc770a78f423f6c0d0c37b9efd7981815ed",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator it \u003d aModifiers.iterator();\n        do {\n            if (!it.hasNext()) {\n                return null;\n            }\n\n            modifier \u003d (DetailAST) it.next();\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n        } while (i \u003c JLS_ORDER.length);\n\n        return modifier;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java"
      }
    },
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": {
      "type": "Yintroduced",
      "commitMessage": "initial checkin of check implementations\n",
      "commitDate": "15/09/02 9:35 AM",
      "commitName": "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,20 @@\n+    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n+    {\n+        int i \u003d 0;\n+        DetailAST modifier;\n+        final Iterator it \u003d aModifiers.iterator();\n+        do {\n+            if (!it.hasNext()) {\n+                return null;\n+            }\n+\n+            modifier \u003d (DetailAST) it.next();\n+            while ((i \u003c JLS_ORDER.length)\n+                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n+            {\n+                i++;\n+            }\n+        } while (i \u003c JLS_ORDER.length);\n+\n+        return modifier;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    DetailAST checkOrderSuggestedByJLS(List aModifiers)\n    {\n        int i \u003d 0;\n        DetailAST modifier;\n        final Iterator it \u003d aModifiers.iterator();\n        do {\n            if (!it.hasNext()) {\n                return null;\n            }\n\n            modifier \u003d (DetailAST) it.next();\n            while ((i \u003c JLS_ORDER.length)\n                   \u0026\u0026 !JLS_ORDER[i].equals(modifier.getText()))\n            {\n                i++;\n            }\n        } while (i \u003c JLS_ORDER.length);\n\n        return modifier;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierCheck.java"
    }
  }
}