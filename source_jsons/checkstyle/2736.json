{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LambdaHandler.java",
  "functionName": "checkIndentation",
  "functionId": "checkIndentation",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java",
  "functionStartLine": 78,
  "functionEndLine": 96,
  "numCommitsSeen": 14,
  "timeTaken": 1052,
  "changeHistory": [
    "dabbebac4b52591a8689b6f2e1b81d98e58d0a8e",
    "8c891372187779376158becd95fcaf4e28b8bb8d",
    "eeec3dc1d23916462560403a27a4ae94260d61f3"
  ],
  "changeHistoryShort": {
    "dabbebac4b52591a8689b6f2e1b81d98e58d0a8e": "Ybodychange",
    "8c891372187779376158becd95fcaf4e28b8bb8d": "Ybodychange",
    "eeec3dc1d23916462560403a27a4ae94260d61f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dabbebac4b52591a8689b6f2e1b81d98e58d0a8e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5969: Respect and expect tab width in column number check for lambda indentations\n",
      "commitDate": "26/03/20 11:40 PM",
      "commitName": "dabbebac4b52591a8689b6f2e1b81d98e58d0a8e",
      "commitAuthor": "liach",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 85.25,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void checkIndentation() {\n         // If the argument list is the first element on the line\n         final DetailAST firstChild \u003d getMainAst().getFirstChild();\n-        if (getLineStart(firstChild) \u003d\u003d firstChild.getColumnNo()) {\n+        if (getLineStart(firstChild) \u003d\u003d expandedTabsColumnNo(firstChild)) {\n             final IndentLevel level \u003d getIndent();\n-            if (!level.isAcceptable(firstChild.getColumnNo())) {\n-                logError(firstChild, \"arguments\", firstChild.getColumnNo(), level);\n+            if (!level.isAcceptable(expandedTabsColumnNo(firstChild))) {\n+                logError(firstChild, \"arguments\", expandedTabsColumnNo(firstChild), level);\n             }\n         }\n \n         // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n-        if (getLineStart(getMainAst()) \u003d\u003d getMainAst().getColumnNo()) {\n+        if (getLineStart(getMainAst()) \u003d\u003d expandedTabsColumnNo(getMainAst())) {\n             final IndentLevel level \u003d\n                 new IndentLevel(getIndent(), getIndentCheck().getLineWrappingIndentation());\n-            if (!level.isAcceptable(getMainAst().getColumnNo())) {\n-                logError(getMainAst(), \"\", getMainAst().getColumnNo(), level);\n+            if (!level.isAcceptable(expandedTabsColumnNo(getMainAst()))) {\n+                logError(getMainAst(), \"\", expandedTabsColumnNo(getMainAst()), level);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        // If the argument list is the first element on the line\n        final DetailAST firstChild \u003d getMainAst().getFirstChild();\n        if (getLineStart(firstChild) \u003d\u003d expandedTabsColumnNo(firstChild)) {\n            final IndentLevel level \u003d getIndent();\n            if (!level.isAcceptable(expandedTabsColumnNo(firstChild))) {\n                logError(firstChild, \"arguments\", expandedTabsColumnNo(firstChild), level);\n            }\n        }\n\n        // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n        if (getLineStart(getMainAst()) \u003d\u003d expandedTabsColumnNo(getMainAst())) {\n            final IndentLevel level \u003d\n                new IndentLevel(getIndent(), getIndentCheck().getLineWrappingIndentation());\n            if (!level.isAcceptable(expandedTabsColumnNo(getMainAst()))) {\n                logError(getMainAst(), \"\", expandedTabsColumnNo(getMainAst()), level);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java",
      "extendedDetails": {}
    },
    "8c891372187779376158becd95fcaf4e28b8bb8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": "16/12/15 8:16 AM",
      "commitName": "8c891372187779376158becd95fcaf4e28b8bb8d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/12/15 10:53 AM",
      "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.89,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void checkIndentation() {\n         // If the argument list is the first element on the line\n         final DetailAST firstChild \u003d getMainAst().getFirstChild();\n         if (getLineStart(firstChild) \u003d\u003d firstChild.getColumnNo()) {\n-            final IndentLevel level \u003d getLevel();\n+            final IndentLevel level \u003d getIndent();\n             if (!level.isAcceptable(firstChild.getColumnNo())) {\n                 logError(firstChild, \"arguments\", firstChild.getColumnNo(), level);\n             }\n         }\n \n         // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n         if (getLineStart(getMainAst()) \u003d\u003d getMainAst().getColumnNo()) {\n             final IndentLevel level \u003d\n-                new IndentLevel(getLevel(), getIndentCheck().getLineWrappingIndentation());\n+                new IndentLevel(getIndent(), getIndentCheck().getLineWrappingIndentation());\n             if (!level.isAcceptable(getMainAst().getColumnNo())) {\n                 logError(getMainAst(), \"\", getMainAst().getColumnNo(), level);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        // If the argument list is the first element on the line\n        final DetailAST firstChild \u003d getMainAst().getFirstChild();\n        if (getLineStart(firstChild) \u003d\u003d firstChild.getColumnNo()) {\n            final IndentLevel level \u003d getIndent();\n            if (!level.isAcceptable(firstChild.getColumnNo())) {\n                logError(firstChild, \"arguments\", firstChild.getColumnNo(), level);\n            }\n        }\n\n        // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n        if (getLineStart(getMainAst()) \u003d\u003d getMainAst().getColumnNo()) {\n            final IndentLevel level \u003d\n                new IndentLevel(getIndent(), getIndentCheck().getLineWrappingIndentation());\n            if (!level.isAcceptable(getMainAst().getColumnNo())) {\n                logError(getMainAst(), \"\", getMainAst().getColumnNo(), level);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java",
      "extendedDetails": {}
    },
    "eeec3dc1d23916462560403a27a4ae94260d61f3": {
      "type": "Yintroduced",
      "commitMessage": "Issue #1548: Add lambda support to indentation check (see #281)\n",
      "commitDate": "01/10/15 6:53 AM",
      "commitName": "eeec3dc1d23916462560403a27a4ae94260d61f3",
      "commitAuthor": "Pieter Noordhuis",
      "diff": "@@ -0,0 +1,19 @@\n+    public void checkIndentation() {\n+        // If the argument list is the first element on the line\n+        final DetailAST firstChild \u003d getMainAst().getFirstChild();\n+        if (getLineStart(firstChild) \u003d\u003d firstChild.getColumnNo()) {\n+            final IndentLevel level \u003d getLevel();\n+            if (!level.isAcceptable(firstChild.getColumnNo())) {\n+                logError(firstChild, \"arguments\", firstChild.getColumnNo(), level);\n+            }\n+        }\n+\n+        // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n+        if (getLineStart(getMainAst()) \u003d\u003d getMainAst().getColumnNo()) {\n+            final IndentLevel level \u003d\n+                new IndentLevel(getLevel(), getIndentCheck().getLineWrappingIndentation());\n+            if (!level.isAcceptable(getMainAst().getColumnNo())) {\n+                logError(getMainAst(), \"\", getMainAst().getColumnNo(), level);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        // If the argument list is the first element on the line\n        final DetailAST firstChild \u003d getMainAst().getFirstChild();\n        if (getLineStart(firstChild) \u003d\u003d firstChild.getColumnNo()) {\n            final IndentLevel level \u003d getLevel();\n            if (!level.isAcceptable(firstChild.getColumnNo())) {\n                logError(firstChild, \"arguments\", firstChild.getColumnNo(), level);\n            }\n        }\n\n        // If the \"-\u003e\" is the first element on the line, assume line wrapping.\n        if (getLineStart(getMainAst()) \u003d\u003d getMainAst().getColumnNo()) {\n            final IndentLevel level \u003d\n                new IndentLevel(getLevel(), getIndentCheck().getLineWrappingIndentation());\n            if (!level.isAcceptable(getMainAst().getColumnNo())) {\n                logError(getMainAst(), \"\", getMainAst().getColumnNo(), level);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LambdaHandler.java"
    }
  }
}