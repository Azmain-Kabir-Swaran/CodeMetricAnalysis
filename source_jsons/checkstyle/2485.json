{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImportOrderCheck.java",
  "functionName": "compilePatterns",
  "functionId": "compilePatterns___packageGroups-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
  "functionStartLine": 954,
  "functionEndLine": 985,
  "numCommitsSeen": 88,
  "timeTaken": 893,
  "changeHistory": [
    "3bebe0b0fc6c1742544c5bfdd42b8ae69e9b177a",
    "1a6dafadd522b48c59289afd780a1df007f72819"
  ],
  "changeHistoryShort": {
    "3bebe0b0fc6c1742544c5bfdd42b8ae69e9b177a": "Ybodychange",
    "1a6dafadd522b48c59289afd780a1df007f72819": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bebe0b0fc6c1742544c5bfdd42b8ae69e9b177a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6289: added new tests to kill CONSTRUCTOR_CALLS mutations",
      "commitDate": "17/12/18 3:30 AM",
      "commitName": "3bebe0b0fc6c1742544c5bfdd42b8ae69e9b177a",
      "commitAuthor": "rnveach",
      "commitDateOld": "11/07/18 8:17 PM",
      "commitNameOld": "4e07bd654bddb2f1063a5aae956a0b81826c34f8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 158.34,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private static Pattern[] compilePatterns(String... packageGroups) {\n         final Pattern[] patterns \u003d new Pattern[packageGroups.length];\n \n         for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n             String pkg \u003d packageGroups[i];\n             final Pattern grp;\n \n             // if the pkg name is the wildcard, make it match zero chars\n             // from any name, so it will always be used as last resort.\n             if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                 // matches any package\n                 grp \u003d Pattern.compile(\"\");\n             }\n             else if (CommonUtil.startsWithChar(pkg, \u0027/\u0027)) {\n                 if (!CommonUtil.endsWithChar(pkg, \u0027/\u0027)) {\n-                    throw new IllegalArgumentException(\"Invalid group\");\n+                    throw new IllegalArgumentException(\"Invalid group: \" + pkg);\n                 }\n                 pkg \u003d pkg.substring(1, pkg.length() - 1);\n                 grp \u003d Pattern.compile(pkg);\n             }\n             else {\n                 final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n                 if (!CommonUtil.endsWithChar(pkg, \u0027.\u0027)) {\n                     pkgBuilder.append(\u0027.\u0027);\n                 }\n                 grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n             }\n \n             patterns[i] \u003d grp;\n         }\n         return patterns;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Pattern[] compilePatterns(String... packageGroups) {\n        final Pattern[] patterns \u003d new Pattern[packageGroups.length];\n\n        for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n            String pkg \u003d packageGroups[i];\n            final Pattern grp;\n\n            // if the pkg name is the wildcard, make it match zero chars\n            // from any name, so it will always be used as last resort.\n            if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                // matches any package\n                grp \u003d Pattern.compile(\"\");\n            }\n            else if (CommonUtil.startsWithChar(pkg, \u0027/\u0027)) {\n                if (!CommonUtil.endsWithChar(pkg, \u0027/\u0027)) {\n                    throw new IllegalArgumentException(\"Invalid group: \" + pkg);\n                }\n                pkg \u003d pkg.substring(1, pkg.length() - 1);\n                grp \u003d Pattern.compile(pkg);\n            }\n            else {\n                final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n                if (!CommonUtil.endsWithChar(pkg, \u0027.\u0027)) {\n                    pkgBuilder.append(\u0027.\u0027);\n                }\n                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n            }\n\n            patterns[i] \u003d grp;\n        }\n        return patterns;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "1a6dafadd522b48c59289afd780a1df007f72819": {
      "type": "Yintroduced",
      "commitMessage": "Issue #5724: Groups for static imports\n",
      "commitDate": "01/07/18 7:45 AM",
      "commitName": "1a6dafadd522b48c59289afd780a1df007f72819",
      "commitAuthor": "Pavel Bludov",
      "diff": "@@ -0,0 +1,32 @@\n+    private static Pattern[] compilePatterns(String... packageGroups) {\n+        final Pattern[] patterns \u003d new Pattern[packageGroups.length];\n+\n+        for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n+            String pkg \u003d packageGroups[i];\n+            final Pattern grp;\n+\n+            // if the pkg name is the wildcard, make it match zero chars\n+            // from any name, so it will always be used as last resort.\n+            if (WILDCARD_GROUP_NAME.equals(pkg)) {\n+                // matches any package\n+                grp \u003d Pattern.compile(\"\");\n+            }\n+            else if (CommonUtil.startsWithChar(pkg, \u0027/\u0027)) {\n+                if (!CommonUtil.endsWithChar(pkg, \u0027/\u0027)) {\n+                    throw new IllegalArgumentException(\"Invalid group\");\n+                }\n+                pkg \u003d pkg.substring(1, pkg.length() - 1);\n+                grp \u003d Pattern.compile(pkg);\n+            }\n+            else {\n+                final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n+                if (!CommonUtil.endsWithChar(pkg, \u0027.\u0027)) {\n+                    pkgBuilder.append(\u0027.\u0027);\n+                }\n+                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n+            }\n+\n+            patterns[i] \u003d grp;\n+        }\n+        return patterns;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static Pattern[] compilePatterns(String... packageGroups) {\n        final Pattern[] patterns \u003d new Pattern[packageGroups.length];\n\n        for (int i \u003d 0; i \u003c packageGroups.length; i++) {\n            String pkg \u003d packageGroups[i];\n            final Pattern grp;\n\n            // if the pkg name is the wildcard, make it match zero chars\n            // from any name, so it will always be used as last resort.\n            if (WILDCARD_GROUP_NAME.equals(pkg)) {\n                // matches any package\n                grp \u003d Pattern.compile(\"\");\n            }\n            else if (CommonUtil.startsWithChar(pkg, \u0027/\u0027)) {\n                if (!CommonUtil.endsWithChar(pkg, \u0027/\u0027)) {\n                    throw new IllegalArgumentException(\"Invalid group\");\n                }\n                pkg \u003d pkg.substring(1, pkg.length() - 1);\n                grp \u003d Pattern.compile(pkg);\n            }\n            else {\n                final StringBuilder pkgBuilder \u003d new StringBuilder(pkg);\n                if (!CommonUtil.endsWithChar(pkg, \u0027.\u0027)) {\n                    pkgBuilder.append(\u0027.\u0027);\n                }\n                grp \u003d Pattern.compile(\"^\" + Pattern.quote(pkgBuilder.toString()));\n            }\n\n            patterns[i] \u003d grp;\n        }\n        return patterns;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java"
    }
  }
}