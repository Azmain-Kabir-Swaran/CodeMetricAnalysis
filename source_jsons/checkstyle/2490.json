{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RedundantImportCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
  "functionStartLine": 108,
  "functionEndLine": 139,
  "numCommitsSeen": 71,
  "timeTaken": 2425,
  "changeHistory": [
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "10e6bfe44834bd38bb001058e775377141c86678",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "66cc059f7129ce961b3dc833c3150b2dbd89590b",
    "6125beffc437f970eae276b4a6542265c6547784",
    "7bd1126a3b5ea39d73cab69622d50bc834ee29c5",
    "ddb334d9e4443c96fed60ff0a0b9210615846315",
    "768664d6542ae719b014206b36619e4d180eed32",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "84c1f8375fa540e7b0313b95af6be6000e3c4c71",
    "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54"
  ],
  "changeHistoryShort": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "10e6bfe44834bd38bb001058e775377141c86678": "Ybodychange",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": "Ybodychange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "66cc059f7129ce961b3dc833c3150b2dbd89590b": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "7bd1126a3b5ea39d73cab69622d50bc834ee29c5": "Ybodychange",
    "ddb334d9e4443c96fed60ff0a0b9210615846315": "Yfilerename",
    "768664d6542ae719b014206b36619e4d180eed32": "Ybodychange",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "84c1f8375fa540e7b0313b95af6be6000e3c4c71": "Ybodychange",
    "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,35 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             pkgName \u003d FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (isFromPackage(imp.getText(), \"java.lang\")) {\n-                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n-                    imp.getText());\n+                log(ast, MSG_LANG, imp.getText());\n             }\n             // imports from unnamed package are not allowed,\n             // so we are checking SAME rule only for named packages\n             else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n-                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n-                    imp.getText());\n+                log(ast, MSG_SAME, imp.getText());\n             }\n             // Check for a duplicate import\n             imports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n-                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n+                .forEach(full -\u003e log(ast,\n                     MSG_DUPLICATE, full.getLineNo(),\n                     imp.getText()));\n \n             imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling());\n             staticImports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n-                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n+                .forEach(full -\u003e log(ast,\n                     MSG_DUPLICATE, full.getLineNo(), imp.getText()));\n \n             staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (isFromPackage(imp.getText(), \"java.lang\")) {\n                log(ast, MSG_LANG, imp.getText());\n            }\n            // imports from unnamed package are not allowed,\n            // so we are checking SAME rule only for named packages\n            else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n                log(ast, MSG_SAME, imp.getText());\n            }\n            // Check for a duplicate import\n            imports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n                .forEach(full -\u003e log(ast,\n                    MSG_DUPLICATE, full.getLineNo(),\n                    imp.getText()));\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            staticImports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n                .forEach(full -\u003e log(ast,\n                    MSG_DUPLICATE, full.getLineNo(), imp.getText()));\n\n            staticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
      "commitDate": "08/09/16 5:30 AM",
      "commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "commitAuthor": "Mariia Mykhailova",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 215.94,
      "commitsBetweenForRepo": 461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,37 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             pkgName \u003d FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (isFromPackage(imp.getText(), \"java.lang\")) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                     imp.getText());\n             }\n             // imports from unnamed package are not allowed,\n             // so we are checking SAME rule only for named packages\n             else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                     imp.getText());\n             }\n             // Check for a duplicate import\n-            for (FullIdent full : imports) {\n-                if (imp.getText().equals(full.getText())) {\n-                    log(ast.getLineNo(), ast.getColumnNo(),\n-                            MSG_DUPLICATE, full.getLineNo(),\n-                            imp.getText());\n-                }\n-            }\n+            imports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n+                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n+                    MSG_DUPLICATE, full.getLineNo(),\n+                    imp.getText()));\n \n             imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling());\n-            for (FullIdent full : staticImports) {\n-                if (imp.getText().equals(full.getText())) {\n-                    log(ast.getLineNo(), ast.getColumnNo(),\n-                        MSG_DUPLICATE, full.getLineNo(), imp.getText());\n-                }\n-            }\n+            staticImports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n+                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n+                    MSG_DUPLICATE, full.getLineNo(), imp.getText()));\n \n             staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (isFromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                    imp.getText());\n            }\n            // imports from unnamed package are not allowed,\n            // so we are checking SAME rule only for named packages\n            else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            imports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n                    MSG_DUPLICATE, full.getLineNo(),\n                    imp.getText()));\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            staticImports.stream().filter(full -\u003e imp.getText().equals(full.getText()))\n                .forEach(full -\u003e log(ast.getLineNo(), ast.getColumnNo(),\n                    MSG_DUPLICATE, full.getLineNo(), imp.getText()));\n\n            staticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/08/15 1:25 AM",
      "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 9.48,
      "commitsBetweenForRepo": 178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             pkgName \u003d FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n-            if (fromPackage(imp.getText(), \"java.lang\")) {\n+            if (isFromPackage(imp.getText(), \"java.lang\")) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                     imp.getText());\n             }\n             // imports from unnamed package are not allowed,\n             // so we are checking SAME rule only for named packages\n-            else if (pkgName !\u003d null \u0026\u0026 fromPackage(imp.getText(), pkgName)) {\n+            else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             for (FullIdent full : imports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                             MSG_DUPLICATE, full.getLineNo(),\n                             imp.getText());\n                 }\n             }\n \n             imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling());\n             for (FullIdent full : staticImports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                         MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                 }\n             }\n \n             staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (isFromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                    imp.getText());\n            }\n            // imports from unnamed package are not allowed,\n            // so we are checking SAME rule only for named packages\n            else if (pkgName !\u003d null \u0026\u0026 isFromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : imports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            MSG_DUPLICATE, full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            for (FullIdent full : staticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                        MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                }\n            }\n\n            staticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "10e6bfe44834bd38bb001058e775377141c86678": {
      "type": "Ybodychange",
      "commitMessage": "UT coverage for RedundantImport check. #1128\n",
      "commitDate": "16/06/15 12:48 PM",
      "commitName": "10e6bfe44834bd38bb001058e775377141c86678",
      "commitAuthor": "Aleksandr Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 30.33,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             pkgName \u003d FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                     imp.getText());\n             }\n-            else if (fromPackage(imp.getText(), pkgName)) {\n+            // imports from unnamed package are not allowed,\n+            // so we are checking SAME rule only for named packages\n+            else if (pkgName !\u003d null \u0026\u0026 fromPackage(imp.getText(), pkgName)) {\n                 log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             for (FullIdent full : imports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                             MSG_DUPLICATE, full.getLineNo(),\n                             imp.getText());\n                 }\n             }\n \n             imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling());\n             for (FullIdent full : staticImports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n                         MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                 }\n             }\n \n             staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                    imp.getText());\n            }\n            // imports from unnamed package are not allowed,\n            // so we are checking SAME rule only for named packages\n            else if (pkgName !\u003d null \u0026\u0026 fromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : imports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            MSG_DUPLICATE, full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            for (FullIdent full : staticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                        MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                }\n            }\n\n            staticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, imports package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             pkgName \u003d FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n-                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), pkgName)) {\n-                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             for (FullIdent full : imports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                            \"import.duplicate\", full.getLineNo(),\n+                            MSG_DUPLICATE, full.getLineNo(),\n                             imp.getText());\n                 }\n             }\n \n             imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     ast.getLastChild().getPreviousSibling());\n             for (FullIdent full : staticImports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(ast.getLineNo(), ast.getColumnNo(),\n-                        \"import.duplicate\", full.getLineNo(), imp.getText());\n+                        MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                 }\n             }\n \n             staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_LANG,\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_SAME,\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : imports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            MSG_DUPLICATE, full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            for (FullIdent full : staticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                        MSG_DUPLICATE, full.getLineNo(), imp.getText());\n                }\n            }\n\n            staticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            mPkgName \u003d FullIdent.createFullIdent(\n-                    aAST.getLastChild().getPreviousSibling()).getText();\n+        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n+            pkgName \u003d FullIdent.createFullIdent(\n+                    ast.getLastChild().getPreviousSibling()).getText();\n         }\n-        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n-            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n+        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n+            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n+                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n-            else if (fromPackage(imp.getText(), mPkgName)) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n+            else if (fromPackage(imp.getText(), pkgName)) {\n+                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n-            for (FullIdent full : mImports) {\n+            for (FullIdent full : imports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n                             \"import.duplicate\", full.getLineNo(),\n                             imp.getText());\n                 }\n             }\n \n-            mImports.add(imp);\n+            imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n-                    aAST.getLastChild().getPreviousSibling());\n-            for (FullIdent full : mStaticImports) {\n+                    ast.getLastChild().getPreviousSibling());\n+            for (FullIdent full : staticImports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n                         \"import.duplicate\", full.getLineNo(), imp.getText());\n                 }\n             }\n \n-            mStaticImports.add(imp);\n+            staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : imports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            \"import.duplicate\", full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            for (FullIdent full : staticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                        \"import.duplicate\", full.getLineNo(), imp.getText());\n                }\n            }\n\n            staticImports.add(imp);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            mPkgName \u003d FullIdent.createFullIdent(\n-                    aAST.getLastChild().getPreviousSibling()).getText();\n+        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n+            pkgName \u003d FullIdent.createFullIdent(\n+                    ast.getLastChild().getPreviousSibling()).getText();\n         }\n-        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n-            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n+        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n+            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n+                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n-            else if (fromPackage(imp.getText(), mPkgName)) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n+            else if (fromPackage(imp.getText(), pkgName)) {\n+                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n-            for (FullIdent full : mImports) {\n+            for (FullIdent full : imports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n                             \"import.duplicate\", full.getLineNo(),\n                             imp.getText());\n                 }\n             }\n \n-            mImports.add(imp);\n+            imports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n-                    aAST.getLastChild().getPreviousSibling());\n-            for (FullIdent full : mStaticImports) {\n+                    ast.getLastChild().getPreviousSibling());\n+            for (FullIdent full : staticImports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    log(ast.getLineNo(), ast.getColumnNo(),\n                         \"import.duplicate\", full.getLineNo(), imp.getText());\n                 }\n             }\n \n-            mStaticImports.add(imp);\n+            staticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            pkgName \u003d FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(ast);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), pkgName)) {\n                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : imports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                            \"import.duplicate\", full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            imports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    ast.getLastChild().getPreviousSibling());\n            for (FullIdent full : staticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(ast.getLineNo(), ast.getColumnNo(),\n                        \"import.duplicate\", full.getLineNo(), imp.getText());\n                }\n            }\n\n            staticImports.add(imp);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            mPkgName \u003d FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : mImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            \"import.duplicate\", full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling());\n            for (FullIdent full : mStaticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                        \"import.duplicate\", full.getLineNo(), imp.getText());\n                }\n            }\n\n            mStaticImports.add(imp);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java"
      }
    },
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": {
      "type": "Ybodychange",
      "commitMessage": "Removal of explicit boxing.\n",
      "commitDate": "20/12/07 3:36 AM",
      "commitName": "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 12:14 AM",
      "commitNameOld": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,42 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             mPkgName \u003d FullIdent.createFullIdent(\n                     aAST.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             for (FullIdent full : mImports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(),\n-                        aAST.getColumnNo(),\n-                        \"import.duplicate\",\n-                        new Integer(full.getLineNo()),\n-                        imp.getText());\n+                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                            \"import.duplicate\", full.getLineNo(),\n+                            imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     aAST.getLastChild().getPreviousSibling());\n             for (FullIdent full : mStaticImports) {\n                 if (imp.getText().equals(full.getText())) {\n-                    log(aAST.getLineNo(),\n-                        aAST.getColumnNo(),\n-                        \"import.duplicate\",\n-                        new Integer(full.getLineNo()),\n-                        imp.getText());\n+                    log(aAST.getLineNo(), aAST.getColumnNo(),\n+                        \"import.duplicate\", full.getLineNo(), imp.getText());\n                 }\n             }\n \n             mStaticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            mPkgName \u003d FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : mImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                            \"import.duplicate\", full.getLineNo(),\n                            imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling());\n            for (FullIdent full : mStaticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(), aAST.getColumnNo(),\n                        \"import.duplicate\", full.getLineNo(), imp.getText());\n                }\n            }\n\n            mStaticImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": "15/12/07 12:14 AM",
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.72,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,47 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             mPkgName \u003d FullIdent.createFullIdent(\n                     aAST.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n-            final Iterator it \u003d mImports.iterator();\n-            while (it.hasNext()) {\n-                final FullIdent full \u003d (FullIdent) it.next();\n+            for (FullIdent full : mImports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     aAST.getLastChild().getPreviousSibling());\n-            final Iterator it \u003d mStaticImports.iterator();\n-            while (it.hasNext()) {\n-                final FullIdent full \u003d (FullIdent) it.next();\n+            for (FullIdent full : mStaticImports) {\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mStaticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            mPkgName \u003d FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            for (FullIdent full : mImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling());\n            for (FullIdent full : mStaticImports) {\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mStaticImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "66cc059f7129ce961b3dc833c3150b2dbd89590b": {
      "type": "Ybodychange",
      "commitMessage": "Just minor code cleanup\n",
      "commitDate": "07/12/04 2:50 AM",
      "commitName": "66cc059f7129ce961b3dc833c3150b2dbd89590b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/09/04 11:55 AM",
      "commitNameOld": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 70.66,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            mPkgName \u003d\n-                FullIdent.createFullIdent(\n-                    (DetailAST) aAST.getLastChild()\n-                        .getPreviousSibling()).getText();\n+            mPkgName \u003d FullIdent.createFullIdent(\n+                    aAST.getLastChild().getPreviousSibling()).getText();\n         }\n         else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             final Iterator it \u003d mImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n         else {\n             // Check for a duplicate static import\n             final FullIdent imp \u003d\n                 FullIdent.createFullIdent(\n                     aAST.getLastChild().getPreviousSibling());\n             final Iterator it \u003d mStaticImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mStaticImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            mPkgName \u003d FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling()).getText();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling());\n            final Iterator it \u003d mStaticImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mStaticImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,53 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n-            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n+            mPkgName \u003d\n+                FullIdent.createFullIdent(\n+                    (DetailAST) aAST.getLastChild()\n+                        .getPreviousSibling()).getText();\n         }\n-        else {\n+        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n             final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             final Iterator it \u003d mImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n+        else {\n+            // Check for a duplicate static import\n+            final FullIdent imp \u003d\n+                FullIdent.createFullIdent(\n+                    aAST.getLastChild().getPreviousSibling());\n+            final Iterator it \u003d mStaticImports.iterator();\n+            while (it.hasNext()) {\n+                final FullIdent full \u003d (FullIdent) it.next();\n+                if (imp.getText().equals(full.getText())) {\n+                    log(aAST.getLineNo(),\n+                        aAST.getColumnNo(),\n+                        \"import.duplicate\",\n+                        new Integer(full.getLineNo()),\n+                        imp.getText());\n+                }\n+            }\n+\n+            mStaticImports.add(imp);\n+        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            mPkgName \u003d\n                FullIdent.createFullIdent(\n                    (DetailAST) aAST.getLastChild()\n                        .getPreviousSibling()).getText();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.IMPORT) {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n        else {\n            // Check for a duplicate static import\n            final FullIdent imp \u003d\n                FullIdent.createFullIdent(\n                    aAST.getLastChild().getPreviousSibling());\n            final Iterator it \u003d mStaticImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mStaticImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "7bd1126a3b5ea39d73cab69622d50bc834ee29c5": {
      "type": "Ybodychange",
      "commitMessage": "Code cleanup - removed the stupid AbstractImportCheck.\nIt served no purpose but to add to our huge inheritance\nhierarchy.\n\nI was suprised how deep our hierarchy actually is. Is this\nthe sign of to much abstraction. I wonder?\n",
      "commitDate": "23/06/03 5:09 AM",
      "commitName": "7bd1126a3b5ea39d73cab69622d50bc834ee29c5",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "09/06/03 12:48 AM",
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 14.18,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n             mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n         }\n         else {\n-            final FullIdent imp \u003d getImportText(aAST);\n+            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                     imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                     imp.getText());\n             }\n             // Check for a duplicate import\n             final Iterator it \u003d mImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()),\n                         imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d FullIdent.createFullIdentBelow(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "ddb334d9e4443c96fed60ff0a0b9210615846315": {
      "type": "Yfilerename",
      "commitMessage": "Moved the Import checks to a sub-package. That is all\nthe refactoring I have time for over the next few days.\n",
      "commitDate": "03/06/03 7:13 AM",
      "commitName": "ddb334d9e4443c96fed60ff0a0b9210615846315",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/03 6:51 AM",
      "commitNameOld": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d getImportText(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java"
      }
    },
    "768664d6542ae719b014206b36619e4d180eed32": {
      "type": "Ybodychange",
      "commitMessage": "incorporated patch 626058 from Ville Skytte, Output duplicate/redundant import names\n",
      "commitDate": "20/10/02 10:19 PM",
      "commitName": "768664d6542ae719b014206b36619e4d180eed32",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "18/10/02 11:28 PM",
      "commitNameOld": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n             mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n         }\n         else {\n             final FullIdent imp \u003d getImportText(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n+                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n+                    imp.getText());\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n+                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n+                    imp.getText());\n             }\n             // Check for a duplicate import\n             final Iterator it \u003d mImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n-                        new Integer(full.getLineNo()));\n+                        new Integer(full.getLineNo()),\n+                        imp.getText());\n                 }\n             }\n \n             mImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d getImportText(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",\n                    imp.getText());\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",\n                    imp.getText());\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()),\n                        imp.getText());\n                }\n            }\n\n            mImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": "18/10/02 11:28 PM",
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/10/02 4:41 PM",
      "commitNameOld": "63664e0b012593e18c5bb93ba528f27fd93fe0d4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.28,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        if (aAST.getType() \u003d\u003d JavaTokenTypes.PACKAGE_DEF) {\n+        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n             mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n         }\n         else {\n             final FullIdent imp \u003d getImportText(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n             }\n             // Check for a duplicate import\n             final Iterator it \u003d mImports.iterator();\n             while (it.hasNext()) {\n                 final FullIdent full \u003d (FullIdent) it.next();\n                 if (imp.getText().equals(full.getText())) {\n                     log(aAST.getLineNo(),\n                         aAST.getColumnNo(),\n                         \"import.duplicate\",\n                         new Integer(full.getLineNo()));\n                 }\n             }\n \n             mImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d getImportText(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()));\n                }\n            }\n\n            mImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "84c1f8375fa540e7b0313b95af6be6000e3c4c71": {
      "type": "Ybodychange",
      "commitMessage": "Clean up of import checks - removed old code\n",
      "commitDate": "28/09/02 10:19 PM",
      "commitName": "84c1f8375fa540e7b0313b95af6be6000e3c4c71",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "28/09/02 10:01 PM",
      "commitNameOld": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d JavaTokenTypes.PACKAGE_DEF) {\n             final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n             mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n         }\n         else {\n             final FullIdent imp \u003d getImportText(aAST);\n             if (fromPackage(imp.getText(), \"java.lang\")) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n             }\n             else if (fromPackage(imp.getText(), mPkgName)) {\n                 log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n             }\n+            // Check for a duplicate import\n+            final Iterator it \u003d mImports.iterator();\n+            while (it.hasNext()) {\n+                final FullIdent full \u003d (FullIdent) it.next();\n+                if (imp.getText().equals(full.getText())) {\n+                    log(aAST.getLineNo(),\n+                        aAST.getColumnNo(),\n+                        \"import.duplicate\",\n+                        new Integer(full.getLineNo()));\n+                }\n+            }\n+\n+            mImports.add(imp);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d JavaTokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d getImportText(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n            }\n            // Check for a duplicate import\n            final Iterator it \u003d mImports.iterator();\n            while (it.hasNext()) {\n                final FullIdent full \u003d (FullIdent) it.next();\n                if (imp.getText().equals(full.getText())) {\n                    log(aAST.getLineNo(),\n                        aAST.getColumnNo(),\n                        \"import.duplicate\",\n                        new Integer(full.getLineNo()));\n                }\n            }\n\n            mImports.add(imp);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java",
      "extendedDetails": {}
    },
    "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54": {
      "type": "Yintroduced",
      "commitMessage": "Moved across nearly all the unit tests, just the illegal import to go\n",
      "commitDate": "28/09/02 10:01 PM",
      "commitName": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,16 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        if (aAST.getType() \u003d\u003d JavaTokenTypes.PACKAGE_DEF) {\n+            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n+            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n+        }\n+        else {\n+            final FullIdent imp \u003d getImportText(aAST);\n+            if (fromPackage(imp.getText(), \"java.lang\")) {\n+                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n+            }\n+            else if (fromPackage(imp.getText(), mPkgName)) {\n+                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d JavaTokenTypes.PACKAGE_DEF) {\n            final DetailAST nameAST \u003d (DetailAST) aAST.getFirstChild();\n            mPkgName \u003d FullIdent.createFullIdent(nameAST).getText();\n        }\n        else {\n            final FullIdent imp \u003d getImportText(aAST);\n            if (fromPackage(imp.getText(), \"java.lang\")) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\");\n            }\n            else if (fromPackage(imp.getText(), mPkgName)) {\n                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java"
    }
  }
}