{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContents.java",
  "functionName": "hasIntersectionWithComment",
  "functionId": "hasIntersectionWithComment___startLineNo-int__startColNo-int__endLineNo-int__endColNo-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
  "functionStartLine": 260,
  "functionEndLine": 265,
  "numCommitsSeen": 109,
  "timeTaken": 2326,
  "changeHistory": [
    "6e8d1e06728b7defbd734253b3818a33676b62bc",
    "c9346746dc9a27d40eaa453e0afb4b0d1391665d",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "2f9b0f057c489d074967575696a0d53a34fec6b7",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "0989b5c3954e46b156bf5d2344327f650ddafc8d",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "262209477f39964a63103613f3e2c985da083371",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "c4288bb3bca4b5e5871a0243a19b8df9d9fd6124",
    "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee"
  ],
  "changeHistoryShort": {
    "6e8d1e06728b7defbd734253b3818a33676b62bc": "Ybodychange",
    "c9346746dc9a27d40eaa453e0afb4b0d1391665d": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "2f9b0f057c489d074967575696a0d53a34fec6b7": "Ybodychange",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "0989b5c3954e46b156bf5d2344327f650ddafc8d": "Ybodychange",
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "262209477f39964a63103613f3e2c985da083371": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "c4288bb3bca4b5e5871a0243a19b8df9d9fd6124": "Ybodychange",
    "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e8d1e06728b7defbd734253b3818a33676b62bc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3721: enforced no abbreviations in checkstyle",
      "commitDate": "17/02/17 2:04 PM",
      "commitName": "6e8d1e06728b7defbd734253b3818a33676b62bc",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,6 @@\n     public boolean hasIntersectionWithComment(int startLineNo,\n             int startColNo, int endLineNo, int endColNo) {\n-        return hasIntersectionWithCComment(startLineNo, startColNo, endLineNo, endColNo)\n-                || hasIntersectionWithCppComment(startLineNo, startColNo, endLineNo, endColNo);\n+        return hasIntersectionWithBlockComment(startLineNo, startColNo, endLineNo, endColNo)\n+                || hasIntersectionWithSingleLineComment(startLineNo, startColNo, endLineNo,\n+                        endColNo);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo) {\n        return hasIntersectionWithBlockComment(startLineNo, startColNo, endLineNo, endColNo)\n                || hasIntersectionWithSingleLineComment(startLineNo, startColNo, endLineNo,\n                        endColNo);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "c9346746dc9a27d40eaa453e0afb4b0d1391665d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for FileContents\n",
      "commitDate": "27/08/15 10:33 PM",
      "commitName": "c9346746dc9a27d40eaa453e0afb4b0d1391665d",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "26/08/15 9:27 AM",
      "commitNameOld": "e23b8a2ffa778628b4a163ef7ac60291482f64ef",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.55,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,5 @@\n     public boolean hasIntersectionWithComment(int startLineNo,\n             int startColNo, int endLineNo, int endColNo) {\n-        // Check C comments (all comments should be checked)\n-        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d clangComments.values();\n-        for (final List\u003cTextBlock\u003e row : values) {\n-            for (final TextBlock comment : row) {\n-                if (comment.intersects(startLineNo, startColNo, endLineNo,\n-                        endColNo)) {\n-                    return true;\n-                }\n-            }\n-        }\n-\n-        // Check CPP comments (line searching is possible)\n-        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n-             lineNumber++) {\n-            final TextBlock comment \u003d cppComments.get(lineNumber);\n-            if (comment !\u003d null\n-                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n-                            endLineNo, endColNo)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return hasIntersectionWithCComment(startLineNo, startColNo, endLineNo, endColNo)\n+                || hasIntersectionWithCppComment(startLineNo, startColNo, endLineNo, endColNo);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo) {\n        return hasIntersectionWithCComment(startLineNo, startColNo, endLineNo, endColNo)\n                || hasIntersectionWithCppComment(startLineNo, startColNo, endLineNo, endColNo);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public boolean hasIntersectionWithComment(int startLineNo,\n             int startColNo, int endLineNo, int endColNo)\n     {\n         // Check C comments (all comments should be checked)\n         final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d clangComments.values();\n         for (final List\u003cTextBlock\u003e row : values) {\n             for (final TextBlock comment : row) {\n                 if (comment.intersects(startLineNo, startColNo, endLineNo,\n                         endColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n              lineNumber++)\n         {\n             final TextBlock comment \u003d cppComments.get(lineNumber);\n-            if ((comment !\u003d null)\n+            if (comment !\u003d null\n                     \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                             endLineNo, endColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d clangComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(startLineNo, startColNo, endLineNo,\n                        endColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d cppComments.get(lineNumber);\n            if (comment !\u003d null\n                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                            endLineNo, endColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "2f9b0f057c489d074967575696a0d53a34fec6b7": {
      "type": "Ybodychange",
      "commitMessage": "additional fixes for naming after MemberName Check is using Google pattern\n",
      "commitDate": "20/01/15 5:15 PM",
      "commitName": "2f9b0f057c489d074967575696a0d53a34fec6b7",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "19/01/15 6:38 AM",
      "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 1.44,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public boolean hasIntersectionWithComment(int startLineNo,\n             int startColNo, int endLineNo, int endColNo)\n     {\n         // Check C comments (all comments should be checked)\n-        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d cComments.values();\n+        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d clangComments.values();\n         for (final List\u003cTextBlock\u003e row : values) {\n             for (final TextBlock comment : row) {\n                 if (comment.intersects(startLineNo, startColNo, endLineNo,\n                         endColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n              lineNumber++)\n         {\n-            final TextBlock comment \u003d cPlusPlusComments.get(lineNumber);\n+            final TextBlock comment \u003d cppComments.get(lineNumber);\n             if ((comment !\u003d null)\n                     \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                             endLineNo, endColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d clangComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(startLineNo, startColNo, endLineNo,\n                        endColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d cppComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                            endLineNo, endColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": "19/01/15 6:19 AM",
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public boolean hasIntersectionWithComment(int aStartLineNo,\n-            int aStartColNo, int aEndLineNo, int aEndColNo)\n+    public boolean hasIntersectionWithComment(int startLineNo,\n+            int startColNo, int endLineNo, int endColNo)\n     {\n         // Check C comments (all comments should be checked)\n-        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n+        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d cComments.values();\n         for (final List\u003cTextBlock\u003e row : values) {\n             for (final TextBlock comment : row) {\n-                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n-                        aEndColNo))\n+                if (comment.intersects(startLineNo, startColNo, endLineNo,\n+                        endColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n-        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n+        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n              lineNumber++)\n         {\n-            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n+            final TextBlock comment \u003d cPlusPlusComments.get(lineNumber);\n             if ((comment !\u003d null)\n-                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n-                            aEndLineNo, aEndColNo))\n+                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n+                            endLineNo, endColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d cComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(startLineNo, startColNo, endLineNo,\n                        endColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d cPlusPlusComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                            endLineNo, endColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
          "extendedDetails": {
            "oldValue": "[aStartLineNo-int, aStartColNo-int, aEndLineNo-int, aEndColNo-int]",
            "newValue": "[startLineNo-int, startColNo-int, endLineNo-int, endColNo-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public boolean hasIntersectionWithComment(int aStartLineNo,\n-            int aStartColNo, int aEndLineNo, int aEndColNo)\n+    public boolean hasIntersectionWithComment(int startLineNo,\n+            int startColNo, int endLineNo, int endColNo)\n     {\n         // Check C comments (all comments should be checked)\n-        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n+        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d cComments.values();\n         for (final List\u003cTextBlock\u003e row : values) {\n             for (final TextBlock comment : row) {\n-                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n-                        aEndColNo))\n+                if (comment.intersects(startLineNo, startColNo, endLineNo,\n+                        endColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n-        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n+        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n              lineNumber++)\n         {\n-            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n+            final TextBlock comment \u003d cPlusPlusComments.get(lineNumber);\n             if ((comment !\u003d null)\n-                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n-                            aEndLineNo, aEndColNo))\n+                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n+                            endLineNo, endColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public boolean hasIntersectionWithComment(int startLineNo,\n            int startColNo, int endLineNo, int endColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d cComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(startLineNo, startColNo, endLineNo,\n                        endColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d startLineNo; lineNumber \u003c\u003d endLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d cPlusPlusComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(startLineNo, startColNo,\n                            endLineNo, endColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public boolean hasIntersectionWithComment(int aStartLineNo,\n            int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                        aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                            aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java"
      }
    },
    "0989b5c3954e46b156bf5d2344327f650ddafc8d": {
      "type": "Ybodychange",
      "commitMessage": "use the more intuitive Immutable collections. They are a subclass of the original so should not break existing code, except implementations.\n",
      "commitDate": "26/04/09 4:37 AM",
      "commitName": "0989b5c3954e46b156bf5d2344327f650ddafc8d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "23/03/09 3:49 AM",
      "commitNameOld": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 34.03,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public boolean hasIntersectionWithComment(int aStartLineNo,\n             int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n         final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n-        for (List\u003cTextBlock\u003e row : values) {\n-            for (TextBlock comment : row) {\n+        for (final List\u003cTextBlock\u003e row : values) {\n+            for (final TextBlock comment : row) {\n                 if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                         aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n              lineNumber++)\n         {\n             final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n             if ((comment !\u003d null)\n                     \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                             aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int aStartLineNo,\n            int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n        for (final List\u003cTextBlock\u003e row : values) {\n            for (final TextBlock comment : row) {\n                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                        aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                            aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "22705bd0d4d4867f646b8c3aca115d7b3cb9c022": {
      "type": "Ybodychange",
      "commitMessage": "Removal of explicit boxing.\n",
      "commitDate": "20/12/07 3:36 AM",
      "commitName": "22705bd0d4d4867f646b8c3aca115d7b3cb9c022",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 2:28 AM",
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.05,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n     public boolean hasIntersectionWithComment(int aStartLineNo,\n             int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n         final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n         for (List\u003cTextBlock\u003e row : values) {\n             for (TextBlock comment : row) {\n                 if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                         aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n              lineNumber++)\n         {\n-            final TextBlock comment \u003d mCPlusPlusComments\n-                    .get(new Integer(lineNumber));\n+            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n             if ((comment !\u003d null)\n                     \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                             aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int aStartLineNo,\n            int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n        for (List\u003cTextBlock\u003e row : values) {\n            for (TextBlock comment : row) {\n                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                        aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d mCPlusPlusComments.get(lineNumber);\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                            aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/12/07 9:40 PM",
      "commitNameOld": "262209477f39964a63103613f3e2c985da083371",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,30 @@\n     public boolean hasIntersectionWithComment(int aStartLineNo,\n             int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n         final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n-\n-        final Iterator\u003cList\u003cTextBlock\u003e\u003e it \u003d values.iterator();\n-        while (it.hasNext()) {\n-            final List\u003cTextBlock\u003e row \u003d it.next();\n-            final Iterator\u003cTextBlock\u003e rowIterator \u003d row.iterator();\n-            while (rowIterator.hasNext()) {\n-                final TextBlock comment \u003d rowIterator.next();\n+        for (List\u003cTextBlock\u003e row : values) {\n+            for (TextBlock comment : row) {\n                 if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                         aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n              lineNumber++)\n         {\n             final TextBlock comment \u003d mCPlusPlusComments\n                     .get(new Integer(lineNumber));\n             if ((comment !\u003d null)\n                     \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                             aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int aStartLineNo,\n            int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n        for (List\u003cTextBlock\u003e row : values) {\n            for (TextBlock comment : row) {\n                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                        aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d mCPlusPlusComments\n                    .get(new Integer(lineNumber));\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                            aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "262209477f39964a63103613f3e2c985da083371": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 9:40 PM",
      "commitName": "262209477f39964a63103613f3e2c985da083371",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.62,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n-    public boolean hasIntersectionWithComment(\n-            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n+    public boolean hasIntersectionWithComment(int aStartLineNo,\n+            int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n-        final Collection values \u003d mCComments.values();\n+        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n \n-        final Iterator it \u003d values.iterator();\n+        final Iterator\u003cList\u003cTextBlock\u003e\u003e it \u003d values.iterator();\n         while (it.hasNext()) {\n-            final List row \u003d (List) it.next();\n-            final Iterator rowIterator \u003d row.iterator();\n+            final List\u003cTextBlock\u003e row \u003d it.next();\n+            final Iterator\u003cTextBlock\u003e rowIterator \u003d row.iterator();\n             while (rowIterator.hasNext()) {\n-                final TextBlock comment \u003d (TextBlock) rowIterator.next();\n-                if (comment.intersects(\n-                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n+                final TextBlock comment \u003d rowIterator.next();\n+                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n+                        aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n-            lineNumber++)\n+             lineNumber++)\n         {\n-            final TextBlock comment \u003d\n-                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n+            final TextBlock comment \u003d mCPlusPlusComments\n+                    .get(new Integer(lineNumber));\n             if ((comment !\u003d null)\n-                \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n-                                      aEndLineNo, aEndColNo))\n+                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n+                            aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(int aStartLineNo,\n            int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection\u003cList\u003cTextBlock\u003e\u003e values \u003d mCComments.values();\n\n        final Iterator\u003cList\u003cTextBlock\u003e\u003e it \u003d values.iterator();\n        while (it.hasNext()) {\n            final List\u003cTextBlock\u003e row \u003d it.next();\n            final Iterator\u003cTextBlock\u003e rowIterator \u003d row.iterator();\n            while (rowIterator.hasNext()) {\n                final TextBlock comment \u003d rowIterator.next();\n                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,\n                        aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n        {\n            final TextBlock comment \u003d mCPlusPlusComments\n                    .get(new Integer(lineNumber));\n            if ((comment !\u003d null)\n                    \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                            aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "11/05/05 9:48 AM",
      "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 421.44,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     public boolean hasIntersectionWithComment(\n             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n         final Collection values \u003d mCComments.values();\n \n         final Iterator it \u003d values.iterator();\n         while (it.hasNext()) {\n             final List row \u003d (List) it.next();\n             final Iterator rowIterator \u003d row.iterator();\n             while (rowIterator.hasNext()) {\n                 final TextBlock comment \u003d (TextBlock) rowIterator.next();\n                 if (comment.intersects(\n                         aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n         {\n             final TextBlock comment \u003d\n                 (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n-            if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n-                aEndLineNo, aEndColNo))\n+            if ((comment !\u003d null)\n+                \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n+                                      aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(\n            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection values \u003d mCComments.values();\n\n        final Iterator it \u003d values.iterator();\n        while (it.hasNext()) {\n            final List row \u003d (List) it.next();\n            final Iterator rowIterator \u003d row.iterator();\n            while (rowIterator.hasNext()) {\n                final TextBlock comment \u003d (TextBlock) rowIterator.next();\n                if (comment.intersects(\n                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n            lineNumber++)\n        {\n            final TextBlock comment \u003d\n                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n            if ((comment !\u003d null)\n                \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                                      aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/02/04 10:27 PM",
      "commitNameOld": "c4288bb3bca4b5e5871a0243a19b8df9d9fd6124",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 178.3,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public boolean hasIntersectionWithComment(\n             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n-        Collection values \u003d mCComments.values();\n+        final Collection values \u003d mCComments.values();\n \n-        Iterator it \u003d values.iterator();\n+        final Iterator it \u003d values.iterator();\n         while (it.hasNext()) {\n-            List row \u003d (List) it.next();\n-            Iterator rowIterator \u003d row.iterator();\n+            final List row \u003d (List) it.next();\n+            final Iterator rowIterator \u003d row.iterator();\n             while (rowIterator.hasNext()) {\n-                TextBlock comment \u003d (TextBlock) rowIterator.next();\n+                final TextBlock comment \u003d (TextBlock) rowIterator.next();\n                 if (comment.intersects(\n                         aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n         {\n-            TextBlock comment \u003d\n+            final TextBlock comment \u003d\n                 (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n             if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                 aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(\n            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        final Collection values \u003d mCComments.values();\n\n        final Iterator it \u003d values.iterator();\n        while (it.hasNext()) {\n            final List row \u003d (List) it.next();\n            final Iterator rowIterator \u003d row.iterator();\n            while (rowIterator.hasNext()) {\n                final TextBlock comment \u003d (TextBlock) rowIterator.next();\n                if (comment.intersects(\n                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n            lineNumber++)\n        {\n            final TextBlock comment \u003d\n                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n            if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "c4288bb3bca4b5e5871a0243a19b8df9d9fd6124": {
      "type": "Ybodychange",
      "commitMessage": "Moving intersects() method to TextComment interface.Minor javadoc changes in Comment.src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java\n",
      "commitDate": "29/02/04 10:27 PM",
      "commitName": "c4288bb3bca4b5e5871a0243a19b8df9d9fd6124",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "29/02/04 5:43 AM",
      "commitNameOld": "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public boolean hasIntersectionWithComment(\n             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n     {\n         // Check C comments (all comments should be checked)\n         Collection values \u003d mCComments.values();\n \n         Iterator it \u003d values.iterator();\n         while (it.hasNext()) {\n             List row \u003d (List) it.next();\n             Iterator rowIterator \u003d row.iterator();\n             while (rowIterator.hasNext()) {\n-                Comment comment \u003d (Comment) rowIterator.next();\n+                TextBlock comment \u003d (TextBlock) rowIterator.next();\n                 if (comment.intersects(\n                         aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                 {\n                     return true;\n                 }\n             }\n         }\n \n         // Check CPP comments (line searching is possible)\n         for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n             lineNumber++)\n         {\n-            Comment comment \u003d (Comment) mCPlusPlusComments.get(\n-                new Integer(lineNumber));\n+            TextBlock comment \u003d\n+                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n             if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                 aEndLineNo, aEndColNo))\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(\n            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        Collection values \u003d mCComments.values();\n\n        Iterator it \u003d values.iterator();\n        while (it.hasNext()) {\n            List row \u003d (List) it.next();\n            Iterator rowIterator \u003d row.iterator();\n            while (rowIterator.hasNext()) {\n                TextBlock comment \u003d (TextBlock) rowIterator.next();\n                if (comment.intersects(\n                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n            lineNumber++)\n        {\n            TextBlock comment \u003d\n                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));\n            if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java",
      "extendedDetails": {}
    },
    "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee": {
      "type": "Yintroduced",
      "commitMessage": "Ignore comments in GenericIllegalRegexp check,\ncontributed by Daniel Grenner\n",
      "commitDate": "29/02/04 5:43 AM",
      "commitName": "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,34 @@\n+    public boolean hasIntersectionWithComment(\n+            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n+    {\n+        // Check C comments (all comments should be checked)\n+        Collection values \u003d mCComments.values();\n+\n+        Iterator it \u003d values.iterator();\n+        while (it.hasNext()) {\n+            List row \u003d (List) it.next();\n+            Iterator rowIterator \u003d row.iterator();\n+            while (rowIterator.hasNext()) {\n+                Comment comment \u003d (Comment) rowIterator.next();\n+                if (comment.intersects(\n+                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        // Check CPP comments (line searching is possible)\n+        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n+            lineNumber++)\n+        {\n+            Comment comment \u003d (Comment) mCPlusPlusComments.get(\n+                new Integer(lineNumber));\n+            if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n+                aEndLineNo, aEndColNo))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public boolean hasIntersectionWithComment(\n            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)\n    {\n        // Check C comments (all comments should be checked)\n        Collection values \u003d mCComments.values();\n\n        Iterator it \u003d values.iterator();\n        while (it.hasNext()) {\n            List row \u003d (List) it.next();\n            Iterator rowIterator \u003d row.iterator();\n            while (rowIterator.hasNext()) {\n                Comment comment \u003d (Comment) rowIterator.next();\n                if (comment.intersects(\n                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))\n                {\n                    return true;\n                }\n            }\n        }\n\n        // Check CPP comments (line searching is possible)\n        for (int lineNumber \u003d aStartLineNo; lineNumber \u003c\u003d aEndLineNo;\n            lineNumber++)\n        {\n            Comment comment \u003d (Comment) mCPlusPlusComments.get(\n                new Integer(lineNumber));\n            if (comment !\u003d null \u0026\u0026 comment.intersects(aStartLineNo, aStartColNo,\n                aEndLineNo, aEndColNo))\n            {\n                return true;\n            }\n        }\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java"
    }
  }
}