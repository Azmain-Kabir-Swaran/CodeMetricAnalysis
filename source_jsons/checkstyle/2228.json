{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RedundantModifierCheck.java",
  "functionName": "isClassPublic",
  "functionId": "isClassPublic___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
  "functionStartLine": 452,
  "functionEndLine": 471,
  "numCommitsSeen": 90,
  "timeTaken": 1512,
  "changeHistory": [
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab",
    "bad81c81c2be3e67099c512e4e0aada291323566",
    "da6ebe6de41b7a5afc6f6746ff0c2382c2a4be0f"
  ],
  "changeHistoryShort": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": "Ybodychange",
    "bad81c81c2be3e67099c512e4e0aada291323566": "Ymultichange(Yparameterchange,Ybodychange)",
    "da6ebe6de41b7a5afc6f6746ff0c2382c2a4be0f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "10/08/17 1:36 PM",
      "commitNameOld": "91b02ec505055beef266b9b5ec389d4d350d881e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 76.26,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     private static boolean isClassPublic(DetailAST ast) {\n         boolean isAccessibleFromPublic \u003d false;\n         final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n         final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n+        final boolean hasPublicModifier \u003d\n+                modifiersAst.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null;\n \n         if (isMostOuterScope) {\n             isAccessibleFromPublic \u003d hasPublicModifier;\n         }\n         else {\n             final DetailAST parentClassAst \u003d ast.getParent().getParent();\n \n             if (hasPublicModifier || parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF) {\n                 isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n             }\n         }\n \n         return isAccessibleFromPublic;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isClassPublic(DetailAST ast) {\n        boolean isAccessibleFromPublic \u003d false;\n        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean hasPublicModifier \u003d\n                modifiersAst.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null;\n\n        if (isMostOuterScope) {\n            isAccessibleFromPublic \u003d hasPublicModifier;\n        }\n        else {\n            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n\n            if (hasPublicModifier || parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF) {\n                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n            }\n        }\n\n        return isAccessibleFromPublic;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
      "extendedDetails": {}
    },
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce LogicConditionNeedOptimizationCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "24/12/15 1:59 PM",
      "commitName": "6ee4a0f805d528cdee03cfc175502d15b5722dab",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "18/12/15 5:42 AM",
      "commitNameOld": "b2df33a98ae154144af521fa9e302ac73aea8653",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 6.35,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private static boolean isClassPublic(DetailAST ast) {\n         boolean isAccessibleFromPublic \u003d false;\n         final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n         final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n \n         if (isMostOuterScope) {\n             isAccessibleFromPublic \u003d hasPublicModifier;\n         }\n         else {\n             final DetailAST parentClassAst \u003d ast.getParent().getParent();\n \n-            if (parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF || hasPublicModifier) {\n+            if (hasPublicModifier || parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF) {\n                 isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n             }\n         }\n \n         return isAccessibleFromPublic;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isClassPublic(DetailAST ast) {\n        boolean isAccessibleFromPublic \u003d false;\n        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n\n        if (isMostOuterScope) {\n            isAccessibleFromPublic \u003d hasPublicModifier;\n        }\n        else {\n            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n\n            if (hasPublicModifier || parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF) {\n                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n            }\n        }\n\n        return isAccessibleFromPublic;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
      "extendedDetails": {}
    },
    "bad81c81c2be3e67099c512e4e0aada291323566": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1537: Fix RedundantModifier check to recognise inner classes accessible from global scope\n",
      "commitDate": "18/09/15 6:20 AM",
      "commitName": "bad81c81c2be3e67099c512e4e0aada291323566",
      "commitAuthor": "liscju",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #1537: Fix RedundantModifier check to recognise inner classes accessible from global scope\n",
          "commitDate": "18/09/15 6:20 AM",
          "commitName": "bad81c81c2be3e67099c512e4e0aada291323566",
          "commitAuthor": "liscju",
          "commitDateOld": "04/09/15 5:32 AM",
          "commitNameOld": "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 14.03,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,19 @@\n-    private static boolean isClassPublic(DetailAST classDef) {\n-        final DetailAST classModifiers \u003d\n-                classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);\n+    private static boolean isClassPublic(DetailAST ast) {\n+        boolean isAccessibleFromPublic \u003d false;\n+        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n+        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n+\n+        if (isMostOuterScope) {\n+            isAccessibleFromPublic \u003d hasPublicModifier;\n+        }\n+        else {\n+            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n+\n+            if (parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF || hasPublicModifier) {\n+                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n+            }\n+        }\n+\n+        return isAccessibleFromPublic;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static boolean isClassPublic(DetailAST ast) {\n        boolean isAccessibleFromPublic \u003d false;\n        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n\n        if (isMostOuterScope) {\n            isAccessibleFromPublic \u003d hasPublicModifier;\n        }\n        else {\n            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n\n            if (parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF || hasPublicModifier) {\n                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n            }\n        }\n\n        return isAccessibleFromPublic;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
          "extendedDetails": {
            "oldValue": "[classDef-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1537: Fix RedundantModifier check to recognise inner classes accessible from global scope\n",
          "commitDate": "18/09/15 6:20 AM",
          "commitName": "bad81c81c2be3e67099c512e4e0aada291323566",
          "commitAuthor": "liscju",
          "commitDateOld": "04/09/15 5:32 AM",
          "commitNameOld": "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 14.03,
          "commitsBetweenForRepo": 75,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,19 @@\n-    private static boolean isClassPublic(DetailAST classDef) {\n-        final DetailAST classModifiers \u003d\n-                classDef.findFirstToken(TokenTypes.MODIFIERS);\n-        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);\n+    private static boolean isClassPublic(DetailAST ast) {\n+        boolean isAccessibleFromPublic \u003d false;\n+        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n+        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n+\n+        if (isMostOuterScope) {\n+            isAccessibleFromPublic \u003d hasPublicModifier;\n+        }\n+        else {\n+            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n+\n+            if (parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF || hasPublicModifier) {\n+                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n+            }\n+        }\n+\n+        return isAccessibleFromPublic;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static boolean isClassPublic(DetailAST ast) {\n        boolean isAccessibleFromPublic \u003d false;\n        final boolean isMostOuterScope \u003d ast.getParent() \u003d\u003d null;\n        final DetailAST modifiersAst \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean hasPublicModifier \u003d modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);\n\n        if (isMostOuterScope) {\n            isAccessibleFromPublic \u003d hasPublicModifier;\n        }\n        else {\n            final DetailAST parentClassAst \u003d ast.getParent().getParent();\n\n            if (parentClassAst.getType() \u003d\u003d TokenTypes.INTERFACE_DEF || hasPublicModifier) {\n                isAccessibleFromPublic \u003d isClassPublic(parentClassAst);\n            }\n        }\n\n        return isAccessibleFromPublic;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "da6ebe6de41b7a5afc6f6746ff0c2382c2a4be0f": {
      "type": "Yintroduced",
      "commitMessage": "Detect public constructors in non-public classes in RedundantModifier,\nfixes issue #1537\n",
      "commitDate": "28/08/15 10:52 AM",
      "commitName": "da6ebe6de41b7a5afc6f6746ff0c2382c2a4be0f",
      "commitAuthor": "liscju",
      "diff": "@@ -0,0 +1,5 @@\n+    private static boolean isClassPublic(DetailAST classDef) {\n+        final DetailAST classModifiers \u003d\n+                classDef.findFirstToken(TokenTypes.MODIFIERS);\n+        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isClassPublic(DetailAST classDef) {\n        final DetailAST classModifiers \u003d\n                classDef.findFirstToken(TokenTypes.MODIFIERS);\n        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java"
    }
  }
}