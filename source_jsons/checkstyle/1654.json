{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReturnCountCheck.java",
  "functionName": "visitReturn",
  "functionId": "visitReturn___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java",
  "functionStartLine": 292,
  "functionEndLine": 301,
  "numCommitsSeen": 41,
  "timeTaken": 807,
  "changeHistory": [
    "952a97db47130898379893c4da09cbb05c25f019",
    "2483ddc5a4d286891da1922cadf9e66547a7ec48"
  ],
  "changeHistoryShort": {
    "952a97db47130898379893c4da09cbb05c25f019": "Ybodychange",
    "2483ddc5a4d286891da1922cadf9e66547a7ec48": "Yintroduced"
  },
  "changeHistoryDetails": {
    "952a97db47130898379893c4da09cbb05c25f019": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5306: add additional message for void return\n",
      "commitDate": "22/12/17 7:13 AM",
      "commitName": "952a97db47130898379893c4da09cbb05c25f019",
      "commitAuthor": "vaano94",
      "commitDateOld": "30/10/17 6:16 PM",
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 52.58,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n     private void visitReturn(DetailAST ast) {\n         // we can\u0027t identify which max to use for lambdas, so we can only assign\n         // after the first return statement is seen\n         if (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI) {\n-            context.visitLiteralReturn(maxForVoid);\n+            context.visitLiteralReturn(maxForVoid, true);\n         }\n         else {\n-            context.visitLiteralReturn(max);\n+            context.visitLiteralReturn(max, false);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitReturn(DetailAST ast) {\n        // we can\u0027t identify which max to use for lambdas, so we can only assign\n        // after the first return statement is seen\n        if (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI) {\n            context.visitLiteralReturn(maxForVoid, true);\n        }\n        else {\n            context.visitLiteralReturn(max, false);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java",
      "extendedDetails": {}
    },
    "2483ddc5a4d286891da1922cadf9e66547a7ec48": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3143: added maxForVoid option for ReturnCountCheck",
      "commitDate": "27/05/16 6:37 AM",
      "commitName": "2483ddc5a4d286891da1922cadf9e66547a7ec48",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,10 @@\n+    private void visitReturn(DetailAST ast) {\n+        // we can\u0027t identify which max to use for lambdas, so we can only assign\n+        // after the first return statement is seen\n+        if (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI) {\n+            context.visitLiteralReturn(maxForVoid);\n+        }\n+        else {\n+            context.visitLiteralReturn(max);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitReturn(DetailAST ast) {\n        // we can\u0027t identify which max to use for lambdas, so we can only assign\n        // after the first return statement is seen\n        if (ast.getFirstChild().getType() \u003d\u003d TokenTypes.SEMI) {\n            context.visitLiteralReturn(maxForVoid);\n        }\n        else {\n            context.visitLiteralReturn(max);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java"
    }
  }
}