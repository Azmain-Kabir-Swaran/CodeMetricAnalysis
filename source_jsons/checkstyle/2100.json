{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NewlineAtEndOfFileCheck.java",
  "functionName": "processFiltered",
  "functionId": "processFiltered___file-File__fileText-FileText",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
  "functionStartLine": 174,
  "functionEndLine": 181,
  "numCommitsSeen": 133,
  "timeTaken": 3560,
  "changeHistory": [
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
    "82979737c4201b4913ea30b9c9431e71783d1c02",
    "4fd298b00126d60147dce7631c6e0d3e0921f82f",
    "2880edd6554400955fb950bf8127311c436d2a7a",
    "06865630aa3da0b36064b9e00e0e95ff681f234e",
    "5ede09997c283b4c418f0f540848e006be04fa87",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
    "f38d8abd42c3e824635e542e6031b3da1997c02e",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "d5e08f7cb15a9664e17462801e29e20f3c3957fd",
    "5ace399de6c8963584b1fbe08007721433c4bad3",
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5"
  ],
  "changeHistoryShort": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": "Ybodychange",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": "Ybodychange",
    "82979737c4201b4913ea30b9c9431e71783d1c02": "Yparameterchange",
    "4fd298b00126d60147dce7631c6e0d3e0921f82f": "Ybodychange",
    "2880edd6554400955fb950bf8127311c436d2a7a": "Ybodychange",
    "06865630aa3da0b36064b9e00e0e95ff681f234e": "Ybodychange",
    "5ede09997c283b4c418f0f540848e006be04fa87": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": "Ybodychange",
    "f38d8abd42c3e824635e542e6031b3da1997c02e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "d5e08f7cb15a9664e17462801e29e20f3c3957fd": "Ybodychange",
    "5ace399de6c8963584b1fbe08007721433c4bad3": "Ybodychange",
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6000: Fix zero line violations\n",
      "commitDate": "05/09/18 5:54 AM",
      "commitName": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
      "commitAuthor": "Boxuan Li",
      "commitDateOld": "20/04/18 11:55 AM",
      "commitNameOld": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 137.75,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n     protected void processFiltered(File file, FileText fileText) {\n         try {\n             readAndCheckFile(file);\n         }\n         catch (final IOException ignored) {\n-            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n+            log(1, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        try {\n            readAndCheckFile(file);\n        }\n        catch (final IOException ignored) {\n            log(1, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4713: fix all violations from the third part of idea violations\n",
      "commitDate": "20/07/17 10:04 PM",
      "commitName": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "06/07/17 1:22 PM",
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 14.36,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,8 @@\n     protected void processFiltered(File file, FileText fileText) {\n-        // Cannot use lines as the line separators have been removed!\n         try {\n-            final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-            boolean threw \u003d true;\n-            try {\n-                if (!endsWithNewline(randomAccessFile)) {\n-                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n-                }\n-                threw \u003d false;\n-            }\n-            finally {\n-                Closeables.close(randomAccessFile, threw);\n-            }\n+            readAndCheckFile(file);\n         }\n         catch (final IOException ignored) {\n             log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        try {\n            readAndCheckFile(file);\n        }\n        catch (final IOException ignored) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "82979737c4201b4913ea30b9c9431e71783d1c02": {
      "type": "Yparameterchange",
      "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
      "commitDate": "06/07/17 1:22 PM",
      "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthor": "Timur",
      "commitDateOld": "21/04/17 7:14 PM",
      "commitNameOld": "de50d3465849b83d25910590e1f5f39a25fe6e2c",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 75.76,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-    protected void processFiltered(File file, List\u003cString\u003e lines) {\n+    protected void processFiltered(File file, FileText fileText) {\n         // Cannot use lines as the line separators have been removed!\n         try {\n             final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             boolean threw \u003d true;\n             try {\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                 }\n                 threw \u003d false;\n             }\n             finally {\n                 Closeables.close(randomAccessFile, threw);\n             }\n         }\n         catch (final IOException ignored) {\n             log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        // Cannot use lines as the line separators have been removed!\n        try {\n            final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            boolean threw \u003d true;\n            try {\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                }\n                threw \u003d false;\n            }\n            finally {\n                Closeables.close(randomAccessFile, threw);\n            }\n        }\n        catch (final IOException ignored) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {
        "oldValue": "[file-File, lines-List\u003cString\u003e]",
        "newValue": "[file-File, fileText-FileText]"
      }
    },
    "4fd298b00126d60147dce7631c6e0d3e0921f82f": {
      "type": "Ybodychange",
      "commitMessage": "Rename ignored catch parameters. #1555\n\nFixes `UnusedCatchParameter` inspection violations.\n\nDescription:\nReports any catch parameters that are unused in their corresponding blocks. This inspection will not report any catch parameters named \"ignore\" or \"ignored\". Conversely this inspection will warn on any catch parameters named \"ignore\" or \"ignored\" that are actually used.\n",
      "commitDate": "07/08/15 10:17 PM",
      "commitName": "4fd298b00126d60147dce7631c6e0d3e0921f82f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "02/08/15 6:48 PM",
      "commitNameOld": "2880edd6554400955fb950bf8127311c436d2a7a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         // Cannot use lines as the line separators have been removed!\n         try {\n             final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             boolean threw \u003d true;\n             try {\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                 }\n                 threw \u003d false;\n             }\n             finally {\n                 Closeables.close(randomAccessFile, threw);\n             }\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ignored) {\n             log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        // Cannot use lines as the line separators have been removed!\n        try {\n            final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            boolean threw \u003d true;\n            try {\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                }\n                threw \u003d false;\n            }\n            finally {\n                Closeables.close(randomAccessFile, threw);\n            }\n        }\n        catch (final IOException ignored) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "2880edd6554400955fb950bf8127311c436d2a7a": {
      "type": "Ybodychange",
      "commitMessage": "Decrease scope of variables. #1538\n",
      "commitDate": "02/08/15 6:48 PM",
      "commitName": "2880edd6554400955fb950bf8127311c436d2a7a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 10.83,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         // Cannot use lines as the line separators have been removed!\n-        RandomAccessFile randomAccessFile \u003d null;\n         try {\n-            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n+            final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             boolean threw \u003d true;\n             try {\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                 }\n                 threw \u003d false;\n             }\n             finally {\n                 Closeables.close(randomAccessFile, threw);\n             }\n         }\n         catch (final IOException e) {\n             log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        // Cannot use lines as the line separators have been removed!\n        try {\n            final RandomAccessFile randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            boolean threw \u003d true;\n            try {\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                }\n                threw \u003d false;\n            }\n            finally {\n                Closeables.close(randomAccessFile, threw);\n            }\n        }\n        catch (final IOException e) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "06865630aa3da0b36064b9e00e0e95ff681f234e": {
      "type": "Ybodychange",
      "commitMessage": "Use Guava Closeables to manage closing exceptions\n\n\u003eWhile it\u0027s not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that\u0027s being used only for reading, such as a Reader. Unlike with writable resources, there\u0027s no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.\n\n`Reader` and `InputStream` instances are closed using `Closeables.closeQuietly()`, while `RandomAccessFile` is closed with `Closeables.close()` that throws `IOException` and needs to be handled.\n\nFrom Javadoc:\n\u003e```java\npublic static void close(@Nullable\n         Closeable closeable,\n         boolean swallowIOException)\n                  throws IOException\n```\n\u003eCloses a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost).\nIf swallowIOException is true then we never throw IOException but merely log it.\n\n\u003eExample:\n```java\n   public void useStreamNicely() throws IOException {\n     SomeStream stream \u003d new SomeStream(\"foo\");\n     boolean threw \u003d true;\n     try {\n       // ... code which does something with the stream ...\n       threw \u003d false;\n     } finally {\n       // If an exception occurs, rethrow it only if threw\u003d\u003dfalse:\n       Closeables.close(stream, threw);\n     }\n   }\n```\n\nMoreover, `Closeables.close()` and  `Flushables.flush()` are used to flush and close `OutputStream`.\n",
      "commitDate": "26/03/15 12:35 PM",
      "commitName": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,21 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         // Cannot use lines as the line separators have been removed!\n         RandomAccessFile randomAccessFile \u003d null;\n         try {\n             randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-            if (!endsWithNewline(randomAccessFile)) {\n-                log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n+            boolean threw \u003d true;\n+            try {\n+                if (!endsWithNewline(randomAccessFile)) {\n+                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n+                }\n+                threw \u003d false;\n+            }\n+            finally {\n+                Closeables.close(randomAccessFile, threw);\n             }\n         }\n         catch (final IOException e) {\n             log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n-        finally {\n-            Utils.closeQuietly(randomAccessFile);\n-        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        // Cannot use lines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            boolean threw \u003d true;\n            try {\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n                }\n                threw \u003d false;\n            }\n            finally {\n                Closeables.close(randomAccessFile, threw);\n            }\n        }\n        catch (final IOException e) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "5ede09997c283b4c418f0f540848e006be04fa87": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, checks package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "5ede09997c283b4c418f0f540848e006be04fa87",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         // Cannot use lines as the line separators have been removed!\n         RandomAccessFile randomAccessFile \u003d null;\n         try {\n             randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             if (!endsWithNewline(randomAccessFile)) {\n-                log(0, \"noNewlineAtEOF\", file.getPath());\n+                log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n             }\n         }\n         catch (final IOException e) {\n-            log(0, \"unable.open\", file.getPath());\n+            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n         }\n         finally {\n             Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        // Cannot use lines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, MSG_KEY_NO_NEWLINE_EOF, file.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, MSG_KEY_UNABLE_OPEN, file.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n-        // Cannot use aLines as the line separators have been removed!\n+        // Cannot use lines as the line separators have been removed!\n         RandomAccessFile randomAccessFile \u003d null;\n         try {\n-            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             if (!endsWithNewline(randomAccessFile)) {\n-                log(0, \"noNewlineAtEOF\", aFile.getPath());\n+                log(0, \"noNewlineAtEOF\", file.getPath());\n             }\n         }\n         catch (final IOException e) {\n-            log(0, \"unable.open\", aFile.getPath());\n+            log(0, \"unable.open\", file.getPath());\n         }\n         finally {\n             Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        // Cannot use lines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", file.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", file.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[aFile-File, aLines-List\u003cString\u003e]",
            "newValue": "[file-File, lines-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n-        // Cannot use aLines as the line separators have been removed!\n+        // Cannot use lines as the line separators have been removed!\n         RandomAccessFile randomAccessFile \u003d null;\n         try {\n-            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n             if (!endsWithNewline(randomAccessFile)) {\n-                log(0, \"noNewlineAtEOF\", aFile.getPath());\n+                log(0, \"noNewlineAtEOF\", file.getPath());\n             }\n         }\n         catch (final IOException e) {\n-            log(0, \"unable.open\", aFile.getPath());\n+            log(0, \"unable.open\", file.getPath());\n         }\n         finally {\n             Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        // Cannot use lines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", file.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", file.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        // Cannot use aLines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", aFile.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java"
      }
    },
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
      "commitDate": "09/11/08 1:37 AM",
      "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,17 @@\n-    public void process(List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final List\u003cFile\u003e files \u003d filter(aFiles);\n-        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n-        for (final File file : files) {\n-            final String path \u003d file.getPath();\n-            dispatcher.fireFileStarted(path);\n-            RandomAccessFile randomAccessFile \u003d null;\n-            try {\n-                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-                if (!endsWithNewline(randomAccessFile)) {\n-                    log(0, \"noNewlineAtEOF\", path);\n-                }\n+        // Cannot use aLines as the line separators have been removed!\n+        RandomAccessFile randomAccessFile \u003d null;\n+        try {\n+            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            if (!endsWithNewline(randomAccessFile)) {\n+                log(0, \"noNewlineAtEOF\", aFile.getPath());\n             }\n-            catch (final IOException e) {\n-                ///CLOVER:OFF\n-                logIOException(e);\n-                ///CLOVER:ON\n-            }\n-            finally {\n-                Utils.closeQuietly(randomAccessFile);\n-            }\n-            fireErrors(path);\n-            dispatcher.fireFileFinished(path);\n+        }\n+        catch (final IOException e) {\n+            log(0, \"unable.open\", aFile.getPath());\n+        }\n+        finally {\n+            Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        // Cannot use aLines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", aFile.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "process",
            "newValue": "processFiltered"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,17 @@\n-    public void process(List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final List\u003cFile\u003e files \u003d filter(aFiles);\n-        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n-        for (final File file : files) {\n-            final String path \u003d file.getPath();\n-            dispatcher.fireFileStarted(path);\n-            RandomAccessFile randomAccessFile \u003d null;\n-            try {\n-                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-                if (!endsWithNewline(randomAccessFile)) {\n-                    log(0, \"noNewlineAtEOF\", path);\n-                }\n+        // Cannot use aLines as the line separators have been removed!\n+        RandomAccessFile randomAccessFile \u003d null;\n+        try {\n+            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            if (!endsWithNewline(randomAccessFile)) {\n+                log(0, \"noNewlineAtEOF\", aFile.getPath());\n             }\n-            catch (final IOException e) {\n-                ///CLOVER:OFF\n-                logIOException(e);\n-                ///CLOVER:ON\n-            }\n-            finally {\n-                Utils.closeQuietly(randomAccessFile);\n-            }\n-            fireErrors(path);\n-            dispatcher.fireFileFinished(path);\n+        }\n+        catch (final IOException e) {\n+            log(0, \"unable.open\", aFile.getPath());\n+        }\n+        finally {\n+            Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        // Cannot use aLines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", aFile.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[aFiles-List\u003cFile\u003e]",
            "newValue": "[aFile-File, aLines-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,17 @@\n-    public void process(List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final List\u003cFile\u003e files \u003d filter(aFiles);\n-        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n-        for (final File file : files) {\n-            final String path \u003d file.getPath();\n-            dispatcher.fireFileStarted(path);\n-            RandomAccessFile randomAccessFile \u003d null;\n-            try {\n-                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-                if (!endsWithNewline(randomAccessFile)) {\n-                    log(0, \"noNewlineAtEOF\", path);\n-                }\n+        // Cannot use aLines as the line separators have been removed!\n+        RandomAccessFile randomAccessFile \u003d null;\n+        try {\n+            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            if (!endsWithNewline(randomAccessFile)) {\n+                log(0, \"noNewlineAtEOF\", aFile.getPath());\n             }\n-            catch (final IOException e) {\n-                ///CLOVER:OFF\n-                logIOException(e);\n-                ///CLOVER:ON\n-            }\n-            finally {\n-                Utils.closeQuietly(randomAccessFile);\n-            }\n-            fireErrors(path);\n-            dispatcher.fireFileFinished(path);\n+        }\n+        catch (final IOException e) {\n+            log(0, \"unable.open\", aFile.getPath());\n+        }\n+        finally {\n+            Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        // Cannot use aLines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", aFile.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
          "commitDate": "09/11/08 1:37 AM",
          "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/08 11:21 PM",
          "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 3.09,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,17 @@\n-    public void process(List\u003cFile\u003e aFiles)\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n     {\n-        final List\u003cFile\u003e files \u003d filter(aFiles);\n-        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n-        for (final File file : files) {\n-            final String path \u003d file.getPath();\n-            dispatcher.fireFileStarted(path);\n-            RandomAccessFile randomAccessFile \u003d null;\n-            try {\n-                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n-                if (!endsWithNewline(randomAccessFile)) {\n-                    log(0, \"noNewlineAtEOF\", path);\n-                }\n+        // Cannot use aLines as the line separators have been removed!\n+        RandomAccessFile randomAccessFile \u003d null;\n+        try {\n+            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n+            if (!endsWithNewline(randomAccessFile)) {\n+                log(0, \"noNewlineAtEOF\", aFile.getPath());\n             }\n-            catch (final IOException e) {\n-                ///CLOVER:OFF\n-                logIOException(e);\n-                ///CLOVER:ON\n-            }\n-            finally {\n-                Utils.closeQuietly(randomAccessFile);\n-            }\n-            fireErrors(path);\n-            dispatcher.fireFileFinished(path);\n+        }\n+        catch (final IOException e) {\n+            log(0, \"unable.open\", aFile.getPath());\n+        }\n+        finally {\n+            Utils.closeQuietly(randomAccessFile);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        // Cannot use aLines as the line separators have been removed!\n        RandomAccessFile randomAccessFile \u003d null;\n        try {\n            randomAccessFile \u003d new RandomAccessFile(aFile, \"r\");\n            if (!endsWithNewline(randomAccessFile)) {\n                log(0, \"noNewlineAtEOF\", aFile.getPath());\n            }\n        }\n        catch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n        finally {\n            Utils.closeQuietly(randomAccessFile);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "bd8a1a545fd1bc19d5f84c5061c5383796a7c588": {
      "type": "Ybodychange",
      "commitMessage": "New check FileTabCharacter  for ensuring that any files does not contain a tab character. It is now used to ensure the documentation files do not contain tabs.\n\nAlso introduced Utils.closeQuietly to clean up code.\n",
      "commitDate": "05/11/08 11:21 PM",
      "commitName": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/07/08 3:27 PM",
      "commitNameOld": "17754d363645285e49bf4323a1af5762af47a8ea",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 113.37,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,26 @@\n     public void process(List\u003cFile\u003e aFiles)\n     {\n         final List\u003cFile\u003e files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (final File file : files) {\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (final IOException e) {\n                 ///CLOVER:OFF\n                 logIOException(e);\n                 ///CLOVER:ON\n             }\n             finally {\n-                if (randomAccessFile !\u003d null) {\n-                    try {\n-                        randomAccessFile.close();\n-                    }\n-                    catch (final IOException e) {\n-                        ///CLOVER:OFF\n-                        logIOException(e);\n-                        ///CLOVER:ON\n-                    }\n-                }\n+                Utils.closeQuietly(randomAccessFile);\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(List\u003cFile\u003e aFiles)\n    {\n        final List\u003cFile\u003e files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (final File file : files) {\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (final IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                Utils.closeQuietly(randomAccessFile);\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "f38d8abd42c3e824635e542e6031b3da1997c02e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removed a native array in favour of a List\u003cFile\u003e -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
      "commitDate": "19/12/07 10:21 PM",
      "commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removed a native array in favour of a List\u003cFile\u003e -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
          "commitDate": "19/12/07 10:21 PM",
          "commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "15/12/07 2:28 AM",
          "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 4.83,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    public void process(File[] aFiles)\n+    public void process(List\u003cFile\u003e aFiles)\n     {\n-        final File[] files \u003d filter(aFiles);\n+        final List\u003cFile\u003e files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (final File file : files) {\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (final IOException e) {\n                 ///CLOVER:OFF\n                 logIOException(e);\n                 ///CLOVER:ON\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n                     catch (final IOException e) {\n                         ///CLOVER:OFF\n                         logIOException(e);\n                         ///CLOVER:ON\n                     }\n                 }\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void process(List\u003cFile\u003e aFiles)\n    {\n        final List\u003cFile\u003e files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (final File file : files) {\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (final IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (final IOException e) {\n                        ///CLOVER:OFF\n                        logIOException(e);\n                        ///CLOVER:ON\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[aFiles-File[]]",
            "newValue": "[aFiles-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removed a native array in favour of a List\u003cFile\u003e -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
          "commitDate": "19/12/07 10:21 PM",
          "commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "15/12/07 2:28 AM",
          "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 4.83,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    public void process(File[] aFiles)\n+    public void process(List\u003cFile\u003e aFiles)\n     {\n-        final File[] files \u003d filter(aFiles);\n+        final List\u003cFile\u003e files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (final File file : files) {\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (final IOException e) {\n                 ///CLOVER:OFF\n                 logIOException(e);\n                 ///CLOVER:ON\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n                     catch (final IOException e) {\n                         ///CLOVER:OFF\n                         logIOException(e);\n                         ///CLOVER:ON\n                     }\n                 }\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void process(List\u003cFile\u003e aFiles)\n    {\n        final List\u003cFile\u003e files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (final File file : files) {\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (final IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (final IOException e) {\n                        ///CLOVER:OFF\n                        logIOException(e);\n                        ///CLOVER:ON\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.82,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n     public void process(File[] aFiles)\n     {\n         final File[] files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n-        for (int i \u003d 0; i \u003c files.length; i++) {\n-            final File file \u003d files[i];\n+        for (final File file : files) {\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (final IOException e) {\n                 ///CLOVER:OFF\n                 logIOException(e);\n                 ///CLOVER:ON\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n                     catch (final IOException e) {\n                         ///CLOVER:OFF\n                         logIOException(e);\n                         ///CLOVER:ON\n                     }\n                 }\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(File[] aFiles)\n    {\n        final File[] files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (final File file : files) {\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (final IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (final IOException e) {\n                        ///CLOVER:OFF\n                        logIOException(e);\n                        ///CLOVER:ON\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/12/05 4:35 AM",
      "commitNameOld": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 189.63,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n     public void process(File[] aFiles)\n     {\n         final File[] files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (int i \u003d 0; i \u003c files.length; i++) {\n             final File file \u003d files[i];\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n-            catch (IOException e) {\n+            catch (final IOException e) {\n                 ///CLOVER:OFF\n                 logIOException(e);\n                 ///CLOVER:ON\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n-                    catch (IOException e) {\n+                    catch (final IOException e) {\n                         ///CLOVER:OFF\n                         logIOException(e);\n                         ///CLOVER:ON\n                     }\n                 }\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(File[] aFiles)\n    {\n        final File[] files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (int i \u003d 0; i \u003c files.length; i++) {\n            final File file \u003d files[i];\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (final IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (final IOException e) {\n                        ///CLOVER:OFF\n                        logIOException(e);\n                        ///CLOVER:ON\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "d5e08f7cb15a9664e17462801e29e20f3c3957fd": {
      "type": "Ybodychange",
      "commitMessage": "increase test coverage\n",
      "commitDate": "29/05/03 2:17 AM",
      "commitName": "d5e08f7cb15a9664e17462801e29e20f3c3957fd",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "14/05/03 1:11 AM",
      "commitNameOld": "a4d63db21d57ab53aff8a467f89df3867518ab91",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 15.05,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n     public void process(File[] aFiles)\n     {\n         final File[] files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (int i \u003d 0; i \u003c files.length; i++) {\n             final File file \u003d files[i];\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (IOException e) {\n+                ///CLOVER:OFF\n                 logIOException(e);\n+                ///CLOVER:ON\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n                     catch (IOException e) {\n+                        ///CLOVER:OFF\n                         logIOException(e);\n+                        ///CLOVER:ON\n                     }\n                 }\n             }\n             fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(File[] aFiles)\n    {\n        final File[] files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (int i \u003d 0; i \u003c files.length; i++) {\n            final File file \u003d files[i];\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (IOException e) {\n                ///CLOVER:OFF\n                logIOException(e);\n                ///CLOVER:ON\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (IOException e) {\n                        ///CLOVER:OFF\n                        logIOException(e);\n                        ///CLOVER:ON\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "5ace399de6c8963584b1fbe08007721433c4bad3": {
      "type": "Ybodychange",
      "commitMessage": "Another quality patch from Oleg Sukhodolsky to fix TranslationCheck Test\nbug. (bug 720925).\n",
      "commitDate": "24/04/03 1:18 AM",
      "commitName": "5ace399de6c8963584b1fbe08007721433c4bad3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/04/03 5:16 AM",
      "commitNameOld": "59aa156470fbdf19a54382fb2caaca2a95f4dbd5",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 17.84,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,32 @@\n     public void process(File[] aFiles)\n     {\n         final File[] files \u003d filter(aFiles);\n         final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n         for (int i \u003d 0; i \u003c files.length; i++) {\n             final File file \u003d files[i];\n             final String path \u003d file.getPath();\n             dispatcher.fireFileStarted(path);\n             RandomAccessFile randomAccessFile \u003d null;\n             try {\n                 randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                 if (!endsWithNewline(randomAccessFile)) {\n                     log(0, \"noNewlineAtEOF\", path);\n                 }\n             }\n             catch (IOException e) {\n                 logIOException(e);\n             }\n             finally {\n                 if (randomAccessFile !\u003d null) {\n                     try {\n                         randomAccessFile.close();\n                     }\n                     catch (IOException e) {\n                         logIOException(e);\n                     }\n                 }\n             }\n-            final LocalizedMessages messageList \u003d getMessageCollector();\n-            final LocalizedMessage[] messages \u003d messageList.getMessages();\n-            dispatcher.fireErrors(path, messages);\n+            fireErrors(path);\n             dispatcher.fireFileFinished(path);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(File[] aFiles)\n    {\n        final File[] files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (int i \u003d 0; i \u003c files.length; i++) {\n            final File file \u003d files[i];\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (IOException e) {\n                logIOException(e);\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (IOException e) {\n                        logIOException(e);\n                    }\n                }\n            }\n            fireErrors(path);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5": {
      "type": "Yintroduced",
      "commitMessage": "added NewlineAtEndOfFile check, contributed by Christopher Lenz\n",
      "commitDate": "06/04/03 5:16 AM",
      "commitName": "59aa156470fbdf19a54382fb2caaca2a95f4dbd5",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,34 @@\n+    public void process(File[] aFiles)\n+    {\n+        final File[] files \u003d filter(aFiles);\n+        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n+        for (int i \u003d 0; i \u003c files.length; i++) {\n+            final File file \u003d files[i];\n+            final String path \u003d file.getPath();\n+            dispatcher.fireFileStarted(path);\n+            RandomAccessFile randomAccessFile \u003d null;\n+            try {\n+                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n+                if (!endsWithNewline(randomAccessFile)) {\n+                    log(0, \"noNewlineAtEOF\", path);\n+                }\n+            }\n+            catch (IOException e) {\n+                logIOException(e);\n+            }\n+            finally {\n+                if (randomAccessFile !\u003d null) {\n+                    try {\n+                        randomAccessFile.close();\n+                    }\n+                    catch (IOException e) {\n+                        logIOException(e);\n+                    }\n+                }\n+            }\n+            final LocalizedMessages messageList \u003d getMessageCollector();\n+            final LocalizedMessage[] messages \u003d messageList.getMessages();\n+            dispatcher.fireErrors(path, messages);\n+            dispatcher.fireFileFinished(path);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void process(File[] aFiles)\n    {\n        final File[] files \u003d filter(aFiles);\n        final MessageDispatcher dispatcher \u003d getMessageDispatcher();\n        for (int i \u003d 0; i \u003c files.length; i++) {\n            final File file \u003d files[i];\n            final String path \u003d file.getPath();\n            dispatcher.fireFileStarted(path);\n            RandomAccessFile randomAccessFile \u003d null;\n            try {\n                randomAccessFile \u003d new RandomAccessFile(file, \"r\");\n                if (!endsWithNewline(randomAccessFile)) {\n                    log(0, \"noNewlineAtEOF\", path);\n                }\n            }\n            catch (IOException e) {\n                logIOException(e);\n            }\n            finally {\n                if (randomAccessFile !\u003d null) {\n                    try {\n                        randomAccessFile.close();\n                    }\n                    catch (IOException e) {\n                        logIOException(e);\n                    }\n                }\n            }\n            final LocalizedMessages messageList \u003d getMessageCollector();\n            final LocalizedMessage[] messages \u003d messageList.getMessages();\n            dispatcher.fireErrors(path, messages);\n            dispatcher.fireFileFinished(path);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java"
    }
  }
}