{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IllegalThrowsCheck.java",
  "functionName": "isIgnorableMethod",
  "functionId": "isIgnorableMethod___methodDef-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
  "functionStartLine": 164,
  "functionEndLine": 169,
  "numCommitsSeen": 41,
  "timeTaken": 1148,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "351d79582d7a6cea56af9d61f45973d3cf73a484",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "943e07af07c27cda9b6d7298863484ef1e28a3ad"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "351d79582d7a6cea56af9d61f45973d3cf73a484": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "943e07af07c27cda9b6d7298863484ef1e28a3ad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n     private boolean isIgnorableMethod(DetailAST methodDef) {\n         return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n             || ignoreOverriddenMethods\n-               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n-                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n+               \u0026\u0026 (AnnotationUtil.containsAnnotation(methodDef, \"Override\")\n+                  || AnnotationUtil.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnorableMethod(DetailAST methodDef) {\n        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n            || ignoreOverriddenMethods\n               \u0026\u0026 (AnnotationUtil.containsAnnotation(methodDef, \"Override\")\n                  || AnnotationUtil.containsAnnotation(methodDef, \"java.lang.Override\"));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
      "extendedDetails": {}
    },
    "351d79582d7a6cea56af9d61f45973d3cf73a484": {
      "type": "Ybodychange",
      "commitMessage": "Fixed typo in \u0027ignoreOverriden\u0027 property of IllegalThrowsCheck, issue #623\n",
      "commitDate": "09/02/15 10:20 AM",
      "commitName": "351d79582d7a6cea56af9d61f45973d3cf73a484",
      "commitAuthor": "alexkravin",
      "commitDateOld": "08/02/15 3:48 PM",
      "commitNameOld": "dfc803a1cc442bafeb5aa375f0d9f0a31d655ff2",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n     private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n         return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || ignoreOverridenMethods\n+            || ignoreOverriddenMethods\n                \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                   || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnorableMethod(DetailAST methodDef)\n    {\n        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n            || ignoreOverriddenMethods\n               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "29/12/14 2:43 PM",
          "commitNameOld": "943e07af07c27cda9b6d7298863484ef1e28a3ad",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 20.65,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,7 @@\n-    private boolean isIgnorableMethod(DetailAST aMethodDef)\n+    private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n-        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || mIgnoreOverridenMethods\n-               \u0026\u0026 (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")\n-                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));\n+        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n+            || ignoreOverridenMethods\n+               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n+                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isIgnorableMethod(DetailAST methodDef)\n    {\n        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n            || ignoreOverridenMethods\n               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
          "extendedDetails": {
            "oldValue": "[aMethodDef-DetailAST]",
            "newValue": "[methodDef-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "29/12/14 2:43 PM",
          "commitNameOld": "943e07af07c27cda9b6d7298863484ef1e28a3ad",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 20.65,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,7 @@\n-    private boolean isIgnorableMethod(DetailAST aMethodDef)\n+    private boolean isIgnorableMethod(DetailAST methodDef)\n     {\n-        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())\n-            || mIgnoreOverridenMethods\n-               \u0026\u0026 (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")\n-                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));\n+        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n+            || ignoreOverridenMethods\n+               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n+                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isIgnorableMethod(DetailAST methodDef)\n    {\n        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())\n            || ignoreOverridenMethods\n               \u0026\u0026 (AnnotationUtility.containsAnnotation(methodDef, \"Override\")\n                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "943e07af07c27cda9b6d7298863484ef1e28a3ad": {
      "type": "Yintroduced",
      "commitMessage": "Added option to Illegal Throws Check due to twitter custom checks, issue #430\n",
      "commitDate": "29/12/14 2:43 PM",
      "commitName": "943e07af07c27cda9b6d7298863484ef1e28a3ad",
      "commitAuthor": "alexkravin",
      "diff": "@@ -0,0 +1,7 @@\n+    private boolean isIgnorableMethod(DetailAST aMethodDef)\n+    {\n+        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())\n+            || mIgnoreOverridenMethods\n+               \u0026\u0026 (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")\n+                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnorableMethod(DetailAST aMethodDef)\n    {\n        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())\n            || mIgnoreOverridenMethods\n               \u0026\u0026 (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")\n                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java"
    }
  }
}