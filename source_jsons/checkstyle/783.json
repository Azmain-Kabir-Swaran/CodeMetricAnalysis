{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckstyleAntTask.java",
  "functionName": "getListeners",
  "functionId": "getListeners",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
  "functionStartLine": 470,
  "functionEndLine": 495,
  "numCommitsSeen": 226,
  "timeTaken": 4358,
  "changeHistory": [
    "dc88a9954baf88df6543cf73baabed710f882363",
    "70a6e2e6d34fa5a404e88e45cd62a20a06e19556",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
    "a29f01a95b9dee1e64ec7ed91b4d0876eb82c0bf",
    "3ef918920c58c550169ccef3cfe1706aede11a6e",
    "f7f377f5065c11d31b29fb8df19a14220ffb8500",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
    "500bf308fac4adc61bd3087a664779c8622efb3b",
    "716292c2b86196c2c551b100c7853fc19422cbf8",
    "e36ae750f6378b9a3cd8e5171c6e6b710bf10959",
    "ca3ffb73abc810385a4ce8fe685ad31c9d172bff",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "dd477210aefeabb265e105a9fe8120c8310605e8",
    "f2b01a44a216e88957eb6cb22e4b0e39429a6c84",
    "add2bdfb27494bff5fa9c305d9782f57c6170b18",
    "fca8c918043974fcf6cc59e5d4161ada0b7c4c76",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083"
  ],
  "changeHistoryShort": {
    "dc88a9954baf88df6543cf73baabed710f882363": "Ybodychange",
    "70a6e2e6d34fa5a404e88e45cd62a20a06e19556": "Ybodychange",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": "Ybodychange",
    "a29f01a95b9dee1e64ec7ed91b4d0876eb82c0bf": "Ybodychange",
    "3ef918920c58c550169ccef3cfe1706aede11a6e": "Ymultichange(Yexceptionschange,Ybodychange)",
    "f7f377f5065c11d31b29fb8df19a14220ffb8500": "Yexceptionschange",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": "Ybodychange",
    "500bf308fac4adc61bd3087a664779c8622efb3b": "Yfilerename",
    "716292c2b86196c2c551b100c7853fc19422cbf8": "Ymodifierchange",
    "e36ae750f6378b9a3cd8e5171c6e6b710bf10959": "Ybodychange",
    "ca3ffb73abc810385a4ce8fe685ad31c9d172bff": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ybodychange",
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "dd477210aefeabb265e105a9fe8120c8310605e8": "Ybodychange",
    "f2b01a44a216e88957eb6cb22e4b0e39429a6c84": "Ybodychange",
    "add2bdfb27494bff5fa9c305d9782f57c6170b18": "Ybodychange",
    "fca8c918043974fcf6cc59e5d4161ada0b7c4c76": "Ybodychange",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dc88a9954baf88df6543cf73baabed710f882363": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4709: fix avoid boolean parameters for public methods\n",
      "commitDate": "09/08/17 4:54 AM",
      "commitName": "dc88a9954baf88df6543cf73baabed710f882363",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "23/07/17 6:19 PM",
      "commitNameOld": "4c10bc55b4aea0f7e3b95b06d820eedb7c6a6fb2",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 16.44,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         try {\n             if (formatters.isEmpty()) {\n                 final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                 final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n+                listeners[0] \u003d new DefaultLogger(debug, AutomaticBean.OutputStreamOptions.CLOSE,\n+                        err, AutomaticBean.OutputStreamOptions.CLOSE);\n             }\n             else {\n                 for (int i \u003d 0; i \u003c formatterCount; i++) {\n                     final Formatter formatter \u003d formatters.get(i);\n                     listeners[i] \u003d formatter.createListener(this);\n                 }\n             }\n         }\n         catch (IOException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                     + \"formatters {%s}.\", formatters), ex);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, AutomaticBean.OutputStreamOptions.CLOSE,\n                        err, AutomaticBean.OutputStreamOptions.CLOSE);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), ex);\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "70a6e2e6d34fa5a404e88e45cd62a20a06e19556": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2666: Print name of the Check after printing violation message\n",
      "commitDate": "25/12/15 12:20 PM",
      "commitName": "70a6e2e6d34fa5a404e88e45cd62a20a06e19556",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "23/12/15 12:51 PM",
      "commitNameOld": "2864c10cd45d23b91717299954aaaf41d36a6cb0",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         try {\n             if (formatters.isEmpty()) {\n                 final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                 final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-                listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n+                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n             }\n             else {\n                 for (int i \u003d 0; i \u003c formatterCount; i++) {\n                     final Formatter formatter \u003d formatters.get(i);\n                     listeners[i] \u003d formatter.createListener(this);\n                 }\n             }\n         }\n         catch (IOException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                     + \"formatters {%s}.\", formatters), ex);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), ex);\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": "03/12/15 3:16 PM",
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "24/11/15 8:16 PM",
      "commitNameOld": "2e243db3fbdf7b737f78ed7cef0b9bd94f351d25",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 8.79,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         try {\n             if (formatters.isEmpty()) {\n                 final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                 final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                 listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n             }\n             else {\n                 for (int i \u003d 0; i \u003c formatterCount; i++) {\n                     final Formatter formatter \u003d formatters.get(i);\n                     listeners[i] \u003d formatter.createListener(this);\n                 }\n             }\n         }\n-        catch (IOException e) {\n+        catch (IOException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n-                    + \"formatters {%s}.\", formatters), e);\n+                    + \"formatters {%s}.\", formatters), ex);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), ex);\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "be3e035ce39a610881cd2c1bfdce3eef101c2e3c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1217: fixes for violations from \u0027forbiddenapis\u0027 verification tool\n",
      "commitDate": "13/10/15 4:37 PM",
      "commitName": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "06/10/15 5:56 PM",
      "commitNameOld": "ca7f7f855630cbc816e47637ef36ae433d0e745f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         try {\n             if (formatters.isEmpty()) {\n                 final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                 final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                 listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n             }\n             else {\n                 for (int i \u003d 0; i \u003c formatterCount; i++) {\n                     final Formatter formatter \u003d formatters.get(i);\n                     listeners[i] \u003d formatter.createListener(this);\n                 }\n             }\n         }\n         catch (IOException e) {\n-            throw new BuildException(String.format(\"Unable to create listeners: \"\n+            throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                     + \"formatters {%s}.\", formatters), e);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException e) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), e);\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "a29f01a95b9dee1e64ec7ed91b4d0876eb82c0bf": {
      "type": "Ybodychange",
      "commitMessage": "Issue #67: Added support of logging severity for all audit events\n",
      "commitDate": "10/09/15 2:57 AM",
      "commitName": "a29f01a95b9dee1e64ec7ed91b4d0876eb82c0bf",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "31/08/15 9:06 PM",
      "commitNameOld": "de2c3f153e77e6b3aadc039a7dfb36ecedc9f872",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 9.24,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         try {\n             if (formatters.isEmpty()) {\n                 final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                 final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n+                listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n             }\n             else {\n                 for (int i \u003d 0; i \u003c formatterCount; i++) {\n                     final Formatter formatter \u003d formatters.get(i);\n                     listeners[i] \u003d formatter.createListener(this);\n                 }\n             }\n         }\n         catch (IOException e) {\n             throw new BuildException(String.format(\"Unable to create listeners: \"\n                     + \"formatters {%s}.\", formatters), e);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException e) {\n            throw new BuildException(String.format(\"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), e);\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "3ef918920c58c550169ccef3cfe1706aede11a6e": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
      "commitDate": "30/08/15 10:04 PM",
      "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
          "commitDate": "30/08/15 10:04 PM",
          "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "30/08/15 6:53 AM",
          "commitNameOld": "bf4a25317356219807eabad0e075934a287ed27e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-    private AuditListener[] getListeners() throws IOException {\n+    private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n-        if (formatters.isEmpty()) {\n-            final OutputStream debug \u003d new LogOutputStream(this,\n-                    Project.MSG_DEBUG);\n-            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n-        }\n-        else {\n-            for (int i \u003d 0; i \u003c formatterCount; i++) {\n-                final Formatter formatter \u003d formatters.get(i);\n-                listeners[i] \u003d formatter.createListener(this);\n+        try {\n+            if (formatters.isEmpty()) {\n+                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n+                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n+                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n             }\n+            else {\n+                for (int i \u003d 0; i \u003c formatterCount; i++) {\n+                    final Formatter formatter \u003d formatters.get(i);\n+                    listeners[i] \u003d formatter.createListener(this);\n+                }\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new BuildException(String.format(\"Unable to create listeners: \"\n+                    + \"formatters {%s}.\", formatters), e);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException e) {\n            throw new BuildException(String.format(\"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), e);\n        }\n        return listeners;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
          "commitDate": "30/08/15 10:04 PM",
          "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "30/08/15 6:53 AM",
          "commitNameOld": "bf4a25317356219807eabad0e075934a287ed27e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-    private AuditListener[] getListeners() throws IOException {\n+    private AuditListener[] getListeners() {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n-        if (formatters.isEmpty()) {\n-            final OutputStream debug \u003d new LogOutputStream(this,\n-                    Project.MSG_DEBUG);\n-            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n-        }\n-        else {\n-            for (int i \u003d 0; i \u003c formatterCount; i++) {\n-                final Formatter formatter \u003d formatters.get(i);\n-                listeners[i] \u003d formatter.createListener(this);\n+        try {\n+            if (formatters.isEmpty()) {\n+                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n+                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n+                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n             }\n+            else {\n+                for (int i \u003d 0; i \u003c formatterCount; i++) {\n+                    final Formatter formatter \u003d formatters.get(i);\n+                    listeners[i] \u003d formatter.createListener(this);\n+                }\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new BuildException(String.format(\"Unable to create listeners: \"\n+                    + \"formatters {%s}.\", formatters), e);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AuditListener[] getListeners() {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        try {\n            if (formatters.isEmpty()) {\n                final OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n                final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n                listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n            }\n            else {\n                for (int i \u003d 0; i \u003c formatterCount; i++) {\n                    final Formatter formatter \u003d formatters.get(i);\n                    listeners[i] \u003d formatter.createListener(this);\n                }\n            }\n        }\n        catch (IOException e) {\n            throw new BuildException(String.format(\"Unable to create listeners: \"\n                    + \"formatters {%s}.\", formatters), e);\n        }\n        return listeners;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
          "extendedDetails": {}
        }
      ]
    },
    "f7f377f5065c11d31b29fb8df19a14220ffb8500": {
      "type": "Yexceptionschange",
      "commitMessage": "Remove redundant throws declarations. #1555\n\nFixes `RedundantThrows` inspection violations.\n\nDescription:\n\u003eThis inspection reports exceptions that are declared in a method\u0027s signature but never thrown by the method itself or its implementations/derivatives.\n",
      "commitDate": "08/08/15 7:28 PM",
      "commitName": "f7f377f5065c11d31b29fb8df19a14220ffb8500",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 9:38 PM",
      "commitNameOld": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n-    private AuditListener[] getListeners() throws ClassNotFoundException,\n-            InstantiationException, IllegalAccessException, IOException {\n+    private AuditListener[] getListeners() throws IOException {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter formatter \u003d formatters.get(i);\n                 listeners[i] \u003d formatter.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() throws IOException {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter formatter \u003d formatters.get(i);\n                listeners[i] \u003d formatter.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {
        "oldValue": "[ClassNotFoundException, InstantiationException, IllegalAccessException, IOException]",
        "newValue": "[IOException]"
      }
    },
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with \u0027standard\u0027 names of unexpected types. #1555\n\nFixes `StandardVariableNames` inspection violations.\n\nDescription:\n\u003eReports on any variables with \u0027standard\u0027 names which are of unexpected types. Such names may be confusing. Standard names and types are as follows:\n* i, j, k, m, n - int\n* f - float\n* d - double\n* b - byte\n* c, ch - char\n* l - long\n* s, str - String\n",
      "commitDate": "07/08/15 9:38 PM",
      "commitName": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 9:18 PM",
      "commitNameOld": "546f336e25b26d072f96e2cda139b885858ed5b0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n-                final Formatter f \u003d formatters.get(i);\n-                listeners[i] \u003d f.createListener(this);\n+                final Formatter formatter \u003d formatters.get(i);\n+                listeners[i] \u003d formatter.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter formatter \u003d formatters.get(i);\n                listeners[i] \u003d formatter.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "500bf308fac4adc61bd3087a664779c8622efb3b": {
      "type": "Yfilerename",
      "commitMessage": "Rename CheckStyleTask to CheckstyleAntTask. #1108\n",
      "commitDate": "07/06/15 10:38 AM",
      "commitName": "500bf308fac4adc61bd3087a664779c8622efb3b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/06/15 8:42 AM",
      "commitNameOld": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d formatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java"
      }
    },
    "716292c2b86196c2c551b100c7853fc19422cbf8": {
      "type": "Ymodifierchange",
      "commitMessage": "Fix ThrowsCount check violations in Checkstyle code. #945\n",
      "commitDate": "28/05/15 2:18 PM",
      "commitName": "716292c2b86196c2c551b100c7853fc19422cbf8",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 11.4,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n-    protected AuditListener[] getListeners() throws ClassNotFoundException,\n+    private AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d formatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d formatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[private]"
      }
    },
    "e36ae750f6378b9a3cd8e5171c6e6b710bf10959": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Added support of logging severity for all audit events, issue #67\"\n\nThis reverts commit ca3ffb73abc810385a4ce8fe685ad31c9d172bff.\n",
      "commitDate": "17/03/15 10:15 PM",
      "commitName": "e36ae750f6378b9a3cd8e5171c6e6b710bf10959",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 2.33,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     protected AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-            listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n+            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d formatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d formatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "ca3ffb73abc810385a4ce8fe685ad31c9d172bff": {
      "type": "Ybodychange",
      "commitMessage": "Added support of logging severity for all audit events, issue #67\n",
      "commitDate": "14/03/15 11:32 PM",
      "commitName": "ca3ffb73abc810385a4ce8fe685ad31c9d172bff",
      "commitAuthor": "alexkravin",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 4.37,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     protected AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n-            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n+            listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d formatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d formatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "19/01/15 6:38 AM",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 320.89,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     protected AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException\n     {\n-        final int formatterCount \u003d Math.max(1, mFormatters.size());\n+        final int formatterCount \u003d Math.max(1, formatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n-        if (mFormatters.isEmpty()) {\n+        if (formatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n-                final Formatter f \u003d mFormatters.get(i);\n+                final Formatter f \u003d formatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, formatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (formatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d formatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (mFormatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ybodychange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "05/12/13 9:12 AM",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "06/10/13 11:31 PM",
      "commitNameOld": "07939ec7261d7e9e7c8d1492090d6d19d5f98887",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     protected AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, mFormatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n-        if (mFormatters.size() \u003d\u003d 0) {\n+        if (mFormatters.isEmpty()) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d mFormatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (mFormatters.isEmpty()) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f1afaf83f39b83cc3bd07a2388448b262652a76b": {
      "type": "Ybodychange",
      "commitMessage": "Finish of adding generics.\n",
      "commitDate": "15/12/07 12:14 AM",
      "commitName": "f1afaf83f39b83cc3bd07a2388448b262652a76b",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/07 8:04 PM",
      "commitNameOld": "02da493e64154d6bbac09a64d67a025f0e72cad1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 194.22,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     protected AuditListener[] getListeners() throws ClassNotFoundException,\n             InstantiationException, IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, mFormatters.size());\n \n         final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n \n         // formatters\n         if (mFormatters.size() \u003d\u003d 0) {\n             final OutputStream debug \u003d new LogOutputStream(this,\n                     Project.MSG_DEBUG);\n             final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n-                final Formatter f \u003d (Formatter) mFormatters.get(i);\n+                final Formatter f \u003d mFormatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners() throws ClassNotFoundException,\n            InstantiationException, IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[formatterCount];\n\n        // formatters\n        if (mFormatters.size() \u003d\u003d 0) {\n            final OutputStream debug \u003d new LogOutputStream(this,\n                    Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/07/04 4:53 AM",
      "commitNameOld": "09dd78602f86ca6c996d1a79672c7614c5e42b96",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n     protected AuditListener[] getListeners()\n         throws ClassNotFoundException, InstantiationException,\n         IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, mFormatters.size());\n \n         final AuditListener[] listeners \u003d\n             new AuditListener[formatterCount];\n \n         // formatters\n         if (mFormatters.size() \u003d\u003d 0) {\n-            OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n-            OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n+            final OutputStream debug \u003d\n+                new LogOutputStream(this, Project.MSG_DEBUG);\n+            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d (Formatter) mFormatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d\n            new AuditListener[formatterCount];\n\n        // formatters\n        if (mFormatters.size() \u003d\u003d 0) {\n            final OutputStream debug \u003d\n                new LogOutputStream(this, Project.MSG_DEBUG);\n            final OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d (Formatter) mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "dd477210aefeabb265e105a9fe8120c8310605e8": {
      "type": "Ybodychange",
      "commitMessage": "Custom listeners can be incorported as config modules,\nnot command line arguments and ant task elements.\n",
      "commitDate": "18/07/03 4:31 AM",
      "commitName": "dd477210aefeabb265e105a9fe8120c8310605e8",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "14/07/03 5:31 AM",
      "commitNameOld": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 3.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,23 @@\n     protected AuditListener[] getListeners()\n         throws ClassNotFoundException, InstantiationException,\n         IllegalAccessException, IOException\n     {\n         final int formatterCount \u003d Math.max(1, mFormatters.size());\n-        final int listenerCount \u003d mCustomListeners.size();\n \n         final AuditListener[] listeners \u003d\n-            new AuditListener[formatterCount + listenerCount];\n+            new AuditListener[formatterCount];\n \n         // formatters\n         if (mFormatters.size() \u003d\u003d 0) {\n             OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n             OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n         }\n         else {\n             for (int i \u003d 0; i \u003c formatterCount; i++) {\n                 final Formatter f \u003d (Formatter) mFormatters.get(i);\n                 listeners[i] \u003d f.createListener(this);\n             }\n         }\n-        //custom listeners\n-        for (int i \u003d 0; i \u003c listenerCount; i++) {\n-            final Listener listener \u003d (Listener) mCustomListeners.get(i);\n-            listeners[formatterCount + i] \u003d createCustomListener(listener);\n-        }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d\n            new AuditListener[formatterCount];\n\n        // formatters\n        if (mFormatters.size() \u003d\u003d 0) {\n            OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n            OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d (Formatter) mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f2b01a44a216e88957eb6cb22e4b0e39429a6c84": {
      "type": "Ybodychange",
      "commitMessage": "Added custom listener feature\n",
      "commitDate": "27/05/03 10:33 AM",
      "commitName": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "26/05/03 2:52 PM",
      "commitNameOld": "7dd1ab24d1a75687f426cb43a6e70d18d435b0a7",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,29 @@\n     protected AuditListener[] getListeners()\n         throws ClassNotFoundException, InstantiationException,\n         IllegalAccessException, IOException\n     {\n-        final int listenerCount \u003d Math.max(1, mFormatters.size());\n+        final int formatterCount \u003d Math.max(1, mFormatters.size());\n+        final int listenerCount \u003d mCustomListeners.size();\n \n-        final AuditListener[] listeners \u003d new AuditListener[listenerCount];\n+        final AuditListener[] listeners \u003d\n+            new AuditListener[formatterCount + listenerCount];\n \n+        // formatters\n         if (mFormatters.size() \u003d\u003d 0) {\n             OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n             OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n             listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n-            return listeners;\n         }\n-\n-        for (int i \u003d 0; i \u003c listeners.length; i++) {\n-            final Formatter f \u003d (Formatter) mFormatters.get(i);\n-            listeners[i] \u003d f.createListener(this);\n+        else {\n+            for (int i \u003d 0; i \u003c formatterCount; i++) {\n+                final Formatter f \u003d (Formatter) mFormatters.get(i);\n+                listeners[i] \u003d f.createListener(this);\n+            }\n+        }\n+        //custom listeners\n+        for (int i \u003d 0; i \u003c listenerCount; i++) {\n+            final Listener listener \u003d (Listener) mCustomListeners.get(i);\n+            listeners[formatterCount + i] \u003d createCustomListener(listener);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        final int formatterCount \u003d Math.max(1, mFormatters.size());\n        final int listenerCount \u003d mCustomListeners.size();\n\n        final AuditListener[] listeners \u003d\n            new AuditListener[formatterCount + listenerCount];\n\n        // formatters\n        if (mFormatters.size() \u003d\u003d 0) {\n            OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n            OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n        }\n        else {\n            for (int i \u003d 0; i \u003c formatterCount; i++) {\n                final Formatter f \u003d (Formatter) mFormatters.get(i);\n                listeners[i] \u003d f.createListener(this);\n            }\n        }\n        //custom listeners\n        for (int i \u003d 0; i \u003c listenerCount; i++) {\n            final Listener listener \u003d (Listener) mCustomListeners.get(i);\n            listeners[formatterCount + i] \u003d createCustomListener(listener);\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "add2bdfb27494bff5fa9c305d9782f57c6170b18": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 561616 (ant task should log errors, not infos)\n\nThis required a redesign of the AuditListener interface, the get/setOutputStream methoeds have been removed, as there might be listeners that have no or more than one OutputStream.\n\nThe DefaultLogger now differentiates between info messages (\"started checking file ...\", etc.) and error messages (style errors found by checkstyle) by writing the messages to two different OutputStreams.\n",
      "commitDate": "02/07/02 1:08 PM",
      "commitName": "add2bdfb27494bff5fa9c305d9782f57c6170b18",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "02/07/02 4:51 AM",
      "commitNameOld": "b3133035a4fa0e086dfb0dfbefbc7f1540521bbc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n     protected AuditListener[] getListeners()\n         throws ClassNotFoundException, InstantiationException,\n         IllegalAccessException, IOException\n     {\n+        final int listenerCount \u003d Math.max(1, mFormatters.size());\n+\n+        final AuditListener[] listeners \u003d new AuditListener[listenerCount];\n+\n         if (mFormatters.size() \u003d\u003d 0) {\n-            final Formatter f \u003d new Formatter();\n-            final FormatterType type \u003d new FormatterType();\n-            type.setValue(E_PLAIN);\n-            f.setType(type);\n-            mFormatters.add(f);\n+            OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n+            OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n+            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n+            return listeners;\n         }\n \n-        final AuditListener[] listeners \u003d new AuditListener[mFormatters.size()];\n         for (int i \u003d 0; i \u003c listeners.length; i++) {\n             final Formatter f \u003d (Formatter) mFormatters.get(i);\n             listeners[i] \u003d f.createListener(this);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        final int listenerCount \u003d Math.max(1, mFormatters.size());\n\n        final AuditListener[] listeners \u003d new AuditListener[listenerCount];\n\n        if (mFormatters.size() \u003d\u003d 0) {\n            OutputStream debug \u003d new LogOutputStream(this, Project.MSG_DEBUG);\n            OutputStream err \u003d new LogOutputStream(this, Project.MSG_ERR);\n            listeners[0] \u003d new DefaultLogger(debug, true, err, true);\n            return listeners;\n        }\n\n        for (int i \u003d 0; i \u003c listeners.length; i++) {\n            final Formatter f \u003d (Formatter) mFormatters.get(i);\n            listeners[i] \u003d f.createListener(this);\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "fca8c918043974fcf6cc59e5d4161ada0b7c4c76": {
      "type": "Ybodychange",
      "commitMessage": "Request 504275: detect to-do comments\n",
      "commitDate": "13/05/02 5:52 AM",
      "commitName": "fca8c918043974fcf6cc59e5d4161ada0b7c4c76",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "05/05/02 4:39 AM",
      "commitNameOld": "f6c9d83def3c381d7485186b36e8c1d5e17a13ca",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,19 @@\n     protected AuditListener[] getListeners()\n         throws ClassNotFoundException, InstantiationException,\n         IllegalAccessException, IOException\n     {\n-        // @todo should we add a default plain stdout\n-        // formatter ?\n         if (mFormatters.size() \u003d\u003d 0) {\n             final Formatter f \u003d new Formatter();\n             final FormatterType type \u003d new FormatterType();\n             type.setValue(E_PLAIN);\n             f.setType(type);\n             mFormatters.add(f);\n         }\n \n         final AuditListener[] listeners \u003d new AuditListener[mFormatters.size()];\n         for (int i \u003d 0; i \u003c listeners.length; i++) {\n             final Formatter f \u003d (Formatter) mFormatters.get(i);\n             listeners[i] \u003d f.createListener(this);\n         }\n         return listeners;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        if (mFormatters.size() \u003d\u003d 0) {\n            final Formatter f \u003d new Formatter();\n            final FormatterType type \u003d new FormatterType();\n            type.setValue(E_PLAIN);\n            f.setType(type);\n            mFormatters.add(f);\n        }\n\n        final AuditListener[] listeners \u003d new AuditListener[mFormatters.size()];\n        for (int i \u003d 0; i \u003c listeners.length; i++) {\n            final Formatter f \u003d (Formatter) mFormatters.get(i);\n            listeners[i] \u003d f.createListener(this);\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": {
      "type": "Yintroduced",
      "commitMessage": "started to incorporate logging events\n",
      "commitDate": "30/08/01 9:13 AM",
      "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,21 @@\n+    protected AuditListener[] getListeners()\n+        throws ClassNotFoundException, InstantiationException,\n+        IllegalAccessException, IOException\n+    {\n+        // @todo should we add a default plain stdout\n+        // formatter ?\n+        if (mFormatters.size() \u003d\u003d 0) {\n+            final Formatter f \u003d new Formatter();\n+            final FormatterType type \u003d new FormatterType();\n+            type.setValue(E_PLAIN);\n+            f.setType(type);\n+            mFormatters.add(f);\n+        }\n+\n+        final AuditListener[] listeners \u003d new AuditListener[mFormatters.size()];\n+        for (int i \u003d 0; i \u003c listeners.length; i++) {\n+            final Formatter f \u003d (Formatter) mFormatters.get(i);\n+            listeners[i] \u003d f.createListener(this);\n+        }\n+        return listeners;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected AuditListener[] getListeners()\n        throws ClassNotFoundException, InstantiationException,\n        IllegalAccessException, IOException\n    {\n        // @todo should we add a default plain stdout\n        // formatter ?\n        if (mFormatters.size() \u003d\u003d 0) {\n            final Formatter f \u003d new Formatter();\n            final FormatterType type \u003d new FormatterType();\n            type.setValue(E_PLAIN);\n            f.setType(type);\n            mFormatters.add(f);\n        }\n\n        final AuditListener[] listeners \u003d new AuditListener[mFormatters.size()];\n        for (int i \u003d 0; i \u003c listeners.length; i++) {\n            final Formatter f \u003d (Formatter) mFormatters.get(i);\n            listeners[i] \u003d f.createListener(this);\n        }\n        return listeners;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java"
    }
  }
}