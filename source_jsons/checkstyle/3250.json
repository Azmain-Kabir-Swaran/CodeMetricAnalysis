{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocMethodCheck.java",
  "functionName": "getThrowed",
  "functionId": "getThrowed___methodAst-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
  "functionStartLine": 759,
  "functionEndLine": 778,
  "numCommitsSeen": 121,
  "timeTaken": 931,
  "changeHistory": [
    "050c68d3cce4e8f6486681ae8a15e146b6897c5b",
    "331b136df4615f1ca02716446503f97165455f3e"
  ],
  "changeHistoryShort": {
    "050c68d3cce4e8f6486681ae8a15e146b6897c5b": "Ybodychange",
    "331b136df4615f1ca02716446503f97165455f3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "050c68d3cce4e8f6486681ae8a15e146b6897c5b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7473: JavadocMethod: false positive with validateThrows\n",
      "commitDate": "29/04/20 5:29 AM",
      "commitName": "050c68d3cce4e8f6486681ae8a15e146b6897c5b",
      "commitAuthor": "wltan",
      "commitDateOld": "26/04/20 8:20 AM",
      "commitNameOld": "caec287cf4125d948807f97c0fcf50b5fdf09910",
      "commitAuthorOld": "Harsh Kukreja",
      "daysBetweenCommits": 2.88,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n     private List\u003cExceptionInfo\u003e getThrowed(DetailAST methodAst) {\n         final List\u003cExceptionInfo\u003e returnValue \u003d new ArrayList\u003c\u003e();\n         final DetailAST blockAst \u003d methodAst.findFirstToken(TokenTypes.SLIST);\n         if (blockAst !\u003d null) {\n             final List\u003cDetailAST\u003e throwLiterals \u003d findTokensInAstByType(blockAst,\n                     TokenTypes.LITERAL_THROW);\n             for (DetailAST throwAst : throwLiterals) {\n-                final DetailAST newAst \u003d throwAst.getFirstChild().getFirstChild();\n-                if (newAst.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n-                    final FullIdent ident \u003d FullIdent.createFullIdent(newAst.getFirstChild());\n-                    final ExceptionInfo exceptionInfo \u003d new ExceptionInfo(\n-                            createClassInfo(new Token(ident), currentClassName));\n-                    returnValue.add(exceptionInfo);\n+                if (!isInIgnoreBlock(blockAst, throwAst)) {\n+                    final DetailAST newAst \u003d throwAst.getFirstChild().getFirstChild();\n+                    if (newAst.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+                        final FullIdent ident \u003d FullIdent.createFullIdent(newAst.getFirstChild());\n+                        final ExceptionInfo exceptionInfo \u003d new ExceptionInfo(\n+                                createClassInfo(new Token(ident), currentClassName));\n+                        returnValue.add(exceptionInfo);\n+                    }\n                 }\n             }\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private List\u003cExceptionInfo\u003e getThrowed(DetailAST methodAst) {\n        final List\u003cExceptionInfo\u003e returnValue \u003d new ArrayList\u003c\u003e();\n        final DetailAST blockAst \u003d methodAst.findFirstToken(TokenTypes.SLIST);\n        if (blockAst !\u003d null) {\n            final List\u003cDetailAST\u003e throwLiterals \u003d findTokensInAstByType(blockAst,\n                    TokenTypes.LITERAL_THROW);\n            for (DetailAST throwAst : throwLiterals) {\n                if (!isInIgnoreBlock(blockAst, throwAst)) {\n                    final DetailAST newAst \u003d throwAst.getFirstChild().getFirstChild();\n                    if (newAst.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                        final FullIdent ident \u003d FullIdent.createFullIdent(newAst.getFirstChild());\n                        final ExceptionInfo exceptionInfo \u003d new ExceptionInfo(\n                                createClassInfo(new Token(ident), currentClassName));\n                        returnValue.add(exceptionInfo);\n                    }\n                }\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "331b136df4615f1ca02716446503f97165455f3e": {
      "type": "Yintroduced",
      "commitMessage": "Issue #7380: JavadocMethod should detect explicit throw in methods\n",
      "commitDate": "17/12/19 9:52 AM",
      "commitName": "331b136df4615f1ca02716446503f97165455f3e",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,18 @@\n+    private List\u003cExceptionInfo\u003e getThrowed(DetailAST methodAst) {\n+        final List\u003cExceptionInfo\u003e returnValue \u003d new ArrayList\u003c\u003e();\n+        final DetailAST blockAst \u003d methodAst.findFirstToken(TokenTypes.SLIST);\n+        if (blockAst !\u003d null) {\n+            final List\u003cDetailAST\u003e throwLiterals \u003d findTokensInAstByType(blockAst,\n+                    TokenTypes.LITERAL_THROW);\n+            for (DetailAST throwAst : throwLiterals) {\n+                final DetailAST newAst \u003d throwAst.getFirstChild().getFirstChild();\n+                if (newAst.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+                    final FullIdent ident \u003d FullIdent.createFullIdent(newAst.getFirstChild());\n+                    final ExceptionInfo exceptionInfo \u003d new ExceptionInfo(\n+                            createClassInfo(new Token(ident), currentClassName));\n+                    returnValue.add(exceptionInfo);\n+                }\n+            }\n+        }\n+        return returnValue;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private List\u003cExceptionInfo\u003e getThrowed(DetailAST methodAst) {\n        final List\u003cExceptionInfo\u003e returnValue \u003d new ArrayList\u003c\u003e();\n        final DetailAST blockAst \u003d methodAst.findFirstToken(TokenTypes.SLIST);\n        if (blockAst !\u003d null) {\n            final List\u003cDetailAST\u003e throwLiterals \u003d findTokensInAstByType(blockAst,\n                    TokenTypes.LITERAL_THROW);\n            for (DetailAST throwAst : throwLiterals) {\n                final DetailAST newAst \u003d throwAst.getFirstChild().getFirstChild();\n                if (newAst.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                    final FullIdent ident \u003d FullIdent.createFullIdent(newAst.getFirstChild());\n                    final ExceptionInfo exceptionInfo \u003d new ExceptionInfo(\n                            createClassInfo(new Token(ident), currentClassName));\n                    returnValue.add(exceptionInfo);\n                }\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java"
    }
  }
}