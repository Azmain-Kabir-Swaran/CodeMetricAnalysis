{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocVariableCheck.java",
  "functionName": "shouldCheck",
  "functionId": "shouldCheck___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
  "functionStartLine": 193,
  "functionEndLine": 210,
  "numCommitsSeen": 72,
  "timeTaken": 2414,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "7ed40712524e077caac2f7fcfc6cba94bbd13b40",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "6125beffc437f970eae276b4a6542265c6547784",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": "Ybodychange",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "7ed40712524e077caac2f7fcfc6cba94bbd13b40": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         boolean result \u003d false;\n-        if (!ScopeUtils.isInCodeBlock(ast) \u0026\u0026 !isIgnored(ast)) {\n+        if (!ScopeUtil.isInCodeBlock(ast) \u0026\u0026 !isIgnored(ast)) {\n             Scope customScope \u003d Scope.PUBLIC;\n             if (ast.getType() !\u003d TokenTypes.ENUM_CONSTANT_DEF\n-                    \u0026\u0026 !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n+                    \u0026\u0026 !ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n                 final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-                customScope \u003d ScopeUtils.getScopeFromMods(mods);\n+                customScope \u003d ScopeUtil.getScopeFromMods(mods);\n             }\n \n-            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n+            final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n             result \u003d customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n                 \u0026\u0026 (excludeScope \u003d\u003d null\n                     || !customScope.isIn(excludeScope)\n                     || !surroundingScope.isIn(excludeScope));\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        boolean result \u003d false;\n        if (!ScopeUtil.isInCodeBlock(ast) \u0026\u0026 !isIgnored(ast)) {\n            Scope customScope \u003d Scope.PUBLIC;\n            if (ast.getType() !\u003d TokenTypes.ENUM_CONSTANT_DEF\n                    \u0026\u0026 !ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                customScope \u003d ScopeUtil.getScopeFromMods(mods);\n            }\n\n            final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n            result \u003d customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n                \u0026\u0026 (excludeScope \u003d\u003d null\n                    || !customScope.isIn(excludeScope)\n                    || !surroundingScope.isIn(excludeScope));\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3496: Enforce ReturnCount max\u003d1 in com.puppycrawl.tools.checkstyle.checks.javadoc\n",
      "commitDate": "24/04/17 8:09 PM",
      "commitName": "ed5d4d98da5963b658eafaaa3aaee98ba989db65",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 87.53,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,18 @@\n     private boolean shouldCheck(final DetailAST ast) {\n-        if (ScopeUtils.isInCodeBlock(ast) || isIgnored(ast)) {\n-            return false;\n-        }\n-\n-        final Scope customScope;\n-        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n-            customScope \u003d Scope.PUBLIC;\n-        }\n-        else {\n-            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n-\n-            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n-                customScope \u003d Scope.PUBLIC;\n+        boolean result \u003d false;\n+        if (!ScopeUtils.isInCodeBlock(ast) \u0026\u0026 !isIgnored(ast)) {\n+            Scope customScope \u003d Scope.PUBLIC;\n+            if (ast.getType() !\u003d TokenTypes.ENUM_CONSTANT_DEF\n+                    \u0026\u0026 !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n+                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+                customScope \u003d ScopeUtils.getScopeFromMods(mods);\n             }\n-            else {\n-                customScope \u003d declaredScope;\n-            }\n+\n+            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n+            result \u003d customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n+                \u0026\u0026 (excludeScope \u003d\u003d null\n+                    || !customScope.isIn(excludeScope)\n+                    || !surroundingScope.isIn(excludeScope));\n         }\n-\n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n-\n-        return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n-            \u0026\u0026 (excludeScope \u003d\u003d null\n-                || !customScope.isIn(excludeScope)\n-                || !surroundingScope.isIn(excludeScope));\n+        return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        boolean result \u003d false;\n        if (!ScopeUtils.isInCodeBlock(ast) \u0026\u0026 !isIgnored(ast)) {\n            Scope customScope \u003d Scope.PUBLIC;\n            if (ast.getType() !\u003d TokenTypes.ENUM_CONSTANT_DEF\n                    \u0026\u0026 !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n                final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n                customScope \u003d ScopeUtils.getScopeFromMods(mods);\n            }\n\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n            result \u003d customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n                \u0026\u0026 (excludeScope \u003d\u003d null\n                    || !customScope.isIn(excludeScope)\n                    || !surroundingScope.isIn(excludeScope));\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private boolean shouldCheck(final DetailAST ast) {\n-        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n+        if (ScopeUtils.isInCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope customScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             customScope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n \n-            if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n                 customScope \u003d Scope.PUBLIC;\n             }\n             else {\n                 customScope \u003d declaredScope;\n             }\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ScopeUtils.isInCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope customScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n\n            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n                customScope \u003d Scope.PUBLIC;\n            }\n            else {\n                customScope \u003d declaredScope;\n            }\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": "16/08/15 9:01 PM",
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope customScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             customScope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n-            customScope \u003d\n-                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-                    ? Scope.PUBLIC : declaredScope;\n+\n+            if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+                customScope \u003d Scope.PUBLIC;\n+            }\n+            else {\n+                customScope \u003d declaredScope;\n+            }\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope customScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n\n            if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n                customScope \u003d Scope.PUBLIC;\n            }\n            else {\n                customScope \u003d declaredScope;\n            }\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this. #1555\n\nFixes `UnnecessaryThis` inspection violations after recent commits.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n",
      "commitDate": "14/08/15 8:42 PM",
      "commitName": "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope customScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             customScope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n             customScope \u003d\n                 ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return customScope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n+        return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope customScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            customScope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope) \u0026\u0026 surroundingScope.isIn(scope)\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 5:18 AM",
      "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n-        final Scope scope;\n+        final Scope customScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n-            scope \u003d Scope.PUBLIC;\n+            customScope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n-            scope \u003d\n+            customScope \u003d\n                 ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n+        return customScope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n             \u0026\u0026 (excludeScope \u003d\u003d null\n-                || !scope.isIn(excludeScope)\n+                || !customScope.isIn(excludeScope)\n                 || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope customScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            customScope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean shouldCheck(final DetailAST ast)\n     {\n         if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope scope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             scope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n             scope \u003d\n                 ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n-            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+            \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !scope.isIn(excludeScope)\n                 || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !scope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "17/09/14 10:40 AM",
          "commitNameOld": "7ed40712524e077caac2f7fcfc6cba94bbd13b40",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 123.86,
          "commitsBetweenForRepo": 329,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private boolean shouldCheck(final DetailAST aAST)\n+    private boolean shouldCheck(final DetailAST ast)\n     {\n-        if (ScopeUtils.inCodeBlock(aAST) || isIgnored(aAST)) {\n+        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope scope;\n-        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             scope \u003d Scope.PUBLIC;\n         }\n         else {\n-            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n             scope \u003d\n-                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n-            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n-                || !scope.isIn(mExcludeScope)\n-                || !surroundingScope.isIn(mExcludeScope));\n+        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n+            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+                || !scope.isIn(excludeScope)\n+                || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n            \u0026\u0026 ((excludeScope \u003d\u003d null)\n                || !scope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "17/09/14 10:40 AM",
          "commitNameOld": "7ed40712524e077caac2f7fcfc6cba94bbd13b40",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 123.86,
          "commitsBetweenForRepo": 329,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private boolean shouldCheck(final DetailAST aAST)\n+    private boolean shouldCheck(final DetailAST ast)\n     {\n-        if (ScopeUtils.inCodeBlock(aAST) || isIgnored(aAST)) {\n+        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n             return false;\n         }\n \n         final Scope scope;\n-        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             scope \u003d Scope.PUBLIC;\n         }\n         else {\n-            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n             scope \u003d\n-                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n-            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n-                || !scope.isIn(mExcludeScope)\n-                || !surroundingScope.isIn(mExcludeScope));\n+        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n+            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+                || !scope.isIn(excludeScope)\n+                || !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope) \u0026\u0026 surroundingScope.isIn(this.scope)\n            \u0026\u0026 ((excludeScope \u003d\u003d null)\n                || !scope.isIn(excludeScope)\n                || !surroundingScope.isIn(excludeScope));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ed40712524e077caac2f7fcfc6cba94bbd13b40": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #98 Add ignore option to the JavadocVariable check\n",
      "commitDate": "17/09/14 10:40 AM",
      "commitName": "7ed40712524e077caac2f7fcfc6cba94bbd13b40",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 197.02,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n-        if (ScopeUtils.inCodeBlock(aAST)) {\n+        if (ScopeUtils.inCodeBlock(aAST) || isIgnored(aAST)) {\n             return false;\n         }\n \n         final Scope scope;\n         if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             scope \u003d Scope.PUBLIC;\n         }\n         else {\n             final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n             final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n             scope \u003d\n                 ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n                     ? Scope.PUBLIC : declaredScope;\n         }\n \n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || !surroundingScope.isIn(mExcludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST) || isIgnored(aAST)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java"
      }
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "27/03/04 1:10 PM",
      "commitNameOld": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 183.91,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,25 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n-        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n-        final Scope scope \u003d\n-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n+        final Scope scope;\n+        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+            scope \u003d Scope.PUBLIC;\n+        }\n+        else {\n+            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n+            scope \u003d\n+                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+                    ? Scope.PUBLIC : declaredScope;\n+        }\n+\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || !surroundingScope.isIn(mExcludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope scope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            scope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n            final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n            scope \u003d\n                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n                    ? Scope.PUBLIC : declaredScope;\n        }\n\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java",
      "extendedDetails": {}
    },
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": {
      "type": "Yintroduced",
      "commitMessage": "Scoping for javadoc checks\n",
      "commitDate": "27/03/04 1:10 PM",
      "commitName": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,17 @@\n+    private boolean shouldCheck(final DetailAST aAST)\n+    {\n+        if (ScopeUtils.inCodeBlock(aAST)) {\n+            return false;\n+        }\n+\n+        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n+        final Scope scope \u003d\n+            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+\n+        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n+            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n+                || !scope.isIn(mExcludeScope)\n+                || !surroundingScope.isIn(mExcludeScope));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope) \u0026\u0026 surroundingScope.isIn(mScope)\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java"
    }
  }
}