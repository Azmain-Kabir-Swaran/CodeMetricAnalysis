{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExplicitInitializationCheck.java",
  "functionName": "validateNonObjects",
  "functionId": "validateNonObjects___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
  "functionStartLine": 159,
  "functionEndLine": 177,
  "numCommitsSeen": 48,
  "timeTaken": 575,
  "changeHistory": [
    "185f969cd163bbaaf41356c73bcac3831ac31fc9"
  ],
  "changeHistoryShort": {
    "185f969cd163bbaaf41356c73bcac3831ac31fc9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "185f969cd163bbaaf41356c73bcac3831ac31fc9": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2399: New option \u0027onlyObjectReferences\u0027 for ExplicitInitializationCheck\n",
      "commitDate": "30/04/17 11:29 AM",
      "commitName": "185f969cd163bbaaf41356c73bcac3831ac31fc9",
      "commitAuthor": "Subbu Dantu",
      "diff": "@@ -0,0 +1,19 @@\n+    private void validateNonObjects(DetailAST ast) {\n+        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n+        final DetailAST exprStart \u003d\n+                assign.getFirstChild().getFirstChild();\n+        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final int primitiveType \u003d type.getFirstChild().getType();\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n+            log(ident, MSG_KEY, ident.getText(), \"false\");\n+        }\n+        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n+            log(ident, MSG_KEY, ident.getText(), \"0\");\n+        }\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n+                \u0026\u0026 isZeroChar(exprStart)) {\n+            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void validateNonObjects(DetailAST ast) {\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        final DetailAST exprStart \u003d\n                assign.getFirstChild().getFirstChild();\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n            log(ident, MSG_KEY, ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n                \u0026\u0026 isZeroChar(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java"
    }
  }
}