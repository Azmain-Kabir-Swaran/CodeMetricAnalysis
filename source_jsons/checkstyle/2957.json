{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OrderedPropertiesCheck.java",
  "functionName": "processFiltered",
  "functionId": "processFiltered___file-File__fileText-FileText",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OrderedPropertiesCheck.java",
  "functionStartLine": 112,
  "functionEndLine": 140,
  "numCommitsSeen": 5,
  "timeTaken": 538,
  "changeHistory": [
    "ebb79ada7904404d800a761cb07f5d4e9d649878"
  ],
  "changeHistoryShort": {
    "ebb79ada7904404d800a761cb07f5d4e9d649878": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ebb79ada7904404d800a761cb07f5d4e9d649878": {
      "type": "Yintroduced",
      "commitMessage": "Issue #6311: OrderedPropertiesCheck check that properties are ordered\n",
      "commitDate": "21/06/19 8:34 AM",
      "commitName": "ebb79ada7904404d800a761cb07f5d4e9d649878",
      "commitAuthor": "Thomas Senger",
      "diff": "@@ -0,0 +1,29 @@\n+    protected void processFiltered(File file, FileText fileText) {\n+        final SequencedProperties properties \u003d new SequencedProperties();\n+        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n+            properties.load(inputStream);\n+        }\n+        catch (IOException | IllegalArgumentException ex) {\n+            log(1, MSG_IO_EXCEPTION_KEY, file.getPath(), ex.getLocalizedMessage());\n+        }\n+\n+        String previousProp \u003d \"\";\n+        int startLineNo \u003d 0;\n+\n+        final Enumeration\u003cObject\u003e keys \u003d properties.keys();\n+\n+        while (keys.hasMoreElements()) {\n+\n+            final String propKey \u003d (String) keys.nextElement();\n+\n+            if (String.CASE_INSENSITIVE_ORDER.compare(previousProp, propKey) \u003e 0) {\n+\n+                final int lineNo \u003d getLineNumber(startLineNo, fileText, previousProp, propKey);\n+                log(lineNo + 1, MSG_KEY, propKey, previousProp);\n+                // start searching at position of the last reported validation\n+                startLineNo \u003d lineNo;\n+            }\n+\n+            previousProp \u003d propKey;\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final SequencedProperties properties \u003d new SequencedProperties();\n        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n            properties.load(inputStream);\n        }\n        catch (IOException | IllegalArgumentException ex) {\n            log(1, MSG_IO_EXCEPTION_KEY, file.getPath(), ex.getLocalizedMessage());\n        }\n\n        String previousProp \u003d \"\";\n        int startLineNo \u003d 0;\n\n        final Enumeration\u003cObject\u003e keys \u003d properties.keys();\n\n        while (keys.hasMoreElements()) {\n\n            final String propKey \u003d (String) keys.nextElement();\n\n            if (String.CASE_INSENSITIVE_ORDER.compare(previousProp, propKey) \u003e 0) {\n\n                final int lineNo \u003d getLineNumber(startLineNo, fileText, previousProp, propKey);\n                log(lineNo + 1, MSG_KEY, propKey, previousProp);\n                // start searching at position of the last reported validation\n                startLineNo \u003d lineNo;\n            }\n\n            previousProp \u003d propKey;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OrderedPropertiesCheck.java"
    }
  }
}