{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MissingOverrideCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
  "functionStartLine": 212,
  "functionEndLine": 241,
  "numCommitsSeen": 60,
  "timeTaken": 2412,
  "changeHistory": [
    "0823da3cf1820603a155b5c8f14d5dfa63fe92b5",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
    "09a7ca60414ea04b64f45bb190eaa26c767086be",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767"
  ],
  "changeHistoryShort": {
    "0823da3cf1820603a155b5c8f14d5dfa63fe92b5": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "09a7ca60414ea04b64f45bb190eaa26c767086be": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267": "Ybodychange",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0823da3cf1820603a155b5c8f14d5dfa63fe92b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7748: Update AbstractChecks to log DetailAST - MissingOverride\n",
      "commitDate": "13/03/20 7:47 AM",
      "commitName": "0823da3cf1820603a155b5c8f14d5dfa63fe92b5",
      "commitAuthor": "HuGanghui",
      "commitDateOld": "11/03/20 4:40 AM",
      "commitNameOld": "9f5f68f393faf152d65170c19d1126c210780f6b",
      "commitAuthorOld": "HuGanghui",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             getFileContents().getJavadocBefore(ast.getLineNo());\n \n         final boolean containsTag \u003d containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n-            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n+            log(ast, MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n         }\n         else {\n             boolean check \u003d true;\n \n             if (javaFiveCompatibility) {\n                 final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n                 if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n                     || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                     || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                     check \u003d false;\n                 }\n             }\n \n             if (check\n                 \u0026\u0026 containsTag\n                 \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, OVERRIDE)\n                 \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, FQ_OVERRIDE)) {\n-                log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+                log(ast, MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containsTag \u003d containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast, MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n        }\n        else {\n            boolean check \u003d true;\n\n            if (javaFiveCompatibility) {\n                final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n                if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n                    || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                    || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                    check \u003d false;\n                }\n            }\n\n            if (check\n                \u0026\u0026 containsTag\n                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, OVERRIDE)\n                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, FQ_OVERRIDE)) {\n                log(ast, MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             getFileContents().getJavadocBefore(ast.getLineNo());\n \n         final boolean containsTag \u003d containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n         }\n         else {\n             boolean check \u003d true;\n \n             if (javaFiveCompatibility) {\n                 final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n                 if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n                     || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                     || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                     check \u003d false;\n                 }\n             }\n \n             if (check\n                 \u0026\u0026 containsTag\n-                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n-                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n+                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, OVERRIDE)\n+                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, FQ_OVERRIDE)) {\n                 log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containsTag \u003d containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n        }\n        else {\n            boolean check \u003d true;\n\n            if (javaFiveCompatibility) {\n                final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n                if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n                    || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                    || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                    check \u003d false;\n                }\n            }\n\n            if (check\n                \u0026\u0026 containsTag\n                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, OVERRIDE)\n                \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, FQ_OVERRIDE)) {\n                log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for simple cases",
      "commitDate": "09/11/17 6:45 AM",
      "commitName": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthor": "rnveach",
      "commitDateOld": "30/10/17 6:16 PM",
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 9.56,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             getFileContents().getJavadocBefore(ast.getLineNo());\n \n         final boolean containsTag \u003d containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n         }\n         else {\n             boolean check \u003d true;\n \n             if (javaFiveCompatibility) {\n                 final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n-                if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n-                    || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n+                if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n+                    || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                     || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                     check \u003d false;\n                 }\n             }\n \n             if (check\n                 \u0026\u0026 containsTag\n                 \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n                 \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n                 log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containsTag \u003d containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n        }\n        else {\n            boolean check \u003d true;\n\n            if (javaFiveCompatibility) {\n                final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n                if (defOrNew.findFirstToken(TokenTypes.EXTENDS_CLAUSE) !\u003d null\n                    || defOrNew.findFirstToken(TokenTypes.IMPLEMENTS_CLAUSE) !\u003d null\n                    || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                    check \u003d false;\n                }\n            }\n\n            if (check\n                \u0026\u0026 containsTag\n                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n                log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             getFileContents().getJavadocBefore(ast.getLineNo());\n \n         final boolean containsTag \u003d containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n-            return;\n         }\n+        else {\n+            boolean check \u003d true;\n \n-        if (javaFiveCompatibility) {\n-            final DetailAST defOrNew \u003d ast.getParent().getParent();\n+            if (javaFiveCompatibility) {\n+                final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n-            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n-                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n-                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n-                return;\n+                if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n+                    || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n+                    || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+                    check \u003d false;\n+                }\n             }\n-        }\n \n-        if (containsTag\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n-            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+            if (check\n+                \u0026\u0026 containsTag\n+                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n+                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n+                log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containsTag \u003d containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n        }\n        else {\n            boolean check \u003d true;\n\n            if (javaFiveCompatibility) {\n                final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n                if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                    || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                    || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                    check \u003d false;\n                }\n            }\n\n            if (check\n                \u0026\u0026 containsTag\n                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n                \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n                log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "07b24dd81c7648f093f2a789a7fa288d8e7eeef4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Fix various typos\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "28/08/15 10:53 PM",
      "commitName": "07b24dd81c7648f093f2a789a7fa288d8e7eeef4",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:26 AM",
      "commitNameOld": "f981e5845436464b45fc937e601f7fc9fdbc5a7c",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             getFileContents().getJavadocBefore(ast.getLineNo());\n \n-        final boolean containastag \u003d containsJavadocTag(javadoc);\n-        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n+        final boolean containsTag \u003d containsJavadocTag(javadoc);\n+        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n         if (javaFiveCompatibility) {\n             final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 return;\n             }\n         }\n \n-        if (containastag\n+        if (containsTag\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n             log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containsTag \u003d containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                return;\n            }\n        }\n\n        if (containsTag\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": "09/08/15 7:41 AM",
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "02/08/15 6:48 PM",
      "commitNameOld": "693e8820d5a9fefebb8a3fb1661e5fbcb4432cfd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 6.54,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n-            this.getFileContents().getJavadocBefore(ast.getLineNo());\n+            getFileContents().getJavadocBefore(ast.getLineNo());\n \n         final boolean containastag \u003d containsJavadocTag(javadoc);\n         if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n-            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n+            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n-        if (this.javaFiveCompatibility) {\n+        if (javaFiveCompatibility) {\n             final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 return;\n             }\n         }\n \n         if (containastag\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n-            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            getFileContents().getJavadocBefore(ast.getLineNo());\n\n        final boolean containastag \u003d containsJavadocTag(javadoc);\n        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                return;\n            }\n        }\n\n        if (containastag\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ybodychange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(final DetailAST ast) {\n         final TextBlock javadoc \u003d\n             this.getFileContents().getJavadocBefore(ast.getLineNo());\n \n \n-        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n+        final boolean containastag \u003d containsJavadocTag(javadoc);\n         if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n         if (this.javaFiveCompatibility) {\n             final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                 return;\n             }\n         }\n \n         if (containastag\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n             this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(ast.getLineNo());\n\n\n        final boolean containastag \u003d containsJavadocTag(javadoc);\n        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n                return;\n            }\n        }\n\n        if (containastag\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)) {\n            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(final DetailAST ast)\n     {\n         final TextBlock javadoc \u003d\n             this.getFileContents().getJavadocBefore(ast.getLineNo());\n \n \n         final boolean containastag \u003d this.containsJavadocTag(javadoc);\n         if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n             this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n         if (this.javaFiveCompatibility) {\n             final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n             {\n                 return;\n             }\n         }\n \n         if (containastag\n-            \u0026\u0026 (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE))\n         {\n             this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(ast.getLineNo());\n\n\n        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containastag\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE))\n        {\n            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, annotation, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    public void visitToken(final DetailAST aAST)\n+    public void visitToken(final DetailAST ast)\n     {\n         final TextBlock javadoc \u003d\n-            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n+            this.getFileContents().getJavadocBefore(ast.getLineNo());\n \n \n-        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n-        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n-            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n+        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n+        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n+            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n-        if (this.mJavaFiveCompatibility) {\n-            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n+        if (this.javaFiveCompatibility) {\n+            final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n             {\n                 return;\n             }\n         }\n \n-        if (containsTag\n-            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n+        if (containastag\n+            \u0026\u0026 (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))\n         {\n-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(ast.getLineNo());\n\n\n        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containastag\n            \u0026\u0026 (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))\n        {\n            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    public void visitToken(final DetailAST aAST)\n+    public void visitToken(final DetailAST ast)\n     {\n         final TextBlock javadoc \u003d\n-            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n+            this.getFileContents().getJavadocBefore(ast.getLineNo());\n \n \n-        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n-        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n-            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n+        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n+        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n+            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n-        if (this.mJavaFiveCompatibility) {\n-            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n+        if (this.javaFiveCompatibility) {\n+            final DetailAST defOrNew \u003d ast.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n             {\n                 return;\n             }\n         }\n \n-        if (containsTag\n-            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n+        if (containastag\n+            \u0026\u0026 (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))\n         {\n-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(ast.getLineNo());\n\n\n        final boolean containastag \u003d this.containsJavadocTag(javadoc);\n        if (containastag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {\n            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.javaFiveCompatibility) {\n            final DetailAST defOrNew \u003d ast.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containastag\n            \u0026\u0026 (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))\n        {\n            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "09a7ca60414ea04b64f45bb190eaa26c767086be": {
      "type": "Ybodychange",
      "commitMessage": "Issue #537 refactoring: remove copy-paste of messages from UTests\n",
      "commitDate": "28/12/14 3:14 PM",
      "commitName": "09a7ca60414ea04b64f45bb190eaa26c767086be",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "14/09/14 9:11 AM",
      "commitNameOld": "615c6f26cd0e2d9b9fc87c5be869b1a88943af85",
      "commitAuthorOld": "ychulovskyy",
      "daysBetweenCommits": 105.29,
      "commitsBetweenForRepo": 292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(final DetailAST aAST)\n     {\n         final TextBlock javadoc \u003d\n             this.getFileContents().getJavadocBefore(aAST.getLineNo());\n \n \n         final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n-            this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n+            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n         if (this.mJavaFiveCompatibility) {\n             final DetailAST defOrNew \u003d aAST.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n             {\n                 return;\n             }\n         }\n \n         if (containsTag\n             \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n             \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n         {\n-            this.log(aAST.getLineNo(), \"annotation.missing.override\");\n+            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n\n\n        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.mJavaFiveCompatibility) {\n            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containsTag\n            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n        {\n            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n\n\n        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n            this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.mJavaFiveCompatibility) {\n            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containsTag\n            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n        {\n            this.log(aAST.getLineNo(), \"annotation.missing.override\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java"
      }
    },
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267": {
      "type": "Ybodychange",
      "commitMessage": "Supporting fully-qualified annotation names.\n",
      "commitDate": "30/03/09 7:06 PM",
      "commitName": "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267",
      "commitAuthor": "Travis Schneeberger",
      "commitDateOld": "23/03/09 3:49 AM",
      "commitNameOld": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     public void visitToken(final DetailAST aAST)\n     {\n         final TextBlock javadoc \u003d\n             this.getFileContents().getJavadocBefore(aAST.getLineNo());\n \n \n         final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n         if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n             this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n                 JavadocTagInfo.INHERIT_DOC.getText());\n             return;\n         }\n \n         if (this.mJavaFiveCompatibility) {\n             final DetailAST defOrNew \u003d aAST.getParent().getParent();\n \n             if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                 || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                 || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n             {\n                 return;\n             }\n         }\n \n         if (containsTag\n-            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, OVERRIDE))\n+            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n         {\n             this.log(aAST.getLineNo(), \"annotation.missing.override\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n\n\n        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n            this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.mJavaFiveCompatibility) {\n            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containsTag\n            \u0026\u0026 (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\n        {\n            this.log(aAST.getLineNo(), \"annotation.missing.override\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java",
      "extendedDetails": {}
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Yintroduced",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,30 @@\n+    public void visitToken(final DetailAST aAST)\n+    {\n+        final TextBlock javadoc \u003d\n+            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n+\n+\n+        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n+        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n+            this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n+                JavadocTagInfo.INHERIT_DOC.getText());\n+            return;\n+        }\n+\n+        if (this.mJavaFiveCompatibility) {\n+            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n+\n+            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n+                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n+                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n+            {\n+                return;\n+            }\n+        }\n+\n+        if (containsTag\n+            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, OVERRIDE))\n+        {\n+            this.log(aAST.getLineNo(), \"annotation.missing.override\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final TextBlock javadoc \u003d\n            this.getFileContents().getJavadocBefore(aAST.getLineNo());\n\n\n        final boolean containsTag \u003d this.containsJavadocTag(javadoc);\n        if (containsTag \u0026\u0026 !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {\n            this.log(aAST.getLineNo(), \"tag.not.valid.on\",\n                JavadocTagInfo.INHERIT_DOC.getText());\n            return;\n        }\n\n        if (this.mJavaFiveCompatibility) {\n            final DetailAST defOrNew \u003d aAST.getParent().getParent();\n\n            if (defOrNew.branchContains(TokenTypes.EXTENDS_CLAUSE)\n                || defOrNew.branchContains(TokenTypes.IMPLEMENTS_CLAUSE)\n                || defOrNew.getType() \u003d\u003d TokenTypes.LITERAL_NEW)\n            {\n                return;\n            }\n        }\n\n        if (containsTag\n            \u0026\u0026 !AnnotationUtility.containsAnnotation(aAST, OVERRIDE))\n        {\n            this.log(aAST.getLineNo(), \"annotation.missing.override\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java"
    }
  }
}