{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocParagraphCheck.java",
  "functionName": "isEmptyLine",
  "functionId": "isEmptyLine___newLine-DetailNode",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
  "functionStartLine": 226,
  "functionEndLine": 239,
  "numCommitsSeen": 41,
  "timeTaken": 1676,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65",
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "54ed230519fc78c7a5ca48d9dd05cce4f4ff4b1b"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": "Ybodychange",
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65": "Ybodychange",
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "54ed230519fc78c7a5ca48d9dd05cce4f4ff4b1b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private static boolean isEmptyLine(DetailNode newLine) {\n         boolean result \u003d false;\n-        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n+        DetailNode previousSibling \u003d JavadocUtil.getPreviousSibling(newLine);\n         if (previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n             if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n-                    \u0026\u0026 CommonUtils.isBlank(previousSibling.getText())) {\n-                previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n+                    \u0026\u0026 CommonUtil.isBlank(previousSibling.getText())) {\n+                previousSibling \u003d JavadocUtil.getPreviousSibling(previousSibling);\n             }\n             result \u003d previousSibling !\u003d null\n                     \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isEmptyLine(DetailNode newLine) {\n        boolean result \u003d false;\n        DetailNode previousSibling \u003d JavadocUtil.getPreviousSibling(newLine);\n        if (previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n            if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                    \u0026\u0026 CommonUtil.isBlank(previousSibling.getText())) {\n                previousSibling \u003d JavadocUtil.getPreviousSibling(previousSibling);\n            }\n            result \u003d previousSibling !\u003d null\n                    \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
      "extendedDetails": {}
    },
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4342: Applied requested changes\n",
      "commitDate": "18/05/17 12:43 PM",
      "commitName": "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "24/04/17 8:09 PM",
      "commitNameOld": "ed5d4d98da5963b658eafaaa3aaee98ba989db65",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 23.69,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private static boolean isEmptyLine(DetailNode newLine) {\n         boolean result \u003d false;\n         DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n         if (previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n             if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n-                    \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n+                    \u0026\u0026 CommonUtils.isBlank(previousSibling.getText())) {\n                 previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n             }\n             result \u003d previousSibling !\u003d null\n                     \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isEmptyLine(DetailNode newLine) {\n        boolean result \u003d false;\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n            if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                    \u0026\u0026 CommonUtils.isBlank(previousSibling.getText())) {\n                previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n            }\n            result \u003d previousSibling !\u003d null\n                    \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
      "extendedDetails": {}
    },
    "ed5d4d98da5963b658eafaaa3aaee98ba989db65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3496: Enforce ReturnCount max\u003d1 in com.puppycrawl.tools.checkstyle.checks.javadoc\n",
      "commitDate": "24/04/17 8:09 PM",
      "commitName": "ed5d4d98da5963b658eafaaa3aaee98ba989db65",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 87.53,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n     private static boolean isEmptyLine(DetailNode newLine) {\n+        boolean result \u003d false;\n         DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n-        if (previousSibling \u003d\u003d null\n-                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC) {\n-            return false;\n+        if (previousSibling !\u003d null\n+                \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n+            if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n+                    \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n+                previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n+            }\n+            result \u003d previousSibling !\u003d null\n+                    \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n         }\n-        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n-                \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n-            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n-        }\n-        return previousSibling !\u003d null\n-                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n+        return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isEmptyLine(DetailNode newLine) {\n        boolean result \u003d false;\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getParent().getType() \u003d\u003d JavadocTokenTypes.JAVADOC) {\n            if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                    \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n                previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n            }\n            result \u003d previousSibling !\u003d null\n                    \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
      "extendedDetails": {}
    },
    "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3170: delete children from javadoc TEXT",
      "commitDate": "18/11/16 4:15 PM",
      "commitName": "19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a",
      "commitAuthor": "rnveach",
      "commitDateOld": "01/11/16 1:07 PM",
      "commitNameOld": "62926b6106cbc22cb73f08c32b964c9e6e8d8b45",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 17.17,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     private static boolean isEmptyLine(DetailNode newLine) {\n         DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n         if (previousSibling \u003d\u003d null\n                 || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC) {\n             return false;\n         }\n         if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n-                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1) {\n+                \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n             previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n         }\n         return previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isEmptyLine(DetailNode newLine) {\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling \u003d\u003d null\n                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC) {\n            return false;\n        }\n        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                \u0026\u0026 previousSibling.getText().trim().isEmpty()) {\n            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n        }\n        return previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n-    private boolean isEmptyLine(DetailNode newLine) {\n+    private static boolean isEmptyLine(DetailNode newLine) {\n         DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n         if (previousSibling \u003d\u003d null\n                 || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC) {\n             return false;\n         }\n         if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                 \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1) {\n             previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n         }\n         return previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isEmptyLine(DetailNode newLine) {\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling \u003d\u003d null\n                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC) {\n            return false;\n        }\n        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1) {\n            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n        }\n        return previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "18/11/14 5:27 PM",
          "commitNameOld": "4ddb7df07365f216fb7c1e39c4fa49d56f8e0719",
          "commitAuthorOld": "maxvetrenko",
          "daysBetweenCommits": 61.54,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private boolean isEmptyLine(DetailNode aNewLine)\n+    private boolean isEmptyLine(DetailNode newLine)\n     {\n-        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(aNewLine);\n+        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n         if (previousSibling \u003d\u003d null\n                 || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n         {\n             return false;\n         }\n         if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                 \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n         {\n             previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n         }\n         return previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isEmptyLine(DetailNode newLine)\n    {\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling \u003d\u003d null\n                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n        {\n            return false;\n        }\n        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n        {\n            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n        }\n        return previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
          "extendedDetails": {
            "oldValue": "[aNewLine-DetailNode]",
            "newValue": "[newLine-DetailNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "18/11/14 5:27 PM",
          "commitNameOld": "4ddb7df07365f216fb7c1e39c4fa49d56f8e0719",
          "commitAuthorOld": "maxvetrenko",
          "daysBetweenCommits": 61.54,
          "commitsBetweenForRepo": 200,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private boolean isEmptyLine(DetailNode aNewLine)\n+    private boolean isEmptyLine(DetailNode newLine)\n     {\n-        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(aNewLine);\n+        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n         if (previousSibling \u003d\u003d null\n                 || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n         {\n             return false;\n         }\n         if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                 \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n         {\n             previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n         }\n         return previousSibling !\u003d null\n                 \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isEmptyLine(DetailNode newLine)\n    {\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(newLine);\n        if (previousSibling \u003d\u003d null\n                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n        {\n            return false;\n        }\n        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n        {\n            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n        }\n        return previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "54ed230519fc78c7a5ca48d9dd05cce4f4ff4b1b": {
      "type": "Yintroduced",
      "commitMessage": "Fix false positives in JavadocParagraphCheck #335\n",
      "commitDate": "23/10/14 8:01 AM",
      "commitName": "54ed230519fc78c7a5ca48d9dd05cce4f4ff4b1b",
      "commitAuthor": "maxvetrenko",
      "diff": "@@ -0,0 +1,16 @@\n+    private boolean isEmptyLine(DetailNode aNewLine)\n+    {\n+        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(aNewLine);\n+        if (previousSibling \u003d\u003d null\n+                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n+        {\n+            return false;\n+        }\n+        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n+                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n+        {\n+            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n+        }\n+        return previousSibling !\u003d null\n+                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isEmptyLine(DetailNode aNewLine)\n    {\n        DetailNode previousSibling \u003d JavadocUtils.getPreviousSibling(aNewLine);\n        if (previousSibling \u003d\u003d null\n                || previousSibling.getParent().getType() !\u003d JavadocTokenTypes.JAVADOC)\n        {\n            return false;\n        }\n        if (previousSibling.getType() \u003d\u003d JavadocTokenTypes.TEXT\n                \u0026\u0026 previousSibling.getChildren().length \u003d\u003d 1)\n        {\n            previousSibling \u003d JavadocUtils.getPreviousSibling(previousSibling);\n        }\n        return previousSibling !\u003d null\n                \u0026\u0026 previousSibling.getType() \u003d\u003d JavadocTokenTypes.LEADING_ASTERISK;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java"
    }
  }
}