{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocStyleCheck.java",
  "functionName": "shouldCheck",
  "functionId": "shouldCheck___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
  "functionStartLine": 381,
  "functionEndLine": 407,
  "numCommitsSeen": 137,
  "timeTaken": 3150,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "9cff1673f1d42910c654e0af5365d68591f104f0",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0",
    "6125beffc437f970eae276b4a6542265c6547784",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": "Ybodychange",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "9cff1673f1d42910c654e0af5365d68591f104f0": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         boolean check \u003d false;\n \n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             check \u003d getFileContents().inPackageInfo();\n         }\n-        else if (!ScopeUtils.isInCodeBlock(ast)) {\n+        else if (!ScopeUtil.isInCodeBlock(ast)) {\n             final Scope customScope;\n \n-            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n+            if (ScopeUtil.isInInterfaceOrAnnotationBlock(ast)\n                     || ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                 customScope \u003d Scope.PUBLIC;\n             }\n             else {\n-                customScope \u003d ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));\n+                customScope \u003d ScopeUtil.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));\n             }\n-            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n+            final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n \n             check \u003d customScope.isIn(scope)\n                     \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n                     \u0026\u0026 (excludeScope \u003d\u003d null\n                         || !customScope.isIn(excludeScope)\n                         || surroundingScope !\u003d null\n                             \u0026\u0026 !surroundingScope.isIn(excludeScope));\n         }\n         return check;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        boolean check \u003d false;\n\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            check \u003d getFileContents().inPackageInfo();\n        }\n        else if (!ScopeUtil.isInCodeBlock(ast)) {\n            final Scope customScope;\n\n            if (ScopeUtil.isInInterfaceOrAnnotationBlock(ast)\n                    || ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                customScope \u003d Scope.PUBLIC;\n            }\n            else {\n                customScope \u003d ScopeUtil.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));\n            }\n            final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n\n            check \u003d customScope.isIn(scope)\n                    \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n                    \u0026\u0026 (excludeScope \u003d\u003d null\n                        || !customScope.isIn(excludeScope)\n                        || surroundingScope !\u003d null\n                            \u0026\u0026 !surroundingScope.isIn(excludeScope));\n        }\n        return check;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for JavadocStyleCheck\n",
      "commitDate": "28/08/15 10:46 PM",
      "commitName": "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "27/08/15 12:53 PM",
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,27 @@\n     private boolean shouldCheck(final DetailAST ast) {\n+        boolean check \u003d false;\n+\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            return getFileContents().inPackageInfo();\n+            check \u003d getFileContents().inPackageInfo();\n         }\n+        else if (!ScopeUtils.isInCodeBlock(ast)) {\n+            final Scope customScope;\n \n-        if (ScopeUtils.isInCodeBlock(ast)) {\n-            return false;\n-        }\n+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n+                    || ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+                customScope \u003d Scope.PUBLIC;\n+            }\n+            else {\n+                customScope \u003d ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));\n+            }\n+            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        final Scope declaredScope;\n-        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n-            declaredScope \u003d Scope.PUBLIC;\n+            check \u003d customScope.isIn(scope)\n+                    \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n+                    \u0026\u0026 (excludeScope \u003d\u003d null\n+                        || !customScope.isIn(excludeScope)\n+                        || surroundingScope !\u003d null\n+                        \u0026\u0026 !surroundingScope.isIn(excludeScope));\n         }\n-        else {\n-            declaredScope \u003d ScopeUtils.getScopeFromMods(\n-                ast.findFirstToken(TokenTypes.MODIFIERS));\n-        }\n-\n-        final Scope customScope;\n-\n-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n-            customScope \u003d Scope.PUBLIC;\n-        }\n-        else {\n-            customScope \u003d declaredScope;\n-        }\n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n-\n-        return customScope.isIn(scope)\n-            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n-            \u0026\u0026 (excludeScope \u003d\u003d null\n-                || !customScope.isIn(excludeScope)\n-                || surroundingScope !\u003d null\n-                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n+        return check;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        boolean check \u003d false;\n\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            check \u003d getFileContents().inPackageInfo();\n        }\n        else if (!ScopeUtils.isInCodeBlock(ast)) {\n            final Scope customScope;\n\n            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                    || ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n                customScope \u003d Scope.PUBLIC;\n            }\n            else {\n                customScope \u003d ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));\n            }\n            final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n            check \u003d customScope.isIn(scope)\n                    \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n                    \u0026\u0026 (excludeScope \u003d\u003d null\n                        || !customScope.isIn(excludeScope)\n                        || surroundingScope !\u003d null\n                        \u0026\u0026 !surroundingScope.isIn(excludeScope));\n        }\n        return check;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n-        if (ScopeUtils.inCodeBlock(ast)) {\n+        if (ScopeUtils.isInCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope customScope;\n \n-        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n             customScope \u003d Scope.PUBLIC;\n         }\n         else {\n             customScope \u003d declaredScope;\n         }\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return customScope.isIn(scope)\n             \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || surroundingScope !\u003d null\n                 \u0026\u0026 !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.isInCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope customScope;\n\n        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            customScope \u003d declaredScope;\n        }\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": "16/08/15 9:01 PM",
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n         if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n-        final Scope customScope \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-            ? Scope.PUBLIC : declaredScope;\n+        final Scope customScope;\n+\n+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+            customScope \u003d Scope.PUBLIC;\n+        }\n+        else {\n+            customScope \u003d declaredScope;\n+        }\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return customScope.isIn(scope)\n             \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || surroundingScope !\u003d null\n                 \u0026\u0026 !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope customScope;\n\n        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            customScope \u003d declaredScope;\n        }\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this. #1555\n\nFixes `UnnecessaryThis` inspection violations after recent commits.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n",
      "commitDate": "14/08/15 8:42 PM",
      "commitName": "02dfe8c7c51e9df3ad1d3a391c5293c861c1982f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "14/08/15 6:56 AM",
      "commitNameOld": "242028813d3d993bbb8a61af6c4f214705c4d7da",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n         if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope customScope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return customScope.isIn(this.scope)\n-            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(this.scope))\n+        return customScope.isIn(scope)\n+            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n             \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !customScope.isIn(excludeScope)\n                 || surroundingScope !\u003d null\n                 \u0026\u0026 !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope customScope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 5:18 AM",
      "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean shouldCheck(final DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n         if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n-        final Scope scope \u003d\n+        final Scope customScope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(this.scope)\n+        return customScope.isIn(this.scope)\n             \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(this.scope))\n             \u0026\u0026 (excludeScope \u003d\u003d null\n-                || !scope.isIn(excludeScope)\n+                || !customScope.isIn(excludeScope)\n                 || surroundingScope !\u003d null\n                 \u0026\u0026 !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope customScope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return customScope.isIn(this.scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(this.scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private boolean shouldCheck(final DetailAST ast)\n     {\n         if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n         if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n         return scope.isIn(this.scope)\n-            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(this.scope))\n-            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(this.scope))\n+            \u0026\u0026 (excludeScope \u003d\u003d null\n                 || !scope.isIn(excludeScope)\n-                || ((surroundingScope !\u003d null)\n-                \u0026\u0026 !surroundingScope.isIn(excludeScope)));\n+                || surroundingScope !\u003d null\n+                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(this.scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !scope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "27/03/14 4:15 PM",
          "commitNameOld": "dfde8d0ffde5700201212b7e3d6219ed08c890a4",
          "commitAuthorOld": "Ilja Gubins",
          "daysBetweenCommits": 297.63,
          "commitsBetweenForRepo": 456,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    private boolean shouldCheck(final DetailAST aAST)\n+    private boolean shouldCheck(final DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n-        if (ScopeUtils.inCodeBlock(aAST)) {\n+        if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n-        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n-                aAST.findFirstToken(TokenTypes.MODIFIERS));\n+                ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n             ? Scope.PUBLIC : declaredScope;\n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(mScope)\n-            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n-            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n-                || !scope.isIn(mExcludeScope)\n+        return scope.isIn(this.scope)\n+            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(this.scope))\n+            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+                || !scope.isIn(excludeScope)\n                 || ((surroundingScope !\u003d null)\n-                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n+                \u0026\u0026 !surroundingScope.isIn(excludeScope)));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(this.scope))\n            \u0026\u0026 ((excludeScope \u003d\u003d null)\n                || !scope.isIn(excludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(excludeScope)));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "27/03/14 4:15 PM",
          "commitNameOld": "dfde8d0ffde5700201212b7e3d6219ed08c890a4",
          "commitAuthorOld": "Ilja Gubins",
          "daysBetweenCommits": 297.63,
          "commitsBetweenForRepo": 456,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-    private boolean shouldCheck(final DetailAST aAST)\n+    private boolean shouldCheck(final DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n             return getFileContents().inPackageInfo();\n         }\n \n-        if (ScopeUtils.inCodeBlock(aAST)) {\n+        if (ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n-        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n-                aAST.findFirstToken(TokenTypes.MODIFIERS));\n+                ast.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n             ? Scope.PUBLIC : declaredScope;\n-        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n \n-        return scope.isIn(mScope)\n-            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n-            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n-                || !scope.isIn(mExcludeScope)\n+        return scope.isIn(this.scope)\n+            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(this.scope))\n+            \u0026\u0026 ((excludeScope \u003d\u003d null)\n+                || !scope.isIn(excludeScope)\n                 || ((surroundingScope !\u003d null)\n-                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n+                \u0026\u0026 !surroundingScope.isIn(excludeScope)));\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean shouldCheck(final DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (ast.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                ast.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(ast);\n\n        return scope.isIn(this.scope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(this.scope))\n            \u0026\u0026 ((excludeScope \u003d\u003d null)\n                || !scope.isIn(excludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(excludeScope)));\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                aAST.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java"
      }
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n-            return inPackageInfo();\n+            return getFileContents().inPackageInfo();\n         }\n \n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 aAST.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope)\n             \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || ((surroundingScope !\u003d null)\n                 \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return getFileContents().inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                aAST.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "9cff1673f1d42910c654e0af5365d68591f104f0": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced JavadocMethod to be more restrictive on where {@inheritDoc} can be used. Also enhanced JavadocPackage  to ensure a package-info.java file contains a comment. Thanks to Travis Schneeberger for providing patch #2294029.\n",
      "commitDate": "10/01/09 8:10 PM",
      "commitName": "9cff1673f1d42910c654e0af5365d68591f104f0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "08/01/09 9:45 PM",
      "commitNameOld": "7823165cce4d7978fe928d8ada0a4861c950ff0f",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n+        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n+            return inPackageInfo();\n+        }\n+\n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 aAST.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope)\n             \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || ((surroundingScope !\u003d null)\n                 \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.PACKAGE_DEF) {\n            return inPackageInfo();\n        }\n\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                aAST.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "05/11/05 3:58 PM",
      "commitNameOld": "f243d4d74885edb0a40920246011fa6549635afd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 243.14,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n         final Scope declaredScope;\n         if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n             declaredScope \u003d Scope.PUBLIC;\n         }\n         else {\n             declaredScope \u003d ScopeUtils.getScopeFromMods(\n                 aAST.findFirstToken(TokenTypes.MODIFIERS));\n         }\n \n         final Scope scope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope)\n             \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n-                || (surroundingScope !\u003d null)\n-                \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n+                || ((surroundingScope !\u003d null)\n+                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF) {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                aAST.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || ((surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope)));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bug where enum constants were causing NPE in Javadoc style check because enum constants have no explicit modifiers.\n",
      "commitDate": "19/12/04 3:05 PM",
      "commitName": "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "27/09/04 11:55 AM",
      "commitNameOld": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 83.17,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,29 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n-        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n+        final Scope declaredScope;\n+        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF)\n+        {\n+            declaredScope \u003d Scope.PUBLIC;\n+        }\n+        else\n+        {\n+            declaredScope \u003d ScopeUtils.getScopeFromMods(\n+                aAST.findFirstToken(TokenTypes.MODIFIERS));\n+        }\n+\n         final Scope scope \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n             ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope)\n             \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || (surroundingScope !\u003d null)\n                 \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final Scope declaredScope;\n        if (aAST.getType() \u003d\u003d TokenTypes.ENUM_CONSTANT_DEF)\n        {\n            declaredScope \u003d Scope.PUBLIC;\n        }\n        else\n        {\n            declaredScope \u003d ScopeUtils.getScopeFromMods(\n                aAST.findFirstToken(TokenTypes.MODIFIERS));\n        }\n\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || (surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "26/04/04 9:17 PM",
      "commitNameOld": "e95d9b668ff5d6fbc64ac13d7cd349a41367e830",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 153.61,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     private boolean shouldCheck(final DetailAST aAST)\n     {\n         if (ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n \n         final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n         final Scope scope \u003d\n-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n+            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+            ? Scope.PUBLIC : declaredScope;\n         final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n \n         return scope.isIn(mScope)\n             \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n             \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                 || !scope.isIn(mExcludeScope)\n                 || (surroundingScope !\u003d null)\n                 \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n            ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || (surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a": {
      "type": "Yintroduced",
      "commitMessage": "Scoping for javadoc checks\n",
      "commitDate": "27/03/04 1:10 PM",
      "commitName": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,19 @@\n+    private boolean shouldCheck(final DetailAST aAST)\n+    {\n+        if (ScopeUtils.inCodeBlock(aAST)) {\n+            return false;\n+        }\n+\n+        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n+        final Scope scope \u003d\n+            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n+        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n+\n+        return scope.isIn(mScope)\n+            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n+            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n+                || !scope.isIn(mExcludeScope)\n+                || (surroundingScope !\u003d null)\n+                \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST aAST)\n    {\n        if (ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        final DetailAST mods \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final Scope declaredScope \u003d ScopeUtils.getScopeFromMods(mods);\n        final Scope scope \u003d\n            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;\n        final Scope surroundingScope \u003d ScopeUtils.getSurroundingScope(aAST);\n\n        return scope.isIn(mScope)\n            \u0026\u0026 ((surroundingScope \u003d\u003d null) || surroundingScope.isIn(mScope))\n            \u0026\u0026 ((mExcludeScope \u003d\u003d null)\n                || !scope.isIn(mExcludeScope)\n                || (surroundingScope !\u003d null)\n                \u0026\u0026 !surroundingScope.isIn(mExcludeScope));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java"
    }
  }
}