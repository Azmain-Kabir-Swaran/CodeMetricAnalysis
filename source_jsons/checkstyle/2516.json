{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CustomImportOrderCheck.java",
  "functionName": "compareImports",
  "functionId": "compareImports___import1-String__import2-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
  "functionStartLine": 850,
  "functionEndLine": 867,
  "numCommitsSeen": 110,
  "timeTaken": 2381,
  "changeHistory": [
    "776171b71897fde845e1f1c08f7bd2250e1b203d",
    "26513d52336c42432ee21565b253297ba4174530",
    "7770f2a2c25c41bf024355f19caac358419110a6",
    "cbfe72383be737abacb4e78ddbb59a3036798605",
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706"
  ],
  "changeHistoryShort": {
    "776171b71897fde845e1f1c08f7bd2250e1b203d": "Ybodychange",
    "26513d52336c42432ee21565b253297ba4174530": "Ybodychange",
    "7770f2a2c25c41bf024355f19caac358419110a6": "Ybodychange",
    "cbfe72383be737abacb4e78ddbb59a3036798605": "Ybodychange",
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "776171b71897fde845e1f1c08f7bd2250e1b203d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5004: pitest: increase mutation coverage for pitest-checks-imports profile to 100%\n",
      "commitDate": "22/12/17 6:20 PM",
      "commitName": "776171b71897fde845e1f1c08f7bd2250e1b203d",
      "commitAuthor": "BBG",
      "commitDateOld": "14/11/17 5:16 PM",
      "commitNameOld": "32e2b7ba57e189074662d84a04535a87c3a19b0c",
      "commitAuthorOld": "Subbu Dantu",
      "daysBetweenCommits": 38.04,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n     private static int compareImports(String import1, String import2) {\n         int result \u003d 0;\n         final String separator \u003d \"\\\\.\";\n         final String[] import1Tokens \u003d import1.split(separator);\n         final String[] import2Tokens \u003d import2.split(separator);\n-        for (int i \u003d 0; i \u003c import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n+        for (int i \u003d 0; i !\u003d import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n             final String import1Token \u003d import1Tokens[i];\n             final String import2Token \u003d import2Tokens[i];\n             result \u003d import1Token.compareTo(import2Token);\n             if (result !\u003d 0) {\n                 break;\n             }\n         }\n+        if (result \u003d\u003d 0) {\n+            result \u003d Integer.compare(import1Tokens.length, import2Tokens.length);\n+        }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int compareImports(String import1, String import2) {\n        int result \u003d 0;\n        final String separator \u003d \"\\\\.\";\n        final String[] import1Tokens \u003d import1.split(separator);\n        final String[] import2Tokens \u003d import2.split(separator);\n        for (int i \u003d 0; i !\u003d import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareTo(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        if (result \u003d\u003d 0) {\n            result \u003d Integer.compare(import1Tokens.length, import2Tokens.length);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "26513d52336c42432ee21565b253297ba4174530": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": "25/08/15 5:20 AM",
      "commitName": "26513d52336c42432ee21565b253297ba4174530",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:40 PM",
      "commitNameOld": "697895a2056ecb1fdde0ba1f21a10cb96fc91322",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 5.36,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n     private static int compareImports(String import1, String import2) {\n         int result \u003d 0;\n-        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n-        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n+        final String separator \u003d \"\\\\.\";\n+        final String[] import1Tokens \u003d import1.split(separator);\n+        final String[] import2Tokens \u003d import2.split(separator);\n         for (int i \u003d 0; i \u003c import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n             final String import1Token \u003d import1Tokens[i];\n             final String import2Token \u003d import2Tokens[i];\n             result \u003d import1Token.compareTo(import2Token);\n             if (result !\u003d 0) {\n                 break;\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int compareImports(String import1, String import2) {\n        int result \u003d 0;\n        final String separator \u003d \"\\\\.\";\n        final String[] import1Tokens \u003d import1.split(separator);\n        final String[] import2Tokens \u003d import2.split(separator);\n        for (int i \u003d 0; i \u003c import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareTo(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "7770f2a2c25c41bf024355f19caac358419110a6": {
      "type": "Ybodychange",
      "commitMessage": "Loops have to have only one breal/continue. Issue #46\n",
      "commitDate": "12/08/15 9:08 PM",
      "commitName": "7770f2a2c25c41bf024355f19caac358419110a6",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "11/08/15 10:00 PM",
      "commitNameOld": "ea06b2fb96f2120ceee04a998021c1dc752e25d3",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n     private static int compareImports(String import1, String import2) {\n         int result \u003d 0;\n         final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n         final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n-        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n-            if (i \u003d\u003d import2Tokens.length) {\n-                break;\n-            }\n+        for (int i \u003d 0; i \u003c import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n             final String import1Token \u003d import1Tokens[i];\n             final String import2Token \u003d import2Tokens[i];\n             result \u003d import1Token.compareTo(import2Token);\n             if (result !\u003d 0) {\n                 break;\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int compareImports(String import1, String import2) {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length \u0026\u0026 i !\u003d import2Tokens.length; i++) {\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareTo(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "cbfe72383be737abacb4e78ddbb59a3036798605": {
      "type": "Ybodychange",
      "commitMessage": "CustomImportOrder checks import sorting according to ASCII order, fixes #847\n\nPreviously used \u0027ignoreCase\u0027 order is different than required ASCII order.\n",
      "commitDate": "25/03/15 9:00 PM",
      "commitName": "cbfe72383be737abacb4e78ddbb59a3036798605",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 10.28,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private static int compareImports(String import1, String import2)\n     {\n         int result \u003d 0;\n         final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n         final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n         for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n             if (i \u003d\u003d import2Tokens.length) {\n                 break;\n             }\n             final String import1Token \u003d import1Tokens[i];\n             final String import2Token \u003d import2Tokens[i];\n-            result \u003d import1Token.compareToIgnoreCase(import2Token);\n+            result \u003d import1Token.compareTo(import2Token);\n             if (result !\u003d 0) {\n                 break;\n             }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int compareImports(String import1, String import2)\n    {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n            if (i \u003d\u003d import2Tokens.length) {\n                break;\n            }\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareTo(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
      "commitDate": "28/01/15 10:17 PM",
      "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
          "commitDate": "28/01/15 10:17 PM",
          "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "19/01/15 6:38 AM",
          "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,18 @@\n-    private int compare(String currentImport, String previousImport)\n+    private static int compareImports(String import1, String import2)\n     {\n-        int indexOfPreviousDotCurrent \u003d 0;\n-        int indexOfNextDotCurrent \u003d 0;\n-        String tokenCurrent \u003d \"\";\n-        int indexOfPreviousDotPrevious \u003d 0;\n-        int indexOfNextDotPrevious \u003d 0;\n-        String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(currentImport);\n-        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n-\n-        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n-        {\n-            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n-                    indexOfNextDotCurrent);\n-            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n-                    indexOfNextDotPrevious);\n-            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n+        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n+        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n+        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n+            if (i \u003d\u003d import2Tokens.length) {\n+                break;\n+            }\n+            final String import1Token \u003d import1Tokens[i];\n+            final String import2Token \u003d import2Tokens[i];\n+            result \u003d import1Token.compareToIgnoreCase(import2Token);\n             if (result !\u003d 0) {\n-                return result;\n-            }\n-            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n-            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n-        }\n-\n-        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n-        {\n-            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return currentImportDomainCount - previousImportDomainCount;\n-            }\n-            else {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return getClassName(indexOfNextDotCurrent,\n-                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                previousImport));\n+                break;\n             }\n         }\n-        return 0;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int compareImports(String import1, String import2)\n    {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n            if (i \u003d\u003d import2Tokens.length) {\n                break;\n            }\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareToIgnoreCase(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "compare",
            "newValue": "compareImports"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
          "commitDate": "28/01/15 10:17 PM",
          "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "19/01/15 6:38 AM",
          "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,18 @@\n-    private int compare(String currentImport, String previousImport)\n+    private static int compareImports(String import1, String import2)\n     {\n-        int indexOfPreviousDotCurrent \u003d 0;\n-        int indexOfNextDotCurrent \u003d 0;\n-        String tokenCurrent \u003d \"\";\n-        int indexOfPreviousDotPrevious \u003d 0;\n-        int indexOfNextDotPrevious \u003d 0;\n-        String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(currentImport);\n-        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n-\n-        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n-        {\n-            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n-                    indexOfNextDotCurrent);\n-            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n-                    indexOfNextDotPrevious);\n-            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n+        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n+        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n+        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n+            if (i \u003d\u003d import2Tokens.length) {\n+                break;\n+            }\n+            final String import1Token \u003d import1Tokens[i];\n+            final String import2Token \u003d import2Tokens[i];\n+            result \u003d import1Token.compareToIgnoreCase(import2Token);\n             if (result !\u003d 0) {\n-                return result;\n-            }\n-            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n-            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n-        }\n-\n-        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n-        {\n-            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return currentImportDomainCount - previousImportDomainCount;\n-            }\n-            else {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return getClassName(indexOfNextDotCurrent,\n-                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                previousImport));\n+                break;\n             }\n         }\n-        return 0;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int compareImports(String import1, String import2)\n    {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n            if (i \u003d\u003d import2Tokens.length) {\n                break;\n            }\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareToIgnoreCase(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[currentImport-String, previousImport-String]",
            "newValue": "[import1-String, import2-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
          "commitDate": "28/01/15 10:17 PM",
          "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "19/01/15 6:38 AM",
          "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,18 @@\n-    private int compare(String currentImport, String previousImport)\n+    private static int compareImports(String import1, String import2)\n     {\n-        int indexOfPreviousDotCurrent \u003d 0;\n-        int indexOfNextDotCurrent \u003d 0;\n-        String tokenCurrent \u003d \"\";\n-        int indexOfPreviousDotPrevious \u003d 0;\n-        int indexOfNextDotPrevious \u003d 0;\n-        String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(currentImport);\n-        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n-\n-        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n-        {\n-            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n-                    indexOfNextDotCurrent);\n-            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n-                    indexOfNextDotPrevious);\n-            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n+        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n+        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n+        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n+            if (i \u003d\u003d import2Tokens.length) {\n+                break;\n+            }\n+            final String import1Token \u003d import1Tokens[i];\n+            final String import2Token \u003d import2Tokens[i];\n+            result \u003d import1Token.compareToIgnoreCase(import2Token);\n             if (result !\u003d 0) {\n-                return result;\n-            }\n-            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n-            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n-        }\n-\n-        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n-        {\n-            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return currentImportDomainCount - previousImportDomainCount;\n-            }\n-            else {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return getClassName(indexOfNextDotCurrent,\n-                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                previousImport));\n+                break;\n             }\n         }\n-        return 0;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int compareImports(String import1, String import2)\n    {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n            if (i \u003d\u003d import2Tokens.length) {\n                break;\n            }\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareToIgnoreCase(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Custom Import Order Check, rewrote compare method, issue #234\n",
          "commitDate": "28/01/15 10:17 PM",
          "commitName": "2ad4b0830d3892f718134e198a0bcbe9fbf5d8c7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "19/01/15 6:38 AM",
          "commitNameOld": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.65,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,18 @@\n-    private int compare(String currentImport, String previousImport)\n+    private static int compareImports(String import1, String import2)\n     {\n-        int indexOfPreviousDotCurrent \u003d 0;\n-        int indexOfNextDotCurrent \u003d 0;\n-        String tokenCurrent \u003d \"\";\n-        int indexOfPreviousDotPrevious \u003d 0;\n-        int indexOfNextDotPrevious \u003d 0;\n-        String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(currentImport);\n-        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n-\n-        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n-        {\n-            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n-                    indexOfNextDotCurrent);\n-            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n-                    indexOfNextDotPrevious);\n-            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n+        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n+        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n+        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n+            if (i \u003d\u003d import2Tokens.length) {\n+                break;\n+            }\n+            final String import1Token \u003d import1Tokens[i];\n+            final String import2Token \u003d import2Tokens[i];\n+            result \u003d import1Token.compareToIgnoreCase(import2Token);\n             if (result !\u003d 0) {\n-                return result;\n-            }\n-            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n-            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n-        }\n-\n-        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n-        {\n-            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return currentImportDomainCount - previousImportDomainCount;\n-            }\n-            else {\n-                getClassName(indexOfNextDotPrevious, previousImport);\n-                return getClassName(indexOfNextDotCurrent,\n-                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                previousImport));\n+                break;\n             }\n         }\n-        return 0;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int compareImports(String import1, String import2)\n    {\n        int result \u003d 0;\n        final String[] import1Tokens \u003d import1.split(\"\\\\.\");\n        final String[] import2Tokens \u003d import2.split(\"\\\\.\");\n        for (int i \u003d 0; i \u003c import1Tokens.length; i++) {\n            if (i \u003d\u003d import2Tokens.length) {\n                break;\n            }\n            final String import1Token \u003d import1Tokens[i];\n            final String import2Token \u003d import2Tokens[i];\n            result \u003d import1Token.compareToIgnoreCase(import2Token);\n            if (result !\u003d 0) {\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "02/11/14 11:48 AM",
          "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
          "commitAuthorOld": "sopov.ivan",
          "daysBetweenCommits": 77.78,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-    private int compare(String aCurrentImport, String aPreviousImport)\n+    private int compare(String currentImport, String previousImport)\n     {\n         int indexOfPreviousDotCurrent \u003d 0;\n         int indexOfNextDotCurrent \u003d 0;\n         String tokenCurrent \u003d \"\";\n         int indexOfPreviousDotPrevious \u003d 0;\n         int indexOfNextDotPrevious \u003d 0;\n         String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(aCurrentImport);\n-        final int previousImportDomainCount \u003d countDomains(aPreviousImport);\n+        final int currentImportDomainCount \u003d countDomains(currentImport);\n+        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n \n-        while (aCurrentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 aPreviousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n+        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n+                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n         {\n-            indexOfNextDotCurrent \u003d aCurrentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d aPreviousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d aCurrentImport.substring(indexOfPreviousDotCurrent,\n+            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n+            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n+            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n                     indexOfNextDotCurrent);\n-            tokenPrevious \u003d aPreviousImport.substring(indexOfPreviousDotPrevious,\n+            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n                     indexOfNextDotPrevious);\n             result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n             if (result !\u003d 0) {\n                 return result;\n             }\n             indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n             indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n         }\n \n-        if (result \u003d\u003d 0 \u0026\u0026 (aCurrentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || aPreviousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n+        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n+                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n         {\n             if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                getClassName(indexOfNextDotPrevious, previousImport);\n                 return currentImportDomainCount - previousImportDomainCount;\n             }\n             else {\n-                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                getClassName(indexOfNextDotPrevious, previousImport);\n                 return getClassName(indexOfNextDotCurrent,\n-                        aCurrentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                aPreviousImport));\n+                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n+                                previousImport));\n             }\n         }\n         return 0;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int compare(String currentImport, String previousImport)\n    {\n        int indexOfPreviousDotCurrent \u003d 0;\n        int indexOfNextDotCurrent \u003d 0;\n        String tokenCurrent \u003d \"\";\n        int indexOfPreviousDotPrevious \u003d 0;\n        int indexOfNextDotPrevious \u003d 0;\n        String tokenPrevious \u003d \"\";\n        final int currentImportDomainCount \u003d countDomains(currentImport);\n        final int previousImportDomainCount \u003d countDomains(previousImport);\n        int result \u003d 0;\n\n        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n        {\n            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n                    indexOfNextDotCurrent);\n            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n                    indexOfNextDotPrevious);\n            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n            if (result !\u003d 0) {\n                return result;\n            }\n            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n        }\n\n        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n        {\n            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n                getClassName(indexOfNextDotPrevious, previousImport);\n                return currentImportDomainCount - previousImportDomainCount;\n            }\n            else {\n                getClassName(indexOfNextDotPrevious, previousImport);\n                return getClassName(indexOfNextDotCurrent,\n                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n                                previousImport));\n            }\n        }\n        return 0;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[aCurrentImport-String, aPreviousImport-String]",
            "newValue": "[currentImport-String, previousImport-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "02/11/14 11:48 AM",
          "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
          "commitAuthorOld": "sopov.ivan",
          "daysBetweenCommits": 77.78,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-    private int compare(String aCurrentImport, String aPreviousImport)\n+    private int compare(String currentImport, String previousImport)\n     {\n         int indexOfPreviousDotCurrent \u003d 0;\n         int indexOfNextDotCurrent \u003d 0;\n         String tokenCurrent \u003d \"\";\n         int indexOfPreviousDotPrevious \u003d 0;\n         int indexOfNextDotPrevious \u003d 0;\n         String tokenPrevious \u003d \"\";\n-        final int currentImportDomainCount \u003d countDomains(aCurrentImport);\n-        final int previousImportDomainCount \u003d countDomains(aPreviousImport);\n+        final int currentImportDomainCount \u003d countDomains(currentImport);\n+        final int previousImportDomainCount \u003d countDomains(previousImport);\n         int result \u003d 0;\n \n-        while (aCurrentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n-                \u0026\u0026 aPreviousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n+        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n+                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n         {\n-            indexOfNextDotCurrent \u003d aCurrentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n-            indexOfNextDotPrevious \u003d aPreviousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n-            tokenCurrent \u003d aCurrentImport.substring(indexOfPreviousDotCurrent,\n+            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n+            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n+            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n                     indexOfNextDotCurrent);\n-            tokenPrevious \u003d aPreviousImport.substring(indexOfPreviousDotPrevious,\n+            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n                     indexOfNextDotPrevious);\n             result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n             if (result !\u003d 0) {\n                 return result;\n             }\n             indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n             indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n         }\n \n-        if (result \u003d\u003d 0 \u0026\u0026 (aCurrentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n-                || aPreviousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n+        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n+                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n         {\n             if (currentImportDomainCount !\u003d previousImportDomainCount) {\n-                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                getClassName(indexOfNextDotPrevious, previousImport);\n                 return currentImportDomainCount - previousImportDomainCount;\n             }\n             else {\n-                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                getClassName(indexOfNextDotPrevious, previousImport);\n                 return getClassName(indexOfNextDotCurrent,\n-                        aCurrentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n-                                aPreviousImport));\n+                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n+                                previousImport));\n             }\n         }\n         return 0;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int compare(String currentImport, String previousImport)\n    {\n        int indexOfPreviousDotCurrent \u003d 0;\n        int indexOfNextDotCurrent \u003d 0;\n        String tokenCurrent \u003d \"\";\n        int indexOfPreviousDotPrevious \u003d 0;\n        int indexOfNextDotPrevious \u003d 0;\n        String tokenPrevious \u003d \"\";\n        final int currentImportDomainCount \u003d countDomains(currentImport);\n        final int previousImportDomainCount \u003d countDomains(previousImport);\n        int result \u003d 0;\n\n        while (currentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n                \u0026\u0026 previousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n        {\n            indexOfNextDotCurrent \u003d currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n            indexOfNextDotPrevious \u003d previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n            tokenCurrent \u003d currentImport.substring(indexOfPreviousDotCurrent,\n                    indexOfNextDotCurrent);\n            tokenPrevious \u003d previousImport.substring(indexOfPreviousDotPrevious,\n                    indexOfNextDotPrevious);\n            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n            if (result !\u003d 0) {\n                return result;\n            }\n            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n        }\n\n        if (result \u003d\u003d 0 \u0026\u0026 (currentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n                || previousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n        {\n            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n                getClassName(indexOfNextDotPrevious, previousImport);\n                return currentImportDomainCount - previousImportDomainCount;\n            }\n            else {\n                getClassName(indexOfNextDotPrevious, previousImport);\n                return getClassName(indexOfNextDotCurrent,\n                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n                                previousImport));\n            }\n        }\n        return 0;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "2a3be6769c4a97d090970ed52ca2333cb9aea706": {
      "type": "Yintroduced",
      "commitMessage": "CustomImportOrder was introduced #231\n",
      "commitDate": "10/08/14 4:52 AM",
      "commitName": "2a3be6769c4a97d090970ed52ca2333cb9aea706",
      "commitAuthor": "Max",
      "diff": "@@ -0,0 +1,45 @@\n+    private int compare(String aCurrentImport, String aPreviousImport)\n+    {\n+        int indexOfPreviousDotCurrent \u003d 0;\n+        int indexOfNextDotCurrent \u003d 0;\n+        String tokenCurrent \u003d \"\";\n+        int indexOfPreviousDotPrevious \u003d 0;\n+        int indexOfNextDotPrevious \u003d 0;\n+        String tokenPrevious \u003d \"\";\n+        final int currentImportDomainCount \u003d countDomains(aCurrentImport);\n+        final int previousImportDomainCount \u003d countDomains(aPreviousImport);\n+        int result \u003d 0;\n+\n+        while (aCurrentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n+                \u0026\u0026 aPreviousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n+        {\n+            indexOfNextDotCurrent \u003d aCurrentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n+            indexOfNextDotPrevious \u003d aPreviousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n+            tokenCurrent \u003d aCurrentImport.substring(indexOfPreviousDotCurrent,\n+                    indexOfNextDotCurrent);\n+            tokenPrevious \u003d aPreviousImport.substring(indexOfPreviousDotPrevious,\n+                    indexOfNextDotPrevious);\n+            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n+            if (result !\u003d 0) {\n+                return result;\n+            }\n+            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n+            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n+        }\n+\n+        if (result \u003d\u003d 0 \u0026\u0026 (aCurrentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n+                || aPreviousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n+        {\n+            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n+                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                return currentImportDomainCount - previousImportDomainCount;\n+            }\n+            else {\n+                getClassName(indexOfNextDotPrevious, aPreviousImport);\n+                return getClassName(indexOfNextDotCurrent,\n+                        aCurrentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n+                                aPreviousImport));\n+            }\n+        }\n+        return 0;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int compare(String aCurrentImport, String aPreviousImport)\n    {\n        int indexOfPreviousDotCurrent \u003d 0;\n        int indexOfNextDotCurrent \u003d 0;\n        String tokenCurrent \u003d \"\";\n        int indexOfPreviousDotPrevious \u003d 0;\n        int indexOfNextDotPrevious \u003d 0;\n        String tokenPrevious \u003d \"\";\n        final int currentImportDomainCount \u003d countDomains(aCurrentImport);\n        final int previousImportDomainCount \u003d countDomains(aPreviousImport);\n        int result \u003d 0;\n\n        while (aCurrentImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotCurrent - 1\n                \u0026\u0026 aPreviousImport.lastIndexOf(\".\") !\u003d indexOfPreviousDotPrevious - 1)\n        {\n            indexOfNextDotCurrent \u003d aCurrentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);\n            indexOfNextDotPrevious \u003d aPreviousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);\n            tokenCurrent \u003d aCurrentImport.substring(indexOfPreviousDotCurrent,\n                    indexOfNextDotCurrent);\n            tokenPrevious \u003d aPreviousImport.substring(indexOfPreviousDotPrevious,\n                    indexOfNextDotPrevious);\n            result \u003d tokenCurrent.compareToIgnoreCase(tokenPrevious);\n            if (result !\u003d 0) {\n                return result;\n            }\n            indexOfPreviousDotCurrent \u003d indexOfNextDotCurrent + 1;\n            indexOfPreviousDotPrevious \u003d indexOfNextDotPrevious + 1;\n        }\n\n        if (result \u003d\u003d 0 \u0026\u0026 (aCurrentImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotCurrent - 1\n                || aPreviousImport.lastIndexOf(\".\") \u003d\u003d indexOfPreviousDotPrevious - 1))\n        {\n            if (currentImportDomainCount !\u003d previousImportDomainCount) {\n                getClassName(indexOfNextDotPrevious, aPreviousImport);\n                return currentImportDomainCount - previousImportDomainCount;\n            }\n            else {\n                getClassName(indexOfNextDotPrevious, aPreviousImport);\n                return getClassName(indexOfNextDotCurrent,\n                        aCurrentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,\n                                aPreviousImport));\n            }\n        }\n        return 0;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java"
    }
  }
}