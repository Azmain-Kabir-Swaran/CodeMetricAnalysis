{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImportOrderCheck.java",
  "functionName": "doVisitTokenInSameGroup",
  "functionId": "doVisitTokenInSameGroup___isStatic-boolean__previous-boolean__name-String__ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
  "functionStartLine": 741,
  "functionEndLine": 766,
  "numCommitsSeen": 225,
  "timeTaken": 3594,
  "changeHistory": [
    "57c244fcf81bf0ed6658e7cabb82d5091075e591",
    "d8c2a7263ac4fb5b10c7f5959046da87c8ef8efd",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab",
    "2c23e07558b15944638601a2620fa6aefd12ec2a",
    "f8e11359b806f6ad49855500708a622daf214c1e",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "139609ac5d073ecb04381466f075f174b0aec8c9",
    "22136c67e9c83494e7aa977ffe7a79beee1b4175"
  ],
  "changeHistoryShort": {
    "57c244fcf81bf0ed6658e7cabb82d5091075e591": "Ymultichange(Yparameterchange,Ybodychange)",
    "d8c2a7263ac4fb5b10c7f5959046da87c8ef8efd": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": "Ybodychange",
    "2c23e07558b15944638601a2620fa6aefd12ec2a": "Ybodychange",
    "f8e11359b806f6ad49855500708a622daf214c1e": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9": "Ybodychange",
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Yparameterchange",
    "139609ac5d073ecb04381466f075f174b0aec8c9": "Ybodychange",
    "22136c67e9c83494e7aa977ffe7a79beee1b4175": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57c244fcf81bf0ed6658e7cabb82d5091075e591": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #7733: Update AbstractChecks to log DetailAST - ImportOrder\n",
      "commitDate": "19/03/20 10:54 AM",
      "commitName": "57c244fcf81bf0ed6658e7cabb82d5091075e591",
      "commitAuthor": "kaustubh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #7733: Update AbstractChecks to log DetailAST - ImportOrder\n",
          "commitDate": "19/03/20 10:54 AM",
          "commitName": "57c244fcf81bf0ed6658e7cabb82d5091075e591",
          "commitAuthor": "kaustubh",
          "commitDateOld": "01/01/20 4:38 PM",
          "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 77.72,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n-            boolean previous, String name, int line) {\n+            boolean previous, String name, DetailAST ast) {\n         if (ordered) {\n             if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                 if (isWrongOrder(name, isStatic)) {\n-                    log(line, MSG_ORDERING, name);\n+                    log(ast, MSG_ORDERING, name);\n                 }\n             }\n             else {\n                 final boolean shouldFireError \u003d\n                     // previous non-static but current is static (above)\n                     // or\n                     // previous static but current is non-static (under)\n                     previous\n                         ||\n                         // current and previous static or current and\n                         // previous non-static\n                         lastImportStatic \u003d\u003d isStatic\n                     \u0026\u0026 isWrongOrder(name, isStatic);\n \n                 if (shouldFireError) {\n-                    log(line, MSG_ORDERING, name);\n+                    log(ast, MSG_ORDERING, name);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, DetailAST ast) {\n        if (ordered) {\n            if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                if (isWrongOrder(name, isStatic)) {\n                    log(ast, MSG_ORDERING, name);\n                }\n            }\n            else {\n                final boolean shouldFireError \u003d\n                    // previous non-static but current is static (above)\n                    // or\n                    // previous static but current is non-static (under)\n                    previous\n                        ||\n                        // current and previous static or current and\n                        // previous non-static\n                        lastImportStatic \u003d\u003d isStatic\n                    \u0026\u0026 isWrongOrder(name, isStatic);\n\n                if (shouldFireError) {\n                    log(ast, MSG_ORDERING, name);\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[isStatic-boolean, previous-boolean, name-String, line-int]",
            "newValue": "[isStatic-boolean, previous-boolean, name-String, ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #7733: Update AbstractChecks to log DetailAST - ImportOrder\n",
          "commitDate": "19/03/20 10:54 AM",
          "commitName": "57c244fcf81bf0ed6658e7cabb82d5091075e591",
          "commitAuthor": "kaustubh",
          "commitDateOld": "01/01/20 4:38 PM",
          "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 77.72,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n-            boolean previous, String name, int line) {\n+            boolean previous, String name, DetailAST ast) {\n         if (ordered) {\n             if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                 if (isWrongOrder(name, isStatic)) {\n-                    log(line, MSG_ORDERING, name);\n+                    log(ast, MSG_ORDERING, name);\n                 }\n             }\n             else {\n                 final boolean shouldFireError \u003d\n                     // previous non-static but current is static (above)\n                     // or\n                     // previous static but current is non-static (under)\n                     previous\n                         ||\n                         // current and previous static or current and\n                         // previous non-static\n                         lastImportStatic \u003d\u003d isStatic\n                     \u0026\u0026 isWrongOrder(name, isStatic);\n \n                 if (shouldFireError) {\n-                    log(line, MSG_ORDERING, name);\n+                    log(ast, MSG_ORDERING, name);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, DetailAST ast) {\n        if (ordered) {\n            if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                if (isWrongOrder(name, isStatic)) {\n                    log(ast, MSG_ORDERING, name);\n                }\n            }\n            else {\n                final boolean shouldFireError \u003d\n                    // previous non-static but current is static (above)\n                    // or\n                    // previous static but current is non-static (under)\n                    previous\n                        ||\n                        // current and previous static or current and\n                        // previous non-static\n                        lastImportStatic \u003d\u003d isStatic\n                    \u0026\u0026 isWrongOrder(name, isStatic);\n\n                if (shouldFireError) {\n                    log(ast, MSG_ORDERING, name);\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "d8c2a7263ac4fb5b10c7f5959046da87c8ef8efd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3101: Add new \u0027useContainerOrderingForStatic\u0027 option for ImportOrderCheck (#3337)\n\n",
      "commitDate": "06/07/16 10:16 AM",
      "commitName": "d8c2a7263ac4fb5b10c7f5959046da87c8ef8efd",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "27/05/16 6:42 AM",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 40.15,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line) {\n         if (ordered) {\n             if (option \u003d\u003d ImportOrderOption.INFLOW) {\n-                // out of lexicographic order\n-                if (compare(lastImport, name, caseSensitive) \u003e 0) {\n+                if (isWrongOrder(name, isStatic)) {\n                     log(line, MSG_ORDERING, name);\n                 }\n             }\n             else {\n                 final boolean shouldFireError \u003d\n                     // previous non-static but current is static (above)\n                     // or\n                     // previous static but current is non-static (under)\n                     previous\n                         ||\n                         // current and previous static or current and\n                         // previous non-static\n                         lastImportStatic \u003d\u003d isStatic\n-                    \u0026\u0026\n-                    // and out of lexicographic order\n-                    compare(lastImport, name, caseSensitive) \u003e 0;\n+                    \u0026\u0026 isWrongOrder(name, isStatic);\n \n                 if (shouldFireError) {\n                     log(line, MSG_ORDERING, name);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line) {\n        if (ordered) {\n            if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                if (isWrongOrder(name, isStatic)) {\n                    log(line, MSG_ORDERING, name);\n                }\n            }\n            else {\n                final boolean shouldFireError \u003d\n                    // previous non-static but current is static (above)\n                    // or\n                    // previous static but current is non-static (under)\n                    previous\n                        ||\n                        // current and previous static or current and\n                        // previous non-static\n                        lastImportStatic \u003d\u003d isStatic\n                    \u0026\u0026 isWrongOrder(name, isStatic);\n\n                if (shouldFireError) {\n                    log(line, MSG_ORDERING, name);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line) {\n-        if (!ordered) {\n-            return;\n-        }\n-\n-        if (option \u003d\u003d ImportOrderOption.INFLOW) {\n-            // out of lexicographic order\n-            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n-                log(line, MSG_ORDERING, name);\n+        if (ordered) {\n+            if (option \u003d\u003d ImportOrderOption.INFLOW) {\n+                // out of lexicographic order\n+                if (compare(lastImport, name, caseSensitive) \u003e 0) {\n+                    log(line, MSG_ORDERING, name);\n+                }\n             }\n-        }\n-        else {\n-            final boolean shouldFireError \u003d\n-                // previous non-static but current is static (above)\n-                // or\n-                // previous static but current is non-static (under)\n-                previous\n-                    ||\n-                    // current and previous static or current and\n-                    // previous non-static\n-                    lastImportStatic \u003d\u003d isStatic\n-                \u0026\u0026\n-                // and out of lexicographic order\n-                compare(lastImport, name, caseSensitive) \u003e 0;\n+            else {\n+                final boolean shouldFireError \u003d\n+                    // previous non-static but current is static (above)\n+                    // or\n+                    // previous static but current is non-static (under)\n+                    previous\n+                        ||\n+                        // current and previous static or current and\n+                        // previous non-static\n+                        lastImportStatic \u003d\u003d isStatic\n+                    \u0026\u0026\n+                    // and out of lexicographic order\n+                    compare(lastImport, name, caseSensitive) \u003e 0;\n \n-            if (shouldFireError) {\n-                log(line, MSG_ORDERING, name);\n+                if (shouldFireError) {\n+                    log(line, MSG_ORDERING, name);\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line) {\n        if (ordered) {\n            if (option \u003d\u003d ImportOrderOption.INFLOW) {\n                // out of lexicographic order\n                if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                    log(line, MSG_ORDERING, name);\n                }\n            }\n            else {\n                final boolean shouldFireError \u003d\n                    // previous non-static but current is static (above)\n                    // or\n                    // previous static but current is non-static (under)\n                    previous\n                        ||\n                        // current and previous static or current and\n                        // previous non-static\n                        lastImportStatic \u003d\u003d isStatic\n                    \u0026\u0026\n                    // and out of lexicographic order\n                    compare(lastImport, name, caseSensitive) \u003e 0;\n\n                if (shouldFireError) {\n                    log(line, MSG_ORDERING, name);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "6ee4a0f805d528cdee03cfc175502d15b5722dab": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce LogicConditionNeedOptimizationCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "24/12/15 1:59 PM",
      "commitName": "6ee4a0f805d528cdee03cfc175502d15b5722dab",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "22/12/15 8:55 AM",
      "commitNameOld": "2c23e07558b15944638601a2620fa6aefd12ec2a",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 2.21,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line) {\n         if (!ordered) {\n             return;\n         }\n \n         if (option \u003d\u003d ImportOrderOption.INFLOW) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n-                // current and previous static or current and\n-                // previous non-static\n-                lastImportStatic \u003d\u003d isStatic\n-                \u0026\u0026\n-                        // and out of lexicographic order\n-                        compare(lastImport, name, caseSensitive) \u003e 0\n-                ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n-                previous;\n+                previous\n+                    ||\n+                    // current and previous static or current and\n+                    // previous non-static\n+                    lastImportStatic \u003d\u003d isStatic\n+                \u0026\u0026\n+                // and out of lexicographic order\n+                compare(lastImport, name, caseSensitive) \u003e 0;\n \n             if (shouldFireError) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line) {\n        if (!ordered) {\n            return;\n        }\n\n        if (option \u003d\u003d ImportOrderOption.INFLOW) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous\n                    ||\n                    // current and previous static or current and\n                    // previous non-static\n                    lastImportStatic \u003d\u003d isStatic\n                \u0026\u0026\n                // and out of lexicographic order\n                compare(lastImport, name, caseSensitive) \u003e 0;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "2c23e07558b15944638601a2620fa6aefd12ec2a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce SimpleAccessorNameNotation of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "22/12/15 8:55 AM",
      "commitName": "2c23e07558b15944638601a2620fa6aefd12ec2a",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "12/12/15 4:03 PM",
      "commitNameOld": "f8e11359b806f6ad49855500708a622daf214c1e",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 9.7,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line) {\n         if (!ordered) {\n             return;\n         }\n \n-        if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n+        if (option \u003d\u003d ImportOrderOption.INFLOW) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n                 lastImportStatic \u003d\u003d isStatic\n                 \u0026\u0026\n                         // and out of lexicographic order\n                         compare(lastImport, name, caseSensitive) \u003e 0\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 previous;\n \n             if (shouldFireError) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line) {\n        if (!ordered) {\n            return;\n        }\n\n        if (option \u003d\u003d ImportOrderOption.INFLOW) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                lastImportStatic \u003d\u003d isStatic\n                \u0026\u0026\n                        // and out of lexicographic order\n                        compare(lastImport, name, caseSensitive) \u003e 0\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "f8e11359b806f6ad49855500708a622daf214c1e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: !(lastImportStatic ^ isStatic) can be simplified to \u0027lastImportStatic\u003d\u003disStatic\u0027 TCBuild\u003d436\n",
      "commitDate": "12/12/15 4:03 PM",
      "commitName": "f8e11359b806f6ad49855500708a622daf214c1e",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/11/15 3:06 PM",
      "commitNameOld": "84c72ec3202ed9c2dff66ba3f5136a38af4ce95c",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 25.04,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line) {\n         if (!ordered) {\n             return;\n         }\n \n         if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n-                !(lastImportStatic ^ isStatic)\n+                lastImportStatic \u003d\u003d isStatic\n                 \u0026\u0026\n                         // and out of lexicographic order\n                         compare(lastImport, name, caseSensitive) \u003e 0\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 previous;\n \n             if (shouldFireError) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line) {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                lastImportStatic \u003d\u003d isStatic\n                \u0026\u0026\n                        // and out of lexicographic order\n                        compare(lastImport, name, caseSensitive) \u003e 0\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "10/03/15 7:46 AM",
      "commitNameOld": "89005ddf6d5d8b494e4451d16df9fd8996c735a9",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line)\n     {\n         if (!ordered) {\n             return;\n         }\n \n         if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n-                (!(lastImportStatic ^ isStatic)\n+                !(lastImportStatic ^ isStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n-                (compare(lastImport, name, caseSensitive) \u003e 0))\n+                        compare(lastImport, name, caseSensitive) \u003e 0\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 previous;\n \n             if (shouldFireError) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line)\n    {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                !(lastImportStatic ^ isStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                        compare(lastImport, name, caseSensitive) \u003e 0\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9": {
      "type": "Ybodychange",
      "commitMessage": "Replace calls to equals() on enums with identity comparison\n\nThis replacement is safe because two enum constants are equal only when they have the same identity.\n",
      "commitDate": "10/03/15 7:46 AM",
      "commitName": "89005ddf6d5d8b494e4451d16df9fd8996c735a9",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.07,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line)\n     {\n         if (!ordered) {\n             return;\n         }\n \n-        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n+        if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n                 (!(lastImportStatic ^ isStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n                 (compare(lastImport, name, caseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 previous;\n \n             if (shouldFireError) {\n                 log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line)\n    {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption() \u003d\u003d ImportOrderOption.INFLOW) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(lastImportStatic ^ isStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(lastImport, name, caseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, imports package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void doVisitTokenInSameGroup(boolean isStatic,\n             boolean previous, String name, int line)\n     {\n         if (!ordered) {\n             return;\n         }\n \n         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n             // out of lexicographic order\n             if (compare(lastImport, name, caseSensitive) \u003e 0) {\n-                log(line, \"import.ordering\", name);\n+                log(line, MSG_ORDERING, name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n                 (!(lastImportStatic ^ isStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n                 (compare(lastImport, name, caseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 previous;\n \n             if (shouldFireError) {\n-                log(line, \"import.ordering\", name);\n+                log(line, MSG_ORDERING, name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line)\n    {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(lastImportStatic ^ isStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(lastImport, name, caseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, MSG_ORDERING, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    private void doVisitTokenInSameGroup(boolean aIsStatic,\n-            boolean aPrevious, String aName, int aLine)\n+    private void doVisitTokenInSameGroup(boolean isStatic,\n+            boolean previous, String name, int line)\n     {\n-        if (!mOrdered) {\n+        if (!ordered) {\n             return;\n         }\n \n         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n             // out of lexicographic order\n-            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n-                log(aLine, \"import.ordering\", aName);\n+            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n+                log(line, \"import.ordering\", name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n-                (!(mLastImportStatic ^ aIsStatic)\n+                (!(lastImportStatic ^ isStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n-                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n+                (compare(lastImport, name, caseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n-                aPrevious;\n+                previous;\n \n             if (shouldFireError) {\n-                log(aLine, \"import.ordering\", aName);\n+                log(line, \"import.ordering\", name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line)\n    {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, \"import.ordering\", name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(lastImportStatic ^ isStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(lastImport, name, caseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, \"import.ordering\", name);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[aIsStatic-boolean, aPrevious-boolean, aName-String, aLine-int]",
            "newValue": "[isStatic-boolean, previous-boolean, name-String, line-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 471,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    private void doVisitTokenInSameGroup(boolean aIsStatic,\n-            boolean aPrevious, String aName, int aLine)\n+    private void doVisitTokenInSameGroup(boolean isStatic,\n+            boolean previous, String name, int line)\n     {\n-        if (!mOrdered) {\n+        if (!ordered) {\n             return;\n         }\n \n         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n             // out of lexicographic order\n-            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n-                log(aLine, \"import.ordering\", aName);\n+            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n+                log(line, \"import.ordering\", name);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n-                (!(mLastImportStatic ^ aIsStatic)\n+                (!(lastImportStatic ^ isStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n-                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n+                (compare(lastImport, name, caseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n-                aPrevious;\n+                previous;\n \n             if (shouldFireError) {\n-                log(aLine, \"import.ordering\", aName);\n+                log(line, \"import.ordering\", name);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doVisitTokenInSameGroup(boolean isStatic,\n            boolean previous, String name, int line)\n    {\n        if (!ordered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(lastImport, name, caseSensitive) \u003e 0) {\n                log(line, \"import.ordering\", name);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(lastImportStatic ^ isStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(lastImport, name, caseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                previous;\n\n            if (shouldFireError) {\n                log(line, \"import.ordering\", name);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean aIsStatic,\n            boolean aPrevious, String aName, int aLine)\n    {\n        if (!mOrdered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(mLastImportStatic ^ aIsStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                aPrevious;\n\n            if (shouldFireError) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Yparameterchange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "05/12/13 9:12 AM",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "04/10/13 9:22 PM",
      "commitNameOld": "788f87df4db1368ee0563e1ba1199177618cc01f",
      "commitAuthorOld": "picomancer",
      "daysBetweenCommits": 61.54,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-    private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,\n+    private void doVisitTokenInSameGroup(boolean aIsStatic,\n             boolean aPrevious, String aName, int aLine)\n     {\n         if (!mOrdered) {\n             return;\n         }\n \n         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n             // out of lexicographic order\n             if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n                 log(aLine, \"import.ordering\", aName);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n                 (!(mLastImportStatic ^ aIsStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n                 (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 aPrevious;\n \n             if (shouldFireError) {\n                 log(aLine, \"import.ordering\", aName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(boolean aIsStatic,\n            boolean aPrevious, String aName, int aLine)\n    {\n        if (!mOrdered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(mLastImportStatic ^ aIsStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                aPrevious;\n\n            if (shouldFireError) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {
        "oldValue": "[aIdent-FullIdent, aIsStatic-boolean, aPrevious-boolean, aName-String, aLine-int]",
        "newValue": "[aIsStatic-boolean, aPrevious-boolean, aName-String, aLine-int]"
      }
    },
    "139609ac5d073ecb04381466f075f174b0aec8c9": {
      "type": "Ybodychange",
      "commitMessage": "Fixed ImportOrder to have the sort behaviour as in release 5.0. (bug #2952881). Thanks to Steve McKay for patch #2953936.\n",
      "commitDate": "18/02/10 3:16 AM",
      "commitName": "139609ac5d073ecb04381466f075f174b0aec8c9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "12/02/10 6:57 PM",
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,\n             boolean aPrevious, String aName, int aLine)\n     {\n         if (!mOrdered) {\n             return;\n         }\n \n         if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n             // out of lexicographic order\n-            if (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0) {\n+            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n                 log(aLine, \"import.ordering\", aName);\n             }\n         }\n         else {\n             final boolean shouldFireError \u003d\n                 // current and previous static or current and\n                 // previous non-static\n                 (!(mLastImportStatic ^ aIsStatic)\n                 \u0026\u0026\n                 // and out of lexicographic order\n-                (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0))\n+                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n                 ||\n                 // previous non-static but current is static (above)\n                 // or\n                 // previous static but current is non-static (under)\n                 aPrevious;\n \n             if (shouldFireError) {\n                 log(aLine, \"import.ordering\", aName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,\n            boolean aPrevious, String aName, int aLine)\n    {\n        if (!mOrdered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(mLastImport, aName, mCaseSensitive) \u003e 0) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(mLastImportStatic ^ aIsStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(mLastImport, aName, mCaseSensitive) \u003e 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                aPrevious;\n\n            if (shouldFireError) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java",
      "extendedDetails": {}
    },
    "22136c67e9c83494e7aa977ffe7a79beee1b4175": {
      "type": "Yintroduced",
      "commitMessage": "Add new options to the ImportOrderCheck to make it more flexible. Thanks to David Didier for providing patch #1854213.\n",
      "commitDate": "07/09/08 4:28 AM",
      "commitName": "22136c67e9c83494e7aa977ffe7a79beee1b4175",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,32 @@\n+    private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,\n+            boolean aPrevious, String aName, int aLine)\n+    {\n+        if (!mOrdered) {\n+            return;\n+        }\n+\n+        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n+            // out of lexicographic order\n+            if (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0) {\n+                log(aLine, \"import.ordering\", aName);\n+            }\n+        }\n+        else {\n+            final boolean shouldFireError \u003d\n+                // current and previous static or current and\n+                // previous non-static\n+                (!(mLastImportStatic ^ aIsStatic)\n+                \u0026\u0026\n+                // and out of lexicographic order\n+                (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0))\n+                ||\n+                // previous non-static but current is static (above)\n+                // or\n+                // previous static but current is non-static (under)\n+                aPrevious;\n+\n+            if (shouldFireError) {\n+                log(aLine, \"import.ordering\", aName);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,\n            boolean aPrevious, String aName, int aLine)\n    {\n        if (!mOrdered) {\n            return;\n        }\n\n        if (getAbstractOption().equals(ImportOrderOption.INFLOW)) {\n            // out of lexicographic order\n            if (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n        else {\n            final boolean shouldFireError \u003d\n                // current and previous static or current and\n                // previous non-static\n                (!(mLastImportStatic ^ aIsStatic)\n                \u0026\u0026\n                // and out of lexicographic order\n                (compare(mLastImport, aName, mCaseSensitive) \u003e\u003d 0))\n                ||\n                // previous non-static but current is static (above)\n                // or\n                // previous static but current is non-static (under)\n                aPrevious;\n\n            if (shouldFireError) {\n                log(aLine, \"import.ordering\", aName);\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java"
    }
  }
}