{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EqualsHashCodeCheck.java",
  "functionName": "isHashCodeMethod",
  "functionId": "isHashCodeMethod___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
  "functionStartLine": 187,
  "functionEndLine": 196,
  "numCommitsSeen": 43,
  "timeTaken": 1413,
  "changeHistory": [
    "114a62c287d60286d40ef680afd6df224c8c6069",
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7"
  ],
  "changeHistoryShort": {
    "114a62c287d60286d40ef680afd6df224c8c6069": "Ybodychange",
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": "Ybodychange",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "114a62c287d60286d40ef680afd6df224c8c6069": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: resolve remove conditional for EqualsHashCodeCheck",
      "commitDate": "02/10/19 9:11 PM",
      "commitName": "114a62c287d60286d40ef680afd6df224c8c6069",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/05/19 9:49 AM",
      "commitNameOld": "ed12db011ca311d19b6d22fd13ed7420e408b34a",
      "commitAuthorOld": "Andrei Paikin",
      "daysBetweenCommits": 138.47,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,10 @@\n     private static boolean isHashCodeMethod(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n-        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final DetailAST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n-        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n-                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n-                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n-                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n+        return \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                 \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                         || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isHashCodeMethod(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final DetailAST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        return \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": {
      "type": "Ybodychange",
      "commitMessage": "minor: remove unnecessary antlr classes from main code",
      "commitDate": "30/03/19 5:55 AM",
      "commitName": "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/03/19 5:29 AM",
      "commitNameOld": "f4769cc700f4bb8b3296f08fecc47b4c3e5d5d4b",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 10.02,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private static boolean isHashCodeMethod(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n-        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n-        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final DetailAST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n                 \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                 \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                         || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isHashCodeMethod(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final DetailAST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for simple cases",
      "commitDate": "09/11/17 6:45 AM",
      "commitName": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthor": "rnveach",
      "commitDateOld": "30/10/17 6:16 PM",
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 9.56,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private static boolean isHashCodeMethod(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n                 \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n-                \u0026\u0026 (ast.branchContains(TokenTypes.SLIST)\n+                \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                         || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isHashCodeMethod(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                \u0026\u0026 (ast.findFirstToken(TokenTypes.SLIST) !\u003d null\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/09/17 6:28 AM",
      "commitNameOld": "b0493771961c1fd89c96271b397da62699877551",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 31.56,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private static boolean isHashCodeMethod(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n-                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n+                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n+                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                 \u0026\u0026 (ast.branchContains(TokenTypes.SLIST)\n-                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE));\n+                        || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isHashCodeMethod(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) !\u003d null\n                \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                \u0026\u0026 (ast.branchContains(TokenTypes.SLIST)\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_NATIVE) !\u003d null);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3308: fixed EqualsHashCode equals method parameter test (#3407)\n\n",
      "commitDate": "29/09/16 4:10 AM",
      "commitName": "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,14 @@\n+    private static boolean isHashCodeMethod(DetailAST ast) {\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n+        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n+\n+        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n+                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n+                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n+                \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n+                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n+                \u0026\u0026 (ast.branchContains(TokenTypes.SLIST)\n+                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isHashCodeMethod(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        return type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null\n                \u0026\u0026 (ast.branchContains(TokenTypes.SLIST)\n                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java"
    }
  }
}