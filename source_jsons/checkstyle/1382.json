{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RightCurlyCheck.java",
  "functionName": "validate",
  "functionId": "validate___details-Details",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
  "functionStartLine": 302,
  "functionEndLine": 314,
  "numCommitsSeen": 177,
  "timeTaken": 3749,
  "changeHistory": [
    "1e528d6988aa11c9b06caa7daf88d3edec0add6f",
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576",
    "e76321214095de771762216c5dbbe3db0203c541",
    "70ab9f4af3d163b940e025bc4665f2f23892525a",
    "2551676ccf743822951d42658085c70e7aa869bd",
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e",
    "b576ccf8793690e8459a6620cc1611531f3f9890",
    "f32bcd07ee2791708e97c5202ad688a84605d375",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1",
    "d282d5b8db9eba5943d1cb0269315744d5344a47",
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
    "c99f34002b7340ec8d0888f8f9b3992df798e408"
  ],
  "changeHistoryShort": {
    "1e528d6988aa11c9b06caa7daf88d3edec0add6f": "Ybodychange",
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576": "Ybodychange",
    "e76321214095de771762216c5dbbe3db0203c541": "Ybodychange",
    "70ab9f4af3d163b940e025bc4665f2f23892525a": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "2551676ccf743822951d42658085c70e7aa869bd": "Ybodychange",
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2": "Ybodychange",
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e": "Ybodychange",
    "b576ccf8793690e8459a6620cc1611531f3f9890": "Ybodychange",
    "f32bcd07ee2791708e97c5202ad688a84605d375": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1": "Ybodychange",
    "d282d5b8db9eba5943d1cb0269315744d5344a47": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd": "Ybodychange",
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": "Ybodychange",
    "c99f34002b7340ec8d0888f8f9b3992df798e408": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1e528d6988aa11c9b06caa7daf88d3edec0add6f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4022: Removed shouldStartLine property for RightCurly\n",
      "commitDate": "10/01/19 12:22 PM",
      "commitName": "1e528d6988aa11c9b06caa7daf88d3edec0add6f",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": "10/01/19 12:17 PM",
      "commitNameOld": "3316f0b1a179c3ecd2ca3c21d9a81129282ba630",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,13 @@\n     private String validate(Details details) {\n         String violation \u003d \"\";\n         if (shouldHaveLineBreakBefore(option, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(option, details)) {\n+        else if (shouldBeAloneOnLine(option, details, getLine(details.rcurly.getLineNo() - 1))) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine) {\n-            final String targetSourceLine \u003d getLines()[details.rcurly.getLineNo() - 1];\n-            if (!isOnStartOfLine(details, targetSourceLine)) {\n-                violation \u003d MSG_KEY_LINE_NEW;\n-            }\n-        }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String validate(Details details) {\n        String violation \u003d \"\";\n        if (shouldHaveLineBreakBefore(option, details)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details, getLine(details.rcurly.getLineNo() - 1))) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "e0bb421ead241b65c5d8b4acafe5f8247aea8576": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4091: False negative on multiblock tokens with ALONE_OR_SINGLELINE option\n",
      "commitDate": "05/04/17 7:21 AM",
      "commitName": "e0bb421ead241b65c5d8b4acafe5f8247aea8576",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": "20/03/17 1:39 PM",
      "commitNameOld": "e76321214095de771762216c5dbbe3db0203c541",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 15.74,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,19 @@\n     private String validate(Details details) {\n-        final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST nextToken \u003d details.nextToken;\n-        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n         if (shouldHaveLineBreakBefore(option, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n-        else if (shouldCheckLastRcurly\n-                 \u0026\u0026 option !\u003d RightCurlyOption.ALONE) {\n-            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                violation \u003d MSG_KEY_LINE_ALONE;\n-            }\n-        }\n         else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n-            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            final String targetSourceLine \u003d getLines()[details.rcurly.getLineNo() - 1];\n             if (!isOnStartOfLine(details, targetSourceLine)) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String validate(Details details) {\n        String violation \u003d \"\";\n        if (shouldHaveLineBreakBefore(option, details)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final String targetSourceLine \u003d getLines()[details.rcurly.getLineNo() - 1];\n            if (!isOnStartOfLine(details, targetSourceLine)) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "e76321214095de771762216c5dbbe3db0203c541": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4044: Fix false negative in ALONE while checking single line if blocks\n",
      "commitDate": "20/03/17 1:39 PM",
      "commitName": "e76321214095de771762216c5dbbe3db0203c541",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "18/03/17 8:26 PM",
      "commitNameOld": "d2ddf5c6fc6b816dce7566dd5beaff5c5841f679",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.72,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n     private String validate(Details details) {\n         final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n-        if (option \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)\n-                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+        if (shouldHaveLineBreakBefore(option, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n-        else if (shouldCheckLastRcurly) {\n+        else if (shouldCheckLastRcurly\n+                 \u0026\u0026 option !\u003d RightCurlyOption.ALONE) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n             if (!isOnStartOfLine(details, targetSourceLine)) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private String validate(Details details) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n        if (shouldHaveLineBreakBefore(option, details)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly\n                 \u0026\u0026 option !\u003d RightCurlyOption.ALONE) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n            if (!isOnStartOfLine(details, targetSourceLine)) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "70ab9f4af3d163b940e025bc4665f2f23892525a": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
      "commitDate": "12/03/17 8:28 PM",
      "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
      "commitAuthor": "Sagar",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
          "commitDate": "12/03/17 8:28 PM",
          "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
          "commitAuthor": "Sagar",
          "commitDateOld": "26/02/17 7:25 PM",
          "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
          "commitAuthorOld": "Vladislav Lisetskii",
          "daysBetweenCommits": 14.0,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-    private static String validate(Details details, RightCurlyOption bracePolicy,\n-                                   boolean shouldStartLine, String targetSourceLine) {\n+    private String validate(Details details) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n-\n-        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n+        if (option \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (shouldBeOnSameLine(bracePolicy, details)) {\n+        else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n+        else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n-            violation \u003d MSG_KEY_LINE_NEW;\n+        else if (shouldStartLine) {\n+            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            if (!isOnStartOfLine(details, targetSourceLine)) {\n+                violation \u003d MSG_KEY_LINE_NEW;\n+            }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String validate(Details details) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n        if (option \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n            if (!isOnStartOfLine(details, targetSourceLine)) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {
            "oldValue": "[details-Details, bracePolicy-RightCurlyOption, shouldStartLine-boolean, targetSourceLine-String]",
            "newValue": "[details-Details]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
          "commitDate": "12/03/17 8:28 PM",
          "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
          "commitAuthor": "Sagar",
          "commitDateOld": "26/02/17 7:25 PM",
          "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
          "commitAuthorOld": "Vladislav Lisetskii",
          "daysBetweenCommits": 14.0,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-    private static String validate(Details details, RightCurlyOption bracePolicy,\n-                                   boolean shouldStartLine, String targetSourceLine) {\n+    private String validate(Details details) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n-\n-        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n+        if (option \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (shouldBeOnSameLine(bracePolicy, details)) {\n+        else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n+        else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n-            violation \u003d MSG_KEY_LINE_NEW;\n+        else if (shouldStartLine) {\n+            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            if (!isOnStartOfLine(details, targetSourceLine)) {\n+                violation \u003d MSG_KEY_LINE_NEW;\n+            }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String validate(Details details) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n        if (option \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n            if (!isOnStartOfLine(details, targetSourceLine)) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3685: Refactoring for RightCurlyCheck.java\n",
          "commitDate": "12/03/17 8:28 PM",
          "commitName": "70ab9f4af3d163b940e025bc4665f2f23892525a",
          "commitAuthor": "Sagar",
          "commitDateOld": "26/02/17 7:25 PM",
          "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
          "commitAuthorOld": "Vladislav Lisetskii",
          "daysBetweenCommits": 14.0,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-    private static String validate(Details details, RightCurlyOption bracePolicy,\n-                                   boolean shouldStartLine, String targetSourceLine) {\n+    private String validate(Details details) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n-\n-        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n+        if (option \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (shouldBeOnSameLine(bracePolicy, details)) {\n+        else if (shouldBeOnSameLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n+        else if (shouldBeAloneOnLine(option, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n-            violation \u003d MSG_KEY_LINE_NEW;\n+        else if (shouldStartLine) {\n+            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n+            if (!isOnStartOfLine(details, targetSourceLine)) {\n+                violation \u003d MSG_KEY_LINE_NEW;\n+            }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private String validate(Details details) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n        if (option \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(option, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final String targetSourceLine \u003d getLines()[rcurly.getLineNo() - 1];\n            if (!isOnStartOfLine(details, targetSourceLine)) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "2551676ccf743822951d42658085c70e7aa869bd": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Issue #3546: add lambda in a rightcurlycheck\"\n\nThis reverts commit b0d5b01b3cd174004843fb6fcc91cb971f17f7a2.\n",
      "commitDate": "28/01/17 2:14 PM",
      "commitName": "2551676ccf743822951d42658085c70e7aa869bd",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "28/01/17 2:14 PM",
      "commitNameOld": "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
      "commitAuthorOld": "MaksimP",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n-        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n+                \u0026\u0026 !hasLineBreakBefore(rcurly)\n+                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n            violation \u003d MSG_KEY_LINE_NEW;\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3546: add lambda in a rightcurlycheck\n",
      "commitDate": "28/01/17 2:14 PM",
      "commitName": "b0d5b01b3cd174004843fb6fcc91cb971f17f7a2",
      "commitAuthor": "MaksimP",
      "commitDateOld": "27/01/17 12:11 PM",
      "commitNameOld": "4cda2565674ea4260547e663e9660df0029709d1",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n-        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n-        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)\n-                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n            violation \u003d MSG_KEY_LINE_NEW;\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "4a6e1a3541fc31dc7450de00943fd94a20d9223e": {
      "type": "Ybodychange",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": "16/12/15 7:56 AM",
      "commitName": "4a6e1a3541fc31dc7450de00943fd94a20d9223e",
      "commitAuthor": "rnveach",
      "commitDateOld": "12/11/15 7:16 PM",
      "commitNameOld": "9faf80abaee2a2e224c7d0f9d4a45307b37a398e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 33.53,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine \u0026\u0026 !startsLine(details, targetSourceLine)) {\n+        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n             violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine \u0026\u0026 !isOnStartOfLine(details, targetSourceLine)) {\n            violation \u003d MSG_KEY_LINE_NEW;\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "b576ccf8793690e8459a6620cc1611531f3f9890": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed CyclomaticComplexity violations in RightCurlyCheck\n",
      "commitDate": "30/08/15 6:54 AM",
      "commitName": "b576ccf8793690e8459a6620cc1611531f3f9890",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "29/08/15 11:47 AM",
      "commitNameOld": "f32bcd07ee2791708e97c5202ad688a84605d375",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,29 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n+        else if (shouldBeOnSameLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (shouldBeAloneOnLine(details, bracePolicy)) {\n+        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (shouldStartLine) {\n-            final boolean startsLine \u003d\n-                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n-\n-            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                violation \u003d MSG_KEY_LINE_NEW;\n-            }\n+        else if (shouldStartLine \u0026\u0026 !startsLine(details, targetSourceLine)) {\n+            violation \u003d MSG_KEY_LINE_NEW;\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (shouldBeOnSameLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(bracePolicy, details)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine \u0026\u0026 !startsLine(details, targetSourceLine)) {\n            violation \u003d MSG_KEY_LINE_NEW;\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "f32bcd07ee2791708e97c5202ad688a84605d375": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed CyclomaticCompexityCheck violation in RightCurlyCheck\n",
      "commitDate": "29/08/15 11:47 AM",
      "commitName": "f32bcd07ee2791708e97c5202ad688a84605d375",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "28/08/15 10:50 PM",
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,35 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n-                \u0026\u0026 !isAloneOnLine(details)\n-                \u0026\u0026 !isEmptyBody(lcurly)) {\n-            violation \u003d MSG_KEY_LINE_ALONE;\n-        }\n-        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n-                \u0026\u0026 !isAloneOnLine(details)\n-                \u0026\u0026 !isSingleLineBlock(details)\n-                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n-                \u0026\u0026 !isEmptyBody(lcurly)) {\n+        else if (shouldBeAloneOnLine(details, bracePolicy)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                     CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (shouldBeAloneOnLine(details, bracePolicy)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 10:27 PM",
      "commitNameOld": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                    CommonUtils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n+                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)\n                 \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n+                    CommonUtils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                    CommonUtils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1": {
      "type": "Ybodychange",
      "commitMessage": "Fix RightCurlyCheck with same option not to rise expression in single-line blocks - issue #1416\n",
      "commitDate": "16/08/15 9:40 PM",
      "commitName": "1e6dc8f4eab264568db73a663e9c0d9528d2ffe1",
      "commitAuthor": "liscju",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n     private static String validate(Details details, RightCurlyOption bracePolicy,\n                                    boolean shouldStartLine, String targetSourceLine) {\n         final DetailAST rcurly \u003d details.rcurly;\n         final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n         String violation \u003d \"\";\n \n         if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n-                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n+                \u0026\u0026 !hasLineBreakBefore(rcurly)\n+                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             violation \u003d MSG_KEY_LINE_SAME;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                 violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n         return violation;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)\n                \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "d282d5b8db9eba5943d1cb0269315744d5344a47": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
      "commitDate": "03/08/15 2:03 AM",
      "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
          "commitDate": "03/08/15 2:03 AM",
          "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "01/08/15 1:16 PM",
          "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n-    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n+    private static String validate(Details details, RightCurlyOption bracePolicy,\n+                                   boolean shouldStartLine, String targetSourceLine) {\n+        final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+        String violation \u003d \"\";\n \n-        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                    getLines()[rcurly.getLineNo() - 1]);\n+                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n+        return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {
            "oldValue": "[details-Details, rcurly-DetailAST, lcurly-DetailAST]",
            "newValue": "[details-Details, bracePolicy-RightCurlyOption, shouldStartLine-boolean, targetSourceLine-String]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
          "commitDate": "03/08/15 2:03 AM",
          "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "01/08/15 1:16 PM",
          "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n-    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n+    private static String validate(Details details, RightCurlyOption bracePolicy,\n+                                   boolean shouldStartLine, String targetSourceLine) {\n+        final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+        String violation \u003d \"\";\n \n-        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                    getLines()[rcurly.getLineNo() - 1]);\n+                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n+        return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "String"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
          "commitDate": "03/08/15 2:03 AM",
          "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "01/08/15 1:16 PM",
          "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n-    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n+    private static String validate(Details details, RightCurlyOption bracePolicy,\n+                                   boolean shouldStartLine, String targetSourceLine) {\n+        final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+        String violation \u003d \"\";\n \n-        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                    getLines()[rcurly.getLineNo() - 1]);\n+                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n+        return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring of RightCurlyCheck, issue #1511.\n",
          "commitDate": "03/08/15 2:03 AM",
          "commitName": "d282d5b8db9eba5943d1cb0269315744d5344a47",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "01/08/15 1:16 PM",
          "commitNameOld": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
          "commitAuthorOld": "Andrei Selkin",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,43 @@\n-    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n+    private static String validate(Details details, RightCurlyOption bracePolicy,\n+                                   boolean shouldStartLine, String targetSourceLine) {\n+        final DetailAST rcurly \u003d details.rcurly;\n+        final DetailAST lcurly \u003d details.lcurly;\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+        String violation \u003d \"\";\n \n-        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_ALONE;\n             }\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_SAME;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n-        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n+            violation \u003d MSG_KEY_LINE_ALONE;\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n-                Utils.whitespaceBefore(rcurly.getColumnNo(),\n-                    getLines()[rcurly.getLineNo() - 1]);\n+                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n+                violation \u003d MSG_KEY_LINE_NEW;\n             }\n         }\n+        return violation;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String validate(Details details, RightCurlyOption bracePolicy,\n                                   boolean shouldStartLine, String targetSourceLine) {\n        final DetailAST rcurly \u003d details.rcurly;\n        final DetailAST lcurly \u003d details.lcurly;\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n        String violation \u003d \"\";\n\n        if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            violation \u003d MSG_KEY_LINE_BREAK_BEFORE;\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_ALONE;\n            }\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            violation \u003d MSG_KEY_LINE_SAME;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (bracePolicy \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            violation \u003d MSG_KEY_LINE_ALONE;\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                violation \u003d MSG_KEY_LINE_NEW;\n            }\n        }\n        return violation;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "3a5a73d5c110418f712f5a9a838c6b4106506fdd": {
      "type": "Ybodychange",
      "commitMessage": "Added column number into violation messages for RightCurlyCheck and LeftCurlyCheck, issue #1511.\n",
      "commitDate": "01/08/15 1:16 PM",
      "commitName": "3a5a73d5c110418f712f5a9a838c6b4106506fdd",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "30/07/15 12:40 PM",
      "commitNameOld": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n+            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n-            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n+            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                 \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isSingleLineBlock(details)\n                 \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n         }\n         else if (shouldStartLine) {\n             final boolean startsLine \u003d\n                 Utils.whitespaceBefore(rcurly.getColumnNo(),\n                     getLines()[rcurly.getLineNo() - 1]);\n \n             if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n-                log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n+                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n\n        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n            }\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(),\n                    getLines()[rcurly.getLineNo() - 1]);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "f1dced161ab0c818f0e1e125fc5b88b71f5b171e": {
      "type": "Ybodychange",
      "commitMessage": "Add new option for RightCurlyCheck, issue #1019.\n",
      "commitDate": "30/07/15 12:40 PM",
      "commitName": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "27/07/15 7:33 PM",
      "commitNameOld": "f1dc9b205d1ccdba85e34f4cb7adf9ffd4af2361",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 2.71,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,39 @@\n     private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n         final DetailAST nextToken \u003d details.nextToken;\n         final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n \n         if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n         }\n-\n-        if (shouldCheckLastRcurly) {\n+        else if (shouldCheckLastRcurly) {\n             if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                 log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n             }\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                 \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n             log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n         }\n         else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n-                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n+                \u0026\u0026 !isAloneOnLine(details)\n                 \u0026\u0026 !isEmptyBody(lcurly)) {\n             log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n         }\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n+                \u0026\u0026 !isAloneOnLine(details)\n+                \u0026\u0026 !isSingleLineBlock(details)\n+                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n+                \u0026\u0026 !isEmptyBody(lcurly)) {\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+        }\n+        else if (shouldStartLine) {\n+            final boolean startsLine \u003d\n+                Utils.whitespaceBefore(rcurly.getColumnNo(),\n+                    getLines()[rcurly.getLineNo() - 1]);\n+\n+            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n+                log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n+            }\n+        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n\n        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n        }\n        else if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n            }\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE_OR_SINGLELINE\n                \u0026\u0026 !isAloneOnLine(details)\n                \u0026\u0026 !isSingleLineBlock(details)\n                \u0026\u0026 !isAnonInnerClassInit(lcurly)\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n        }\n        else if (shouldStartLine) {\n            final boolean startsLine \u003d\n                Utils.whitespaceBefore(rcurly.getColumnNo(),\n                    getLines()[rcurly.getLineNo() - 1]);\n\n            if (!startsLine \u0026\u0026 lcurly.getLineNo() !\u003d rcurly.getLineNo()) {\n                log(rcurly, MSG_KEY_LINE_NEW, \"}\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java",
      "extendedDetails": {}
    },
    "c99f34002b7340ec8d0888f8f9b3992df798e408": {
      "type": "Yintroduced",
      "commitMessage": "RightCurlyCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "c99f34002b7340ec8d0888f8f9b3992df798e408",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,23 @@\n+    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n+        final DetailAST nextToken \u003d details.nextToken;\n+        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n+\n+        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n+            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n+        }\n+\n+        if (shouldCheckLastRcurly) {\n+            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n+                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+            }\n+        }\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n+                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n+            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n+        }\n+        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n+                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n+                \u0026\u0026 !isEmptyBody(lcurly)) {\n+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {\n        final DetailAST nextToken \u003d details.nextToken;\n        final boolean shouldCheckLastRcurly \u003d details.shouldCheckLastRcurly;\n\n        if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME \u0026\u0026 !hasLineBreakBefore(rcurly)) {\n            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);\n        }\n\n        if (shouldCheckLastRcurly) {\n            if (rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()) {\n                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n            }\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.SAME\n                \u0026\u0026 rcurly.getLineNo() !\u003d nextToken.getLineNo()) {\n            log(rcurly, MSG_KEY_LINE_SAME, \"}\");\n        }\n        else if (getAbstractOption() \u003d\u003d RightCurlyOption.ALONE\n                \u0026\u0026 rcurly.getLineNo() \u003d\u003d nextToken.getLineNo()\n                \u0026\u0026 !isEmptyBody(lcurly)) {\n            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java"
    }
  }
}