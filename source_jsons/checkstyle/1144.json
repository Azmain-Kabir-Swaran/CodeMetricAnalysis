{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericWhitespaceCheck.java",
  "functionName": "processEnd",
  "functionId": "processEnd___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
  "functionStartLine": 173,
  "functionEndLine": 193,
  "numCommitsSeen": 81,
  "timeTaken": 3503,
  "changeHistory": [
    "cd3464f4afeee35eea1f7ca6291f8a275dfd98b3",
    "208cf3d5b6b9b1544c547681f39fad17bc199728",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "6d3dbe2fd3d64b491ee39ac1d42d0ee88938d190",
    "7c1d239748c9a90112bf3a59b189dc31ffe41983",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "a2f74423b6db21eeb1ed1725e6cfc2b83c44113b",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "37e0bc051f37fff6f6d004ae57073cc98df95122",
    "cf5686783fed5f7598da0be118391f930e5a2ef7",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
    "dcd4e9148cb143f9c4143cd1c5f72d70ef86c681",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d86329ca8fe253b7b830b77595944d99a7ed4cfd",
    "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa",
    "3b3672d4694524ffe687d20e2be5970d4f85a26c",
    "1fe8bcab1aba206e442d1991f0fea255c445bb14",
    "325b265cc583468dd495088e95f316a2ba10c4af",
    "ac596b1c3ab07d52cafd96abf471016900861100"
  ],
  "changeHistoryShort": {
    "cd3464f4afeee35eea1f7ca6291f8a275dfd98b3": "Ybodychange",
    "208cf3d5b6b9b1544c547681f39fad17bc199728": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "6d3dbe2fd3d64b491ee39ac1d42d0ee88938d190": "Ybodychange",
    "7c1d239748c9a90112bf3a59b189dc31ffe41983": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "a2f74423b6db21eeb1ed1725e6cfc2b83c44113b": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "37e0bc051f37fff6f6d004ae57073cc98df95122": "Ybodychange",
    "cf5686783fed5f7598da0be118391f930e5a2ef7": "Ybodychange",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": "Ybodychange",
    "dcd4e9148cb143f9c4143cd1c5f72d70ef86c681": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d86329ca8fe253b7b830b77595944d99a7ed4cfd": "Ybodychange",
    "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa": "Ybodychange",
    "3b3672d4694524ffe687d20e2be5970d4f85a26c": "Ybodychange",
    "1fe8bcab1aba206e442d1991f0fea255c445bb14": "Ybodychange",
    "325b265cc583468dd495088e95f316a2ba10c4af": "Ybodychange",
    "ac596b1c3ab07d52cafd96abf471016900861100": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd3464f4afeee35eea1f7ca6291f8a275dfd98b3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5759: Update GenericWhitespaceCheck to log DetailAST\n",
      "commitDate": "17/12/18 9:47 PM",
      "commitName": "cd3464f4afeee35eea1f7ca6291f8a275dfd98b3",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 197.05,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !containsWhitespaceBefore(before, line)) {\n-            log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n+            log(ast, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !containsWhitespaceBefore(before, line)) {\n            log(ast, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "208cf3d5b6b9b1544c547681f39fad17bc199728": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5003: increased coverage of pitest-checks-whitespace to 98%\n",
      "commitDate": "26/08/17 2:33 PM",
      "commitName": "208cf3d5b6b9b1544c547681f39fad17bc199728",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "24/04/17 7:55 AM",
      "commitNameOld": "e803943ff515fbec5a2bbdae948af3dd018669a1",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 124.28,
      "commitsBetweenForRepo": 513,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n+                \u0026\u0026 !containsWhitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !containsWhitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n-            log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n+            log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, MSG_WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/08/15 10:43 PM",
      "commitNameOld": "8985e645a8a591b19c729cff16b8440b70a8022e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 !CommonUtils.whitespaceBefore(before, line)) {\n+                \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !CommonUtils.hasWhitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n-                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n+                \u0026\u0026 !CommonUtils.whitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !CommonUtils.whitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": "25/08/15 4:00 PM",
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.82,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n-            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n+            log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, CLOSE_ANGLE_BRACKET);\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 16.82,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n-            if (1 \u003d\u003d depth) {\n+            if (depth \u003d\u003d 1) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (depth \u003d\u003d 1) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "6d3dbe2fd3d64b491ee39ac1d42d0ee88938d190": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1289: \u0027GenericWhitespaceCheck\u0027 refactored, UT coverage improved\n",
      "commitDate": "15/07/15 4:58 PM",
      "commitName": "6d3dbe2fd3d64b491ee39ac1d42d0ee88938d190",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "14/06/15 9:56 PM",
      "commitNameOld": "7c1d239748c9a90112bf3a59b189dc31ffe41983",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 30.79,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n-        if (0 \u003c\u003d before \u0026\u0026 Character.isWhitespace(line.charAt(before))\n+        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n                 processSingleGeneric(ast, line, after);\n             }\n             else {\n                 processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (before \u003e\u003d 0 \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "7c1d239748c9a90112bf3a59b189dc31ffe41983": {
      "type": "Ybodychange",
      "commitMessage": "GenericWhitespace updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "14/06/15 9:56 PM",
      "commitName": "7c1d239748c9a90112bf3a59b189dc31ffe41983",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 28.71,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,22 @@\n     private void processEnd(DetailAST ast) {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if (0 \u003c\u003d before \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n             log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n-                final char charAfter \u003d line.charAt(after);\n-\n-                // Need to handle a number of cases. First is:\n-                //    Collections.\u003cObject\u003eemptySet();\n-                //                        ^\n-                //                        +--- whitespace not allowed\n-                if (ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n-                        \u0026\u0026 ast.getParent().getParent().getType()\n-                            \u003d\u003d TokenTypes.DOT\n-                        \u0026\u0026 ast.getParent().getParent().getParent().getType()\n-                            \u003d\u003d TokenTypes.METHOD_CALL\n-                        || isAfterMethodReference(ast)) {\n-                    if (Character.isWhitespace(charAfter)) {\n-                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n-                    }\n-                }\n-                else if (!Character.isWhitespace(charAfter)\n-                    \u0026\u0026 \u0027(\u0027 !\u003d charAfter \u0026\u0026 \u0027)\u0027 !\u003d charAfter\n-                    \u0026\u0026 \u0027,\u0027 !\u003d charAfter \u0026\u0026 \u0027[\u0027 !\u003d charAfter\n-                    \u0026\u0026 \u0027.\u0027 !\u003d charAfter \u0026\u0026 \u0027:\u0027 !\u003d charAfter\n-                    \u0026\u0026 !isAfterMethodReference(ast)) {\n-                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n-                }\n+                processSingleGeneric(ast, line, after);\n             }\n             else {\n-                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n-\n-                // In case of several extends definitions:\n-                //\n-                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n-                //                                          ^\n-                //   should be whitespace if followed by \u0026 -+\n-                //\n-                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n-                if (indexOfAmp !\u003d -1\n-                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line)) {\n-                    if (indexOfAmp - after \u003d\u003d 0) {\n-                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n-                    }\n-                    else if (indexOfAmp - after !\u003d 1) {\n-                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n-                    }\n-                }\n-                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n-                    log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n-                }\n+                processNestedGenerics(ast, line, after);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast) {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (0 \u003c\u003d before \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line)) {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                processSingleGeneric(ast, line, after);\n            }\n            else {\n                processNestedGenerics(ast, line, after);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "03/03/15 1:11 PM",
      "commitNameOld": "a2f74423b6db21eeb1ed1725e6cfc2b83c44113b",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n     private void processEnd(DetailAST ast)\n     {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n-        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n+        if (0 \u003c\u003d before \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n-                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n-                        \u0026\u0026 ((ast.getParent().getParent().getType()\n-                            \u003d\u003d TokenTypes.DOT)\n-                        \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n-                            \u003d\u003d TokenTypes.METHOD_CALL))\n-                    || isAfterMethodReference(ast))\n+                if (ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n+                        \u0026\u0026 ast.getParent().getParent().getType()\n+                            \u003d\u003d TokenTypes.DOT\n+                        \u0026\u0026 ast.getParent().getParent().getParent().getType()\n+                            \u003d\u003d TokenTypes.METHOD_CALL\n+                        || isAfterMethodReference(ast))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n-                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n-                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n-                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter)\n+                    \u0026\u0026 \u0027(\u0027 !\u003d charAfter \u0026\u0026 \u0027)\u0027 !\u003d charAfter\n+                    \u0026\u0026 \u0027,\u0027 !\u003d charAfter \u0026\u0026 \u0027[\u0027 !\u003d charAfter\n+                    \u0026\u0026 \u0027.\u0027 !\u003d charAfter \u0026\u0026 \u0027:\u0027 !\u003d charAfter\n                     \u0026\u0026 !isAfterMethodReference(ast))\n                 {\n                     log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n-                if ((indexOfAmp !\u003d -1)\n+                if (indexOfAmp !\u003d -1\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                     log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if (0 \u003c\u003d before \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if (ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n                        \u0026\u0026 ast.getParent().getParent().getType()\n                            \u003d\u003d TokenTypes.DOT\n                        \u0026\u0026 ast.getParent().getParent().getParent().getType()\n                            \u003d\u003d TokenTypes.METHOD_CALL\n                        || isAfterMethodReference(ast))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 \u0027(\u0027 !\u003d charAfter \u0026\u0026 \u0027)\u0027 !\u003d charAfter\n                    \u0026\u0026 \u0027,\u0027 !\u003d charAfter \u0026\u0026 \u0027[\u0027 !\u003d charAfter\n                    \u0026\u0026 \u0027.\u0027 !\u003d charAfter \u0026\u0026 \u0027:\u0027 !\u003d charAfter\n                    \u0026\u0026 !isAfterMethodReference(ast))\n                {\n                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if (indexOfAmp !\u003d -1\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "a2f74423b6db21eeb1ed1725e6cfc2b83c44113b": {
      "type": "Ybodychange",
      "commitMessage": "Generic Whitespace Check, updated method references processing, issue #677\n",
      "commitDate": "03/03/15 1:11 PM",
      "commitName": "a2f74423b6db21eeb1ed1725e6cfc2b83c44113b",
      "commitAuthor": "alexkravin",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 11.34,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,69 @@\n     private void processEnd(DetailAST ast)\n     {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n-                    \u0026\u0026 (ast.getParent().getParent().getType()\n-                        \u003d\u003d TokenTypes.DOT)\n-                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n-                        \u003d\u003d TokenTypes.METHOD_CALL))\n+                        \u0026\u0026 ((ast.getParent().getParent().getType()\n+                            \u003d\u003d TokenTypes.DOT)\n+                        \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n+                            \u003d\u003d TokenTypes.METHOD_CALL))\n+                    || isAfterMethodReference(ast))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n-                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n+                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter)\n+                    \u0026\u0026 !isAfterMethodReference(ast))\n                 {\n                     log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                     log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                        \u0026\u0026 ((ast.getParent().getParent().getType()\n                            \u003d\u003d TokenTypes.DOT)\n                        \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                            \u003d\u003d TokenTypes.METHOD_CALL))\n                    || isAfterMethodReference(ast))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter)\n                    \u0026\u0026 !isAfterMethodReference(ast))\n                {\n                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     private void processEnd(DetailAST ast)\n     {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n-            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n+            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (ast.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n-                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                 {\n-                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n+                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n-                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n+                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n-                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n-                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                    log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, WS_PRECEDED, \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (ast.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                {\n                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, WS_FOLLOWED, \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "19/01/15 6:38 AM",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "commitDateOld": "19/01/15 6:20 AM",
      "commitNameOld": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     private void processEnd(DetailAST ast)\n     {\n         final String line \u003d getLine(ast.getLineNo() - 1);\n         final int before \u003d ast.getColumnNo() - 1;\n         final int after \u003d ast.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (ast.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                 {\n                     log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n-                //   class IntEnuvalueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n+                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                     log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (ast.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                {\n                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "18/12/14 11:41 AM",
          "commitNameOld": "37e0bc051f37fff6f6d004ae57073cc98df95122",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 31.78,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,67 @@\n-    private void processEnd(DetailAST aAST)\n+    private void processEnd(DetailAST ast)\n     {\n-        final String line \u003d getLine(aAST.getLineNo() - 1);\n-        final int before \u003d aAST.getColumnNo() - 1;\n-        final int after \u003d aAST.getColumnNo() + 1;\n+        final String line \u003d getLine(ast.getLineNo() - 1);\n+        final int before \u003d ast.getColumnNo() - 1;\n+        final int after \u003d ast.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n-            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n+            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n-            if (1 \u003d\u003d mDepth) {\n+            if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n-                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n-                    \u0026\u0026 (aAST.getParent().getParent().getType()\n+                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n+                    \u0026\u0026 (ast.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n-                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n+                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n-                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                 {\n-                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n+                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n-                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n+                //   class IntEnuvalueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n-                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n+                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n-                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n-                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (ast.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                {\n                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnuvalueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "18/12/14 11:41 AM",
          "commitNameOld": "37e0bc051f37fff6f6d004ae57073cc98df95122",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 31.78,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,67 @@\n-    private void processEnd(DetailAST aAST)\n+    private void processEnd(DetailAST ast)\n     {\n-        final String line \u003d getLine(aAST.getLineNo() - 1);\n-        final int before \u003d aAST.getColumnNo() - 1;\n-        final int after \u003d aAST.getColumnNo() + 1;\n+        final String line \u003d getLine(ast.getLineNo() - 1);\n+        final int before \u003d ast.getColumnNo() - 1;\n+        final int after \u003d ast.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n-            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n+            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n-            if (1 \u003d\u003d mDepth) {\n+            if (1 \u003d\u003d depth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n-                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n-                    \u0026\u0026 (aAST.getParent().getParent().getType()\n+                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n+                    \u0026\u0026 (ast.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n-                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n+                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n-                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                 {\n-                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n+                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n-                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n+                //   class IntEnuvalueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n-                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n+                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n-                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n-                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processEnd(DetailAST ast)\n    {\n        final String line \u003d getLine(ast.getLineNo() - 1);\n        final int before \u003d ast.getColumnNo() - 1;\n        final int after \u003d ast.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(ast.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d depth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((ast.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (ast.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (ast.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                {\n                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnuvalueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(ast.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "37e0bc051f37fff6f6d004ae57073cc98df95122": {
      "type": "Ybodychange",
      "commitMessage": "Generic Whitespace Check, fixed bug - \u0027\u003e\u0027 is followed by an illegal character, issue #350\n",
      "commitDate": "18/12/14 11:41 AM",
      "commitName": "37e0bc051f37fff6f6d004ae57073cc98df95122",
      "commitAuthor": "alexkravin",
      "commitDateOld": "17/12/14 7:43 AM",
      "commitNameOld": "cf5686783fed5f7598da0be118391f930e5a2ef7",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLine(aAST.getLineNo() - 1);\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n-                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n+                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLine(aAST.getLineNo() - 1);\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter) \u0026\u0026 (\u0027:\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "cf5686783fed5f7598da0be118391f930e5a2ef7": {
      "type": "Ybodychange",
      "commitMessage": "Fixed false-positive in GenericWhitespaceCheck issue #51\n",
      "commitDate": "17/12/14 7:43 AM",
      "commitName": "cf5686783fed5f7598da0be118391f930e5a2ef7",
      "commitAuthor": "alexkravin",
      "commitDateOld": "02/11/14 11:48 AM",
      "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthorOld": "sopov.ivan",
      "daysBetweenCommits": 44.83,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,67 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLine(aAST.getLineNo() - 1);\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n-                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n-                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027)\n-                         \u0026\u0026 (line.charAt(after) !\u003d \u0027[\u0027))\n-                {\n+                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLine(aAST.getLineNo() - 1);\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (line.charAt(after) \u003d\u003d \u0027 \u0027) {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": {
      "type": "Ybodychange",
      "commitMessage": "FileContents.getLines performance fix\n",
      "commitDate": "02/11/14 11:48 AM",
      "commitName": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthor": "sopov.ivan",
      "commitDateOld": "07/09/14 9:35 PM",
      "commitNameOld": "638dfe14bc7ff0fa358e9531ded468f245c389fd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 55.63,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n     private void processEnd(DetailAST aAST)\n     {\n-        final String line \u003d getLines()[aAST.getLineNo() - 1];\n+        final String line \u003d getLine(aAST.getLineNo() - 1);\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n                          \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027)\n                          \u0026\u0026 (line.charAt(after) !\u003d \u0027[\u0027))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLine(aAST.getLineNo() - 1);\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027[\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "dcd4e9148cb143f9c4143cd1c5f72d70ef86c681": {
      "type": "Ybodychange",
      "commitMessage": "fix for #47\n",
      "commitDate": "02/07/14 4:46 AM",
      "commitName": "dcd4e9148cb143f9c4143cd1c5f72d70ef86c681",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 119.77,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n                 final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                 if ((indexOfAmp !\u003d -1)\n                     \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n                     if (indexOfAmp - after \u003d\u003d 0) {\n                         log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n                     else if (indexOfAmp - after !\u003d 1) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n-                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n+                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027)\n+                         \u0026\u0026 (line.charAt(after) !\u003d \u0027[\u0027))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027[\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java"
      }
    },
    "d86329ca8fe253b7b830b77595944d99a7ed4cfd": {
      "type": "Ybodychange",
      "commitMessage": "Make the tests pass\n\nFix Checkstyle errors\n",
      "commitDate": "29/08/13 11:32 PM",
      "commitName": "d86329ca8fe253b7b830b77595944d99a7ed4cfd",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "17/08/13 11:09 AM",
      "commitNameOld": "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa",
      "commitAuthorOld": "Dmitriy Komanov",
      "daysBetweenCommits": 12.52,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n \n                 // In case of several extends definitions:\n                 //\n                 //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                 //                                          ^\n                 //   should be whitespace if followed by \u0026 -+\n                 //\n-                int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n-                if ((indexOfAmp !\u003d -1) \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n+                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n+                if ((indexOfAmp !\u003d -1)\n+                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                 {\n-                    if (indexOfAmp - after \u003d\u003d 0)\n-                    {\n+                    if (indexOfAmp - after \u003d\u003d 0) {\n                         log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                     }\n-                    else if (indexOfAmp - after !\u003d 1)\n-                    {\n+                    else if (indexOfAmp - after !\u003d 1) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n-                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n+                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n+                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                final int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1)\n                    \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0) {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027)\n                         \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa": {
      "type": "Ybodychange",
      "commitMessage": "Support for \u0027\u0026\u0027 in nested generics\n",
      "commitDate": "17/08/13 11:09 AM",
      "commitName": "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa",
      "commitAuthor": "Dmitriy Komanov",
      "commitDateOld": "18/09/12 3:57 AM",
      "commitNameOld": "68f1a6fa63b635da214ce6cfffd9f8c283248f60",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 333.3,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,69 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n \n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n \n                 // Need to handle a number of cases. First is:\n                 //    Collections.\u003cObject\u003eemptySet();\n                 //                        ^\n                 //                        +--- whitespace not allowed\n                 if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                     \u0026\u0026 (aAST.getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                         \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     if (Character.isWhitespace(charAfter)) {\n                         log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                     }\n                 }\n                 else if (!Character.isWhitespace(charAfter)\n                     \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                     \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n-                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027\n-                if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n+                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n+\n+                // In case of several extends definitions:\n+                //\n+                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n+                //                                          ^\n+                //   should be whitespace if followed by \u0026 -+\n+                //\n+                int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n+                if ((indexOfAmp !\u003d -1) \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n+                {\n+                    if (indexOfAmp - after \u003d\u003d 0)\n+                    {\n+                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n+                    }\n+                    else if (indexOfAmp - after !\u003d 1)\n+                    {\n+                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                    }\n+                }\n+                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027 or \u0027\u0026\u0027\n\n                // In case of several extends definitions:\n                //\n                //   class IntEnumValueType\u003cE extends Enum\u003cE\u003e \u0026 IntEnum\u003e\n                //                                          ^\n                //   should be whitespace if followed by \u0026 -+\n                //\n                int indexOfAmp \u003d line.indexOf(\u0027\u0026\u0027, after);\n                if ((indexOfAmp !\u003d -1) \u0026\u0026 whitespaceBetween(after, indexOfAmp, line))\n                {\n                    if (indexOfAmp - after \u003d\u003d 0)\n                    {\n                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"\u0026\");\n                    }\n                    else if (indexOfAmp - after !\u003d 1)\n                    {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "3b3672d4694524ffe687d20e2be5970d4f85a26c": {
      "type": "Ybodychange",
      "commitMessage": "Added more edge cases found when running over the Java SDK 6.0 source code.\n",
      "commitDate": "17/12/07 6:31 PM",
      "commitName": "3b3672d4694524ffe687d20e2be5970d4f85a26c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "17/12/07 4:02 AM",
      "commitNameOld": "1fe8bcab1aba206e442d1991f0fea255c445bb14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.6,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,50 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n+\n             // Check if the last Generic, in which case must be a whitespace\n-            // or a \u0027(),\u0027.\n+            // or a \u0027(),[.\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n-                if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n-                        \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n+\n+                // Need to handle a number of cases. First is:\n+                //    Collections.\u003cObject\u003eemptySet();\n+                //                        ^\n+                //                        +--- whitespace not allowed\n+                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n+                    \u0026\u0026 (aAST.getParent().getParent().getType()\n+                        \u003d\u003d TokenTypes.DOT)\n+                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n+                        \u003d\u003d TokenTypes.METHOD_CALL))\n+                {\n+                    if (Character.isWhitespace(charAfter)) {\n+                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                    }\n+                }\n+                else if (!Character.isWhitespace(charAfter)\n+                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n+                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n+                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027\n                 if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),[.\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n\n                // Need to handle a number of cases. First is:\n                //    Collections.\u003cObject\u003eemptySet();\n                //                        ^\n                //                        +--- whitespace not allowed\n                if ((aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS)\n                    \u0026\u0026 (aAST.getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (aAST.getParent().getParent().getParent().getType()\n                        \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    if (Character.isWhitespace(charAfter)) {\n                        log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                    }\n                }\n                else if (!Character.isWhitespace(charAfter)\n                    \u0026\u0026 (\u0027(\u0027 !\u003d charAfter) \u0026\u0026 (\u0027)\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027,\u0027 !\u003d charAfter) \u0026\u0026 (\u0027[\u0027 !\u003d charAfter)\n                    \u0026\u0026 (\u0027.\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027\n                if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "1fe8bcab1aba206e442d1991f0fea255c445bb14": {
      "type": "Ybodychange",
      "commitMessage": "Added another edge case.\n",
      "commitDate": "17/12/07 4:02 AM",
      "commitName": "1fe8bcab1aba206e442d1991f0fea255c445bb14",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "16/12/07 7:12 PM",
      "commitNameOld": "325b265cc583468dd495088e95f316a2ba10c4af",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n                 if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n                         \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n                 {\n                     log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n-                // In a nested Generic type, so can only be a \u0027\u003e\u0027\n-                if (line.charAt(after) !\u003d \u0027\u003e\u0027) {\n+                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027\n+                if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n+                {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n                if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n                        \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027 or \u0027,\u0027\n                if ((line.charAt(after) !\u003d \u0027\u003e\u0027) \u0026\u0026 (line.charAt(after) !\u003d \u0027,\u0027))\n                {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "325b265cc583468dd495088e95f316a2ba10c4af": {
      "type": "Ybodychange",
      "commitMessage": "Fix an edge case.\n",
      "commitDate": "16/12/07 7:12 PM",
      "commitName": "325b265cc583468dd495088e95f316a2ba10c4af",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 9:21 PM",
      "commitNameOld": "4666f796e89f8fcc1c27bcd1039d536a98337c99",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n     private void processEnd(DetailAST aAST)\n     {\n         final String line \u003d getLines()[aAST.getLineNo() - 1];\n         final int before \u003d aAST.getColumnNo() - 1;\n         final int after \u003d aAST.getColumnNo() + 1;\n \n         if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                 \u0026\u0026 !Utils.whitespaceBefore(before, line))\n         {\n             log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n         }\n \n         if (after \u003c line.length()) {\n             // Check if the last Generic, in which case must be a whitespace\n             // or a \u0027(),\u0027.\n             if (1 \u003d\u003d mDepth) {\n                 final char charAfter \u003d line.charAt(after);\n                 if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n                         \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n                 {\n-                    log(aAST.getLineNo(), after,\n-                            \"Unknown character follows \u0027\u003e\u0027\");\n+                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                 }\n             }\n             else {\n                 // In a nested Generic type, so can only be a \u0027\u003e\u0027\n                 if (line.charAt(after) !\u003d \u0027\u003e\u0027) {\n                     log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n                if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n                        \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \"\u003e\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027\n                if (line.charAt(after) !\u003d \u0027\u003e\u0027) {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java",
      "extendedDetails": {}
    },
    "ac596b1c3ab07d52cafd96abf471016900861100": {
      "type": "Yintroduced",
      "commitMessage": "Implementation of a check to ensure \"correct\" whitespace around the Generic statements. A long overdue check.\n",
      "commitDate": "15/12/07 7:59 PM",
      "commitName": "ac596b1c3ab07d52cafd96abf471016900861100",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,32 @@\n+    private void processEnd(DetailAST aAST)\n+    {\n+        final String line \u003d getLines()[aAST.getLineNo() - 1];\n+        final int before \u003d aAST.getColumnNo() - 1;\n+        final int after \u003d aAST.getColumnNo() + 1;\n+\n+        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n+                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n+        {\n+            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n+        }\n+\n+        if (after \u003c line.length()) {\n+            // Check if the last Generic, in which case must be a whitespace\n+            // or a \u0027(),\u0027.\n+            if (1 \u003d\u003d mDepth) {\n+                final char charAfter \u003d line.charAt(after);\n+                if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n+                        \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n+                {\n+                    log(aAST.getLineNo(), after,\n+                            \"Unknown character follows \u0027\u003e\u0027\");\n+                }\n+            }\n+            else {\n+                // In a nested Generic type, so can only be a \u0027\u003e\u0027\n+                if (line.charAt(after) !\u003d \u0027\u003e\u0027) {\n+                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processEnd(DetailAST aAST)\n    {\n        final String line \u003d getLines()[aAST.getLineNo() - 1];\n        final int before \u003d aAST.getColumnNo() - 1;\n        final int after \u003d aAST.getColumnNo() + 1;\n\n        if ((0 \u003c\u003d before) \u0026\u0026 Character.isWhitespace(line.charAt(before))\n                \u0026\u0026 !Utils.whitespaceBefore(before, line))\n        {\n            log(aAST.getLineNo(), before, \"ws.preceded\", \"\u003e\");\n        }\n\n        if (after \u003c line.length()) {\n            // Check if the last Generic, in which case must be a whitespace\n            // or a \u0027(),\u0027.\n            if (1 \u003d\u003d mDepth) {\n                final char charAfter \u003d line.charAt(after);\n                if (!Character.isWhitespace(charAfter) \u0026\u0026 (\u0027(\u0027 !\u003d charAfter)\n                        \u0026\u0026 (\u0027)\u0027 !\u003d charAfter) \u0026\u0026 (\u0027,\u0027 !\u003d charAfter))\n                {\n                    log(aAST.getLineNo(), after,\n                            \"Unknown character follows \u0027\u003e\u0027\");\n                }\n            }\n            else {\n                // In a nested Generic type, so can only be a \u0027\u003e\u0027\n                if (line.charAt(after) !\u003d \u0027\u003e\u0027) {\n                    log(aAST.getLineNo(), after, \"ws.followed\", \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java"
    }
  }
}