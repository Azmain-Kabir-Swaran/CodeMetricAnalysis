{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HeaderCheck.java",
  "functionName": "setIgnoreLines",
  "functionId": "setIgnoreLines___list-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
  "functionStartLine": 166,
  "functionEndLine": 175,
  "numCommitsSeen": 80,
  "timeTaken": 1825,
  "changeHistory": [
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "47cfb3621da4ea9f9692c79ae284f7433a2e9bda",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "29027109bf962f47b6a6000fdca69b5679ce4b43",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927",
    "e20d45697c937fbb8ae3eb3b43bffb43e211237f",
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c"
  ],
  "changeHistoryShort": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "47cfb3621da4ea9f9692c79ae284f7433a2e9bda": "Ybodychange",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": "Yparameterchange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "29027109bf962f47b6a6000fdca69b5679ce4b43": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": "Yfilerename",
    "e20d45697c937fbb8ae3eb3b43bffb43e211237f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 143.55,
      "commitsBetweenForRepo": 343,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n     public void setIgnoreLines(int... list) {\n         if (list.length \u003d\u003d 0) {\n             ignoreLines \u003d EMPTY_INT_ARRAY;\n-            return;\n         }\n-\n-        ignoreLines \u003d new int[list.length];\n-        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n-        Arrays.sort(ignoreLines);\n+        else {\n+            ignoreLines \u003d new int[list.length];\n+            System.arraycopy(list, 0, ignoreLines, 0, list.length);\n+            Arrays.sort(ignoreLines);\n+        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(int... list) {\n        if (list.length \u003d\u003d 0) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n        }\n        else {\n            ignoreLines \u003d new int[list.length];\n            System.arraycopy(list, 0, ignoreLines, 0, list.length);\n            Arrays.sort(ignoreLines);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {}
    },
    "47cfb3621da4ea9f9692c79ae284f7433a2e9bda": {
      "type": "Ybodychange",
      "commitMessage": "Coverage has been increaded to 100% in HeaderCheck. Issue #1292\n",
      "commitDate": "28/07/15 9:08 PM",
      "commitName": "47cfb3621da4ea9f9692c79ae284f7433a2e9bda",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "18/07/15 2:41 AM",
      "commitNameOld": "6c1b26a8361782c8e7ae9455bd4d68e03bc919f8",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 10.77,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n     public void setIgnoreLines(int... list) {\n-        if (list \u003d\u003d null || list.length \u003d\u003d 0) {\n+        if (list.length \u003d\u003d 0) {\n             ignoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n         ignoreLines \u003d new int[list.length];\n         System.arraycopy(list, 0, ignoreLines, 0, list.length);\n         Arrays.sort(ignoreLines);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(int... list) {\n        if (list.length \u003d\u003d 0) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        ignoreLines \u003d new int[list.length];\n        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n        Arrays.sort(ignoreLines);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {}
    },
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": {
      "type": "Yparameterchange",
      "commitMessage": "Fix PMD violations from UseVarargs rule, issue #999\n\nThe changes are fully backward-compatible. Method with vararg can be invoked both using array and list of parameters.\n",
      "commitDate": "29/04/15 5:21 PM",
      "commitName": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 50.11,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n-    public void setIgnoreLines(int[] list)\n+    public void setIgnoreLines(int... list)\n     {\n         if (list \u003d\u003d null || list.length \u003d\u003d 0) {\n             ignoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n         ignoreLines \u003d new int[list.length];\n         System.arraycopy(list, 0, ignoreLines, 0, list.length);\n         Arrays.sort(ignoreLines);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(int... list)\n    {\n        if (list \u003d\u003d null || list.length \u003d\u003d 0) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        ignoreLines \u003d new int[list.length];\n        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n        Arrays.sort(ignoreLines);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {
        "oldValue": "[list-int[]]",
        "newValue": "[list-int]"
      }
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     public void setIgnoreLines(int[] list)\n     {\n-        if ((list \u003d\u003d null) || (list.length \u003d\u003d 0)) {\n+        if (list \u003d\u003d null || list.length \u003d\u003d 0) {\n             ignoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n         ignoreLines \u003d new int[list.length];\n         System.arraycopy(list, 0, ignoreLines, 0, list.length);\n         Arrays.sort(ignoreLines);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(int[] list)\n    {\n        if (list \u003d\u003d null || list.length \u003d\u003d 0) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        ignoreLines \u003d new int[list.length];\n        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n        Arrays.sort(ignoreLines);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {}
    },
    "29027109bf962f47b6a6000fdca69b5679ce4b43": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, header, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, header, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.91,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-    public void setIgnoreLines(int[] aList)\n+    public void setIgnoreLines(int[] list)\n     {\n-        if ((aList \u003d\u003d null) || (aList.length \u003d\u003d 0)) {\n-            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n+        if ((list \u003d\u003d null) || (list.length \u003d\u003d 0)) {\n+            ignoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n-        mIgnoreLines \u003d new int[aList.length];\n-        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n-        Arrays.sort(mIgnoreLines);\n+        ignoreLines \u003d new int[list.length];\n+        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n+        Arrays.sort(ignoreLines);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void setIgnoreLines(int[] list)\n    {\n        if ((list \u003d\u003d null) || (list.length \u003d\u003d 0)) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        ignoreLines \u003d new int[list.length];\n        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n        Arrays.sort(ignoreLines);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[aList-int[]]",
            "newValue": "[list-int[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, header, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.91,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-    public void setIgnoreLines(int[] aList)\n+    public void setIgnoreLines(int[] list)\n     {\n-        if ((aList \u003d\u003d null) || (aList.length \u003d\u003d 0)) {\n-            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n+        if ((list \u003d\u003d null) || (list.length \u003d\u003d 0)) {\n+            ignoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n-        mIgnoreLines \u003d new int[aList.length];\n-        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n-        Arrays.sort(mIgnoreLines);\n+        ignoreLines \u003d new int[list.length];\n+        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n+        Arrays.sort(ignoreLines);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void setIgnoreLines(int[] list)\n    {\n        if ((list \u003d\u003d null) || (list.length \u003d\u003d 0)) {\n            ignoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        ignoreLines \u003d new int[list.length];\n        System.arraycopy(list, 0, ignoreLines, 0, list.length);\n        Arrays.sort(ignoreLines);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void setIgnoreLines(int[] aList)\n    {\n        if ((aList \u003d\u003d null) || (aList.length \u003d\u003d 0)) {\n            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        mIgnoreLines \u003d new int[aList.length];\n        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n        Arrays.sort(mIgnoreLines);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java"
      }
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "30/01/05 3:32 AM",
      "commitNameOld": "aca96ae1b180a8036cc23e93840c4161ae8f8927",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 522.66,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n     public void setIgnoreLines(int[] aList)\n     {\n-        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n+        if ((aList \u003d\u003d null) || (aList.length \u003d\u003d 0)) {\n             mIgnoreLines \u003d EMPTY_INT_ARRAY;\n             return;\n         }\n \n         mIgnoreLines \u003d new int[aList.length];\n         System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n         Arrays.sort(mIgnoreLines);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(int[] aList)\n    {\n        if ((aList \u003d\u003d null) || (aList.length \u003d\u003d 0)) {\n            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        mIgnoreLines \u003d new int[aList.length];\n        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n        Arrays.sort(mIgnoreLines);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {}
    },
    "aca96ae1b180a8036cc23e93840c4161ae8f8927": {
      "type": "Yfilerename",
      "commitMessage": "moved header checks to their own package\nremoved duplicate usage documentation in javadoc along the way\n",
      "commitDate": "30/01/05 3:32 AM",
      "commitName": "aca96ae1b180a8036cc23e93840c4161ae8f8927",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "30/01/05 3:07 AM",
      "commitNameOld": "0a60a189ed4236fd9be3c26bbb2f27be95e5d967",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void setIgnoreLines(int[] aList)\n    {\n        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        mIgnoreLines \u003d new int[aList.length];\n        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n        Arrays.sort(mIgnoreLines);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java"
      }
    },
    "e20d45697c937fbb8ae3eb3b43bffb43e211237f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "finally managed to tell beanutils what I want, checks now have their \u0027natural\u0027 api\n",
      "commitDate": "06/10/02 6:14 AM",
      "commitName": "e20d45697c937fbb8ae3eb3b43bffb43e211237f",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "finally managed to tell beanutils what I want, checks now have their \u0027natural\u0027 api\n",
          "commitDate": "06/10/02 6:14 AM",
          "commitName": "e20d45697c937fbb8ae3eb3b43bffb43e211237f",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "28/09/02 1:55 PM",
          "commitNameOld": "4b209708c6823dabedb3ba74bbfa92fe638f11be",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 7.68,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-    public void setIgnoreLines(String aList)\n+    public void setIgnoreLines(int[] aList)\n     {\n-        mIgnoreLines.clear();\n-        if (aList !\u003d null) {\n-            final StringTokenizer tokens \u003d new StringTokenizer(aList, \",\");\n-            while (tokens.hasMoreTokens()) {\n-                final String ignoreLine \u003d tokens.nextToken();\n-                mIgnoreLines.add(new Integer(ignoreLine));\n-            }\n+        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n+            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n+            return;\n         }\n+\n+        mIgnoreLines \u003d new int[aList.length];\n+        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n+        Arrays.sort(mIgnoreLines);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void setIgnoreLines(int[] aList)\n    {\n        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        mIgnoreLines \u003d new int[aList.length];\n        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n        Arrays.sort(mIgnoreLines);\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[aList-String]",
            "newValue": "[aList-int[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "finally managed to tell beanutils what I want, checks now have their \u0027natural\u0027 api\n",
          "commitDate": "06/10/02 6:14 AM",
          "commitName": "e20d45697c937fbb8ae3eb3b43bffb43e211237f",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "28/09/02 1:55 PM",
          "commitNameOld": "4b209708c6823dabedb3ba74bbfa92fe638f11be",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 7.68,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,11 @@\n-    public void setIgnoreLines(String aList)\n+    public void setIgnoreLines(int[] aList)\n     {\n-        mIgnoreLines.clear();\n-        if (aList !\u003d null) {\n-            final StringTokenizer tokens \u003d new StringTokenizer(aList, \",\");\n-            while (tokens.hasMoreTokens()) {\n-                final String ignoreLine \u003d tokens.nextToken();\n-                mIgnoreLines.add(new Integer(ignoreLine));\n-            }\n+        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n+            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n+            return;\n         }\n+\n+        mIgnoreLines \u003d new int[aList.length];\n+        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n+        Arrays.sort(mIgnoreLines);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void setIgnoreLines(int[] aList)\n    {\n        if (aList \u003d\u003d null || aList.length \u003d\u003d 0) {\n            mIgnoreLines \u003d EMPTY_INT_ARRAY;\n            return;\n        }\n\n        mIgnoreLines \u003d new int[aList.length];\n        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);\n        Arrays.sort(mIgnoreLines);\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f24c8ee834e006c406c0538dbfccc2fe6c07279c": {
      "type": "Yintroduced",
      "commitMessage": "implemented header checks, still need to remove old code\n",
      "commitDate": "28/09/02 12:09 PM",
      "commitName": "f24c8ee834e006c406c0538dbfccc2fe6c07279c",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,11 @@\n+    public void setIgnoreLines(String aList)\n+    {\n+        mIgnoreLines.clear();\n+        if (aList !\u003d null) {\n+            final StringTokenizer tokens \u003d new StringTokenizer(aList, \",\");\n+            while (tokens.hasMoreTokens()) {\n+                final String ignoreLine \u003d tokens.nextToken();\n+                mIgnoreLines.add(new Integer(ignoreLine));\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void setIgnoreLines(String aList)\n    {\n        mIgnoreLines.clear();\n        if (aList !\u003d null) {\n            final StringTokenizer tokens \u003d new StringTokenizer(aList, \",\");\n            while (tokens.hasMoreTokens()) {\n                final String ignoreLine \u003d tokens.nextToken();\n                mIgnoreLines.add(new Integer(ignoreLine));\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java"
    }
  }
}