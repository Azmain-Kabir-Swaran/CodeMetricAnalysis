{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotationUseStyleCheck.java",
  "functionName": "logCommaViolation",
  "functionId": "logCommaViolation___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
  "functionStartLine": 491,
  "functionEndLine": 505,
  "numCommitsSeen": 81,
  "timeTaken": 2266,
  "changeHistory": [
    "245fc4b8fa1d2dec52ccc5a66d51db654a1cc39d",
    "629364ca98f02d530c2bec38a7d724f0def9c9bd",
    "6a0bad784f056988b3b84b75baa397ac78102a24",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
    "09a7ca60414ea04b64f45bb190eaa26c767086be",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767"
  ],
  "changeHistoryShort": {
    "245fc4b8fa1d2dec52ccc5a66d51db654a1cc39d": "Ybodychange",
    "629364ca98f02d530c2bec38a7d724f0def9c9bd": "Ybodychange",
    "6a0bad784f056988b3b84b75baa397ac78102a24": "Ybodychange",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9": "Ybodychange",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "09a7ca60414ea04b64f45bb190eaa26c767086be": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Yintroduced"
  },
  "changeHistoryDetails": {
    "245fc4b8fa1d2dec52ccc5a66d51db654a1cc39d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for annotation",
      "commitDate": "30/12/18 3:30 PM",
      "commitName": "245fc4b8fa1d2dec52ccc5a66d51db654a1cc39d",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/05/18 4:44 PM",
      "commitNameOld": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 226.99,
      "commitsBetweenForRepo": 379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n-            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n-            log(rCurly, MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n+        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS) {\n+            if (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA) {\n+                log(rCurly, MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n+            }\n         }\n-        else if (trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n-            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n+        else if (comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n             log(comma, MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS) {\n            if (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA) {\n                log(rCurly, MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n            }\n        }\n        else if (comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            log(comma, MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "629364ca98f02d530c2bec38a7d724f0def9c9bd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "17/05/18 4:44 PM",
      "commitName": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 29.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n         if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n-            log(rCurly.getLineNo(),\n-                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n+            log(rCurly, MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n         else if (trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n-            log(comma.getLineNo(),\n-                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n+            log(comma, MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n            log(rCurly, MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            log(comma, MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "6a0bad784f056988b3b84b75baa397ac78102a24": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this. #1555\n\nFixes `UnnecessaryThis` inspection violations after recent commits.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n",
      "commitDate": "12/08/15 9:03 PM",
      "commitName": "6a0bad784f056988b3b84b75baa397ac78102a24",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n+        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n             log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n+        else if (trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n             log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n            log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 9:53 PM",
      "commitNameOld": "ba9639e5decde52e38fbc1a048be7501dc701ac3",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (this.comma \u003d\u003d TrailingArrayComma.ALWAYS\n+        if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n             log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (this.comma \u003d\u003d TrailingArrayComma.NEVER\n+        else if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n             log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.ALWAYS\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n            log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (this.trailingArrayComma \u003d\u003d TrailingArrayComma.NEVER\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": "09/08/15 7:41 AM",
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "08/08/15 7:53 PM",
      "commitNameOld": "93914f360e7f533c6d8c23ba61e93cb045eaba7d",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n         if (this.comma \u003d\u003d TrailingArrayComma.ALWAYS\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n-            this.log(rCurly.getLineNo(),\n+            log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n         else if (this.comma \u003d\u003d TrailingArrayComma.NEVER\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n-            this.log(comma.getLineNo(),\n+            log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (this.comma \u003d\u003d TrailingArrayComma.ALWAYS\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n            log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (this.comma \u003d\u003d TrailingArrayComma.NEVER\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 9:40 PM",
      "commitNameOld": "4c1148db9982918e65f8d1156e8fb9c07b206fc9",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void logCommaViolation(final DetailAST ast) {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (TrailingArrayComma.ALWAYS \u003d\u003d this.comma\n+        if (this.comma \u003d\u003d TrailingArrayComma.ALWAYS\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n             this.log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (TrailingArrayComma.NEVER \u003d\u003d this.comma\n+        else if (this.comma \u003d\u003d TrailingArrayComma.NEVER\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n             this.log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast) {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (this.comma \u003d\u003d TrailingArrayComma.ALWAYS\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA)) {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (this.comma \u003d\u003d TrailingArrayComma.NEVER\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA) {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "89005ddf6d5d8b494e4451d16df9fd8996c735a9": {
      "type": "Ybodychange",
      "commitMessage": "Replace calls to equals() on enums with identity comparison\n\nThis replacement is safe because two enum constants are equal only when they have the same identity.\n",
      "commitDate": "10/03/15 7:46 AM",
      "commitName": "89005ddf6d5d8b494e4451d16df9fd8996c735a9",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "09/03/15 11:26 PM",
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void logCommaViolation(final DetailAST ast)\n     {\n         final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (TrailingArrayComma.ALWAYS.equals(this.comma)\n+        if (TrailingArrayComma.ALWAYS \u003d\u003d this.comma\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n         {\n             this.log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (TrailingArrayComma.NEVER.equals(this.comma)\n+        else if (TrailingArrayComma.NEVER \u003d\u003d this.comma\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n         {\n             this.log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST ast)\n    {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS \u003d\u003d this.comma\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (TrailingArrayComma.NEVER \u003d\u003d this.comma\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, annotation, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private void logCommaViolation(final DetailAST aAST)\n+    private void logCommaViolation(final DetailAST ast)\n     {\n-        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n+        if (TrailingArrayComma.ALWAYS.equals(this.comma)\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n         {\n             this.log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n+        else if (TrailingArrayComma.NEVER.equals(this.comma)\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n         {\n             this.log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void logCommaViolation(final DetailAST ast)\n    {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS.equals(this.comma)\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (TrailingArrayComma.NEVER.equals(this.comma)\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private void logCommaViolation(final DetailAST aAST)\n+    private void logCommaViolation(final DetailAST ast)\n     {\n-        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n-        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n+        if (TrailingArrayComma.ALWAYS.equals(this.comma)\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n         {\n             this.log(rCurly.getLineNo(),\n                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n-        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n+        else if (TrailingArrayComma.NEVER.equals(this.comma)\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n         {\n             this.log(comma.getLineNo(),\n                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void logCommaViolation(final DetailAST ast)\n    {\n        final DetailAST rCurly \u003d ast.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS.equals(this.comma)\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (TrailingArrayComma.NEVER.equals(this.comma)\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "09a7ca60414ea04b64f45bb190eaa26c767086be": {
      "type": "Ybodychange",
      "commitMessage": "Issue #537 refactoring: remove copy-paste of messages from UTests\n",
      "commitDate": "28/12/14 3:14 PM",
      "commitName": "09a7ca60414ea04b64f45bb190eaa26c767086be",
      "commitAuthor": "ychulovskyy",
      "commitDateOld": "22/12/14 4:34 PM",
      "commitNameOld": "f0c6c6ad7c33dc8af5a46c6ae2ecdff24f13a70b",
      "commitAuthorOld": "ychulovskyy",
      "daysBetweenCommits": 5.94,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void logCommaViolation(final DetailAST aAST)\n     {\n         final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n \n         //comma can be null if array is empty\n         final DetailAST comma \u003d rCurly.getPreviousSibling();\n \n         if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n             \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n         {\n             this.log(rCurly.getLineNo(),\n-                rCurly.getColumnNo(), \"annotation.trailing.comma.missing\");\n+                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n         }\n         else if (TrailingArrayComma.NEVER.equals(this.mComma)\n             \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n         {\n             this.log(comma.getLineNo(),\n-                comma.getColumnNo(), \"annotation.trailing.comma.present\");\n+                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST aAST)\n    {\n        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);\n        }\n        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void logCommaViolation(final DetailAST aAST)\n    {\n        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), \"annotation.trailing.comma.missing\");\n        }\n        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), \"annotation.trailing.comma.present\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java"
      }
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Yintroduced",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,20 @@\n+    private void logCommaViolation(final DetailAST aAST)\n+    {\n+        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n+\n+        //comma can be null if array is empty\n+        final DetailAST comma \u003d rCurly.getPreviousSibling();\n+\n+        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n+            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n+        {\n+            this.log(rCurly.getLineNo(),\n+                rCurly.getColumnNo(), \"annotation.trailing.comma.missing\");\n+        }\n+        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n+            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n+        {\n+            this.log(comma.getLineNo(),\n+                comma.getColumnNo(), \"annotation.trailing.comma.present\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void logCommaViolation(final DetailAST aAST)\n    {\n        final DetailAST rCurly \u003d aAST.findFirstToken(TokenTypes.RCURLY);\n\n        //comma can be null if array is empty\n        final DetailAST comma \u003d rCurly.getPreviousSibling();\n\n        if (TrailingArrayComma.ALWAYS.equals(this.mComma)\n            \u0026\u0026 (comma \u003d\u003d null || comma.getType() !\u003d TokenTypes.COMMA))\n        {\n            this.log(rCurly.getLineNo(),\n                rCurly.getColumnNo(), \"annotation.trailing.comma.missing\");\n        }\n        else if (TrailingArrayComma.NEVER.equals(this.mComma)\n            \u0026\u0026 comma !\u003d null \u0026\u0026 comma.getType() \u003d\u003d TokenTypes.COMMA)\n        {\n            this.log(comma.getLineNo(),\n                comma.getColumnNo(), \"annotation.trailing.comma.present\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java"
    }
  }
}