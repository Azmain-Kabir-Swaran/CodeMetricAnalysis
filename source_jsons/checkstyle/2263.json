{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DescendantTokenCheck.java",
  "functionName": "logAsSeparated",
  "functionId": "logAsSeparated___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
  "functionStartLine": 355,
  "functionEndLine": 388,
  "numCommitsSeen": 49,
  "timeTaken": 1397,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "07/05/18 6:56 PM",
      "commitNameOld": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 27.11,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void logAsSeparated(DetailAST ast) {\n         // name of this token\n-        final String name \u003d TokenUtils.getTokenName(ast.getType());\n+        final String name \u003d TokenUtil.getTokenName(ast.getType());\n \n         for (int element : limitedTokens) {\n             final int tokenCount \u003d counts[element - 1];\n             if (tokenCount \u003c minimumNumber) {\n-                final String descendantName \u003d TokenUtils.getTokenName(element);\n+                final String descendantName \u003d TokenUtil.getTokenName(element);\n \n                 if (minimumMessage \u003d\u003d null) {\n                     minimumMessage \u003d MSG_KEY_MIN;\n                 }\n                 log(ast,\n                         minimumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(minimumNumber),\n                         name,\n                         descendantName);\n             }\n             if (tokenCount \u003e maximumNumber) {\n-                final String descendantName \u003d TokenUtils.getTokenName(element);\n+                final String descendantName \u003d TokenUtil.getTokenName(element);\n \n                 if (maximumMessage \u003d\u003d null) {\n                     maximumMessage \u003d MSG_KEY_MAX;\n                 }\n                 log(ast,\n                         maximumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(maximumNumber),\n                         name,\n                         descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d TokenUtil.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d TokenUtil.getTokenName(element);\n\n                if (minimumMessage \u003d\u003d null) {\n                    minimumMessage \u003d MSG_KEY_MIN;\n                }\n                log(ast,\n                        minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d TokenUtil.getTokenName(element);\n\n                if (maximumMessage \u003d\u003d null) {\n                    maximumMessage \u003d MSG_KEY_MAX;\n                }\n                log(ast,\n                        maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void logAsSeparated(DetailAST ast) {\n         // name of this token\n         final String name \u003d TokenUtils.getTokenName(ast.getType());\n \n         for (int element : limitedTokens) {\n             final int tokenCount \u003d counts[element - 1];\n             if (tokenCount \u003c minimumNumber) {\n                 final String descendantName \u003d TokenUtils.getTokenName(element);\n \n                 if (minimumMessage \u003d\u003d null) {\n                     minimumMessage \u003d MSG_KEY_MIN;\n                 }\n-                log(ast.getLineNo(), ast.getColumnNo(),\n+                log(ast,\n                         minimumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(minimumNumber),\n                         name,\n                         descendantName);\n             }\n             if (tokenCount \u003e maximumNumber) {\n                 final String descendantName \u003d TokenUtils.getTokenName(element);\n \n                 if (maximumMessage \u003d\u003d null) {\n                     maximumMessage \u003d MSG_KEY_MAX;\n                 }\n-                log(ast.getLineNo(), ast.getColumnNo(),\n+                log(ast,\n                         maximumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(maximumNumber),\n                         name,\n                         descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d TokenUtils.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d TokenUtils.getTokenName(element);\n\n                if (minimumMessage \u003d\u003d null) {\n                    minimumMessage \u003d MSG_KEY_MIN;\n                }\n                log(ast,\n                        minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d TokenUtils.getTokenName(element);\n\n                if (maximumMessage \u003d\u003d null) {\n                    maximumMessage \u003d MSG_KEY_MAX;\n                }\n                log(ast,\n                        maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void logAsSeparated(DetailAST ast) {\n         // name of this token\n-        final String name \u003d Utils.getTokenName(ast.getType());\n+        final String name \u003d TokenUtils.getTokenName(ast.getType());\n \n         for (int element : limitedTokens) {\n             final int tokenCount \u003d counts[element - 1];\n             if (tokenCount \u003c minimumNumber) {\n-                final String descendantName \u003d Utils.getTokenName(element);\n+                final String descendantName \u003d TokenUtils.getTokenName(element);\n \n                 if (minimumMessage \u003d\u003d null) {\n                     minimumMessage \u003d MSG_KEY_MIN;\n                 }\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                         minimumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(minimumNumber),\n                         name,\n                         descendantName);\n             }\n             if (tokenCount \u003e maximumNumber) {\n-                final String descendantName \u003d Utils.getTokenName(element);\n+                final String descendantName \u003d TokenUtils.getTokenName(element);\n \n                 if (maximumMessage \u003d\u003d null) {\n                     maximumMessage \u003d MSG_KEY_MAX;\n                 }\n                 log(ast.getLineNo(), ast.getColumnNo(),\n                         maximumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(maximumNumber),\n                         name,\n                         descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d TokenUtils.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d TokenUtils.getTokenName(element);\n\n                if (minimumMessage \u003d\u003d null) {\n                    minimumMessage \u003d MSG_KEY_MIN;\n                }\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d TokenUtils.getTokenName(element);\n\n                if (maximumMessage \u003d\u003d null) {\n                    maximumMessage \u003d MSG_KEY_MAX;\n                }\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": "16/08/15 9:01 PM",
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n     private void logAsSeparated(DetailAST ast) {\n         // name of this token\n         final String name \u003d Utils.getTokenName(ast.getType());\n \n         for (int element : limitedTokens) {\n             final int tokenCount \u003d counts[element - 1];\n             if (tokenCount \u003c minimumNumber) {\n-                final String descendantName \u003d Utils\n-                        .getTokenName(element);\n+                final String descendantName \u003d Utils.getTokenName(element);\n+\n+                if (minimumMessage \u003d\u003d null) {\n+                    minimumMessage \u003d MSG_KEY_MIN;\n+                }\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                    minimumMessage \u003d\u003d null ? MSG_KEY_MIN\n-                                : minimumMessage,\n+                        minimumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(minimumNumber),\n                         name,\n                         descendantName);\n             }\n             if (tokenCount \u003e maximumNumber) {\n-                final String descendantName \u003d Utils\n-                        .getTokenName(element);\n+                final String descendantName \u003d Utils.getTokenName(element);\n+\n+                if (maximumMessage \u003d\u003d null) {\n+                    maximumMessage \u003d MSG_KEY_MAX;\n+                }\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                    maximumMessage \u003d\u003d null ? MSG_KEY_MAX\n-                                : maximumMessage,\n+                        maximumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(maximumNumber),\n                         name,\n                         descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d Utils.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d Utils.getTokenName(element);\n\n                if (minimumMessage \u003d\u003d null) {\n                    minimumMessage \u003d MSG_KEY_MIN;\n                }\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d Utils.getTokenName(element);\n\n                if (maximumMessage \u003d\u003d null) {\n                    maximumMessage \u003d MSG_KEY_MAX;\n                }\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "08/08/15 1:54 AM",
      "commitNameOld": "2da168644500c915660b7cfac9668b44317d81fc",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private void logAsSeparated(DetailAST ast) {\n         // name of this token\n         final String name \u003d Utils.getTokenName(ast.getType());\n \n         for (int element : limitedTokens) {\n             final int tokenCount \u003d counts[element - 1];\n             if (tokenCount \u003c minimumNumber) {\n                 final String descendantName \u003d Utils\n                         .getTokenName(element);\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n+                    minimumMessage \u003d\u003d null ? MSG_KEY_MIN\n                                 : minimumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(minimumNumber),\n                         name,\n                         descendantName);\n             }\n             if (tokenCount \u003e maximumNumber) {\n                 final String descendantName \u003d Utils\n                         .getTokenName(element);\n                 log(ast.getLineNo(), ast.getColumnNo(),\n-                        null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n+                    maximumMessage \u003d\u003d null ? MSG_KEY_MAX\n                                 : maximumMessage,\n                         String.valueOf(tokenCount),\n                         String.valueOf(maximumNumber),\n                         name,\n                         descendantName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d Utils.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d Utils\n                        .getTokenName(element);\n                log(ast.getLineNo(), ast.getColumnNo(),\n                    minimumMessage \u003d\u003d null ? MSG_KEY_MIN\n                                : minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d Utils\n                        .getTokenName(element);\n                log(ast.getLineNo(), ast.getColumnNo(),\n                    maximumMessage \u003d\u003d null ? MSG_KEY_MAX\n                                : maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java",
      "extendedDetails": {}
    },
    "40bb6812631517615cfc45efeb5bdcc93b95a8ae": {
      "type": "Yintroduced",
      "commitMessage": "DescendantTokenCheck  updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "40bb6812631517615cfc45efeb5bdcc93b95a8ae",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,30 @@\n+    private void logAsSeparated(DetailAST ast) {\n+        // name of this token\n+        final String name \u003d Utils.getTokenName(ast.getType());\n+\n+        for (int element : limitedTokens) {\n+            final int tokenCount \u003d counts[element - 1];\n+            if (tokenCount \u003c minimumNumber) {\n+                final String descendantName \u003d Utils\n+                        .getTokenName(element);\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n+                                : minimumMessage,\n+                        String.valueOf(tokenCount),\n+                        String.valueOf(minimumNumber),\n+                        name,\n+                        descendantName);\n+            }\n+            if (tokenCount \u003e maximumNumber) {\n+                final String descendantName \u003d Utils\n+                        .getTokenName(element);\n+                log(ast.getLineNo(), ast.getColumnNo(),\n+                        null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n+                                : maximumMessage,\n+                        String.valueOf(tokenCount),\n+                        String.valueOf(maximumNumber),\n+                        name,\n+                        descendantName);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void logAsSeparated(DetailAST ast) {\n        // name of this token\n        final String name \u003d Utils.getTokenName(ast.getType());\n\n        for (int element : limitedTokens) {\n            final int tokenCount \u003d counts[element - 1];\n            if (tokenCount \u003c minimumNumber) {\n                final String descendantName \u003d Utils\n                        .getTokenName(element);\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d minimumMessage ? MSG_KEY_MIN\n                                : minimumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(minimumNumber),\n                        name,\n                        descendantName);\n            }\n            if (tokenCount \u003e maximumNumber) {\n                final String descendantName \u003d Utils\n                        .getTokenName(element);\n                log(ast.getLineNo(), ast.getColumnNo(),\n                        null \u003d\u003d maximumMessage ? MSG_KEY_MAX\n                                : maximumMessage,\n                        String.valueOf(tokenCount),\n                        String.valueOf(maximumNumber),\n                        name,\n                        descendantName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java"
    }
  }
}