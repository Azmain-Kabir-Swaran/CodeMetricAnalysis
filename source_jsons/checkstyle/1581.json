{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ModifiedControlVariableCheck.java",
  "functionName": "getForIteratorVariables",
  "functionId": "getForIteratorVariables___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java",
  "functionStartLine": 396,
  "functionEndLine": 410,
  "numCommitsSeen": 53,
  "timeTaken": 1344,
  "changeHistory": [
    "8c17061e1120a21e3353b3cd53bf01bcee4c8d48",
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5",
    "5026b7228df4e3d9b79d13f27846987247f9e922"
  ],
  "changeHistoryShort": {
    "8c17061e1120a21e3353b3cd53bf01bcee4c8d48": "Ybodychange",
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6": "Ybodychange",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": "Ybodychange",
    "5026b7228df4e3d9b79d13f27846987247f9e922": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c17061e1120a21e3353b3cd53bf01bcee4c8d48": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: resolve remove conditional for ModifiedControlVariableCheck",
      "commitDate": "04/10/19 1:31 PM",
      "commitName": "8c17061e1120a21e3353b3cd53bf01bcee4c8d48",
      "commitAuthor": "rnveach",
      "commitDateOld": "21/04/19 7:01 AM",
      "commitNameOld": "c8867a448591d32b3117d16c103a8c2d79abc105",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 166.27,
      "commitsBetweenForRepo": 344,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n     private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n         final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n         final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n         final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n \n         findChildrenOfExpressionType(forUpdateListAST).stream()\n             .filter(iteratingExpressionAST -\u003e {\n                 return MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType());\n             }).forEach(iteratingExpressionAST -\u003e {\n                 final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n-                if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n-                    iteratorVariables.add(oneVariableOperatorChild.getText());\n-                }\n+                iteratorVariables.add(oneVariableOperatorChild.getText());\n             });\n \n         return iteratorVariables;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n        final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n        final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n        final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n\n        findChildrenOfExpressionType(forUpdateListAST).stream()\n            .filter(iteratingExpressionAST -\u003e {\n                return MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType());\n            }).forEach(iteratingExpressionAST -\u003e {\n                final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                iteratorVariables.add(oneVariableOperatorChild.getText());\n            });\n\n        return iteratorVariables;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java",
      "extendedDetails": {}
    },
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3735: added lambdas to NeedBraces for checkstyle config",
      "commitDate": "15/02/17 8:38 PM",
      "commitName": "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n         final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n         final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n         final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n \n         findChildrenOfExpressionType(forUpdateListAST).stream()\n-            .filter(iteratingExpressionAST -\u003e\n-                MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType()))\n-            .forEach(iteratingExpressionAST -\u003e {\n+            .filter(iteratingExpressionAST -\u003e {\n+                return MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType());\n+            }).forEach(iteratingExpressionAST -\u003e {\n                 final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                 if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n                     iteratorVariables.add(oneVariableOperatorChild.getText());\n                 }\n             });\n \n         return iteratorVariables;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n        final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n        final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n        final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n\n        findChildrenOfExpressionType(forUpdateListAST).stream()\n            .filter(iteratingExpressionAST -\u003e {\n                return MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType());\n            }).forEach(iteratingExpressionAST -\u003e {\n                final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n                    iteratorVariables.add(oneVariableOperatorChild.getText());\n                }\n            });\n\n        return iteratorVariables;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java",
      "extendedDetails": {}
    },
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
      "commitDate": "08/09/16 5:30 AM",
      "commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "commitAuthor": "Mariia Mykhailova",
      "commitDateOld": "23/06/16 5:32 AM",
      "commitNameOld": "1395a92adb0d8fd0767bee81dc407c5e58b37252",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 77.0,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n         final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n         final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n         final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n \n-        for (DetailAST iteratingExpressionAST : findChildrenOfExpressionType(forUpdateListAST)) {\n-\n-            if (MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType())) {\n+        findChildrenOfExpressionType(forUpdateListAST).stream()\n+            .filter(iteratingExpressionAST -\u003e\n+                MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType()))\n+            .forEach(iteratingExpressionAST -\u003e {\n                 final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                 if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n                     iteratorVariables.add(oneVariableOperatorChild.getText());\n                 }\n-            }\n-        }\n+            });\n \n         return iteratorVariables;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast) {\n        final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n        final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n        final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n\n        findChildrenOfExpressionType(forUpdateListAST).stream()\n            .filter(iteratingExpressionAST -\u003e\n                MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType()))\n            .forEach(iteratingExpressionAST -\u003e {\n                final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n                    iteratorVariables.add(oneVariableOperatorChild.getText());\n                }\n            });\n\n        return iteratorVariables;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java",
      "extendedDetails": {}
    },
    "5026b7228df4e3d9b79d13f27846987247f9e922": {
      "type": "Yintroduced",
      "commitMessage": "Added option in ModifiedControlVariable Check to ignore validation of variables defined in for which are not change in for iterator part, fix issue #286\n",
      "commitDate": "01/04/15 2:44 PM",
      "commitName": "5026b7228df4e3d9b79d13f27846987247f9e922",
      "commitAuthor": "liscju",
      "diff": "@@ -0,0 +1,18 @@\n+    private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast)\n+    {\n+        final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n+        final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n+        final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n+\n+        for (DetailAST iteratingExpressionAST : findChildrenOfExpressionType(forUpdateListAST)) {\n+\n+            if (MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType())) {\n+                final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n+                if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n+                    iteratorVariables.add(oneVariableOperatorChild.getText());\n+                }\n+            }\n+        }\n+\n+        return iteratorVariables;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e getForIteratorVariables(DetailAST ast)\n    {\n        final Set\u003cString\u003e iteratorVariables \u003d new HashSet\u003c\u003e();\n        final DetailAST forIteratorAST \u003d ast.findFirstToken(TokenTypes.FOR_ITERATOR);\n        final DetailAST forUpdateListAST \u003d forIteratorAST.findFirstToken(TokenTypes.ELIST);\n\n        for (DetailAST iteratingExpressionAST : findChildrenOfExpressionType(forUpdateListAST)) {\n\n            if (MUTATION_OPERATIONS.contains(iteratingExpressionAST.getType())) {\n                final DetailAST oneVariableOperatorChild \u003d iteratingExpressionAST.getFirstChild();\n                if (oneVariableOperatorChild.getType() \u003d\u003d TokenTypes.IDENT) {\n                    iteratorVariables.add(oneVariableOperatorChild.getText());\n                }\n            }\n        }\n\n        return iteratorVariables;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java"
    }
  }
}