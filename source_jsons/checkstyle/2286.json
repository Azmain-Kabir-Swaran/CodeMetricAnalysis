{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VisibilityModifierCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
  "functionStartLine": 589,
  "functionEndLine": 603,
  "numCommitsSeen": 120,
  "timeTaken": 2455,
  "changeHistory": [
    "f9f60d3142533c3eebff775e8eb1159935faaba1",
    "e912c46b5bb5c085323930bd1e500b180c1bea8d",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "08638b5f739d9929698860048c052da2d5f80209",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "e27489c7721909245ea5055eac3b9c7c659081f6",
    "6125beffc437f970eae276b4a6542265c6547784",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "3a75454e8dce5c5d5b2d43e80b4a4ed5dbceece3",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "220f6cb5d992429a1d71f867088c8e7ab39a453a"
  ],
  "changeHistoryShort": {
    "f9f60d3142533c3eebff775e8eb1159935faaba1": "Ybodychange",
    "e912c46b5bb5c085323930bd1e500b180c1bea8d": "Ybodychange",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "08638b5f739d9929698860048c052da2d5f80209": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "e27489c7721909245ea5055eac3b9c7c659081f6": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "3a75454e8dce5c5d5b2d43e80b4a4ed5dbceece3": "Ybodychange",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": "Yfilerename",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "220f6cb5d992429a1d71f867088c8e7ab39a453a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f9f60d3142533c3eebff775e8eb1159935faaba1": {
      "type": "Ybodychange",
      "commitMessage": "Visibility Modifier Check, added option allows public immutable fields, issue #61\n",
      "commitDate": "26/02/15 12:35 PM",
      "commitName": "f9f60d3142533c3eebff775e8eb1159935faaba1",
      "commitAuthor": "alexkravin",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "e912c46b5bb5c085323930bd1e500b180c1bea8d",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,16 @@\n     public void visitToken(DetailAST ast)\n     {\n-        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n-            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n-        {\n-            return;\n-        }\n-\n-        final DetailAST varNameAST \u003d getVarNameAST(ast);\n-        final String varName \u003d varNameAST.getText();\n-        final boolean inInterfaceOrAnnotationBlock \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n-        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n-        final String declaredScope \u003d getVisibilityScope(mods);\n-        final String variableScope \u003d\n-             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n-\n-        if (!(\"private\".equals(variableScope)\n-                || inInterfaceOrAnnotationBlock // implicitly static and final\n-                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n-                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n-                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n-                || (\"public\".equals(variableScope)\n-                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n-        {\n-            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n-                    MSG_KEY, varName);\n+        switch (ast.getType()) {\n+            case TokenTypes.VARIABLE_DEF:\n+                if (!isAnonymousClassVariable(ast)) {\n+                    visitVariableDef(ast);\n+                }\n+                break;\n+            case TokenTypes.IMPORT:\n+                visitImport(ast);\n+                break;\n+            default:\n+                final String exceptionMsg \u003d \"Unexpected token type: \" + ast.getText();\n+                throw new IllegalArgumentException(exceptionMsg);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        switch (ast.getType()) {\n            case TokenTypes.VARIABLE_DEF:\n                if (!isAnonymousClassVariable(ast)) {\n                    visitVariableDef(ast);\n                }\n                break;\n            case TokenTypes.IMPORT:\n                visitImport(ast);\n                break;\n            default:\n                final String exceptionMsg \u003d \"Unexpected token type: \" + ast.getText();\n                throw new IllegalArgumentException(exceptionMsg);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "e912c46b5bb5c085323930bd1e500b180c1bea8d": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, design package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "e912c46b5bb5c085323930bd1e500b180c1bea8d",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST ast)\n     {\n         if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(ast);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n         final Set\u003cString\u003e mods \u003d getModifiers(ast);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                 || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                 || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                 || (\"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n-                    \"variable.notPrivate\", varName);\n+                    MSG_KEY, varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(ast);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    MSG_KEY, varName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, design, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 461,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n-            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n+        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n+            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n-        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n+        final DetailAST varNameAST \u003d getVarNameAST(ast);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n-        final Set\u003cString\u003e mods \u003d getModifiers(aAST);\n+            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n+        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                 || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                 || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                 || (\"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(ast);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 461,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n-            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n+        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n+            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n-        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n+        final DetailAST varNameAST \u003d getVarNameAST(ast);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n-        final Set\u003cString\u003e mods \u003d getModifiers(aAST);\n+            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n+        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                 || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                 || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                 || (\"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if ((ast.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (ast.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(ast);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(ast);\n        final Set\u003cString\u003e mods \u003d getModifiers(ast);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n        final Set\u003cString\u003e mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java"
      }
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 10:36 PM",
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.66,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n-        final Set mods \u003d getModifiers(aAST);\n+        final Set\u003cString\u003e mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                 || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                 || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                 || (\"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n        final Set\u003cString\u003e mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n-                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n-                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n-                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n-                || \"public\".equals(variableScope)\n-                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find()))\n+                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n+                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n+                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n+                || (\"public\".equals(variableScope)\n+                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || (mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\"))\n                || (\"package\".equals(variableScope) \u0026\u0026 isPackageAllowed())\n                || (\"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed())\n                || (\"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find())))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "e27489c7721909245ea5055eac3b9c7c659081f6": {
      "type": "Ybodychange",
      "commitMessage": "initial replacing RE by Pattern (need to update docs)\n",
      "commitDate": "11/05/05 9:48 AM",
      "commitName": "e27489c7721909245ea5055eac3b9c7c659081f6",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 122.25,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         final String varName \u003d varNameAST.getText();\n         final boolean inInterfaceOrAnnotationBlock \u003d\n             ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                 || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                 || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                 || \"public\".equals(variableScope)\n-                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n+                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find()))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().matcher(varName).find()))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "26/08/04 6:47 AM",
      "commitNameOld": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 32.21,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         final String varName \u003d varNameAST.getText();\n-        final boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n+        final boolean inInterfaceOrAnnotationBlock \u003d\n+            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n-             inInterfaceBlock ? \"public\" : declaredScope;\n+             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n-                || inInterfaceBlock // implicitly static and final\n+                || inInterfaceOrAnnotationBlock // implicitly static and final\n                 || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                 || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                 || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                 || \"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().match(varName)))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceOrAnnotationBlock \u003d\n            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceOrAnnotationBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 224.69,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n             || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n-        String varName \u003d varNameAST.getText();\n-        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n+        final String varName \u003d varNameAST.getText();\n+        final boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceBlock // implicitly static and final\n                 || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                 || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                 || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                 || \"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().match(varName)))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        final String varName \u003d varNameAST.getText();\n        final boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "3a75454e8dce5c5d5b2d43e80b4a4ed5dbceece3": {
      "type": "Ybodychange",
      "commitMessage": "Added CyclomaticComplexityCheck from Simon Harris.\nRefactored quite a bit\n",
      "commitDate": "24/06/03 5:35 AM",
      "commitName": "3a75454e8dce5c5d5b2d43e80b4a4ed5dbceece3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "09/06/03 12:48 AM",
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 15.2,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        if (aAST.getType() !\u003d TokenTypes.VARIABLE_DEF\n-                || aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK)\n+        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n+            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         String varName \u003d varNameAST.getText();\n         boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceBlock // implicitly static and final\n                 || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                 || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                 || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                 || \"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().match(varName)))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if ((aAST.getType() !\u003d TokenTypes.VARIABLE_DEF)\n            || (aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK))\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        String varName \u003d varNameAST.getText();\n        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Design checks\n",
      "commitDate": "04/06/03 4:52 PM",
      "commitName": "32d19d680144540a83c5dde5588f5a7ac302f8e1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 9:08 AM",
      "commitNameOld": "679f818267161d9501a73ffdcc0d991537233633",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.VARIABLE_DEF\n                || aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK)\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        String varName \u003d varNameAST.getText();\n        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/VisibilityModifierCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java"
      }
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": "18/10/02 11:28 PM",
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "17/10/02 3:52 PM",
      "commitNameOld": "7f35e143a2472ecb49625cc841bd0482fe3dfeea",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        if (aAST.getType() !\u003d JavaTokenTypes.VARIABLE_DEF\n-                || aAST.getParent().getType() !\u003d JavaTokenTypes.OBJBLOCK)\n+        if (aAST.getType() !\u003d TokenTypes.VARIABLE_DEF\n+                || aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK)\n         {\n             return;\n         }\n \n         final DetailAST varNameAST \u003d getVarNameAST(aAST);\n         String varName \u003d varNameAST.getText();\n         boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n         final Set mods \u003d getModifiers(aAST);\n         final String declaredScope \u003d getVisibilityScope(mods);\n         final String variableScope \u003d\n              inInterfaceBlock ? \"public\" : declaredScope;\n \n         if (!(\"private\".equals(variableScope)\n                 || inInterfaceBlock // implicitly static and final\n                 || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                 || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                 || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                 || \"public\".equals(variableScope)\n                    \u0026\u0026 getPublicMemberRegexp().match(varName)))\n         {\n             log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                     \"variable.notPrivate\", varName);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.VARIABLE_DEF\n                || aAST.getParent().getType() !\u003d TokenTypes.OBJBLOCK)\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        String varName \u003d varNameAST.getText();\n        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope)\n                   \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "220f6cb5d992429a1d71f867088c8e7ab39a453a": {
      "type": "Yintroduced",
      "commitMessage": "ported member visibility checks\n",
      "commitDate": "16/10/02 5:07 PM",
      "commitName": "220f6cb5d992429a1d71f867088c8e7ab39a453a",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,27 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        if (aAST.getType() !\u003d JavaTokenTypes.VARIABLE_DEF\n+                || aAST.getParent().getType() !\u003d JavaTokenTypes.OBJBLOCK)\n+        {\n+            return;\n+        }\n+\n+        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n+        String varName \u003d varNameAST.getText();\n+        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n+        final Set mods \u003d getModifiers(aAST);\n+        final String declaredScope \u003d getVisibilityScope(mods);\n+        final String variableScope \u003d\n+             inInterfaceBlock ? \"public\" : declaredScope;\n+\n+        if (!(\"private\".equals(variableScope)\n+                || inInterfaceBlock // implicitly static and final\n+                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n+                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n+                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n+                || \"public\".equals(variableScope) \u0026\u0026 getPublicMemberRegexp().match(varName)))\n+        {\n+            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n+                    \"variable.notPrivate\", varName);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d JavaTokenTypes.VARIABLE_DEF\n                || aAST.getParent().getType() !\u003d JavaTokenTypes.OBJBLOCK)\n        {\n            return;\n        }\n\n        final DetailAST varNameAST \u003d getVarNameAST(aAST);\n        String varName \u003d varNameAST.getText();\n        boolean inInterfaceBlock \u003d inInterfaceBlock(aAST);\n        final Set mods \u003d getModifiers(aAST);\n        final String declaredScope \u003d getVisibilityScope(mods);\n        final String variableScope \u003d\n             inInterfaceBlock ? \"public\" : declaredScope;\n\n        if (!(\"private\".equals(variableScope)\n                || inInterfaceBlock // implicitly static and final\n                || mods.contains(\"static\") \u0026\u0026 mods.contains(\"final\")\n                || \"package\".equals(variableScope) \u0026\u0026 isPackageAllowed()\n                || \"protected\".equals(variableScope) \u0026\u0026 isProtectedAllowed()\n                || \"public\".equals(variableScope) \u0026\u0026 getPublicMemberRegexp().match(varName)))\n        {\n            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),\n                    \"variable.notPrivate\", varName);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/VisibilityModifierCheck.java"
    }
  }
}