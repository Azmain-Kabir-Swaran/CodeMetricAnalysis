{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "searchVariableUsageExpressions",
  "functionId": "searchVariableUsageExpressions___variableAst-DetailAST(modifiers-final)__statementAst-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 583,
  "functionEndLine": 603,
  "numCommitsSeen": 63,
  "timeTaken": 1015,
  "changeHistory": [
    "79062a696efc28fd2a2926de8b18be803b6819a7",
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218"
  ],
  "changeHistoryShort": {
    "79062a696efc28fd2a2926de8b18be803b6819a7": "Ybodychange",
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79062a696efc28fd2a2926de8b18be803b6819a7": {
      "type": "Ybodychange",
      "commitMessage": "spelling: fix then / than typos\n",
      "commitDate": "07/03/19 6:24 PM",
      "commitName": "79062a696efc28fd2a2926de8b18be803b6819a7",
      "commitAuthor": "Bj√∂rn Kautler",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n         searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {\n         final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n         int distance \u003d 0;\n         DetailAST currentStatementAst \u003d statementAst;\n         while (currentStatementAst !\u003d null\n                 \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n             if (currentStatementAst.getFirstChild() !\u003d null) {\n                 if (isChild(currentStatementAst, variableAst)) {\n                     variableUsageExpressions.add(currentStatementAst);\n                 }\n                 // If expression doesn\u0027t contain variable and this variable\n-                // hasn\u0027t been met yet, than distance + 1.\n+                // hasn\u0027t been met yet, then distance + 1.\n                 else if (variableUsageExpressions.isEmpty()\n                         \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     distance++;\n                 }\n             }\n             currentStatementAst \u003d currentStatementAst.getNextSibling();\n         }\n         return new SimpleEntry\u003c\u003e(variableUsageExpressions, distance);\n     }\n\\ No newline at end of file\n",
      "actualSource": "        searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {\n        final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n        int distance \u003d 0;\n        DetailAST currentStatementAst \u003d statementAst;\n        while (currentStatementAst !\u003d null\n                \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n            if (currentStatementAst.getFirstChild() !\u003d null) {\n                if (isChild(currentStatementAst, variableAst)) {\n                    variableUsageExpressions.add(currentStatementAst);\n                }\n                // If expression doesn\u0027t contain variable and this variable\n                // hasn\u0027t been met yet, then distance + 1.\n                else if (variableUsageExpressions.isEmpty()\n                        \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    distance++;\n                }\n            }\n            currentStatementAst \u003d currentStatementAst.getNextSibling();\n        }\n        return new SimpleEntry\u003c\u003e(variableUsageExpressions, distance);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "ee84bccfe190e288447b417bc5e1a3cf94d7b218": {
      "type": "Yintroduced",
      "commitMessage": "Issue #1566: Fixed JavaNSCC violations\n",
      "commitDate": "28/08/15 10:45 AM",
      "commitName": "ee84bccfe190e288447b417bc5e1a3cf94d7b218",
      "commitAuthor": "Baratali Izmailov",
      "diff": "@@ -0,0 +1,21 @@\n+        searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {\n+        final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n+        int distance \u003d 0;\n+        DetailAST currentStatementAst \u003d statementAst;\n+        while (currentStatementAst !\u003d null\n+                \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n+            if (currentStatementAst.getFirstChild() !\u003d null) {\n+                if (isChild(currentStatementAst, variableAst)) {\n+                    variableUsageExpressions.add(currentStatementAst);\n+                }\n+                // If expression doesn\u0027t contain variable and this variable\n+                // hasn\u0027t been met yet, than distance + 1.\n+                else if (variableUsageExpressions.isEmpty()\n+                        \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n+                    distance++;\n+                }\n+            }\n+            currentStatementAst \u003d currentStatementAst.getNextSibling();\n+        }\n+        return new SimpleEntry\u003c\u003e(variableUsageExpressions, distance);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "        searchVariableUsageExpressions(final DetailAST variableAst, final DetailAST statementAst) {\n        final List\u003cDetailAST\u003e variableUsageExpressions \u003d new ArrayList\u003c\u003e();\n        int distance \u003d 0;\n        DetailAST currentStatementAst \u003d statementAst;\n        while (currentStatementAst !\u003d null\n                \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.RCURLY) {\n            if (currentStatementAst.getFirstChild() !\u003d null) {\n                if (isChild(currentStatementAst, variableAst)) {\n                    variableUsageExpressions.add(currentStatementAst);\n                }\n                // If expression doesn\u0027t contain variable and this variable\n                // hasn\u0027t been met yet, than distance + 1.\n                else if (variableUsageExpressions.isEmpty()\n                        \u0026\u0026 currentStatementAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    distance++;\n                }\n            }\n            currentStatementAst \u003d currentStatementAst.getNextSibling();\n        }\n        return new SimpleEntry\u003c\u003e(variableUsageExpressions, distance);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java"
    }
  }
}