{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HiddenFieldCheck.java",
  "functionName": "isSetterMethod",
  "functionId": "isSetterMethod___aMethodAST-DetailAST__aName-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
  "functionStartLine": 469,
  "functionEndLine": 498,
  "numCommitsSeen": 75,
  "timeTaken": 1656,
  "changeHistory": [
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "e2cca1a0ad8e34442a7f18e3b214b13d300f165b",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "bf3e77cc87f01b9ea0d205933749770398fa623b",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "6784e5bcd5baa6b5086bf8b63709856d685a74c8"
  ],
  "changeHistoryShort": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "e2cca1a0ad8e34442a7f18e3b214b13d300f165b": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "bf3e77cc87f01b9ea0d205933749770398fa623b": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "6784e5bcd5baa6b5086bf8b63709856d685a74c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/09/17 6:28 AM",
      "commitNameOld": "b0493771961c1fd89c96271b397da62699877551",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 31.56,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n         final String methodName \u003d\n             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n         boolean isSetterMethod \u003d false;\n \n         if ((\"set\" + capitalize(aName)).equals(methodName)) {\n             // method name did match set${Name}(${anyType} ${aName})\n             // where ${Name} is capitalized version of ${aName}\n             // therefore this method is potentially a setter\n             final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n             final String returnType \u003d typeAST.getFirstChild().getText();\n-            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n+            if (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) !\u003d null\n                     || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                 // this method has signature\n                 //\n                 //     void set${Name}(${anyType} ${name})\n                 //\n                 // and therefore considered to be a setter\n                 //\n                 // or\n                 //\n                 // return type is not void, but it is the same as the class\n                 // where method is declared and and mSetterCanReturnItsClass\n                 // is set to true\n                 isSetterMethod \u003d true;\n             }\n         }\n \n         return isSetterMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if ((\"set\" + capitalize(aName)).equals(methodName)) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) !\u003d null\n                    || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
      "extendedDetails": {}
    },
    "e2cca1a0ad8e34442a7f18e3b214b13d300f165b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1930: Resolve EqualsAvoidNull violation in HiddenField",
      "commitDate": "06/11/15 6:09 AM",
      "commitName": "e2cca1a0ad8e34442a7f18e3b214b13d300f165b",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "16/10/15 4:35 PM",
      "commitNameOld": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 20.61,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n         final String methodName \u003d\n             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n         boolean isSetterMethod \u003d false;\n \n-        if (methodName.equals(\"set\" + capitalize(aName))) {\n+        if ((\"set\" + capitalize(aName)).equals(methodName)) {\n             // method name did match set${Name}(${anyType} ${aName})\n             // where ${Name} is capitalized version of ${aName}\n             // therefore this method is potentially a setter\n             final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n             final String returnType \u003d typeAST.getFirstChild().getText();\n             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                     || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                 // this method has signature\n                 //\n                 //     void set${Name}(${anyType} ${name})\n                 //\n                 // and therefore considered to be a setter\n                 //\n                 // or\n                 //\n                 // return type is not void, but it is the same as the class\n                 // where method is declared and and mSetterCanReturnItsClass\n                 // is set to true\n                 isSetterMethod \u003d true;\n             }\n         }\n \n         return isSetterMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if ((\"set\" + capitalize(aName)).equals(methodName)) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                    || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n         final String methodName \u003d\n             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n         boolean isSetterMethod \u003d false;\n \n         if (methodName.equals(\"set\" + capitalize(aName))) {\n             // method name did match set${Name}(${anyType} ${aName})\n             // where ${Name} is capitalized version of ${aName}\n             // therefore this method is potentially a setter\n             final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n             final String returnType \u003d typeAST.getFirstChild().getText();\n             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n-                    || setterCanReturnItsClass \u0026\u0026 frame.embeddedIn(returnType)) {\n+                    || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                 // this method has signature\n                 //\n                 //     void set${Name}(${anyType} ${name})\n                 //\n                 // and therefore considered to be a setter\n                 //\n                 // or\n                 //\n                 // return type is not void, but it is the same as the class\n                 // where method is declared and and mSetterCanReturnItsClass\n                 // is set to true\n                 isSetterMethod \u003d true;\n             }\n         }\n \n         return isSetterMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if (methodName.equals(\"set\" + capitalize(aName))) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                    || setterCanReturnItsClass \u0026\u0026 frame.isEmbeddedIn(returnType)) {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
      "extendedDetails": {}
    },
    "bf3e77cc87f01b9ea0d205933749770398fa623b": {
      "type": "Ybodychange",
      "commitMessage": "Local variables should not shadow class fields. Issue #46\n",
      "commitDate": "18/08/15 8:45 PM",
      "commitName": "bf3e77cc87f01b9ea0d205933749770398fa623b",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "18/08/15 8:23 PM",
      "commitNameOld": "1d7ef7f008af715f16e2bd8e7f2c4c85f87643d7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n         final String methodName \u003d\n             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n         boolean isSetterMethod \u003d false;\n \n         if (methodName.equals(\"set\" + capitalize(aName))) {\n             // method name did match set${Name}(${anyType} ${aName})\n             // where ${Name} is capitalized version of ${aName}\n             // therefore this method is potentially a setter\n             final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n             final String returnType \u003d typeAST.getFirstChild().getText();\n             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n-                || setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType)) {\n+                    || setterCanReturnItsClass \u0026\u0026 frame.embeddedIn(returnType)) {\n                 // this method has signature\n                 //\n                 //     void set${Name}(${anyType} ${name})\n                 //\n                 // and therefore considered to be a setter\n                 //\n                 // or\n                 //\n                 // return type is not void, but it is the same as the class\n                 // where method is declared and and mSetterCanReturnItsClass\n                 // is set to true\n                 isSetterMethod \u003d true;\n             }\n         }\n \n         return isSetterMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName) {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if (methodName.equals(\"set\" + capitalize(aName))) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                    || setterCanReturnItsClass \u0026\u0026 frame.embeddedIn(returnType)) {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "09/03/15 11:22 PM",
      "commitNameOld": "aef1f36b5a01b0a8da6557fd82c11a07baf350b2",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private boolean isSetterMethod(DetailAST aMethodAST, String aName)\n     {\n         final String methodName \u003d\n             aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n         boolean isSetterMethod \u003d false;\n \n         if (methodName.equals(\"set\" + capitalize(aName))) {\n             // method name did match set${Name}(${anyType} ${aName})\n             // where ${Name} is capitalized version of ${aName}\n             // therefore this method is potentially a setter\n             final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n             final String returnType \u003d typeAST.getFirstChild().getText();\n             if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n-                || (setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType)))\n+                || setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType))\n             {\n                 // this method has signature\n                 //\n                 //     void set${Name}(${anyType} ${name})\n                 //\n                 // and therefore considered to be a setter\n                 //\n                 // or\n                 //\n                 // return type is not void, but it is the same as the class\n                 // where method is declared and and mSetterCanReturnItsClass\n                 // is set to true\n                 isSetterMethod \u003d true;\n             }\n         }\n \n         return isSetterMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName)\n    {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if (methodName.equals(\"set\" + capitalize(aName))) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                || setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType))\n            {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java",
      "extendedDetails": {}
    },
    "6784e5bcd5baa6b5086bf8b63709856d685a74c8": {
      "type": "Yintroduced",
      "commitMessage": "HiddenField module can now accept setterCanReturnItsClass attribute. #598\n",
      "commitDate": "26/01/15 5:04 PM",
      "commitName": "6784e5bcd5baa6b5086bf8b63709856d685a74c8",
      "commitAuthor": "Dmitri Priimak",
      "diff": "@@ -0,0 +1,32 @@\n+    private boolean isSetterMethod(DetailAST aMethodAST, String aName)\n+    {\n+        final String methodName \u003d\n+            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n+        boolean isSetterMethod \u003d false;\n+\n+        if (methodName.equals(\"set\" + capitalize(aName))) {\n+            // method name did match set${Name}(${anyType} ${aName})\n+            // where ${Name} is capitalized version of ${aName}\n+            // therefore this method is potentially a setter\n+            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n+            final String returnType \u003d typeAST.getFirstChild().getText();\n+            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n+                || (setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType)))\n+            {\n+                // this method has signature\n+                //\n+                //     void set${Name}(${anyType} ${name})\n+                //\n+                // and therefore considered to be a setter\n+                //\n+                // or\n+                //\n+                // return type is not void, but it is the same as the class\n+                // where method is declared and and mSetterCanReturnItsClass\n+                // is set to true\n+                isSetterMethod \u003d true;\n+            }\n+        }\n+\n+        return isSetterMethod;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isSetterMethod(DetailAST aMethodAST, String aName)\n    {\n        final String methodName \u003d\n            aMethodAST.findFirstToken(TokenTypes.IDENT).getText();\n        boolean isSetterMethod \u003d false;\n\n        if (methodName.equals(\"set\" + capitalize(aName))) {\n            // method name did match set${Name}(${anyType} ${aName})\n            // where ${Name} is capitalized version of ${aName}\n            // therefore this method is potentially a setter\n            final DetailAST typeAST \u003d aMethodAST.findFirstToken(TokenTypes.TYPE);\n            final String returnType \u003d typeAST.getFirstChild().getText();\n            if (typeAST.branchContains(TokenTypes.LITERAL_VOID)\n                || (setterCanReturnItsClass \u0026\u0026 currentFrame.embeddedIn(returnType)))\n            {\n                // this method has signature\n                //\n                //     void set${Name}(${anyType} ${name})\n                //\n                // and therefore considered to be a setter\n                //\n                // or\n                //\n                // return type is not void, but it is the same as the class\n                // where method is declared and and mSetterCanReturnItsClass\n                // is set to true\n                isSetterMethod \u003d true;\n            }\n        }\n\n        return isSetterMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java"
    }
  }
}