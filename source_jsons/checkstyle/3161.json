{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MissingJavadocTypeCheck.java",
  "functionName": "shouldCheck",
  "functionId": "shouldCheck___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocTypeCheck.java",
  "functionStartLine": 229,
  "functionEndLine": 248,
  "numCommitsSeen": 5,
  "timeTaken": 565,
  "changeHistory": [
    "dd45616a0df1ba00e9e62ae9626df5929d94b225"
  ],
  "changeHistoryShort": {
    "dd45616a0df1ba00e9e62ae9626df5929d94b225": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd45616a0df1ba00e9e62ae9626df5929d94b225": {
      "type": "Yintroduced",
      "commitMessage": "Issue #5411: split JavadocType for missing javadocs",
      "commitDate": "05/04/19 9:33 AM",
      "commitName": "dd45616a0df1ba00e9e62ae9626df5929d94b225",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,20 @@\n+    private boolean shouldCheck(final DetailAST ast) {\n+        final Scope customScope;\n+\n+        if (ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n+            customScope \u003d Scope.PUBLIC;\n+        }\n+        else {\n+            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+            customScope \u003d ScopeUtil.getScopeFromMods(mods);\n+        }\n+        final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n+\n+        return customScope.isIn(scope)\n+            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n+            \u0026\u0026 (excludeScope \u003d\u003d null\n+                || !customScope.isIn(excludeScope)\n+                || surroundingScope !\u003d null\n+                \u0026\u0026 !surroundingScope.isIn(excludeScope))\n+            \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, skipAnnotations);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean shouldCheck(final DetailAST ast) {\n        final Scope customScope;\n\n        if (ScopeUtil.isInInterfaceOrAnnotationBlock(ast)) {\n            customScope \u003d Scope.PUBLIC;\n        }\n        else {\n            final DetailAST mods \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            customScope \u003d ScopeUtil.getScopeFromMods(mods);\n        }\n        final Scope surroundingScope \u003d ScopeUtil.getSurroundingScope(ast);\n\n        return customScope.isIn(scope)\n            \u0026\u0026 (surroundingScope \u003d\u003d null || surroundingScope.isIn(scope))\n            \u0026\u0026 (excludeScope \u003d\u003d null\n                || !customScope.isIn(excludeScope)\n                || surroundingScope !\u003d null\n                \u0026\u0026 !surroundingScope.isIn(excludeScope))\n            \u0026\u0026 !AnnotationUtil.containsAnnotation(ast, skipAnnotations);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocTypeCheck.java"
    }
  }
}