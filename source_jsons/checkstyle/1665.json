{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ExplicitInitializationCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
  "functionStartLine": 139,
  "functionEndLine": 152,
  "numCommitsSeen": 71,
  "timeTaken": 2542,
  "changeHistory": [
    "ea7b2dd0a9060d427273bd88909e370cb9f88436",
    "073c370de2e65fc346b51ef09763ecb30b5cd14f",
    "185f969cd163bbaaf41356c73bcac3831ac31fc9",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "6d9d894a62caf7e7419fcb07e7d972499e4306d7",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "6125beffc437f970eae276b4a6542265c6547784",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "d0df5e9a9e13d369dc917e276b92cedd200ba466",
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b",
    "03c3efabf3b36fd1b8dd4da30678365c7506370c"
  ],
  "changeHistoryShort": {
    "ea7b2dd0a9060d427273bd88909e370cb9f88436": "Ybodychange",
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": "Ybodychange",
    "185f969cd163bbaaf41356c73bcac3831ac31fc9": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "6d9d894a62caf7e7419fcb07e7d972499e4306d7": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "d0df5e9a9e13d369dc917e276b92cedd200ba466": "Ybodychange",
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b": "Ybodychange",
    "03c3efabf3b36fd1b8dd4da30678365c7506370c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea7b2dd0a9060d427273bd88909e370cb9f88436": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6264: added TRUE_RETURNS pitest mutator",
      "commitDate": "18/12/18 7:35 AM",
      "commitName": "ea7b2dd0a9060d427273bd88909e370cb9f88436",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 197.46,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,14 @@\n     public void visitToken(DetailAST ast) {\n         if (!isSkipCase(ast)) {\n             final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n             final DetailAST exprStart \u003d\n                 assign.getFirstChild().getFirstChild();\n-            final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n-            if (isObjectType(type)\n-                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n+            if (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                 final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 log(ident, MSG_KEY, ident.getText(), \"null\");\n             }\n             if (!onlyObjectReferences) {\n                 validateNonObjects(ast);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isSkipCase(ast)) {\n            final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n            final DetailAST exprStart \u003d\n                assign.getFirstChild().getFirstChild();\n            if (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                log(ident, MSG_KEY, ident.getText(), \"null\");\n            }\n            if (!onlyObjectReferences) {\n                validateNonObjects(ast);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4343: moved more variables inside if blocks to reduce execution",
      "commitDate": "11/05/17 2:56 PM",
      "commitName": "073c370de2e65fc346b51ef09763ecb30b5cd14f",
      "commitAuthor": "rnveach",
      "commitDateOld": "30/04/17 11:29 AM",
      "commitNameOld": "185f969cd163bbaaf41356c73bcac3831ac31fc9",
      "commitAuthorOld": "Subbu Dantu",
      "daysBetweenCommits": 11.14,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     public void visitToken(DetailAST ast) {\n         if (!isSkipCase(ast)) {\n-            final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n             final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n             final DetailAST exprStart \u003d\n                 assign.getFirstChild().getFirstChild();\n             final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n             if (isObjectType(type)\n                 \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n+                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 log(ident, MSG_KEY, ident.getText(), \"null\");\n             }\n             if (!onlyObjectReferences) {\n                 validateNonObjects(ast);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isSkipCase(ast)) {\n            final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n            final DetailAST exprStart \u003d\n                assign.getFirstChild().getFirstChild();\n            final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n            if (isObjectType(type)\n                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n                log(ident, MSG_KEY, ident.getText(), \"null\");\n            }\n            if (!onlyObjectReferences) {\n                validateNonObjects(ast);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "185f969cd163bbaaf41356c73bcac3831ac31fc9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2399: New option \u0027onlyObjectReferences\u0027 for ExplicitInitializationCheck\n",
      "commitDate": "30/04/17 11:29 AM",
      "commitName": "185f969cd163bbaaf41356c73bcac3831ac31fc9",
      "commitAuthor": "Subbu Dantu",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 93.17,
      "commitsBetweenForRepo": 350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,16 @@\n     public void visitToken(DetailAST ast) {\n         if (!isSkipCase(ast)) {\n             final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n             final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n             final DetailAST exprStart \u003d\n                 assign.getFirstChild().getFirstChild();\n             final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n             if (isObjectType(type)\n                 \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                 log(ident, MSG_KEY, ident.getText(), \"null\");\n             }\n-\n-            final int primitiveType \u003d type.getFirstChild().getType();\n-            if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n-                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n-                log(ident, MSG_KEY, ident.getText(), \"false\");\n-            }\n-            if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n-                log(ident, MSG_KEY, ident.getText(), \"0\");\n-            }\n-            if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n-                \u0026\u0026 isZeroChar(exprStart)) {\n-                log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n+            if (!onlyObjectReferences) {\n+                validateNonObjects(ast);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isSkipCase(ast)) {\n            final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n            final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n            final DetailAST exprStart \u003d\n                assign.getFirstChild().getFirstChild();\n            final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n            if (isObjectType(type)\n                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                log(ident, MSG_KEY, ident.getText(), \"null\");\n            }\n            if (!onlyObjectReferences) {\n                validateNonObjects(ast);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n     public void visitToken(DetailAST ast) {\n-        if (isSkipCase(ast)) {\n-            return;\n-        }\n+        if (!isSkipCase(ast)) {\n+            final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n+            final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n+            final DetailAST exprStart \u003d\n+                assign.getFirstChild().getFirstChild();\n+            final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+            if (isObjectType(type)\n+                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n+                log(ident, MSG_KEY, ident.getText(), \"null\");\n+            }\n \n-        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n-        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n-        final DetailAST exprStart \u003d\n-            assign.getFirstChild().getFirstChild();\n-        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n-        if (isObjectType(type)\n-            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n-            log(ident, MSG_KEY, ident.getText(), \"null\");\n-        }\n-\n-        final int primitiveType \u003d type.getFirstChild().getType();\n-        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n-            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n-            log(ident, MSG_KEY, ident.getText(), \"false\");\n-        }\n-        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n-            log(ident, MSG_KEY, ident.getText(), \"0\");\n-        }\n-        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n-            \u0026\u0026 isZeroChar(exprStart)) {\n-            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n+            final int primitiveType \u003d type.getFirstChild().getType();\n+            if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n+                log(ident, MSG_KEY, ident.getText(), \"false\");\n+            }\n+            if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n+                log(ident, MSG_KEY, ident.getText(), \"0\");\n+            }\n+            if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n+                \u0026\u0026 isZeroChar(exprStart)) {\n+                log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isSkipCase(ast)) {\n            final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n            final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n            final DetailAST exprStart \u003d\n                assign.getFirstChild().getFirstChild();\n            final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n            if (isObjectType(type)\n                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n                log(ident, MSG_KEY, ident.getText(), \"null\");\n            }\n\n            final int primitiveType \u003d type.getFirstChild().getType();\n            if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n                log(ident, MSG_KEY, ident.getText(), \"false\");\n            }\n            if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n                log(ident, MSG_KEY, ident.getText(), \"0\");\n            }\n            if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n                \u0026\u0026 isZeroChar(exprStart)) {\n                log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "6d9d894a62caf7e7419fcb07e7d972499e4306d7": {
      "type": "Ybodychange",
      "commitMessage": "ExplicitInitializationCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "6d9d894a62caf7e7419fcb07e7d972499e4306d7",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 27.76,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,28 @@\n     public void visitToken(DetailAST ast) {\n-        // do not check local variables and\n-        // fields declared in interface/annotations\n-        if (ScopeUtils.isLocalVariableDef(ast)\n-            || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {\n+        if (isSkipCase(ast)) {\n             return;\n         }\n \n-        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n-        if (assign \u003d\u003d null) {\n-            // no assign - no check\n-            return;\n-        }\n-\n-        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        if (modifiers !\u003d null\n-            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)) {\n-            // do not check final variables\n-            return;\n-        }\n-\n-        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n         final DetailAST exprStart \u003d\n             assign.getFirstChild().getFirstChild();\n+        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         if (isObjectType(type)\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n             log(ident, MSG_KEY, ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n             log(ident, MSG_KEY, ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, MSG_KEY, ident.getText(), \"0\");\n         }\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n-            \u0026\u0026 (isZero(exprStart)\n-                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n-                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))) {\n+            \u0026\u0026 isZeroChar(exprStart)) {\n             log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (isSkipCase(ast)) {\n            return;\n        }\n\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL) {\n            log(ident, MSG_KEY, ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE) {\n            log(ident, MSG_KEY, ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 isZeroChar(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST ast)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n         if (ScopeUtils.isLocalVariableDef(ast)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n         {\n             return;\n         }\n \n         final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        if ((modifiers !\u003d null)\n+        if (modifiers !\u003d null\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n-            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n+            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n         {\n             log(ident, MSG_KEY, ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n-        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n-            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n         {\n             log(ident, MSG_KEY, ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, MSG_KEY, ident.getText(), \"0\");\n         }\n-        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n             \u0026\u0026 (isZero(exprStart)\n-                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n-                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n+                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n+                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n         {\n             log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(ast)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident, MSG_KEY, ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident, MSG_KEY, ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST ast)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n         if (ScopeUtils.isLocalVariableDef(ast)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n         {\n             return;\n         }\n \n         final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n         {\n-            log(ident, \"explicit.init\", ident.getText(), \"null\");\n+            log(ident, MSG_KEY, ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n         {\n-            log(ident, \"explicit.init\", ident.getText(), \"false\");\n+            log(ident, MSG_KEY, ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n-            log(ident, \"explicit.init\", ident.getText(), \"0\");\n+            log(ident, MSG_KEY, ident.getText(), \"0\");\n         }\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n             \u0026\u0026 (isZero(exprStart)\n                 || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n         {\n-            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n+            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(ast)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, MSG_KEY, ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, MSG_KEY, ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, MSG_KEY, ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, MSG_KEY, ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n-        if (ScopeUtils.isLocalVariableDef(aAST)\n-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+        if (ScopeUtils.isLocalVariableDef(ast)\n+            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n         {\n             return;\n         }\n \n-        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n+        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n-        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n-        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n             \u0026\u0026 (isZero(exprStart)\n                 || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(ast)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n-        if (ScopeUtils.isLocalVariableDef(aAST)\n-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+        if (ScopeUtils.isLocalVariableDef(ast)\n+            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n         {\n             return;\n         }\n \n-        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n+        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n-        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n-        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n             \u0026\u0026 (isZero(exprStart)\n                 || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(ast)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d ast.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 248.16,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n         if (ScopeUtils.isLocalVariableDef(aAST)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             return;\n         }\n \n         final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n-            (DetailAST) assign.getFirstChild().getFirstChild();\n+            assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n             \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n             \u0026\u0026 (isZero(exprStart)\n                 || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 543.69,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // do not check local variables and\n         // fields declared in interface/annotations\n         if (ScopeUtils.isLocalVariableDef(aAST)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             return;\n         }\n \n         final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        if (modifiers !\u003d null\n+        if ((modifiers !\u003d null)\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             (DetailAST) assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n-            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n+            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n-        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n-            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n+        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n+            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n-        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n+        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n             \u0026\u0026 (isZero(exprStart)\n-                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n-                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n+                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n+                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if ((modifiers !\u003d null)\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n            \u0026\u0026 (exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if ((primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR)\n            \u0026\u0026 (isZero(exprStart)\n                || ((exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL)\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText()))))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "26/08/04 6:34 AM",
      "commitNameOld": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 32.22,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // do not check local variables and\n-        // fields declared in interface\n+        // fields declared in interface/annotations\n         if (ScopeUtils.isLocalVariableDef(aAST)\n-            || ScopeUtils.inInterfaceBlock(aAST))\n+            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             return;\n         }\n \n         final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers !\u003d null\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST exprStart \u003d\n             (DetailAST) assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n \n         final int primitiveType \u003d type.getFirstChild().getType();\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n             \u0026\u0026 (isZero(exprStart)\n                 || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface/annotations\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/03/04 5:35 AM",
      "commitNameOld": "d0df5e9a9e13d369dc917e276b92cedd200ba466",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 175.0,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // do not check local variables and\n         // fields declared in interface\n         if (ScopeUtils.isLocalVariableDef(aAST)\n             || ScopeUtils.inInterfaceBlock(aAST))\n         {\n             return;\n         }\n-        DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n+\n+        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n-        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers !\u003d null\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n-        DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n-        DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n-        DetailAST exprStart \u003d\n+        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n+        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST exprStart \u003d\n             (DetailAST) assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n-        int primitiveType \u003d type.getFirstChild().getType();\n+\n+        final int primitiveType \u003d type.getFirstChild().getType();\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n             \u0026\u0026 (isZero(exprStart)\n                 || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceBlock(aAST))\n        {\n            return;\n        }\n\n        final DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        final DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n\n        final int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "d0df5e9a9e13d369dc917e276b92cedd200ba466": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 909619. ExplicitInitialization shouldn\u0027t report about explicitly initialized member of interface.\n",
      "commitDate": "04/03/04 5:35 AM",
      "commitName": "d0df5e9a9e13d369dc917e276b92cedd200ba466",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 49.68,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,49 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        // do not check local variables\n-        if (ScopeUtils.isLocalVariableDef(aAST)) {\n+        // do not check local variables and\n+        // fields declared in interface\n+        if (ScopeUtils.isLocalVariableDef(aAST)\n+            || ScopeUtils.inInterfaceBlock(aAST))\n+        {\n             return;\n         }\n         DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers !\u003d null\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         DetailAST exprStart \u003d\n             (DetailAST) assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n         int primitiveType \u003d type.getFirstChild().getType();\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n             log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n             \u0026\u0026 (isZero(exprStart)\n                 || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n         {\n             log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables and\n        // fields declared in interface\n        if (ScopeUtils.isLocalVariableDef(aAST)\n            || ScopeUtils.inInterfaceBlock(aAST))\n        {\n            return;\n        }\n        DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n        int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b": {
      "type": "Ybodychange",
      "commitMessage": "Checnge some check to use new API (I hate wrapping :)\n",
      "commitDate": "07/01/04 7:30 PM",
      "commitName": "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "25/11/03 1:56 AM",
      "commitNameOld": "d4fe5e2ce166589bee70e721892360336157d48c",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 43.73,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,46 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // do not check local variables\n         if (ScopeUtils.isLocalVariableDef(aAST)) {\n             return;\n         }\n         DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n         if (assign \u003d\u003d null) {\n             // no assign - no check\n             return;\n         }\n \n         DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers !\u003d null\n             \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n         {\n             // do not check final variables\n             return;\n         }\n \n         DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         DetailAST exprStart \u003d\n             (DetailAST) assign.getFirstChild().getFirstChild();\n         if (isObjectType(type)\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n         {\n-            log(ident.getLineNo(), ident.getColumnNo(),\n-                \"explicit.init\", ident.getText(), \"null\");\n+            log(ident, \"explicit.init\", ident.getText(), \"null\");\n         }\n         int primitiveType \u003d type.getFirstChild().getType();\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n             \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n         {\n-            log(ident.getLineNo(), ident.getColumnNo(),\n-                \"explicit.init\", ident.getText(), \"false\");\n+            log(ident, \"explicit.init\", ident.getText(), \"false\");\n         }\n         if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n-            log(ident.getLineNo(), ident.getColumnNo(),\n-                \"explicit.init\", ident.getText(), \"0\");\n+            log(ident, \"explicit.init\", ident.getText(), \"0\");\n         }\n         if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n             \u0026\u0026 (isZero(exprStart)\n                 || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                 \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n         {\n-            log(ident.getLineNo(), ident.getColumnNo(),\n-                \"explicit.init\", ident.getText(), \"\\\\0\");\n+            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables\n        if (ScopeUtils.isLocalVariableDef(aAST)) {\n            return;\n        }\n        DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"null\");\n        }\n        int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident, \"explicit.init\", ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java",
      "extendedDetails": {}
    },
    "03c3efabf3b36fd1b8dd4da30678365c7506370c": {
      "type": "Yintroduced",
      "commitMessage": "Check for variable explicit initialization (request 614387)\n",
      "commitDate": "04/10/03 10:01 AM",
      "commitName": "03c3efabf3b36fd1b8dd4da30678365c7506370c",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,50 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // do not check local variables\n+        if (ScopeUtils.isLocalVariableDef(aAST)) {\n+            return;\n+        }\n+        DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n+        if (assign \u003d\u003d null) {\n+            // no assign - no check\n+            return;\n+        }\n+\n+        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        if (modifiers !\u003d null\n+            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+        {\n+            // do not check final variables\n+            return;\n+        }\n+\n+        DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n+        DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        DetailAST exprStart \u003d\n+            (DetailAST) assign.getFirstChild().getFirstChild();\n+        if (isObjectType(type)\n+            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n+        {\n+            log(ident.getLineNo(), ident.getColumnNo(),\n+                \"explicit.init\", ident.getText(), \"null\");\n+        }\n+        int primitiveType \u003d type.getFirstChild().getType();\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n+        {\n+            log(ident.getLineNo(), ident.getColumnNo(),\n+                \"explicit.init\", ident.getText(), \"false\");\n+        }\n+        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n+            log(ident.getLineNo(), ident.getColumnNo(),\n+                \"explicit.init\", ident.getText(), \"0\");\n+        }\n+        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n+            \u0026\u0026 (isZero(exprStart)\n+                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n+                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n+        {\n+            log(ident.getLineNo(), ident.getColumnNo(),\n+                \"explicit.init\", ident.getText(), \"\\\\0\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // do not check local variables\n        if (ScopeUtils.isLocalVariableDef(aAST)) {\n            return;\n        }\n        DetailAST assign \u003d aAST.findFirstToken(TokenTypes.ASSIGN);\n        if (assign \u003d\u003d null) {\n            // no assign - no check\n            return;\n        }\n\n        DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers !\u003d null\n            \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n        {\n            // do not check final variables\n            return;\n        }\n\n        DetailAST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        DetailAST ident \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        DetailAST exprStart \u003d\n            (DetailAST) assign.getFirstChild().getFirstChild();\n        if (isObjectType(type)\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_NULL)\n        {\n            log(ident.getLineNo(), ident.getColumnNo(),\n                \"explicit.init\", ident.getText(), \"null\");\n        }\n        int primitiveType \u003d type.getFirstChild().getType();\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n            \u0026\u0026 exprStart.getType() \u003d\u003d TokenTypes.LITERAL_FALSE)\n        {\n            log(ident.getLineNo(), ident.getColumnNo(),\n                \"explicit.init\", ident.getText(), \"false\");\n        }\n        if (isNumericType(primitiveType) \u0026\u0026 isZero(exprStart)) {\n            log(ident.getLineNo(), ident.getColumnNo(),\n                \"explicit.init\", ident.getText(), \"0\");\n        }\n        if (primitiveType \u003d\u003d TokenTypes.LITERAL_CHAR\n            \u0026\u0026 (isZero(exprStart)\n                || exprStart.getType() \u003d\u003d TokenTypes.CHAR_LITERAL\n                \u0026\u0026 \"\u0027\\\\0\u0027\".equals(exprStart.getText())))\n        {\n            log(ident.getLineNo(), ident.getColumnNo(),\n                \"explicit.init\", ident.getText(), \"\\\\0\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java"
    }
  }
}