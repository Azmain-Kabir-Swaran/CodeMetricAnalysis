{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractItModuleTestSupport.java",
  "functionName": "getLinesWithWarn",
  "functionId": "getLinesWithWarn___fileName-String",
  "sourceFilePath": "src/it/java/org/checkstyle/base/AbstractItModuleTestSupport.java",
  "functionStartLine": 332,
  "functionEndLine": 349,
  "numCommitsSeen": 114,
  "timeTaken": 3097,
  "changeHistory": [
    "c7ffe16d7e090cb5832aac65b874cf869de38d49",
    "ed800f3c8020c83a60ed2d187b4ae7dee3b5ef2a",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332",
    "344ea5c012d1814441b5758013a2b035c6e1613a",
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
    "06863d123f80e8e8d558917f7a6be5a674cb6ecd",
    "902e761e1aabb872b77c3abc83b4afbb2c69e12f",
    "437986510709d7abc64b59c72779343ac5e77599"
  ],
  "changeHistoryShort": {
    "c7ffe16d7e090cb5832aac65b874cf869de38d49": "Yfilerename",
    "ed800f3c8020c83a60ed2d187b4ae7dee3b5ef2a": "Ybodychange",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": "Ybodychange",
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": "Yfilerename",
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "344ea5c012d1814441b5758013a2b035c6e1613a": "Ybodychange",
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65": "Ybodychange",
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": "Ybodychange",
    "06863d123f80e8e8d558917f7a6be5a674cb6ecd": "Ybodychange",
    "902e761e1aabb872b77c3abc83b4afbb2c69e12f": "Ybodychange",
    "437986510709d7abc64b59c72779343ac5e77599": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7ffe16d7e090cb5832aac65b874cf869de38d49": {
      "type": "Yfilerename",
      "commitMessage": "Pull #6801: split it module test support between different\nconfigurations",
      "commitDate": "10/06/19 11:02 AM",
      "commitName": "c7ffe16d7e090cb5832aac65b874cf869de38d49",
      "commitAuthor": "rnveach",
      "commitDateOld": "06/06/19 6:08 PM",
      "commitNameOld": "9b8dea47d8a636905071e962675a644f8c5ba351",
      "commitAuthorOld": "Peter De Maeyer",
      "daysBetweenCommits": 3.7,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(\n                Paths.get(fileName), StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[0]);\n    }",
      "path": "src/it/java/org/checkstyle/base/AbstractItModuleTestSupport.java",
      "extendedDetails": {
        "oldPath": "src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java",
        "newPath": "src/it/java/org/checkstyle/base/AbstractItModuleTestSupport.java"
      }
    },
    "ed800f3c8020c83a60ed2d187b4ae7dee3b5ef2a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6037: fix inspection violations, suppress 2 inspections\n",
      "commitDate": "16/07/18 7:49 PM",
      "commitName": "ed800f3c8020c83a60ed2d187b4ae7dee3b5ef2a",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "11/07/18 8:17 PM",
      "commitNameOld": "4e07bd654bddb2f1063a5aae956a0b81826c34f8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d Files.newBufferedReader(\n                 Paths.get(fileName), StandardCharsets.UTF_8)) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n                 if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n-        return result.toArray(new Integer[result.size()]);\n+        return result.toArray(new Integer[0]);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(\n                Paths.get(fileName), StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[0]);\n    }",
      "path": "src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java",
      "extendedDetails": {}
    },
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5638: File{Input,Output}Stream to Files.new{Input,Output}Stream\n",
      "commitDate": "14/04/18 5:52 AM",
      "commitName": "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "22/01/18 5:54 PM",
      "commitNameOld": "9bcb6bffd03dc4f42f402bd126f22c730007861a",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 81.46,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n-        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n-                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n+        try (BufferedReader br \u003d Files.newBufferedReader(\n+                Paths.get(fileName), StandardCharsets.UTF_8)) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n                 if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d Files.newBufferedReader(\n                Paths.get(fileName), StandardCharsets.UTF_8)) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
      "path": "src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java",
      "extendedDetails": {}
    },
    "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba": {
      "type": "Yfilerename",
      "commitMessage": "Issue #4592: Added AbstractPathTestSupport, AbstractModuleTestSupport, AbstractIndentationTestSupport and all tests in ITs extend them\n",
      "commitDate": "01/08/17 10:56 AM",
      "commitName": "6d290adcd7efb8e9f07d2730e9960c6dc3e713ba",
      "commitAuthor": "Subbu Dantu",
      "commitDateOld": "01/08/17 6:06 AM",
      "commitNameOld": "29e131f949950d26e7880da5891d1754776fdeee",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
      "path": "src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java",
      "extendedDetails": {
        "oldPath": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
        "newPath": "src/it/java/com/google/checkstyle/test/base/AbstractModuleTestSupport.java"
      }
    },
    "7a4ec11d123dc0bbf7db943af715d19814d2e332": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Issue #2589: Unify IT test code.",
      "commitDate": "12/11/15 7:08 PM",
      "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Issue #2589: Unify IT test code.",
          "commitDate": "12/11/15 7:08 PM",
          "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
          "commitAuthor": "rnveach",
          "commitDateOld": "12/11/15 5:42 PM",
          "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n-                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n-                if (warnPattern.matcher(line).find()) {\n+                if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
          "path": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
          "extendedDetails": {
            "oldPath": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
            "newPath": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
            "oldMethodName": "getLinesWithWarn",
            "newMethodName": "getLinesWithWarn"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #2589: Unify IT test code.",
          "commitDate": "12/11/15 7:08 PM",
          "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
          "commitAuthor": "rnveach",
          "commitDateOld": "12/11/15 5:42 PM",
          "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n-                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n-                if (warnPattern.matcher(line).find()) {\n+                if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
          "path": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2589: Unify IT test code.",
          "commitDate": "12/11/15 7:08 PM",
          "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
          "commitAuthor": "rnveach",
          "commitDateOld": "12/11/15 5:42 PM",
          "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n-                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n-                if (warnPattern.matcher(line).find()) {\n+                if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
          "path": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2589: Unify IT test code.",
          "commitDate": "12/11/15 7:08 PM",
          "commitName": "7a4ec11d123dc0bbf7db943af715d19814d2e332",
          "commitAuthor": "rnveach",
          "commitDateOld": "12/11/15 5:42 PM",
          "commitNameOld": "41044d42b8f21ae00792f101a63101bf87d7fd61",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n         final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n-                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             while (true) {\n                 final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n-                if (warnPattern.matcher(line).find()) {\n+                if (WARN_PATTERN.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected Integer[] getLinesWithWarn(String fileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(fileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (WARN_PATTERN.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
          "path": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java",
          "extendedDetails": {
            "oldValue": "[aFileName-String]",
            "newValue": "[fileName-String]"
          }
        }
      ]
    },
    "344ea5c012d1814441b5758013a2b035c6e1613a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2421: enabling checking on it folder",
      "commitDate": "25/10/15 11:30 AM",
      "commitName": "344ea5c012d1814441b5758013a2b035c6e1613a",
      "commitAuthor": "rnveach",
      "commitDateOld": "25/10/15 11:20 AM",
      "commitNameOld": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n-        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n+        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n         try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                 new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n             int lineNumber \u003d 1;\n             while (true) {\n-                String line \u003d br.readLine();\n+                final String line \u003d br.readLine();\n                 if (line \u003d\u003d null) {\n                     break;\n                 }\n                 if (warnPattern.matcher(line).find()) {\n                     result.add(lineNumber);\n                 }\n                 lineNumber++;\n             }\n         }\n         return result.toArray(new Integer[result.size()]);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Integer[] getLinesWithWarn(String aFileName) throws IOException {\n        final List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n                new FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n            int lineNumber \u003d 1;\n            while (true) {\n                final String line \u003d br.readLine();\n                if (line \u003d\u003d null) {\n                    break;\n                }\n                if (warnPattern.matcher(line).find()) {\n                    result.add(lineNumber);\n                }\n                lineNumber++;\n            }\n        }\n        return result.toArray(new Integer[result.size()]);\n    }",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
      "extendedDetails": {}
    },
    "9cc86b38df9a086713d1fcdf01b451b41c0d6f65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Specify encoding explicitly\n\nFixes `ImplicitDefaultCharsetUsage` inspection violations.\n\nDescription:\n\u003eReports method and constructor calls which implicitly use the platform\u0027s default charset. These can produce different results on (e.g. foreign language) systems that use a different default charset, resulting in unexpected behaviour.\n",
      "commitDate": "28/08/15 10:48 PM",
      "commitName": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:47 AM",
      "commitNameOld": "15d0f87f156190d739a1ef4903c82c4442923b8a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n \tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n \t\tList\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n-\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n+\t    try(BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n+\t\t\t\tnew FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n \t\t\tint lineNumber \u003d 1;\n \t\t\twhile (true) {\n \t            String line \u003d br.readLine();\n \t            if (line \u003d\u003d null) {\n \t                break;\n \t            }\n \t            if (warnPattern.matcher(line).find()) {\n \t            \tresult.add(lineNumber);\n \t            }\n \t            lineNumber++;\n \t        }\n \t    }\n \t    return result.toArray(new Integer[result.size()]);\n \t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n\t\tList\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n\t    try(BufferedReader br \u003d new BufferedReader(new InputStreamReader(\n\t\t\t\tnew FileInputStream(aFileName), StandardCharsets.UTF_8))) {\n\t\t\tint lineNumber \u003d 1;\n\t\t\twhile (true) {\n\t            String line \u003d br.readLine();\n\t            if (line \u003d\u003d null) {\n\t                break;\n\t            }\n\t            if (warnPattern.matcher(line).find()) {\n\t            \tresult.add(lineNumber);\n\t            }\n\t            lineNumber++;\n\t        }\n\t    }\n\t    return result.toArray(new Integer[result.size()]);\n\t}",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
      "extendedDetails": {}
    },
    "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba": {
      "type": "Ybodychange",
      "commitMessage": "Fix too broad scope of variables. #1555\n\nAdditionally, obsolete assertions were removed.\n\nFixes `TooBroadScope` inspection violations.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": "19/08/15 10:10 PM",
      "commitName": "4a56989f8ea633b6dfacd1f1ef0a12f5ef6358ba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "19/08/15 8:40 PM",
      "commitNameOld": "697895a2056ecb1fdde0ba1f21a10cb96fc91322",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n \tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n-\t\tint lineNumber \u003d 1;\n-\t    List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n+\t\tList\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n \t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n-\t        while (true) {\n+\t\t\tint lineNumber \u003d 1;\n+\t\t\twhile (true) {\n \t            String line \u003d br.readLine();\n \t            if (line \u003d\u003d null) {\n \t                break;\n \t            }\n \t            if (warnPattern.matcher(line).find()) {\n \t            \tresult.add(lineNumber);\n \t            }\n \t            lineNumber++;\n \t        }\n \t    }\n \t    return result.toArray(new Integer[result.size()]);\n \t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n\t\tList\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n\t\t\tint lineNumber \u003d 1;\n\t\t\twhile (true) {\n\t            String line \u003d br.readLine();\n\t            if (line \u003d\u003d null) {\n\t                break;\n\t            }\n\t            if (warnPattern.matcher(line).find()) {\n\t            \tresult.add(lineNumber);\n\t            }\n\t            lineNumber++;\n\t        }\n\t    }\n\t    return result.toArray(new Integer[result.size()]);\n\t}",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
      "extendedDetails": {}
    },
    "06863d123f80e8e8d558917f7a6be5a674cb6ecd": {
      "type": "Ybodychange",
      "commitMessage": "Remove nested assignment. #1555\n\nFixes `NestedAssignment` inspection violation in test code.\n\nDescription:\n\u003eReports assignment expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.\n",
      "commitDate": "17/08/15 10:47 PM",
      "commitName": "06863d123f80e8e8d558917f7a6be5a674cb6ecd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "16/08/15 8:53 PM",
      "commitNameOld": "902e761e1aabb872b77c3abc83b4afbb2c69e12f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,17 @@\n \tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n \t\tint lineNumber \u003d 1;\n \t    List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n \t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n-\t        for(String line; (line \u003d br.readLine()) !\u003d null; ) {\n+\t        while (true) {\n+\t            String line \u003d br.readLine();\n+\t            if (line \u003d\u003d null) {\n+\t                break;\n+\t            }\n \t            if (warnPattern.matcher(line).find()) {\n \t            \tresult.add(lineNumber);\n \t            }\n \t            lineNumber++;\n \t        }\n \t    }\n \t    return result.toArray(new Integer[result.size()]);\n \t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n\t\tint lineNumber \u003d 1;\n\t    List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n\t        while (true) {\n\t            String line \u003d br.readLine();\n\t            if (line \u003d\u003d null) {\n\t                break;\n\t            }\n\t            if (warnPattern.matcher(line).find()) {\n\t            \tresult.add(lineNumber);\n\t            }\n\t            lineNumber++;\n\t        }\n\t    }\n\t    return result.toArray(new Integer[result.size()]);\n\t}",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
      "extendedDetails": {}
    },
    "902e761e1aabb872b77c3abc83b4afbb2c69e12f": {
      "type": "Ybodychange",
      "commitMessage": "Use diamond operator in test code. #1555\n\nFixes `Convert2Diamond` inspection violations.\n\nDescription:\n\u003eThis inspection reports all new expressions with type arguments which can be replaced with diamond type \u003c\u003e\nSuch \u003c\u003e syntax is not supported under Java 1.6 or earlier JVMs.\n",
      "commitDate": "16/08/15 8:53 PM",
      "commitName": "902e761e1aabb872b77c3abc83b4afbb2c69e12f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/08/15 9:02 PM",
      "commitNameOld": "1ab08ad4abff024bdd3fbeb6f08a1a4a61c49b65",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n \tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n \t\tint lineNumber \u003d 1;\n-\t    List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n+\t    List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n \t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n \t        for(String line; (line \u003d br.readLine()) !\u003d null; ) {\n \t            if (warnPattern.matcher(line).find()) {\n \t            \tresult.add(lineNumber);\n \t            }\n \t            lineNumber++;\n \t        }\n \t    }\n \t    return result.toArray(new Integer[result.size()]);\n \t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n\t\tint lineNumber \u003d 1;\n\t    List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();\n\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n\t        for(String line; (line \u003d br.readLine()) !\u003d null; ) {\n\t            if (warnPattern.matcher(line).find()) {\n\t            \tresult.add(lineNumber);\n\t            }\n\t            lineNumber++;\n\t        }\n\t    }\n\t    return result.toArray(new Integer[result.size()]);\n\t}",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java",
      "extendedDetails": {}
    },
    "437986510709d7abc64b59c72779343ac5e77599": {
      "type": "Yintroduced",
      "commitMessage": "Integrate google-style-config-test as Integration Test. #863\n",
      "commitDate": "07/06/15 7:37 PM",
      "commitName": "437986510709d7abc64b59c72779343ac5e77599",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,13 @@\n+\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n+\t\tint lineNumber \u003d 1;\n+\t    List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n+\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n+\t        for(String line; (line \u003d br.readLine()) !\u003d null; ) {\n+\t            if (warnPattern.matcher(line).find()) {\n+\t            \tresult.add(lineNumber);\n+\t            }\n+\t            lineNumber++;\n+\t        }\n+\t    }\n+\t    return result.toArray(new Integer[result.size()]);\n+\t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic Integer[] getLinesWithWarn(String aFileName) throws IOException {\n\t\tint lineNumber \u003d 1;\n\t    List\u003cInteger\u003e result \u003d new ArrayList\u003cInteger\u003e();\n\t    try(BufferedReader br \u003d new BufferedReader(new FileReader(aFileName))) {\n\t        for(String line; (line \u003d br.readLine()) !\u003d null; ) {\n\t            if (warnPattern.matcher(line).find()) {\n\t            \tresult.add(lineNumber);\n\t            }\n\t            lineNumber++;\n\t        }\n\t    }\n\t    return result.toArray(new Integer[result.size()]);\n\t}",
      "path": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java"
    }
  }
}