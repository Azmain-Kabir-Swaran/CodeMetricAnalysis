{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeclarationOrderCheck.java",
  "functionName": "processModifiersSubState",
  "functionId": "processModifiersSubState___modifiersAst-DetailAST__state-ScopeState__isStateValid-boolean",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
  "functionStartLine": 316,
  "functionEndLine": 329,
  "numCommitsSeen": 58,
  "timeTaken": 817,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "420a4908dad850554e3a093cde5ebc92878cbba7"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "420a4908dad850554e3a093cde5ebc92878cbba7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private void processModifiersSubState(DetailAST modifiersAst, ScopeState state,\n                                           boolean isStateValid) {\n-        final Scope access \u003d ScopeUtils.getScopeFromMods(modifiersAst);\n+        final Scope access \u003d ScopeUtil.getScopeFromMods(modifiersAst);\n         if (state.declarationAccess.compareTo(access) \u003e 0) {\n             if (isStateValid\n                     \u0026\u0026 !ignoreModifiers\n                     \u0026\u0026 !isForwardReference(modifiersAst.getParent())) {\n                 log(modifiersAst, MSG_ACCESS);\n             }\n         }\n         else {\n             state.declarationAccess \u003d access;\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiersSubState(DetailAST modifiersAst, ScopeState state,\n                                          boolean isStateValid) {\n        final Scope access \u003d ScopeUtil.getScopeFromMods(modifiersAst);\n        if (state.declarationAccess.compareTo(access) \u003e 0) {\n            if (isStateValid\n                    \u0026\u0026 !ignoreModifiers\n                    \u0026\u0026 !isForwardReference(modifiersAst.getParent())) {\n                log(modifiersAst, MSG_ACCESS);\n            }\n        }\n        else {\n            state.declarationAccess \u003d access;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
      "extendedDetails": {}
    },
    "420a4908dad850554e3a093cde5ebc92878cbba7": {
      "type": "Yintroduced",
      "commitMessage": "Issue #1048: Duplicate error message for static final field in DeclarationOrderCheck\n",
      "commitDate": "17/02/16 6:18 AM",
      "commitName": "420a4908dad850554e3a093cde5ebc92878cbba7",
      "commitAuthor": "liscju",
      "diff": "@@ -0,0 +1,14 @@\n+    private void processModifiersSubState(DetailAST modifiersAst, ScopeState state,\n+                                          boolean isStateValid) {\n+        final Scope access \u003d ScopeUtils.getScopeFromMods(modifiersAst);\n+        if (state.declarationAccess.compareTo(access) \u003e 0) {\n+            if (isStateValid\n+                    \u0026\u0026 !ignoreModifiers\n+                    \u0026\u0026 !isForwardReference(modifiersAst.getParent())) {\n+                log(modifiersAst, MSG_ACCESS);\n+            }\n+        }\n+        else {\n+            state.declarationAccess \u003d access;\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiersSubState(DetailAST modifiersAst, ScopeState state,\n                                          boolean isStateValid) {\n        final Scope access \u003d ScopeUtils.getScopeFromMods(modifiersAst);\n        if (state.declarationAccess.compareTo(access) \u003e 0) {\n            if (isStateValid\n                    \u0026\u0026 !ignoreModifiers\n                    \u0026\u0026 !isForwardReference(modifiersAst.getParent())) {\n                log(modifiersAst, MSG_ACCESS);\n            }\n        }\n        else {\n            state.declarationAccess \u003d access;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java"
    }
  }
}