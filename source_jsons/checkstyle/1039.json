{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NPathComplexityCheck.java",
  "functionName": "visitConditional",
  "functionId": "visitConditional___ast-DetailAST__basicBranchingFactor-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java",
  "functionStartLine": 404,
  "functionEndLine": 414,
  "numCommitsSeen": 36,
  "timeTaken": 698,
  "changeHistory": [
    "e810918205ff8e99a5cd692d6a99b899f5337eef"
  ],
  "changeHistoryShort": {
    "e810918205ff8e99a5cd692d6a99b899f5337eef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e810918205ff8e99a5cd692d6a99b899f5337eef": {
      "type": "Yintroduced",
      "commitMessage": "Issue #56: fix NPathComplexityCheck\n",
      "commitDate": "28/04/17 9:38 AM",
      "commitName": "e810918205ff8e99a5cd692d6a99b899f5337eef",
      "commitAuthor": "kazachka",
      "diff": "@@ -0,0 +1,11 @@\n+    private void visitConditional(DetailAST ast, int basicBranchingFactor) {\n+        int expressionValue \u003d basicBranchingFactor;\n+        DetailAST bracketed;\n+        for (bracketed \u003d ast.findFirstToken(TokenTypes.LPAREN).getNextSibling();\n+                bracketed.getType() !\u003d TokenTypes.RPAREN;\n+                bracketed \u003d bracketed.getNextSibling()) {\n+            expressionValue +\u003d countConditionalOperators(bracketed);\n+        }\n+        processingTokenEnd.setToken(bracketed);\n+        pushValue(expressionValue);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitConditional(DetailAST ast, int basicBranchingFactor) {\n        int expressionValue \u003d basicBranchingFactor;\n        DetailAST bracketed;\n        for (bracketed \u003d ast.findFirstToken(TokenTypes.LPAREN).getNextSibling();\n                bracketed.getType() !\u003d TokenTypes.RPAREN;\n                bracketed \u003d bracketed.getNextSibling()) {\n            expressionValue +\u003d countConditionalOperators(bracketed);\n        }\n        processingTokenEnd.setToken(bracketed);\n        pushValue(expressionValue);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java"
    }
  }
}