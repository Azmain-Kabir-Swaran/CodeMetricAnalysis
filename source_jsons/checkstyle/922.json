{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MainFrameModel.java",
  "functionName": "openFile",
  "functionId": "openFile___file-File",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
  "functionStartLine": 199,
  "functionEndLine": 243,
  "numCommitsSeen": 21,
  "timeTaken": 1595,
  "changeHistory": [
    "0461a0f839c8cd2306354912b4956267c1d0ec20",
    "58327e1dd9707b09f82ae2d4d4ce14c253247154",
    "46fa8090954480eecdeb6e7367f0e30655853f42",
    "b9ff36243f195adf223acc8f272a59e9448a65af",
    "d3a87162452d3f790c1848418ed4388bd27a4aa1",
    "e02ffc5681a2919e3028bc2efac572698665f845",
    "1db8309b8611c601afce11fc33a6cb900204a582"
  ],
  "changeHistoryShort": {
    "0461a0f839c8cd2306354912b4956267c1d0ec20": "Ybodychange",
    "58327e1dd9707b09f82ae2d4d4ce14c253247154": "Ybodychange",
    "46fa8090954480eecdeb6e7367f0e30655853f42": "Ybodychange",
    "b9ff36243f195adf223acc8f272a59e9448a65af": "Ybodychange",
    "d3a87162452d3f790c1848418ed4388bd27a4aa1": "Ybodychange",
    "e02ffc5681a2919e3028bc2efac572698665f845": "Ybodychange",
    "1db8309b8611c601afce11fc33a6cb900204a582": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0461a0f839c8cd2306354912b4956267c1d0ec20": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3484: removed instances of guava immutables",
      "commitDate": "07/05/18 6:47 PM",
      "commitName": "0461a0f839c8cd2306354912b4956267c1d0ec20",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void openFile(File file) throws CheckstyleException {\n         if (file !\u003d null) {\n             try {\n                 currentFile \u003d file;\n                 title \u003d \"Checkstyle GUI : \" + file.getName();\n                 reloadActionEnabled \u003d true;\n                 final DetailAST parseTree;\n \n                 switch (parseMode) {\n                     case PLAIN_JAVA:\n                         parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n                         break;\n                     case JAVA_WITH_COMMENTS:\n                     case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                         parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n                         break;\n                     default:\n                         throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                 }\n \n                 parseTreeTableModel.setParseTree(parseTree);\n                 parseTreeTableModel.setParseMode(parseMode);\n                 final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n                 final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                 // starts line counting at 1\n                 linesToPositionTemp.add(0);\n \n                 final StringBuilder sb \u003d new StringBuilder(1024);\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());\n                     sb.append(element).append(System.lineSeparator());\n                 }\n-                linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n+                linesToPosition \u003d linesToPositionTemp;\n                 text \u003d sb.toString();\n             }\n             catch (IOException ex) {\n                 final String exceptionMsg \u003d String.format(Locale.ROOT,\n                     \"%s occurred while opening file %s.\",\n                     ex.getClass().getSimpleName(), file.getPath());\n                 throw new CheckstyleException(exceptionMsg, ex);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree;\n\n                switch (parseMode) {\n                    case PLAIN_JAVA:\n                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n                        break;\n                    case JAVA_WITH_COMMENTS:\n                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                }\n\n                parseTreeTableModel.setParseTree(parseTree);\n                parseTreeTableModel.setParseMode(parseMode);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                // starts line counting at 1\n                linesToPositionTemp.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder(1024);\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPositionTemp.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                linesToPosition \u003d linesToPositionTemp;\n                text \u003d sb.toString();\n            }\n            catch (IOException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "58327e1dd9707b09f82ae2d4d4ce14c253247154": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5436: Split TreeWalker to TreeWalker and JavaParser\n",
      "commitDate": "23/01/18 10:39 PM",
      "commitName": "58327e1dd9707b09f82ae2d4d4ce14c253247154",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "0847a10b9430d9fb0a3f44df03e891da906bea47",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 19.64,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void openFile(File file) throws CheckstyleException {\n         if (file !\u003d null) {\n             try {\n                 currentFile \u003d file;\n                 title \u003d \"Checkstyle GUI : \" + file.getName();\n                 reloadActionEnabled \u003d true;\n                 final DetailAST parseTree;\n \n                 switch (parseMode) {\n                     case PLAIN_JAVA:\n-                        parseTree \u003d parseFile(file);\n+                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n                         break;\n                     case JAVA_WITH_COMMENTS:\n                     case JAVA_WITH_JAVADOC_AND_COMMENTS:\n-                        parseTree \u003d parseFileWithComments(file);\n+                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n                         break;\n                     default:\n                         throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                 }\n \n                 parseTreeTableModel.setParseTree(parseTree);\n                 parseTreeTableModel.setParseMode(parseMode);\n                 final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n                 final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                 // starts line counting at 1\n                 linesToPositionTemp.add(0);\n \n                 final StringBuilder sb \u003d new StringBuilder(1024);\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());\n                     sb.append(element).append(System.lineSeparator());\n                 }\n                 linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                 text \u003d sb.toString();\n             }\n-            catch (IOException | ANTLRException ex) {\n+            catch (IOException ex) {\n                 final String exceptionMsg \u003d String.format(Locale.ROOT,\n                     \"%s occurred while opening file %s.\",\n                     ex.getClass().getSimpleName(), file.getPath());\n                 throw new CheckstyleException(exceptionMsg, ex);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree;\n\n                switch (parseMode) {\n                    case PLAIN_JAVA:\n                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITHOUT_COMMENTS);\n                        break;\n                    case JAVA_WITH_COMMENTS:\n                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                        parseTree \u003d JavaParser.parseFile(file, JavaParser.Options.WITH_COMMENTS);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                }\n\n                parseTreeTableModel.setParseTree(parseTree);\n                parseTreeTableModel.setParseMode(parseMode);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                // starts line counting at 1\n                linesToPositionTemp.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder(1024);\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPositionTemp.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                text \u003d sb.toString();\n            }\n            catch (IOException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "46fa8090954480eecdeb6e7367f0e30655853f42": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4812: add report on StringBufferMustHaveInitialCapacity\n",
      "commitDate": "27/07/17 1:18 PM",
      "commitName": "46fa8090954480eecdeb6e7367f0e30655853f42",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "06/07/17 6:49 AM",
      "commitNameOld": "b9ff36243f195adf223acc8f272a59e9448a65af",
      "commitAuthorOld": "Dmytro Kytsmen",
      "daysBetweenCommits": 21.27,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void openFile(File file) throws CheckstyleException {\n         if (file !\u003d null) {\n             try {\n                 currentFile \u003d file;\n                 title \u003d \"Checkstyle GUI : \" + file.getName();\n                 reloadActionEnabled \u003d true;\n                 final DetailAST parseTree;\n \n                 switch (parseMode) {\n                     case PLAIN_JAVA:\n                         parseTree \u003d parseFile(file);\n                         break;\n                     case JAVA_WITH_COMMENTS:\n                     case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                         parseTree \u003d parseFileWithComments(file);\n                         break;\n                     default:\n                         throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                 }\n \n                 parseTreeTableModel.setParseTree(parseTree);\n                 parseTreeTableModel.setParseMode(parseMode);\n                 final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n                 final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                 // starts line counting at 1\n                 linesToPositionTemp.add(0);\n \n-                final StringBuilder sb \u003d new StringBuilder();\n+                final StringBuilder sb \u003d new StringBuilder(1024);\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n                     linesToPositionTemp.add(sb.length());\n                     sb.append(element).append(System.lineSeparator());\n                 }\n                 linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                 text \u003d sb.toString();\n             }\n             catch (IOException | ANTLRException ex) {\n                 final String exceptionMsg \u003d String.format(Locale.ROOT,\n                     \"%s occurred while opening file %s.\",\n                     ex.getClass().getSimpleName(), file.getPath());\n                 throw new CheckstyleException(exceptionMsg, ex);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree;\n\n                switch (parseMode) {\n                    case PLAIN_JAVA:\n                        parseTree \u003d parseFile(file);\n                        break;\n                    case JAVA_WITH_COMMENTS:\n                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                        parseTree \u003d parseFileWithComments(file);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                }\n\n                parseTreeTableModel.setParseTree(parseTree);\n                parseTreeTableModel.setParseMode(parseMode);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                // starts line counting at 1\n                linesToPositionTemp.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder(1024);\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPositionTemp.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                text \u003d sb.toString();\n            }\n            catch (IOException | ANTLRException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "b9ff36243f195adf223acc8f272a59e9448a65af": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3555: refactoring CodeSelectorPModel do double copy of collection in c-tor\n",
      "commitDate": "06/07/17 6:49 AM",
      "commitName": "b9ff36243f195adf223acc8f272a59e9448a65af",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "12/06/17 10:11 AM",
      "commitNameOld": "4a087c020c2b97130e94f9292b94cb4bc1f6ed93",
      "commitAuthorOld": "sagar-shah94",
      "daysBetweenCommits": 23.86,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     public void openFile(File file) throws CheckstyleException {\n         if (file !\u003d null) {\n             try {\n                 currentFile \u003d file;\n                 title \u003d \"Checkstyle GUI : \" + file.getName();\n                 reloadActionEnabled \u003d true;\n                 final DetailAST parseTree;\n \n                 switch (parseMode) {\n                     case PLAIN_JAVA:\n                         parseTree \u003d parseFile(file);\n                         break;\n                     case JAVA_WITH_COMMENTS:\n                     case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                         parseTree \u003d parseFileWithComments(file);\n                         break;\n                     default:\n                         throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                 }\n \n                 parseTreeTableModel.setParseTree(parseTree);\n                 parseTreeTableModel.setParseMode(parseMode);\n                 final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n-                // clear for each new file\n-                linesToPosition.clear();\n+                final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                 // starts line counting at 1\n-                linesToPosition.add(0);\n+                linesToPositionTemp.add(0);\n \n                 final StringBuilder sb \u003d new StringBuilder();\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n-                    linesToPosition.add(sb.length());\n+                    linesToPositionTemp.add(sb.length());\n                     sb.append(element).append(System.lineSeparator());\n                 }\n+                linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                 text \u003d sb.toString();\n             }\n             catch (IOException | ANTLRException ex) {\n                 final String exceptionMsg \u003d String.format(Locale.ROOT,\n                     \"%s occurred while opening file %s.\",\n                     ex.getClass().getSimpleName(), file.getPath());\n                 throw new CheckstyleException(exceptionMsg, ex);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree;\n\n                switch (parseMode) {\n                    case PLAIN_JAVA:\n                        parseTree \u003d parseFile(file);\n                        break;\n                    case JAVA_WITH_COMMENTS:\n                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                        parseTree \u003d parseFileWithComments(file);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                }\n\n                parseTreeTableModel.setParseTree(parseTree);\n                parseTreeTableModel.setParseMode(parseMode);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                final List\u003cInteger\u003e linesToPositionTemp \u003d new ArrayList\u003c\u003e();\n                // starts line counting at 1\n                linesToPositionTemp.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder();\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPositionTemp.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                linesToPosition \u003d ImmutableList.copyOf(linesToPositionTemp);\n                text \u003d sb.toString();\n            }\n            catch (IOException | ANTLRException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "d3a87162452d3f790c1848418ed4388bd27a4aa1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #408: Update Checkstyle GUI in order to display Javadoc tokens (#3430)\n\n",
      "commitDate": "11/09/16 3:13 PM",
      "commitName": "d3a87162452d3f790c1848418ed4388bd27a4aa1",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "09/02/16 4:48 AM",
      "commitNameOld": "e02ffc5681a2919e3028bc2efac572698665f845",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 215.39,
      "commitsBetweenForRepo": 459,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,45 @@\n     public void openFile(File file) throws CheckstyleException {\n         if (file !\u003d null) {\n             try {\n                 currentFile \u003d file;\n                 title \u003d \"Checkstyle GUI : \" + file.getName();\n                 reloadActionEnabled \u003d true;\n-                final DetailAST parseTree \u003d parseFile(file);\n+                final DetailAST parseTree;\n+\n+                switch (parseMode) {\n+                    case PLAIN_JAVA:\n+                        parseTree \u003d parseFile(file);\n+                        break;\n+                    case JAVA_WITH_COMMENTS:\n+                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n+                        parseTree \u003d parseFileWithComments(file);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n+                }\n+\n                 parseTreeTableModel.setParseTree(parseTree);\n+                parseTreeTableModel.setParseMode(parseMode);\n                 final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n                 // clear for each new file\n                 linesToPosition.clear();\n                 // starts line counting at 1\n                 linesToPosition.add(0);\n \n                 final StringBuilder sb \u003d new StringBuilder();\n                 // insert the contents of the file to the text area\n                 for (final String element : sourceLines) {\n                     linesToPosition.add(sb.length());\n                     sb.append(element).append(System.lineSeparator());\n                 }\n                 text \u003d sb.toString();\n             }\n             catch (IOException | ANTLRException ex) {\n                 final String exceptionMsg \u003d String.format(Locale.ROOT,\n                     \"%s occurred while opening file %s.\",\n                     ex.getClass().getSimpleName(), file.getPath());\n                 throw new CheckstyleException(exceptionMsg, ex);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree;\n\n                switch (parseMode) {\n                    case PLAIN_JAVA:\n                        parseTree \u003d parseFile(file);\n                        break;\n                    case JAVA_WITH_COMMENTS:\n                    case JAVA_WITH_JAVADOC_AND_COMMENTS:\n                        parseTree \u003d parseFileWithComments(file);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Unknown mode: \" + parseMode);\n                }\n\n                parseTreeTableModel.setParseTree(parseTree);\n                parseTreeTableModel.setParseMode(parseMode);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                // clear for each new file\n                linesToPosition.clear();\n                // starts line counting at 1\n                linesToPosition.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder();\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPosition.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                text \u003d sb.toString();\n            }\n            catch (IOException | ANTLRException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "e02ffc5681a2919e3028bc2efac572698665f845": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2609: Refactor MainFrame\n",
      "commitDate": "09/02/16 4:48 AM",
      "commitName": "e02ffc5681a2919e3028bc2efac572698665f845",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "07/02/16 2:21 PM",
      "commitNameOld": "1db8309b8611c601afce11fc33a6cb900204a582",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 1.6,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n     public void openFile(File file) throws CheckstyleException {\n-        try {\n-            currentFile \u003d file;\n-            final DetailAST parseTree \u003d parseFile(file);\n-            parseTreeTableModel.setParseTree(parseTree);\n-            final String[] sourceLines \u003d getFileText(file).toLinesArray();\n+        if (file !\u003d null) {\n+            try {\n+                currentFile \u003d file;\n+                title \u003d \"Checkstyle GUI : \" + file.getName();\n+                reloadActionEnabled \u003d true;\n+                final DetailAST parseTree \u003d parseFile(file);\n+                parseTreeTableModel.setParseTree(parseTree);\n+                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n \n-            // clear for each new file\n-            linesToPosition.clear();\n-            // starts line counting at 1\n-            linesToPosition.add(0);\n+                // clear for each new file\n+                linesToPosition.clear();\n+                // starts line counting at 1\n+                linesToPosition.add(0);\n \n-            final StringBuilder sb \u003d new StringBuilder();\n-            // insert the contents of the file to the text area\n-            for (final String element : sourceLines) {\n-                linesToPosition.add(sb.length());\n-                sb.append(element).append(System.lineSeparator());\n+                final StringBuilder sb \u003d new StringBuilder();\n+                // insert the contents of the file to the text area\n+                for (final String element : sourceLines) {\n+                    linesToPosition.add(sb.length());\n+                    sb.append(element).append(System.lineSeparator());\n+                }\n+                text \u003d sb.toString();\n             }\n-            text \u003d sb.toString();\n-        }\n-        catch (IOException | ANTLRException ex) {\n-            final String exceptionMsg \u003d String.format(Locale.ROOT,\n-                \"%s occurred while opening file %s.\",\n-                ex.getClass().getSimpleName(), file.getPath());\n-            throw new CheckstyleException(exceptionMsg, ex);\n+            catch (IOException | ANTLRException ex) {\n+                final String exceptionMsg \u003d String.format(Locale.ROOT,\n+                    \"%s occurred while opening file %s.\",\n+                    ex.getClass().getSimpleName(), file.getPath());\n+                throw new CheckstyleException(exceptionMsg, ex);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        if (file !\u003d null) {\n            try {\n                currentFile \u003d file;\n                title \u003d \"Checkstyle GUI : \" + file.getName();\n                reloadActionEnabled \u003d true;\n                final DetailAST parseTree \u003d parseFile(file);\n                parseTreeTableModel.setParseTree(parseTree);\n                final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n                // clear for each new file\n                linesToPosition.clear();\n                // starts line counting at 1\n                linesToPosition.add(0);\n\n                final StringBuilder sb \u003d new StringBuilder();\n                // insert the contents of the file to the text area\n                for (final String element : sourceLines) {\n                    linesToPosition.add(sb.length());\n                    sb.append(element).append(System.lineSeparator());\n                }\n                text \u003d sb.toString();\n            }\n            catch (IOException | ANTLRException ex) {\n                final String exceptionMsg \u003d String.format(Locale.ROOT,\n                    \"%s occurred while opening file %s.\",\n                    ex.getClass().getSimpleName(), file.getPath());\n                throw new CheckstyleException(exceptionMsg, ex);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java",
      "extendedDetails": {}
    },
    "1db8309b8611c601afce11fc33a6cb900204a582": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2609: Refactor MainFrame\n",
      "commitDate": "07/02/16 2:21 PM",
      "commitName": "1db8309b8611c601afce11fc33a6cb900204a582",
      "commitAuthor": "Vladislav Lisetskiy",
      "diff": "@@ -0,0 +1,27 @@\n+    public void openFile(File file) throws CheckstyleException {\n+        try {\n+            currentFile \u003d file;\n+            final DetailAST parseTree \u003d parseFile(file);\n+            parseTreeTableModel.setParseTree(parseTree);\n+            final String[] sourceLines \u003d getFileText(file).toLinesArray();\n+\n+            // clear for each new file\n+            linesToPosition.clear();\n+            // starts line counting at 1\n+            linesToPosition.add(0);\n+\n+            final StringBuilder sb \u003d new StringBuilder();\n+            // insert the contents of the file to the text area\n+            for (final String element : sourceLines) {\n+                linesToPosition.add(sb.length());\n+                sb.append(element).append(System.lineSeparator());\n+            }\n+            text \u003d sb.toString();\n+        }\n+        catch (IOException | ANTLRException ex) {\n+            final String exceptionMsg \u003d String.format(Locale.ROOT,\n+                \"%s occurred while opening file %s.\",\n+                ex.getClass().getSimpleName(), file.getPath());\n+            throw new CheckstyleException(exceptionMsg, ex);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void openFile(File file) throws CheckstyleException {\n        try {\n            currentFile \u003d file;\n            final DetailAST parseTree \u003d parseFile(file);\n            parseTreeTableModel.setParseTree(parseTree);\n            final String[] sourceLines \u003d getFileText(file).toLinesArray();\n\n            // clear for each new file\n            linesToPosition.clear();\n            // starts line counting at 1\n            linesToPosition.add(0);\n\n            final StringBuilder sb \u003d new StringBuilder();\n            // insert the contents of the file to the text area\n            for (final String element : sourceLines) {\n                linesToPosition.add(sb.length());\n                sb.append(element).append(System.lineSeparator());\n            }\n            text \u003d sb.toString();\n        }\n        catch (IOException | ANTLRException ex) {\n            final String exceptionMsg \u003d String.format(Locale.ROOT,\n                \"%s occurred while opening file %s.\",\n                ex.getClass().getSimpleName(), file.getPath());\n            throw new CheckstyleException(exceptionMsg, ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModel.java"
    }
  }
}