{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractJavadocCheck.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
  "functionStartLine": 181,
  "functionEndLine": 199,
  "numCommitsSeen": 87,
  "timeTaken": 1265,
  "changeHistory": [
    "2d851bdca9796cb4cbe54faee2bd2529fea5d3f0",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "62926b6106cbc22cb73f08c32b964c9e6e8d8b45"
  ],
  "changeHistoryShort": {
    "2d851bdca9796cb4cbe54faee2bd2529fea5d3f0": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "62926b6106cbc22cb73f08c32b964c9e6e8d8b45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d851bdca9796cb4cbe54faee2bd2529fea5d3f0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5604: resolve Sonar violation \u0027Use Arrays.copyOf, Arrays.asList, Collections.addAll or System.arraycopy instead.\u0027\n",
      "commitDate": "17/01/20 4:01 AM",
      "commitName": "2d851bdca9796cb4cbe54faee2bd2529fea5d3f0",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 15.47,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,19 @@\n     public void init() {\n         validateDefaultJavadocTokens();\n         if (javadocTokens.isEmpty()) {\n-            for (int id : getDefaultJavadocTokens()) {\n-                javadocTokens.add(id);\n-            }\n+            javadocTokens.addAll(\n+                    Arrays.stream(getDefaultJavadocTokens()).boxed().collect(Collectors.toList()));\n         }\n         else {\n             final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n             Arrays.sort(acceptableJavadocTokens);\n             for (Integer javadocTokenId : javadocTokens) {\n                 if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n                     final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n                             + \"not found in Acceptable javadoc tokens list in check %s\",\n                             JavadocUtil.getTokenName(javadocTokenId), getClass().getName());\n                     throw new IllegalStateException(message);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void init() {\n        validateDefaultJavadocTokens();\n        if (javadocTokens.isEmpty()) {\n            javadocTokens.addAll(\n                    Arrays.stream(getDefaultJavadocTokens()).boxed().collect(Collectors.toList()));\n        }\n        else {\n            final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n            Arrays.sort(acceptableJavadocTokens);\n            for (Integer javadocTokenId : javadocTokens) {\n                if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n                    final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n                            + \"not found in Acceptable javadoc tokens list in check %s\",\n                            JavadocUtil.getTokenName(javadocTokenId), getClass().getName());\n                    throw new IllegalStateException(message);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     public void init() {\n         validateDefaultJavadocTokens();\n         if (javadocTokens.isEmpty()) {\n             for (int id : getDefaultJavadocTokens()) {\n                 javadocTokens.add(id);\n             }\n         }\n         else {\n             final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n             Arrays.sort(acceptableJavadocTokens);\n             for (Integer javadocTokenId : javadocTokens) {\n                 if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n                     final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n                             + \"not found in Acceptable javadoc tokens list in check %s\",\n-                            JavadocUtils.getTokenName(javadocTokenId), getClass().getName());\n+                            JavadocUtil.getTokenName(javadocTokenId), getClass().getName());\n                     throw new IllegalStateException(message);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void init() {\n        validateDefaultJavadocTokens();\n        if (javadocTokens.isEmpty()) {\n            for (int id : getDefaultJavadocTokens()) {\n                javadocTokens.add(id);\n            }\n        }\n        else {\n            final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n            Arrays.sort(acceptableJavadocTokens);\n            for (Integer javadocTokenId : javadocTokens) {\n                if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n                    final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n                            + \"not found in Acceptable javadoc tokens list in check %s\",\n                            JavadocUtil.getTokenName(javadocTokenId), getClass().getName());\n                    throw new IllegalStateException(message);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {}
    },
    "62926b6106cbc22cb73f08c32b964c9e6e8d8b45": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2427: added customizable javadoc tokens",
      "commitDate": "01/11/16 1:07 PM",
      "commitName": "62926b6106cbc22cb73f08c32b964c9e6e8d8b45",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,20 @@\n+    public void init() {\n+        validateDefaultJavadocTokens();\n+        if (javadocTokens.isEmpty()) {\n+            for (int id : getDefaultJavadocTokens()) {\n+                javadocTokens.add(id);\n+            }\n+        }\n+        else {\n+            final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n+            Arrays.sort(acceptableJavadocTokens);\n+            for (Integer javadocTokenId : javadocTokens) {\n+                if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n+                    final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n+                            + \"not found in Acceptable javadoc tokens list in check %s\",\n+                            JavadocUtils.getTokenName(javadocTokenId), getClass().getName());\n+                    throw new IllegalStateException(message);\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void init() {\n        validateDefaultJavadocTokens();\n        if (javadocTokens.isEmpty()) {\n            for (int id : getDefaultJavadocTokens()) {\n                javadocTokens.add(id);\n            }\n        }\n        else {\n            final int[] acceptableJavadocTokens \u003d getAcceptableJavadocTokens();\n            Arrays.sort(acceptableJavadocTokens);\n            for (Integer javadocTokenId : javadocTokens) {\n                if (Arrays.binarySearch(acceptableJavadocTokens, javadocTokenId) \u003c 0) {\n                    final String message \u003d String.format(Locale.ROOT, \"Javadoc Token \\\"%s\\\" was \"\n                            + \"not found in Acceptable javadoc tokens list in check %s\",\n                            JavadocUtils.getTokenName(javadocTokenId), getClass().getName());\n                    throw new IllegalStateException(message);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java"
    }
  }
}