{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DesignForExtensionCheck.java",
  "functionName": "hasEmptyImplementation",
  "functionId": "hasEmptyImplementation___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
  "functionStartLine": 347,
  "functionEndLine": 361,
  "numCommitsSeen": 54,
  "timeTaken": 1413,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "257d13b6bb53245d2491e50d4ca8e39ddfc80035",
    "3eaa031fb7de67dc205fbbff370712bb92fc8259",
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
    "06716249cfb86d9f213f33a26877112e8ab45adc"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "257d13b6bb53245d2491e50d4ca8e39ddfc80035": "Ybodychange",
    "3eaa031fb7de67dc205fbbff370712bb92fc8259": "Ybodychange",
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6": "Ybodychange",
    "06716249cfb86d9f213f33a26877112e8ab45adc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "07/05/18 6:56 PM",
      "commitNameOld": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 27.11,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private static boolean hasEmptyImplementation(DetailAST ast) {\n         boolean hasEmptyBody \u003d true;\n         final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n         final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n         final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n             return currentNode !\u003d methodImplCloseBrace\n-                \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n+                \u0026\u0026 !TokenUtil.isCommentType(currentNode.getType());\n         };\n         final Optional\u003cDetailAST\u003e methodBody \u003d\n-            TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n+            TokenUtil.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n         if (methodBody.isPresent()) {\n             hasEmptyBody \u003d false;\n         }\n         return hasEmptyBody;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean hasEmptyImplementation(DetailAST ast) {\n        boolean hasEmptyBody \u003d true;\n        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n        final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n        final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n            return currentNode !\u003d methodImplCloseBrace\n                \u0026\u0026 !TokenUtil.isCommentType(currentNode.getType());\n        };\n        final Optional\u003cDetailAST\u003e methodBody \u003d\n            TokenUtil.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n        if (methodBody.isPresent()) {\n            hasEmptyBody \u003d false;\n        }\n        return hasEmptyBody;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "257d13b6bb53245d2491e50d4ca8e39ddfc80035": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3830: Fix bug in DesignForExtension when order of annotations changes violation\n",
      "commitDate": "23/02/17 2:51 PM",
      "commitName": "257d13b6bb53245d2491e50d4ca8e39ddfc80035",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "19/02/17 3:09 PM",
      "commitNameOld": "3eaa031fb7de67dc205fbbff370712bb92fc8259",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n     private static boolean hasEmptyImplementation(DetailAST ast) {\n         boolean hasEmptyBody \u003d true;\n         final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n         final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n         final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n-            return currentNode !\u003d null\n-                \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n-                \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n+            return currentNode !\u003d methodImplCloseBrace\n                 \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n         };\n         final Optional\u003cDetailAST\u003e methodBody \u003d\n             TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n         if (methodBody.isPresent()) {\n             hasEmptyBody \u003d false;\n         }\n         return hasEmptyBody;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean hasEmptyImplementation(DetailAST ast) {\n        boolean hasEmptyBody \u003d true;\n        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n        final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n        final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n            return currentNode !\u003d methodImplCloseBrace\n                \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n        };\n        final Optional\u003cDetailAST\u003e methodBody \u003d\n            TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n        if (methodBody.isPresent()) {\n            hasEmptyBody \u003d false;\n        }\n        return hasEmptyBody;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "3eaa031fb7de67dc205fbbff370712bb92fc8259": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3843: Fix coverage problem for DesignForExtension\n",
      "commitDate": "19/02/17 3:09 PM",
      "commitName": "3eaa031fb7de67dc205fbbff370712bb92fc8259",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "15/02/17 8:38 PM",
      "commitNameOld": "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,17 @@\n     private static boolean hasEmptyImplementation(DetailAST ast) {\n         boolean hasEmptyBody \u003d true;\n         final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n-        if (methodImplOpenBrace !\u003d null) {\n-            final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n-            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n-                return currentNode !\u003d null\n-                    \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n-                    \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n-                    \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n-            };\n-            final Optional\u003cDetailAST\u003e methodBody \u003d\n-                TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n-            if (methodBody.isPresent()) {\n-                hasEmptyBody \u003d false;\n-            }\n+        final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n+        final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n+            return currentNode !\u003d null\n+                \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n+                \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n+                \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n+        };\n+        final Optional\u003cDetailAST\u003e methodBody \u003d\n+            TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n+        if (methodBody.isPresent()) {\n+            hasEmptyBody \u003d false;\n         }\n         return hasEmptyBody;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean hasEmptyImplementation(DetailAST ast) {\n        boolean hasEmptyBody \u003d true;\n        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n        final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n        final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n            return currentNode !\u003d null\n                \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n                \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n                \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n        };\n        final Optional\u003cDetailAST\u003e methodBody \u003d\n            TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n        if (methodBody.isPresent()) {\n            hasEmptyBody \u003d false;\n        }\n        return hasEmptyBody;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3735: added lambdas to NeedBraces for checkstyle config",
      "commitDate": "15/02/17 8:38 PM",
      "commitName": "34ef127bdc17c8103b68b2cd5fe5fdd2b92be0f6",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n     private static boolean hasEmptyImplementation(DetailAST ast) {\n         boolean hasEmptyBody \u003d true;\n         final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n         if (methodImplOpenBrace !\u003d null) {\n             final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n-            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e\n-                currentNode !\u003d null\n+            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n+                return currentNode !\u003d null\n                     \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n                     \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n                     \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n+            };\n             final Optional\u003cDetailAST\u003e methodBody \u003d\n                 TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n             if (methodBody.isPresent()) {\n                 hasEmptyBody \u003d false;\n             }\n         }\n         return hasEmptyBody;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean hasEmptyImplementation(DetailAST ast) {\n        boolean hasEmptyBody \u003d true;\n        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if (methodImplOpenBrace !\u003d null) {\n            final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e {\n                return currentNode !\u003d null\n                    \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n                    \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n                    \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n            };\n            final Optional\u003cDetailAST\u003e methodBody \u003d\n                TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n            if (methodBody.isPresent()) {\n                hasEmptyBody \u003d false;\n            }\n        }\n        return hasEmptyBody;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java",
      "extendedDetails": {}
    },
    "06716249cfb86d9f213f33a26877112e8ab45adc": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3102: DesignForExtension: consider overridable methods and javadoc\n",
      "commitDate": "22/10/16 3:36 PM",
      "commitName": "06716249cfb86d9f213f33a26877112e8ab45adc",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,18 @@\n+    private static boolean hasEmptyImplementation(DetailAST ast) {\n+        boolean hasEmptyBody \u003d true;\n+        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n+        if (methodImplOpenBrace !\u003d null) {\n+            final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n+            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e\n+                currentNode !\u003d null\n+                    \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n+                    \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n+                    \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n+            final Optional\u003cDetailAST\u003e methodBody \u003d\n+                TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n+            if (methodBody.isPresent()) {\n+                hasEmptyBody \u003d false;\n+            }\n+        }\n+        return hasEmptyBody;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean hasEmptyImplementation(DetailAST ast) {\n        boolean hasEmptyBody \u003d true;\n        final DetailAST methodImplOpenBrace \u003d ast.findFirstToken(TokenTypes.SLIST);\n        if (methodImplOpenBrace !\u003d null) {\n            final DetailAST methodImplCloseBrace \u003d methodImplOpenBrace.getLastChild();\n            final Predicate\u003cDetailAST\u003e predicate \u003d currentNode -\u003e\n                currentNode !\u003d null\n                    \u0026\u0026 currentNode !\u003d methodImplCloseBrace\n                    \u0026\u0026 currentNode.getLineNo() \u003c\u003d methodImplCloseBrace.getLineNo()\n                    \u0026\u0026 !TokenUtils.isCommentType(currentNode.getType());\n            final Optional\u003cDetailAST\u003e methodBody \u003d\n                TokenUtils.findFirstTokenByPredicate(methodImplOpenBrace, predicate);\n            if (methodBody.isPresent()) {\n                hasEmptyBody \u003d false;\n            }\n        }\n        return hasEmptyBody;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java"
    }
  }
}