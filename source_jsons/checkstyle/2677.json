{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LineWrappingHandler.java",
  "functionName": "checkIndentation",
  "functionId": "checkIndentation___firstNode-DetailAST__lastNode-DetailAST__indentLevel-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
  "functionStartLine": 107,
  "functionEndLine": 110,
  "numCommitsSeen": 101,
  "timeTaken": 3285,
  "changeHistory": [
    "d243badf77c9c70a4e4ecde28a34ca8802de41b6",
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
    "9e9a0b424551418e80c5a7e7badadfe80958ec82",
    "f111cc06fb4744981f79173db4659b8a8f12d5aa",
    "585738d956083eb27fb57a6e3f43c9c05ef43d70",
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "2ff20f4af36062db07fa245ab6b3a1d8ab2fe16c",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
    "e3a48d1527341456a798c3f0c1986de6898a8c60",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
    "303cbce950cf31dcfc4df19414a37fe577fc09e1",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb"
  ],
  "changeHistoryShort": {
    "d243badf77c9c70a4e4ecde28a34ca8802de41b6": "Ymodifierchange",
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d": "Ybodychange",
    "9e9a0b424551418e80c5a7e7badadfe80958ec82": "Ybodychange",
    "f111cc06fb4744981f79173db4659b8a8f12d5aa": "Ybodychange",
    "585738d956083eb27fb57a6e3f43c9c05ef43d70": "Ybodychange",
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ybodychange",
    "2ff20f4af36062db07fa245ab6b3a1d8ab2fe16c": "Ybodychange",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": "Ybodychange",
    "e3a48d1527341456a798c3f0c1986de6898a8c60": "Ymultichange(Ymovefromfile,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": "Ybodychange",
    "303cbce950cf31dcfc4df19414a37fe577fc09e1": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d243badf77c9c70a4e4ecde28a34ca8802de41b6": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #4801: fix for violations from WeakerAccess inspection\n",
      "commitDate": "10/08/17 12:56 AM",
      "commitName": "d243badf77c9c70a4e4ecde28a34ca8802de41b6",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "29/07/17 6:40 PM",
      "commitNameOld": "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 11.26,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,4 @@\n-    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n+    private void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n         checkIndentation(firstNode, lastNode, indentLevel,\n                 -1, LineWrappingOptions.IGNORE_FIRST_LINE);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        checkIndentation(firstNode, lastNode, indentLevel,\n                -1, LineWrappingOptions.IGNORE_FIRST_LINE);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[private]"
      }
    },
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4707: fix all violations of BooleanParameter idea check except those addressed in separate task\n",
      "commitDate": "29/07/17 6:40 PM",
      "commitName": "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "23/07/17 1:48 PM",
      "commitNameOld": "359ce65a7b6ec7725d4fea3aca1a299cd2b7f7ba",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 6.2,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,4 @@\n     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n-        checkIndentation(firstNode, lastNode, indentLevel, -1, true);\n+        checkIndentation(firstNode, lastNode, indentLevel,\n+                -1, LineWrappingOptions.IGNORE_FIRST_LINE);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        checkIndentation(firstNode, lastNode, indentLevel,\n                -1, LineWrappingOptions.IGNORE_FIRST_LINE);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "9e9a0b424551418e80c5a7e7badadfe80958ec82": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2763: restored indentation\u0027s throwsIndent logic",
      "commitDate": "07/05/16 6:37 AM",
      "commitName": "9e9a0b424551418e80c5a7e7badadfe80958ec82",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/04/16 5:35 AM",
      "commitNameOld": "f111cc06fb4744981f79173db4659b8a8f12d5aa",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 13.04,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,3 @@\n     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n-        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n-                lastNode);\n-\n-        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n-        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n-            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n-        }\n-\n-        // First node should be removed because it was already checked before.\n-        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n-        final int firstNodeIndent \u003d getLineStart(firstLineNode);\n-        final int currentIndent \u003d firstNodeIndent + indentLevel;\n-\n-        for (DetailAST node : firstNodesOnLines.values()) {\n-            final int currentType \u003d node.getType();\n-\n-            if (currentType \u003d\u003d TokenTypes.RPAREN) {\n-                logWarningMessage(node, firstNodeIndent);\n-            }\n-            else if (currentType !\u003d TokenTypes.RCURLY \u0026\u0026 currentType !\u003d TokenTypes.ARRAY_INIT) {\n-                logWarningMessage(node, currentIndent);\n-            }\n-        }\n+        checkIndentation(firstNode, lastNode, indentLevel, -1, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        checkIndentation(firstNode, lastNode, indentLevel, -1, true);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "f111cc06fb4744981f79173db4659b8a8f12d5aa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2950: rewrote LineWrappingHandler for easier use (#2951)",
      "commitDate": "24/04/16 5:35 AM",
      "commitName": "f111cc06fb4744981f79173db4659b8a8f12d5aa",
      "commitAuthor": "rnveach",
      "commitDateOld": "22/04/16 5:11 AM",
      "commitNameOld": "585738d956083eb27fb57a6e3f43c9c05ef43d70",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n         final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                 lastNode);\n \n         final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n             checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n-        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n+        final int firstNodeIndent \u003d getLineStart(firstLineNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RPAREN) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n             else if (currentType !\u003d TokenTypes.RCURLY \u0026\u0026 currentType !\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                lastNode);\n\n        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getLineStart(firstLineNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RPAREN) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else if (currentType !\u003d TokenTypes.RCURLY \u0026\u0026 currentType !\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "585738d956083eb27fb57a6e3f43c9c05ef43d70": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3103: removed duplicated validation by line wrapping",
      "commitDate": "22/04/16 5:11 AM",
      "commitName": "585738d956083eb27fb57a6e3f43c9c05ef43d70",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/02/16 5:08 AM",
      "commitNameOld": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 57.96,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n     public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n         final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                 lastNode);\n \n         final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n             checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n         final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n-            if (currentType \u003d\u003d TokenTypes.RCURLY\n-                    || currentType \u003d\u003d TokenTypes.RPAREN\n-                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n+            if (currentType \u003d\u003d TokenTypes.RPAREN) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n-            else {\n+            else if (currentType !\u003d TokenTypes.RCURLY \u0026\u0026 currentType !\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                lastNode);\n\n        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RPAREN) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else if (currentType !\u003d TokenTypes.RCURLY \u0026\u0026 currentType !\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "minor: refactored LineWrappingHandler",
      "commitDate": "24/02/16 5:08 AM",
      "commitName": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "minor: refactored LineWrappingHandler",
          "commitDate": "24/02/16 5:08 AM",
          "commitName": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
          "commitAuthor": "rnveach",
          "commitDateOld": "16/02/16 6:06 AM",
          "commitNameOld": "7572ba1f8e392bd0a57e87c48f4d3abefb83fe6a",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 7.96,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-    public void checkIndentation() {\n-        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n+    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n+        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n+                lastNode);\n \n         final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n-            checkAnnotationIndentation(firstLineNode, firstNodesOnLines);\n+            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n         final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RCURLY\n                     || currentType \u003d\u003d TokenTypes.RPAREN\n                     || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n             else {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                lastNode);\n\n        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[firstNode-DetailAST, lastNode-DetailAST, indentLevel-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "minor: refactored LineWrappingHandler",
          "commitDate": "24/02/16 5:08 AM",
          "commitName": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
          "commitAuthor": "rnveach",
          "commitDateOld": "16/02/16 6:06 AM",
          "commitNameOld": "7572ba1f8e392bd0a57e87c48f4d3abefb83fe6a",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 7.96,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-    public void checkIndentation() {\n-        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n+    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n+        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n+                lastNode);\n \n         final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n-            checkAnnotationIndentation(firstLineNode, firstNodesOnLines);\n+            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n         final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RCURLY\n                     || currentType \u003d\u003d TokenTypes.RPAREN\n                     || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n             else {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indentLevel) {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes(firstNode,\n                lastNode);\n\n        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstLineNode, firstNodesOnLines, indentLevel);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 5:18 AM",
      "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public void checkIndentation() {\n         final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n \n-        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n-        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n-            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n+        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n+        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n+            checkAnnotationIndentation(firstLineNode, firstNodesOnLines);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n-        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n+        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RCURLY\n                     || currentType \u003d\u003d TokenTypes.RPAREN\n                     || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n             else {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n\n        final DetailAST firstLineNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstLineNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstLineNode, firstNodesOnLines);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstLineNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "2ff20f4af36062db07fa245ab6b3a1d8ab2fe16c": {
      "type": "Ybodychange",
      "commitMessage": "Add test coverage to LineWrappingHandler in Indentation check. #1270\n",
      "commitDate": "20/07/15 8:54 PM",
      "commitName": "2ff20f4af36062db07fa245ab6b3a1d8ab2fe16c",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/07/15 9:51 PM",
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,26 @@\n     public void checkIndentation() {\n         final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n \n         final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n             checkAnnotationIndentation(firstNode, firstNodesOnLines);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n         final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n         final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RCURLY\n                     || currentType \u003d\u003d TokenTypes.RPAREN\n                     || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n-            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n-                final DetailAST parent \u003d node.getParent();\n-\n-                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n-                    logWarningMessage(parent, currentIndent);\n-                }\n-            }\n             else {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n\n        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT) {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, indentation, #512\n",
      "commitDate": "19/01/15 6:34 AM",
      "commitName": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
      "commitAuthor": "alexkravin",
      "commitDateOld": "05/01/15 2:08 PM",
      "commitNameOld": "6a9e1b3f93b487b86be7def11a0c9880f01ac29f",
      "commitAuthorOld": "maxvetrenko",
      "daysBetweenCommits": 13.69,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void checkIndentation()\n     {\n         final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n \n         final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n         if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n             checkAnnotationIndentation(firstNode, firstNodesOnLines);\n         }\n \n         // First node should be removed because it was already checked before.\n         firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n         final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n-        final int currentIndent \u003d firstNodeIndent + mIndentLevel;\n+        final int currentIndent \u003d firstNodeIndent + indentLevel;\n \n         for (DetailAST node : firstNodesOnLines.values()) {\n             final int currentType \u003d node.getType();\n \n             if (currentType \u003d\u003d TokenTypes.RCURLY\n                     || currentType \u003d\u003d TokenTypes.RPAREN\n                     || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n             {\n                 logWarningMessage(node, firstNodeIndent);\n             }\n             else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n                 final DetailAST parent \u003d node.getParent();\n \n                 if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n                     logWarningMessage(parent, currentIndent);\n                 }\n             }\n             else {\n                 logWarningMessage(node, currentIndent);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n\n        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n        final int currentIndent \u003d firstNodeIndent + indentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n            {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n                final DetailAST parent \u003d node.getParent();\n\n                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n                    logWarningMessage(parent, currentIndent);\n                }\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
      "extendedDetails": {}
    },
    "e3a48d1527341456a798c3f0c1986de6898a8c60": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Update for IndentationCheck. #294\n",
      "commitDate": "13/10/14 4:21 PM",
      "commitName": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthor": "maxvetrenko",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Update for IndentationCheck. #294\n",
          "commitDate": "13/10/14 4:21 PM",
          "commitName": "e3a48d1527341456a798c3f0c1986de6898a8c60",
          "commitAuthor": "maxvetrenko",
          "commitDateOld": "13/10/14 12:03 PM",
          "commitNameOld": "343e946b076a5344e380c76e5b3ea23438b6fc93",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,35 @@\n     public void checkIndentation()\n     {\n-        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n+        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n \n-        // check indentation of assign if it starts line\n-        final DetailAST assign \u003d getMainAst();\n-        if (startsLine(assign)\n-            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n-        {\n-            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n+        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n+        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n+            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n         }\n \n-        // check indentation of rvalue\n-        DetailAST child \u003d assign.getFirstChild();\n+        // First node should be removed because it was already checked before.\n+        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n+        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n+        final int currentIndent \u003d firstNodeIndent + mIndentLevel;\n \n-        // if this is assign in expression then skip first child,\n-        // because it\u0027s lvalue.\n-        final DetailAST parent \u003d assign.getParent();\n-        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n-            child \u003d child.getNextSibling();\n-        }\n-        if ((parent !\u003d null)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n-        {\n-            child \u003d assign.getNextSibling();\n-        }\n+        for (DetailAST node : firstNodesOnLines.values()) {\n+            final int currentType \u003d node.getType();\n \n-        checkExpressionSubtree(child, expectedLevel, false, true);\n+            if (currentType \u003d\u003d TokenTypes.RCURLY\n+                    || currentType \u003d\u003d TokenTypes.RPAREN\n+                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n+            {\n+                logWarningMessage(node, firstNodeIndent);\n+            }\n+            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n+                final DetailAST parent \u003d node.getParent();\n+\n+                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n+                    logWarningMessage(parent, currentIndent);\n+                }\n+            }\n+            else {\n+                logWarningMessage(node, currentIndent);\n+            }\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation()\n    {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n\n        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n        final int currentIndent \u003d firstNodeIndent + mIndentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n            {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n                final DetailAST parent \u003d node.getParent();\n\n                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n                    logWarningMessage(parent, currentIndent);\n                }\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
            "oldMethodName": "checkIndentation",
            "newMethodName": "checkIndentation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Update for IndentationCheck. #294\n",
          "commitDate": "13/10/14 4:21 PM",
          "commitName": "e3a48d1527341456a798c3f0c1986de6898a8c60",
          "commitAuthor": "maxvetrenko",
          "commitDateOld": "13/10/14 12:03 PM",
          "commitNameOld": "343e946b076a5344e380c76e5b3ea23438b6fc93",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,35 @@\n     public void checkIndentation()\n     {\n-        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n+        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n \n-        // check indentation of assign if it starts line\n-        final DetailAST assign \u003d getMainAst();\n-        if (startsLine(assign)\n-            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n-        {\n-            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n+        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n+        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n+            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n         }\n \n-        // check indentation of rvalue\n-        DetailAST child \u003d assign.getFirstChild();\n+        // First node should be removed because it was already checked before.\n+        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n+        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n+        final int currentIndent \u003d firstNodeIndent + mIndentLevel;\n \n-        // if this is assign in expression then skip first child,\n-        // because it\u0027s lvalue.\n-        final DetailAST parent \u003d assign.getParent();\n-        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n-            child \u003d child.getNextSibling();\n-        }\n-        if ((parent !\u003d null)\n-            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n-        {\n-            child \u003d assign.getNextSibling();\n-        }\n+        for (DetailAST node : firstNodesOnLines.values()) {\n+            final int currentType \u003d node.getType();\n \n-        checkExpressionSubtree(child, expectedLevel, false, true);\n+            if (currentType \u003d\u003d TokenTypes.RCURLY\n+                    || currentType \u003d\u003d TokenTypes.RPAREN\n+                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n+            {\n+                logWarningMessage(node, firstNodeIndent);\n+            }\n+            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n+                final DetailAST parent \u003d node.getParent();\n+\n+                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n+                    logWarningMessage(parent, currentIndent);\n+                }\n+            }\n+            else {\n+                logWarningMessage(node, currentIndent);\n+            }\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation()\n    {\n        final NavigableMap\u003cInteger, DetailAST\u003e firstNodesOnLines \u003d collectFirstNodes();\n\n        final DetailAST firstNode \u003d firstNodesOnLines.get(firstNodesOnLines.firstKey());\n        if (firstNode.getType() \u003d\u003d TokenTypes.AT) {\n            checkAnnotationIndentation(firstNode, firstNodesOnLines);\n        }\n\n        // First node should be removed because it was already checked before.\n        firstNodesOnLines.remove(firstNodesOnLines.firstKey());\n        final int firstNodeIndent \u003d getFirstNodeIndent(firstNode);\n        final int currentIndent \u003d firstNodeIndent + mIndentLevel;\n\n        for (DetailAST node : firstNodesOnLines.values()) {\n            final int currentType \u003d node.getType();\n\n            if (currentType \u003d\u003d TokenTypes.RCURLY\n                    || currentType \u003d\u003d TokenTypes.RPAREN\n                    || currentType \u003d\u003d TokenTypes.ARRAY_INIT)\n            {\n                logWarningMessage(node, firstNodeIndent);\n            }\n            else if (currentType \u003d\u003d TokenTypes.LITERAL_IF) {\n                final DetailAST parent \u003d node.getParent();\n\n                if (parent.getType() \u003d\u003d TokenTypes.LITERAL_ELSE) {\n                    logWarningMessage(parent, currentIndent);\n                }\n            }\n            else {\n                logWarningMessage(node, currentIndent);\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        final DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        final DetailAST parent \u003d assign.getParent();\n        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n            child \u003d child.getNextSibling();\n        }\n        if ((parent !\u003d null)\n            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n        {\n            child \u003d assign.getNextSibling();\n        }\n\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/08 3:11 PM",
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 247.52,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void checkIndentation()\n     {\n         final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n \n         // check indentation of assign if it starts line\n         final DetailAST assign \u003d getMainAst();\n         if (startsLine(assign)\n             \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n         {\n             logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n         }\n \n         // check indentation of rvalue\n-        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n+        DetailAST child \u003d assign.getFirstChild();\n \n         // if this is assign in expression then skip first child,\n         // because it\u0027s lvalue.\n         final DetailAST parent \u003d assign.getParent();\n         if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n-            child \u003d (DetailAST) child.getNextSibling();\n+            child \u003d child.getNextSibling();\n         }\n         if ((parent !\u003d null)\n             \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n-            child \u003d (DetailAST) assign.getNextSibling();\n+            child \u003d assign.getNextSibling();\n         }\n \n         checkExpressionSubtree(child, expectedLevel, false, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        final DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        final DetailAST parent \u003d assign.getParent();\n        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n            child \u003d child.getNextSibling();\n        }\n        if ((parent !\u003d null)\n            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n        {\n            child \u003d assign.getNextSibling();\n        }\n\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/02/05 6:37 AM",
      "commitNameOld": "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 500.53,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void checkIndentation()\n     {\n         final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n \n         // check indentation of assign if it starts line\n         final DetailAST assign \u003d getMainAst();\n         if (startsLine(assign)\n             \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n         {\n             logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n         }\n \n         // check indentation of rvalue\n         DetailAST child \u003d (DetailAST) assign.getFirstChild();\n \n         // if this is assign in expression then skip first child,\n         // because it\u0027s lvalue.\n         final DetailAST parent \u003d assign.getParent();\n-        if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.EXPR) {\n+        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n             child \u003d (DetailAST) child.getNextSibling();\n         }\n-        if (parent !\u003d null\n-            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        if ((parent !\u003d null)\n+            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n         {\n             child \u003d (DetailAST) assign.getNextSibling();\n         }\n \n         checkExpressionSubtree(child, expectedLevel, false, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        final DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        final DetailAST parent \u003d assign.getParent();\n        if ((parent !\u003d null) \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.EXPR)) {\n            child \u003d (DetailAST) child.getNextSibling();\n        }\n        if ((parent !\u003d null)\n            \u0026\u0026 (parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR))\n        {\n            child \u003d (DetailAST) assign.getNextSibling();\n        }\n\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {}
    },
    "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a": {
      "type": "Ybodychange",
      "commitMessage": "Two more annotation-related problems (module Indentation, bug 1109214 and module UnnecessaryParentheses, bug 1109238)\n",
      "commitDate": "21/02/05 6:37 AM",
      "commitName": "7dd31794bcc6258ffaa1ed5533a3b5a7c2f2af1a",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 43.16,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n     public void checkIndentation()\n     {\n         final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n \n         // check indentation of assign if it starts line\n         final DetailAST assign \u003d getMainAst();\n         if (startsLine(assign)\n             \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n         {\n             logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n         }\n \n         // check indentation of rvalue\n         DetailAST child \u003d (DetailAST) assign.getFirstChild();\n \n         // if this is assign in expression then skip first child,\n         // because it\u0027s lvalue.\n-        if (assign.getParent() !\u003d null\n-            \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n-        {\n+        final DetailAST parent \u003d assign.getParent();\n+        if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.EXPR) {\n             child \u003d (DetailAST) child.getNextSibling();\n         }\n+        if (parent !\u003d null\n+            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n+        {\n+            child \u003d (DetailAST) assign.getNextSibling();\n+        }\n+\n         checkExpressionSubtree(child, expectedLevel, false, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        final DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        final DetailAST parent \u003d assign.getParent();\n        if (parent !\u003d null \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.EXPR) {\n            child \u003d (DetailAST) child.getNextSibling();\n        }\n        if (parent !\u003d null\n            \u0026\u0026 parent.getType() \u003d\u003d TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)\n        {\n            child \u003d (DetailAST) assign.getNextSibling();\n        }\n\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {}
    },
    "303cbce950cf31dcfc4df19414a37fe577fc09e1": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "28/08/04 3:32 AM",
      "commitName": "303cbce950cf31dcfc4df19414a37fe577fc09e1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "26/08/04 6:47 AM",
      "commitNameOld": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void checkIndentation()\n     {\n         final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n \n         // check indentation of assign if it starts line\n-        DetailAST assign \u003d getMainAst();\n+        final DetailAST assign \u003d getMainAst();\n         if (startsLine(assign)\n             \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n         {\n             logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n         }\n \n         // check indentation of rvalue\n         DetailAST child \u003d (DetailAST) assign.getFirstChild();\n \n         // if this is assign in expression then skip first child,\n         // because it\u0027s lvalue.\n         if (assign.getParent() !\u003d null\n             \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n         {\n             child \u003d (DetailAST) child.getNextSibling();\n         }\n         checkExpressionSubtree(child, expectedLevel, false, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        final DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        if (assign.getParent() !\u003d null\n            \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n        {\n            child \u003d (DetailAST) child.getNextSibling();\n        }\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {}
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 224.69,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void checkIndentation()\n     {\n-        IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n+        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n \n         // check indentation of assign if it starts line\n         DetailAST assign \u003d getMainAst();\n         if (startsLine(assign)\n             \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n         {\n             logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n         }\n \n         // check indentation of rvalue\n         DetailAST child \u003d (DetailAST) assign.getFirstChild();\n \n         // if this is assign in expression then skip first child,\n         // because it\u0027s lvalue.\n         if (assign.getParent() !\u003d null\n             \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n         {\n             child \u003d (DetailAST) child.getNextSibling();\n         }\n         checkExpressionSubtree(child, expectedLevel, false, true);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        if (assign.getParent() !\u003d null\n            \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n        {\n            child \u003d (DetailAST) child.getNextSibling();\n        }\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java",
      "extendedDetails": {}
    },
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": {
      "type": "Yintroduced",
      "commitMessage": "Indentation:\nFixes for several TODO comments.\nAdded AssignHandler.\n",
      "commitDate": "14/06/03 10:47 AM",
      "commitName": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,24 @@\n+    public void checkIndentation()\n+    {\n+        IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n+\n+        // check indentation of assign if it starts line\n+        DetailAST assign \u003d getMainAst();\n+        if (startsLine(assign)\n+            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n+        {\n+            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n+        }\n+\n+        // check indentation of rvalue\n+        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n+\n+        // if this is assign in expression then skip first child,\n+        // because it\u0027s lvalue.\n+        if (assign.getParent() !\u003d null\n+            \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n+        {\n+            child \u003d (DetailAST) child.getNextSibling();\n+        }\n+        checkExpressionSubtree(child, expectedLevel, false, true);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        IndentLevel expectedLevel \u003d getChildrenExpectedLevel();\n\n        // check indentation of assign if it starts line\n        DetailAST assign \u003d getMainAst();\n        if (startsLine(assign)\n            \u0026\u0026 !expectedLevel.accept(expandedTabsColumnNo(assign)))\n        {\n            logError(assign, \"\" , expandedTabsColumnNo(assign), expectedLevel);\n        }\n\n        // check indentation of rvalue\n        DetailAST child \u003d (DetailAST) assign.getFirstChild();\n\n        // if this is assign in expression then skip first child,\n        // because it\u0027s lvalue.\n        if (assign.getParent() !\u003d null\n            \u0026\u0026 assign.getParent().getType() \u003d\u003d TokenTypes.EXPR)\n        {\n            child \u003d (DetailAST) child.getNextSibling();\n        }\n        checkExpressionSubtree(child, expectedLevel, false, true);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java"
    }
  }
}