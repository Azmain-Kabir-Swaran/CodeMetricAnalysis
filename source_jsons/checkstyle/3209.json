{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WriteTagCheck.java",
  "functionName": "checkTag",
  "functionId": "checkTag___lineNo-int__comment-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
  "functionStartLine": 198,
  "functionEndLine": 220,
  "numCommitsSeen": 106,
  "timeTaken": 3573,
  "changeHistory": [
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "56df5087fe891069e5824abc03ae158aa0d06d66",
    "88830ca708e2deb22cae333057ebddd15f7f9c57",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "755eda4d684e71ea18bed69646e07140310b67fc",
    "3bd699bd593414d63c7139aa410f13ec8341a027",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "788b41973d5747c7b4699a853b62168cf0001df6",
    "96c668724bc05a11ceb031dda71efe1e9e69480d"
  ],
  "changeHistoryShort": {
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": "Ybodychange",
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "56df5087fe891069e5824abc03ae158aa0d06d66": "Ybodychange",
    "88830ca708e2deb22cae333057ebddd15f7f9c57": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "755eda4d684e71ea18bed69646e07140310b67fc": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bd699bd593414d63c7139aa410f13ec8341a027": "Ymultichange(Yparameterchange,Ybodychange)",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": "Ymultichange(Yparameterchange,Ybodychange)",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "788b41973d5747c7b4699a853b62168cf0001df6": "Ybodychange",
    "96c668724bc05a11ceb031dda71efe1e9e69480d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6295: changed code to remove javadoc profile mutations",
      "commitDate": "27/12/18 5:47 PM",
      "commitName": "9198b1f8d57cfe4c5e3f55c8494e466e9f53397b",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 206.88,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRegExp !\u003d null) {\n-            int tagCount \u003d 0;\n+            boolean hasTag \u003d false;\n             for (int i \u003d 0; i \u003c comment.length; i++) {\n                 final String commentValue \u003d comment[i];\n                 final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                 if (matcher.find()) {\n-                    tagCount +\u003d 1;\n+                    hasTag \u003d true;\n                     final int contentStart \u003d matcher.start(1);\n                     final String content \u003d commentValue.substring(contentStart);\n                     if (tagFormat \u003d\u003d null || tagFormat.matcher(content).find()) {\n                         logTag(lineNo + i - comment.length, tag, content);\n                     }\n                     else {\n                         log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());\n                     }\n                 }\n             }\n-            if (tagCount \u003d\u003d 0) {\n+            if (!hasTag) {\n                 log(lineNo, MSG_MISSING_TAG, tag);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRegExp !\u003d null) {\n            boolean hasTag \u003d false;\n            for (int i \u003d 0; i \u003c comment.length; i++) {\n                final String commentValue \u003d comment[i];\n                final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                if (matcher.find()) {\n                    hasTag \u003d true;\n                    final int contentStart \u003d matcher.start(1);\n                    final String content \u003d commentValue.substring(contentStart);\n                    if (tagFormat \u003d\u003d null || tagFormat.matcher(content).find()) {\n                        logTag(lineNo + i - comment.length, tag, content);\n                    }\n                    else {\n                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());\n                    }\n                }\n            }\n            if (!hasTag) {\n                log(lineNo, MSG_MISSING_TAG, tag);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3255: removed unnecessary string fields for patterns",
      "commitDate": "10/11/16 10:34 AM",
      "commitName": "a963f8a21bd47624ec9f1eea72c9326e2ca01c8a",
      "commitAuthor": "rnveach",
      "commitDateOld": "09/11/16 4:34 AM",
      "commitNameOld": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.25,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRegExp !\u003d null) {\n             int tagCount \u003d 0;\n             for (int i \u003d 0; i \u003c comment.length; i++) {\n                 final String commentValue \u003d comment[i];\n                 final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                 if (matcher.find()) {\n                     tagCount +\u003d 1;\n                     final int contentStart \u003d matcher.start(1);\n                     final String content \u003d commentValue.substring(contentStart);\n-                    if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n+                    if (tagFormat \u003d\u003d null || tagFormat.matcher(content).find()) {\n                         logTag(lineNo + i - comment.length, tag, content);\n                     }\n                     else {\n-                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());\n                     }\n                 }\n             }\n             if (tagCount \u003d\u003d 0) {\n                 log(lineNo, MSG_MISSING_TAG, tag);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRegExp !\u003d null) {\n            int tagCount \u003d 0;\n            for (int i \u003d 0; i \u003c comment.length; i++) {\n                final String commentValue \u003d comment[i];\n                final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                if (matcher.find()) {\n                    tagCount +\u003d 1;\n                    final int contentStart \u003d matcher.start(1);\n                    final String content \u003d commentValue.substring(contentStart);\n                    if (tagFormat \u003d\u003d null || tagFormat.matcher(content).find()) {\n                        logTag(lineNo + i - comment.length, tag, content);\n                    }\n                    else {\n                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat.pattern());\n                    }\n                }\n            }\n            if (tagCount \u003d\u003d 0) {\n                log(lineNo, MSG_MISSING_TAG, tag);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n     private void checkTag(int lineNo, String... comment) {\n-        if (tagRegExp \u003d\u003d null) {\n-            return;\n-        }\n-\n-        int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c comment.length; i++) {\n-            final String commentValue \u003d comment[i];\n-            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n-            if (matcher.find()) {\n-                tagCount +\u003d 1;\n-                final int contentStart \u003d matcher.start(1);\n-                final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n-                    logTag(lineNo + i - comment.length, tag, content);\n-                }\n-                else {\n-                    log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+        if (tagRegExp !\u003d null) {\n+            int tagCount \u003d 0;\n+            for (int i \u003d 0; i \u003c comment.length; i++) {\n+                final String commentValue \u003d comment[i];\n+                final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n+                if (matcher.find()) {\n+                    tagCount +\u003d 1;\n+                    final int contentStart \u003d matcher.start(1);\n+                    final String content \u003d commentValue.substring(contentStart);\n+                    if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n+                        logTag(lineNo + i - comment.length, tag, content);\n+                    }\n+                    else {\n+                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n+                    }\n                 }\n             }\n+            if (tagCount \u003d\u003d 0) {\n+                log(lineNo, MSG_MISSING_TAG, tag);\n+            }\n         }\n-        if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MSG_MISSING_TAG, tag);\n-        }\n-\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRegExp !\u003d null) {\n            int tagCount \u003d 0;\n            for (int i \u003d 0; i \u003c comment.length; i++) {\n                final String commentValue \u003d comment[i];\n                final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n                if (matcher.find()) {\n                    tagCount +\u003d 1;\n                    final int contentStart \u003d matcher.start(1);\n                    final String content \u003d commentValue.substring(contentStart);\n                    if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                        logTag(lineNo + i - comment.length, tag, content);\n                    }\n                    else {\n                        log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n                    }\n                }\n            }\n            if (tagCount \u003d\u003d 0) {\n                log(lineNo, MSG_MISSING_TAG, tag);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRegExp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n             final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n                 if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n+                    log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tag);\n+            log(lineNo, MSG_MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRegExp \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String commentValue \u003d comment[i];\n            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d commentValue.substring(contentStart);\n                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n                else {\n                    log(lineNo + i - comment.length, MSG_TAG_FORMAT, tag, tagFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MSG_MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "56df5087fe891069e5824abc03ae158aa0d06d66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2639: RE is removed from allowed abbreviations\n",
      "commitDate": "25/11/15 8:47 AM",
      "commitName": "56df5087fe891069e5824abc03ae158aa0d06d66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "07/10/15 5:56 PM",
      "commitNameOld": "88830ca708e2deb22cae333057ebddd15f7f9c57",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 48.66,
      "commitsBetweenForRepo": 313,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n-        if (tagRE \u003d\u003d null) {\n+        if (tagRegExp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(commentValue);\n+            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRE \u003d\u003d null || tagFormatRE.matcher(content).find()) {\n+                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRegExp \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String commentValue \u003d comment[i];\n            final Matcher matcher \u003d tagRegExp.matcher(commentValue);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d commentValue.substring(contentStart);\n                if (tagFormatRegExp \u003d\u003d null || tagFormatRegExp.matcher(content).find()) {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n                else {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "88830ca708e2deb22cae333057ebddd15f7f9c57": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:56 PM",
      "commitName": "88830ca708e2deb22cae333057ebddd15f7f9c57",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "06/10/15 5:46 PM",
      "commitNameOld": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String commentValue \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d commentValue.substring(contentStart);\n-                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n+                if (tagFormatRE \u003d\u003d null || tagFormatRE.matcher(content).find()) {\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tag, content);\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String commentValue \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(commentValue);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d commentValue.substring(contentStart);\n                if (tagFormatRE \u003d\u003d null || tagFormatRE.matcher(content).find()) {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n                else {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "31/08/15 10:02 AM",
      "commitNameOld": "5ca96679525171c73fc4d5c257301f51d2100071",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 36.32,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     private void checkTag(int lineNo, String... comment) {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n-            final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(s);\n+            final String commentValue \u003d comment[i];\n+            final Matcher matcher \u003d tagRE.matcher(commentValue);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n-                final String content \u003d s.substring(contentStart);\n+                final String content \u003d commentValue.substring(contentStart);\n                 if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String commentValue \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(commentValue);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d commentValue.substring(contentStart);\n                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "755eda4d684e71ea18bed69646e07140310b67fc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Reduce number of parameters in method. #1555\n\nFixes `ParametersPerMethod` inspection violation.\n\nDescription:\n\u003eReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary. Methods whose signatures are inherited from library classes are ignored by this inspection.\n",
      "commitDate": "21/08/15 5:25 AM",
      "commitName": "755eda4d684e71ea18bed69646e07140310b67fc",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Reduce number of parameters in method. #1555\n\nFixes `ParametersPerMethod` inspection violation.\n\nDescription:\n\u003eReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary. Methods whose signatures are inherited from library classes are ignored by this inspection.\n",
          "commitDate": "21/08/15 5:25 AM",
          "commitName": "755eda4d684e71ea18bed69646e07140310b67fc",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "18/08/15 1:25 AM",
          "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 3.17,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,26 @@\n-    private void checkTag(\n-            int lineNo,\n-            String[] comment,\n-            String tagName,\n-            Pattern tagRegexp,\n-            Pattern formatRE,\n-            String format) {\n-        if (tagRegexp \u003d\u003d null) {\n+    private void checkTag(int lineNo, String... comment) {\n+        if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRegexp.matcher(s);\n+            final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n-                        format);\n+                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tagName, content);\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n-\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tagName);\n+            log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {
            "oldValue": "[lineNo-int, comment-String[], tagName-String, tagRegexp-Pattern, formatRE-Pattern, format-String]",
            "newValue": "[lineNo-int, comment-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Reduce number of parameters in method. #1555\n\nFixes `ParametersPerMethod` inspection violation.\n\nDescription:\n\u003eReports methods with too many parameters. Methods with too many parameters can be a good sign that refactoring is necessary. Methods whose signatures are inherited from library classes are ignored by this inspection.\n",
          "commitDate": "21/08/15 5:25 AM",
          "commitName": "755eda4d684e71ea18bed69646e07140310b67fc",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "18/08/15 1:25 AM",
          "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 3.17,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,26 @@\n-    private void checkTag(\n-            int lineNo,\n-            String[] comment,\n-            String tagName,\n-            Pattern tagRegexp,\n-            Pattern formatRE,\n-            String format) {\n-        if (tagRegexp \u003d\u003d null) {\n+    private void checkTag(int lineNo, String... comment) {\n+        if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRegexp.matcher(s);\n+            final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n-                        format);\n+                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tagName, content);\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n-\n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tagName);\n+            log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(int lineNo, String... comment) {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (tagFormatRE !\u003d null \u0026\u0026 !tagFormatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bd699bd593414d63c7139aa410f13ec8341a027": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1566: HiddenField violations fixed\n",
      "commitDate": "11/08/15 10:19 PM",
      "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #1566: HiddenField violations fixed\n",
          "commitDate": "11/08/15 10:19 PM",
          "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "11/08/15 5:18 AM",
          "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n-            String tag,\n-            Pattern tagRE,\n+            String tagName,\n+            Pattern tagRegexp,\n             Pattern formatRE,\n             String format) {\n-        if (tagRE \u003d\u003d null) {\n+        if (tagRegexp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(s);\n+            final Matcher matcher \u003d tagRegexp.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n                         format);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tag, content);\n+                    logTag(lineNo + i - comment.length, tagName, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tag);\n+            log(lineNo, MISSING_TAG, tagName);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tagName,\n            Pattern tagRegexp,\n            Pattern formatRE,\n            String format) {\n        if (tagRegexp \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRegexp.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tagName, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tagName);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {
            "oldValue": "[lineNo-int, comment-String[], tag-String, tagRE-Pattern, formatRE-Pattern, format-String]",
            "newValue": "[lineNo-int, comment-String[], tagName-String, tagRegexp-Pattern, formatRE-Pattern, format-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1566: HiddenField violations fixed\n",
          "commitDate": "11/08/15 10:19 PM",
          "commitName": "3bd699bd593414d63c7139aa410f13ec8341a027",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "11/08/15 5:18 AM",
          "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n-            String tag,\n-            Pattern tagRE,\n+            String tagName,\n+            Pattern tagRegexp,\n             Pattern formatRE,\n             String format) {\n-        if (tagRE \u003d\u003d null) {\n+        if (tagRegexp \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n-            final Matcher matcher \u003d tagRE.matcher(s);\n+            final Matcher matcher \u003d tagRegexp.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n                         format);\n                 }\n                 else {\n-                    logTag(lineNo + i - comment.length, tag, content);\n+                    logTag(lineNo + i - comment.length, tagName, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, MISSING_TAG, tag);\n+            log(lineNo, MISSING_TAG, tagName);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tagName,\n            Pattern tagRegexp,\n            Pattern formatRE,\n            String format) {\n        if (tagRegexp \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRegexp.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tagName, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tagName);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n             String tag,\n             Pattern tagRE,\n             Pattern formatRE,\n             String format)\n     {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n+                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n                     log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                         format);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tag,\n            Pattern tagRE,\n            Pattern formatRE,\n            String format)\n    {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (formatRE !\u003d null \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int lineNo,\n             String[] comment,\n             String tag,\n             Pattern tagRE,\n             Pattern formatRE,\n             String format)\n     {\n         if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c comment.length; i++) {\n             final String s \u003d comment[i];\n             final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n-                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n+                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                         format);\n                 }\n                 else {\n                     logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(lineNo, \"type.missingTag\", tag);\n+            log(lineNo, MISSING_TAG, tag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tag,\n            Pattern tagRE,\n            Pattern formatRE,\n            String format)\n    {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, TAG_FORMAT, tag,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, MISSING_TAG, tag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n-            int aLineNo,\n-            String[] aComment,\n-            String aTag,\n-            Pattern aTagRE,\n-            Pattern aFormatRE,\n-            String aFormat)\n+            int lineNo,\n+            String[] comment,\n+            String tag,\n+            Pattern tagRE,\n+            Pattern formatRE,\n+            String format)\n     {\n-        if (aTagRE \u003d\u003d null) {\n+        if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aComment.length; i++) {\n-            final String s \u003d aComment[i];\n-            final Matcher matcher \u003d aTagRE.matcher(s);\n+        for (int i \u003d 0; i \u003c comment.length; i++) {\n+            final String s \u003d comment[i];\n+            final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n-                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n-                        aFormat);\n+                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n+                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n+                        format);\n                 }\n                 else {\n-                    logTag(aLineNo + i - aComment.length, aTag, content);\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", aTag);\n+            log(lineNo, \"type.missingTag\", tag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tag,\n            Pattern tagRE,\n            Pattern formatRE,\n            String format)\n    {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, \"type.missingTag\", tag);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aComment-String[], aTag-String, aTagRE-Pattern, aFormatRE-Pattern, aFormat-String]",
            "newValue": "[lineNo-int, comment-String[], tag-String, tagRE-Pattern, formatRE-Pattern, format-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n-            int aLineNo,\n-            String[] aComment,\n-            String aTag,\n-            Pattern aTagRE,\n-            Pattern aFormatRE,\n-            String aFormat)\n+            int lineNo,\n+            String[] comment,\n+            String tag,\n+            Pattern tagRE,\n+            Pattern formatRE,\n+            String format)\n     {\n-        if (aTagRE \u003d\u003d null) {\n+        if (tagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aComment.length; i++) {\n-            final String s \u003d aComment[i];\n-            final Matcher matcher \u003d aTagRE.matcher(s);\n+        for (int i \u003d 0; i \u003c comment.length; i++) {\n+            final String s \u003d comment[i];\n+            final Matcher matcher \u003d tagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n-                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n-                        aFormat);\n+                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n+                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n+                        format);\n                 }\n                 else {\n-                    logTag(aLineNo + i - aComment.length, aTag, content);\n+                    logTag(lineNo + i - comment.length, tag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            log(aLineNo, \"type.missingTag\", aTag);\n+            log(lineNo, \"type.missingTag\", tag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int lineNo,\n            String[] comment,\n            String tag,\n            Pattern tagRE,\n            Pattern formatRE,\n            String format)\n    {\n        if (tagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c comment.length; i++) {\n            final String s \u003d comment[i];\n            final Matcher matcher \u003d tagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((formatRE !\u003d null) \u0026\u0026 !formatRE.matcher(content).find()) {\n                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,\n                        format);\n                }\n                else {\n                    logTag(lineNo + i - comment.length, tag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(lineNo, \"type.missingTag\", tag);\n        }\n\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aComment,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aComment.length; i++) {\n            final String s \u003d aComment[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aComment.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java"
      }
    },
    "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Adding omitIgnoredModules attribute to the checkstyle task (for WriteTag) and adding enum/annotation support to WriteTag\n",
      "commitDate": "27/03/08 4:18 AM",
      "commitName": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
      "commitAuthor": "Michael Studman",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Adding omitIgnoredModules attribute to the checkstyle task (for WriteTag) and adding enum/annotation support to WriteTag\n",
          "commitDate": "27/03/08 4:18 AM",
          "commitName": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
          "commitAuthor": "Michael Studman",
          "commitDateOld": "13/01/08 11:42 PM",
          "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 73.15,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n-            String[] aCmt,\n+            String[] aComment,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n-            final String s \u003d aCmt[i];\n+        for (int i \u003d 0; i \u003c aComment.length; i++) {\n+            final String s \u003d aComment[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n-                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n+                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n-                    logTag(aLineNo + i - aCmt.length, aTag, content);\n+                    logTag(aLineNo + i - aComment.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aComment,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aComment.length; i++) {\n            final String s \u003d aComment[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aComment.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {
            "oldValue": "[aLineNo-int, aCmt-String[], aTag-String, aTagRE-Pattern, aFormatRE-Pattern, aFormat-String]",
            "newValue": "[aLineNo-int, aComment-String[], aTag-String, aTagRE-Pattern, aFormatRE-Pattern, aFormat-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Adding omitIgnoredModules attribute to the checkstyle task (for WriteTag) and adding enum/annotation support to WriteTag\n",
          "commitDate": "27/03/08 4:18 AM",
          "commitName": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97",
          "commitAuthor": "Michael Studman",
          "commitDateOld": "13/01/08 11:42 PM",
          "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 73.15,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n-            String[] aCmt,\n+            String[] aComment,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n-        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n-            final String s \u003d aCmt[i];\n+        for (int i \u003d 0; i \u003c aComment.length; i++) {\n+            final String s \u003d aComment[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n-                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n+                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n-                    logTag(aLineNo + i - aCmt.length, aTag, content);\n+                    logTag(aLineNo + i - aComment.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aComment,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aComment.length; i++) {\n            final String s \u003d aComment[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aComment.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/12/05 4:35 AM",
      "commitNameOld": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 189.62,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n             String[] aCmt,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c aCmt.length; i++) {\n             final String s \u003d aCmt[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n-                if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n+                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                     log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n                     logTag(aLineNo + i - aCmt.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aCmt,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n            final String s \u003d aCmt[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if ((aFormatRE !\u003d null) \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aCmt.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "788b41973d5747c7b4699a853b62168cf0001df6": {
      "type": "Ybodychange",
      "commitMessage": "Changes to make it possible to identify a module by an id, and then to\nsuppress messages based on the id. The motivation is to allow for finer\ngrained suppressions. For example, can enable multiple instances of the\nRegexp check, and suppress on the individual instance.\n",
      "commitDate": "29/12/05 4:35 AM",
      "commitName": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "25/12/05 11:27 PM",
      "commitNameOld": "96c668724bc05a11ceb031dda71efe1e9e69480d",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n     private void checkTag(\n             int aLineNo,\n             String[] aCmt,\n             String aTag,\n             Pattern aTagRE,\n             Pattern aFormatRE,\n             String aFormat)\n     {\n         if (aTagRE \u003d\u003d null) {\n             return;\n         }\n \n         int tagCount \u003d 0;\n         for (int i \u003d 0; i \u003c aCmt.length; i++) {\n             final String s \u003d aCmt[i];\n             final Matcher matcher \u003d aTagRE.matcher(s);\n             if (matcher.find()) {\n                 tagCount +\u003d 1;\n                 final int contentStart \u003d matcher.start(1);\n                 final String content \u003d s.substring(contentStart);\n                 if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                     log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                         aFormat);\n                 }\n                 else {\n                     logTag(aLineNo + i - aCmt.length, aTag, content);\n                 }\n \n             }\n         }\n         if (tagCount \u003d\u003d 0) {\n-            Object[] args \u003d {aTag};\n             log(aLineNo, \"type.missingTag\", aTag);\n         }\n \n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aCmt,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n            final String s \u003d aCmt[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aCmt.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java",
      "extendedDetails": {}
    },
    "96c668724bc05a11ceb031dda71efe1e9e69480d": {
      "type": "Yintroduced",
      "commitMessage": "Added WriteTag check which outputs a JavaDoc tag as information (patch 902110). Thanks to Daniel Grenner (dgrenner) for contribution.\n",
      "commitDate": "25/12/05 11:27 PM",
      "commitName": "96c668724bc05a11ceb031dda71efe1e9e69480d",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,36 @@\n+    private void checkTag(\n+            int aLineNo,\n+            String[] aCmt,\n+            String aTag,\n+            Pattern aTagRE,\n+            Pattern aFormatRE,\n+            String aFormat)\n+    {\n+        if (aTagRE \u003d\u003d null) {\n+            return;\n+        }\n+\n+        int tagCount \u003d 0;\n+        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n+            final String s \u003d aCmt[i];\n+            final Matcher matcher \u003d aTagRE.matcher(s);\n+            if (matcher.find()) {\n+                tagCount +\u003d 1;\n+                final int contentStart \u003d matcher.start(1);\n+                final String content \u003d s.substring(contentStart);\n+                if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n+                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n+                        aFormat);\n+                }\n+                else {\n+                    logTag(aLineNo + i - aCmt.length, aTag, content);\n+                }\n+\n+            }\n+        }\n+        if (tagCount \u003d\u003d 0) {\n+            Object[] args \u003d {aTag};\n+            log(aLineNo, \"type.missingTag\", aTag);\n+        }\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkTag(\n            int aLineNo,\n            String[] aCmt,\n            String aTag,\n            Pattern aTagRE,\n            Pattern aFormatRE,\n            String aFormat)\n    {\n        if (aTagRE \u003d\u003d null) {\n            return;\n        }\n\n        int tagCount \u003d 0;\n        for (int i \u003d 0; i \u003c aCmt.length; i++) {\n            final String s \u003d aCmt[i];\n            final Matcher matcher \u003d aTagRE.matcher(s);\n            if (matcher.find()) {\n                tagCount +\u003d 1;\n                final int contentStart \u003d matcher.start(1);\n                final String content \u003d s.substring(contentStart);\n                if (aFormatRE !\u003d null \u0026\u0026 !aFormatRE.matcher(content).find()) {\n                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,\n                        aFormat);\n                }\n                else {\n                    logTag(aLineNo + i - aCmt.length, aTag, content);\n                }\n\n            }\n        }\n        if (tagCount \u003d\u003d 0) {\n            Object[] args \u003d {aTag};\n            log(aLineNo, \"type.missingTag\", aTag);\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java"
    }
  }
}