{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConstantNameCheck.java",
  "functionName": "mustCheckName",
  "functionId": "mustCheckName___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
  "functionStartLine": 135,
  "functionEndLine": 157,
  "numCommitsSeen": 71,
  "timeTaken": 2781,
  "changeHistory": [
    "d05e96f082e1a42c510b3dd21da82ef6316b088a",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "49a23751eb6bffdfba94d72454d7676c9f85adc5",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
    "373c90a1090537de5b8151c6088534a63744edb2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "2bf724effc3c43a43fbe254dd81985f618be8eee",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8",
    "6125beffc437f970eae276b4a6542265c6547784",
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c",
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1"
  ],
  "changeHistoryShort": {
    "d05e96f082e1a42c510b3dd21da82ef6316b088a": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "49a23751eb6bffdfba94d72454d7676c9f85adc5": "Ybodychange",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": "Ymultichange(Yparameterchange,Ybodychange)",
    "373c90a1090537de5b8151c6088534a63744edb2": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "2bf724effc3c43a43fbe254dd81985f618be8eee": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c": "Yfilerename",
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d05e96f082e1a42c510b3dd21da82ef6316b088a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for naming",
      "commitDate": "28/12/18 11:11 AM",
      "commitName": "d05e96f082e1a42c510b3dd21da82ef6316b088a",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 207.61,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n         final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n \n         if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtil.isInAnnotationBlock(ast)\n-                || ScopeUtil.isInInterfaceOrAnnotationBlock(ast)\n+                || ScopeUtil.isInInterfaceBlock(ast)\n                         \u0026\u0026 !ScopeUtil.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 returnValue \u003d true;\n             }\n         }\n \n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean returnValue \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n        final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n\n        if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtil.isInAnnotationBlock(ast)\n                || ScopeUtil.isInInterfaceBlock(ast)\n                        \u0026\u0026 !ScopeUtil.isInCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                returnValue \u003d true;\n            }\n        }\n\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "26/05/18 11:58 AM",
      "commitNameOld": "f2e7899bc8c1a231c4f493a9a1e6bfe66512b24d",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 8.4,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n         final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n \n         if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n-                || ScopeUtils.isInAnnotationBlock(ast)\n-                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n-                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n+                || ScopeUtil.isInAnnotationBlock(ast)\n+                || ScopeUtil.isInInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtil.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 returnValue \u003d true;\n             }\n         }\n \n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean returnValue \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n        final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n\n        if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtil.isInAnnotationBlock(ast)\n                || ScopeUtil.isInInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtil.isInCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                returnValue \u003d true;\n            }\n        }\n\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 271.52,
      "commitsBetweenForRepo": 1006,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n+        final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n+        final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n \n         if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.isInAnnotationBlock(ast)\n                 || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 returnValue \u003d true;\n             }\n         }\n \n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean returnValue \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n        final boolean isFinal \u003d modifiersAST.findFirstToken(TokenTypes.FINAL) !\u003d null;\n\n        if (isStatic \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtils.isInAnnotationBlock(ast)\n                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                returnValue \u003d true;\n            }\n        }\n\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "16/10/15 4:35 PM",
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 12:53 PM",
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 50.15,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n-        boolean retVal \u003d false;\n+        boolean returnValue \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.isInAnnotationBlock(ast)\n                 || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n-                retVal \u003d true;\n+                returnValue \u003d true;\n             }\n         }\n \n-        return retVal;\n+        return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean returnValue \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtils.isInAnnotationBlock(ast)\n                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                returnValue \u003d true;\n            }\n        }\n\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n-                || ScopeUtils.inAnnotationBlock(ast)\n-                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)) {\n+                || ScopeUtils.isInAnnotationBlock(ast)\n+                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtils.isInAnnotationBlock(ast)\n                || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.isInCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1288: \u0027ConstantNameCheck\u0027 refactored, UT coverage improved\n",
      "commitDate": "07/07/15 7:34 PM",
      "commitName": "2f4f40d7391668a9065fb4ae5df0cd5c5b32e05c",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 51.62,
      "commitsBetweenForRepo": 285,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n     protected final boolean mustCheckName(DetailAST ast) {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST !\u003d null\n-            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST !\u003d null\n-            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n+        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n+        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.inAnnotationBlock(ast)\n                 || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.inCodeBlock(ast)) {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-            if (nameAST !\u003d null\n-                \u0026\u0026 !\"serialVersionUID\".equals(nameAST.getText())\n+            if (!\"serialVersionUID\".equals(nameAST.getText())\n                 \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast) {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtils.inAnnotationBlock(ast)\n                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)) {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (!\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText())) {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "09/03/15 11:26 PM",
      "commitNameOld": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d (modifiersAST !\u003d null)\n+        final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d (modifiersAST !\u003d null)\n+        final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n+        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                 || ScopeUtils.inAnnotationBlock(ast)\n-                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n+                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast))\n         {\n             // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n-            if ((nameAST !\u003d null)\n-                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n-                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n+            if (nameAST !\u003d null\n+                \u0026\u0026 !\"serialVersionUID\".equals(nameAST.getText())\n+                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText()))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if (isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST)\n                || ScopeUtils.inAnnotationBlock(ast)\n                || ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast))\n        {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if (nameAST !\u003d null\n                \u0026\u0026 !\"serialVersionUID\".equals(nameAST.getText())\n                \u0026\u0026 !\"serialPersistentFields\".equals(nameAST.getText()))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "49a23751eb6bffdfba94d72454d7676c9f85adc5": {
      "type": "Ybodychange",
      "commitMessage": "Remove obsolete double spaces\n",
      "commitDate": "09/03/15 11:26 PM",
      "commitName": "49a23751eb6bffdfba94d72454d7676c9f85adc5",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                 || ScopeUtils.inAnnotationBlock(ast)\n                 || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                         \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n         {\n-            // Handle the serialVersionUID and serialPersistentFields  constants\n+            // Handle the serialVersionUID and serialPersistentFields constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST ast)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                || ScopeUtils.inAnnotationBlock(ast)\n                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n        {\n            // Handle the serialVersionUID and serialPersistentFields constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, naming, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, naming, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
          "commitAuthor": "alexkravin",
          "commitDateOld": "10/10/14 11:15 AM",
          "commitNameOld": "373c90a1090537de5b8151c6088534a63744edb2",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 100.84,
          "commitsBetweenForRepo": 299,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    protected final boolean mustCheckName(DetailAST aAST)\n+    protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n-            aAST.findFirstToken(TokenTypes.MODIFIERS);\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n-                || ScopeUtils.inAnnotationBlock(aAST)\n-                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(aAST)))\n+                || ScopeUtils.inAnnotationBlock(ast)\n+                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n-            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected final boolean mustCheckName(DetailAST ast)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                || ScopeUtils.inAnnotationBlock(ast)\n                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, naming, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
          "commitAuthor": "alexkravin",
          "commitDateOld": "10/10/14 11:15 AM",
          "commitNameOld": "373c90a1090537de5b8151c6088534a63744edb2",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 100.84,
          "commitsBetweenForRepo": 299,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    protected final boolean mustCheckName(DetailAST aAST)\n+    protected final boolean mustCheckName(DetailAST ast)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n-            aAST.findFirstToken(TokenTypes.MODIFIERS);\n+            ast.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n-                || ScopeUtils.inAnnotationBlock(aAST)\n-                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n-                        \u0026\u0026 !ScopeUtils.inCodeBlock(aAST)))\n+                || ScopeUtils.inAnnotationBlock(ast)\n+                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n-            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected final boolean mustCheckName(DetailAST ast)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            ast.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                || ScopeUtils.inAnnotationBlock(ast)\n                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(ast)))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d ast.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "373c90a1090537de5b8151c6088534a63744edb2": {
      "type": "Ybodychange",
      "commitMessage": "#282 fixed. Since Java 8 we can have methods body in interfaces.\n",
      "commitDate": "10/10/14 11:15 AM",
      "commitName": "373c90a1090537de5b8151c6088534a63744edb2",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 220.04,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+                || ScopeUtils.inAnnotationBlock(aAST)\n+                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n+                        \u0026\u0026 !ScopeUtils.inCodeBlock(aAST)))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n                || ScopeUtils.inAnnotationBlock(aAST)\n                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n                        \u0026\u0026 !ScopeUtils.inCodeBlock(aAST)))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java"
      }
    },
    "2bf724effc3c43a43fbe254dd81985f618be8eee": {
      "type": "Ybodychange",
      "commitMessage": "Enhanced the naming checks ConstantName, MemberName, MethodName and StaticVariableName to utilise the access control tuning features of AbstractAccessControlNameCheck. Thanks to Steve McKay for patch #2893581.\n",
      "commitDate": "11/12/09 8:10 PM",
      "commitName": "2bf724effc3c43a43fbe254dd81985f618be8eee",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 265.0,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST modifiersAST \u003d\n             aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal)\n+        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal \u0026\u0026 shouldCheckInScope(modifiersAST))\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n-        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiersAST \u003d\n+            aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST modifiersAST \u003d\n            aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n-        final boolean isStatic \u003d modifiersAST !\u003d null\n+        final boolean isStatic \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n-        final boolean isFinal \u003d modifiersAST !\u003d null\n+        final boolean isFinal \u003d (modifiersAST !\u003d null)\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n             // Handle the serialVersionUID and serialPersistentFields  constants\n             // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                 \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d (modifiersAST !\u003d null)\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "166157213b0889e2a9d95f46826bbd5eb42ab9e8": {
      "type": "Ybodychange",
      "commitMessage": "Now ConstantName check will skip serialPersistentFields (bugid 1097285)\n",
      "commitDate": "14/01/05 3:21 AM",
      "commitName": "166157213b0889e2a9d95f46826bbd5eb42ab9e8",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 5.02,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n         if ((isStatic  \u0026\u0026 isFinal)\n             || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n         {\n-            // Handle the serialVersionUID constant which is used for\n-            // Serialization. Cannot enforce rules on it. :-)\n+            // Handle the serialVersionUID and serialPersistentFields  constants\n+            // which are used for Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n-                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n+                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n+                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID and serialPersistentFields  constants\n            // which are used for Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))\n                \u0026\u0026 !(\"serialPersistentFields\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n     protected final boolean mustCheckName(DetailAST aAST)\n     {\n         boolean retVal \u003d false;\n \n         DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         final boolean isStatic \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n         final boolean isFinal \u003d modifiersAST !\u003d null\n             \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n \n-        if ((isStatic  \u0026\u0026 isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {\n+        if ((isStatic  \u0026\u0026 isFinal)\n+            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n+        {\n             // Handle the serialVersionUID constant which is used for\n             // Serialization. Cannot enforce rules on it. :-)\n             final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n             if ((nameAST !\u003d null)\n                 \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n             {\n                 retVal \u003d true;\n             }\n         }\n \n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal)\n            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))\n        {\n            // Handle the serialVersionUID constant which is used for\n            // Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {}
    },
    "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c": {
      "type": "Yfilerename",
      "commitMessage": "Moved the Naming checks to a sub-package. I had some\nspare time between meetings today.\n",
      "commitDate": "04/06/03 12:14 AM",
      "commitName": "d80cbf61042a3901b2f61de7ad4494ff93ea0e3c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/03 9:21 PM",
      "commitNameOld": "03ac7a087862456e949f377e2153c47d310ca61e",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {\n            // Handle the serialVersionUID constant which is used for\n            // Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText())))\n            {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java"
      }
    },
    "2a8aba9a54d2112b142a1b9e0c4e762e780155c1": {
      "type": "Yintroduced",
      "commitMessage": "Avoid duplicate matching and logging code by introding an abstract name check class.\npatch contributed by Rick Giles\n",
      "commitDate": "28/10/02 10:20 PM",
      "commitName": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,22 @@\n+    protected final boolean mustCheckName(DetailAST aAST)\n+    {\n+        boolean retVal \u003d false;\n+\n+        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final boolean isStatic \u003d modifiersAST !\u003d null\n+            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n+        final boolean isFinal \u003d modifiersAST !\u003d null\n+            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n+\n+        if ((isStatic  \u0026\u0026 isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {\n+            // Handle the serialVersionUID constant which is used for\n+            // Serialization. Cannot enforce rules on it. :-)\n+            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            if ((nameAST !\u003d null)\n+                    \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))) {\n+                retVal \u003d true;\n+            }\n+        }\n+\n+        return retVal;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected final boolean mustCheckName(DetailAST aAST)\n    {\n        boolean retVal \u003d false;\n\n        DetailAST modifiersAST \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        final boolean isStatic \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);\n        final boolean isFinal \u003d modifiersAST !\u003d null\n            \u0026\u0026 modifiersAST.branchContains(TokenTypes.FINAL);\n\n        if ((isStatic  \u0026\u0026 isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {\n            // Handle the serialVersionUID constant which is used for\n            // Serialization. Cannot enforce rules on it. :-)\n            final DetailAST nameAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            if ((nameAST !\u003d null)\n                    \u0026\u0026 !(\"serialVersionUID\".equals(nameAST.getText()))) {\n                retVal \u003d true;\n            }\n        }\n\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java"
    }
  }
}