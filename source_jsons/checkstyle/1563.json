{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringLiteralEqualityCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
  "functionStartLine": 102,
  "functionEndLine": 111,
  "numCommitsSeen": 48,
  "timeTaken": 1649,
  "changeHistory": [
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "1546ad654fa2cca3e2ddca04921b9a600109dc5a"
  ],
  "changeHistoryShort": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": "Ybodychange",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "1546ad654fa2cca3e2ddca04921b9a600109dc5a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": {
      "type": "Ybodychange",
      "commitMessage": "minor: remove unnecessary antlr classes from main code",
      "commitDate": "30/03/19 5:55 AM",
      "commitName": "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 73.97,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n     public void visitToken(DetailAST ast) {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n-        final AST firstChild \u003d ast.getFirstChild();\n-        final AST secondChild \u003d firstChild.getNextSibling();\n+        final DetailAST firstChild \u003d ast.getFirstChild();\n+        final DetailAST secondChild \u003d firstChild.getNextSibling();\n \n         if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                 || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n             log(ast, MSG_KEY, ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final DetailAST firstChild \u003d ast.getFirstChild();\n        final DetailAST secondChild \u003d firstChild.getNextSibling();\n\n        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n            log(ast, MSG_KEY, ast.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {}
    },
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,10 @@\n     public void visitToken(DetailAST ast) {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n         final AST firstChild \u003d ast.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n         if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                 || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n-            log(ast.getLineNo(), ast.getColumnNo(),\n-                    MSG_KEY, ast.getText());\n+            log(ast, MSG_KEY, ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d ast.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n            log(ast, MSG_KEY, ast.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     public void visitToken(DetailAST ast)\n     {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n         final AST firstChild \u003d ast.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n-        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n-                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n+        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n+                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n         {\n             log(ast.getLineNo(), ast.getColumnNo(),\n                     MSG_KEY, ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d ast.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n        {\n            log(ast.getLineNo(), ast.getColumnNo(),\n                    MSG_KEY, ast.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {}
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     public void visitToken(DetailAST ast)\n     {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n         final AST firstChild \u003d ast.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n         if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n         {\n             log(ast.getLineNo(), ast.getColumnNo(),\n-                    \"string.literal.equality\", ast.getText());\n+                    MSG_KEY, ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d ast.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(),\n                    MSG_KEY, ast.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n-        final AST firstChild \u003d aAST.getFirstChild();\n+        final AST firstChild \u003d ast.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n         if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n         {\n-            log(aAST.getLineNo(), aAST.getColumnNo(),\n-                    \"string.literal.equality\", aAST.getText());\n+            log(ast.getLineNo(), ast.getColumnNo(),\n+                    \"string.literal.equality\", ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d ast.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(),\n                    \"string.literal.equality\", ast.getText());\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n-        final AST firstChild \u003d aAST.getFirstChild();\n+        final AST firstChild \u003d ast.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n         if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                 || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n         {\n-            log(aAST.getLineNo(), aAST.getColumnNo(),\n-                    \"string.literal.equality\", aAST.getText());\n+            log(ast.getLineNo(), ast.getColumnNo(),\n+                    \"string.literal.equality\", ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d ast.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(),\n                    \"string.literal.equality\", ast.getText());\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d aAST.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                    \"string.literal.equality\", aAST.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java"
      }
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n         final AST firstChild \u003d aAST.getFirstChild();\n         final AST secondChild \u003d firstChild.getNextSibling();\n \n-        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n-                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n+        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n+                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo(),\n                     \"string.literal.equality\", aAST.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d aAST.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if ((firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n                || (secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                    \"string.literal.equality\", aAST.getText());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java",
      "extendedDetails": {}
    },
    "1546ad654fa2cca3e2ddca04921b9a600109dc5a": {
      "type": "Yintroduced",
      "commitMessage": "implementation for rfe #754835, detect string equality checking with \u003d\u003d\nstill have to do tests and docs\n",
      "commitDate": "24/06/03 12:40 PM",
      "commitName": "1546ad654fa2cca3e2ddca04921b9a600109dc5a",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,13 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n+        final AST firstChild \u003d aAST.getFirstChild();\n+        final AST secondChild \u003d firstChild.getNextSibling();\n+\n+        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n+                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n+        {\n+            log(aAST.getLineNo(), aAST.getColumnNo(),\n+                    \"string.literal.equality\", aAST.getText());\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // no need to check for nulls here, \u003d\u003d and !\u003d always have two children\n        final AST firstChild \u003d aAST.getFirstChild();\n        final AST secondChild \u003d firstChild.getNextSibling();\n\n        if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL\n                || secondChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL)\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(),\n                    \"string.literal.equality\", aAST.getText());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java"
    }
  }
}