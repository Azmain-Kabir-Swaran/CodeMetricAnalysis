{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MagicNumberCheck.java",
  "functionName": "isInHashCodeMethod",
  "functionId": "isInHashCodeMethod___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
  "functionStartLine": 441,
  "functionEndLine": 467,
  "numCommitsSeen": 98,
  "timeTaken": 2586,
  "changeHistory": [
    "bd45909e6345b2d3ef5c5472d35a3ad926a31eb9",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "7410a9f8bfa475e37d786271b6fcceb6a73a897f",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "73ec35d35bcf970c588278cb18300dfdf814a704",
    "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8"
  ],
  "changeHistoryShort": {
    "bd45909e6345b2d3ef5c5472d35a3ad926a31eb9": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "7410a9f8bfa475e37d786271b6fcceb6a73a897f": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "73ec35d35bcf970c588278cb18300dfdf814a704": "Ybodychange",
    "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd45909e6345b2d3ef5c5472d35a3ad926a31eb9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7487: refactor code to use DetailAST.hasChildren()\n",
      "commitDate": "26/01/20 5:04 AM",
      "commitName": "bd45909e6345b2d3ef5c5472d35a3ad926a31eb9",
      "commitAuthor": "pbludov",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 24.52,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private static boolean isInHashCodeMethod(DetailAST ast) {\n         boolean inHashCodeMethod \u003d false;\n \n         // if not in a code block, can\u0027t be in hashCode()\n         if (ScopeUtil.isInCodeBlock(ast)) {\n             // find the method definition AST\n             DetailAST methodDefAST \u003d ast.getParent();\n             while (methodDefAST !\u003d null\n                     \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n                 methodDefAST \u003d methodDefAST.getParent();\n             }\n \n             if (methodDefAST !\u003d null) {\n                 // Check for \u0027hashCode\u0027 name.\n                 final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n \n                 if (\"hashCode\".equals(identAST.getText())) {\n                     // Check for no arguments.\n                     final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n                     // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n                     // the method returns an \u0027int\u0027 and is public.\n-                    inHashCodeMethod \u003d paramAST.getChildCount() \u003d\u003d 0;\n+                    inHashCodeMethod \u003d !paramAST.hasChildren();\n                 }\n             }\n         }\n         return inHashCodeMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        boolean inHashCodeMethod \u003d false;\n\n        // if not in a code block, can\u0027t be in hashCode()\n        if (ScopeUtil.isInCodeBlock(ast)) {\n            // find the method definition AST\n            DetailAST methodDefAST \u003d ast.getParent();\n            while (methodDefAST !\u003d null\n                    \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n                methodDefAST \u003d methodDefAST.getParent();\n            }\n\n            if (methodDefAST !\u003d null) {\n                // Check for \u0027hashCode\u0027 name.\n                final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n\n                if (\"hashCode\".equals(identAST.getText())) {\n                    // Check for no arguments.\n                    final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n                    // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n                    // the method returns an \u0027int\u0027 and is public.\n                    inHashCodeMethod \u003d !paramAST.hasChildren();\n                }\n            }\n        }\n        return inHashCodeMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "17/05/18 4:44 PM",
      "commitNameOld": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 17.21,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private static boolean isInHashCodeMethod(DetailAST ast) {\n         boolean inHashCodeMethod \u003d false;\n \n         // if not in a code block, can\u0027t be in hashCode()\n-        if (ScopeUtils.isInCodeBlock(ast)) {\n+        if (ScopeUtil.isInCodeBlock(ast)) {\n             // find the method definition AST\n             DetailAST methodDefAST \u003d ast.getParent();\n             while (methodDefAST !\u003d null\n                     \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n                 methodDefAST \u003d methodDefAST.getParent();\n             }\n \n             if (methodDefAST !\u003d null) {\n                 // Check for \u0027hashCode\u0027 name.\n                 final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n \n                 if (\"hashCode\".equals(identAST.getText())) {\n                     // Check for no arguments.\n                     final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n                     // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n                     // the method returns an \u0027int\u0027 and is public.\n                     inHashCodeMethod \u003d paramAST.getChildCount() \u003d\u003d 0;\n                 }\n             }\n         }\n         return inHashCodeMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        boolean inHashCodeMethod \u003d false;\n\n        // if not in a code block, can\u0027t be in hashCode()\n        if (ScopeUtil.isInCodeBlock(ast)) {\n            // find the method definition AST\n            DetailAST methodDefAST \u003d ast.getParent();\n            while (methodDefAST !\u003d null\n                    \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n                methodDefAST \u003d methodDefAST.getParent();\n            }\n\n            if (methodDefAST !\u003d null) {\n                // Check for \u0027hashCode\u0027 name.\n                final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n\n                if (\"hashCode\".equals(identAST.getText())) {\n                    // Check for no arguments.\n                    final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n                    // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n                    // the method returns an \u0027int\u0027 and is public.\n                    inHashCodeMethod \u003d paramAST.getChildCount() \u003d\u003d 0;\n                }\n            }\n        }\n        return inHashCodeMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "7410a9f8bfa475e37d786271b6fcceb6a73a897f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for MagicNumberCheck\n",
      "commitDate": "27/08/15 10:53 PM",
      "commitName": "7410a9f8bfa475e37d786271b6fcceb6a73a897f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "27/08/15 12:53 PM",
      "commitNameOld": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.42,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,27 @@\n     private static boolean isInHashCodeMethod(DetailAST ast) {\n+        boolean inHashCodeMethod \u003d false;\n+\n         // if not in a code block, can\u0027t be in hashCode()\n-        if (!ScopeUtils.isInCodeBlock(ast)) {\n-            return false;\n-        }\n+        if (ScopeUtils.isInCodeBlock(ast)) {\n+            // find the method definition AST\n+            DetailAST methodDefAST \u003d ast.getParent();\n+            while (methodDefAST !\u003d null\n+                    \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+                methodDefAST \u003d methodDefAST.getParent();\n+            }\n \n-        // find the method definition AST\n-        DetailAST methodDefAST \u003d ast.getParent();\n-        while (methodDefAST !\u003d null\n-                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n-            methodDefAST \u003d methodDefAST.getParent();\n-        }\n+            if (methodDefAST !\u003d null) {\n+                // Check for \u0027hashCode\u0027 name.\n+                final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n \n-        if (methodDefAST \u003d\u003d null) {\n-            return false;\n+                if (\"hashCode\".equals(identAST.getText())) {\n+                    // Check for no arguments.\n+                    final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n+                    // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n+                    // the method returns an \u0027int\u0027 and is public.\n+                    inHashCodeMethod \u003d paramAST.getChildCount() \u003d\u003d 0;\n+                }\n+            }\n         }\n-\n-        // Check for \u0027hashCode\u0027 name.\n-        final DetailAST identAST \u003d\n-            methodDefAST.findFirstToken(TokenTypes.IDENT);\n-        if (!\"hashCode\".equals(identAST.getText())) {\n-            return false;\n-        }\n-\n-        // Check for no arguments.\n-        final DetailAST paramAST \u003d\n-            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n-        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n-        // the method returns an \u0027int\u0027 and is public.\n-        return paramAST.getChildCount() \u003d\u003d 0;\n+        return inHashCodeMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        boolean inHashCodeMethod \u003d false;\n\n        // if not in a code block, can\u0027t be in hashCode()\n        if (ScopeUtils.isInCodeBlock(ast)) {\n            // find the method definition AST\n            DetailAST methodDefAST \u003d ast.getParent();\n            while (methodDefAST !\u003d null\n                    \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n                methodDefAST \u003d methodDefAST.getParent();\n            }\n\n            if (methodDefAST !\u003d null) {\n                // Check for \u0027hashCode\u0027 name.\n                final DetailAST identAST \u003d methodDefAST.findFirstToken(TokenTypes.IDENT);\n\n                if (\"hashCode\".equals(identAST.getText())) {\n                    // Check for no arguments.\n                    final DetailAST paramAST \u003d methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n                    // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n                    // the method returns an \u0027int\u0027 and is public.\n                    inHashCodeMethod \u003d paramAST.getChildCount() \u003d\u003d 0;\n                }\n            }\n        }\n        return inHashCodeMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private static boolean isInHashCodeMethod(DetailAST ast) {\n         // if not in a code block, can\u0027t be in hashCode()\n-        if (!ScopeUtils.inCodeBlock(ast)) {\n+        if (!ScopeUtils.isInCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n         DetailAST methodDefAST \u003d ast.getParent();\n         while (methodDefAST !\u003d null\n                 \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (methodDefAST \u003d\u003d null) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n         return paramAST.getChildCount() \u003d\u003d 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.isInCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while (methodDefAST !\u003d null\n                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (methodDefAST \u003d\u003d null) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return paramAST.getChildCount() \u003d\u003d 0;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 10:23 PM",
      "commitNameOld": "186625600d7678f597f56aa6a83d4b0a89e1fe35",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private static boolean isInHashCodeMethod(DetailAST ast) {\n         // if not in a code block, can\u0027t be in hashCode()\n         if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n         DetailAST methodDefAST \u003d ast.getParent();\n-        while (null !\u003d methodDefAST\n-                \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()) {\n+        while (methodDefAST !\u003d null\n+                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n-        if (null \u003d\u003d methodDefAST) {\n+        if (methodDefAST \u003d\u003d null) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n-        return 0 \u003d\u003d paramAST.getChildCount();\n+        return paramAST.getChildCount() \u003d\u003d 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while (methodDefAST !\u003d null\n                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (methodDefAST \u003d\u003d null) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return paramAST.getChildCount() \u003d\u003d 0;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/07/15 7:40 PM",
      "commitNameOld": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 10.09,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-    private boolean isInHashCodeMethod(DetailAST ast) {\n+    private static boolean isInHashCodeMethod(DetailAST ast) {\n         // if not in a code block, can\u0027t be in hashCode()\n         if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n         DetailAST methodDefAST \u003d ast.getParent();\n         while (null !\u003d methodDefAST\n                 \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()) {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n         return 0 \u003d\u003d paramAST.getChildCount();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static boolean isInHashCodeMethod(DetailAST ast) {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while (null !\u003d methodDefAST\n                \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()) {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return 0 \u003d\u003d paramAST.getChildCount();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a": {
      "type": "Ybodychange",
      "commitMessage": "Update Maven PMD Plugin to 3.5. #1300\n",
      "commitDate": "07/07/15 7:40 PM",
      "commitName": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/06/15 12:29 AM",
      "commitNameOld": "b4cec8170a1d89159620b327a453ce13215d4eea",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 22.8,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n     private boolean isInHashCodeMethod(DetailAST ast) {\n         // if not in a code block, can\u0027t be in hashCode()\n         if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n         DetailAST methodDefAST \u003d ast.getParent();\n         while (null !\u003d methodDefAST\n                 \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()) {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n-        if (0 !\u003d paramAST.getChildCount()) {\n-            return false;\n-        }\n-\n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n-        return true;\n+        return 0 \u003d\u003d paramAST.getChildCount();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isInHashCodeMethod(DetailAST ast) {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while (null !\u003d methodDefAST\n                \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()) {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return 0 \u003d\u003d paramAST.getChildCount();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private boolean isInHashCodeMethod(DetailAST ast)\n     {\n         // if not in a code block, can\u0027t be in hashCode()\n         if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n         DetailAST methodDefAST \u003d ast.getParent();\n-        while ((null !\u003d methodDefAST)\n-                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n+        while (null !\u003d methodDefAST\n+                \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType())\n         {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         if (0 !\u003d paramAST.getChildCount()) {\n             return false;\n         }\n \n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n         return true;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isInHashCodeMethod(DetailAST ast)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while (null !\u003d methodDefAST\n                \u0026\u0026 TokenTypes.METHOD_DEF !\u003d methodDefAST.getType())\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (0 !\u003d paramAST.getChildCount()) {\n            return false;\n        }\n\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return true;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    private boolean isInHashCodeMethod(DetailAST aAST)\n+    private boolean isInHashCodeMethod(DetailAST ast)\n     {\n         // if not in a code block, can\u0027t be in hashCode()\n-        if (!ScopeUtils.inCodeBlock(aAST)) {\n+        if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n-        DetailAST methodDefAST \u003d aAST.getParent();\n+        DetailAST methodDefAST \u003d ast.getParent();\n         while ((null !\u003d methodDefAST)\n                 \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n         {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         if (0 !\u003d paramAST.getChildCount()) {\n             return false;\n         }\n \n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isInHashCodeMethod(DetailAST ast)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while ((null !\u003d methodDefAST)\n                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (0 !\u003d paramAST.getChildCount()) {\n            return false;\n        }\n\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return true;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    private boolean isInHashCodeMethod(DetailAST aAST)\n+    private boolean isInHashCodeMethod(DetailAST ast)\n     {\n         // if not in a code block, can\u0027t be in hashCode()\n-        if (!ScopeUtils.inCodeBlock(aAST)) {\n+        if (!ScopeUtils.inCodeBlock(ast)) {\n             return false;\n         }\n \n         // find the method definition AST\n-        DetailAST methodDefAST \u003d aAST.getParent();\n+        DetailAST methodDefAST \u003d ast.getParent();\n         while ((null !\u003d methodDefAST)\n                 \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n         {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n \n         if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n \n         // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n \n         // Check for no arguments.\n         final DetailAST paramAST \u003d\n             methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n         if (0 !\u003d paramAST.getChildCount()) {\n             return false;\n         }\n \n         // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n         // the method returns an \u0027int\u0027 and is public.\n         return true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isInHashCodeMethod(DetailAST ast)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(ast)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d ast.getParent();\n        while ((null !\u003d methodDefAST)\n                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (0 !\u003d paramAST.getChildCount()) {\n            return false;\n        }\n\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return true;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean isInHashCodeMethod(DetailAST aAST)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d aAST.getParent();\n        while ((null !\u003d methodDefAST)\n                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n\n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (0 !\u003d paramAST.getChildCount()) {\n            return false;\n        }\n\n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return true;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java"
      }
    },
    "73ec35d35bcf970c588278cb18300dfdf814a704": {
      "type": "Ybodychange",
      "commitMessage": "Fine tune the patch.\n",
      "commitDate": "04/10/10 12:09 AM",
      "commitName": "73ec35d35bcf970c588278cb18300dfdf814a704",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/10/10 11:51 PM",
      "commitNameOld": "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private boolean isInHashCodeMethod(DetailAST aAST)\n     {\n         // if not in a code block, can\u0027t be in hashCode()\n         if (!ScopeUtils.inCodeBlock(aAST)) {\n             return false;\n         }\n-\n+    \n         // find the method definition AST\n         DetailAST methodDefAST \u003d aAST.getParent();\n-        while (methodDefAST !\u003d null\n-                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF)\n+        while ((null !\u003d methodDefAST)\n+                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n         {\n             methodDefAST \u003d methodDefAST.getParent();\n         }\n-\n-        if (methodDefAST \u003d\u003d null) {\n+    \n+        if (null \u003d\u003d methodDefAST) {\n             return false;\n         }\n-\n-        // chech for \u0027hashCode\u0027 name\n+    \n+        // Check for \u0027hashCode\u0027 name.\n         final DetailAST identAST \u003d\n-                methodDefAST.findFirstToken(TokenTypes.IDENT);\n-        System.out.println(identAST);\n+            methodDefAST.findFirstToken(TokenTypes.IDENT);\n         if (!\"hashCode\".equals(identAST.getText())) {\n             return false;\n         }\n-\n-        // check for no arguments\n+    \n+        // Check for no arguments.\n         final DetailAST paramAST \u003d\n-                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n-        if (paramAST.getChildCount() !\u003d 0) {\n+            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n+        if (0 !\u003d paramAST.getChildCount()) {\n             return false;\n         }\n-\n-        // we are in a \u0027public int hashCode()\u0027 method!\n+    \n+        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n+        // the method returns an \u0027int\u0027 and is public.\n         return true;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isInHashCodeMethod(DetailAST aAST)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n    \n        // find the method definition AST\n        DetailAST methodDefAST \u003d aAST.getParent();\n        while ((null !\u003d methodDefAST)\n                \u0026\u0026 (TokenTypes.METHOD_DEF !\u003d methodDefAST.getType()))\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n    \n        if (null \u003d\u003d methodDefAST) {\n            return false;\n        }\n    \n        // Check for \u0027hashCode\u0027 name.\n        final DetailAST identAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.IDENT);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n    \n        // Check for no arguments.\n        final DetailAST paramAST \u003d\n            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (0 !\u003d paramAST.getChildCount()) {\n            return false;\n        }\n    \n        // we are in a \u0027public int hashCode()\u0027 method! The compiler will ensure\n        // the method returns an \u0027int\u0027 and is public.\n        return true;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java",
      "extendedDetails": {}
    },
    "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8": {
      "type": "Yintroduced",
      "commitMessage": "Apply the patch before making changes.\n",
      "commitDate": "03/10/10 11:51 PM",
      "commitName": "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,37 @@\n+    private boolean isInHashCodeMethod(DetailAST aAST)\n+    {\n+        // if not in a code block, can\u0027t be in hashCode()\n+        if (!ScopeUtils.inCodeBlock(aAST)) {\n+            return false;\n+        }\n+\n+        // find the method definition AST\n+        DetailAST methodDefAST \u003d aAST.getParent();\n+        while (methodDefAST !\u003d null\n+                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF)\n+        {\n+            methodDefAST \u003d methodDefAST.getParent();\n+        }\n+\n+        if (methodDefAST \u003d\u003d null) {\n+            return false;\n+        }\n+\n+        // chech for \u0027hashCode\u0027 name\n+        final DetailAST identAST \u003d\n+                methodDefAST.findFirstToken(TokenTypes.IDENT);\n+        System.out.println(identAST);\n+        if (!\"hashCode\".equals(identAST.getText())) {\n+            return false;\n+        }\n+\n+        // check for no arguments\n+        final DetailAST paramAST \u003d\n+                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n+        if (paramAST.getChildCount() !\u003d 0) {\n+            return false;\n+        }\n+\n+        // we are in a \u0027public int hashCode()\u0027 method!\n+        return true;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isInHashCodeMethod(DetailAST aAST)\n    {\n        // if not in a code block, can\u0027t be in hashCode()\n        if (!ScopeUtils.inCodeBlock(aAST)) {\n            return false;\n        }\n\n        // find the method definition AST\n        DetailAST methodDefAST \u003d aAST.getParent();\n        while (methodDefAST !\u003d null\n                \u0026\u0026 methodDefAST.getType() !\u003d TokenTypes.METHOD_DEF)\n        {\n            methodDefAST \u003d methodDefAST.getParent();\n        }\n\n        if (methodDefAST \u003d\u003d null) {\n            return false;\n        }\n\n        // chech for \u0027hashCode\u0027 name\n        final DetailAST identAST \u003d\n                methodDefAST.findFirstToken(TokenTypes.IDENT);\n        System.out.println(identAST);\n        if (!\"hashCode\".equals(identAST.getText())) {\n            return false;\n        }\n\n        // check for no arguments\n        final DetailAST paramAST \u003d\n                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);\n        if (paramAST.getChildCount() !\u003d 0) {\n            return false;\n        }\n\n        // we are in a \u0027public int hashCode()\u0027 method!\n        return true;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java"
    }
  }
}