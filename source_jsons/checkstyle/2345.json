{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FinalClassCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
  "functionStartLine": 90,
  "functionEndLine": 123,
  "numCommitsSeen": 74,
  "timeTaken": 2651,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "85749a05bec9fa31c1167c88a76da2cf36a9219b",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "88925a79c11f0b57744bae869a28959c70113e2a",
    "4d2e6647f9e8385749c382bcab5e64965a943178",
    "23a1b6253f6296c1a3888361953da47f2808ca3d",
    "989745bb60ddac3cea77749ad8dd46bd1ea46eed",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "08638b5f739d9929698860048c052da2d5f80209",
    "6125beffc437f970eae276b4a6542265c6547784",
    "5c3762cef2a69a10241801916a815f9066bca5f8",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1",
    "308d5b029474c35ccc39ae764c3e8ec916baa66b"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "85749a05bec9fa31c1167c88a76da2cf36a9219b": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "88925a79c11f0b57744bae869a28959c70113e2a": "Ybodychange",
    "4d2e6647f9e8385749c382bcab5e64965a943178": "Ybodychange",
    "23a1b6253f6296c1a3888361953da47f2808ca3d": "Ybodychange",
    "989745bb60ddac3cea77749ad8dd46bd1ea46eed": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "08638b5f739d9929698860048c052da2d5f80209": "Ybodychange",
    "6125beffc437f970eae276b4a6542265c6547784": "Ybodychange",
    "5c3762cef2a69a10241801916a815f9066bca5f8": "Ybodychange",
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": "Yfilerename",
    "308d5b029474c35ccc39ae764c3e8ec916baa66b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         switch (ast.getType()) {\n             case TokenTypes.PACKAGE_DEF:\n                 packageName \u003d extractQualifiedName(ast.getFirstChild().getNextSibling());\n                 break;\n \n             case TokenTypes.CLASS_DEF:\n                 registerNestedSubclassToOuterSuperClasses(ast);\n \n                 final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                 final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n \n                 final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                 classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n-                if (!ScopeUtils.isInEnumBlock(ast)) {\n+                if (!ScopeUtil.isInEnumBlock(ast)) {\n                     final ClassDesc desc \u003d classes.peek();\n                     if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n                         desc.registerNonPrivateCtor();\n                     }\n                     else {\n                         desc.registerPrivateCtor();\n                     }\n                 }\n                 break;\n \n             default:\n                 throw new IllegalStateException(ast.toString());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        switch (ast.getType()) {\n            case TokenTypes.PACKAGE_DEF:\n                packageName \u003d extractQualifiedName(ast.getFirstChild().getNextSibling());\n                break;\n\n            case TokenTypes.CLASS_DEF:\n                registerNestedSubclassToOuterSuperClasses(ast);\n\n                final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n\n                final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                break;\n\n            case TokenTypes.CTOR_DEF:\n                if (!ScopeUtil.isInEnumBlock(ast)) {\n                    final ClassDesc desc \u003d classes.peek();\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n                        desc.registerNonPrivateCtor();\n                    }\n                    else {\n                        desc.registerPrivateCtor();\n                    }\n                }\n                break;\n\n            default:\n                throw new IllegalStateException(ast.toString());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "85749a05bec9fa31c1167c88a76da2cf36a9219b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5706: fixed FinalClassCheck extracting qualified names",
      "commitDate": "10/04/18 7:15 PM",
      "commitName": "85749a05bec9fa31c1167c88a76da2cf36a9219b",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "746a9d69125211ff44af1cb37732e919368ba620",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 96.45,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         switch (ast.getType()) {\n             case TokenTypes.PACKAGE_DEF:\n-                packageName \u003d extractQualifiedName(ast);\n+                packageName \u003d extractQualifiedName(ast.getFirstChild().getNextSibling());\n                 break;\n \n             case TokenTypes.CLASS_DEF:\n                 registerNestedSubclassToOuterSuperClasses(ast);\n \n                 final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                 final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n \n                 final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                 classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (!ScopeUtils.isInEnumBlock(ast)) {\n                     final ClassDesc desc \u003d classes.peek();\n                     if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n                         desc.registerNonPrivateCtor();\n                     }\n                     else {\n                         desc.registerPrivateCtor();\n                     }\n                 }\n                 break;\n \n             default:\n                 throw new IllegalStateException(ast.toString());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        switch (ast.getType()) {\n            case TokenTypes.PACKAGE_DEF:\n                packageName \u003d extractQualifiedName(ast.getFirstChild().getNextSibling());\n                break;\n\n            case TokenTypes.CLASS_DEF:\n                registerNestedSubclassToOuterSuperClasses(ast);\n\n                final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n\n                final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                break;\n\n            case TokenTypes.CTOR_DEF:\n                if (!ScopeUtils.isInEnumBlock(ast)) {\n                    final ClassDesc desc \u003d classes.peek();\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n                        desc.registerNonPrivateCtor();\n                    }\n                    else {\n                        desc.registerPrivateCtor();\n                    }\n                }\n                break;\n\n            default:\n                throw new IllegalStateException(ast.toString());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "09/08/17 12:17 PM",
      "commitNameOld": "66cc9d43c9620678078d2716308ee61916227fcb",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 77.32,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         switch (ast.getType()) {\n \n             case TokenTypes.PACKAGE_DEF:\n                 packageName \u003d extractQualifiedName(ast);\n                 break;\n \n             case TokenTypes.CLASS_DEF:\n                 registerNestedSubclassToOuterSuperClasses(ast);\n \n-                final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n-                final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n+                final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n+                final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n \n                 final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                 classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                 break;\n \n             case TokenTypes.CTOR_DEF:\n                 if (!ScopeUtils.isInEnumBlock(ast)) {\n                     final ClassDesc desc \u003d classes.peek();\n-                    if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n-                        desc.registerPrivateCtor();\n+                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n+                        desc.registerNonPrivateCtor();\n                     }\n                     else {\n-                        desc.registerNonPrivateCtor();\n+                        desc.registerPrivateCtor();\n                     }\n                 }\n                 break;\n \n             default:\n                 throw new IllegalStateException(ast.toString());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        switch (ast.getType()) {\n\n            case TokenTypes.PACKAGE_DEF:\n                packageName \u003d extractQualifiedName(ast);\n                break;\n\n            case TokenTypes.CLASS_DEF:\n                registerNestedSubclassToOuterSuperClasses(ast);\n\n                final boolean isFinal \u003d modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null;\n                final boolean isAbstract \u003d modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n\n                final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                break;\n\n            case TokenTypes.CTOR_DEF:\n                if (!ScopeUtils.isInEnumBlock(ast)) {\n                    final ClassDesc desc \u003d classes.peek();\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null) {\n                        desc.registerNonPrivateCtor();\n                    }\n                    else {\n                        desc.registerPrivateCtor();\n                    }\n                }\n                break;\n\n            default:\n                throw new IllegalStateException(ast.toString());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "88925a79c11f0b57744bae869a28959c70113e2a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2822: Makes FinalClass doesnt recognise as final classes with nested subclasses\n",
      "commitDate": "12/02/16 8:14 PM",
      "commitName": "88925a79c11f0b57744bae869a28959c70113e2a",
      "commitAuthor": "liscju",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.59,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,35 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n-        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n-            final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n-            final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n-            classes.push(new ClassDesc(isFinal, isAbstract));\n-        }\n-        // ctors in enums don\u0027t matter\n-        else if (!ScopeUtils.isInEnumBlock(ast)) {\n-            final ClassDesc desc \u003d classes.peek();\n-            if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n-                desc.reportPrivateCtor();\n-            }\n-            else {\n-                desc.reportNonPrivateCtor();\n-            }\n+        switch (ast.getType()) {\n+\n+            case TokenTypes.PACKAGE_DEF:\n+                packageName \u003d extractQualifiedName(ast);\n+                break;\n+\n+            case TokenTypes.CLASS_DEF:\n+                registerNestedSubclassToOuterSuperClasses(ast);\n+\n+                final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n+                final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n+\n+                final String qualifiedClassName \u003d getQualifiedClassName(ast);\n+                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n+                break;\n+\n+            case TokenTypes.CTOR_DEF:\n+                if (!ScopeUtils.isInEnumBlock(ast)) {\n+                    final ClassDesc desc \u003d classes.peek();\n+                    if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n+                        desc.registerPrivateCtor();\n+                    }\n+                    else {\n+                        desc.registerNonPrivateCtor();\n+                    }\n+                }\n+                break;\n+\n+            default:\n+                throw new IllegalStateException(ast.toString());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        switch (ast.getType()) {\n\n            case TokenTypes.PACKAGE_DEF:\n                packageName \u003d extractQualifiedName(ast);\n                break;\n\n            case TokenTypes.CLASS_DEF:\n                registerNestedSubclassToOuterSuperClasses(ast);\n\n                final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n                final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n\n                final String qualifiedClassName \u003d getQualifiedClassName(ast);\n                classes.push(new ClassDesc(qualifiedClassName, isFinal, isAbstract));\n                break;\n\n            case TokenTypes.CTOR_DEF:\n                if (!ScopeUtils.isInEnumBlock(ast)) {\n                    final ClassDesc desc \u003d classes.peek();\n                    if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                        desc.registerPrivateCtor();\n                    }\n                    else {\n                        desc.registerNonPrivateCtor();\n                    }\n                }\n                break;\n\n            default:\n                throw new IllegalStateException(ast.toString());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "4d2e6647f9e8385749c382bcab5e64965a943178": {
      "type": "Ybodychange",
      "commitMessage": "Rename boolean methods to start with question word. #1555\n\nFixes `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "27/08/15 12:53 PM",
      "commitName": "4d2e6647f9e8385749c382bcab5e64965a943178",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n             classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n         // ctors in enums don\u0027t matter\n-        else if (!ScopeUtils.inEnumBlock(ast)) {\n+        else if (!ScopeUtils.isInEnumBlock(ast)) {\n             final ClassDesc desc \u003d classes.peek();\n             if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        // ctors in enums don\u0027t matter\n        else if (!ScopeUtils.isInEnumBlock(ast)) {\n            final ClassDesc desc \u003d classes.peek();\n            if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "23a1b6253f6296c1a3888361953da47f2808ca3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fix for \u0027Don\u0027t use trailing comments\u0027 (partial)\n",
      "commitDate": "21/08/15 5:05 AM",
      "commitName": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n             classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n-        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n+        // ctors in enums don\u0027t matter\n+        else if (!ScopeUtils.inEnumBlock(ast)) {\n             final ClassDesc desc \u003d classes.peek();\n             if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        // ctors in enums don\u0027t matter\n        else if (!ScopeUtils.inEnumBlock(ast)) {\n            final ClassDesc desc \u003d classes.peek();\n            if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "989745bb60ddac3cea77749ad8dd46bd1ea46eed": {
      "type": "Ybodychange",
      "commitMessage": "remove dead code from FinalClassCheck, #1100",
      "commitDate": "18/05/15 5:10 PM",
      "commitName": "989745bb60ddac3cea77749ad8dd46bd1ea46eed",
      "commitAuthor": "vlad",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n-            final boolean isFinal \u003d modifiers !\u003d null\n-                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n-            final boolean isAbstract \u003d modifiers !\u003d null\n-                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n+            final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n+            final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n             classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n         else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n             final ClassDesc desc \u003d classes.peek();\n-            if (modifiers !\u003d null\n-                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n+            if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d classes.peek();\n            if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)) {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "e912c46b5bb5c085323930bd1e500b180c1bea8d",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n-            final boolean isFinal \u003d (modifiers !\u003d null)\n+            final boolean isFinal \u003d modifiers !\u003d null\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n-            final boolean isAbstract \u003d (modifiers !\u003d null)\n+            final boolean isAbstract \u003d modifiers !\u003d null\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n             classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n         else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n             final ClassDesc desc \u003d classes.peek();\n-            if ((modifiers !\u003d null)\n+            if (modifiers !\u003d null\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d modifiers !\u003d null\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d modifiers !\u003d null\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d classes.peek();\n            if (modifiers !\u003d null\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, design, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 461,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n-        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n-            mClasses.push(new ClassDesc(isFinal, isAbstract));\n+            classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n-        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n-            final ClassDesc desc \u003d mClasses.peek();\n+        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n+            final ClassDesc desc \u003d classes.peek();\n             if ((modifiers !\u003d null)\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d classes.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, design, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 461,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n \n-        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n+        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n-            mClasses.push(new ClassDesc(isFinal, isAbstract));\n+            classes.push(new ClassDesc(isFinal, isAbstract));\n         }\n-        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n-            final ClassDesc desc \u003d mClasses.peek();\n+        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n+            final ClassDesc desc \u003d classes.peek();\n             if ((modifiers !\u003d null)\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (ast.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            classes.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d classes.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            mClasses.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java"
      }
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 10:36 PM",
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.66,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n             mClasses.push(new ClassDesc(isFinal, isAbstract));\n         }\n         else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n-            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n+            final ClassDesc desc \u003d mClasses.peek();\n             if ((modifiers !\u003d null)\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            mClasses.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "6125beffc437f970eae276b4a6542265c6547784": {
      "type": "Ybodychange",
      "commitMessage": "Initial Java 1.5 support\n",
      "commitDate": "27/09/04 11:55 AM",
      "commitName": "6125beffc437f970eae276b4a6542265c6547784",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 256.91,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n             final boolean isFinal \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n             final boolean isAbstract \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n             mClasses.push(new ClassDesc(isFinal, isAbstract));\n         }\n-        else {\n+        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n             final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n             if ((modifiers !\u003d null)\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            mClasses.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don\u0027t matter\n            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "5c3762cef2a69a10241801916a815f9066bca5f8": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 837012, false alarms for abstract classes\n",
      "commitDate": "08/11/03 4:29 AM",
      "commitName": "5c3762cef2a69a10241801916a815f9066bca5f8",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "09/06/03 12:48 AM",
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 152.2,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n \n         if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n-            final boolean isFinal \u003d\n-                (modifiers !\u003d null)\n+            final boolean isFinal \u003d (modifiers !\u003d null)\n                     \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n-            mClasses.push(new ClassDesc(isFinal));\n+            final boolean isAbstract \u003d (modifiers !\u003d null)\n+                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n+            mClasses.push(new ClassDesc(isFinal, isAbstract));\n         }\n         else {\n             final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n             if ((modifiers !\u003d null)\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n             {\n                 desc.reportPrivateCtor();\n             }\n             else {\n                 desc.reportNonPrivateCtor();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            final boolean isAbstract \u003d (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.ABSTRACT);\n            mClasses.push(new ClassDesc(isFinal, isAbstract));\n        }\n        else {\n            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {}
    },
    "32d19d680144540a83c5dde5588f5a7ac302f8e1": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Design checks\n",
      "commitDate": "04/06/03 4:52 PM",
      "commitName": "32d19d680144540a83c5dde5588f5a7ac302f8e1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 9:08 AM",
      "commitNameOld": "679f818267161d9501a73ffdcc0d991537233633",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d\n                (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            mClasses.push(new ClassDesc(isFinal));\n        }\n        else {\n            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FinalClassCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java"
      }
    },
    "308d5b029474c35ccc39ae764c3e8ec916baa66b": {
      "type": "Yintroduced",
      "commitMessage": "Patch from Oleg Sukhodolsky to add FinalCheck to check that classes are\ndeclared final if they only contain private constructors (request 696290).\n\nQuite like the use of the visit/leave token methods.\n",
      "commitDate": "18/04/03 1:37 AM",
      "commitName": "308d5b029474c35ccc39ae764c3e8ec916baa66b",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,22 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+\n+        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n+            final boolean isFinal \u003d\n+                (modifiers !\u003d null)\n+                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n+            mClasses.push(new ClassDesc(isFinal));\n+        }\n+        else {\n+            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n+            if ((modifiers !\u003d null)\n+                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n+            {\n+                desc.reportPrivateCtor();\n+            }\n+            else {\n+                desc.reportNonPrivateCtor();\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n\n        if (aAST.getType() \u003d\u003d TokenTypes.CLASS_DEF) {\n            final boolean isFinal \u003d\n                (modifiers !\u003d null)\n                    \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL);\n            mClasses.push(new ClassDesc(isFinal));\n        }\n        else {\n            final ClassDesc desc \u003d (ClassDesc) mClasses.peek();\n            if ((modifiers !\u003d null)\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PRIVATE))\n            {\n                desc.reportPrivateCtor();\n            }\n            else {\n                desc.reportNonPrivateCtor();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FinalClassCheck.java"
    }
  }
}