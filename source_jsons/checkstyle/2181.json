{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbbreviationAsWordInNameCheck.java",
  "functionName": "isIgnoreSituation",
  "functionId": "isIgnoreSituation___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
  "functionStartLine": 441,
  "functionEndLine": 461,
  "numCommitsSeen": 61,
  "timeTaken": 1975,
  "changeHistory": [
    "e73b827248212018a7ca5591053774056f94675e",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
    "7c5f94aafd422312a6c19a36f53796d547788827",
    "0ceec1502926f96f81534cf84cf3d50536f17db1"
  ],
  "changeHistoryShort": {
    "e73b827248212018a7ca5591053774056f94675e": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": "Ymultichange(Yparameterchange,Ybodychange)",
    "7c5f94aafd422312a6c19a36f53796d547788827": "Yfilerename",
    "0ceec1502926f96f81534cf84cf3d50536f17db1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e73b827248212018a7ca5591053774056f94675e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6582: static final option for AbbreviationAsWordInName\n",
      "commitDate": "18/04/20 12:33 PM",
      "commitName": "e73b827248212018a7ca5591053774056f94675e",
      "commitAuthor": "wltan",
      "commitDateOld": "16/04/20 6:39 AM",
      "commitNameOld": "2e8c277c181487d81231170ff4b959edc008114e",
      "commitAuthorOld": "Joseph Mate",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,21 @@\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         final boolean result;\n         if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n-            if ((ignoreFinal || ignoreStatic)\n-                    \u0026\u0026 isInterfaceDeclaration(ast)) {\n+            if (isInterfaceDeclaration(ast)) {\n                 // field declarations in interface are static/final\n-                result \u003d true;\n+                result \u003d ignoreStaticFinal;\n             }\n             else {\n-                result \u003d ignoreFinal\n-                          \u0026\u0026 modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null\n-                    || ignoreStatic\n-                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n+                result \u003d hasIgnoredModifiers(modifiers);\n             }\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         else {\n             result \u003d CheckUtil.isReceiverParameter(ast);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        final boolean result;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if (isInterfaceDeclaration(ast)) {\n                // field declarations in interface are static/final\n                result \u003d ignoreStaticFinal;\n            }\n            else {\n                result \u003d hasIgnoredModifiers(modifiers);\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        else {\n            result \u003d CheckUtil.isReceiverParameter(ast);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "09/05/18 4:11 AM",
      "commitNameOld": "aec05963347ec78012e086c4de60a2ac4bbe6c2c",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 25.73,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         final boolean result;\n         if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n             if ((ignoreFinal || ignoreStatic)\n                     \u0026\u0026 isInterfaceDeclaration(ast)) {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n                 result \u003d ignoreFinal\n                           \u0026\u0026 modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null\n                     || ignoreStatic\n                         \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n             }\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         else {\n-            result \u003d CheckUtils.isReceiverParameter(ast);\n+            result \u003d CheckUtil.isReceiverParameter(ast);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        final boolean result;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast)) {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d ignoreFinal\n                          \u0026\u0026 modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null\n                    || ignoreStatic\n                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        else {\n            result \u003d CheckUtil.isReceiverParameter(ast);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "19/07/17 5:49 PM",
      "commitNameOld": "412882d6c28fab5a7077a81bdd2ac01c275673c9",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 98.09,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         final boolean result;\n         if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n             if ((ignoreFinal || ignoreStatic)\n                     \u0026\u0026 isInterfaceDeclaration(ast)) {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n                 result \u003d ignoreFinal\n-                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n+                          \u0026\u0026 modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null\n                     || ignoreStatic\n-                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n+                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n             }\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         else {\n             result \u003d CheckUtils.isReceiverParameter(ast);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        final boolean result;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast)) {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d ignoreFinal\n                          \u0026\u0026 modifiers.findFirstToken(TokenTypes.FINAL) !\u003d null\n                    || ignoreStatic\n                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        else {\n            result \u003d CheckUtils.isReceiverParameter(ast);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {}
    },
    "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3239: fixed checks that fail on new receiver parameter (#3272)\n\n",
      "commitDate": "16/06/16 2:33 PM",
      "commitName": "40a0b5dcf7f9b45ae98ddcb1dec6e9e7c4eec676",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/05/16 6:27 AM",
      "commitNameOld": "48d32f40d2253fc94792a8841ce604ba1b91255c",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 20.34,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n     private boolean isIgnoreSituation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n-        boolean result \u003d false;\n+        final boolean result;\n         if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n             if ((ignoreFinal || ignoreStatic)\n                     \u0026\u0026 isInterfaceDeclaration(ast)) {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n                 result \u003d ignoreFinal\n                           \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                     || ignoreStatic\n                         \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n             }\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             result \u003d ignoreOverriddenMethods\n                     \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n+        else {\n+            result \u003d CheckUtils.isReceiverParameter(ast);\n+        }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        final boolean result;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast)) {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d ignoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                    || ignoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        else {\n            result \u003d CheckUtils.isReceiverParameter(ast);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     private boolean isIgnoreSituation(DetailAST ast)\n     {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n \n         boolean result \u003d false;\n         if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n             if ((ignoreFinal || ignoreStatic)\n                     \u0026\u0026 isInterfaceDeclaration(ast))\n             {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n-                result \u003d (ignoreFinal\n-                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n-                    || (ignoreStatic\n-                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n+                result \u003d ignoreFinal\n+                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n+                    || ignoreStatic\n+                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n             }\n         }\n         else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             result \u003d ignoreOverriddenMethods\n                     \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        boolean result \u003d false;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast))\n            {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d ignoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL)\n                    || ignoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {}
    },
    "750b733bd124eaea34d4692a1bb8d0fd0fe90976": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, naming, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, naming, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:31 PM",
          "commitNameOld": "0e04e5088cb8a9212df8e1c15d774835196ce1b0",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.33,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private boolean isIgnoreSituation(DetailAST aAst)\n+    private boolean isIgnoreSituation(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAst.getFirstChild();\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n \n         boolean result \u003d false;\n-        if (aAst.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n-            if ((mIgnoreFinal || mIgnoreStatic)\n-                    \u0026\u0026 isInterfaceDeclaration(aAst))\n+        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n+            if ((ignoreFinal || ignoreStatic)\n+                    \u0026\u0026 isInterfaceDeclaration(ast))\n             {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n-                result \u003d (mIgnoreFinal\n+                result \u003d (ignoreFinal\n                           \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n-                    || (mIgnoreStatic\n+                    || (ignoreStatic\n                         \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n             }\n         }\n-        else if (aAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n-            result \u003d mIgnoreOverriddenMethods\n+        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n+            result \u003d ignoreOverriddenMethods\n                     \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isIgnoreSituation(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        boolean result \u003d false;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast))\n            {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d (ignoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                    || (ignoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
          "extendedDetails": {
            "oldValue": "[aAst-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, naming, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "750b733bd124eaea34d4692a1bb8d0fd0fe90976",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:31 PM",
          "commitNameOld": "0e04e5088cb8a9212df8e1c15d774835196ce1b0",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.33,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    private boolean isIgnoreSituation(DetailAST aAst)\n+    private boolean isIgnoreSituation(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAst.getFirstChild();\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n \n         boolean result \u003d false;\n-        if (aAst.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n-            if ((mIgnoreFinal || mIgnoreStatic)\n-                    \u0026\u0026 isInterfaceDeclaration(aAst))\n+        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n+            if ((ignoreFinal || ignoreStatic)\n+                    \u0026\u0026 isInterfaceDeclaration(ast))\n             {\n                 // field declarations in interface are static/final\n                 result \u003d true;\n             }\n             else {\n-                result \u003d (mIgnoreFinal\n+                result \u003d (ignoreFinal\n                           \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n-                    || (mIgnoreStatic\n+                    || (ignoreStatic\n                         \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n             }\n         }\n-        else if (aAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n-            result \u003d mIgnoreOverriddenMethods\n+        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n+            result \u003d ignoreOverriddenMethods\n                     \u0026\u0026 hasOverrideAnnotation(modifiers);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean isIgnoreSituation(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n\n        boolean result \u003d false;\n        if (ast.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((ignoreFinal || ignoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(ast))\n            {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d (ignoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                    || (ignoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n            }\n        }\n        else if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d ignoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "7c5f94aafd422312a6c19a36f53796d547788827": {
      "type": "Yfilerename",
      "commitMessage": "AbbreviationAsAWordInName moved to naming package , documentation was rewritten, mTarget was removed from Check (fix after non problematic rebase)\n",
      "commitDate": "02/08/14 12:42 PM",
      "commitName": "7c5f94aafd422312a6c19a36f53796d547788827",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "02/08/14 10:54 AM",
      "commitNameOld": "9c9ba5466dd13f5da92e350772994f896a6e5cdf",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST aAst)\n    {\n        final DetailAST modifiers \u003d aAst.getFirstChild();\n\n        boolean result \u003d false;\n        if (aAst.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((mIgnoreFinal || mIgnoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(aAst))\n            {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d (mIgnoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                    || (mIgnoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n            }\n        }\n        else if (aAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d mIgnoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbbreviationAsWordInNameCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java"
      }
    },
    "0ceec1502926f96f81534cf84cf3d50536f17db1": {
      "type": "Yintroduced",
      "commitMessage": "AbbreviationAsWordInName. #212\n",
      "commitDate": "02/08/14 10:54 AM",
      "commitName": "0ceec1502926f96f81534cf84cf3d50536f17db1",
      "commitAuthor": "Max",
      "diff": "@@ -0,0 +1,25 @@\n+    private boolean isIgnoreSituation(DetailAST aAst)\n+    {\n+        final DetailAST modifiers \u003d aAst.getFirstChild();\n+\n+        boolean result \u003d false;\n+        if (aAst.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n+            if ((mIgnoreFinal || mIgnoreStatic)\n+                    \u0026\u0026 isInterfaceDeclaration(aAst))\n+            {\n+                // field declarations in interface are static/final\n+                result \u003d true;\n+            }\n+            else {\n+                result \u003d (mIgnoreFinal\n+                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n+                    || (mIgnoreStatic\n+                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n+            }\n+        }\n+        else if (aAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n+            result \u003d mIgnoreOverriddenMethods\n+                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n+        }\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isIgnoreSituation(DetailAST aAst)\n    {\n        final DetailAST modifiers \u003d aAst.getFirstChild();\n\n        boolean result \u003d false;\n        if (aAst.getType() \u003d\u003d TokenTypes.VARIABLE_DEF) {\n            if ((mIgnoreFinal || mIgnoreStatic)\n                    \u0026\u0026 isInterfaceDeclaration(aAst))\n            {\n                // field declarations in interface are static/final\n                result \u003d true;\n            }\n            else {\n                result \u003d (mIgnoreFinal\n                          \u0026\u0026 modifiers.branchContains(TokenTypes.FINAL))\n                    || (mIgnoreStatic\n                        \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_STATIC));\n            }\n        }\n        else if (aAst.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            result \u003d mIgnoreOverriddenMethods\n                    \u0026\u0026 hasOverrideAnnotation(modifiers);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbbreviationAsWordInNameCheck.java"
    }
  }
}