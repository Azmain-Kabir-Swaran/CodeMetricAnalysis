{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocTypeCheck.java",
  "functionName": "checkUnusedTypeParamTags",
  "functionId": "checkUnusedTypeParamTags___tags-List__JavadocTag__(modifiers-final)__typeParamNames-List__String__(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
  "functionStartLine": 459,
  "functionEndLine": 475,
  "numCommitsSeen": 150,
  "timeTaken": 3406,
  "changeHistory": [
    "8e55060b9135e6e4729f8262e6a3041e8fc79fc6",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "319b04ff74aaf0c08b9c417274872be47b93b346",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "365ff682dba7da5132da20174a09f5d74d2498ee",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "79404974eff1458f4243f8acd6a08b6a8b869342",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "c18071b7561b99767e871be9d4d7711eb15b76f1",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05"
  ],
  "changeHistoryShort": {
    "8e55060b9135e6e4729f8262e6a3041e8fc79fc6": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "319b04ff74aaf0c08b9c417274872be47b93b346": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Ybodychange",
    "365ff682dba7da5132da20174a09f5d74d2498ee": "Ybodychange",
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "79404974eff1458f4243f8acd6a08b6a8b869342": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yparameterchange,Ybodychange)",
    "c18071b7561b99767e871be9d4d7711eb15b76f1": "Yparameterchange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3": "Ybodychange",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": "Ybodychange",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e55060b9135e6e4729f8262e6a3041e8fc79fc6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2811: Makes JavadocTypeCheck recognise param names without brackets\n",
      "commitDate": "09/02/16 7:22 AM",
      "commitName": "8e55060b9135e6e4729f8262e6a3041e8fc79fc6",
      "commitAuthor": "liscju",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 4.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n-        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n-                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n-                if (matcher.find()) {\n-                    final String typeParamName \u003d matcher.group(1).trim();\n-                    if (!typeParamNames.contains(typeParamName)) {\n-                        log(tag.getLineNo(), tag.getColumnNo(),\n+                final String typeParamName \u003d extractTypeParamNameFromTag(tag);\n+\n+                if (!typeParamNames.contains(typeParamName)) {\n+                    log(tag.getLineNo(), tag.getColumnNo(),\n                             MSG_UNUSED_TAG,\n                             JavadocTagInfo.PARAM.getText(),\n                             OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n-                    }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final String typeParamName \u003d extractTypeParamNameFromTag(tag);\n\n                if (!typeParamNames.contains(typeParamName)) {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                            MSG_UNUSED_TAG,\n                            JavadocTagInfo.PARAM.getText(),\n                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n         final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                 if (matcher.find()) {\n                     final String typeParamName \u003d matcher.group(1).trim();\n                     if (!typeParamNames.contains(typeParamName)) {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n-                            UNUSED_TAG,\n+                            MSG_UNUSED_TAG,\n                             JavadocTagInfo.PARAM.getText(),\n                             OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                     }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                if (matcher.find()) {\n                    final String typeParamName \u003d matcher.group(1).trim();\n                    if (!typeParamNames.contains(typeParamName)) {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            MSG_UNUSED_TAG,\n                            JavadocTagInfo.PARAM.getText(),\n                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "319b04ff74aaf0c08b9c417274872be47b93b346": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2112: Fix IllegalStateException in JavadocTypeCheck",
      "commitDate": "15/09/15 9:14 AM",
      "commitName": "319b04ff74aaf0c08b9c417274872be47b93b346",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "31/08/15 10:02 AM",
      "commitNameOld": "5ca96679525171c73fc4d5c257301f51d2100071",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 14.97,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n         final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n-                matcher.find();\n-                final String typeParamName \u003d matcher.group(1).trim();\n-                if (!typeParamNames.contains(typeParamName)) {\n-                    log(tag.getLineNo(), tag.getColumnNo(),\n-                        UNUSED_TAG,\n-                        JavadocTagInfo.PARAM.getText(),\n-                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n+                if (matcher.find()) {\n+                    final String typeParamName \u003d matcher.group(1).trim();\n+                    if (!typeParamNames.contains(typeParamName)) {\n+                        log(tag.getLineNo(), tag.getColumnNo(),\n+                            UNUSED_TAG,\n+                            JavadocTagInfo.PARAM.getText(),\n+                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n+                    }\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                if (matcher.find()) {\n                    final String typeParamName \u003d matcher.group(1).trim();\n                    if (!typeParamNames.contains(typeParamName)) {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            UNUSED_TAG,\n                            JavadocTagInfo.PARAM.getText(),\n                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                    }\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": "25/08/15 4:00 PM",
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.82,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n         final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                 matcher.find();\n                 final String typeParamName \u003d matcher.group(1).trim();\n                 if (!typeParamNames.contains(typeParamName)) {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         UNUSED_TAG,\n                         JavadocTagInfo.PARAM.getText(),\n-                        \"\u003c\" + typeParamName + \"\u003e\");\n+                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                matcher.find();\n                final String typeParamName \u003d matcher.group(1).trim();\n                if (!typeParamNames.contains(typeParamName)) {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        UNUSED_TAG,\n                        JavadocTagInfo.PARAM.getText(),\n                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": "14/08/15 7:00 AM",
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n         final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n-                final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n+                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                 matcher.find();\n                 final String typeParamName \u003d matcher.group(1).trim();\n                 if (!typeParamNames.contains(typeParamName)) {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         UNUSED_TAG,\n                         JavadocTagInfo.PARAM.getText(),\n                         \"\u003c\" + typeParamName + \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final Matcher matcher \u003d pattern.matcher(tag.getFirstArg());\n                matcher.find();\n                final String typeParamName \u003d matcher.group(1).trim();\n                if (!typeParamNames.contains(typeParamName)) {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        UNUSED_TAG,\n                        JavadocTagInfo.PARAM.getText(),\n                        \"\u003c\" + typeParamName + \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "365ff682dba7da5132da20174a09f5d74d2498ee": {
      "type": "Ybodychange",
      "commitMessage": "Remove dead code from JavadocType check. #1308\n",
      "commitDate": "24/07/15 11:41 AM",
      "commitName": "365ff682dba7da5132da20174a09f5d74d2498ee",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 1.53,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,20 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames) {\n         final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n-                if (tag.getArg1() !\u003d null) {\n-\n-                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n-                    String typeParamName \u003d null;\n-\n-                    if (matcher.matches()) {\n-                        typeParamName \u003d matcher.group(1).trim();\n-                        if (!typeParamNames.contains(typeParamName)) {\n-                            log(tag.getLineNo(), tag.getColumnNo(),\n-                                UNUSED_TAG,\n-                                JavadocTagInfo.PARAM.getText(),\n-                                \"\u003c\" + typeParamName + \"\u003e\");\n-                        }\n-                    }\n-                    else {\n-                        log(tag.getLineNo(), tag.getColumnNo(),\n-                            UNUSED_TAG_GENERAL);\n-                    }\n-                }\n-                else {\n+                final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n+                matcher.find();\n+                final String typeParamName \u003d matcher.group(1).trim();\n+                if (!typeParamNames.contains(typeParamName)) {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n-                        UNUSED_TAG_GENERAL);\n+                        UNUSED_TAG,\n+                        JavadocTagInfo.PARAM.getText(),\n+                        \"\u003c\" + typeParamName + \"\u003e\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames) {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                matcher.find();\n                final String typeParamName \u003d matcher.group(1).trim();\n                if (!typeParamNames.contains(typeParamName)) {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        UNUSED_TAG,\n                        JavadocTagInfo.PARAM.getText(),\n                        \"\u003c\" + typeParamName + \"\u003e\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c": {
      "type": "Ybodychange",
      "commitMessage": "Deleted cache from Utils class + unified setters with patterns\n\nIssue #845\n",
      "commitDate": "27/03/15 2:39 PM",
      "commitName": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c",
      "commitAuthor": "Damian Szczepanik",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 12.01,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames)\n     {\n-        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n+        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!typeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 UNUSED_TAG,\n                                 JavadocTagInfo.PARAM.getText(),\n                                 \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             UNUSED_TAG_GENERAL);\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         UNUSED_TAG_GENERAL);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames)\n    {\n        final Pattern pattern \u003d Pattern.compile(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!typeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                UNUSED_TAG,\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            UNUSED_TAG_GENERAL);\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        UNUSED_TAG_GENERAL);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e tags,\n         final List\u003cString\u003e typeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!typeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n-                                \"javadoc.unusedTag\",\n+                                UNUSED_TAG,\n                                 JavadocTagInfo.PARAM.getText(),\n                                 \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n-                            \"javadoc.unusedTagGeneral\");\n+                            UNUSED_TAG_GENERAL);\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n-                        \"javadoc.unusedTagGeneral\");\n+                        UNUSED_TAG_GENERAL);\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!typeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                UNUSED_TAG,\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            UNUSED_TAG_GENERAL);\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        UNUSED_TAG_GENERAL);\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkUnusedTypeParamTags(\n-        final List\u003cJavadocTag\u003e aTags,\n-        final List\u003cString\u003e aTypeParamNames)\n+        final List\u003cJavadocTag\u003e tags,\n+        final List\u003cString\u003e typeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n-        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d aTags.get(i);\n+        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n-                        if (!aTypeParamNames.contains(typeParamName)) {\n+                        if (!typeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 JavadocTagInfo.PARAM.getText(),\n                                 \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!typeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List\u003cJavadocTag\u003e(modifiers-final), aTypeParamNames-List\u003cString\u003e(modifiers-final)]",
            "newValue": "[tags-List\u003cJavadocTag\u003e(modifiers-final), typeParamNames-List\u003cString\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 460,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n     private void checkUnusedTypeParamTags(\n-        final List\u003cJavadocTag\u003e aTags,\n-        final List\u003cString\u003e aTypeParamNames)\n+        final List\u003cJavadocTag\u003e tags,\n+        final List\u003cString\u003e typeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n-        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d aTags.get(i);\n+        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d tags.get(i);\n             if (tag.isParamTag()) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n-                        if (!aTypeParamNames.contains(typeParamName)) {\n+                        if (!typeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 JavadocTagInfo.PARAM.getText(),\n                                 \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e tags,\n        final List\u003cString\u003e typeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d tags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d tags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!typeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e aTags,\n        final List\u003cString\u003e aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
      }
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e aTags,\n         final List\u003cString\u003e aTypeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d aTags.get(i);\n-            if (\"param\".equals(tag.getTag())) {\n+            if (tag.isParamTag()) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n-                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n+                                JavadocTagInfo.PARAM.getText(),\n+                                \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e aTags,\n        final List\u003cString\u003e aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.isParamTag()) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                JavadocTagInfo.PARAM.getText(),\n                                \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "79404974eff1458f4243f8acd6a08b6a8b869342": {
      "type": "Ybodychange",
      "commitMessage": "Integrate patch #1895152, for Avoid Null Equals Comparison Check\n",
      "commitDate": "06/04/08 4:48 AM",
      "commitName": "79404974eff1458f4243f8acd6a08b6a8b869342",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 83.17,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n         final List\u003cJavadocTag\u003e aTags,\n         final List\u003cString\u003e aTypeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d aTags.get(i);\n-            if (tag.getTag().equals(\"param\")) {\n+            if (\"param\".equals(tag.getTag())) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e aTags,\n        final List\u003cString\u003e aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (\"param\".equals(tag.getTag())) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/12/07 3:31 PM",
          "commitNameOld": "c18071b7561b99767e871be9d4d7711eb15b76f1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 1.22,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n-        final List aTags,\n-        final List aTypeParamNames)\n+        final List\u003cJavadocTag\u003e aTags,\n+        final List\u003cString\u003e aTypeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            final JavadocTag tag \u003d aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e aTags,\n        final List\u003cString\u003e aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List(modifiers-final), aTypeParamNames-List(modifiers-final)]",
            "newValue": "[aTags-List\u003cJavadocTag\u003e(modifiers-final), aTypeParamNames-List\u003cString\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/12/07 3:31 PM",
          "commitNameOld": "c18071b7561b99767e871be9d4d7711eb15b76f1",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 1.22,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n-        final List aTags,\n-        final List aTypeParamNames)\n+        final List\u003cJavadocTag\u003e aTags,\n+        final List\u003cString\u003e aTypeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n-            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            final JavadocTag tag \u003d aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnusedTypeParamTags(\n        final List\u003cJavadocTag\u003e aTags,\n        final List\u003cString\u003e aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "c18071b7561b99767e871be9d4d7711eb15b76f1": {
      "type": "Yparameterchange",
      "commitMessage": "repeat changes made in CVS.\n",
      "commitDate": "13/12/07 3:31 PM",
      "commitName": "c18071b7561b99767e871be9d4d7711eb15b76f1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 320.36,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n-        final Vector aTags,\n+        final List aTags,\n         final List aTypeParamNames)\n     {\n         final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final List aTags,\n        final List aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {
        "oldValue": "[aTags-Vector(modifiers-final), aTypeParamNames-List(modifiers-final)]",
        "newValue": "[aTags-List(modifiers-final), aTypeParamNames-List(modifiers-final)]"
      }
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n         final Vector aTags,\n         final List aTypeParamNames)\n     {\n-        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n+        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n-                    Matcher matcher \u003d pattern.matcher(tag.getArg1());\n+                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final Vector aTags,\n        final List aTypeParamNames)\n    {\n        final Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    final Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3": {
      "type": "Ybodychange",
      "commitMessage": "Fix for 1220036\n",
      "commitDate": "08/08/05 5:18 PM",
      "commitName": "d6175fd6c95f64e854c1604e0331d8d1ab9dcaf3",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "05/08/05 6:33 AM",
      "commitNameOld": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 3.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void checkUnusedTypeParamTags(\n         final Vector aTags,\n         final List aTypeParamNames)\n     {\n-        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e])+\u003e.*\");\n+        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n                             log(tag.getLineNo(), tag.getColumnNo(),\n                                 \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n                         log(tag.getLineNo(), tag.getColumnNo(),\n                             \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n                     log(tag.getLineNo(), tag.getColumnNo(),\n                         \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final Vector aTags,\n        final List aTypeParamNames)\n    {\n        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e]+)\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1249707: AbstractTypeAwareCheck doesn\u0027t work with types from typeparm\n\nSome pretty big refactoring for typeaware checks performed.\nAlso added handling for type params.  Current handling algorithm\nhas some preconditions and restriction, but it works for most cases\n(not sure I\u0027ve covered all situation when type param will have name\nof real exception, but I do not think it is critical for now :)\n\nAlso, I\u0027ve added column number for JavadocTag (mainly to be able use\nClassInfo for it).  So, JavadocTypeCheck also affected.\n\nAnd I\u0027ve added new logger for TreeWalker (if we have loggers we should\nuse them :)\n",
      "commitDate": "05/08/05 6:33 AM",
      "commitName": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "07/06/05 2:48 AM",
      "commitNameOld": "94d7b67c30f2119815f106b822089adacd2fd4d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 59.16,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n     private void checkUnusedTypeParamTags(\n         final Vector aTags,\n         final List aTypeParamNames)\n     {\n         Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e])+\u003e.*\");\n         for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n             final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n             if (tag.getTag().equals(\"param\")) {\n \n                 if (tag.getArg1() !\u003d null) {\n \n                     Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                     String typeParamName \u003d null;\n \n                     if (matcher.matches()) {\n                         typeParamName \u003d matcher.group(1).trim();\n                         if (!aTypeParamNames.contains(typeParamName)) {\n-                            log(tag.getLineNo(), \"javadoc.unusedTag\",\n+                            log(tag.getLineNo(), tag.getColumnNo(),\n+                                \"javadoc.unusedTag\",\n                                 \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                         }\n                     }\n                     else {\n-                        log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n+                        log(tag.getLineNo(), tag.getColumnNo(),\n+                            \"javadoc.unusedTagGeneral\");\n                     }\n                 }\n                 else {\n-                    log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n+                    log(tag.getLineNo(), tag.getColumnNo(),\n+                        \"javadoc.unusedTagGeneral\");\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final Vector aTags,\n        final List aTypeParamNames)\n    {\n        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e])+\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), tag.getColumnNo(),\n                                \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), tag.getColumnNo(),\n                            \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), tag.getColumnNo(),\n                        \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java",
      "extendedDetails": {}
    },
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": {
      "type": "Yintroduced",
      "commitMessage": "Fix for 1185501.\n",
      "commitDate": "05/06/05 3:36 PM",
      "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
      "commitAuthor": "Michael Studman",
      "diff": "@@ -0,0 +1,31 @@\n+    private void checkUnusedTypeParamTags(\n+        final Vector aTags,\n+        final List aTypeParamNames)\n+    {\n+        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e])+\u003e.*\");\n+        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n+            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n+            if (tag.getTag().equals(\"param\")) {\n+\n+                if (tag.getArg1() !\u003d null) {\n+\n+                    Matcher matcher \u003d pattern.matcher(tag.getArg1());\n+                    String typeParamName \u003d null;\n+\n+                    if (matcher.matches()) {\n+                        typeParamName \u003d matcher.group(1).trim();\n+                        if (!aTypeParamNames.contains(typeParamName)) {\n+                            log(tag.getLineNo(), \"javadoc.unusedTag\",\n+                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n+                        }\n+                    }\n+                    else {\n+                        log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n+                    }\n+                }\n+                else {\n+                    log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n+                }\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnusedTypeParamTags(\n        final Vector aTags,\n        final List aTypeParamNames)\n    {\n        Pattern pattern \u003d Utils.getPattern(\"\\\\s*\u003c([^\u003e])+\u003e.*\");\n        for (int i \u003d aTags.size() - 1; i \u003e\u003d 0; i--) {\n            final JavadocTag tag \u003d (JavadocTag) aTags.get(i);\n            if (tag.getTag().equals(\"param\")) {\n\n                if (tag.getArg1() !\u003d null) {\n\n                    Matcher matcher \u003d pattern.matcher(tag.getArg1());\n                    String typeParamName \u003d null;\n\n                    if (matcher.matches()) {\n                        typeParamName \u003d matcher.group(1).trim();\n                        if (!aTypeParamNames.contains(typeParamName)) {\n                            log(tag.getLineNo(), \"javadoc.unusedTag\",\n                                \"@param\", \"\u003c\" + typeParamName + \"\u003e\");\n                        }\n                    }\n                    else {\n                        log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n                    }\n                }\n                else {\n                    log(tag.getLineNo(), \"javadoc.unusedTagGeneral\");\n                }\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java"
    }
  }
}