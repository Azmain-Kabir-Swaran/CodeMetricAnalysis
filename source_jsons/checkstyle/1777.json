{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FallThroughCheck.java",
  "functionName": "hasFallThroughComment",
  "functionId": "hasFallThroughComment___currentCase-DetailAST__nextCase-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
  "functionStartLine": 389,
  "functionEndLine": 433,
  "numCommitsSeen": 105,
  "timeTaken": 3111,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
    "b9df81996022b890956046b3385217f7dbf86c4c",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "4ee4d60e07a763be669173c3f45ed9b29eedca7c",
    "cc7aeaec906dc3c864477e3050510009b2a946ee",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba",
    "dba746ba9387bee04ed362254abb5d9ed35169cd",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c38185458ab824874b8465c46b4dc42646440aaa",
    "788b41973d5747c7b4699a853b62168cf0001df6",
    "9d8134f4e8f2400519d4097a96a87c1b533dc9d2"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": "Ybodychange",
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37": "Ybodychange",
    "b9df81996022b890956046b3385217f7dbf86c4c": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "4ee4d60e07a763be669173c3f45ed9b29eedca7c": "Ymultichange(Yrename,Ybodychange)",
    "cc7aeaec906dc3c864477e3050510009b2a946ee": "Ybodychange",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": "Ybodychange",
    "dba746ba9387bee04ed362254abb5d9ed35169cd": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c38185458ab824874b8465c46b4dc42646440aaa": "Ybodychange",
    "788b41973d5747c7b4699a853b62168cf0001df6": "Ybodychange",
    "9d8134f4e8f2400519d4097a96a87c1b533dc9d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n         boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         // Remember: The lines number returned from the AST is 1-based, but\n         // the lines number in this array are 0-based. So you will often\n         // see a \"lineNo-1\" etc.\n         final String[] lines \u003d getLines();\n \n         // Handle:\n         //    case 1:\n         //    /+ FALLTHRU +/ case 2:\n         //    ....\n         // and\n         //    switch(i) {\n         //    default:\n         //    /+ FALLTHRU +/}\n         //\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (matchesComment(reliefPattern, linePart, endLineNo)) {\n             allThroughComment \u003d true;\n         }\n         else {\n             // Handle:\n             //    case 1:\n             //    .....\n             //    // FALLTHRU\n             //    case 2:\n             //    ....\n             // and\n             //    switch(i) {\n             //    default:\n             //    // FALLTHRU\n             //    }\n             final int startLineNo \u003d currentCase.getLineNo();\n             for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n-                if (!CommonUtils.isBlank(lines[i])) {\n+                if (!CommonUtil.isBlank(lines[i])) {\n                     allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                     break;\n                 }\n             }\n         }\n         return allThroughComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        // Remember: The lines number returned from the AST is 1-based, but\n        // the lines number in this array are 0-based. So you will often\n        // see a \"lineNo-1\" etc.\n        final String[] lines \u003d getLines();\n\n        // Handle:\n        //    case 1:\n        //    /+ FALLTHRU +/ case 2:\n        //    ....\n        // and\n        //    switch(i) {\n        //    default:\n        //    /+ FALLTHRU +/}\n        //\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (matchesComment(reliefPattern, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            // Handle:\n            //    case 1:\n            //    .....\n            //    // FALLTHRU\n            //    case 2:\n            //    ....\n            // and\n            //    switch(i) {\n            //    default:\n            //    // FALLTHRU\n            //    }\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!CommonUtil.isBlank(lines[i])) {\n                    allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4342: Applied requested changes\n",
      "commitDate": "18/05/17 12:43 PM",
      "commitName": "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 111.22,
      "commitsBetweenForRepo": 401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n         boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         // Remember: The lines number returned from the AST is 1-based, but\n         // the lines number in this array are 0-based. So you will often\n         // see a \"lineNo-1\" etc.\n         final String[] lines \u003d getLines();\n \n         // Handle:\n         //    case 1:\n         //    /+ FALLTHRU +/ case 2:\n         //    ....\n         // and\n         //    switch(i) {\n         //    default:\n         //    /+ FALLTHRU +/}\n         //\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (matchesComment(reliefPattern, linePart, endLineNo)) {\n             allThroughComment \u003d true;\n         }\n         else {\n             // Handle:\n             //    case 1:\n             //    .....\n             //    // FALLTHRU\n             //    case 2:\n             //    ....\n             // and\n             //    switch(i) {\n             //    default:\n             //    // FALLTHRU\n             //    }\n             final int startLineNo \u003d currentCase.getLineNo();\n             for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n-                if (!lines[i].trim().isEmpty()) {\n+                if (!CommonUtils.isBlank(lines[i])) {\n                     allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                     break;\n                 }\n             }\n         }\n         return allThroughComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        // Remember: The lines number returned from the AST is 1-based, but\n        // the lines number in this array are 0-based. So you will often\n        // see a \"lineNo-1\" etc.\n        final String[] lines \u003d getLines();\n\n        // Handle:\n        //    case 1:\n        //    /+ FALLTHRU +/ case 2:\n        //    ....\n        // and\n        //    switch(i) {\n        //    default:\n        //    /+ FALLTHRU +/}\n        //\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (matchesComment(reliefPattern, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            // Handle:\n            //    case 1:\n            //    .....\n            //    // FALLTHRU\n            //    case 2:\n            //    ....\n            // and\n            //    switch(i) {\n            //    default:\n            //    // FALLTHRU\n            //    }\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!CommonUtils.isBlank(lines[i])) {\n                    allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3255: changed module setters for pattern",
      "commitDate": "09/11/16 4:34 AM",
      "commitName": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/05/16 6:42 AM",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 165.95,
      "commitsBetweenForRepo": 268,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n         boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         // Remember: The lines number returned from the AST is 1-based, but\n         // the lines number in this array are 0-based. So you will often\n         // see a \"lineNo-1\" etc.\n         final String[] lines \u003d getLines();\n \n         // Handle:\n         //    case 1:\n         //    /+ FALLTHRU +/ case 2:\n         //    ....\n         // and\n         //    switch(i) {\n         //    default:\n         //    /+ FALLTHRU +/}\n         //\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (matchesComment(regExp, linePart, endLineNo)) {\n+        if (matchesComment(reliefPattern, linePart, endLineNo)) {\n             allThroughComment \u003d true;\n         }\n         else {\n             // Handle:\n             //    case 1:\n             //    .....\n             //    // FALLTHRU\n             //    case 2:\n             //    ....\n             // and\n             //    switch(i) {\n             //    default:\n             //    // FALLTHRU\n             //    }\n             final int startLineNo \u003d currentCase.getLineNo();\n             for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                 if (!lines[i].trim().isEmpty()) {\n-                    allThroughComment \u003d matchesComment(regExp, lines[i], i + 1);\n+                    allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                     break;\n                 }\n             }\n         }\n         return allThroughComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        // Remember: The lines number returned from the AST is 1-based, but\n        // the lines number in this array are 0-based. So you will often\n        // see a \"lineNo-1\" etc.\n        final String[] lines \u003d getLines();\n\n        // Handle:\n        //    case 1:\n        //    /+ FALLTHRU +/ case 2:\n        //    ....\n        // and\n        //    switch(i) {\n        //    default:\n        //    /+ FALLTHRU +/}\n        //\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (matchesComment(reliefPattern, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            // Handle:\n            //    case 1:\n            //    .....\n            //    // FALLTHRU\n            //    case 2:\n            //    ....\n            // and\n            //    switch(i) {\n            //    default:\n            //    // FALLTHRU\n            //    }\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!lines[i].trim().isEmpty()) {\n                    allThroughComment \u003d matchesComment(reliefPattern, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "b9df81996022b890956046b3385217f7dbf86c4c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2661: Enforce ForbidCCommentsInMethodsCheck of sevntu-checkstyle over Checkstyle source code\n",
      "commitDate": "16/12/15 6:22 AM",
      "commitName": "b9df81996022b890956046b3385217f7dbf86c4c",
      "commitAuthor": "Selkin Andrey",
      "commitDateOld": "09/11/15 1:16 PM",
      "commitNameOld": "2bd61975dfc9f6ada80ec009d46f6c95d483b5bf",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 36.71,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,45 @@\n     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n         boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n-        /*\n-         * Remember: The lines number returned from the AST is 1-based, but\n-         * the lines number in this array are 0-based. So you will often\n-         * see a \"lineNo-1\" etc.\n-         */\n+        // Remember: The lines number returned from the AST is 1-based, but\n+        // the lines number in this array are 0-based. So you will often\n+        // see a \"lineNo-1\" etc.\n         final String[] lines \u003d getLines();\n \n-        /*\n-         * Handle:\n-         *    case 1:\n-         *    /+ FALLTHRU +/ case 2:\n-         *    ....\n-         * and\n-         *    switch(i) {\n-         *    default:\n-         *    /+ FALLTHRU +/}\n-         */\n+        // Handle:\n+        //    case 1:\n+        //    /+ FALLTHRU +/ case 2:\n+        //    ....\n+        // and\n+        //    switch(i) {\n+        //    default:\n+        //    /+ FALLTHRU +/}\n+        //\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (matchesComment(regExp, linePart, endLineNo)) {\n             allThroughComment \u003d true;\n         }\n         else {\n-            /*\n-             * Handle:\n-             *    case 1:\n-             *    .....\n-             *    // FALLTHRU\n-             *    case 2:\n-             *    ....\n-             * and\n-             *    switch(i) {\n-             *    default:\n-             *    // FALLTHRU\n-             *    }\n-             */\n+            // Handle:\n+            //    case 1:\n+            //    .....\n+            //    // FALLTHRU\n+            //    case 2:\n+            //    ....\n+            // and\n+            //    switch(i) {\n+            //    default:\n+            //    // FALLTHRU\n+            //    }\n             final int startLineNo \u003d currentCase.getLineNo();\n             for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                 if (!lines[i].trim().isEmpty()) {\n                     allThroughComment \u003d matchesComment(regExp, lines[i], i + 1);\n                     break;\n                 }\n             }\n         }\n         return allThroughComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        // Remember: The lines number returned from the AST is 1-based, but\n        // the lines number in this array are 0-based. So you will often\n        // see a \"lineNo-1\" etc.\n        final String[] lines \u003d getLines();\n\n        // Handle:\n        //    case 1:\n        //    /+ FALLTHRU +/ case 2:\n        //    ....\n        // and\n        //    switch(i) {\n        //    default:\n        //    /+ FALLTHRU +/}\n        //\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (matchesComment(regExp, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            // Handle:\n            //    case 1:\n            //    .....\n            //    // FALLTHRU\n            //    case 2:\n            //    ....\n            // and\n            //    switch(i) {\n            //    default:\n            //    // FALLTHRU\n            //    }\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!lines[i].trim().isEmpty()) {\n                    allThroughComment \u003d matchesComment(regExp, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 11:09 PM",
      "commitNameOld": "4ee4d60e07a763be669173c3f45ed9b29eedca7c",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n         boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (commentMatch(regExp, linePart, endLineNo)) {\n+        if (matchesComment(regExp, linePart, endLineNo)) {\n             allThroughComment \u003d true;\n         }\n         else {\n             /*\n              * Handle:\n              *    case 1:\n              *    .....\n              *    // FALLTHRU\n              *    case 2:\n              *    ....\n              * and\n              *    switch(i) {\n              *    default:\n              *    // FALLTHRU\n              *    }\n              */\n             final int startLineNo \u003d currentCase.getLineNo();\n             for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                 if (!lines[i].trim().isEmpty()) {\n-                    allThroughComment \u003d commentMatch(regExp, lines[i], i + 1);\n+                    allThroughComment \u003d matchesComment(regExp, lines[i], i + 1);\n                     break;\n                 }\n             }\n         }\n         return allThroughComment;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (matchesComment(regExp, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            /*\n             * Handle:\n             *    case 1:\n             *    .....\n             *    // FALLTHRU\n             *    case 2:\n             *    ....\n             * and\n             *    switch(i) {\n             *    default:\n             *    // FALLTHRU\n             *    }\n             */\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!lines[i].trim().isEmpty()) {\n                    allThroughComment \u003d matchesComment(regExp, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "4ee4d60e07a763be669173c3f45ed9b29eedca7c": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for FallThroughCheck\n",
      "commitDate": "27/08/15 11:09 PM",
      "commitName": "4ee4d60e07a763be669173c3f45ed9b29eedca7c",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #1566: ReturnCount violation fixed for FallThroughCheck\n",
          "commitDate": "27/08/15 11:09 PM",
          "commitName": "4ee4d60e07a763be669173c3f45ed9b29eedca7c",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "27/08/15 10:29 PM",
          "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,50 @@\n-    private boolean hasFallTruComment(DetailAST currentCase,\n-            DetailAST nextCase) {\n-\n+    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n+        boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(regExp, linePart, endLineNo)) {\n-            return true;\n+            allThroughComment \u003d true;\n         }\n-\n-        /*\n-         * Handle:\n-         *    case 1:\n-         *    .....\n-         *    // FALLTHRU\n-         *    case 2:\n-         *    ....\n-         * and\n-         *    switch(i) {\n-         *    default:\n-         *    // FALLTHRU\n-         *    }\n-         */\n-        final int startLineNo \u003d currentCase.getLineNo();\n-        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n-            if (!lines[i].trim().isEmpty()) {\n-                return commentMatch(regExp, lines[i], i + 1);\n+        else {\n+            /*\n+             * Handle:\n+             *    case 1:\n+             *    .....\n+             *    // FALLTHRU\n+             *    case 2:\n+             *    ....\n+             * and\n+             *    switch(i) {\n+             *    default:\n+             *    // FALLTHRU\n+             *    }\n+             */\n+            final int startLineNo \u003d currentCase.getLineNo();\n+            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n+                if (!lines[i].trim().isEmpty()) {\n+                    allThroughComment \u003d commentMatch(regExp, lines[i], i + 1);\n+                    break;\n+                }\n             }\n         }\n-\n-        // Well -- no relief comment found.\n-        return false;\n+        return allThroughComment;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            /*\n             * Handle:\n             *    case 1:\n             *    .....\n             *    // FALLTHRU\n             *    case 2:\n             *    ....\n             * and\n             *    switch(i) {\n             *    default:\n             *    // FALLTHRU\n             *    }\n             */\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!lines[i].trim().isEmpty()) {\n                    allThroughComment \u003d commentMatch(regExp, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
          "extendedDetails": {
            "oldValue": "hasFallTruComment",
            "newValue": "hasFallThroughComment"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1566: ReturnCount violation fixed for FallThroughCheck\n",
          "commitDate": "27/08/15 11:09 PM",
          "commitName": "4ee4d60e07a763be669173c3f45ed9b29eedca7c",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "27/08/15 10:29 PM",
          "commitNameOld": "cc7aeaec906dc3c864477e3050510009b2a946ee",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,50 @@\n-    private boolean hasFallTruComment(DetailAST currentCase,\n-            DetailAST nextCase) {\n-\n+    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n+        boolean allThroughComment \u003d false;\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(regExp, linePart, endLineNo)) {\n-            return true;\n+            allThroughComment \u003d true;\n         }\n-\n-        /*\n-         * Handle:\n-         *    case 1:\n-         *    .....\n-         *    // FALLTHRU\n-         *    case 2:\n-         *    ....\n-         * and\n-         *    switch(i) {\n-         *    default:\n-         *    // FALLTHRU\n-         *    }\n-         */\n-        final int startLineNo \u003d currentCase.getLineNo();\n-        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n-            if (!lines[i].trim().isEmpty()) {\n-                return commentMatch(regExp, lines[i], i + 1);\n+        else {\n+            /*\n+             * Handle:\n+             *    case 1:\n+             *    .....\n+             *    // FALLTHRU\n+             *    case 2:\n+             *    ....\n+             * and\n+             *    switch(i) {\n+             *    default:\n+             *    // FALLTHRU\n+             *    }\n+             */\n+            final int startLineNo \u003d currentCase.getLineNo();\n+            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n+                if (!lines[i].trim().isEmpty()) {\n+                    allThroughComment \u003d commentMatch(regExp, lines[i], i + 1);\n+                    break;\n+                }\n             }\n         }\n-\n-        // Well -- no relief comment found.\n-        return false;\n+        return allThroughComment;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {\n        boolean allThroughComment \u003d false;\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linePart, endLineNo)) {\n            allThroughComment \u003d true;\n        }\n        else {\n            /*\n             * Handle:\n             *    case 1:\n             *    .....\n             *    // FALLTHRU\n             *    case 2:\n             *    ....\n             * and\n             *    switch(i) {\n             *    default:\n             *    // FALLTHRU\n             *    }\n             */\n            final int startLineNo \u003d currentCase.getLineNo();\n            for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n                if (!lines[i].trim().isEmpty()) {\n                    allThroughComment \u003d commentMatch(regExp, lines[i], i + 1);\n                    break;\n                }\n            }\n        }\n        return allThroughComment;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "cc7aeaec906dc3c864477e3050510009b2a946ee": {
      "type": "Ybodychange",
      "commitMessage": "Fix some typos in coding package. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "27/08/15 10:29 PM",
      "commitName": "cc7aeaec906dc3c864477e3050510009b2a946ee",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "25/08/15 3:34 AM",
      "commitNameOld": "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private boolean hasFallTruComment(DetailAST currentCase,\n             DetailAST nextCase) {\n \n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n-        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (commentMatch(regExp, linepart, endLineNo)) {\n+        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n+        if (commentMatch(regExp, linePart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         final int startLineNo \u003d currentCase.getLineNo();\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (!lines[i].trim().isEmpty()) {\n                 return commentMatch(regExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST currentCase,\n            DetailAST nextCase) {\n\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linePart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linePart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        final int startLineNo \u003d currentCase.getLineNo();\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (!lines[i].trim().isEmpty()) {\n                return commentMatch(regExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": {
      "type": "Ybodychange",
      "commitMessage": "Use .isEmpty() method instead of comparisons to 0. #1538\n",
      "commitDate": "02/08/15 6:48 PM",
      "commitName": "5c9e55ae70af0456e1634211ccac54c40a92cfba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/07/15 10:02 AM",
      "commitNameOld": "0d66a67b0d3920031422d5bb02f0fc02ce580bae",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 13.37,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     private boolean hasFallTruComment(DetailAST currentCase,\n             DetailAST nextCase) {\n \n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(regExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         final int startLineNo \u003d currentCase.getLineNo();\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n-            if (lines[i].trim().length() !\u003d 0) {\n+            if (!lines[i].trim().isEmpty()) {\n                 return commentMatch(regExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST currentCase,\n            DetailAST nextCase) {\n\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        final int startLineNo \u003d currentCase.getLineNo();\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (!lines[i].trim().isEmpty()) {\n                return commentMatch(regExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "dba746ba9387bee04ed362254abb5d9ed35169cd": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from PrematureDeclaration rule. #948\n",
      "commitDate": "13/05/15 9:58 AM",
      "commitName": "dba746ba9387bee04ed362254abb5d9ed35169cd",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "13/05/15 9:26 AM",
      "commitNameOld": "7fdcaa592941ee4b1cec2d863a78f22bb1f5259e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private boolean hasFallTruComment(DetailAST currentCase,\n             DetailAST nextCase)\n     {\n \n-        final int startLineNo \u003d currentCase.getLineNo();\n         final int endLineNo \u003d nextCase.getLineNo();\n         final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(regExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n+        final int startLineNo \u003d currentCase.getLineNo();\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n                 return commentMatch(regExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST currentCase,\n            DetailAST nextCase)\n    {\n\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        final int startLineNo \u003d currentCase.getLineNo();\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(regExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "23/11/14 2:18 PM",
          "commitNameOld": "9b17ce22d251d3f549aa6147081c08cf0b6bb005",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 56.67,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-    private boolean hasFallTruComment(DetailAST aCurrentCase,\n-            DetailAST aNextCase)\n+    private boolean hasFallTruComment(DetailAST currentCase,\n+            DetailAST nextCase)\n     {\n \n-        final int startLineNo \u003d aCurrentCase.getLineNo();\n-        final int endLineNo \u003d aNextCase.getLineNo();\n-        final int endColNo \u003d aNextCase.getColumnNo();\n+        final int startLineNo \u003d currentCase.getLineNo();\n+        final int endLineNo \u003d nextCase.getLineNo();\n+        final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (commentMatch(mRegExp, linepart, endLineNo)) {\n+        if (commentMatch(regExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n-                return commentMatch(mRegExp, lines[i], i + 1);\n+                return commentMatch(regExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasFallTruComment(DetailAST currentCase,\n            DetailAST nextCase)\n    {\n\n        final int startLineNo \u003d currentCase.getLineNo();\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(regExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
          "extendedDetails": {
            "oldValue": "[aCurrentCase-DetailAST, aNextCase-DetailAST]",
            "newValue": "[currentCase-DetailAST, nextCase-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "23/11/14 2:18 PM",
          "commitNameOld": "9b17ce22d251d3f549aa6147081c08cf0b6bb005",
          "commitAuthorOld": "Ilja Dubinin",
          "daysBetweenCommits": 56.67,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-    private boolean hasFallTruComment(DetailAST aCurrentCase,\n-            DetailAST aNextCase)\n+    private boolean hasFallTruComment(DetailAST currentCase,\n+            DetailAST nextCase)\n     {\n \n-        final int startLineNo \u003d aCurrentCase.getLineNo();\n-        final int endLineNo \u003d aNextCase.getLineNo();\n-        final int endColNo \u003d aNextCase.getColumnNo();\n+        final int startLineNo \u003d currentCase.getLineNo();\n+        final int endLineNo \u003d nextCase.getLineNo();\n+        final int endColNo \u003d nextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (commentMatch(mRegExp, linepart, endLineNo)) {\n+        if (commentMatch(regExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n-                return commentMatch(mRegExp, lines[i], i + 1);\n+                return commentMatch(regExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasFallTruComment(DetailAST currentCase,\n            DetailAST nextCase)\n    {\n\n        final int startLineNo \u003d currentCase.getLineNo();\n        final int endLineNo \u003d nextCase.getLineNo();\n        final int endColNo \u003d nextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(regExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(regExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean hasFallTruComment(DetailAST aCurrentCase,\n            DetailAST aNextCase)\n    {\n\n        final int startLineNo \u003d aCurrentCase.getLineNo();\n        final int endLineNo \u003d aNextCase.getLineNo();\n        final int endColNo \u003d aNextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(mRegExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(mRegExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java"
      }
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private boolean hasFallTruComment(DetailAST aCurrentCase,\n             DetailAST aNextCase)\n     {\n \n         final int startLineNo \u003d aCurrentCase.getLineNo();\n         final int endLineNo \u003d aNextCase.getLineNo();\n         final int endColNo \u003d aNextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n-        String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n+        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(mRegExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n                 return commentMatch(mRegExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST aCurrentCase,\n            DetailAST aNextCase)\n    {\n\n        final int startLineNo \u003d aCurrentCase.getLineNo();\n        final int endLineNo \u003d aNextCase.getLineNo();\n        final int endColNo \u003d aNextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        final String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(mRegExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(mRegExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "c38185458ab824874b8465c46b4dc42646440aaa": {
      "type": "Ybodychange",
      "commitMessage": "Code cleanup\n",
      "commitDate": "21/01/06 4:43 AM",
      "commitName": "c38185458ab824874b8465c46b4dc42646440aaa",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "29/12/05 4:35 AM",
      "commitNameOld": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 23.01,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     private boolean hasFallTruComment(DetailAST aCurrentCase,\n             DetailAST aNextCase)\n     {\n \n         final int startLineNo \u003d aCurrentCase.getLineNo();\n         final int endLineNo \u003d aNextCase.getLineNo();\n         final int endColNo \u003d aNextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n-        if (commentMatch(mRegExp, linepart, endLineNo, 0)) {\n+        if (commentMatch(mRegExp, linepart, endLineNo)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n-                return commentMatch(mRegExp, lines[i], i + 1, 0);\n+                return commentMatch(mRegExp, lines[i], i + 1);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST aCurrentCase,\n            DetailAST aNextCase)\n    {\n\n        final int startLineNo \u003d aCurrentCase.getLineNo();\n        final int endLineNo \u003d aNextCase.getLineNo();\n        final int endColNo \u003d aNextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(mRegExp, linepart, endLineNo)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(mRegExp, lines[i], i + 1);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "788b41973d5747c7b4699a853b62168cf0001df6": {
      "type": "Ybodychange",
      "commitMessage": "Changes to make it possible to identify a module by an id, and then to\nsuppress messages based on the id. The motivation is to allow for finer\ngrained suppressions. For example, can enable multiple instances of the\nRegexp check, and suppress on the individual instance.\n",
      "commitDate": "29/12/05 4:35 AM",
      "commitName": "788b41973d5747c7b4699a853b62168cf0001df6",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "10/11/05 5:38 AM",
      "commitNameOld": "9d8134f4e8f2400519d4097a96a87c1b533dc9d2",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 48.96,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,52 @@\n     private boolean hasFallTruComment(DetailAST aCurrentCase,\n             DetailAST aNextCase)\n     {\n \n         final int startLineNo \u003d aCurrentCase.getLineNo();\n-        final int startColNo \u003d aCurrentCase.getColumnNo();\n         final int endLineNo \u003d aNextCase.getLineNo();\n         final int endColNo \u003d aNextCase.getColumnNo();\n \n         /*\n          * Remember: The lines number returned from the AST is 1-based, but\n          * the lines number in this array are 0-based. So you will often\n          * see a \"lineNo-1\" etc.\n          */\n         final String[] lines \u003d getLines();\n \n         /*\n          * Handle:\n          *    case 1:\n          *    /+ FALLTHRU +/ case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    /+ FALLTHRU +/}\n          */\n         String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n         if (commentMatch(mRegExp, linepart, endLineNo, 0)) {\n             return true;\n         }\n \n         /*\n          * Handle:\n          *    case 1:\n          *    .....\n          *    // FALLTHRU\n          *    case 2:\n          *    ....\n          * and\n          *    switch(i) {\n          *    default:\n          *    // FALLTHRU\n          *    }\n          */\n         for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n             if (lines[i].trim().length() !\u003d 0) {\n                 return commentMatch(mRegExp, lines[i], i + 1, 0);\n             }\n         }\n \n         // Well -- no relief comment found.\n         return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST aCurrentCase,\n            DetailAST aNextCase)\n    {\n\n        final int startLineNo \u003d aCurrentCase.getLineNo();\n        final int endLineNo \u003d aNextCase.getLineNo();\n        final int endColNo \u003d aNextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(mRegExp, linepart, endLineNo, 0)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(mRegExp, lines[i], i + 1, 0);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java",
      "extendedDetails": {}
    },
    "9d8134f4e8f2400519d4097a96a87c1b533dc9d2": {
      "type": "Yintroduced",
      "commitMessage": "Applied patch 1348873 which implements rfe 1345691\n",
      "commitDate": "10/11/05 5:38 AM",
      "commitName": "9d8134f4e8f2400519d4097a96a87c1b533dc9d2",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,53 @@\n+    private boolean hasFallTruComment(DetailAST aCurrentCase,\n+            DetailAST aNextCase)\n+    {\n+\n+        final int startLineNo \u003d aCurrentCase.getLineNo();\n+        final int startColNo \u003d aCurrentCase.getColumnNo();\n+        final int endLineNo \u003d aNextCase.getLineNo();\n+        final int endColNo \u003d aNextCase.getColumnNo();\n+\n+        /*\n+         * Remember: The lines number returned from the AST is 1-based, but\n+         * the lines number in this array are 0-based. So you will often\n+         * see a \"lineNo-1\" etc.\n+         */\n+        final String[] lines \u003d getLines();\n+\n+        /*\n+         * Handle:\n+         *    case 1:\n+         *    /+ FALLTHRU +/ case 2:\n+         *    ....\n+         * and\n+         *    switch(i) {\n+         *    default:\n+         *    /+ FALLTHRU +/}\n+         */\n+        String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n+        if (commentMatch(mRegExp, linepart, endLineNo, 0)) {\n+            return true;\n+        }\n+\n+        /*\n+         * Handle:\n+         *    case 1:\n+         *    .....\n+         *    // FALLTHRU\n+         *    case 2:\n+         *    ....\n+         * and\n+         *    switch(i) {\n+         *    default:\n+         *    // FALLTHRU\n+         *    }\n+         */\n+        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n+            if (lines[i].trim().length() !\u003d 0) {\n+                return commentMatch(mRegExp, lines[i], i + 1, 0);\n+            }\n+        }\n+\n+        // Well -- no relief comment found.\n+        return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasFallTruComment(DetailAST aCurrentCase,\n            DetailAST aNextCase)\n    {\n\n        final int startLineNo \u003d aCurrentCase.getLineNo();\n        final int startColNo \u003d aCurrentCase.getColumnNo();\n        final int endLineNo \u003d aNextCase.getLineNo();\n        final int endColNo \u003d aNextCase.getColumnNo();\n\n        /*\n         * Remember: The lines number returned from the AST is 1-based, but\n         * the lines number in this array are 0-based. So you will often\n         * see a \"lineNo-1\" etc.\n         */\n        final String[] lines \u003d getLines();\n\n        /*\n         * Handle:\n         *    case 1:\n         *    /+ FALLTHRU +/ case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    /+ FALLTHRU +/}\n         */\n        String linepart \u003d lines[endLineNo - 1].substring(0, endColNo);\n        if (commentMatch(mRegExp, linepart, endLineNo, 0)) {\n            return true;\n        }\n\n        /*\n         * Handle:\n         *    case 1:\n         *    .....\n         *    // FALLTHRU\n         *    case 2:\n         *    ....\n         * and\n         *    switch(i) {\n         *    default:\n         *    // FALLTHRU\n         *    }\n         */\n        for (int i \u003d endLineNo - 2; i \u003e startLineNo - 1; i--) {\n            if (lines[i].trim().length() !\u003d 0) {\n                return commentMatch(mRegExp, lines[i], i + 1, 0);\n            }\n        }\n\n        // Well -- no relief comment found.\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java"
    }
  }
}