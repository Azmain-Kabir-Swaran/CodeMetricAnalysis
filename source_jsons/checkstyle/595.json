{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RootNode.java",
  "functionName": "iterateAxis",
  "functionId": "iterateAxis___axisNumber-byte",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java",
  "functionStartLine": 147,
  "functionEndLine": 197,
  "numCommitsSeen": 16,
  "timeTaken": 1108,
  "changeHistory": [
    "efe268aca6088e48337078b08944e08f02cfc81d",
    "817bbaacb3b59a99232072c9e623c1c4a51dca9f",
    "f506a61fa3c530090ee7599dde578621397268a0",
    "33ed6c45b6e639a551a0dda84b9ee7ab3ab578e2"
  ],
  "changeHistoryShort": {
    "efe268aca6088e48337078b08944e08f02cfc81d": "Ybodychange",
    "817bbaacb3b59a99232072c9e623c1c4a51dca9f": "Ybodychange",
    "f506a61fa3c530090ee7599dde578621397268a0": "Ybodychange",
    "33ed6c45b6e639a551a0dda84b9ee7ab3ab578e2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efe268aca6088e48337078b08944e08f02cfc81d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6479: please support preceding, preceding-sibling, following and following-sibling in XPath expressions\n",
      "commitDate": "28/09/19 6:22 AM",
      "commitName": "efe268aca6088e48337078b08944e08f02cfc81d",
      "commitAuthor": "Timur Tibeyev",
      "commitDateOld": "27/03/19 11:36 PM",
      "commitNameOld": "a1cd7a5600843dd25318cb66cb7253be1c183a8c",
      "commitAuthorOld": "Timur Tibeyev",
      "daysBetweenCommits": 184.28,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n     public AxisIterator iterateAxis(byte axisNumber) {\n         final AxisIterator result;\n         switch (axisNumber) {\n             case AxisInfo.ANCESTOR:\n             case AxisInfo.ATTRIBUTE:\n             case AxisInfo.PARENT:\n+            case AxisInfo.FOLLOWING:\n+            case AxisInfo.FOLLOWING_SIBLING:\n+            case AxisInfo.PRECEDING:\n+            case AxisInfo.PRECEDING_SIBLING:\n                 result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 break;\n             case AxisInfo.ANCESTOR_OR_SELF:\n             case AxisInfo.SELF:\n                 try (AxisIterator iterator \u003d SingleNodeIterator.makeIterator(this)) {\n                     result \u003d iterator;\n                 }\n                 break;\n             case AxisInfo.CHILD:\n                 if (hasChildNodes()) {\n                     try (AxisIterator iterator \u003d new ArrayIterator.OfNodes(\n                             getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY))) {\n                         result \u003d iterator;\n                     }\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT:\n                 if (hasChildNodes()) {\n                     try (AxisIterator iterator \u003d\n                                  new Navigator.DescendantEnumeration(this, false, true)) {\n                         result \u003d iterator;\n                     }\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT_OR_SELF:\n                 try (AxisIterator iterator \u003d\n                              new Navigator.DescendantEnumeration(this, true, true)) {\n                     result \u003d iterator;\n                 }\n                 break;\n             default:\n                 throw throwUnsupportedOperationException();\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public AxisIterator iterateAxis(byte axisNumber) {\n        final AxisIterator result;\n        switch (axisNumber) {\n            case AxisInfo.ANCESTOR:\n            case AxisInfo.ATTRIBUTE:\n            case AxisInfo.PARENT:\n            case AxisInfo.FOLLOWING:\n            case AxisInfo.FOLLOWING_SIBLING:\n            case AxisInfo.PRECEDING:\n            case AxisInfo.PRECEDING_SIBLING:\n                result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                break;\n            case AxisInfo.ANCESTOR_OR_SELF:\n            case AxisInfo.SELF:\n                try (AxisIterator iterator \u003d SingleNodeIterator.makeIterator(this)) {\n                    result \u003d iterator;\n                }\n                break;\n            case AxisInfo.CHILD:\n                if (hasChildNodes()) {\n                    try (AxisIterator iterator \u003d new ArrayIterator.OfNodes(\n                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY))) {\n                        result \u003d iterator;\n                    }\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT:\n                if (hasChildNodes()) {\n                    try (AxisIterator iterator \u003d\n                                 new Navigator.DescendantEnumeration(this, false, true)) {\n                        result \u003d iterator;\n                    }\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT_OR_SELF:\n                try (AxisIterator iterator \u003d\n                             new Navigator.DescendantEnumeration(this, true, true)) {\n                    result \u003d iterator;\n                }\n                break;\n            default:\n                throw throwUnsupportedOperationException();\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java",
      "extendedDetails": {}
    },
    "817bbaacb3b59a99232072c9e623c1c4a51dca9f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6149: update to saxon 9.9\n",
      "commitDate": "15/11/18 2:48 AM",
      "commitName": "817bbaacb3b59a99232072c9e623c1c4a51dca9f",
      "commitAuthor": "Timur Tibeyev",
      "commitDateOld": "24/06/18 3:51 PM",
      "commitNameOld": "f506a61fa3c530090ee7599dde578621397268a0",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 143.5,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,47 @@\n     public AxisIterator iterateAxis(byte axisNumber) {\n         final AxisIterator result;\n         switch (axisNumber) {\n             case AxisInfo.ANCESTOR:\n             case AxisInfo.ATTRIBUTE:\n             case AxisInfo.PARENT:\n                 result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 break;\n             case AxisInfo.ANCESTOR_OR_SELF:\n             case AxisInfo.SELF:\n-                result \u003d SingleNodeIterator.makeIterator(this);\n+                try (AxisIterator iterator \u003d SingleNodeIterator.makeIterator(this)) {\n+                    result \u003d iterator;\n+                }\n                 break;\n             case AxisInfo.CHILD:\n                 if (hasChildNodes()) {\n-                    result \u003d new ArrayIterator.OfNodes(\n-                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY));\n+                    try (AxisIterator iterator \u003d new ArrayIterator.OfNodes(\n+                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY))) {\n+                        result \u003d iterator;\n+                    }\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT:\n                 if (hasChildNodes()) {\n-                    result \u003d new Navigator.DescendantEnumeration(this, false, true);\n+                    try (AxisIterator iterator \u003d\n+                                 new Navigator.DescendantEnumeration(this, false, true)) {\n+                        result \u003d iterator;\n+                    }\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT_OR_SELF:\n-                result \u003d new Navigator.DescendantEnumeration(this, true, true);\n+                try (AxisIterator iterator \u003d\n+                             new Navigator.DescendantEnumeration(this, true, true)) {\n+                    result \u003d iterator;\n+                }\n                 break;\n             default:\n                 throw throwUnsupportedOperationException();\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public AxisIterator iterateAxis(byte axisNumber) {\n        final AxisIterator result;\n        switch (axisNumber) {\n            case AxisInfo.ANCESTOR:\n            case AxisInfo.ATTRIBUTE:\n            case AxisInfo.PARENT:\n                result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                break;\n            case AxisInfo.ANCESTOR_OR_SELF:\n            case AxisInfo.SELF:\n                try (AxisIterator iterator \u003d SingleNodeIterator.makeIterator(this)) {\n                    result \u003d iterator;\n                }\n                break;\n            case AxisInfo.CHILD:\n                if (hasChildNodes()) {\n                    try (AxisIterator iterator \u003d new ArrayIterator.OfNodes(\n                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY))) {\n                        result \u003d iterator;\n                    }\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT:\n                if (hasChildNodes()) {\n                    try (AxisIterator iterator \u003d\n                                 new Navigator.DescendantEnumeration(this, false, true)) {\n                        result \u003d iterator;\n                    }\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT_OR_SELF:\n                try (AxisIterator iterator \u003d\n                             new Navigator.DescendantEnumeration(this, true, true)) {\n                    result \u003d iterator;\n                }\n                break;\n            default:\n                throw throwUnsupportedOperationException();\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java",
      "extendedDetails": {}
    },
    "f506a61fa3c530090ee7599dde578621397268a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5949: fix \u0027toArray() with zero-length array argument\u0027 violations\n",
      "commitDate": "24/06/18 3:51 PM",
      "commitName": "f506a61fa3c530090ee7599dde578621397268a0",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 67.11,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public AxisIterator iterateAxis(byte axisNumber) {\n         final AxisIterator result;\n         switch (axisNumber) {\n             case AxisInfo.ANCESTOR:\n             case AxisInfo.ATTRIBUTE:\n             case AxisInfo.PARENT:\n                 result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 break;\n             case AxisInfo.ANCESTOR_OR_SELF:\n             case AxisInfo.SELF:\n                 result \u003d SingleNodeIterator.makeIterator(this);\n                 break;\n             case AxisInfo.CHILD:\n                 if (hasChildNodes()) {\n                     result \u003d new ArrayIterator.OfNodes(\n-                            getChildren().toArray(new AbstractNode[getChildren().size()]));\n+                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY));\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT:\n                 if (hasChildNodes()) {\n                     result \u003d new Navigator.DescendantEnumeration(this, false, true);\n                 }\n                 else {\n                     result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                 }\n                 break;\n             case AxisInfo.DESCENDANT_OR_SELF:\n                 result \u003d new Navigator.DescendantEnumeration(this, true, true);\n                 break;\n             default:\n                 throw throwUnsupportedOperationException();\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public AxisIterator iterateAxis(byte axisNumber) {\n        final AxisIterator result;\n        switch (axisNumber) {\n            case AxisInfo.ANCESTOR:\n            case AxisInfo.ATTRIBUTE:\n            case AxisInfo.PARENT:\n                result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                break;\n            case AxisInfo.ANCESTOR_OR_SELF:\n            case AxisInfo.SELF:\n                result \u003d SingleNodeIterator.makeIterator(this);\n                break;\n            case AxisInfo.CHILD:\n                if (hasChildNodes()) {\n                    result \u003d new ArrayIterator.OfNodes(\n                            getChildren().toArray(EMPTY_ABSTRACT_NODE_ARRAY));\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT:\n                if (hasChildNodes()) {\n                    result \u003d new Navigator.DescendantEnumeration(this, false, true);\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT_OR_SELF:\n                result \u003d new Navigator.DescendantEnumeration(this, true, true);\n                break;\n            default:\n                throw throwUnsupportedOperationException();\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java",
      "extendedDetails": {}
    },
    "33ed6c45b6e639a551a0dda84b9ee7ab3ab578e2": {
      "type": "Yintroduced",
      "commitMessage": "Issue #4369: Investigate how to map XPath expressions onto AST nodes\n",
      "commitDate": "09/08/17 4:05 AM",
      "commitName": "33ed6c45b6e639a551a0dda84b9ee7ab3ab578e2",
      "commitAuthor": "Timur",
      "diff": "@@ -0,0 +1,37 @@\n+    public AxisIterator iterateAxis(byte axisNumber) {\n+        final AxisIterator result;\n+        switch (axisNumber) {\n+            case AxisInfo.ANCESTOR:\n+            case AxisInfo.ATTRIBUTE:\n+            case AxisInfo.PARENT:\n+                result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n+                break;\n+            case AxisInfo.ANCESTOR_OR_SELF:\n+            case AxisInfo.SELF:\n+                result \u003d SingleNodeIterator.makeIterator(this);\n+                break;\n+            case AxisInfo.CHILD:\n+                if (hasChildNodes()) {\n+                    result \u003d new ArrayIterator.OfNodes(\n+                            getChildren().toArray(new AbstractNode[getChildren().size()]));\n+                }\n+                else {\n+                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n+                }\n+                break;\n+            case AxisInfo.DESCENDANT:\n+                if (hasChildNodes()) {\n+                    result \u003d new Navigator.DescendantEnumeration(this, false, true);\n+                }\n+                else {\n+                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n+                }\n+                break;\n+            case AxisInfo.DESCENDANT_OR_SELF:\n+                result \u003d new Navigator.DescendantEnumeration(this, true, true);\n+                break;\n+            default:\n+                throw throwUnsupportedOperationException();\n+        }\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public AxisIterator iterateAxis(byte axisNumber) {\n        final AxisIterator result;\n        switch (axisNumber) {\n            case AxisInfo.ANCESTOR:\n            case AxisInfo.ATTRIBUTE:\n            case AxisInfo.PARENT:\n                result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                break;\n            case AxisInfo.ANCESTOR_OR_SELF:\n            case AxisInfo.SELF:\n                result \u003d SingleNodeIterator.makeIterator(this);\n                break;\n            case AxisInfo.CHILD:\n                if (hasChildNodes()) {\n                    result \u003d new ArrayIterator.OfNodes(\n                            getChildren().toArray(new AbstractNode[getChildren().size()]));\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT:\n                if (hasChildNodes()) {\n                    result \u003d new Navigator.DescendantEnumeration(this, false, true);\n                }\n                else {\n                    result \u003d EmptyIterator.OfNodes.THE_INSTANCE;\n                }\n                break;\n            case AxisInfo.DESCENDANT_OR_SELF:\n                result \u003d new Navigator.DescendantEnumeration(this, true, true);\n                break;\n            default:\n                throw throwUnsupportedOperationException();\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/xpath/RootNode.java"
    }
  }
}