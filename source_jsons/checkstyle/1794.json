{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplifyBooleanReturnCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
  "functionStartLine": 132,
  "functionEndLine": 155,
  "numCommitsSeen": 73,
  "timeTaken": 2220,
  "changeHistory": [
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3",
    "27149f3504a2f350b74f456a9bffbae76a460060",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14",
    "846d0c9b424e0605c5c1a3532f8a422f99040297",
    "eb522eece2f04cefd75931be5066eaebf2b34b51",
    "a298a50d48358e58be31eaea6b9f0e263f5f046e",
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50",
    "f1ef403f5e8fab7f9c68100f5089bb24ecf46bb9",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d"
  ],
  "changeHistoryShort": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": "Ybodychange",
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": "Ybodychange",
    "27149f3504a2f350b74f456a9bffbae76a460060": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": "Yfilerename",
    "846d0c9b424e0605c5c1a3532f8a422f99040297": "Ybodychange",
    "eb522eece2f04cefd75931be5066eaebf2b34b51": "Ybodychange",
    "a298a50d48358e58be31eaea6b9f0e263f5f046e": "Ybodychange",
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50": "Ybodychange",
    "f1ef403f5e8fab7f9c68100f5089bb24ecf46bb9": "Ybodychange",
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": "Ybodychange",
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": {
      "type": "Ybodychange",
      "commitMessage": "minor: remove unnecessary antlr classes from main code",
      "commitDate": "30/03/19 5:55 AM",
      "commitName": "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 73.97,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST ast) {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n-        final AST elseLiteral \u003d\n+        final DetailAST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral !\u003d null) {\n-            final AST elseStatement \u003d elseLiteral.getFirstChild();\n+            final DetailAST elseStatement \u003d elseLiteral.getFirstChild();\n \n             // skip \u0027(\u0027 and \u0027)\u0027\n-            final AST condition \u003d ast.getFirstChild().getNextSibling();\n-            final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n+            final DetailAST condition \u003d ast.getFirstChild().getNextSibling();\n+            final DetailAST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n             if (canReturnOnlyBooleanLiteral(thenStatement)\n                 \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n                 log(ast, MSG_KEY);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final DetailAST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral !\u003d null) {\n            final DetailAST elseStatement \u003d elseLiteral.getFirstChild();\n\n            // skip \u0027(\u0027 and \u0027)\u0027\n            final DetailAST condition \u003d ast.getFirstChild().getNextSibling();\n            final DetailAST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n            if (canReturnOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n                log(ast, MSG_KEY);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST ast) {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral !\u003d null) {\n             final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n             // skip \u0027(\u0027 and \u0027)\u0027\n             final AST condition \u003d ast.getFirstChild().getNextSibling();\n             final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n             if (canReturnOnlyBooleanLiteral(thenStatement)\n                 \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n-                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n+                log(ast, MSG_KEY);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral !\u003d null) {\n            final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n            // skip \u0027(\u0027 and \u0027)\u0027\n            final AST condition \u003d ast.getFirstChild().getNextSibling();\n            final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n            if (canReturnOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n                log(ast, MSG_KEY);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public void visitToken(DetailAST ast) {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n-        if (elseLiteral \u003d\u003d null) {\n-            return;\n-        }\n-        final AST elseStatement \u003d elseLiteral.getFirstChild();\n+        if (elseLiteral !\u003d null) {\n+            final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n-        // skip \u0027(\u0027 and \u0027)\u0027\n-        final AST condition \u003d ast.getFirstChild().getNextSibling();\n-        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n+            // skip \u0027(\u0027 and \u0027)\u0027\n+            final AST condition \u003d ast.getFirstChild().getNextSibling();\n+            final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n-        if (canReturnOnlyBooleanLiteral(thenStatement)\n-            \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n-            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n+            if (canReturnOnlyBooleanLiteral(thenStatement)\n+                \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n+                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral !\u003d null) {\n            final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n            // skip \u0027(\u0027 and \u0027)\u0027\n            final AST condition \u003d ast.getFirstChild().getNextSibling();\n            final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n            if (canReturnOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n                log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/08/15 10:38 PM",
      "commitNameOld": "83f2b92b18eb10f3849b6a3be99a7b55b886cae0",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void visitToken(DetailAST ast) {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         final AST condition \u003d ast.getFirstChild().getNextSibling();\n         final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n-        if (returnsOnlyBooleanLiteral(thenStatement)\n-            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement)) {\n+        if (canReturnOnlyBooleanLiteral(thenStatement)\n+            \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        final AST condition \u003d ast.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (canReturnOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 canReturnOnlyBooleanLiteral(elseStatement)) {\n            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "dd6b080a16e0933b3d19305f84ba01c8893839f3": {
      "type": "Ybodychange",
      "commitMessage": "all TODO/FIXME were removed , some of them converted to issues\n",
      "commitDate": "23/04/15 10:38 AM",
      "commitName": "dd6b080a16e0933b3d19305f84ba01c8893839f3",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 43.83,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n     public void visitToken(DetailAST ast)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n-        // TODO: Introduce helpers in DetailAST\n         final AST condition \u003d ast.getFirstChild().getNextSibling();\n         final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        final AST condition \u003d ast.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "27149f3504a2f350b74f456a9bffbae76a460060": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, coding package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST ast)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n         final AST condition \u003d ast.getFirstChild().getNextSibling();\n         final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n-            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");\n+            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        final AST condition \u003d ast.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n-            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n+            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n-        final AST condition \u003d aAST.getFirstChild().getNextSibling();\n+        final AST condition \u003d ast.getFirstChild().getNextSibling();\n         final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n-            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n+            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        final AST condition \u003d ast.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "09/01/15 8:44 AM",
          "commitNameOld": "dcb3029c008907edf6aa4b59a51349f0ca94f54b",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 9.9,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n-            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n+            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n-        final AST condition \u003d aAST.getFirstChild().getNextSibling();\n+        final AST condition \u003d ast.getFirstChild().getNextSibling();\n         final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n-            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n+            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            ast.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        final AST condition \u003d ast.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        final AST condition \u003d aAST.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java"
      }
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 224.69,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n-        AST condition \u003d aAST.getFirstChild().getNextSibling();\n-        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n+        final AST condition \u003d aAST.getFirstChild().getNextSibling();\n+        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        final AST condition \u003d aAST.getFirstChild().getNextSibling();\n        final AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Coding checks\n",
      "commitDate": "15/06/03 5:39 AM",
      "commitName": "9920857810ecc9efdbca19e2749b75abc0cbbf14",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/06/03 10:47 AM",
      "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java"
      }
    },
    "846d0c9b424e0605c5c1a3532f8a422f99040297": {
      "type": "Ybodychange",
      "commitMessage": "beef up Javadoc\n",
      "commitDate": "09/12/02 3:20 PM",
      "commitName": "846d0c9b424e0605c5c1a3532f8a422f99040297",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "08/12/02 10:27 PM",
      "commitNameOld": "eb522eece2f04cefd75931be5066eaebf2b34b51",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n-        // thenstatement\n+        // thenStatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n         AST condition \u003d aAST.getFirstChild().getNextSibling();\n         AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenStatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "eb522eece2f04cefd75931be5066eaebf2b34b51": {
      "type": "Ybodychange",
      "commitMessage": "fixed i18n issues\n",
      "commitDate": "08/12/02 10:27 PM",
      "commitName": "eb522eece2f04cefd75931be5066eaebf2b34b51",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "11/11/02 4:01 PM",
      "commitNameOld": "a298a50d48358e58be31eaea6b9f0e263f5f046e",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 27.27,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenstatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         final AST elseLiteral \u003d\n             aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n         if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n         final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n         AST condition \u003d aAST.getFirstChild().getNextSibling();\n         AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n-            // TODO: i18n\n-            log(aAST.getLineNo(),\n-                aAST.getColumnNo(),\n-                \"Remove conditional logic.\");\n+            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenstatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "a298a50d48358e58be31eaea6b9f0e263f5f046e": {
      "type": "Ybodychange",
      "commitMessage": "correction to handle SEMI after LITERAL_RETURN\n",
      "commitDate": "11/11/02 4:01 PM",
      "commitName": "a298a50d48358e58be31eaea6b9f0e263f5f046e",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "07/11/02 11:10 AM",
      "commitNameOld": "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenstatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n-        if (aAST.getChildCount() !\u003d 5) {\n+        final AST elseLiteral \u003d\n+            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n+        if (elseLiteral \u003d\u003d null) {\n             return;\n         }\n+        final AST elseStatement \u003d elseLiteral.getFirstChild();\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n         AST condition \u003d aAST.getFirstChild().getNextSibling();\n         AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n-        AST elseStatement \u003d thenStatement.getNextSibling().getFirstChild();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             // TODO: i18n\n             log(aAST.getLineNo(),\n                 aAST.getColumnNo(),\n                 \"Remove conditional logic.\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenstatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        final AST elseLiteral \u003d\n            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);\n        if (elseLiteral \u003d\u003d null) {\n            return;\n        }\n        final AST elseStatement \u003d elseLiteral.getFirstChild();\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            // TODO: i18n\n            log(aAST.getLineNo(),\n                aAST.getColumnNo(),\n                \"Remove conditional logic.\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50": {
      "type": "Ybodychange",
      "commitMessage": "removed paranoia checks to increase code coverage\n",
      "commitDate": "07/11/02 11:10 AM",
      "commitName": "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "02/11/02 9:09 AM",
      "commitNameOld": "a865663e990e225a3b614c6245aae571817a3f2a",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 5.08,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,29 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        // paranoia - what an untrusting sole :-)\n-        if (aAST.getType() !\u003d TokenTypes.LITERAL_IF) {\n-            throw new IllegalArgumentException(\"not an if\");\n-        }\n-\n         // LITERAL_IF has the following four or five children:\n         // \u0027(\u0027\n         // condition\n         // \u0027)\u0027\n         // thenstatement\n         // [ LITERAL_ELSE (with the elseStatement as a child) ]\n \n         // don\u0027t bother if this is not if then else\n         if (aAST.getChildCount() !\u003d 5) {\n             return;\n         }\n \n         // skip \u0027(\u0027 and \u0027)\u0027\n         // TODO: Introduce helpers in DetailAST\n         AST condition \u003d aAST.getFirstChild().getNextSibling();\n         AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n         AST elseStatement \u003d thenStatement.getNextSibling().getFirstChild();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n             \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             // TODO: i18n\n             log(aAST.getLineNo(),\n                 aAST.getColumnNo(),\n                 \"Remove conditional logic.\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenstatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        if (aAST.getChildCount() !\u003d 5) {\n            return;\n        }\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n        AST elseStatement \u003d thenStatement.getNextSibling().getFirstChild();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n            \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            // TODO: i18n\n            log(aAST.getLineNo(),\n                aAST.getColumnNo(),\n                \"Remove conditional logic.\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "f1ef403f5e8fab7f9c68100f5089bb24ecf46bb9": {
      "type": "Ybodychange",
      "commitMessage": "Added SimplifyBooleanExpressionCheck to find code like \"if (b \u003d\u003d true)\".\nAlso fixed SimplyfyBooleanReturnCheck and introduced tests.\n",
      "commitDate": "21/10/02 12:20 AM",
      "commitName": "f1ef403f5e8fab7f9c68100f5089bb24ecf46bb9",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "18/10/02 11:28 PM",
      "commitNameOld": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // paranoia - what an untrusting sole :-)\n         if (aAST.getType() !\u003d TokenTypes.LITERAL_IF) {\n             throw new IllegalArgumentException(\"not an if\");\n         }\n \n+        // LITERAL_IF has the following four or five children:\n+        // \u0027(\u0027\n+        // condition\n+        // \u0027)\u0027\n+        // thenstatement\n+        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n+\n         // don\u0027t bother if this is not if then else\n-        if (aAST.getChildCount() !\u003d 3) {\n+        if (aAST.getChildCount() !\u003d 5) {\n             return;\n         }\n \n-        AST condition \u003d aAST.getFirstChild();\n-        AST thenStatement \u003d condition.getNextSibling();\n-        AST elseStatement \u003d thenStatement.getNextSibling();\n+        // skip \u0027(\u0027 and \u0027)\u0027\n+        // TODO: Introduce helpers in DetailAST\n+        AST condition \u003d aAST.getFirstChild().getNextSibling();\n+        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n+        AST elseStatement \u003d thenStatement.getNextSibling().getFirstChild();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n                 \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n-            log(aAST.getLineNo(), \"Remove conditional logic.\");\n+            // TODO: i18n\n+            log(aAST.getLineNo(), aAST.getColumnNo(), \"Remove conditional logic.\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia - what an untrusting sole :-)\n        if (aAST.getType() !\u003d TokenTypes.LITERAL_IF) {\n            throw new IllegalArgumentException(\"not an if\");\n        }\n\n        // LITERAL_IF has the following four or five children:\n        // \u0027(\u0027\n        // condition\n        // \u0027)\u0027\n        // thenstatement\n        // [ LITERAL_ELSE (with the elseStatement as a child) ]\n\n        // don\u0027t bother if this is not if then else\n        if (aAST.getChildCount() !\u003d 5) {\n            return;\n        }\n\n        // skip \u0027(\u0027 and \u0027)\u0027\n        // TODO: Introduce helpers in DetailAST\n        AST condition \u003d aAST.getFirstChild().getNextSibling();\n        AST thenStatement \u003d condition.getNextSibling().getNextSibling();\n        AST elseStatement \u003d thenStatement.getNextSibling().getFirstChild();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            // TODO: i18n\n            log(aAST.getLineNo(), aAST.getColumnNo(), \"Remove conditional logic.\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "84eddc36730c1eca845257201c71a0d1fb2d40cf": {
      "type": "Ybodychange",
      "commitMessage": "Added a new class TokenTypes that contains all the type constants. This class\nbreaks the circular dependencies - the cost is needing to maintain this class\nwhen a new grammar is introduced.\n",
      "commitDate": "18/10/02 11:28 PM",
      "commitName": "84eddc36730c1eca845257201c71a0d1fb2d40cf",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "17/10/02 3:52 PM",
      "commitNameOld": "7f35e143a2472ecb49625cc841bd0482fe3dfeea",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // paranoia - what an untrusting sole :-)\n-        if (aAST.getType() !\u003d JavaTokenTypes.LITERAL_if) {\n+        if (aAST.getType() !\u003d TokenTypes.LITERAL_IF) {\n             throw new IllegalArgumentException(\"not an if\");\n         }\n \n         // don\u0027t bother if this is not if then else\n         if (aAST.getChildCount() !\u003d 3) {\n             return;\n         }\n \n         AST condition \u003d aAST.getFirstChild();\n         AST thenStatement \u003d condition.getNextSibling();\n         AST elseStatement \u003d thenStatement.getNextSibling();\n \n         if (returnsOnlyBooleanLiteral(thenStatement)\n                 \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n         {\n             log(aAST.getLineNo(), \"Remove conditional logic.\");\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia - what an untrusting sole :-)\n        if (aAST.getType() !\u003d TokenTypes.LITERAL_IF) {\n            throw new IllegalArgumentException(\"not an if\");\n        }\n\n        // don\u0027t bother if this is not if then else\n        if (aAST.getChildCount() !\u003d 3) {\n            return;\n        }\n\n        AST condition \u003d aAST.getFirstChild();\n        AST thenStatement \u003d condition.getNextSibling();\n        AST elseStatement \u003d thenStatement.getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), \"Remove conditional logic.\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java",
      "extendedDetails": {}
    },
    "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d": {
      "type": "Yintroduced",
      "commitMessage": "initial checkin of check implementations\n",
      "commitDate": "15/09/02 9:35 AM",
      "commitName": "15b4a0f888fb1d5b374fdd5ae11ec1865113c30d",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,22 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // paranoia - what an untrusting sole :-)\n+        if (aAST.getType() !\u003d JavaTokenTypes.LITERAL_if) {\n+            throw new IllegalArgumentException(\"not an if\");\n+        }\n+\n+        // don\u0027t bother if this is not if then else\n+        if (aAST.getChildCount() !\u003d 3) {\n+            return;\n+        }\n+\n+        AST condition \u003d aAST.getFirstChild();\n+        AST thenStatement \u003d condition.getNextSibling();\n+        AST elseStatement \u003d thenStatement.getNextSibling();\n+\n+        if (returnsOnlyBooleanLiteral(thenStatement)\n+                \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n+        {\n+            log(aAST.getLineNo(), \"Remove conditional logic.\");\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia - what an untrusting sole :-)\n        if (aAST.getType() !\u003d JavaTokenTypes.LITERAL_if) {\n            throw new IllegalArgumentException(\"not an if\");\n        }\n\n        // don\u0027t bother if this is not if then else\n        if (aAST.getChildCount() !\u003d 3) {\n            return;\n        }\n\n        AST condition \u003d aAST.getFirstChild();\n        AST thenStatement \u003d condition.getNextSibling();\n        AST elseStatement \u003d thenStatement.getNextSibling();\n\n        if (returnsOnlyBooleanLiteral(thenStatement)\n                \u0026\u0026 returnsOnlyBooleanLiteral(elseStatement))\n        {\n            log(aAST.getLineNo(), \"Remove conditional logic.\");\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java"
    }
  }
}