{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SuppressWarningsHolder.java",
  "functionName": "getStringExpr",
  "functionId": "getStringExpr___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
  "functionStartLine": 457,
  "functionEndLine": 477,
  "numCommitsSeen": 95,
  "timeTaken": 1969,
  "changeHistory": [
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
    "0da1e4d980420f6abb465af441e5ced254698273",
    "4b2962136f5b47b80b43e32a94b6e260f686c77d",
    "e3c089a4cde5e1074dfec8801727de1e3395a2ef",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a"
  ],
  "changeHistoryShort": {
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": "Ybodychange",
    "0da1e4d980420f6abb465af441e5ced254698273": "Ybodychange",
    "4b2962136f5b47b80b43e32a94b6e260f686c77d": "Ybodychange",
    "e3c089a4cde5e1074dfec8801727de1e3395a2ef": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1290: Coverage has been increased to 100% in SuppressWarningsHolder.\n",
      "commitDate": "30/09/15 6:05 PM",
      "commitName": "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "29/09/15 4:52 PM",
      "commitNameOld": "d877cb15cfeae5f06a5d546dcc860c2aa32caac4",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n     private static String getStringExpr(DetailAST ast) {\n-        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n-            final DetailAST firstChild \u003d ast.getFirstChild();\n-            String expr \u003d \"\";\n+        final DetailAST firstChild \u003d ast.getFirstChild();\n+        String expr \u003d \"\";\n \n-            switch (firstChild.getType()) {\n-                case TokenTypes.STRING_LITERAL:\n-                    // NOTE: escaped characters are not unescaped\n-                    final String quotedText \u003d firstChild.getText();\n-                    expr \u003d quotedText.substring(1, quotedText.length() - 1);\n-                    break;\n-                case TokenTypes.IDENT:\n-                    expr \u003d firstChild.getText();\n-                    break;\n-                case TokenTypes.DOT:\n-                    expr \u003d firstChild.getLastChild().getText();\n-                    break;\n-                default:\n-                    // annotations with complex expressions cannot suppress warnings\n-            }\n-            return expr;\n+        switch (firstChild.getType()) {\n+            case TokenTypes.STRING_LITERAL:\n+                // NOTE: escaped characters are not unescaped\n+                final String quotedText \u003d firstChild.getText();\n+                expr \u003d quotedText.substring(1, quotedText.length() - 1);\n+                break;\n+            case TokenTypes.IDENT:\n+                expr \u003d firstChild.getText();\n+                break;\n+            case TokenTypes.DOT:\n+                expr \u003d firstChild.getLastChild().getText();\n+                break;\n+            default:\n+                // annotations with complex expressions cannot suppress warnings\n         }\n-        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n+        return expr;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST ast) {\n        final DetailAST firstChild \u003d ast.getFirstChild();\n        String expr \u003d \"\";\n\n        switch (firstChild.getType()) {\n            case TokenTypes.STRING_LITERAL:\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                expr \u003d quotedText.substring(1, quotedText.length() - 1);\n                break;\n            case TokenTypes.IDENT:\n                expr \u003d firstChild.getText();\n                break;\n            case TokenTypes.DOT:\n                expr \u003d firstChild.getLastChild().getText();\n                break;\n            default:\n                // annotations with complex expressions cannot suppress warnings\n        }\n        return expr;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "0da1e4d980420f6abb465af441e5ced254698273": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violations (partial fix)\n",
      "commitDate": "19/08/15 10:06 PM",
      "commitName": "0da1e4d980420f6abb465af441e5ced254698273",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,24 @@\n     private static String getStringExpr(DetailAST ast) {\n         if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n             final DetailAST firstChild \u003d ast.getFirstChild();\n+            String expr \u003d \"\";\n+\n             switch (firstChild.getType()) {\n                 case TokenTypes.STRING_LITERAL:\n                     // NOTE: escaped characters are not unescaped\n                     final String quotedText \u003d firstChild.getText();\n-                    return quotedText.substring(1, quotedText.length() - 1);\n+                    expr \u003d quotedText.substring(1, quotedText.length() - 1);\n+                    break;\n                 case TokenTypes.IDENT:\n-                    return firstChild.getText();\n+                    expr \u003d firstChild.getText();\n+                    break;\n                 case TokenTypes.DOT:\n-                    return firstChild.getLastChild().getText();\n+                    expr \u003d firstChild.getLastChild().getText();\n+                    break;\n                 default:\n                     // annotations with complex expressions cannot suppress warnings\n-                    return \"\";\n             }\n+            return expr;\n         }\n         throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST ast) {\n        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d ast.getFirstChild();\n            String expr \u003d \"\";\n\n            switch (firstChild.getType()) {\n                case TokenTypes.STRING_LITERAL:\n                    // NOTE: escaped characters are not unescaped\n                    final String quotedText \u003d firstChild.getText();\n                    expr \u003d quotedText.substring(1, quotedText.length() - 1);\n                    break;\n                case TokenTypes.IDENT:\n                    expr \u003d firstChild.getText();\n                    break;\n                case TokenTypes.DOT:\n                    expr \u003d firstChild.getLastChild().getText();\n                    break;\n                default:\n                    // annotations with complex expressions cannot suppress warnings\n            }\n            return expr;\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "4b2962136f5b47b80b43e32a94b6e260f686c77d": {
      "type": "Ybodychange",
      "commitMessage": "Fix exception in SuppressWarningsHolder on complex annotations. #1148\n",
      "commitDate": "03/06/15 8:09 AM",
      "commitName": "4b2962136f5b47b80b43e32a94b6e260f686c77d",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "03/06/15 8:09 AM",
      "commitNameOld": "e3c089a4cde5e1074dfec8801727de1e3395a2ef",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     private static String getStringExpr(DetailAST ast) {\n         if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n             final DetailAST firstChild \u003d ast.getFirstChild();\n             switch (firstChild.getType()) {\n                 case TokenTypes.STRING_LITERAL:\n                     // NOTE: escaped characters are not unescaped\n                     final String quotedText \u003d firstChild.getText();\n                     return quotedText.substring(1, quotedText.length() - 1);\n                 case TokenTypes.IDENT:\n                     return firstChild.getText();\n                 case TokenTypes.DOT:\n                     return firstChild.getLastChild().getText();\n                 default:\n-                    throw new IllegalArgumentException(\"String literal AST expected: \"\n-                            + firstChild);\n+                    // annotations with complex expressions cannot suppress warnings\n+                    return \"\";\n             }\n         }\n         throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST ast) {\n        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d ast.getFirstChild();\n            switch (firstChild.getType()) {\n                case TokenTypes.STRING_LITERAL:\n                    // NOTE: escaped characters are not unescaped\n                    final String quotedText \u003d firstChild.getText();\n                    return quotedText.substring(1, quotedText.length() - 1);\n                case TokenTypes.IDENT:\n                    return firstChild.getText();\n                case TokenTypes.DOT:\n                    return firstChild.getLastChild().getText();\n                default:\n                    // annotations with complex expressions cannot suppress warnings\n                    return \"\";\n            }\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "e3c089a4cde5e1074dfec8801727de1e3395a2ef": {
      "type": "Ybodychange",
      "commitMessage": "Fix exception in SuppressWarningsHolder on annotation with dot. #1148\n",
      "commitDate": "03/06/15 8:09 AM",
      "commitName": "e3c089a4cde5e1074dfec8801727de1e3395a2ef",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 17.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n     private static String getStringExpr(DetailAST ast) {\n         if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n             final DetailAST firstChild \u003d ast.getFirstChild();\n             switch (firstChild.getType()) {\n                 case TokenTypes.STRING_LITERAL:\n                     // NOTE: escaped characters are not unescaped\n                     final String quotedText \u003d firstChild.getText();\n                     return quotedText.substring(1, quotedText.length() - 1);\n                 case TokenTypes.IDENT:\n                     return firstChild.getText();\n+                case TokenTypes.DOT:\n+                    return firstChild.getLastChild().getText();\n                 default:\n                     throw new IllegalArgumentException(\"String literal AST expected: \"\n                             + firstChild);\n             }\n         }\n         throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST ast) {\n        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d ast.getFirstChild();\n            switch (firstChild.getType()) {\n                case TokenTypes.STRING_LITERAL:\n                    // NOTE: escaped characters are not unescaped\n                    final String quotedText \u003d firstChild.getText();\n                    return quotedText.substring(1, quotedText.length() - 1);\n                case TokenTypes.IDENT:\n                    return firstChild.getText();\n                case TokenTypes.DOT:\n                    return firstChild.getLastChild().getText();\n                default:\n                    throw new IllegalArgumentException(\"String literal AST expected: \"\n                            + firstChild);\n            }\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "30/12/14 9:11 AM",
          "commitNameOld": "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 19.89,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    private static String getStringExpr(DetailAST aAST)\n+    private static String getStringExpr(DetailAST ast)\n     {\n-        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n-            final DetailAST firstChild \u003d aAST.getFirstChild();\n+        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n+            final DetailAST firstChild \u003d ast.getFirstChild();\n             switch (firstChild.getType()) {\n             case TokenTypes.STRING_LITERAL:\n                 // NOTE: escaped characters are not unescaped\n                 final String quotedText \u003d firstChild.getText();\n                 return quotedText.substring(1, quotedText.length() - 1);\n             case TokenTypes.IDENT:\n                 return firstChild.getText();\n             default:\n                 throw new IllegalArgumentException(\"String literal AST expected: \"\n                         + firstChild);\n             }\n         }\n-        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n+        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getStringExpr(DetailAST ast)\n    {\n        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d ast.getFirstChild();\n            switch (firstChild.getType()) {\n            case TokenTypes.STRING_LITERAL:\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                return quotedText.substring(1, quotedText.length() - 1);\n            case TokenTypes.IDENT:\n                return firstChild.getText();\n            default:\n                throw new IllegalArgumentException(\"String literal AST expected: \"\n                        + firstChild);\n            }\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "30/12/14 9:11 AM",
          "commitNameOld": "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 19.89,
          "commitsBetweenForRepo": 41,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-    private static String getStringExpr(DetailAST aAST)\n+    private static String getStringExpr(DetailAST ast)\n     {\n-        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n-            final DetailAST firstChild \u003d aAST.getFirstChild();\n+        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n+            final DetailAST firstChild \u003d ast.getFirstChild();\n             switch (firstChild.getType()) {\n             case TokenTypes.STRING_LITERAL:\n                 // NOTE: escaped characters are not unescaped\n                 final String quotedText \u003d firstChild.getText();\n                 return quotedText.substring(1, quotedText.length() - 1);\n             case TokenTypes.IDENT:\n                 return firstChild.getText();\n             default:\n                 throw new IllegalArgumentException(\"String literal AST expected: \"\n                         + firstChild);\n             }\n         }\n-        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n+        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static String getStringExpr(DetailAST ast)\n    {\n        if (ast !\u003d null \u0026\u0026 ast.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d ast.getFirstChild();\n            switch (firstChild.getType()) {\n            case TokenTypes.STRING_LITERAL:\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                return quotedText.substring(1, quotedText.length() - 1);\n            case TokenTypes.IDENT:\n                return firstChild.getText();\n            default:\n                throw new IllegalArgumentException(\"String literal AST expected: \"\n                        + firstChild);\n            }\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
          "extendedDetails": {}
        }
      ]
    },
    "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9": {
      "type": "Ybodychange",
      "commitMessage": "Suppress Warnings Holder - fixed throwing exception if annotation uses constant value, issue #539\n",
      "commitDate": "30/12/14 9:11 AM",
      "commitName": "98684b95a5eb4e6a8bad5ddb347de0c64b0d2df9",
      "commitAuthor": "alexkravin",
      "commitDateOld": "06/12/14 12:41 PM",
      "commitNameOld": "aa829d408fe23bf21a948971a4cad61b36caea94",
      "commitAuthorOld": "ychulovskyy",
      "daysBetweenCommits": 23.85,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,18 @@\n     private static String getStringExpr(DetailAST aAST)\n     {\n         if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n             final DetailAST firstChild \u003d aAST.getFirstChild();\n-            if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n+            switch (firstChild.getType()) {\n+            case TokenTypes.STRING_LITERAL:\n                 // NOTE: escaped characters are not unescaped\n                 final String quotedText \u003d firstChild.getText();\n                 return quotedText.substring(1, quotedText.length() - 1);\n+            case TokenTypes.IDENT:\n+                return firstChild.getText();\n+            default:\n+                throw new IllegalArgumentException(\"String literal AST expected: \"\n+                        + firstChild);\n             }\n-            throw new IllegalArgumentException(\"String literal AST expected: \"\n-                + firstChild);\n         }\n         throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST aAST)\n    {\n        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d aAST.getFirstChild();\n            switch (firstChild.getType()) {\n            case TokenTypes.STRING_LITERAL:\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                return quotedText.substring(1, quotedText.length() - 1);\n            case TokenTypes.IDENT:\n                return firstChild.getText();\n            default:\n                throw new IllegalArgumentException(\"String literal AST expected: \"\n                        + firstChild);\n            }\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private static String getStringExpr(DetailAST aAST)\n    {\n        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d aAST.getFirstChild();\n            if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                return quotedText.substring(1, quotedText.length() - 1);\n            }\n            throw new IllegalArgumentException(\"String literal AST expected: \"\n                + firstChild);\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java"
      }
    },
    "fbe0d8d932d74d39801d15e3305fa3ef83b5032a": {
      "type": "Yintroduced",
      "commitMessage": "Apply patch# #156 Check suppression with @SuppressWarnings\n",
      "commitDate": "12/06/13 4:28 AM",
      "commitName": "fbe0d8d932d74d39801d15e3305fa3ef83b5032a",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,14 @@\n+    private static String getStringExpr(DetailAST aAST)\n+    {\n+        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n+            final DetailAST firstChild \u003d aAST.getFirstChild();\n+            if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n+                // NOTE: escaped characters are not unescaped\n+                final String quotedText \u003d firstChild.getText();\n+                return quotedText.substring(1, quotedText.length() - 1);\n+            }\n+            throw new IllegalArgumentException(\"String literal AST expected: \"\n+                + firstChild);\n+        }\n+        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static String getStringExpr(DetailAST aAST)\n    {\n        if (aAST !\u003d null \u0026\u0026 aAST.getType() \u003d\u003d TokenTypes.EXPR) {\n            final DetailAST firstChild \u003d aAST.getFirstChild();\n            if (firstChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                // NOTE: escaped characters are not unescaped\n                final String quotedText \u003d firstChild.getText();\n                return quotedText.substring(1, quotedText.length() - 1);\n            }\n            throw new IllegalArgumentException(\"String literal AST expected: \"\n                + firstChild);\n        }\n        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java"
    }
  }
}