{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SuppressWarningsCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
  "functionStartLine": 188,
  "functionEndLine": 247,
  "numCommitsSeen": 69,
  "timeTaken": 2330,
  "changeHistory": [
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "423ed9e469db620671459827b58c89025d8f6c66",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "840034a6cb56eb86154ebdedecd60b3c2140b806",
    "eef13e8c5ee6922af938d9eef3d73799ce71798b",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
    "169729f60b9aba5736b15f3514ae41ed994512f2",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "c876d2431e56405371b93c814de33c350766266d",
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767"
  ],
  "changeHistoryShort": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "423ed9e469db620671459827b58c89025d8f6c66": "Ybodychange",
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ybodychange",
    "840034a6cb56eb86154ebdedecd60b3c2140b806": "Ybodychange",
    "eef13e8c5ee6922af938d9eef3d73799ce71798b": "Ybodychange",
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": "Ymultichange(Yparameterchange,Ybodychange)",
    "169729f60b9aba5736b15f3514ae41ed994512f2": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "c876d2431e56405371b93c814de33c350766266d": "Ybodychange",
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267": "Ybodychange",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,60 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d getSuppressWarnings(ast);\n \n         if (annotation !\u003d null) {\n             final DetailAST warningHolder \u003d\n                 findWarningsHolder(annotation);\n \n             final DetailAST token \u003d\n                     warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n             DetailAST warning;\n \n             if (token \u003d\u003d null) {\n                 warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n             }\n             else {\n                 // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n                 warning \u003d token.findFirstToken(TokenTypes.EXPR);\n             }\n \n             //rare case with empty array ex: @SuppressWarnings({})\n             if (warning \u003d\u003d null) {\n                 //check to see if empty warnings are forbidden -- are by default\n-                logMatch(warningHolder.getLineNo(),\n-                    warningHolder.getColumnNo(), \"\");\n+                logMatch(warningHolder, \"\");\n             }\n             else {\n                 while (warning !\u003d null) {\n                     if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                         final DetailAST fChild \u003d warning.getFirstChild();\n                         switch (fChild.getType()) {\n                             //typical case\n                             case TokenTypes.STRING_LITERAL:\n                                 final String warningText \u003d\n                                     removeQuotes(warning.getFirstChild().getText());\n-                                logMatch(warning.getLineNo(),\n-                                        warning.getColumnNo(), warningText);\n+                                logMatch(warning, warningText);\n                                 break;\n                             // conditional case\n                             // ex:\n                             // @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                             case TokenTypes.QUESTION:\n                                 walkConditional(fChild);\n                                 break;\n                             // param in constant case\n                             // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                             // @SuppressWarnings(UNCHECKED)\n                             // or\n                             // @SuppressWarnings(SomeClass.UNCHECKED)\n                             case TokenTypes.IDENT:\n                             case TokenTypes.DOT:\n                                 break;\n                             default:\n                                 // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                                 // @SuppressWarnings((String) \"unused\") are not properly supported,\n                                 // but they should not cause exceptions.\n                         }\n                     }\n                     warning \u003d warning.getNextSibling();\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d getSuppressWarnings(ast);\n\n        if (annotation !\u003d null) {\n            final DetailAST warningHolder \u003d\n                findWarningsHolder(annotation);\n\n            final DetailAST token \u003d\n                    warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n            DetailAST warning;\n\n            if (token \u003d\u003d null) {\n                warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n            }\n            else {\n                // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n                warning \u003d token.findFirstToken(TokenTypes.EXPR);\n            }\n\n            //rare case with empty array ex: @SuppressWarnings({})\n            if (warning \u003d\u003d null) {\n                //check to see if empty warnings are forbidden -- are by default\n                logMatch(warningHolder, \"\");\n            }\n            else {\n                while (warning !\u003d null) {\n                    if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                        final DetailAST fChild \u003d warning.getFirstChild();\n                        switch (fChild.getType()) {\n                            //typical case\n                            case TokenTypes.STRING_LITERAL:\n                                final String warningText \u003d\n                                    removeQuotes(warning.getFirstChild().getText());\n                                logMatch(warning, warningText);\n                                break;\n                            // conditional case\n                            // ex:\n                            // @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                            case TokenTypes.QUESTION:\n                                walkConditional(fChild);\n                                break;\n                            // param in constant case\n                            // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                            // @SuppressWarnings(UNCHECKED)\n                            // or\n                            // @SuppressWarnings(SomeClass.UNCHECKED)\n                            case TokenTypes.IDENT:\n                            case TokenTypes.DOT:\n                                break;\n                            default:\n                                // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                                // @SuppressWarnings((String) \"unused\") are not properly supported,\n                                // but they should not cause exceptions.\n                        }\n                    }\n                    warning \u003d warning.getNextSibling();\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d getSuppressWarnings(ast);\n \n-        if (annotation \u003d\u003d null) {\n-            return;\n-        }\n+        if (annotation !\u003d null) {\n+            final DetailAST warningHolder \u003d\n+                findWarningsHolder(annotation);\n \n-        final DetailAST warningHolder \u003d\n-            findWarningsHolder(annotation);\n+            final DetailAST token \u003d\n+                    warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n+            DetailAST warning;\n \n-        final DetailAST token \u003d\n-                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n-        DetailAST warning;\n+            if (token \u003d\u003d null) {\n+                warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n+            }\n+            else {\n+                // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n+                warning \u003d token.findFirstToken(TokenTypes.EXPR);\n+            }\n \n-        if (token \u003d\u003d null) {\n-            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n-        }\n-        else {\n-            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n-            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n-        }\n-\n-        //rare case with empty array ex: @SuppressWarnings({})\n-        if (warning \u003d\u003d null) {\n-            //check to see if empty warnings are forbidden -- are by default\n-            logMatch(warningHolder.getLineNo(),\n-                warningHolder.getColumnNo(), \"\");\n-            return;\n-        }\n-\n-        while (warning !\u003d null) {\n-            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n-                final DetailAST fChild \u003d warning.getFirstChild();\n-                switch (fChild.getType()) {\n-                    //typical case\n-                    case TokenTypes.STRING_LITERAL:\n-                        final String warningText \u003d\n-                            removeQuotes(warning.getFirstChild().getText());\n-                        logMatch(warning.getLineNo(),\n-                                warning.getColumnNo(), warningText);\n-                        break;\n-                    // conditional case\n-                    // ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n-                    case TokenTypes.QUESTION:\n-                        walkConditional(fChild);\n-                        break;\n-                    // param in constant case\n-                    // ex: public static final String UNCHECKED \u003d \"unchecked\";\n-                    // @SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n-                    case TokenTypes.IDENT:\n-                    case TokenTypes.DOT:\n-                        break;\n-                    default:\n-                        // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n-                        // @SuppressWarnings((String) \"unused\") are not properly supported,\n-                        // but they should not cause exceptions.\n+            //rare case with empty array ex: @SuppressWarnings({})\n+            if (warning \u003d\u003d null) {\n+                //check to see if empty warnings are forbidden -- are by default\n+                logMatch(warningHolder.getLineNo(),\n+                    warningHolder.getColumnNo(), \"\");\n+            }\n+            else {\n+                while (warning !\u003d null) {\n+                    if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n+                        final DetailAST fChild \u003d warning.getFirstChild();\n+                        switch (fChild.getType()) {\n+                            //typical case\n+                            case TokenTypes.STRING_LITERAL:\n+                                final String warningText \u003d\n+                                    removeQuotes(warning.getFirstChild().getText());\n+                                logMatch(warning.getLineNo(),\n+                                        warning.getColumnNo(), warningText);\n+                                break;\n+                            // conditional case\n+                            // ex:\n+                            // @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n+                            case TokenTypes.QUESTION:\n+                                walkConditional(fChild);\n+                                break;\n+                            // param in constant case\n+                            // ex: public static final String UNCHECKED \u003d \"unchecked\";\n+                            // @SuppressWarnings(UNCHECKED)\n+                            // or\n+                            // @SuppressWarnings(SomeClass.UNCHECKED)\n+                            case TokenTypes.IDENT:\n+                            case TokenTypes.DOT:\n+                                break;\n+                            default:\n+                                // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n+                                // @SuppressWarnings((String) \"unused\") are not properly supported,\n+                                // but they should not cause exceptions.\n+                        }\n+                    }\n+                    warning \u003d warning.getNextSibling();\n                 }\n             }\n-            warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d getSuppressWarnings(ast);\n\n        if (annotation !\u003d null) {\n            final DetailAST warningHolder \u003d\n                findWarningsHolder(annotation);\n\n            final DetailAST token \u003d\n                    warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n            DetailAST warning;\n\n            if (token \u003d\u003d null) {\n                warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n            }\n            else {\n                // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n                warning \u003d token.findFirstToken(TokenTypes.EXPR);\n            }\n\n            //rare case with empty array ex: @SuppressWarnings({})\n            if (warning \u003d\u003d null) {\n                //check to see if empty warnings are forbidden -- are by default\n                logMatch(warningHolder.getLineNo(),\n                    warningHolder.getColumnNo(), \"\");\n            }\n            else {\n                while (warning !\u003d null) {\n                    if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                        final DetailAST fChild \u003d warning.getFirstChild();\n                        switch (fChild.getType()) {\n                            //typical case\n                            case TokenTypes.STRING_LITERAL:\n                                final String warningText \u003d\n                                    removeQuotes(warning.getFirstChild().getText());\n                                logMatch(warning.getLineNo(),\n                                        warning.getColumnNo(), warningText);\n                                break;\n                            // conditional case\n                            // ex:\n                            // @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                            case TokenTypes.QUESTION:\n                                walkConditional(fChild);\n                                break;\n                            // param in constant case\n                            // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                            // @SuppressWarnings(UNCHECKED)\n                            // or\n                            // @SuppressWarnings(SomeClass.UNCHECKED)\n                            case TokenTypes.IDENT:\n                            case TokenTypes.DOT:\n                                break;\n                            default:\n                                // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                                // @SuppressWarnings((String) \"unused\") are not properly supported,\n                                // but they should not cause exceptions.\n                        }\n                    }\n                    warning \u003d warning.getNextSibling();\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "423ed9e469db620671459827b58c89025d8f6c66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:55 PM",
      "commitName": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "31/08/15 11:51 AM",
      "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 37.25,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             findWarningsHolder(annotation);\n \n         final DetailAST token \u003d\n                 warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n         DetailAST warning;\n \n-        if (token !\u003d null) {\n-            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n-            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n+        if (token \u003d\u003d null) {\n+            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n         }\n         else {\n-            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n+            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n+            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n         }\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                     //typical case\n                     case TokenTypes.STRING_LITERAL:\n                         final String warningText \u003d\n                             removeQuotes(warning.getFirstChild().getText());\n                         logMatch(warning.getLineNo(),\n                                 warning.getColumnNo(), warningText);\n                         break;\n                     // conditional case\n                     // ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                     case TokenTypes.QUESTION:\n                         walkConditional(fChild);\n                         break;\n                     // param in constant case\n                     // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                     // @SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                     case TokenTypes.IDENT:\n                     case TokenTypes.DOT:\n                         break;\n                     default:\n                         // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                         // @SuppressWarnings((String) \"unused\") are not properly supported,\n                         // but they should not cause exceptions.\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            findWarningsHolder(annotation);\n\n        final DetailAST token \u003d\n                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n        DetailAST warning;\n\n        if (token \u003d\u003d null) {\n            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n        }\n        else {\n            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n        }\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                    //typical case\n                    case TokenTypes.STRING_LITERAL:\n                        final String warningText \u003d\n                            removeQuotes(warning.getFirstChild().getText());\n                        logMatch(warning.getLineNo(),\n                                warning.getColumnNo(), warningText);\n                        break;\n                    // conditional case\n                    // ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                    case TokenTypes.QUESTION:\n                        walkConditional(fChild);\n                        break;\n                    // param in constant case\n                    // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                    // @SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                    case TokenTypes.IDENT:\n                    case TokenTypes.DOT:\n                        break;\n                    default:\n                        // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                        // @SuppressWarnings((String) \"unused\") are not properly supported,\n                        // but they should not cause exceptions.\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary this keyword. #1555\n\nFixes `UnnecessaryThis` inspection violations.\n\nDescription:\n\u003eReports on any unnecessary uses of this in the code. Using this to disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged by many coding styles.\n For example:\n ```\n this.a \u003d 3;\n ```\n",
      "commitDate": "09/08/15 7:41 AM",
      "commitName": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "08/08/15 1:54 AM",
      "commitNameOld": "2da168644500c915660b7cfac9668b44317d81fc",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             findWarningsHolder(annotation);\n \n         final DetailAST token \u003d\n                 warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n         DetailAST warning;\n \n         if (token !\u003d null) {\n             // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n             warning \u003d token.findFirstToken(TokenTypes.EXPR);\n         }\n         else {\n             warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n         }\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n-            this.logMatch(warningHolder.getLineNo(),\n+            logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                     //typical case\n                     case TokenTypes.STRING_LITERAL:\n                         final String warningText \u003d\n                             removeQuotes(warning.getFirstChild().getText());\n-                        this.logMatch(warning.getLineNo(),\n+                        logMatch(warning.getLineNo(),\n                                 warning.getColumnNo(), warningText);\n                         break;\n                     // conditional case\n                     // ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                     case TokenTypes.QUESTION:\n-                        this.walkConditional(fChild);\n+                        walkConditional(fChild);\n                         break;\n                     // param in constant case\n                     // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                     // @SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                     case TokenTypes.IDENT:\n                     case TokenTypes.DOT:\n                         break;\n                     default:\n                         // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                         // @SuppressWarnings((String) \"unused\") are not properly supported,\n                         // but they should not cause exceptions.\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            findWarningsHolder(annotation);\n\n        final DetailAST token \u003d\n                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n        DetailAST warning;\n\n        if (token !\u003d null) {\n            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n        }\n        else {\n            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n        }\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                    //typical case\n                    case TokenTypes.STRING_LITERAL:\n                        final String warningText \u003d\n                            removeQuotes(warning.getFirstChild().getText());\n                        logMatch(warning.getLineNo(),\n                                warning.getColumnNo(), warningText);\n                        break;\n                    // conditional case\n                    // ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                    case TokenTypes.QUESTION:\n                        walkConditional(fChild);\n                        break;\n                    // param in constant case\n                    // ex: public static final String UNCHECKED \u003d \"unchecked\";\n                    // @SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                    case TokenTypes.IDENT:\n                    case TokenTypes.DOT:\n                        break;\n                    default:\n                        // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                        // @SuppressWarnings((String) \"unused\") are not properly supported,\n                        // but they should not cause exceptions.\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ybodychange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "06/07/15 7:02 AM",
      "commitNameOld": "eb70f7062f2517a2f7a511090b31789a92c15a2e",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 11.62,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n     public void visitToken(final DetailAST ast) {\n-        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n+        final DetailAST annotation \u003d getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n-            this.findWarningsHolder(annotation);\n+            findWarningsHolder(annotation);\n \n         final DetailAST token \u003d\n                 warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n         DetailAST warning;\n \n         if (token !\u003d null) {\n             // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n             warning \u003d token.findFirstToken(TokenTypes.EXPR);\n         }\n         else {\n             warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n         }\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                     //typical case\n                     case TokenTypes.STRING_LITERAL:\n                         final String warningText \u003d\n-                            this.removeQuotes(warning.getFirstChild().getText());\n+                            removeQuotes(warning.getFirstChild().getText());\n                         this.logMatch(warning.getLineNo(),\n                                 warning.getColumnNo(), warningText);\n                         break;\n                         //conditional case\n                         //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                     case TokenTypes.QUESTION:\n                         this.walkConditional(fChild);\n                         break;\n                         //param in constant case\n                         //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                         //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                     case TokenTypes.IDENT:\n                     case TokenTypes.DOT:\n                         break;\n                     default:\n                         // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                         // @SuppressWarnings((String) \"unused\") are not properly supported,\n                         // but they should not cause exceptions.\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            findWarningsHolder(annotation);\n\n        final DetailAST token \u003d\n                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n        DetailAST warning;\n\n        if (token !\u003d null) {\n            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n        }\n        else {\n            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n        }\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                    //typical case\n                    case TokenTypes.STRING_LITERAL:\n                        final String warningText \u003d\n                            removeQuotes(warning.getFirstChild().getText());\n                        this.logMatch(warning.getLineNo(),\n                                warning.getColumnNo(), warningText);\n                        break;\n                        //conditional case\n                        //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                    case TokenTypes.QUESTION:\n                        this.walkConditional(fChild);\n                        break;\n                        //param in constant case\n                        //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                        //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                    case TokenTypes.IDENT:\n                    case TokenTypes.DOT:\n                        break;\n                    default:\n                        // Known limitation: cases like @SuppressWarnings(\"un\" + \"used\") or\n                        // @SuppressWarnings((String) \"unused\") are not properly supported,\n                        // but they should not cause exceptions.\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "840034a6cb56eb86154ebdedecd60b3c2140b806": {
      "type": "Ybodychange",
      "commitMessage": "Fix exception in SuppressWarnings check on complex annotations. #1201\n",
      "commitDate": "28/06/15 10:30 AM",
      "commitName": "840034a6cb56eb86154ebdedecd60b3c2140b806",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/06/15 10:30 AM",
      "commitNameOld": "eef13e8c5ee6922af938d9eef3d73799ce71798b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n-        final DetailAST token \u003d warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n+        final DetailAST token \u003d\n+                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n         DetailAST warning;\n \n         if (token !\u003d null) {\n             // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n             warning \u003d token.findFirstToken(TokenTypes.EXPR);\n         }\n         else {\n             warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n         }\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                     //typical case\n                     case TokenTypes.STRING_LITERAL:\n                         final String warningText \u003d\n                             this.removeQuotes(warning.getFirstChild().getText());\n                         this.logMatch(warning.getLineNo(),\n                                 warning.getColumnNo(), warningText);\n                         break;\n                         //conditional case\n                         //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                     case TokenTypes.QUESTION:\n                         this.walkConditional(fChild);\n                         break;\n                         //param in constant case\n                         //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                         //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                     case TokenTypes.IDENT:\n                     case TokenTypes.DOT:\n                         break;\n                     default:\n-                        throw new IllegalStateException(\"Should never get here, type: \"\n-                                + fChild.getType() + \" text: \" + fChild.getText());\n+                        // #1252 - cases like @SuppressWarnings(\"un\" + \"used\") or\n+                        // @SuppressWarnings((String) \"unused\")\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        final DetailAST token \u003d\n                warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n        DetailAST warning;\n\n        if (token !\u003d null) {\n            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n        }\n        else {\n            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n        }\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                    //typical case\n                    case TokenTypes.STRING_LITERAL:\n                        final String warningText \u003d\n                            this.removeQuotes(warning.getFirstChild().getText());\n                        this.logMatch(warning.getLineNo(),\n                                warning.getColumnNo(), warningText);\n                        break;\n                        //conditional case\n                        //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                    case TokenTypes.QUESTION:\n                        this.walkConditional(fChild);\n                        break;\n                        //param in constant case\n                        //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                        //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                    case TokenTypes.IDENT:\n                    case TokenTypes.DOT:\n                        break;\n                    default:\n                        // #1252 - cases like @SuppressWarnings(\"un\" + \"used\") or\n                        // @SuppressWarnings((String) \"unused\")\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "eef13e8c5ee6922af938d9eef3d73799ce71798b": {
      "type": "Ybodychange",
      "commitMessage": "Fix value pair representation in SuppressWarnings check. #1246\n",
      "commitDate": "28/06/15 10:30 AM",
      "commitName": "eef13e8c5ee6922af938d9eef3d73799ce71798b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 42.24,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,59 @@\n     public void visitToken(final DetailAST ast) {\n         final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n-        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n+        final DetailAST token \u003d warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n+        DetailAST warning;\n+\n+        if (token !\u003d null) {\n+            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n+            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n+        }\n+        else {\n+            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n+        }\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                     //typical case\n                     case TokenTypes.STRING_LITERAL:\n                         final String warningText \u003d\n                             this.removeQuotes(warning.getFirstChild().getText());\n                         this.logMatch(warning.getLineNo(),\n                                 warning.getColumnNo(), warningText);\n                         break;\n                         //conditional case\n                         //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                     case TokenTypes.QUESTION:\n                         this.walkConditional(fChild);\n                         break;\n                         //param in constant case\n                         //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                         //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                     case TokenTypes.IDENT:\n                     case TokenTypes.DOT:\n                         break;\n                     default:\n                         throw new IllegalStateException(\"Should never get here, type: \"\n                                 + fChild.getType() + \" text: \" + fChild.getText());\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST ast) {\n        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        final DetailAST token \u003d warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);\n        DetailAST warning;\n\n        if (token !\u003d null) {\n            // case like \u0027@SuppressWarnings(value \u003d UNUSED)\u0027\n            warning \u003d token.findFirstToken(TokenTypes.EXPR);\n        }\n        else {\n            warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n        }\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                    //typical case\n                    case TokenTypes.STRING_LITERAL:\n                        final String warningText \u003d\n                            this.removeQuotes(warning.getFirstChild().getText());\n                        this.logMatch(warning.getLineNo(),\n                                warning.getColumnNo(), warningText);\n                        break;\n                        //conditional case\n                        //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                    case TokenTypes.QUESTION:\n                        this.walkConditional(fChild);\n                        break;\n                        //param in constant case\n                        //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                        //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                    case TokenTypes.IDENT:\n                    case TokenTypes.DOT:\n                        break;\n                    default:\n                        throw new IllegalStateException(\"Should never get here, type: \"\n                                + fChild.getType() + \" text: \" + fChild.getText());\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "1bd7f9bdf3dc678b70e79481971aebc50db69dc7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, annotation, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-    public void visitToken(final DetailAST aAST)\n+    public void visitToken(final DetailAST ast)\n     {\n-        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n+        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n         DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                 //typical case\n                 case TokenTypes.STRING_LITERAL:\n                     final String warningText \u003d\n                         this.removeQuotes(warning.getFirstChild().getText());\n                     this.logMatch(warning.getLineNo(),\n                         warning.getColumnNo(), warningText);\n                     break;\n                 //conditional case\n                 //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                 case TokenTypes.QUESTION:\n                     this.walkConditional(fChild);\n                     break;\n                 //param in constant case\n                 //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                 //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                 case TokenTypes.IDENT:\n                 case TokenTypes.DOT:\n                     break;\n                 default:\n                     throw new IllegalStateException(\"Should never get here, type: \"\n                         + fChild.getType() + \" text: \" + fChild.getText());\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                //typical case\n                case TokenTypes.STRING_LITERAL:\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n                    break;\n                //conditional case\n                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                case TokenTypes.QUESTION:\n                    this.walkConditional(fChild);\n                    break;\n                //param in constant case\n                //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                case TokenTypes.IDENT:\n                case TokenTypes.DOT:\n                    break;\n                default:\n                    throw new IllegalStateException(\"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText());\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST(modifiers-final)]",
            "newValue": "[ast-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, annotation, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "28/12/14 3:14 PM",
          "commitNameOld": "09a7ca60414ea04b64f45bb190eaa26c767086be",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 21.64,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n-    public void visitToken(final DetailAST aAST)\n+    public void visitToken(final DetailAST ast)\n     {\n-        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n+        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n         DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n                 switch (fChild.getType()) {\n                 //typical case\n                 case TokenTypes.STRING_LITERAL:\n                     final String warningText \u003d\n                         this.removeQuotes(warning.getFirstChild().getText());\n                     this.logMatch(warning.getLineNo(),\n                         warning.getColumnNo(), warningText);\n                     break;\n                 //conditional case\n                 //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                 case TokenTypes.QUESTION:\n                     this.walkConditional(fChild);\n                     break;\n                 //param in constant case\n                 //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                 //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                 case TokenTypes.IDENT:\n                 case TokenTypes.DOT:\n                     break;\n                 default:\n                     throw new IllegalStateException(\"Should never get here, type: \"\n                         + fChild.getType() + \" text: \" + fChild.getText());\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(final DetailAST ast)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(ast);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                //typical case\n                case TokenTypes.STRING_LITERAL:\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n                    break;\n                //conditional case\n                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                case TokenTypes.QUESTION:\n                    this.walkConditional(fChild);\n                    break;\n                //param in constant case\n                //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                case TokenTypes.IDENT:\n                case TokenTypes.DOT:\n                    break;\n                default:\n                    throw new IllegalStateException(\"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText());\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "169729f60b9aba5736b15f3514ae41ed994512f2": {
      "type": "Ybodychange",
      "commitMessage": "Suppress Warnings Check, annotation param in constant, issue #268\n",
      "commitDate": "18/12/14 11:44 AM",
      "commitName": "169729f60b9aba5736b15f3514ae41ed994512f2",
      "commitAuthor": "alexkravin",
      "commitDateOld": "07/09/14 6:39 PM",
      "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 101.75,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n     public void visitToken(final DetailAST aAST)\n     {\n         final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n         DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n-\n+                switch (fChild.getType()) {\n                 //typical case\n-                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n+                case TokenTypes.STRING_LITERAL:\n                     final String warningText \u003d\n                         this.removeQuotes(warning.getFirstChild().getText());\n                     this.logMatch(warning.getLineNo(),\n                         warning.getColumnNo(), warningText);\n-\n-     //conditional case\n-     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n-                }\n-                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n+                    break;\n+                //conditional case\n+                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n+                case TokenTypes.QUESTION:\n                     this.walkConditional(fChild);\n-                }\n-                else {\n-                    assert false : \"Should never get here, type: \"\n-                        + fChild.getType() + \" text: \" + fChild.getText();\n+                    break;\n+                //param in constant case\n+                //ex: public static final String UNCHECKED \u003d \"unchecked\";\n+                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n+                case TokenTypes.IDENT:\n+                case TokenTypes.DOT:\n+                    break;\n+                default:\n+                    throw new IllegalStateException(\"Should never get here, type: \"\n+                        + fChild.getType() + \" text: \" + fChild.getText());\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n                switch (fChild.getType()) {\n                //typical case\n                case TokenTypes.STRING_LITERAL:\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n                    break;\n                //conditional case\n                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                case TokenTypes.QUESTION:\n                    this.walkConditional(fChild);\n                    break;\n                //param in constant case\n                //ex: public static final String UNCHECKED \u003d \"unchecked\";\n                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)\n                case TokenTypes.IDENT:\n                case TokenTypes.DOT:\n                    break;\n                default:\n                    throw new IllegalStateException(\"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText());\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n\n                //typical case\n                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n\n     //conditional case\n     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                }\n                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                    this.walkConditional(fChild);\n                }\n                else {\n                    assert false : \"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText();\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java"
      }
    },
    "c876d2431e56405371b93c814de33c350766266d": {
      "type": "Ybodychange",
      "commitMessage": "Correct typos\n\nMany fixes to the documentation.\n",
      "commitDate": "06/10/13 1:35 PM",
      "commitName": "c876d2431e56405371b93c814de33c350766266d",
      "commitAuthor": "Andrew Gaul",
      "commitDateOld": "10/09/13 4:11 AM",
      "commitNameOld": "b0c33771f097f4895746eaddd40cb159e5bc5bee",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 26.39,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     public void visitToken(final DetailAST aAST)\n     {\n         final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n         DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n \n                 //typical case\n                 if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                     final String warningText \u003d\n                         this.removeQuotes(warning.getFirstChild().getText());\n                     this.logMatch(warning.getLineNo(),\n                         warning.getColumnNo(), warningText);\n \n      //conditional case\n-     //ex: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n+     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                 }\n                 else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                     this.walkConditional(fChild);\n                 }\n                 else {\n                     assert false : \"Should never get here, type: \"\n                         + fChild.getType() + \" text: \" + fChild.getText();\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n\n                //typical case\n                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n\n     //conditional case\n     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                }\n                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                    this.walkConditional(fChild);\n                }\n                else {\n                    assert false : \"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText();\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267": {
      "type": "Ybodychange",
      "commitMessage": "Supporting fully-qualified annotation names.\n",
      "commitDate": "30/03/09 7:06 PM",
      "commitName": "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267",
      "commitAuthor": "Travis Schneeberger",
      "commitDateOld": "23/03/09 3:49 AM",
      "commitNameOld": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,46 @@\n     public void visitToken(final DetailAST aAST)\n     {\n-        final DetailAST annotation \u003d\n-            AnnotationUtility.getAnnotation(\n-                aAST, SuppressWarningsCheck.SUPPRESS_WARNINGS);\n+        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n \n         if (annotation \u003d\u003d null) {\n             return;\n         }\n \n         final DetailAST warningHolder \u003d\n             this.findWarningsHolder(annotation);\n \n         DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n \n         //rare case with empty array ex: @SuppressWarnings({})\n         if (warning \u003d\u003d null) {\n             //check to see if empty warnings are forbidden -- are by default\n             this.logMatch(warningHolder.getLineNo(),\n                 warningHolder.getColumnNo(), \"\");\n             return;\n         }\n \n         while (warning !\u003d null) {\n             if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                 final DetailAST fChild \u003d warning.getFirstChild();\n \n                 //typical case\n                 if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                     final String warningText \u003d\n                         this.removeQuotes(warning.getFirstChild().getText());\n                     this.logMatch(warning.getLineNo(),\n                         warning.getColumnNo(), warningText);\n \n      //conditional case\n      //ex: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                 }\n                 else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                     this.walkConditional(fChild);\n                 }\n                 else {\n                     assert false : \"Should never get here, type: \"\n                         + fChild.getType() + \" text: \" + fChild.getText();\n                 }\n             }\n             warning \u003d warning.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final DetailAST annotation \u003d this.getSuppressWarnings(aAST);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n\n                //typical case\n                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n\n     //conditional case\n     //ex: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                }\n                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                    this.walkConditional(fChild);\n                }\n                else {\n                    assert false : \"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText();\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java",
      "extendedDetails": {}
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Yintroduced",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,48 @@\n+    public void visitToken(final DetailAST aAST)\n+    {\n+        final DetailAST annotation \u003d\n+            AnnotationUtility.getAnnotation(\n+                aAST, SuppressWarningsCheck.SUPPRESS_WARNINGS);\n+\n+        if (annotation \u003d\u003d null) {\n+            return;\n+        }\n+\n+        final DetailAST warningHolder \u003d\n+            this.findWarningsHolder(annotation);\n+\n+        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n+\n+        //rare case with empty array ex: @SuppressWarnings({})\n+        if (warning \u003d\u003d null) {\n+            //check to see if empty warnings are forbidden -- are by default\n+            this.logMatch(warningHolder.getLineNo(),\n+                warningHolder.getColumnNo(), \"\");\n+            return;\n+        }\n+\n+        while (warning !\u003d null) {\n+            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n+                final DetailAST fChild \u003d warning.getFirstChild();\n+\n+                //typical case\n+                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n+                    final String warningText \u003d\n+                        this.removeQuotes(warning.getFirstChild().getText());\n+                    this.logMatch(warning.getLineNo(),\n+                        warning.getColumnNo(), warningText);\n+\n+     //conditional case\n+     //ex: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n+                }\n+                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n+                    this.walkConditional(fChild);\n+                }\n+                else {\n+                    assert false : \"Should never get here, type: \"\n+                        + fChild.getType() + \" text: \" + fChild.getText();\n+                }\n+            }\n+            warning \u003d warning.getNextSibling();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(final DetailAST aAST)\n    {\n        final DetailAST annotation \u003d\n            AnnotationUtility.getAnnotation(\n                aAST, SuppressWarningsCheck.SUPPRESS_WARNINGS);\n\n        if (annotation \u003d\u003d null) {\n            return;\n        }\n\n        final DetailAST warningHolder \u003d\n            this.findWarningsHolder(annotation);\n\n        DetailAST warning \u003d warningHolder.findFirstToken(TokenTypes.EXPR);\n\n        //rare case with empty array ex: @SuppressWarnings({})\n        if (warning \u003d\u003d null) {\n            //check to see if empty warnings are forbidden -- are by default\n            this.logMatch(warningHolder.getLineNo(),\n                warningHolder.getColumnNo(), \"\");\n            return;\n        }\n\n        while (warning !\u003d null) {\n            if (warning.getType() \u003d\u003d TokenTypes.EXPR) {\n                final DetailAST fChild \u003d warning.getFirstChild();\n\n                //typical case\n                if (fChild.getType() \u003d\u003d TokenTypes.STRING_LITERAL) {\n                    final String warningText \u003d\n                        this.removeQuotes(warning.getFirstChild().getText());\n                    this.logMatch(warning.getLineNo(),\n                        warning.getColumnNo(), warningText);\n\n     //conditional case\n     //ex: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")\n                }\n                else if (fChild.getType() \u003d\u003d TokenTypes.QUESTION) {\n                    this.walkConditional(fChild);\n                }\n                else {\n                    assert false : \"Should never get here, type: \"\n                        + fChild.getType() + \" text: \" + fChild.getText();\n                }\n            }\n            warning \u003d warning.getNextSibling();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java"
    }
  }
}