{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HideUtilityClassConstructorCheck.java",
  "functionName": "invoke",
  "functionId": "invoke",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
  "functionStartLine": 238,
  "functionEndLine": 280,
  "numCommitsSeen": 46,
  "timeTaken": 1475,
  "changeHistory": [
    "42640b0c92aad5b96f2876f76e15ea455909379b",
    "ea7b2dd0a9060d427273bd88909e370cb9f88436",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "39f752cd88cee4ff894846a6c58469e363f65175",
    "d88c251ae40a2636890f55d8257b23d075cf513a",
    "7874cc4909f6e5104f42060528b9069669993533"
  ],
  "changeHistoryShort": {
    "42640b0c92aad5b96f2876f76e15ea455909379b": "Ybodychange",
    "ea7b2dd0a9060d427273bd88909e370cb9f88436": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "39f752cd88cee4ff894846a6c58469e363f65175": "Ybodychange",
    "d88c251ae40a2636890f55d8257b23d075cf513a": "Ybodychange",
    "7874cc4909f6e5104f42060528b9069669993533": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42640b0c92aad5b96f2876f76e15ea455909379b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for design",
      "commitDate": "01/01/19 9:36 PM",
      "commitName": "42640b0c92aad5b96f2876f76e15ea455909379b",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/12/18 7:35 AM",
      "commitNameOld": "ea7b2dd0a9060d427273bd88909e370cb9f88436",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 14.58,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n         public void invoke() {\n             final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n             hasNonStaticMethodOrField \u003d false;\n             hasNonPrivateStaticMethodOrField \u003d false;\n             hasDefaultCtor \u003d true;\n             hasPublicCtor \u003d false;\n             DetailAST child \u003d objBlock.getFirstChild();\n \n             while (child !\u003d null) {\n                 final int type \u003d child.getType();\n                 if (type \u003d\u003d TokenTypes.METHOD_DEF\n                         || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     final boolean isStatic \u003d\n                         modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n-                    final boolean isPrivate \u003d\n-                        modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n \n-                    if (!isStatic) {\n-                        hasNonStaticMethodOrField \u003d true;\n+                    if (isStatic) {\n+                        final boolean isPrivate \u003d\n+                                modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n+\n+                        if (!isPrivate) {\n+                            hasNonPrivateStaticMethodOrField \u003d true;\n+                        }\n                     }\n-                    if (isStatic \u0026\u0026 !isPrivate) {\n-                        hasNonPrivateStaticMethodOrField \u003d true;\n+                    else {\n+                        hasNonStaticMethodOrField \u003d true;\n                     }\n                 }\n                 if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                     hasDefaultCtor \u003d false;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n                         \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                         // treat package visible as public\n                         // for the purpose of this Check\n                         hasPublicCtor \u003d true;\n                     }\n                 }\n                 child \u003d child.getNextSibling();\n             }\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n            DetailAST child \u003d objBlock.getFirstChild();\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n\n                    if (isStatic) {\n                        final boolean isPrivate \u003d\n                                modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n\n                        if (!isPrivate) {\n                            hasNonPrivateStaticMethodOrField \u003d true;\n                        }\n                    }\n                    else {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
      "extendedDetails": {}
    },
    "ea7b2dd0a9060d427273bd88909e370cb9f88436": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6264: added TRUE_RETURNS pitest mutator",
      "commitDate": "18/12/18 7:35 AM",
      "commitName": "ea7b2dd0a9060d427273bd88909e370cb9f88436",
      "commitAuthor": "rnveach",
      "commitDateOld": "07/05/18 6:56 PM",
      "commitNameOld": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 224.57,
      "commitsBetweenForRepo": 378,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n         public void invoke() {\n             final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n-            hasMethodOrField \u003d false;\n             hasNonStaticMethodOrField \u003d false;\n             hasNonPrivateStaticMethodOrField \u003d false;\n             hasDefaultCtor \u003d true;\n             hasPublicCtor \u003d false;\n             DetailAST child \u003d objBlock.getFirstChild();\n \n             while (child !\u003d null) {\n                 final int type \u003d child.getType();\n                 if (type \u003d\u003d TokenTypes.METHOD_DEF\n                         || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n-                    hasMethodOrField \u003d true;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     final boolean isStatic \u003d\n                         modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                     final boolean isPrivate \u003d\n                         modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n \n                     if (!isStatic) {\n                         hasNonStaticMethodOrField \u003d true;\n                     }\n                     if (isStatic \u0026\u0026 !isPrivate) {\n                         hasNonPrivateStaticMethodOrField \u003d true;\n                     }\n                 }\n                 if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                     hasDefaultCtor \u003d false;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n                         \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                         // treat package visible as public\n                         // for the purpose of this Check\n                         hasPublicCtor \u003d true;\n                     }\n                 }\n                 child \u003d child.getNextSibling();\n             }\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n            DetailAST child \u003d objBlock.getFirstChild();\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                    final boolean isPrivate \u003d\n                        modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n\n                    if (!isStatic) {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                    if (isStatic \u0026\u0026 !isPrivate) {\n                        hasNonPrivateStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "12/06/17 10:11 AM",
      "commitNameOld": "4a087c020c2b97130e94f9292b94cb4bc1f6ed93",
      "commitAuthorOld": "sagar-shah94",
      "daysBetweenCommits": 135.4,
      "commitsBetweenForRepo": 556,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n         public void invoke() {\n             final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n             hasMethodOrField \u003d false;\n             hasNonStaticMethodOrField \u003d false;\n             hasNonPrivateStaticMethodOrField \u003d false;\n             hasDefaultCtor \u003d true;\n             hasPublicCtor \u003d false;\n             DetailAST child \u003d objBlock.getFirstChild();\n \n             while (child !\u003d null) {\n                 final int type \u003d child.getType();\n                 if (type \u003d\u003d TokenTypes.METHOD_DEF\n                         || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                     hasMethodOrField \u003d true;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     final boolean isStatic \u003d\n-                        modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n+                        modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                     final boolean isPrivate \u003d\n-                        modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n+                        modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n \n                     if (!isStatic) {\n                         hasNonStaticMethodOrField \u003d true;\n                     }\n                     if (isStatic \u0026\u0026 !isPrivate) {\n                         hasNonPrivateStaticMethodOrField \u003d true;\n                     }\n                 }\n                 if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                     hasDefaultCtor \u003d false;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n-                    if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n-                        \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n+                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n+                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                         // treat package visible as public\n                         // for the purpose of this Check\n                         hasPublicCtor \u003d true;\n                     }\n \n                 }\n                 child \u003d child.getNextSibling();\n             }\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            hasMethodOrField \u003d false;\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n            DetailAST child \u003d objBlock.getFirstChild();\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    hasMethodOrField \u003d true;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                    final boolean isPrivate \u003d\n                        modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) !\u003d null;\n\n                    if (!isStatic) {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                    if (isStatic \u0026\u0026 !isPrivate) {\n                        hasNonPrivateStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (modifiers.findFirstToken(TokenTypes.LITERAL_PRIVATE) \u003d\u003d null\n                        \u0026\u0026 modifiers.findFirstToken(TokenTypes.LITERAL_PROTECTED) \u003d\u003d null) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
      "extendedDetails": {}
    },
    "39f752cd88cee4ff894846a6c58469e363f65175": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: VariableDeclarationUsageDistance violations fixed\n",
      "commitDate": "31/08/15 6:17 AM",
      "commitName": "39f752cd88cee4ff894846a6c58469e363f65175",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "21/08/15 5:05 AM",
      "commitNameOld": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 10.05,
      "commitsBetweenForRepo": 258,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n         public void invoke() {\n             final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n-            DetailAST child \u003d objBlock.getFirstChild();\n             hasMethodOrField \u003d false;\n             hasNonStaticMethodOrField \u003d false;\n             hasNonPrivateStaticMethodOrField \u003d false;\n             hasDefaultCtor \u003d true;\n             hasPublicCtor \u003d false;\n+            DetailAST child \u003d objBlock.getFirstChild();\n \n             while (child !\u003d null) {\n                 final int type \u003d child.getType();\n                 if (type \u003d\u003d TokenTypes.METHOD_DEF\n                         || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                     hasMethodOrField \u003d true;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     final boolean isStatic \u003d\n                         modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                     final boolean isPrivate \u003d\n                         modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n \n                     if (!isStatic) {\n                         hasNonStaticMethodOrField \u003d true;\n                     }\n                     if (isStatic \u0026\u0026 !isPrivate) {\n                         hasNonPrivateStaticMethodOrField \u003d true;\n                     }\n                 }\n                 if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                     hasDefaultCtor \u003d false;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n                         \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n                         // treat package visible as public\n                         // for the purpose of this Check\n                         hasPublicCtor \u003d true;\n                     }\n \n                 }\n                 child \u003d child.getNextSibling();\n             }\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            hasMethodOrField \u003d false;\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n            DetailAST child \u003d objBlock.getFirstChild();\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    hasMethodOrField \u003d true;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                    final boolean isPrivate \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n\n                    if (!isStatic) {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                    if (isStatic \u0026\u0026 !isPrivate) {\n                        hasNonPrivateStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n                        \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
      "extendedDetails": {}
    },
    "d88c251ae40a2636890f55d8257b23d075cf513a": {
      "type": "Ybodychange",
      "commitMessage": "HideUtilityClassConstructor was updated to follow Cyclomatic complexity. #954\n",
      "commitDate": "15/06/15 10:25 PM",
      "commitName": "d88c251ae40a2636890f55d8257b23d075cf513a",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "14/06/15 9:56 PM",
      "commitNameOld": "ec426aa0db5829cd799814d5e0e61b4cd2e42a46",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n         public void invoke() {\n             final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n             DetailAST child \u003d objBlock.getFirstChild();\n             hasMethodOrField \u003d false;\n             hasNonStaticMethodOrField \u003d false;\n             hasNonPrivateStaticMethodOrField \u003d false;\n             hasDefaultCtor \u003d true;\n             hasPublicCtor \u003d false;\n \n             while (child !\u003d null) {\n                 final int type \u003d child.getType();\n                 if (type \u003d\u003d TokenTypes.METHOD_DEF\n                         || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                     hasMethodOrField \u003d true;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     final boolean isStatic \u003d\n                         modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                     final boolean isPrivate \u003d\n                         modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n \n-                    if (!isStatic \u0026\u0026 !isPrivate) {\n+                    if (!isStatic) {\n                         hasNonStaticMethodOrField \u003d true;\n                     }\n                     if (isStatic \u0026\u0026 !isPrivate) {\n                         hasNonPrivateStaticMethodOrField \u003d true;\n                     }\n                 }\n                 if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                     hasDefaultCtor \u003d false;\n                     final DetailAST modifiers \u003d\n                         child.findFirstToken(TokenTypes.MODIFIERS);\n                     if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n                         \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n                         // treat package visible as public\n                         // for the purpose of this Check\n                         hasPublicCtor \u003d true;\n                     }\n \n                 }\n                 child \u003d child.getNextSibling();\n             }\n         }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            DetailAST child \u003d objBlock.getFirstChild();\n            hasMethodOrField \u003d false;\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    hasMethodOrField \u003d true;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                    final boolean isPrivate \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n\n                    if (!isStatic) {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                    if (isStatic \u0026\u0026 !isPrivate) {\n                        hasNonPrivateStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n                        \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java",
      "extendedDetails": {}
    },
    "7874cc4909f6e5104f42060528b9069669993533": {
      "type": "Yintroduced",
      "commitMessage": "HideUtilityClassConstructorCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "14/06/15 9:56 PM",
      "commitName": "7874cc4909f6e5104f42060528b9069669993533",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,43 @@\n+        public void invoke() {\n+            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n+            DetailAST child \u003d objBlock.getFirstChild();\n+            hasMethodOrField \u003d false;\n+            hasNonStaticMethodOrField \u003d false;\n+            hasNonPrivateStaticMethodOrField \u003d false;\n+            hasDefaultCtor \u003d true;\n+            hasPublicCtor \u003d false;\n+\n+            while (child !\u003d null) {\n+                final int type \u003d child.getType();\n+                if (type \u003d\u003d TokenTypes.METHOD_DEF\n+                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n+                    hasMethodOrField \u003d true;\n+                    final DetailAST modifiers \u003d\n+                        child.findFirstToken(TokenTypes.MODIFIERS);\n+                    final boolean isStatic \u003d\n+                        modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n+                    final boolean isPrivate \u003d\n+                        modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n+\n+                    if (!isStatic \u0026\u0026 !isPrivate) {\n+                        hasNonStaticMethodOrField \u003d true;\n+                    }\n+                    if (isStatic \u0026\u0026 !isPrivate) {\n+                        hasNonPrivateStaticMethodOrField \u003d true;\n+                    }\n+                }\n+                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n+                    hasDefaultCtor \u003d false;\n+                    final DetailAST modifiers \u003d\n+                        child.findFirstToken(TokenTypes.MODIFIERS);\n+                    if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n+                        \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n+                        // treat package visible as public\n+                        // for the purpose of this Check\n+                        hasPublicCtor \u003d true;\n+                    }\n+\n+                }\n+                child \u003d child.getNextSibling();\n+            }\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void invoke() {\n            final DetailAST objBlock \u003d ast.findFirstToken(TokenTypes.OBJBLOCK);\n            DetailAST child \u003d objBlock.getFirstChild();\n            hasMethodOrField \u003d false;\n            hasNonStaticMethodOrField \u003d false;\n            hasNonPrivateStaticMethodOrField \u003d false;\n            hasDefaultCtor \u003d true;\n            hasPublicCtor \u003d false;\n\n            while (child !\u003d null) {\n                final int type \u003d child.getType();\n                if (type \u003d\u003d TokenTypes.METHOD_DEF\n                        || type \u003d\u003d TokenTypes.VARIABLE_DEF) {\n                    hasMethodOrField \u003d true;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    final boolean isStatic \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                    final boolean isPrivate \u003d\n                        modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);\n\n                    if (!isStatic \u0026\u0026 !isPrivate) {\n                        hasNonStaticMethodOrField \u003d true;\n                    }\n                    if (isStatic \u0026\u0026 !isPrivate) {\n                        hasNonPrivateStaticMethodOrField \u003d true;\n                    }\n                }\n                if (type \u003d\u003d TokenTypes.CTOR_DEF) {\n                    hasDefaultCtor \u003d false;\n                    final DetailAST modifiers \u003d\n                        child.findFirstToken(TokenTypes.MODIFIERS);\n                    if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)\n                        \u0026\u0026 !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {\n                        // treat package visible as public\n                        // for the purpose of this Check\n                        hasPublicCtor \u003d true;\n                    }\n\n                }\n                child \u003d child.getNextSibling();\n            }\n        }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java"
    }
  }
}