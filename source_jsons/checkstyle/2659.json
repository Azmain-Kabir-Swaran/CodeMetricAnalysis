{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MethodCallHandler.java",
  "functionName": "checkIndentation",
  "functionId": "checkIndentation",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
  "functionStartLine": 193,
  "functionEndLine": 221,
  "numCommitsSeen": 73,
  "timeTaken": 2778,
  "changeHistory": [
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
    "658ed1355643faff0d29f21b9e3e386a98de15ae",
    "6e8d1e06728b7defbd734253b3818a33676b62bc",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
    "8c891372187779376158becd95fcaf4e28b8bb8d",
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb",
    "24c13109a52b0b5085b5db2e8b0ae96655d9480c",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
    "e3a48d1527341456a798c3f0c1986de6898a8c60",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f",
    "7f7db38a097a95c264307123924779380fb40077",
    "092e1f69476fc715852035a25b23a11804183a23",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955"
  ],
  "changeHistoryShort": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": "Ybodychange",
    "658ed1355643faff0d29f21b9e3e386a98de15ae": "Ybodychange",
    "6e8d1e06728b7defbd734253b3818a33676b62bc": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e": "Ybodychange",
    "8c891372187779376158becd95fcaf4e28b8bb8d": "Ybodychange",
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb": "Ybodychange",
    "24c13109a52b0b5085b5db2e8b0ae96655d9480c": "Ybodychange",
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": "Ybodychange",
    "e3a48d1527341456a798c3f0c1986de6898a8c60": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f": "Ybodychange",
    "7f7db38a097a95c264307123924779380fb40077": "Ybodychange",
    "092e1f69476fc715852035a25b23a11804183a23": "Ybodychange",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7518: refactor line comparison\n",
      "commitDate": "06/02/20 6:58 PM",
      "commitName": "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
      "commitAuthor": "Andrei_Paikin",
      "commitDateOld": "13/01/20 12:43 PM",
      "commitNameOld": "284278fde3431e33701cad1c3cc6690abcec0bb6",
      "commitAuthorOld": "alinkov",
      "daysBetweenCommits": 24.26,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void checkIndentation() {\n         DetailAST lparen \u003d null;\n         if (getMainAst().getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             final DetailAST exprNode \u003d getMainAst().getParent();\n             if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n                 checkExpressionSubtree(getMainAst().getFirstChild(), getIndent(), false, false);\n                 lparen \u003d getMainAst();\n             }\n         }\n         else {\n             // TokenTypes.CTOR_CALL|TokenTypes.SUPER_CTOR_CALL\n             lparen \u003d getMainAst().getFirstChild();\n         }\n \n         if (lparen !\u003d null) {\n             final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n             checkLeftParen(lparen);\n \n-            if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n+            if (!TokenUtil.areOnSameLine(rparen, lparen)) {\n                 checkExpressionSubtree(\n                     getMainAst().findFirstToken(TokenTypes.ELIST),\n                     new IndentLevel(getIndent(), getBasicOffset()),\n                     false, true);\n \n                 checkRightParen(lparen, rparen);\n                 checkWrappingIndentation(getMainAst(), getCallLastNode(getMainAst()));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        DetailAST lparen \u003d null;\n        if (getMainAst().getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            final DetailAST exprNode \u003d getMainAst().getParent();\n            if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n                checkExpressionSubtree(getMainAst().getFirstChild(), getIndent(), false, false);\n                lparen \u003d getMainAst();\n            }\n        }\n        else {\n            // TokenTypes.CTOR_CALL|TokenTypes.SUPER_CTOR_CALL\n            lparen \u003d getMainAst().getFirstChild();\n        }\n\n        if (lparen !\u003d null) {\n            final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n            checkLeftParen(lparen);\n\n            if (!TokenUtil.areOnSameLine(rparen, lparen)) {\n                checkExpressionSubtree(\n                    getMainAst().findFirstToken(TokenTypes.ELIST),\n                    new IndentLevel(getIndent(), getBasicOffset()),\n                    false, true);\n\n                checkRightParen(lparen, rparen);\n                checkWrappingIndentation(getMainAst(), getCallLastNode(getMainAst()));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "658ed1355643faff0d29f21b9e3e386a98de15ae": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3808: Check indentation of this() and super()\n",
      "commitDate": "21/03/18 10:42 PM",
      "commitName": "658ed1355643faff0d29f21b9e3e386a98de15ae",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "0847a10b9430d9fb0a3f44df03e891da906bea47",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 76.6,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,29 @@\n     public void checkIndentation() {\n-        final DetailAST exprNode \u003d getMainAst().getParent();\n-        if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n-            final DetailAST methodName \u003d getMainAst().getFirstChild();\n-            checkExpressionSubtree(methodName, getIndent(), false, false);\n+        DetailAST lparen \u003d null;\n+        if (getMainAst().getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n+            final DetailAST exprNode \u003d getMainAst().getParent();\n+            if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n+                checkExpressionSubtree(getMainAst().getFirstChild(), getIndent(), false, false);\n+                lparen \u003d getMainAst();\n+            }\n+        }\n+        else {\n+            // TokenTypes.CTOR_CALL|TokenTypes.SUPER_CTOR_CALL\n+            lparen \u003d getMainAst().getFirstChild();\n+        }\n \n-            final DetailAST lparen \u003d getMainAst();\n+        if (lparen !\u003d null) {\n             final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n             checkLeftParen(lparen);\n \n             if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n                 checkExpressionSubtree(\n                     getMainAst().findFirstToken(TokenTypes.ELIST),\n                     new IndentLevel(getIndent(), getBasicOffset()),\n                     false, true);\n \n                 checkRightParen(lparen, rparen);\n-                checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n+                checkWrappingIndentation(getMainAst(), getCallLastNode(getMainAst()));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        DetailAST lparen \u003d null;\n        if (getMainAst().getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            final DetailAST exprNode \u003d getMainAst().getParent();\n            if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n                checkExpressionSubtree(getMainAst().getFirstChild(), getIndent(), false, false);\n                lparen \u003d getMainAst();\n            }\n        }\n        else {\n            // TokenTypes.CTOR_CALL|TokenTypes.SUPER_CTOR_CALL\n            lparen \u003d getMainAst().getFirstChild();\n        }\n\n        if (lparen !\u003d null) {\n            final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n            checkLeftParen(lparen);\n\n            if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n                checkExpressionSubtree(\n                    getMainAst().findFirstToken(TokenTypes.ELIST),\n                    new IndentLevel(getIndent(), getBasicOffset()),\n                    false, true);\n\n                checkRightParen(lparen, rparen);\n                checkWrappingIndentation(getMainAst(), getCallLastNode(getMainAst()));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "6e8d1e06728b7defbd734253b3818a33676b62bc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3721: enforced no abbreviations in checkstyle",
      "commitDate": "17/02/17 2:04 PM",
      "commitName": "6e8d1e06728b7defbd734253b3818a33676b62bc",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void checkIndentation() {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n         if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n             final DetailAST methodName \u003d getMainAst().getFirstChild();\n             checkExpressionSubtree(methodName, getIndent(), false, false);\n \n             final DetailAST lparen \u003d getMainAst();\n             final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n-            checkLParen(lparen);\n+            checkLeftParen(lparen);\n \n             if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n                 checkExpressionSubtree(\n                     getMainAst().findFirstToken(TokenTypes.ELIST),\n                     new IndentLevel(getIndent(), getBasicOffset()),\n                     false, true);\n \n-                checkRParen(lparen, rparen);\n+                checkRightParen(lparen, rparen);\n                 checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n            final DetailAST methodName \u003d getMainAst().getFirstChild();\n            checkExpressionSubtree(methodName, getIndent(), false, false);\n\n            final DetailAST lparen \u003d getMainAst();\n            final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n            checkLeftParen(lparen);\n\n            if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n                checkExpressionSubtree(\n                    getMainAst().findFirstToken(TokenTypes.ELIST),\n                    new IndentLevel(getIndent(), getBasicOffset()),\n                    false, true);\n\n                checkRightParen(lparen, rparen);\n                checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/02/16 5:08 AM",
      "commitNameOld": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 93.02,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n     public void checkIndentation() {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n-        if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n-            return;\n+        if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n+            final DetailAST methodName \u003d getMainAst().getFirstChild();\n+            checkExpressionSubtree(methodName, getIndent(), false, false);\n+\n+            final DetailAST lparen \u003d getMainAst();\n+            final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n+            checkLParen(lparen);\n+\n+            if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n+                checkExpressionSubtree(\n+                    getMainAst().findFirstToken(TokenTypes.ELIST),\n+                    new IndentLevel(getIndent(), getBasicOffset()),\n+                    false, true);\n+\n+                checkRParen(lparen, rparen);\n+                checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n+            }\n         }\n-        final DetailAST methodName \u003d getMainAst().getFirstChild();\n-        checkExpressionSubtree(methodName, getIndent(), false, false);\n-\n-        final DetailAST lparen \u003d getMainAst();\n-        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n-        checkLParen(lparen);\n-\n-        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n-            return;\n-        }\n-\n-        checkExpressionSubtree(\n-            getMainAst().findFirstToken(TokenTypes.ELIST),\n-            new IndentLevel(getIndent(), getBasicOffset()),\n-            false, true);\n-\n-        checkRParen(lparen, rparen);\n-        checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() \u003d\u003d TokenTypes.SLIST) {\n            final DetailAST methodName \u003d getMainAst().getFirstChild();\n            checkExpressionSubtree(methodName, getIndent(), false, false);\n\n            final DetailAST lparen \u003d getMainAst();\n            final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n            checkLParen(lparen);\n\n            if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n                checkExpressionSubtree(\n                    getMainAst().findFirstToken(TokenTypes.ELIST),\n                    new IndentLevel(getIndent(), getBasicOffset()),\n                    false, true);\n\n                checkRParen(lparen, rparen);\n                checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e": {
      "type": "Ybodychange",
      "commitMessage": "minor: refactored LineWrappingHandler",
      "commitDate": "24/02/16 5:08 AM",
      "commitName": "a0fed4c0e90c488101c4ecb27f3f6a412c8f9a4e",
      "commitAuthor": "rnveach",
      "commitDateOld": "24/01/16 6:35 AM",
      "commitNameOld": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 30.94,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,24 @@\n     public void checkIndentation() {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n         if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n             return;\n         }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getIndent(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getIndent(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n-        final LineWrappingHandler lineWrap \u003d\n-            new LineWrappingHandler(getIndentCheck(), getMainAst(),\n-                    getMethodCallLastNode(getMainAst()));\n-        lineWrap.checkIndentation();\n+        checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getIndent(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getIndent(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        checkWrappingIndentation(getMainAst(), getMethodCallLastNode(getMainAst()));\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "8c891372187779376158becd95fcaf4e28b8bb8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": "16/12/15 8:16 AM",
      "commitName": "8c891372187779376158becd95fcaf4e28b8bb8d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/12/15 10:53 AM",
      "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.89,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     public void checkIndentation() {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n         if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n             return;\n         }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n-        checkExpressionSubtree(methodName, getLevel(), false, false);\n+        checkExpressionSubtree(methodName, getIndent(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n-            new IndentLevel(getLevel(), getBasicOffset()),\n+            new IndentLevel(getIndent(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n         final LineWrappingHandler lineWrap \u003d\n             new LineWrappingHandler(getIndentCheck(), getMainAst(),\n                     getMethodCallLastNode(getMainAst()));\n         lineWrap.checkIndentation();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getIndent(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getIndent(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        final LineWrappingHandler lineWrap \u003d\n            new LineWrappingHandler(getIndentCheck(), getMainAst(),\n                    getMethodCallLastNode(getMainAst()));\n        lineWrap.checkIndentation();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb": {
      "type": "Ybodychange",
      "commitMessage": "Add test coverage to MethodCallHandler in Indentation check. #1270\n",
      "commitDate": "19/07/15 12:00 AM",
      "commitName": "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/07/15 9:51 PM",
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n     public void checkIndentation() {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n-        if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n-            \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n+        if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n             return;\n         }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n         final LineWrappingHandler lineWrap \u003d\n             new LineWrappingHandler(getIndentCheck(), getMainAst(),\n                     getMethodCallLastNode(getMainAst()));\n         lineWrap.checkIndentation();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation() {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.SLIST) {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        final LineWrappingHandler lineWrap \u003d\n            new LineWrappingHandler(getIndentCheck(), getMainAst(),\n                    getMethodCallLastNode(getMainAst()));\n        lineWrap.checkIndentation();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "24c13109a52b0b5085b5db2e8b0ae96655d9480c": {
      "type": "Ybodychange",
      "commitMessage": "IndentationCheck. Refactoring: got rid of anonymous classes.\n",
      "commitDate": "18/02/15 7:31 AM",
      "commitName": "24c13109a52b0b5085b5db2e8b0ae96655d9480c",
      "commitAuthor": "Alexey",
      "commitDateOld": "19/01/15 6:34 AM",
      "commitNameOld": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 30.04,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,30 @@\n     public void checkIndentation()\n     {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n         if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n             \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n         {\n             return;\n         }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n         final LineWrappingHandler lineWrap \u003d\n-            new LineWrappingHandler(getIndentCheck(), getMainAst()) {\n-                @Override\n-                public DetailAST findLastNode(DetailAST firstNode)\n-                {\n-                    DetailAST lastNode;\n-                    if (getFirstNode().getNextSibling() \u003d\u003d null) {\n-                        lastNode \u003d getFirstNode().getLastChild();\n-                    }\n-                    else {\n-                        lastNode \u003d getFirstNode().getNextSibling();\n-                    }\n-                    return lastNode;\n-                }\n-\n-                @Override\n-                public int getCurrentIndentation()\n-                {\n-                    DetailAST curNode \u003d getFirstNode();\n-                    while (curNode.getType() !\u003d TokenTypes.IDENT) {\n-                        curNode \u003d curNode.getFirstChild();\n-                    }\n-                    return curNode.getColumnNo() + getIndentLevel();\n-                }\n-            };\n+            new LineWrappingHandler(getIndentCheck(), getMainAst(),\n+                    getMethodCallLastNode(getMainAst()));\n         lineWrap.checkIndentation();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n            \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n        {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        final LineWrappingHandler lineWrap \u003d\n            new LineWrappingHandler(getIndentCheck(), getMainAst(),\n                    getMethodCallLastNode(getMainAst()));\n        lineWrap.checkIndentation();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, indentation, #512\n",
      "commitDate": "19/01/15 6:34 AM",
      "commitName": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6",
      "commitAuthor": "alexkravin",
      "commitDateOld": "13/10/14 4:21 PM",
      "commitNameOld": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthorOld": "maxvetrenko",
      "daysBetweenCommits": 97.63,
      "commitsBetweenForRepo": 303,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     public void checkIndentation()\n     {\n         final DetailAST exprNode \u003d getMainAst().getParent();\n         if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n             \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n         {\n             return;\n         }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n         final LineWrappingHandler lineWrap \u003d\n             new LineWrappingHandler(getIndentCheck(), getMainAst()) {\n                 @Override\n-                public DetailAST findLastNode(DetailAST aFirstNode)\n+                public DetailAST findLastNode(DetailAST firstNode)\n                 {\n                     DetailAST lastNode;\n                     if (getFirstNode().getNextSibling() \u003d\u003d null) {\n                         lastNode \u003d getFirstNode().getLastChild();\n                     }\n                     else {\n                         lastNode \u003d getFirstNode().getNextSibling();\n                     }\n                     return lastNode;\n                 }\n \n                 @Override\n                 public int getCurrentIndentation()\n                 {\n                     DetailAST curNode \u003d getFirstNode();\n                     while (curNode.getType() !\u003d TokenTypes.IDENT) {\n                         curNode \u003d curNode.getFirstChild();\n                     }\n                     return curNode.getColumnNo() + getIndentLevel();\n                 }\n             };\n         lineWrap.checkIndentation();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n            \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n        {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        final LineWrappingHandler lineWrap \u003d\n            new LineWrappingHandler(getIndentCheck(), getMainAst()) {\n                @Override\n                public DetailAST findLastNode(DetailAST firstNode)\n                {\n                    DetailAST lastNode;\n                    if (getFirstNode().getNextSibling() \u003d\u003d null) {\n                        lastNode \u003d getFirstNode().getLastChild();\n                    }\n                    else {\n                        lastNode \u003d getFirstNode().getNextSibling();\n                    }\n                    return lastNode;\n                }\n\n                @Override\n                public int getCurrentIndentation()\n                {\n                    DetailAST curNode \u003d getFirstNode();\n                    while (curNode.getType() !\u003d TokenTypes.IDENT) {\n                        curNode \u003d curNode.getFirstChild();\n                    }\n                    return curNode.getColumnNo() + getIndentLevel();\n                }\n            };\n        lineWrap.checkIndentation();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "e3a48d1527341456a798c3f0c1986de6898a8c60": {
      "type": "Ybodychange",
      "commitMessage": "Update for IndentationCheck. #294\n",
      "commitDate": "13/10/14 4:21 PM",
      "commitName": "e3a48d1527341456a798c3f0c1986de6898a8c60",
      "commitAuthor": "maxvetrenko",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 223.25,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,52 @@\n     public void checkIndentation()\n     {\n+        final DetailAST exprNode \u003d getMainAst().getParent();\n+        if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n+            \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n+        {\n+            return;\n+        }\n         final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n-        // if this method name is on the same line as a containing\n-        // method, don\u0027t indent, this allows expressions like:\n-        //    method(\"my str\" + method2(\n-        //        \"my str2\"));\n-        // as well as\n-        //    method(\"my str\" +\n-        //        method2(\n-        //            \"my str2\"));\n-        //\n-\n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n+        final LineWrappingHandler lineWrap \u003d\n+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {\n+                @Override\n+                public DetailAST findLastNode(DetailAST aFirstNode)\n+                {\n+                    DetailAST lastNode;\n+                    if (getFirstNode().getNextSibling() \u003d\u003d null) {\n+                        lastNode \u003d getFirstNode().getLastChild();\n+                    }\n+                    else {\n+                        lastNode \u003d getFirstNode().getNextSibling();\n+                    }\n+                    return lastNode;\n+                }\n+\n+                @Override\n+                public int getCurrentIndentation()\n+                {\n+                    DetailAST curNode \u003d getFirstNode();\n+                    while (curNode.getType() !\u003d TokenTypes.IDENT) {\n+                        curNode \u003d curNode.getFirstChild();\n+                    }\n+                    return curNode.getColumnNo() + getIndentLevel();\n+                }\n+            };\n+        lineWrap.checkIndentation();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST exprNode \u003d getMainAst().getParent();\n        if (exprNode.getParent().getType() !\u003d TokenTypes.LCURLY\n            \u0026\u0026 exprNode.getParent().getType() !\u003d TokenTypes.SLIST)\n        {\n            return;\n        }\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n        final LineWrappingHandler lineWrap \u003d\n            new LineWrappingHandler(getIndentCheck(), getMainAst()) {\n                @Override\n                public DetailAST findLastNode(DetailAST aFirstNode)\n                {\n                    DetailAST lastNode;\n                    if (getFirstNode().getNextSibling() \u003d\u003d null) {\n                        lastNode \u003d getFirstNode().getLastChild();\n                    }\n                    else {\n                        lastNode \u003d getFirstNode().getNextSibling();\n                    }\n                    return lastNode;\n                }\n\n                @Override\n                public int getCurrentIndentation()\n                {\n                    DetailAST curNode \u003d getFirstNode();\n                    while (curNode.getType() !\u003d TokenTypes.IDENT) {\n                        curNode \u003d curNode.getFirstChild();\n                    }\n                    return curNode.getColumnNo() + getIndentLevel();\n                }\n            };\n        lineWrap.checkIndentation();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        // if this method name is on the same line as a containing\n        // method, don\u0027t indent, this allows expressions like:\n        //    method(\"my str\" + method2(\n        //        \"my str2\"));\n        // as well as\n        //    method(\"my str\" +\n        //        method2(\n        //            \"my str2\"));\n        //\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/08 3:11 PM",
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 247.52,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void checkIndentation()\n     {\n-        final DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n+        final DetailAST methodName \u003d getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         final DetailAST lparen \u003d getMainAst();\n         final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         // if this method name is on the same line as a containing\n         // method, don\u0027t indent, this allows expressions like:\n         //    method(\"my str\" + method2(\n         //        \"my str2\"));\n         // as well as\n         //    method(\"my str\" +\n         //        method2(\n         //            \"my str2\"));\n         //\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST methodName \u003d getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        // if this method name is on the same line as a containing\n        // method, don\u0027t indent, this allows expressions like:\n        //    method(\"my str\" + method2(\n        //        \"my str2\"));\n        // as well as\n        //    method(\"my str\" +\n        //        method2(\n        //            \"my str2\"));\n        //\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void checkIndentation()\n     {\n-        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n+        final DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n-        DetailAST lparen \u003d getMainAst();\n-        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n+        final DetailAST lparen \u003d getMainAst();\n+        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         checkLParen(lparen);\n \n         if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n             return;\n         }\n \n         // if this method name is on the same line as a containing\n         // method, don\u0027t indent, this allows expressions like:\n         //    method(\"my str\" + method2(\n         //        \"my str2\"));\n         // as well as\n         //    method(\"my str\" +\n         //        method2(\n         //            \"my str2\"));\n         //\n \n         checkExpressionSubtree(\n             getMainAst().findFirstToken(TokenTypes.ELIST),\n             new IndentLevel(getLevel(), getBasicOffset()),\n             false, true);\n \n         checkRParen(lparen, rparen);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        final DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        final DetailAST lparen \u003d getMainAst();\n        final DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        // if this method name is on the same line as a containing\n        // method, don\u0027t indent, this allows expressions like:\n        //    method(\"my str\" + method2(\n        //        \"my str2\"));\n        // as well as\n        //    method(\"my str\" +\n        //        method2(\n        //            \"my str2\"));\n        //\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f": {
      "type": "Ybodychange",
      "commitMessage": "some additional refactoring (to remove code duplication)\n",
      "commitDate": "23/07/05 2:18 AM",
      "commitName": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "23/07/05 1:44 AM",
      "commitNameOld": "50559c68761e235f57e48cd2dc28928b417d7745",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n     public void checkIndentation()\n     {\n         DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n-        checkLParen();\n-        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         DetailAST lparen \u003d getMainAst();\n+        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n+        checkLParen(lparen);\n \n-        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n-\n-            // if this method name is on the same line as a containing\n-            // method, don\u0027t indent, this allows expressions like:\n-            //    method(\"my str\" + method2(\n-            //        \"my str2\"));\n-            // as well as\n-            //    method(\"my str\" +\n-            //        method2(\n-            //            \"my str2\"));\n-            //\n-\n-            checkExpressionSubtree(\n-                getMainAst().findFirstToken(TokenTypes.ELIST),\n-                new IndentLevel(getLevel(), getBasicOffset()),\n-                false, true);\n-\n-            checkRParen();\n+        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n+            return;\n         }\n+\n+        // if this method name is on the same line as a containing\n+        // method, don\u0027t indent, this allows expressions like:\n+        //    method(\"my str\" + method2(\n+        //        \"my str2\"));\n+        // as well as\n+        //    method(\"my str\" +\n+        //        method2(\n+        //            \"my str2\"));\n+        //\n+\n+        checkExpressionSubtree(\n+            getMainAst().findFirstToken(TokenTypes.ELIST),\n+            new IndentLevel(getLevel(), getBasicOffset()),\n+            false, true);\n+\n+        checkRParen(lparen, rparen);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        DetailAST lparen \u003d getMainAst();\n        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        checkLParen(lparen);\n\n        if (rparen.getLineNo() \u003d\u003d lparen.getLineNo()) {\n            return;\n        }\n\n        // if this method name is on the same line as a containing\n        // method, don\u0027t indent, this allows expressions like:\n        //    method(\"my str\" + method2(\n        //        \"my str2\"));\n        // as well as\n        //    method(\"my str\" +\n        //        method2(\n        //            \"my str2\"));\n        //\n\n        checkExpressionSubtree(\n            getMainAst().findFirstToken(TokenTypes.ELIST),\n            new IndentLevel(getLevel(), getBasicOffset()),\n            false, true);\n\n        checkRParen(lparen, rparen);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "7f7db38a097a95c264307123924779380fb40077": {
      "type": "Ybodychange",
      "commitMessage": "IndentationCheck: Some refactoring and fixes for some TODOs and bugs.\n",
      "commitDate": "12/08/03 12:19 PM",
      "commitName": "7f7db38a097a95c264307123924779380fb40077",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "14/06/03 10:47 AM",
      "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 59.06,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void checkIndentation()\n     {\n         DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         checkLParen();\n         DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         DetailAST lparen \u003d getMainAst();\n \n         if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n \n             // if this method name is on the same line as a containing\n             // method, don\u0027t indent, this allows expressions like:\n             //    method(\"my str\" + method2(\n             //        \"my str2\"));\n             // as well as\n             //    method(\"my str\" +\n             //        method2(\n             //            \"my str2\"));\n             //\n \n             checkExpressionSubtree(\n                 getMainAst().findFirstToken(TokenTypes.ELIST),\n-                getLevel() + getIndentCheck().getBasicOffset(),\n+                new IndentLevel(getLevel(), getBasicOffset()),\n                 false, true);\n \n             checkRParen();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        checkLParen();\n        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        DetailAST lparen \u003d getMainAst();\n\n        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n\n            // if this method name is on the same line as a containing\n            // method, don\u0027t indent, this allows expressions like:\n            //    method(\"my str\" + method2(\n            //        \"my str2\"));\n            // as well as\n            //    method(\"my str\" +\n            //        method2(\n            //            \"my str2\"));\n            //\n\n            checkExpressionSubtree(\n                getMainAst().findFirstToken(TokenTypes.ELIST),\n                new IndentLevel(getLevel(), getBasicOffset()),\n                false, true);\n\n            checkRParen();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "092e1f69476fc715852035a25b23a11804183a23": {
      "type": "Ybodychange",
      "commitMessage": "indentationAmount property renamed to basicOffset\n",
      "commitDate": "15/05/03 8:54 AM",
      "commitName": "092e1f69476fc715852035a25b23a11804183a23",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "14/05/03 1:11 AM",
      "commitNameOld": "a4d63db21d57ab53aff8a467f89df3867518ab91",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void checkIndentation()\n     {\n         DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n         checkExpressionSubtree(methodName, getLevel(), false, false);\n \n         checkLParen();\n         DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n         DetailAST lparen \u003d getMainAst();\n \n         if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n \n             // if this method name is on the same line as a containing\n             // method, don\u0027t indent, this allows expressions like:\n             //    method(\"my str\" + method2(\n             //        \"my str2\"));\n             // as well as\n             //    method(\"my str\" +\n             //        method2(\n             //            \"my str2\"));\n             //\n \n             checkExpressionSubtree(\n                 getMainAst().findFirstToken(TokenTypes.ELIST),\n-                getLevel() + getIndentCheck().getIndentationAmount(),\n+                getLevel() + getIndentCheck().getBasicOffset(),\n                 false, true);\n \n             checkRParen();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void checkIndentation()\n    {\n        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        checkLParen();\n        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        DetailAST lparen \u003d getMainAst();\n\n        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n\n            // if this method name is on the same line as a containing\n            // method, don\u0027t indent, this allows expressions like:\n            //    method(\"my str\" + method2(\n            //        \"my str2\"));\n            // as well as\n            //    method(\"my str\" +\n            //        method2(\n            //            \"my str2\"));\n            //\n\n            checkExpressionSubtree(\n                getMainAst().findFirstToken(TokenTypes.ELIST),\n                getLevel() + getIndentCheck().getBasicOffset(),\n                false, true);\n\n            checkRParen();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
      "commitDate": "11/05/03 12:53 AM",
      "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
          "commitDate": "11/05/03 12:53 AM",
          "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "11/05/03 12:31 AM",
          "commitNameOld": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-        public void checkIndentation() \n-        {\n+    public void checkIndentation() \n+    {\n+        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n+        checkExpressionSubtree(methodName, getLevel(), false, false);\n \n-            // TODO: still need to better deal with the modifiers and \"class\"\n-            checkModifiers();\n-            \n-            LineSet lines \u003d new LineSet();\n+        checkLParen();\n+        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n+        DetailAST lparen \u003d getMainAst();\n \n-            // checks that line with class name starts at correct indentation,\n-            //  and following lines (in implements and extends clauses) are \n-            //  indented at least one level\n-            DetailAST ident \u003d mMainAst.findFirstToken(TokenTypes.IDENT);\n-            int lineStart \u003d getLineStart(ident);\n-            if (lineStart !\u003d getLevel()) {\n-                logError(ident, \"ident\", lineStart);\n-            }\n+        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n \n-            lines.addLineAndCol(new Integer(ident.getLineNo()), lineStart);\n-            \n-            DetailAST impl \u003d mMainAst.findFirstToken(\n-                TokenTypes.IMPLEMENTS_CLAUSE);\n-            if (impl !\u003d null \u0026\u0026 impl.getFirstChild() !\u003d null) {\n-                findSubtreeLines(lines, impl, false);\n-            }\n+            // if this method name is on the same line as a containing \n+            // method, don\u0027t indent, this allows expressions like:\n+            //    method(\"my str\" + method2(\n+            //        \"my str2\"));\n+            // as well as\n+            //    method(\"my str\" + \n+            //        method2(\n+            //            \"my str2\"));\n+            //\n \n-            DetailAST ext \u003d mMainAst.findFirstToken(TokenTypes.EXTENDS_CLAUSE);\n-            if (ext !\u003d null \u0026\u0026 ext.getFirstChild() !\u003d null) {\n-                findSubtreeLines(lines, ext, false);\n-            }\n-            \n-            checkLinesIndent(ident.getLineNo(), lines.lastLine(), getLevel());\n-            \n-            super.checkIndentation();\n-        }\n\\ No newline at end of file\n+            checkExpressionSubtree(\n+                getMainAst().findFirstToken(TokenTypes.ELIST), \n+                getLevel() + getIndentCheck().getIndentationAmount(),\n+                false, true);\n+\n+            checkRParen();\n+        }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation() \n    {\n        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        checkLParen();\n        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        DetailAST lparen \u003d getMainAst();\n\n        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n\n            // if this method name is on the same line as a containing \n            // method, don\u0027t indent, this allows expressions like:\n            //    method(\"my str\" + method2(\n            //        \"my str2\"));\n            // as well as\n            //    method(\"my str\" + \n            //        method2(\n            //            \"my str2\"));\n            //\n\n            checkExpressionSubtree(\n                getMainAst().findFirstToken(TokenTypes.ELIST), \n                getLevel() + getIndentCheck().getIndentationAmount(),\n                false, true);\n\n            checkRParen();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
            "oldMethodName": "checkIndentation",
            "newMethodName": "checkIndentation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
          "commitDate": "11/05/03 12:53 AM",
          "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "11/05/03 12:31 AM",
          "commitNameOld": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-        public void checkIndentation() \n-        {\n+    public void checkIndentation() \n+    {\n+        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n+        checkExpressionSubtree(methodName, getLevel(), false, false);\n \n-            // TODO: still need to better deal with the modifiers and \"class\"\n-            checkModifiers();\n-            \n-            LineSet lines \u003d new LineSet();\n+        checkLParen();\n+        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n+        DetailAST lparen \u003d getMainAst();\n \n-            // checks that line with class name starts at correct indentation,\n-            //  and following lines (in implements and extends clauses) are \n-            //  indented at least one level\n-            DetailAST ident \u003d mMainAst.findFirstToken(TokenTypes.IDENT);\n-            int lineStart \u003d getLineStart(ident);\n-            if (lineStart !\u003d getLevel()) {\n-                logError(ident, \"ident\", lineStart);\n-            }\n+        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n \n-            lines.addLineAndCol(new Integer(ident.getLineNo()), lineStart);\n-            \n-            DetailAST impl \u003d mMainAst.findFirstToken(\n-                TokenTypes.IMPLEMENTS_CLAUSE);\n-            if (impl !\u003d null \u0026\u0026 impl.getFirstChild() !\u003d null) {\n-                findSubtreeLines(lines, impl, false);\n-            }\n+            // if this method name is on the same line as a containing \n+            // method, don\u0027t indent, this allows expressions like:\n+            //    method(\"my str\" + method2(\n+            //        \"my str2\"));\n+            // as well as\n+            //    method(\"my str\" + \n+            //        method2(\n+            //            \"my str2\"));\n+            //\n \n-            DetailAST ext \u003d mMainAst.findFirstToken(TokenTypes.EXTENDS_CLAUSE);\n-            if (ext !\u003d null \u0026\u0026 ext.getFirstChild() !\u003d null) {\n-                findSubtreeLines(lines, ext, false);\n-            }\n-            \n-            checkLinesIndent(ident.getLineNo(), lines.lastLine(), getLevel());\n-            \n-            super.checkIndentation();\n-        }\n\\ No newline at end of file\n+            checkExpressionSubtree(\n+                getMainAst().findFirstToken(TokenTypes.ELIST), \n+                getLevel() + getIndentCheck().getIndentationAmount(),\n+                false, true);\n+\n+            checkRParen();\n+        }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public void checkIndentation() \n    {\n        DetailAST methodName \u003d (DetailAST) getMainAst().getFirstChild();\n        checkExpressionSubtree(methodName, getLevel(), false, false);\n\n        checkLParen();\n        DetailAST rparen \u003d getMainAst().findFirstToken(TokenTypes.RPAREN);\n        DetailAST lparen \u003d getMainAst();\n\n        if (rparen.getLineNo() !\u003d lparen.getLineNo()) {\n\n            // if this method name is on the same line as a containing \n            // method, don\u0027t indent, this allows expressions like:\n            //    method(\"my str\" + method2(\n            //        \"my str2\"));\n            // as well as\n            //    method(\"my str\" + \n            //        method2(\n            //            \"my str2\"));\n            //\n\n            checkExpressionSubtree(\n                getMainAst().findFirstToken(TokenTypes.ELIST), \n                getLevel() + getIndentCheck().getIndentationAmount(),\n                false, true);\n\n            checkRParen();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "9aab61241e7970ccfb4a9ee66c8eb7f062d31955": {
      "type": "Yintroduced",
      "commitMessage": "added IndentationCheck, contributed by John Richardson\nThis check currently fails to pass checkstyle.checkstyle\nbecause most methods are missing javadoc, I hope somebody\ncan help me adding it\n",
      "commitDate": "24/04/03 10:21 PM",
      "commitName": "9aab61241e7970ccfb4a9ee66c8eb7f062d31955",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,34 @@\n+        public void checkIndentation() \n+        {\n+\n+            // TODO: still need to better deal with the modifiers and \"class\"\n+            checkModifiers();\n+            \n+            LineSet lines \u003d new LineSet();\n+\n+            // checks that line with class name starts at correct indentation,\n+            //  and following lines (in implements and extends clauses) are \n+            //  indented at least one level\n+            DetailAST ident \u003d mMainAst.findFirstToken(TokenTypes.IDENT);\n+            int lineStart \u003d getLineStart(ident);\n+            if (lineStart !\u003d getLevel()) {\n+                logError(ident, \"ident\", lineStart);\n+            }\n+\n+            lines.addLineAndCol(new Integer(ident.getLineNo()), lineStart);\n+            \n+            DetailAST impl \u003d mMainAst.findFirstToken(\n+                TokenTypes.IMPLEMENTS_CLAUSE);\n+            if (impl !\u003d null \u0026\u0026 impl.getFirstChild() !\u003d null) {\n+                findSubtreeLines(lines, impl, false);\n+            }\n+\n+            DetailAST ext \u003d mMainAst.findFirstToken(TokenTypes.EXTENDS_CLAUSE);\n+            if (ext !\u003d null \u0026\u0026 ext.getFirstChild() !\u003d null) {\n+                findSubtreeLines(lines, ext, false);\n+            }\n+            \n+            checkLinesIndent(ident.getLineNo(), lines.lastLine(), getLevel());\n+            \n+            super.checkIndentation();\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void checkIndentation() \n        {\n\n            // TODO: still need to better deal with the modifiers and \"class\"\n            checkModifiers();\n            \n            LineSet lines \u003d new LineSet();\n\n            // checks that line with class name starts at correct indentation,\n            //  and following lines (in implements and extends clauses) are \n            //  indented at least one level\n            DetailAST ident \u003d mMainAst.findFirstToken(TokenTypes.IDENT);\n            int lineStart \u003d getLineStart(ident);\n            if (lineStart !\u003d getLevel()) {\n                logError(ident, \"ident\", lineStart);\n            }\n\n            lines.addLineAndCol(new Integer(ident.getLineNo()), lineStart);\n            \n            DetailAST impl \u003d mMainAst.findFirstToken(\n                TokenTypes.IMPLEMENTS_CLAUSE);\n            if (impl !\u003d null \u0026\u0026 impl.getFirstChild() !\u003d null) {\n                findSubtreeLines(lines, impl, false);\n            }\n\n            DetailAST ext \u003d mMainAst.findFirstToken(TokenTypes.EXTENDS_CLAUSE);\n            if (ext !\u003d null \u0026\u0026 ext.getFirstChild() !\u003d null) {\n                findSubtreeLines(lines, ext, false);\n            }\n            \n            checkLinesIndent(ident.getLineNo(), lines.lastLine(), getLevel());\n            \n            super.checkIndentation();\n        }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java"
    }
  }
}