{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractHeaderCheck.java",
  "functionName": "loadHeaderFile",
  "functionId": "loadHeaderFile",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
  "functionStartLine": 113,
  "functionEndLine": 123,
  "numCommitsSeen": 93,
  "timeTaken": 3386,
  "changeHistory": [
    "c28b535e91cb73f7630230695ef52fdf655e46e4",
    "292ad0ebf2d18e1d8131127d60b3fde99aa0adf0",
    "b0891b556788d4c9c8cdf6982648001427d92238",
    "526c9d0cbabd8ed8f3a26c45a7a6bc0a5c158c0c",
    "06865630aa3da0b36064b9e00e0e95ff681f234e",
    "29027109bf962f47b6a6000fdca69b5679ce4b43",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "cb75a3178cccadf76df322dc5dc7d1f647a77221",
    "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
    "bf16d371dab210594755d04afc4697269ed088c0",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
    "d1a297476448ea9feec80af04416f198dc462bca"
  ],
  "changeHistoryShort": {
    "c28b535e91cb73f7630230695ef52fdf655e46e4": "Ybodychange",
    "292ad0ebf2d18e1d8131127d60b3fde99aa0adf0": "Ybodychange",
    "b0891b556788d4c9c8cdf6982648001427d92238": "Ybodychange",
    "526c9d0cbabd8ed8f3a26c45a7a6bc0a5c158c0c": "Ybodychange",
    "06865630aa3da0b36064b9e00e0e95ff681f234e": "Ybodychange",
    "29027109bf962f47b6a6000fdca69b5679ce4b43": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "cb75a3178cccadf76df322dc5dc7d1f647a77221": "Ybodychange",
    "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
    "bf16d371dab210594755d04afc4697269ed088c0": "Ybodychange",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ybodychange",
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": "Ymultichange(Yfilerename,Ybodychange)",
    "d1a297476448ea9feec80af04416f198dc462bca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c28b535e91cb73f7630230695ef52fdf655e46e4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5616: Remove remnants of cobertura usage\n",
      "commitDate": "20/04/18 11:55 AM",
      "commitName": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,11 @@\n     private void loadHeaderFile() throws CheckstyleException {\n         checkHeaderNotInitialized();\n-        Reader headerReader \u003d null;\n-        try {\n-            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n-                    headerFile.toURL().openStream()), charset);\n+        try (Reader headerReader \u003d new InputStreamReader(new BufferedInputStream(\n+                    headerFile.toURL().openStream()), charset)) {\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n                     \"unable to load header file \" + headerFile, ex);\n         }\n-        finally {\n-            Closeables.closeQuietly(headerReader);\n-        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException {\n        checkHeaderNotInitialized();\n        try (Reader headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    headerFile.toURL().openStream()), charset)) {\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + headerFile, ex);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "292ad0ebf2d18e1d8131127d60b3fde99aa0adf0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3575: changed module setters for uri",
      "commitDate": "05/12/16 1:00 PM",
      "commitName": "292ad0ebf2d18e1d8131127d60b3fde99aa0adf0",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/09/16 6:28 AM",
      "commitNameOld": "7f8309ba36bb3c47b146f2cacda89d7509fa47f8",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 69.31,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,16 @@\n     private void loadHeaderFile() throws CheckstyleException {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            final URI uri \u003d CommonUtils.getUriByFilename(headerFile);\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n-                    uri.toURL().openStream()), charset);\n+                    headerFile.toURL().openStream()), charset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n                     \"unable to load header file \" + headerFile, ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    headerFile.toURL().openStream()), charset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + headerFile, ex);\n        }\n        finally {\n            Closeables.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "b0891b556788d4c9c8cdf6982648001427d92238": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2442: fixed xdoc check errors",
      "commitDate": "27/10/15 7:36 PM",
      "commitName": "b0891b556788d4c9c8cdf6982648001427d92238",
      "commitAuthor": "rnveach",
      "commitDateOld": "07/10/15 5:57 PM",
      "commitNameOld": "9c0ce8e0ece427b3ee03cab57b2451864d734e3b",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.07,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void loadHeaderFile() throws CheckstyleException {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            final URI uri \u003d CommonUtils.getUriByFilename(filename);\n+            final URI uri \u003d CommonUtils.getUriByFilename(headerFile);\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                     uri.toURL().openStream()), charset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n-                    \"unable to load header file \" + filename, ex);\n+                    \"unable to load header file \" + headerFile, ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d CommonUtils.getUriByFilename(headerFile);\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), charset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + headerFile, ex);\n        }\n        finally {\n            Closeables.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "526c9d0cbabd8ed8f3a26c45a7a6bc0a5c158c0c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: blocks of code should not be duplicated\n",
      "commitDate": "10/09/15 5:25 PM",
      "commitName": "526c9d0cbabd8ed8f3a26c45a7a6bc0a5c158c0c",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "31/08/15 11:24 AM",
      "commitNameOld": "2b861bd6e16584e22bb115ff7abd65c35072eb92",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 10.25,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     private void loadHeaderFile() throws CheckstyleException {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            final URI uri \u003d resolveHeaderFile();\n+            final URI uri \u003d CommonUtils.getUriByFilename(filename);\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                     uri.toURL().openStream()), charset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n                     \"unable to load header file \" + filename, ex);\n         }\n         finally {\n             Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d CommonUtils.getUriByFilename(filename);\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), charset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + filename, ex);\n        }\n        finally {\n            Closeables.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "06865630aa3da0b36064b9e00e0e95ff681f234e": {
      "type": "Ybodychange",
      "commitMessage": "Use Guava Closeables to manage closing exceptions\n\n\u003eWhile it\u0027s not safe in the general case to ignore exceptions that are thrown when closing an I/O resource, it should generally be safe in the case of a resource that\u0027s being used only for reading, such as a Reader. Unlike with writable resources, there\u0027s no chance that a failure that occurs when closing the reader indicates a meaningful problem such as a failure to flush all bytes to the underlying resource.\n\n`Reader` and `InputStream` instances are closed using `Closeables.closeQuietly()`, while `RandomAccessFile` is closed with `Closeables.close()` that throws `IOException` and needs to be handled.\n\nFrom Javadoc:\n\u003e```java\npublic static void close(@Nullable\n         Closeable closeable,\n         boolean swallowIOException)\n                  throws IOException\n```\n\u003eCloses a Closeable, with control over whether an IOException may be thrown. This is primarily useful in a finally block, where a thrown exception needs to be logged but not propagated (otherwise the original exception will be lost).\nIf swallowIOException is true then we never throw IOException but merely log it.\n\n\u003eExample:\n```java\n   public void useStreamNicely() throws IOException {\n     SomeStream stream \u003d new SomeStream(\"foo\");\n     boolean threw \u003d true;\n     try {\n       // ... code which does something with the stream ...\n       threw \u003d false;\n     } finally {\n       // If an exception occurs, rethrow it only if threw\u003d\u003dfalse:\n       Closeables.close(stream, threw);\n     }\n   }\n```\n\nMoreover, `Closeables.close()` and  `Flushables.flush()` are used to flush and close `OutputStream`.\n",
      "commitDate": "26/03/15 12:35 PM",
      "commitName": "06865630aa3da0b36064b9e00e0e95ff681f234e",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n             final URI uri \u003d resolveHeaderFile();\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                     uri.toURL().openStream()), charset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n                     \"unable to load header file \" + filename, ex);\n         }\n         finally {\n-            Utils.closeQuietly(headerReader);\n+            Closeables.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d resolveHeaderFile();\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), charset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + filename, ex);\n        }\n        finally {\n            Closeables.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "29027109bf962f47b6a6000fdca69b5679ce4b43": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, header, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "29027109bf962f47b6a6000fdca69b5679ce4b43",
      "commitAuthor": "alexkravin",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 320.89,
      "commitsBetweenForRepo": 472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n             final URI uri \u003d resolveHeaderFile();\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n-                    uri.toURL().openStream()), mCharset);\n+                    uri.toURL().openStream()), charset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n-                    \"unable to load header file \" + mFilename, ex);\n+                    \"unable to load header file \" + filename, ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d resolveHeaderFile();\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), charset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + filename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d resolveHeaderFile();\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), mCharset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + mFilename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java"
      }
    },
    "cb75a3178cccadf76df322dc5dc7d1f647a77221": {
      "type": "Ybodychange",
      "commitMessage": "#241 Allow HeaderCheck definition to be specified as URL\n",
      "commitDate": "18/07/13 5:58 AM",
      "commitName": "cb75a3178cccadf76df322dc5dc7d1f647a77221",
      "commitAuthor": "tnarake",
      "commitDateOld": "18/09/12 3:57 AM",
      "commitNameOld": "68f1a6fa63b635da214ce6cfffd9f8c283248f60",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 303.08,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n     private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n+            final URI uri \u003d resolveHeaderFile();\n             headerReader \u003d new InputStreamReader(new BufferedInputStream(\n-                    new FileInputStream(mFilename)), mCharset);\n+                    uri.toURL().openStream()), mCharset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\n                     \"unable to load header file \" + mFilename, ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            final URI uri \u003d resolveHeaderFile();\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    uri.toURL().openStream()), mCharset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + mFilename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
      "extendedDetails": {}
    },
    "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Added the option \"charset\" to the header checks to allow controlling the encoding of the header file (rfe 1952641).\n",
      "commitDate": "05/02/09 3:08 PM",
      "commitName": "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Added the option \"charset\" to the header checks to allow controlling the encoding of the header file (rfe 1952641).\n",
          "commitDate": "05/02/09 3:08 PM",
          "commitName": "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "05/02/09 1:22 PM",
          "commitNameOld": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-    private void loadHeaderFile(String aFileName)\n+    private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            headerReader \u003d new FileReader(aFileName);\n+            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n+                    new FileInputStream(mFilename)), mCharset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n-            throw new ConversionException(\n-                    \"unable to load header file \" + aFileName, ex);\n+            throw new CheckstyleException(\n+                    \"unable to load header file \" + mFilename, ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    new FileInputStream(mFilename)), mCharset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + mFilename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[aFileName-String]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Added the option \"charset\" to the header checks to allow controlling the encoding of the header file (rfe 1952641).\n",
          "commitDate": "05/02/09 3:08 PM",
          "commitName": "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "05/02/09 1:22 PM",
          "commitNameOld": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-    private void loadHeaderFile(String aFileName)\n+    private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            headerReader \u003d new FileReader(aFileName);\n+            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n+                    new FileInputStream(mFilename)), mCharset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n-            throw new ConversionException(\n-                    \"unable to load header file \" + aFileName, ex);\n+            throw new CheckstyleException(\n+                    \"unable to load header file \" + mFilename, ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    new FileInputStream(mFilename)), mCharset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + mFilename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[CheckstyleException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added the option \"charset\" to the header checks to allow controlling the encoding of the header file (rfe 1952641).\n",
          "commitDate": "05/02/09 3:08 PM",
          "commitName": "326e3ae67b8cc2a1dcbcf2356b30fd9a4afa964a",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "05/02/09 1:22 PM",
          "commitNameOld": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-    private void loadHeaderFile(String aFileName)\n+    private void loadHeaderFile() throws CheckstyleException\n     {\n         checkHeaderNotInitialized();\n         Reader headerReader \u003d null;\n         try {\n-            headerReader \u003d new FileReader(aFileName);\n+            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n+                    new FileInputStream(mFilename)), mCharset);\n             loadHeader(headerReader);\n         }\n         catch (final IOException ex) {\n-            throw new ConversionException(\n-                    \"unable to load header file \" + aFileName, ex);\n+            throw new CheckstyleException(\n+                    \"unable to load header file \" + mFilename, ex);\n         }\n         finally {\n             Utils.closeQuietly(headerReader);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile() throws CheckstyleException\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new InputStreamReader(new BufferedInputStream(\n                    new FileInputStream(mFilename)), mCharset);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new CheckstyleException(\n                    \"unable to load header file \" + mFilename, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
      "commitDate": "05/02/09 1:22 PM",
      "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
          "commitDate": "05/02/09 1:22 PM",
          "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "10/01/09 8:10 PM",
          "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    private void loadHeaderFile(String aFileName)\n     {\n-        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        mHeaderLines.clear();\n-        while (true) {\n-            final String l \u003d lnr.readLine();\n-            if (l \u003d\u003d null) {\n-                break;\n-            }\n-            mHeaderLines.add(l);\n+        checkHeaderNotInitialized();\n+        Reader headerReader \u003d null;\n+        try {\n+            headerReader \u003d new FileReader(aFileName);\n+            loadHeader(headerReader);\n         }\n-        postprocessHeaderLines();\n+        catch (final IOException ex) {\n+            throw new ConversionException(\n+                    \"unable to load header file \" + aFileName, ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile(String aFileName)\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new FileReader(aFileName);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new ConversionException(\n                    \"unable to load header file \" + aFileName, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
            "oldMethodName": "loadHeader",
            "newMethodName": "loadHeaderFile"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
          "commitDate": "05/02/09 1:22 PM",
          "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "10/01/09 8:10 PM",
          "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    private void loadHeaderFile(String aFileName)\n     {\n-        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        mHeaderLines.clear();\n-        while (true) {\n-            final String l \u003d lnr.readLine();\n-            if (l \u003d\u003d null) {\n-                break;\n-            }\n-            mHeaderLines.add(l);\n+        checkHeaderNotInitialized();\n+        Reader headerReader \u003d null;\n+        try {\n+            headerReader \u003d new FileReader(aFileName);\n+            loadHeader(headerReader);\n         }\n-        postprocessHeaderLines();\n+        catch (final IOException ex) {\n+            throw new ConversionException(\n+                    \"unable to load header file \" + aFileName, ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile(String aFileName)\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new FileReader(aFileName);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new ConversionException(\n                    \"unable to load header file \" + aFileName, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
          "commitDate": "05/02/09 1:22 PM",
          "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "10/01/09 8:10 PM",
          "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    private void loadHeaderFile(String aFileName)\n     {\n-        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        mHeaderLines.clear();\n-        while (true) {\n-            final String l \u003d lnr.readLine();\n-            if (l \u003d\u003d null) {\n-                break;\n-            }\n-            mHeaderLines.add(l);\n+        checkHeaderNotInitialized();\n+        Reader headerReader \u003d null;\n+        try {\n+            headerReader \u003d new FileReader(aFileName);\n+            loadHeader(headerReader);\n         }\n-        postprocessHeaderLines();\n+        catch (final IOException ex) {\n+            throw new ConversionException(\n+                    \"unable to load header file \" + aFileName, ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile(String aFileName)\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new FileReader(aFileName);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new ConversionException(\n                    \"unable to load header file \" + aFileName, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
          "commitDate": "05/02/09 1:22 PM",
          "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "10/01/09 8:10 PM",
          "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    private void loadHeaderFile(String aFileName)\n     {\n-        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        mHeaderLines.clear();\n-        while (true) {\n-            final String l \u003d lnr.readLine();\n-            if (l \u003d\u003d null) {\n-                break;\n-            }\n-            mHeaderLines.add(l);\n+        checkHeaderNotInitialized();\n+        Reader headerReader \u003d null;\n+        try {\n+            headerReader \u003d new FileReader(aFileName);\n+            loadHeader(headerReader);\n         }\n-        postprocessHeaderLines();\n+        catch (final IOException ex) {\n+            throw new ConversionException(\n+                    \"unable to load header file \" + aFileName, ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile(String aFileName)\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new FileReader(aFileName);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new ConversionException(\n                    \"unable to load header file \" + aFileName, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldValue": "loadHeader",
            "newValue": "loadHeaderFile"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Simplified the code by removing HeaderInfo classes, they were introduced to avoid code duplication between header checks in two separate inheritance trees (Java Check vs. FileSetCheck). Now that we have only FileSetChecks as Header checks, this delegation is no longer necessary.\n",
          "commitDate": "05/02/09 1:22 PM",
          "commitName": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "10/01/09 8:10 PM",
          "commitNameOld": "9cff1673f1d42910c654e0af5365d68591f104f0",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    private void loadHeaderFile(String aFileName)\n     {\n-        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        mHeaderLines.clear();\n-        while (true) {\n-            final String l \u003d lnr.readLine();\n-            if (l \u003d\u003d null) {\n-                break;\n-            }\n-            mHeaderLines.add(l);\n+        checkHeaderNotInitialized();\n+        Reader headerReader \u003d null;\n+        try {\n+            headerReader \u003d new FileReader(aFileName);\n+            loadHeader(headerReader);\n         }\n-        postprocessHeaderLines();\n+        catch (final IOException ex) {\n+            throw new ConversionException(\n+                    \"unable to load header file \" + aFileName, ex);\n+        }\n+        finally {\n+            Utils.closeQuietly(headerReader);\n+        }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeaderFile(String aFileName)\n    {\n        checkHeaderNotInitialized();\n        Reader headerReader \u003d null;\n        try {\n            headerReader \u003d new FileReader(aFileName);\n            loadHeader(headerReader);\n        }\n        catch (final IOException ex) {\n            throw new ConversionException(\n                    \"unable to load header file \" + aFileName, ex);\n        }\n        finally {\n            Utils.closeQuietly(headerReader);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java",
          "extendedDetails": {
            "oldValue": "[aHeaderReader-Reader(modifiers-final)]",
            "newValue": "[aFileName-String]"
          }
        }
      ]
    },
    "bf16d371dab210594755d04afc4697269ed088c0": {
      "type": "Ybodychange",
      "commitMessage": "converting the header checks to be fileset based.\n",
      "commitDate": "16/11/08 2:30 AM",
      "commitName": "bf16d371dab210594755d04afc4697269ed088c0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "05/11/08 11:21 PM",
      "commitNameOld": "bd8a1a545fd1bc19d5f84c5061c5383796a7c588",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,13 @@\n     private void loadHeader(final Reader aHeaderReader) throws IOException\n     {\n         final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        final ArrayList\u003cString\u003e lines \u003d Lists.newArrayList();\n+        mHeaderLines.clear();\n         while (true) {\n             final String l \u003d lnr.readLine();\n             if (l \u003d\u003d null) {\n                 break;\n             }\n-            lines.add(l);\n+            mHeaderLines.add(l);\n         }\n-        mHeaderLines \u003d lines.toArray(new String[lines.size()]);\n         postprocessHeaderLines();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        mHeaderLines.clear();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            mHeaderLines.add(l);\n        }\n        postprocessHeaderLines();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
      "extendedDetails": {}
    },
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": {
      "type": "Ybodychange",
      "commitMessage": "Drinking the \"Google Collections\" Kool-Aid.\n\nI like the reduced duplication.\n",
      "commitDate": "22/04/08 5:28 AM",
      "commitName": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "12/01/08 6:47 PM",
      "commitNameOld": "5a7e221b757e91d49be1aea105eb4b839e653fbd",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 100.4,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private void loadHeader(final Reader aHeaderReader) throws IOException\n     {\n         final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        final ArrayList\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n+        final ArrayList\u003cString\u003e lines \u003d Lists.newArrayList();\n         while (true) {\n             final String l \u003d lnr.readLine();\n             if (l \u003d\u003d null) {\n                 break;\n             }\n             lines.add(l);\n         }\n         mHeaderLines \u003d lines.toArray(new String[lines.size()]);\n         postprocessHeaderLines();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        final ArrayList\u003cString\u003e lines \u003d Lists.newArrayList();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            lines.add(l);\n        }\n        mHeaderLines \u003d lines.toArray(new String[lines.size()]);\n        postprocessHeaderLines();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
      "extendedDetails": {}
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 321.58,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n     private void loadHeader(final Reader aHeaderReader) throws IOException\n     {\n         final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n-        final ArrayList lines \u003d new ArrayList();\n+        final ArrayList\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n         while (true) {\n             final String l \u003d lnr.readLine();\n             if (l \u003d\u003d null) {\n                 break;\n             }\n             lines.add(l);\n         }\n-        mHeaderLines \u003d (String[]) lines.toArray(new String[lines.size()]);\n+        mHeaderLines \u003d lines.toArray(new String[lines.size()]);\n         postprocessHeaderLines();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        final ArrayList\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            lines.add(l);\n        }\n        mHeaderLines \u003d lines.toArray(new String[lines.size()]);\n        postprocessHeaderLines();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
      "extendedDetails": {}
    },
    "6f1f7bd3fdcca84404e97964b3e48de6db5024ec": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Added CrossLanguageRegexpHeaderCheck. This involved some refactorings to avoid duplicate code, so lots of files are affected\n- moved AbstractHeaderCheck to header package\n- moved file extension filtering code to Utils, so it\u0027s available not only from FileSetChecks\n- moved regexp header checking logic to RegexpHeaderChecker bean\n- moved check initialization logic and parameter checking to HeaderInfo classes\n",
      "commitDate": "19/10/06 1:35 PM",
      "commitName": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
      "commitAuthor": "Lars Kühne",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Added CrossLanguageRegexpHeaderCheck. This involved some refactorings to avoid duplicate code, so lots of files are affected\n- moved AbstractHeaderCheck to header package\n- moved file extension filtering code to Utils, so it\u0027s available not only from FileSetChecks\n- moved regexp header checking logic to RegexpHeaderChecker bean\n- moved check initialization logic and parameter checking to HeaderInfo classes\n",
          "commitDate": "19/10/06 1:35 PM",
          "commitName": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "08/10/06 5:11 AM",
          "commitNameOld": "3296ba06ac6ae5ad8c864ada15cec91d058785d4",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 11.35,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,14 @@\n     private void loadHeader(final Reader aHeaderReader) throws IOException\n     {\n         final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n         final ArrayList lines \u003d new ArrayList();\n         while (true) {\n             final String l \u003d lnr.readLine();\n             if (l \u003d\u003d null) {\n                 break;\n             }\n             lines.add(l);\n         }\n-        mHeaderLines \u003d (String[]) lines.toArray(new String[0]);\n+        mHeaderLines \u003d (String[]) lines.toArray(new String[lines.size()]);\n+        postprocessHeaderLines();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        final ArrayList lines \u003d new ArrayList();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            lines.add(l);\n        }\n        mHeaderLines \u003d (String[]) lines.toArray(new String[lines.size()]);\n        postprocessHeaderLines();\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractHeaderCheck.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added CrossLanguageRegexpHeaderCheck. This involved some refactorings to avoid duplicate code, so lots of files are affected\n- moved AbstractHeaderCheck to header package\n- moved file extension filtering code to Utils, so it\u0027s available not only from FileSetChecks\n- moved regexp header checking logic to RegexpHeaderChecker bean\n- moved check initialization logic and parameter checking to HeaderInfo classes\n",
          "commitDate": "19/10/06 1:35 PM",
          "commitName": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec",
          "commitAuthor": "Lars Kühne",
          "commitDateOld": "08/10/06 5:11 AM",
          "commitNameOld": "3296ba06ac6ae5ad8c864ada15cec91d058785d4",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 11.35,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,14 @@\n     private void loadHeader(final Reader aHeaderReader) throws IOException\n     {\n         final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n         final ArrayList lines \u003d new ArrayList();\n         while (true) {\n             final String l \u003d lnr.readLine();\n             if (l \u003d\u003d null) {\n                 break;\n             }\n             lines.add(l);\n         }\n-        mHeaderLines \u003d (String[]) lines.toArray(new String[0]);\n+        mHeaderLines \u003d (String[]) lines.toArray(new String[lines.size()]);\n+        postprocessHeaderLines();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        final ArrayList lines \u003d new ArrayList();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            lines.add(l);\n        }\n        mHeaderLines \u003d (String[]) lines.toArray(new String[lines.size()]);\n        postprocessHeaderLines();\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1a297476448ea9feec80af04416f198dc462bca": {
      "type": "Yintroduced",
      "commitMessage": "rfe #1041590, allow header specification directly in checkstyle config file\n",
      "commitDate": "16/10/04 10:13 AM",
      "commitName": "d1a297476448ea9feec80af04416f198dc462bca",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,13 @@\n+    private void loadHeader(final Reader aHeaderReader) throws IOException\n+    {\n+        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n+        final ArrayList lines \u003d new ArrayList();\n+        while (true) {\n+            final String l \u003d lnr.readLine();\n+            if (l \u003d\u003d null) {\n+                break;\n+            }\n+            lines.add(l);\n+        }\n+        mHeaderLines \u003d (String[]) lines.toArray(new String[0]);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadHeader(final Reader aHeaderReader) throws IOException\n    {\n        final LineNumberReader lnr \u003d new LineNumberReader(aHeaderReader);\n        final ArrayList lines \u003d new ArrayList();\n        while (true) {\n            final String l \u003d lnr.readLine();\n            if (l \u003d\u003d null) {\n                break;\n            }\n            lines.add(l);\n        }\n        mHeaderLines \u003d (String[]) lines.toArray(new String[0]);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractHeaderCheck.java"
    }
  }
}