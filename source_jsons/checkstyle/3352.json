{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommonUtil.java",
  "functionName": "matchesFileExtension",
  "functionId": "matchesFileExtension___file-File__fileExtensions-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java",
  "functionStartLine": 233,
  "functionEndLine": 261,
  "numCommitsSeen": 154,
  "timeTaken": 3872,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "d4bd21d46ceda66dee90b820d9ad487d3ed0d40e",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "204c073294cdca6756bcd546d6af85a797ad7d79",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "d4bd21d46ceda66dee90b820d9ad487d3ed0d40e": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Yrename",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ymovefromfile",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": "Yfilerename",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": "Ybodychange",
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": "Yparameterchange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "204c073294cdca6756bcd546d6af85a797ad7d79": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java"
      }
    },
    "d4bd21d46ceda66dee90b820d9ad487d3ed0d40e": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4102: changed loops to end execution early",
      "commitDate": "05/04/17 4:59 AM",
      "commitName": "d4bd21d46ceda66dee90b820d9ad487d3ed0d40e",
      "commitAuthor": "rnveach",
      "commitDateOld": "26/02/17 7:25 PM",
      "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 37.36,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     public static boolean matchesFileExtension(File file, String... fileExtensions) {\n         boolean result \u003d false;\n         if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n             result \u003d true;\n         }\n         else {\n             // normalize extensions so all of them have a leading dot\n             final String[] withDotExtensions \u003d new String[fileExtensions.length];\n             for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                 final String extension \u003d fileExtensions[i];\n                 if (startsWithChar(extension, \u0027.\u0027)) {\n                     withDotExtensions[i] \u003d extension;\n                 }\n                 else {\n                     withDotExtensions[i] \u003d \".\" + extension;\n                 }\n             }\n \n             final String fileName \u003d file.getName();\n             for (final String fileExtension : withDotExtensions) {\n                 if (fileName.endsWith(fileExtension)) {\n                     result \u003d true;\n+                    break;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Yrename",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 10:26 PM",
      "commitNameOld": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-    public static boolean fileExtensionMatches(File file, String... fileExtensions) {\n+    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n         boolean result \u003d false;\n         if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n             result \u003d true;\n         }\n         else {\n             // normalize extensions so all of them have a leading dot\n             final String[] withDotExtensions \u003d new String[fileExtensions.length];\n             for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                 final String extension \u003d fileExtensions[i];\n                 if (startsWithChar(extension, \u0027.\u0027)) {\n                     withDotExtensions[i] \u003d extension;\n                 }\n                 else {\n                     withDotExtensions[i] \u003d \".\" + extension;\n                 }\n             }\n \n             final String fileName \u003d file.getName();\n             for (final String fileExtension : withDotExtensions) {\n                 if (fileName.endsWith(fileExtension)) {\n                     result \u003d true;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
      "extendedDetails": {
        "oldValue": "fileExtensionMatches",
        "newValue": "matchesFileExtension"
      }
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ymovefromfile",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean fileExtensionMatches(File file, String... fileExtensions) {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java",
        "oldMethodName": "fileExtensionMatches",
        "newMethodName": "fileExtensionMatches"
      }
    },
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": {
      "type": "Yfilerename",
      "commitMessage": "Utils classes have been moved to utils package. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "26/08/15 6:08 PM",
      "commitNameOld": "f6113bb56d695719a8803274effb3596cb82120f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean fileExtensionMatches(File file, String... fileExtensions) {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/Utils.java"
      }
    },
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from SimplifyStartsWith rule, issue #949\n",
      "commitDate": "03/05/15 8:00 AM",
      "commitName": "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "01/05/15 4:32 PM",
      "commitNameOld": "31421dcdda3b3534f2fcc5c6e88a8fdbc5d15311",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.64,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public static boolean fileExtensionMatches(File file, String... fileExtensions)\n     {\n         boolean result \u003d false;\n         if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n             result \u003d true;\n         }\n         else {\n             // normalize extensions so all of them have a leading dot\n             final String[] withDotExtensions \u003d new String[fileExtensions.length];\n             for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                 final String extension \u003d fileExtensions[i];\n-                if (extension.startsWith(\".\")) {\n+                if (startsWithChar(extension, \u0027.\u0027)) {\n                     withDotExtensions[i] \u003d extension;\n                 }\n                 else {\n                     withDotExtensions[i] \u003d \".\" + extension;\n                 }\n             }\n \n             final String fileName \u003d file.getName();\n             for (final String fileExtension : withDotExtensions) {\n                 if (fileName.endsWith(fileExtension)) {\n                     result \u003d true;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean fileExtensionMatches(File file, String... fileExtensions)\n    {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (startsWithChar(extension, \u0027.\u0027)) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "extendedDetails": {}
    },
    "c0446a825514ea0279b8c22f633f2c4e3c73dc1f": {
      "type": "Yparameterchange",
      "commitMessage": "Fix PMD violations from UseVarargs rule, issue #999\n\nThe changes are fully backward-compatible. Method with vararg can be invoked both using array and list of parameters.\n",
      "commitDate": "29/04/15 5:21 PM",
      "commitName": "c0446a825514ea0279b8c22f633f2c4e3c73dc1f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "25/04/15 5:30 PM",
      "commitNameOld": "55b266cd92adf7b5e18f84ddee839d63f9330c5b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n+    public static boolean fileExtensionMatches(File file, String... fileExtensions)\n     {\n         boolean result \u003d false;\n         if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n             result \u003d true;\n         }\n         else {\n             // normalize extensions so all of them have a leading dot\n             final String[] withDotExtensions \u003d new String[fileExtensions.length];\n             for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                 final String extension \u003d fileExtensions[i];\n                 if (extension.startsWith(\".\")) {\n                     withDotExtensions[i] \u003d extension;\n                 }\n                 else {\n                     withDotExtensions[i] \u003d \".\" + extension;\n                 }\n             }\n \n             final String fileName \u003d file.getName();\n             for (final String fileExtension : withDotExtensions) {\n                 if (fileName.endsWith(fileExtension)) {\n                     result \u003d true;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean fileExtensionMatches(File file, String... fileExtensions)\n    {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "extendedDetails": {
        "oldValue": "[file-File, fileExtensions-String[]]",
        "newValue": "[file-File, fileExtensions-String]"
      }
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n     {\n         boolean result \u003d false;\n-        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n+        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n             result \u003d true;\n         }\n         else {\n             // normalize extensions so all of them have a leading dot\n             final String[] withDotExtensions \u003d new String[fileExtensions.length];\n             for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                 final String extension \u003d fileExtensions[i];\n                 if (extension.startsWith(\".\")) {\n                     withDotExtensions[i] \u003d extension;\n                 }\n                 else {\n                     withDotExtensions[i] \u003d \".\" + extension;\n                 }\n             }\n \n             final String fileName \u003d file.getName();\n             for (final String fileExtension : withDotExtensions) {\n                 if (fileName.endsWith(fileExtension)) {\n                     result \u003d true;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n    {\n        boolean result \u003d false;\n        if (fileExtensions \u003d\u003d null || fileExtensions.length \u003d\u003d 0) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
      "extendedDetails": {}
    },
    "204c073294cdca6756bcd546d6af85a797ad7d79": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
      "commitDate": "25/01/15 1:30 AM",
      "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
          "commitDate": "25/01/15 1:30 AM",
          "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/01/15 4:31 AM",
          "commitNameOld": "bac672f756acb6603e127a1c2ef84474b0db2ccd",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 2.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,29 @@\n-    private boolean fileExtensionMatches(File file)\n+    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n     {\n-        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n-            return true;\n+        boolean result \u003d false;\n+        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n+            result \u003d true;\n         }\n-\n-        // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n-        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n-            final String extension \u003d fileExtensions[i];\n-            if (extension.startsWith(\".\")) {\n-                withDotExtensions[i] \u003d extension;\n+        else {\n+            // normalize extensions so all of them have a leading dot\n+            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+                final String extension \u003d fileExtensions[i];\n+                if (extension.startsWith(\".\")) {\n+                    withDotExtensions[i] \u003d extension;\n+                }\n+                else {\n+                    withDotExtensions[i] \u003d \".\" + extension;\n+                }\n             }\n-            else {\n-                withDotExtensions[i] \u003d \".\" + extension;\n+\n+            final String fileName \u003d file.getName();\n+            for (final String fileExtension : withDotExtensions) {\n+                if (fileName.endsWith(fileExtension)) {\n+                    result \u003d true;\n+                }\n             }\n         }\n \n-        final String fileName \u003d file.getName();\n-        for (final String fileExtension : withDotExtensions) {\n-            if (fileName.endsWith(fileExtension)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n    {\n        boolean result \u003d false;\n        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
            "oldMethodName": "fileExtensionMatches",
            "newMethodName": "fileExtensionMatches"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
          "commitDate": "25/01/15 1:30 AM",
          "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/01/15 4:31 AM",
          "commitNameOld": "bac672f756acb6603e127a1c2ef84474b0db2ccd",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 2.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,29 @@\n-    private boolean fileExtensionMatches(File file)\n+    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n     {\n-        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n-            return true;\n+        boolean result \u003d false;\n+        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n+            result \u003d true;\n         }\n-\n-        // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n-        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n-            final String extension \u003d fileExtensions[i];\n-            if (extension.startsWith(\".\")) {\n-                withDotExtensions[i] \u003d extension;\n+        else {\n+            // normalize extensions so all of them have a leading dot\n+            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+                final String extension \u003d fileExtensions[i];\n+                if (extension.startsWith(\".\")) {\n+                    withDotExtensions[i] \u003d extension;\n+                }\n+                else {\n+                    withDotExtensions[i] \u003d \".\" + extension;\n+                }\n             }\n-            else {\n-                withDotExtensions[i] \u003d \".\" + extension;\n+\n+            final String fileName \u003d file.getName();\n+            for (final String fileExtension : withDotExtensions) {\n+                if (fileName.endsWith(fileExtension)) {\n+                    result \u003d true;\n+                }\n             }\n         }\n \n-        final String fileName \u003d file.getName();\n-        for (final String fileExtension : withDotExtensions) {\n-            if (fileName.endsWith(fileExtension)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n    {\n        boolean result \u003d false;\n        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
          "commitDate": "25/01/15 1:30 AM",
          "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/01/15 4:31 AM",
          "commitNameOld": "bac672f756acb6603e127a1c2ef84474b0db2ccd",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 2.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,29 @@\n-    private boolean fileExtensionMatches(File file)\n+    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n     {\n-        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n-            return true;\n+        boolean result \u003d false;\n+        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n+            result \u003d true;\n         }\n-\n-        // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n-        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n-            final String extension \u003d fileExtensions[i];\n-            if (extension.startsWith(\".\")) {\n-                withDotExtensions[i] \u003d extension;\n+        else {\n+            // normalize extensions so all of them have a leading dot\n+            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+                final String extension \u003d fileExtensions[i];\n+                if (extension.startsWith(\".\")) {\n+                    withDotExtensions[i] \u003d extension;\n+                }\n+                else {\n+                    withDotExtensions[i] \u003d \".\" + extension;\n+                }\n             }\n-            else {\n-                withDotExtensions[i] \u003d \".\" + extension;\n+\n+            final String fileName \u003d file.getName();\n+            for (final String fileExtension : withDotExtensions) {\n+                if (fileName.endsWith(fileExtension)) {\n+                    result \u003d true;\n+                }\n             }\n         }\n \n-        final String fileName \u003d file.getName();\n-        for (final String fileExtension : withDotExtensions) {\n-            if (fileName.endsWith(fileExtension)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n    {\n        boolean result \u003d false;\n        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Added file extensions property to Checker \u0026 TreeWalker, issue #25\n",
          "commitDate": "25/01/15 1:30 AM",
          "commitName": "204c073294cdca6756bcd546d6af85a797ad7d79",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/01/15 4:31 AM",
          "commitNameOld": "bac672f756acb6603e127a1c2ef84474b0db2ccd",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 2.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,29 @@\n-    private boolean fileExtensionMatches(File file)\n+    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n     {\n-        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n-            return true;\n+        boolean result \u003d false;\n+        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n+            result \u003d true;\n         }\n-\n-        // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n-        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n-            final String extension \u003d fileExtensions[i];\n-            if (extension.startsWith(\".\")) {\n-                withDotExtensions[i] \u003d extension;\n+        else {\n+            // normalize extensions so all of them have a leading dot\n+            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+                final String extension \u003d fileExtensions[i];\n+                if (extension.startsWith(\".\")) {\n+                    withDotExtensions[i] \u003d extension;\n+                }\n+                else {\n+                    withDotExtensions[i] \u003d \".\" + extension;\n+                }\n             }\n-            else {\n-                withDotExtensions[i] \u003d \".\" + extension;\n+\n+            final String fileName \u003d file.getName();\n+            for (final String fileExtension : withDotExtensions) {\n+                if (fileName.endsWith(fileExtension)) {\n+                    result \u003d true;\n+                }\n             }\n         }\n \n-        final String fileName \u003d file.getName();\n-        for (final String fileExtension : withDotExtensions) {\n-            if (fileName.endsWith(fileExtension)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+        return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean fileExtensionMatches(File file, String[] fileExtensions)\n    {\n        boolean result \u003d false;\n        if ((fileExtensions \u003d\u003d null) || (fileExtensions.length \u003d\u003d 0)) {\n            result \u003d true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions \u003d new String[fileExtensions.length];\n            for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n                final String extension \u003d fileExtensions[i];\n                if (extension.startsWith(\".\")) {\n                    withDotExtensions[i] \u003d extension;\n                }\n                else {\n                    withDotExtensions[i] \u003d \".\" + extension;\n                }\n            }\n\n            final String fileName \u003d file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result \u003d true;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java",
          "extendedDetails": {
            "oldValue": "[file-File]",
            "newValue": "[file-File, fileExtensions-String[]]"
          }
        }
      ]
    },
    "b94bac0719851b65b59b4aafc5bd3ef029321ed7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, api, #512\n",
      "commitDate": "19/01/15 6:19 AM",
      "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean fileExtensionMatches(File aFile)\n+    private boolean fileExtensionMatches(File file)\n     {\n-        if ((null \u003d\u003d mFileExtensions) || (mFileExtensions.length \u003d\u003d 0)) {\n+        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n             return true;\n         }\n \n         // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[mFileExtensions.length];\n-        for (int i \u003d 0; i \u003c mFileExtensions.length; i++) {\n-            final String extension \u003d mFileExtensions[i];\n+        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+            final String extension \u003d fileExtensions[i];\n             if (extension.startsWith(\".\")) {\n                 withDotExtensions[i] \u003d extension;\n             }\n             else {\n                 withDotExtensions[i] \u003d \".\" + extension;\n             }\n         }\n \n-        final String fileName \u003d aFile.getName();\n+        final String fileName \u003d file.getName();\n         for (final String fileExtension : withDotExtensions) {\n             if (fileName.endsWith(fileExtension)) {\n                 return true;\n             }\n         }\n \n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean fileExtensionMatches(File file)\n    {\n        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n            return true;\n        }\n\n        // normalize extensions so all of them have a leading dot\n        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n            final String extension \u003d fileExtensions[i];\n            if (extension.startsWith(\".\")) {\n                withDotExtensions[i] \u003d extension;\n            }\n            else {\n                withDotExtensions[i] \u003d \".\" + extension;\n            }\n        }\n\n        final String fileName \u003d file.getName();\n        for (final String fileExtension : withDotExtensions) {\n            if (fileName.endsWith(fileExtension)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java",
          "extendedDetails": {
            "oldValue": "[aFile-File]",
            "newValue": "[file-File]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, api, #512\n",
          "commitDate": "19/01/15 6:19 AM",
          "commitName": "b94bac0719851b65b59b4aafc5bd3ef029321ed7",
          "commitAuthor": "alexkravin",
          "commitDateOld": "14/12/14 10:33 PM",
          "commitNameOld": "7aa061665c2b005f97b0c05bf03604636175dc9a",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 35.32,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-    private boolean fileExtensionMatches(File aFile)\n+    private boolean fileExtensionMatches(File file)\n     {\n-        if ((null \u003d\u003d mFileExtensions) || (mFileExtensions.length \u003d\u003d 0)) {\n+        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n             return true;\n         }\n \n         // normalize extensions so all of them have a leading dot\n-        final String[] withDotExtensions \u003d new String[mFileExtensions.length];\n-        for (int i \u003d 0; i \u003c mFileExtensions.length; i++) {\n-            final String extension \u003d mFileExtensions[i];\n+        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n+        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n+            final String extension \u003d fileExtensions[i];\n             if (extension.startsWith(\".\")) {\n                 withDotExtensions[i] \u003d extension;\n             }\n             else {\n                 withDotExtensions[i] \u003d \".\" + extension;\n             }\n         }\n \n-        final String fileName \u003d aFile.getName();\n+        final String fileName \u003d file.getName();\n         for (final String fileExtension : withDotExtensions) {\n             if (fileName.endsWith(fileExtension)) {\n                 return true;\n             }\n         }\n \n         return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean fileExtensionMatches(File file)\n    {\n        if ((null \u003d\u003d fileExtensions) || (fileExtensions.length \u003d\u003d 0)) {\n            return true;\n        }\n\n        // normalize extensions so all of them have a leading dot\n        final String[] withDotExtensions \u003d new String[fileExtensions.length];\n        for (int i \u003d 0; i \u003c fileExtensions.length; i++) {\n            final String extension \u003d fileExtensions[i];\n            if (extension.startsWith(\".\")) {\n                withDotExtensions[i] \u003d extension;\n            }\n            else {\n                withDotExtensions[i] \u003d \".\" + extension;\n            }\n        }\n\n        final String fileName \u003d file.getName();\n        for (final String fileExtension : withDotExtensions) {\n            if (fileName.endsWith(fileExtension)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean fileExtensionMatches(File aFile)\n    {\n        if ((null \u003d\u003d mFileExtensions) || (mFileExtensions.length \u003d\u003d 0)) {\n            return true;\n        }\n\n        // normalize extensions so all of them have a leading dot\n        final String[] withDotExtensions \u003d new String[mFileExtensions.length];\n        for (int i \u003d 0; i \u003c mFileExtensions.length; i++) {\n            final String extension \u003d mFileExtensions[i];\n            if (extension.startsWith(\".\")) {\n                withDotExtensions[i] \u003d extension;\n            }\n            else {\n                withDotExtensions[i] \u003d \".\" + extension;\n            }\n        }\n\n        final String fileName \u003d aFile.getName();\n        for (final String fileExtension : withDotExtensions) {\n            if (fileName.endsWith(fileExtension)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java"
      }
    },
    "13b7c634337e38d20daa92ca9d5e069a2e72ec55": {
      "type": "Yintroduced",
      "commitMessage": "A large refactoring to move the functionality of open/reporting on files into Checker and out of FileSetCheck. The advantages are:\n\n- reduces the logic required in each implementation of FileSetCheck.\n\n- reduces, but not eliminates, the number of times a file is reported as being audited.\n\n- reduces the amount of times a file needs to be read in from the file system.\n\nThe motivation is the desire to move more checks to be purely FileSetCheck based, like the TabCharacter check.\n\nI still need to do some tidying up of the documentation, and make Checker support \"charset\".\n",
      "commitDate": "09/11/08 1:37 AM",
      "commitName": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,27 @@\n+    private boolean fileExtensionMatches(File aFile)\n+    {\n+        if ((null \u003d\u003d mFileExtensions) || (mFileExtensions.length \u003d\u003d 0)) {\n+            return true;\n+        }\n+\n+        // normalize extensions so all of them have a leading dot\n+        final String[] withDotExtensions \u003d new String[mFileExtensions.length];\n+        for (int i \u003d 0; i \u003c mFileExtensions.length; i++) {\n+            final String extension \u003d mFileExtensions[i];\n+            if (extension.startsWith(\".\")) {\n+                withDotExtensions[i] \u003d extension;\n+            }\n+            else {\n+                withDotExtensions[i] \u003d \".\" + extension;\n+            }\n+        }\n+\n+        final String fileName \u003d aFile.getName();\n+        for (final String fileExtension : withDotExtensions) {\n+            if (fileName.endsWith(fileExtension)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean fileExtensionMatches(File aFile)\n    {\n        if ((null \u003d\u003d mFileExtensions) || (mFileExtensions.length \u003d\u003d 0)) {\n            return true;\n        }\n\n        // normalize extensions so all of them have a leading dot\n        final String[] withDotExtensions \u003d new String[mFileExtensions.length];\n        for (int i \u003d 0; i \u003c mFileExtensions.length; i++) {\n            final String extension \u003d mFileExtensions[i];\n            if (extension.startsWith(\".\")) {\n                withDotExtensions[i] \u003d extension;\n            }\n            else {\n                withDotExtensions[i] \u003d \".\" + extension;\n            }\n        }\n\n        final String fileName \u003d aFile.getName();\n        for (final String fileExtension : withDotExtensions) {\n            if (fileName.endsWith(fileExtension)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java"
    }
  }
}