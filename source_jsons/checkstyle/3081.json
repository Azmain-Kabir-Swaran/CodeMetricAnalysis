{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocStyleCheck.java",
  "functionName": "checkUnclosedTags",
  "functionId": "checkUnclosedTags___htmlStack-Deque__HtmlTag____token-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
  "functionStartLine": 637,
  "functionEndLine": 666,
  "numCommitsSeen": 203,
  "timeTaken": 3340,
  "changeHistory": [
    "2c71b5433175f9689c308c47207f03d029671d11",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c",
    "303d7cc6182e72f5472c8bcd9aa37432986793d1",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "06e8a4eaa00e548f52b2483864a31ba9defd0989",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3"
  ],
  "changeHistoryShort": {
    "2c71b5433175f9689c308c47207f03d029671d11": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c": "Ybodychange",
    "303d7cc6182e72f5472c8bcd9aa37432986793d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "06e8a4eaa00e548f52b2483864a31ba9defd0989": "Ymultichange(Yparameterchange,Ybodychange)",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yparameterchange,Ybodychange)",
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2c71b5433175f9689c308c47207f03d029671d11": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4724: fix FieldNotUsedInToString IDEA violations\n",
      "commitDate": "23/07/17 8:46 AM",
      "commitName": "2c71b5433175f9689c308c47207f03d029671d11",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "20/07/17 10:04 PM",
      "commitNameOld": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 2.45,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token) {\n         final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n         HtmlTag lastOpenTag \u003d htmlStack.pop();\n         while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         String lastFound \u003d \"\";\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineNo(),\n                 lastOpenTag.getPosition(),\n                 MSG_UNCLOSED_HTML,\n-                lastOpenTag);\n+                lastOpenTag.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token) {\n        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        String lastFound \u003d \"\";\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineNo(),\n                lastOpenTag.getPosition(),\n                MSG_UNCLOSED_HTML,\n                lastOpenTag.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token) {\n         final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n         HtmlTag lastOpenTag \u003d htmlStack.pop();\n         while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         String lastFound \u003d \"\";\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineNo(),\n                 lastOpenTag.getPosition(),\n-                UNCLOSED_HTML,\n+                MSG_UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token) {\n        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        String lastFound \u003d \"\";\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineNo(),\n                lastOpenTag.getPosition(),\n                MSG_UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "7dd24c8c35572b5db3e5c905d440e813cfe2538c": {
      "type": "Ybodychange",
      "commitMessage": "fix for Findbugs violations NM_CONFUSING. Issue #912\n",
      "commitDate": "11/04/15 3:41 PM",
      "commitName": "7dd24c8c35572b5db3e5c905d440e813cfe2538c",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "18/03/15 9:54 PM",
      "commitNameOld": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 23.74,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n     {\n         final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n         HtmlTag lastOpenTag \u003d htmlStack.pop();\n         while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n-            log(lastOpenTag.getLineno(),\n+            log(lastOpenTag.getLineNo(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n    {\n        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineNo(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {}
    },
    "303d7cc6182e72f5472c8bcd9aa37432986793d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Replace FastStack with ArrayDeque where possible, issue #86\n",
      "commitDate": "18/03/15 9:54 PM",
      "commitName": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Replace FastStack with ArrayDeque where possible, issue #86\n",
          "commitDate": "18/03/15 9:54 PM",
          "commitName": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "10/03/15 2:36 PM",
          "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 8.3,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n+    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n     {\n-        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n+        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n         HtmlTag lastOpenTag \u003d htmlStack.pop();\n         while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n    {\n        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[htmlStack-FastStack\u003cHtmlTag\u003e, token-String]",
            "newValue": "[htmlStack-Deque\u003cHtmlTag\u003e, token-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Replace FastStack with ArrayDeque where possible, issue #86\n",
          "commitDate": "18/03/15 9:54 PM",
          "commitName": "303d7cc6182e72f5472c8bcd9aa37432986793d1",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "10/03/15 2:36 PM",
          "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 8.3,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n+    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n     {\n-        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n+        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n         HtmlTag lastOpenTag \u003d htmlStack.pop();\n         while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(Deque\u003cHtmlTag\u003e htmlStack, String token)\n    {\n        final Deque\u003cHtmlTag\u003e unclosedTags \u003d new ArrayDeque\u003c\u003e();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "27/03/14 4:15 PM",
          "commitNameOld": "dfde8d0ffde5700201212b7e3d6219ed08c890a4",
          "commitAuthorOld": "Ilja Gubins",
          "daysBetweenCommits": 297.63,
          "commitsBetweenForRepo": 456,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n+    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n     {\n         final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n-        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n-        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n+        HtmlTag lastOpenTag \u003d htmlStack.pop();\n+        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n-                lastOpenTag \u003d aHtmlStack.pop();\n+                lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n-                lastOpenTag \u003d aHtmlStack.pop();\n+                lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n    {\n        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[aHtmlStack-FastStack\u003cHtmlTag\u003e, aToken-String]",
            "newValue": "[htmlStack-FastStack\u003cHtmlTag\u003e, token-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "27/03/14 4:15 PM",
          "commitNameOld": "dfde8d0ffde5700201212b7e3d6219ed08c890a4",
          "commitAuthorOld": "Ilja Gubins",
          "daysBetweenCommits": 297.63,
          "commitsBetweenForRepo": 456,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n+    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n     {\n         final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n-        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n-        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n+        HtmlTag lastOpenTag \u003d htmlStack.pop();\n+        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n-                lastOpenTag \u003d aHtmlStack.pop();\n+                lastOpenTag \u003d htmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n-                lastOpenTag \u003d aHtmlStack.pop();\n+                lastOpenTag \u003d htmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (final HtmlTag htag : unclosedTags) {\n             lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e htmlStack, String token)\n    {\n        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n        HtmlTag lastOpenTag \u003d htmlStack.pop();\n        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d htmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d htmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n    {\n        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java"
      }
    },
    "06e8a4eaa00e548f52b2483864a31ba9defd0989": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Simple implementation of a LIFO Stack that can be used instead of java.util.Vector which is synchronized. Will help performance.\n",
      "commitDate": "24/04/08 1:09 AM",
      "commitName": "06e8a4eaa00e548f52b2483864a31ba9defd0989",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Simple implementation of a LIFO Stack that can be used instead of java.util.Vector which is synchronized. Will help performance.\n",
          "commitDate": "24/04/08 1:09 AM",
          "commitName": "06e8a4eaa00e548f52b2483864a31ba9defd0989",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/01/08 11:42 PM",
          "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 101.02,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n+    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n     {\n-        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n+        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n         HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n         while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d aHtmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d aHtmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n-        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n-            lastOpenTag \u003d unclosedTags.get(i);\n+        for (final HtmlTag htag : unclosedTags) {\n+            lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n    {\n        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[aHtmlStack-Stack\u003cHtmlTag\u003e, aToken-String]",
            "newValue": "[aHtmlStack-FastStack\u003cHtmlTag\u003e, aToken-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Simple implementation of a LIFO Stack that can be used instead of java.util.Vector which is synchronized. Will help performance.\n",
          "commitDate": "24/04/08 1:09 AM",
          "commitName": "06e8a4eaa00e548f52b2483864a31ba9defd0989",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "13/01/08 11:42 PM",
          "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 101.02,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n+    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n     {\n-        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n+        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n         HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n         while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n                 lastOpenTag \u003d aHtmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n                 lastOpenTag \u003d aHtmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n-        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n-            lastOpenTag \u003d unclosedTags.get(i);\n+        for (final HtmlTag htag : unclosedTags) {\n+            lastOpenTag \u003d htag;\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(FastStack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n    {\n        final FastStack\u003cHtmlTag\u003e unclosedTags \u003d FastStack.newInstance();\n        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (final HtmlTag htag : unclosedTags) {\n            lastOpenTag \u003d htag;\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "27/01/07 6:51 AM",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.58,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(Stack aHtmlStack, String aToken)\n+    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n     {\n-        final Stack unclosedTags \u003d new Stack();\n-        HtmlTag lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n+        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n         while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n-                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+                lastOpenTag \u003d aHtmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n-                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+                lastOpenTag \u003d aHtmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n-            lastOpenTag \u003d (HtmlTag) unclosedTags.get(i);\n+            lastOpenTag \u003d unclosedTags.get(i);\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n    {\n        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n            lastOpenTag \u003d unclosedTags.get(i);\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {
            "oldValue": "[aHtmlStack-Stack, aToken-String]",
            "newValue": "[aHtmlStack-Stack\u003cHtmlTag\u003e, aToken-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "27/01/07 6:51 AM",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.58,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-    private void checkUnclosedTags(Stack aHtmlStack, String aToken)\n+    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n     {\n-        final Stack unclosedTags \u003d new Stack();\n-        HtmlTag lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n+        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n         while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n             // Find unclosed elements. Put them on a stack so the\n             // output order won\u0027t be back-to-front.\n             if (isSingleTag(lastOpenTag)) {\n-                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+                lastOpenTag \u003d aHtmlStack.pop();\n             }\n             else {\n                 unclosedTags.push(lastOpenTag);\n-                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+                lastOpenTag \u003d aHtmlStack.pop();\n             }\n         }\n \n         // Output the unterminated tags, if any\n         String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n         for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n-            lastOpenTag \u003d (HtmlTag) unclosedTags.get(i);\n+            lastOpenTag \u003d unclosedTags.get(i);\n             if (lastOpenTag.getId().equals(lastFound)) {\n                 continue;\n             }\n             lastFound \u003d lastOpenTag.getId();\n             log(lastOpenTag.getLineno(),\n                 lastOpenTag.getPosition(),\n                 UNCLOSED_HTML,\n                 lastOpenTag);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkUnclosedTags(Stack\u003cHtmlTag\u003e aHtmlStack, String aToken)\n    {\n        final Stack\u003cHtmlTag\u003e unclosedTags \u003d new Stack\u003cHtmlTag\u003e();\n        HtmlTag lastOpenTag \u003d aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n            lastOpenTag \u003d unclosedTags.get(i);\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3": {
      "type": "Yintroduced",
      "commitMessage": "New Javadoc style check from Chris Stillwell.\n",
      "commitDate": "14/07/03 5:31 AM",
      "commitName": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,30 @@\n+    private void checkUnclosedTags(Stack aHtmlStack, String aToken)\n+    {\n+        final Stack unclosedTags \u003d new Stack();\n+        HtmlTag lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n+            // Find unclosed elements. Put them on a stack so the\n+            // output order won\u0027t be back-to-front.\n+            if (isSingleTag(lastOpenTag)) {\n+                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+            }\n+            else {\n+                unclosedTags.push(lastOpenTag);\n+                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n+            }\n+        }\n+\n+        // Output the unterminated tags, if any\n+        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n+        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n+            lastOpenTag \u003d (HtmlTag) unclosedTags.get(i);\n+            if (lastOpenTag.getId().equals(lastFound)) {\n+                continue;\n+            }\n+            lastFound \u003d lastOpenTag.getId();\n+            log(lastOpenTag.getLineno(),\n+                lastOpenTag.getPosition(),\n+                UNCLOSED_HTML,\n+                lastOpenTag);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkUnclosedTags(Stack aHtmlStack, String aToken)\n    {\n        final Stack unclosedTags \u003d new Stack();\n        HtmlTag lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {\n            // Find unclosed elements. Put them on a stack so the\n            // output order won\u0027t be back-to-front.\n            if (isSingleTag(lastOpenTag)) {\n                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n            }\n            else {\n                unclosedTags.push(lastOpenTag);\n                lastOpenTag \u003d (HtmlTag) aHtmlStack.pop();\n            }\n        }\n\n        // Output the unterminated tags, if any\n        String lastFound \u003d \"\"; // Skip multiples, like \u003cb\u003e..\u003cb\u003e\n        for (int i \u003d 0; i \u003c unclosedTags.size(); i++) {\n            lastOpenTag \u003d (HtmlTag) unclosedTags.get(i);\n            if (lastOpenTag.getId().equals(lastFound)) {\n                continue;\n            }\n            lastFound \u003d lastOpenTag.getId();\n            log(lastOpenTag.getLineno(),\n                lastOpenTag.getPosition(),\n                UNCLOSED_HTML,\n                lastOpenTag);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java"
    }
  }
}