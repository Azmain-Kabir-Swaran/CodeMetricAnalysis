{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RedundantModifierCheck.java",
  "functionName": "processInterfaceOrAnnotation",
  "functionId": "processInterfaceOrAnnotation___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
  "functionStartLine": 313,
  "functionEndLine": 335,
  "numCommitsSeen": 61,
  "timeTaken": 1223,
  "changeHistory": [
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
    "dbcca4f428fbab2d34e19db05b9bbfb145d20b85",
    "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0",
    "e030d1463c307836bbb201a202d15e81a41bcb0b"
  ],
  "changeHistoryShort": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": "Ybodychange",
    "dbcca4f428fbab2d34e19db05b9bbfb145d20b85": "Ybodychange",
    "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0": "Ybodychange",
    "e030d1463c307836bbb201a202d15e81a41bcb0b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e775eaa2e59949961f9b43d22e88d6b4be7774fd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "07/05/18 6:56 PM",
      "commitName": "e775eaa2e59949961f9b43d22e88d6b4be7774fd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.24,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n     private void processInterfaceOrAnnotation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         DetailAST modifier \u003d modifiers.getFirstChild();\n         while (modifier !\u003d null) {\n             // javac does not allow final or static in interface methods\n             // order annotation fields hence no need to check that this\n             // is not a method or annotation field\n \n             final int type \u003d modifier.getType();\n             if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                 || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                 || type \u003d\u003d TokenTypes.ABSTRACT\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n                 || type \u003d\u003d TokenTypes.FINAL\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF) {\n-                log(modifier.getLineNo(), modifier.getColumnNo(),\n-                        MSG_KEY, modifier.getText());\n+                log(modifier, MSG_KEY, modifier.getText());\n                 break;\n             }\n \n             modifier \u003d modifier.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processInterfaceOrAnnotation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        DetailAST modifier \u003d modifiers.getFirstChild();\n        while (modifier !\u003d null) {\n            // javac does not allow final or static in interface methods\n            // order annotation fields hence no need to check that this\n            // is not a method or annotation field\n\n            final int type \u003d modifier.getType();\n            if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                || type \u003d\u003d TokenTypes.ABSTRACT\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n                || type \u003d\u003d TokenTypes.FINAL\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF) {\n                log(modifier, MSG_KEY, modifier.getText());\n                break;\n            }\n\n            modifier \u003d modifier.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
      "extendedDetails": {}
    },
    "dbcca4f428fbab2d34e19db05b9bbfb145d20b85": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2203: Fix RedundantModifier check at final classes in interfaces\n",
      "commitDate": "20/09/15 5:50 AM",
      "commitName": "dbcca4f428fbab2d34e19db05b9bbfb145d20b85",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/09/15 6:20 AM",
      "commitNameOld": "bad81c81c2be3e67099c512e4e0aada291323566",
      "commitAuthorOld": "liscju",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n     private void processInterfaceOrAnnotation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         DetailAST modifier \u003d modifiers.getFirstChild();\n         while (modifier !\u003d null) {\n \n             // javac does not allow final or static in interface methods\n             // order annotation fields hence no need to check that this\n             // is not a method or annotation field\n \n             final int type \u003d modifier.getType();\n             if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                 || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                 || type \u003d\u003d TokenTypes.ABSTRACT\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n-                || type \u003d\u003d TokenTypes.FINAL) {\n+                || type \u003d\u003d TokenTypes.FINAL\n+                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF) {\n                 log(modifier.getLineNo(), modifier.getColumnNo(),\n                         MSG_KEY, modifier.getText());\n                 break;\n             }\n \n             modifier \u003d modifier.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processInterfaceOrAnnotation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        DetailAST modifier \u003d modifiers.getFirstChild();\n        while (modifier !\u003d null) {\n\n            // javac does not allow final or static in interface methods\n            // order annotation fields hence no need to check that this\n            // is not a method or annotation field\n\n            final int type \u003d modifier.getType();\n            if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                || type \u003d\u003d TokenTypes.ABSTRACT\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n                || type \u003d\u003d TokenTypes.FINAL\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF) {\n                log(modifier.getLineNo(), modifier.getColumnNo(),\n                        MSG_KEY, modifier.getText());\n                break;\n            }\n\n            modifier \u003d modifier.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
      "extendedDetails": {}
    },
    "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1833: Fixed redundant modifier false positive for abstract classes in interfaces.\n",
      "commitDate": "04/09/15 5:32 AM",
      "commitName": "9acda0b233abd4ddd617d67c7c41fc8dfbab86f0",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "03/09/15 6:45 AM",
      "commitNameOld": "f66dcdbd9439aa413c6240287dadcc9ccf2c8ea3",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n     private void processInterfaceOrAnnotation(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         DetailAST modifier \u003d modifiers.getFirstChild();\n         while (modifier !\u003d null) {\n \n             // javac does not allow final or static in interface methods\n             // order annotation fields hence no need to check that this\n             // is not a method or annotation field\n \n             final int type \u003d modifier.getType();\n             if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                 || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                         \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                 || type \u003d\u003d TokenTypes.ABSTRACT\n+                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n                 || type \u003d\u003d TokenTypes.FINAL) {\n                 log(modifier.getLineNo(), modifier.getColumnNo(),\n                         MSG_KEY, modifier.getText());\n                 break;\n             }\n \n             modifier \u003d modifier.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processInterfaceOrAnnotation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        DetailAST modifier \u003d modifiers.getFirstChild();\n        while (modifier !\u003d null) {\n\n            // javac does not allow final or static in interface methods\n            // order annotation fields hence no need to check that this\n            // is not a method or annotation field\n\n            final int type \u003d modifier.getType();\n            if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                || type \u003d\u003d TokenTypes.ABSTRACT\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.CLASS_DEF\n                || type \u003d\u003d TokenTypes.FINAL) {\n                log(modifier.getLineNo(), modifier.getColumnNo(),\n                        MSG_KEY, modifier.getText());\n                break;\n            }\n\n            modifier \u003d modifier.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java",
      "extendedDetails": {}
    },
    "e030d1463c307836bbb201a202d15e81a41bcb0b": {
      "type": "Yintroduced",
      "commitMessage": "RedundantModifierCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "14/06/15 9:56 PM",
      "commitName": "e030d1463c307836bbb201a202d15e81a41bcb0b",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,23 @@\n+    private void processInterfaceOrAnnotation(DetailAST ast) {\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+        DetailAST modifier \u003d modifiers.getFirstChild();\n+        while (modifier !\u003d null) {\n+\n+            // javac does not allow final or static in interface methods\n+            // order annotation fields hence no need to check that this\n+            // is not a method or annotation field\n+\n+            final int type \u003d modifier.getType();\n+            if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n+                || type \u003d\u003d TokenTypes.LITERAL_STATIC\n+                        \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n+                || type \u003d\u003d TokenTypes.ABSTRACT\n+                || type \u003d\u003d TokenTypes.FINAL) {\n+                log(modifier.getLineNo(), modifier.getColumnNo(),\n+                        MSG_KEY, modifier.getText());\n+                break;\n+            }\n+\n+            modifier \u003d modifier.getNextSibling();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processInterfaceOrAnnotation(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        DetailAST modifier \u003d modifiers.getFirstChild();\n        while (modifier !\u003d null) {\n\n            // javac does not allow final or static in interface methods\n            // order annotation fields hence no need to check that this\n            // is not a method or annotation field\n\n            final int type \u003d modifier.getType();\n            if (type \u003d\u003d TokenTypes.LITERAL_PUBLIC\n                || type \u003d\u003d TokenTypes.LITERAL_STATIC\n                        \u0026\u0026 ast.getType() !\u003d TokenTypes.METHOD_DEF\n                || type \u003d\u003d TokenTypes.ABSTRACT\n                || type \u003d\u003d TokenTypes.FINAL) {\n                log(modifier.getLineNo(), modifier.getColumnNo(),\n                        MSG_KEY, modifier.getText());\n                break;\n            }\n\n            modifier \u003d modifier.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java"
    }
  }
}