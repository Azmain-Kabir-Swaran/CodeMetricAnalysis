{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EmptyBlockCheck.java",
  "functionName": "hasText",
  "functionId": "hasText___slistAST-DetailAST(modifiers-final)",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
  "functionStartLine": 221,
  "functionEndLine": 253,
  "numCommitsSeen": 116,
  "timeTaken": 3648,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "66cc9d43c9620678078d2716308ee61916227fcb",
    "412882d6c28fab5a7077a81bdd2ac01c275673c9",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
    "9777146e28e6457160a7f91d897776f9fe4af10a",
    "167dd96d8ca503a472bf003f187191d6b0ce586c",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "423ed9e469db620671459827b58c89025d8f6c66",
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3",
    "16512bb1e7e31bedece4a745dad9c5960f141fca",
    "23c8774d2e2fd245de1e5df02758fd23702c565e",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba",
    "b219e2ff881703c4b0edeee01de12635531676a9",
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
    "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "0831fb660df69bd9db932efd47448e9a37db1772",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3",
    "3430721be200cbe2acf55c3b3d52a528638123b3",
    "982b3963ca007c6101f69cf50c010f07292dab0e"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "66cc9d43c9620678078d2716308ee61916227fcb": "Ymodifierchange",
    "412882d6c28fab5a7077a81bdd2ac01c275673c9": "Ybodychange",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": "Ybodychange",
    "9777146e28e6457160a7f91d897776f9fe4af10a": "Ybodychange",
    "167dd96d8ca503a472bf003f187191d6b0ce586c": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ybodychange",
    "423ed9e469db620671459827b58c89025d8f6c66": "Ybodychange",
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3": "Ybodychange",
    "16512bb1e7e31bedece4a745dad9c5960f141fca": "Ybodychange",
    "23c8774d2e2fd245de1e5df02758fd23702c565e": "Ybodychange",
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": "Ybodychange",
    "b219e2ff881703c4b0edeee01de12635531676a9": "Ybodychange",
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66": "Ybodychange",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "0831fb660df69bd9db932efd47448e9a37db1772": "Ymodifierchange",
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": "Yfilerename",
    "3430721be200cbe2acf55c3b3d52a528638123b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "982b3963ca007c6101f69cf50c010f07292dab0e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "17/05/18 4:44 PM",
      "commitNameOld": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 17.21,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-            if (!CommonUtils.isBlank(txt)) {\n+            if (!CommonUtil.isBlank(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n             final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n             final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n             // check if all lines are also only whitespace\n-            returnValue \u003d !(CommonUtils.isBlank(firstLine) \u0026\u0026 CommonUtils.isBlank(lastLine))\n+            returnValue \u003d !(CommonUtil.isBlank(firstLine) \u0026\u0026 CommonUtil.isBlank(lastLine))\n                     || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CommonUtil.isBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n            final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n            // check if all lines are also only whitespace\n            returnValue \u003d !(CommonUtil.isBlank(firstLine) \u0026\u0026 CommonUtil.isBlank(lastLine))\n                    || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "66cc9d43c9620678078d2716308ee61916227fcb": {
      "type": "Ymodifierchange",
      "commitMessage": "Issue #4801: partial resolve of WeakerAccess violations\n",
      "commitDate": "09/08/17 12:17 PM",
      "commitName": "66cc9d43c9620678078d2716308ee61916227fcb",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "19/07/17 5:49 PM",
      "commitNameOld": "412882d6c28fab5a7077a81bdd2ac01c275673c9",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n-    protected boolean hasText(final DetailAST slistAST) {\n+    private boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (!CommonUtils.isBlank(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n             final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n             final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n             // check if all lines are also only whitespace\n             returnValue \u003d !(CommonUtils.isBlank(firstLine) \u0026\u0026 CommonUtils.isBlank(lastLine))\n                     || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CommonUtils.isBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n            final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n            // check if all lines are also only whitespace\n            returnValue \u003d !(CommonUtils.isBlank(firstLine) \u0026\u0026 CommonUtils.isBlank(lastLine))\n                    || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[private]"
      }
    },
    "412882d6c28fab5a7077a81bdd2ac01c275673c9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4722: fix SimplifiableIfStatement, suppress MissingPackageInfo violation\n",
      "commitDate": "19/07/17 5:49 PM",
      "commitName": "412882d6c28fab5a7077a81bdd2ac01c275673c9",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "04/07/17 7:05 AM",
      "commitNameOld": "a40685f8b2bdfd1fd1b2eea48810033e5821219c",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 15.45,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,33 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (!CommonUtils.isBlank(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n             final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n             final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n-            if (CommonUtils.isBlank(firstLine)\n-                    \u0026\u0026 CommonUtils.isBlank(lastLine)) {\n-                // check if all lines are also only whitespace\n-                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n-            }\n-            else {\n-                returnValue \u003d true;\n-            }\n+            // check if all lines are also only whitespace\n+            returnValue \u003d !(CommonUtils.isBlank(firstLine) \u0026\u0026 CommonUtils.isBlank(lastLine))\n+                    || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CommonUtils.isBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n            final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n            // check if all lines are also only whitespace\n            returnValue \u003d !(CommonUtils.isBlank(firstLine) \u0026\u0026 CommonUtils.isBlank(lastLine))\n                    || !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4342: Applied requested changes\n",
      "commitDate": "18/05/17 12:43 PM",
      "commitName": "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "21/04/17 5:35 AM",
      "commitNameOld": "8da98a9d3dc762c4dd026756eb5cc5533571a39b",
      "commitAuthorOld": "Piyush Sharma",
      "daysBetweenCommits": 27.3,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (!CommonUtils.isBlank(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n-            // check only whitespace of first \u0026 last lines\n-            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n-                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n+            final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n+            final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n+            if (CommonUtils.isBlank(firstLine)\n+                    \u0026\u0026 CommonUtils.isBlank(lastLine)) {\n                 // check if all lines are also only whitespace\n                 returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n             else {\n                 returnValue \u003d true;\n             }\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CommonUtils.isBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            final String firstLine \u003d lines[slistLineNo - 1].substring(slistColNo + 1);\n            final String lastLine \u003d lines[rcurlyLineNo - 1].substring(0, rcurlyColNo);\n            if (CommonUtils.isBlank(firstLine)\n                    \u0026\u0026 CommonUtils.isBlank(lastLine)) {\n                // check if all lines are also only whitespace\n                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n            else {\n                returnValue \u003d true;\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "9777146e28e6457160a7f91d897776f9fe4af10a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": "20/03/16 2:34 PM",
      "commitName": "9777146e28e6457160a7f91d897776f9fe4af10a",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 3.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-            if (!CharMatcher.WHITESPACE.matchesAllOf(txt)) {\n+            if (!CommonUtils.isBlank(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                     \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                 // check if all lines are also only whitespace\n                 returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n             else {\n                 returnValue \u003d true;\n             }\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CommonUtils.isBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                // check if all lines are also only whitespace\n                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n            else {\n                returnValue \u003d true;\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "167dd96d8ca503a472bf003f187191d6b0ce586c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": "17/03/16 6:39 AM",
      "commitName": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 40.99,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-            if (StringUtils.isNotBlank(txt)) {\n+            if (!CharMatcher.WHITESPACE.matchesAllOf(txt)) {\n                 returnValue \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                     \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                 // check if all lines are also only whitespace\n                 returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n             else {\n                 returnValue \u003d true;\n             }\n         }\n         return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (!CharMatcher.WHITESPACE.matchesAllOf(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                // check if all lines are also only whitespace\n                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n            else {\n                returnValue \u003d true;\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "16/10/15 4:35 PM",
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/10/15 5:55 PM",
      "commitNameOld": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 8.94,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n-        boolean retVal \u003d false;\n+        boolean returnValue \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n-                retVal \u003d true;\n+                returnValue \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                     \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                 // check if all lines are also only whitespace\n-                retVal \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n+                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n             else {\n-                retVal \u003d true;\n+                returnValue \u003d true;\n             }\n         }\n-        return retVal;\n+        return returnValue;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean returnValue \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                returnValue \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                // check if all lines are also only whitespace\n                returnValue \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n            else {\n                returnValue \u003d true;\n            }\n        }\n        return returnValue;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "423ed9e469db620671459827b58c89025d8f6c66": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:55 PM",
      "commitName": "423ed9e469db620671459827b58c89025d8f6c66",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "29/08/15 10:46 PM",
      "commitNameOld": "603c5bb53ea12900f6a1c8af0c4a765af36786e3",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 38.8,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean retVal \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n                 retVal \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n-            if (!lines[slistLineNo - 1]\n-                .substring(slistColNo + 1).trim().isEmpty()\n-                    || !lines[rcurlyLineNo - 1]\n-                .substring(0, rcurlyColNo).trim().isEmpty()) {\n-                retVal \u003d true;\n-            }\n-            else {\n+            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n+                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                 // check if all lines are also only whitespace\n                 retVal \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n+            else {\n+                retVal \u003d true;\n+            }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean retVal \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (lines[slistLineNo - 1].substring(slistColNo + 1).trim().isEmpty()\n                    \u0026\u0026 lines[rcurlyLineNo - 1].substring(0, rcurlyColNo).trim().isEmpty()) {\n                // check if all lines are also only whitespace\n                retVal \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n            else {\n                retVal \u003d true;\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "603c5bb53ea12900f6a1c8af0c4a765af36786e3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46: Statements shouldn\u0027t be nested too deep\n",
      "commitDate": "29/08/15 10:46 PM",
      "commitName": "603c5bb53ea12900f6a1c8af0c4a765af36786e3",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "22/08/15 4:41 AM",
      "commitNameOld": "16512bb1e7e31bedece4a745dad9c5960f141fca",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 7.75,
      "commitsBetweenForRepo": 194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,39 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         boolean retVal \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n                 retVal \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (!lines[slistLineNo - 1]\n                 .substring(slistColNo + 1).trim().isEmpty()\n                     || !lines[rcurlyLineNo - 1]\n                 .substring(0, rcurlyColNo).trim().isEmpty()) {\n                 retVal \u003d true;\n             }\n             else {\n                 // check if all lines are also only whitespace\n-                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n-                    if (!lines[i].trim().isEmpty()) {\n-                        retVal \u003d true;\n-                        break;\n-                    }\n-                }\n+                retVal \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean retVal \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (!lines[slistLineNo - 1]\n                .substring(slistColNo + 1).trim().isEmpty()\n                    || !lines[rcurlyLineNo - 1]\n                .substring(0, rcurlyColNo).trim().isEmpty()) {\n                retVal \u003d true;\n            }\n            else {\n                // check if all lines are also only whitespace\n                retVal \u003d !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "16512bb1e7e31bedece4a745dad9c5960f141fca": {
      "type": "Ybodychange",
      "commitMessage": "Decrease scope of variables. #1555\n\nFixes `TooBroadScope` inspection violations.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": "22/08/15 4:41 AM",
      "commitName": "16512bb1e7e31bedece4a745dad9c5960f141fca",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "16/08/15 9:01 PM",
      "commitNameOld": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 5.32,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n     protected boolean hasText(final DetailAST slistAST) {\n-        boolean retVal \u003d false;\n-\n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST;\n \n         if (rightCurly \u003d\u003d null) {\n             rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         }\n         else {\n             rcurlyAST \u003d rightCurly;\n         }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n+        boolean retVal \u003d false;\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n                 retVal \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (!lines[slistLineNo - 1]\n                 .substring(slistColNo + 1).trim().isEmpty()\n                     || !lines[rcurlyLineNo - 1]\n                 .substring(0, rcurlyColNo).trim().isEmpty()) {\n                 retVal \u003d true;\n             }\n             else {\n                 // check if all lines are also only whitespace\n                 for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                     if (!lines[i].trim().isEmpty()) {\n                         retVal \u003d true;\n                         break;\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        boolean retVal \u003d false;\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (!lines[slistLineNo - 1]\n                .substring(slistColNo + 1).trim().isEmpty()\n                    || !lines[rcurlyLineNo - 1]\n                .substring(0, rcurlyColNo).trim().isEmpty()) {\n                retVal \u003d true;\n            }\n            else {\n                // check if all lines are also only whitespace\n                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                    if (!lines[i].trim().isEmpty()) {\n                        retVal \u003d true;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "23c8774d2e2fd245de1e5df02758fd23702c565e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: AvoidInlineConditional violations fixed\n",
      "commitDate": "16/08/15 9:01 PM",
      "commitName": "23c8774d2e2fd245de1e5df02758fd23702c565e",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "16/08/15 8:41 PM",
      "commitNameOld": "d56a2a366c6f9e3e8639d492d548ae562b75dc81",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,45 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n-        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n-                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rcurlyAST;\n+\n+        if (rightCurly \u003d\u003d null) {\n+            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n+        }\n+        else {\n+            rcurlyAST \u003d rightCurly;\n+        }\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n                 retVal \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n             if (!lines[slistLineNo - 1]\n                 .substring(slistColNo + 1).trim().isEmpty()\n                     || !lines[rcurlyLineNo - 1]\n                 .substring(0, rcurlyColNo).trim().isEmpty()) {\n                 retVal \u003d true;\n             }\n             else {\n                 // check if all lines are also only whitespace\n                 for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                     if (!lines[i].trim().isEmpty()) {\n                         retVal \u003d true;\n                         break;\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST;\n\n        if (rightCurly \u003d\u003d null) {\n            rcurlyAST \u003d slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        }\n        else {\n            rcurlyAST \u003d rightCurly;\n        }\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (!lines[slistLineNo - 1]\n                .substring(slistColNo + 1).trim().isEmpty()\n                    || !lines[rcurlyLineNo - 1]\n                .substring(0, rcurlyColNo).trim().isEmpty()) {\n                retVal \u003d true;\n            }\n            else {\n                // check if all lines are also only whitespace\n                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                    if (!lines[i].trim().isEmpty()) {\n                        retVal \u003d true;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "5c9e55ae70af0456e1634211ccac54c40a92cfba": {
      "type": "Ybodychange",
      "commitMessage": "Use .isEmpty() method instead of comparisons to 0. #1538\n",
      "commitDate": "02/08/15 6:48 PM",
      "commitName": "5c9e55ae70af0456e1634211ccac54c40a92cfba",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "25/07/15 10:31 PM",
      "commitNameOld": "b219e2ff881703c4b0edeee01de12635531676a9",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 7.85,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         final int slistLineNo \u003d slistAST.getLineNo();\n         final int slistColNo \u003d slistAST.getColumnNo();\n         final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n         final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         if (slistLineNo \u003d\u003d rcurlyLineNo) {\n             // Handle braces on the same line\n             final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n             if (StringUtils.isNotBlank(txt)) {\n                 retVal \u003d true;\n             }\n         }\n         else {\n             // check only whitespace of first \u0026 last lines\n-            if (lines[slistLineNo - 1]\n-                    .substring(slistColNo + 1).trim().length() !\u003d 0\n-                    || lines[rcurlyLineNo - 1]\n-                            .substring(0, rcurlyColNo).trim().length() !\u003d 0) {\n+            if (!lines[slistLineNo - 1]\n+                .substring(slistColNo + 1).trim().isEmpty()\n+                    || !lines[rcurlyLineNo - 1]\n+                .substring(0, rcurlyColNo).trim().isEmpty()) {\n                 retVal \u003d true;\n             }\n             else {\n                 // check if all lines are also only whitespace\n                 for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n-                    if (lines[i].trim().length() \u003e 0) {\n+                    if (!lines[i].trim().isEmpty()) {\n                         retVal \u003d true;\n                         break;\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (!lines[slistLineNo - 1]\n                .substring(slistColNo + 1).trim().isEmpty()\n                    || !lines[rcurlyLineNo - 1]\n                .substring(0, rcurlyColNo).trim().isEmpty()) {\n                retVal \u003d true;\n            }\n            else {\n                // check if all lines are also only whitespace\n                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                    if (!lines[i].trim().isEmpty()) {\n                        retVal \u003d true;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "b219e2ff881703c4b0edeee01de12635531676a9": {
      "type": "Ybodychange",
      "commitMessage": "Coverage has been increased to 100% in EmptyBlockCheck. Issue #1291\n",
      "commitDate": "25/07/15 10:31 PM",
      "commitName": "b219e2ff881703c4b0edeee01de12635531676a9",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n     protected boolean hasText(final DetailAST slistAST) {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n-        if (rcurlyAST !\u003d null) {\n-            final int slistLineNo \u003d slistAST.getLineNo();\n-            final int slistColNo \u003d slistAST.getColumnNo();\n-            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n-            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n-            final String[] lines \u003d getLines();\n-            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n-                // Handle braces on the same line\n-                final String txt \u003d lines[slistLineNo - 1]\n+        final int slistLineNo \u003d slistAST.getLineNo();\n+        final int slistColNo \u003d slistAST.getColumnNo();\n+        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n+        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n+        final String[] lines \u003d getLines();\n+        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n+            // Handle braces on the same line\n+            final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-                if (StringUtils.isNotBlank(txt)) {\n-                    retVal \u003d true;\n-                }\n+            if (StringUtils.isNotBlank(txt)) {\n+                retVal \u003d true;\n+            }\n+        }\n+        else {\n+            // check only whitespace of first \u0026 last lines\n+            if (lines[slistLineNo - 1]\n+                    .substring(slistColNo + 1).trim().length() !\u003d 0\n+                    || lines[rcurlyLineNo - 1]\n+                            .substring(0, rcurlyColNo).trim().length() !\u003d 0) {\n+                retVal \u003d true;\n             }\n             else {\n-                // check only whitespace of first \u0026 last lines\n-                if (lines[slistLineNo - 1]\n-                     .substring(slistColNo + 1).trim().length() !\u003d 0\n-                    || lines[rcurlyLineNo - 1]\n-                        .substring(0, rcurlyColNo).trim().length() !\u003d 0) {\n-                    retVal \u003d true;\n-                }\n-                else {\n-                    // check if all lines are also only whitespace\n-                    for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n-                        if (lines[i].trim().length() \u003e 0) {\n-                            retVal \u003d true;\n-                            break;\n-                        }\n+                // check if all lines are also only whitespace\n+                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n+                    if (lines[i].trim().length() \u003e 0) {\n+                        retVal \u003d true;\n+                        break;\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST) {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        final int slistLineNo \u003d slistAST.getLineNo();\n        final int slistColNo \u003d slistAST.getColumnNo();\n        final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n        final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        if (slistLineNo \u003d\u003d rcurlyLineNo) {\n            // Handle braces on the same line\n            final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n            if (StringUtils.isNotBlank(txt)) {\n                retVal \u003d true;\n            }\n        }\n        else {\n            // check only whitespace of first \u0026 last lines\n            if (lines[slistLineNo - 1]\n                    .substring(slistColNo + 1).trim().length() !\u003d 0\n                    || lines[rcurlyLineNo - 1]\n                            .substring(0, rcurlyColNo).trim().length() !\u003d 0) {\n                retVal \u003d true;\n            }\n            else {\n                // check if all lines are also only whitespace\n                for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                    if (lines[i].trim().length() \u003e 0) {\n                        retVal \u003d true;\n                        break;\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66": {
      "type": "Ybodychange",
      "commitMessage": "Fix AvoidStaticImport check violations in codebase, issue #979\n",
      "commitDate": "26/04/15 9:13 AM",
      "commitName": "f374e2e7a0b0fe2df21ed85aef77a91630b1dd66",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "23/04/15 12:24 PM",
      "commitNameOld": "9ea33d0720a75c067ad5264978ebe0ba4c2f3a06",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 2.87,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     protected boolean hasText(final DetailAST slistAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n             final int slistLineNo \u003d slistAST.getLineNo();\n             final int slistColNo \u003d slistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-                if (isNotBlank(txt)) {\n+                if (StringUtils.isNotBlank(txt)) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if (lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0\n                     || lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (StringUtils.isNotBlank(txt)) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if (lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0\n                    || lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027strings\u0027 ruleset, issue #873\n",
      "commitDate": "15/04/15 8:56 AM",
      "commitName": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 35.76,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     protected boolean hasText(final DetailAST slistAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n             final int slistLineNo \u003d slistAST.getLineNo();\n             final int slistColNo \u003d slistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n-                if (txt.trim().length() !\u003d 0) {\n+                if (isNotBlank(txt)) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if (lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0\n                     || lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (isNotBlank(txt)) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if (lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0\n                    || lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     protected boolean hasText(final DetailAST slistAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                 ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n             final int slistLineNo \u003d slistAST.getLineNo();\n             final int slistColNo \u003d slistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n-                if ((lines[slistLineNo - 1]\n-                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n-                    || (lines[rcurlyLineNo - 1]\n-                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n+                if (lines[slistLineNo - 1]\n+                     .substring(slistColNo + 1).trim().length() !\u003d 0\n+                    || lines[rcurlyLineNo - 1]\n+                        .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n-                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n+                    for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if (lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0\n                    || lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0)\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c rcurlyLineNo - 1; i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "cea86a6cad3098ebcdb4a88db2e49477b07e0d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
      "commitDate": "19/01/15 6:32 AM",
      "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
          "commitDate": "19/01/15 6:32 AM",
          "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
          "commitAuthor": "alexkravin",
          "commitDateOld": "16/01/15 10:07 AM",
          "commitNameOld": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 2.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-    protected boolean hasText(final DetailAST aSlistAST)\n+    protected boolean hasText(final DetailAST slistAST)\n     {\n         boolean retVal \u003d false;\n \n-        final DetailAST rightCurly \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n-                ? rightCurly : aSlistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n+                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n-            final int slistLineNo \u003d aSlistAST.getLineNo();\n-            final int slistColNo \u003d aSlistAST.getColumnNo();\n+            final int slistLineNo \u003d slistAST.getLineNo();\n+            final int slistColNo \u003d slistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
          "extendedDetails": {
            "oldValue": "[aSlistAST-DetailAST(modifiers-final)]",
            "newValue": "[slistAST-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, blocks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\n",
          "commitDate": "19/01/15 6:32 AM",
          "commitName": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93",
          "commitAuthor": "alexkravin",
          "commitDateOld": "16/01/15 10:07 AM",
          "commitNameOld": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 2.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-    protected boolean hasText(final DetailAST aSlistAST)\n+    protected boolean hasText(final DetailAST slistAST)\n     {\n         boolean retVal \u003d false;\n \n-        final DetailAST rightCurly \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n         final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n-                ? rightCurly : aSlistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n+                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n-            final int slistLineNo \u003d aSlistAST.getLineNo();\n-            final int slistColNo \u003d aSlistAST.getColumnNo();\n+            final int slistLineNo \u003d slistAST.getLineNo();\n+            final int slistColNo \u003d slistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0": {
      "type": "Ybodychange",
      "commitMessage": "Fixed TODO need to handle LITERAL_SWITCH #235\n",
      "commitDate": "11/08/14 4:02 PM",
      "commitName": "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0",
      "commitAuthor": "Max",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 160.24,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n     protected boolean hasText(final DetailAST aSlistAST)\n     {\n         boolean retVal \u003d false;\n \n-        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rightCurly \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n+                ? rightCurly : aSlistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n             final int slistLineNo \u003d aSlistAST.getLineNo();\n             final int slistColNo \u003d aSlistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rightCurly \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        final DetailAST rcurlyAST \u003d rightCurly !\u003d null\n                ? rightCurly : aSlistAST.getParent().findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java"
      }
    },
    "0831fb660df69bd9db932efd47448e9a37db1772": {
      "type": "Ymodifierchange",
      "commitMessage": "Made the method protected so that it is accessible to subclasses. Requested by Steve McKay.\n",
      "commitDate": "22/09/10 9:40 PM",
      "commitName": "0831fb660df69bd9db932efd47448e9a37db1772",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "12/02/10 6:57 PM",
      "commitNameOld": "523080bbf2be11354b94b851ac85d06e7e8a2c14",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 222.07,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n-    private boolean hasText(final DetailAST aSlistAST)\n+    protected boolean hasText(final DetailAST aSlistAST)\n     {\n         boolean retVal \u003d false;\n \n         final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n             final int slistLineNo \u003d aSlistAST.getLineNo();\n             final int slistColNo \u003d aSlistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "3bd6412e39a141b980901f291391ff1bcc4a61f3": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Block checks\n",
      "commitDate": "04/06/03 3:42 AM",
      "commitName": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 2:31 AM",
      "commitNameOld": "a0844ab125394605a6970a23132daa41ed5cecb1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                    retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java"
      }
    },
    "3430721be200cbe2acf55c3b3d52a528638123b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "fixed checkstyle errors\n",
      "commitDate": "22/11/02 4:46 AM",
      "commitName": "3430721be200cbe2acf55c3b3d52a528638123b3",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "fixed checkstyle errors\n",
          "commitDate": "22/11/02 4:46 AM",
          "commitName": "3430721be200cbe2acf55c3b3d52a528638123b3",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/02 4:47 PM",
          "commitNameOld": "fc358e2da0cfb9a2c34800b781c8894f73d8d345",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 16.5,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-    private boolean hasText(final DetailAST slistAST)\n+    private boolean hasText(final DetailAST aSlistAST)\n     {\n         boolean retVal \u003d false;\n \n-        final DetailAST rcurlyAST \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n-            final int slistLineNo \u003d slistAST.getLineNo();\n-            final int slistColNo \u003d slistAST.getColumnNo();\n+            final int slistLineNo \u003d aSlistAST.getLineNo();\n+            final int slistColNo \u003d aSlistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                      retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java",
          "extendedDetails": {
            "oldValue": "[slistAST-DetailAST(modifiers-final)]",
            "newValue": "[aSlistAST-DetailAST(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "fixed checkstyle errors\n",
          "commitDate": "22/11/02 4:46 AM",
          "commitName": "3430721be200cbe2acf55c3b3d52a528638123b3",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "05/11/02 4:47 PM",
          "commitNameOld": "fc358e2da0cfb9a2c34800b781c8894f73d8d345",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 16.5,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n-    private boolean hasText(final DetailAST slistAST)\n+    private boolean hasText(final DetailAST aSlistAST)\n     {\n         boolean retVal \u003d false;\n \n-        final DetailAST rcurlyAST \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n+        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n         if (rcurlyAST !\u003d null) {\n-            final int slistLineNo \u003d slistAST.getLineNo();\n-            final int slistColNo \u003d slistAST.getColumnNo();\n+            final int slistLineNo \u003d aSlistAST.getLineNo();\n+            final int slistColNo \u003d aSlistAST.getColumnNo();\n             final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n             final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n             final String[] lines \u003d getLines();\n             if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                 // Handle braces on the same line\n                 final String txt \u003d lines[slistLineNo - 1]\n                     .substring(slistColNo + 1, rcurlyColNo);\n                 if (txt.trim().length() !\u003d 0) {\n                      retVal \u003d true;\n                 }\n             }\n             else {\n                 // check only whitespace of first \u0026 last lines\n                 if ((lines[slistLineNo - 1]\n                      .substring(slistColNo + 1).trim().length() !\u003d 0)\n                     || (lines[rcurlyLineNo - 1]\n                         .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                 {\n                     retVal \u003d true;\n                 }\n                 else {\n                     // check if all lines are also only whitespace\n                     for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                         if (lines[i].trim().length() \u003e 0) {\n                             retVal \u003d true;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n         return retVal;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean hasText(final DetailAST aSlistAST)\n    {\n        boolean retVal \u003d false;\n\n        final DetailAST rcurlyAST \u003d aSlistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d aSlistAST.getLineNo();\n            final int slistColNo \u003d aSlistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++) {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return retVal;\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "982b3963ca007c6101f69cf50c010f07292dab0e": {
      "type": "Yintroduced",
      "commitMessage": "empty block check with options\n",
      "commitDate": "03/11/02 9:46 AM",
      "commitName": "982b3963ca007c6101f69cf50c010f07292dab0e",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,42 @@\n+    private boolean hasText(final DetailAST slistAST)\n+    {\n+        boolean retVal \u003d false;\n+        \n+        final DetailAST rcurlyAST \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n+        if (rcurlyAST !\u003d null) {\n+            final int slistLineNo \u003d slistAST.getLineNo();\n+            final int slistColNo \u003d slistAST.getColumnNo();\n+            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n+            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n+            final String[] lines \u003d getLines();\n+            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n+                // Handle braces on the same line\n+                final String txt \u003d lines[slistLineNo - 1]\n+                    .substring(slistColNo + 1, rcurlyColNo);\n+                if (txt.trim().length() !\u003d 0) {\n+                     retVal \u003d true;\n+                }\n+            }\n+            else {\n+                // check only whitespace of first \u0026 last lines\n+                if ((lines[slistLineNo - 1]\n+                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n+                    || (lines[rcurlyLineNo - 1]\n+                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n+                {\n+                    retVal \u003d true;\n+                }\n+                else {\n+                    // check if all lines are also only whitespace\n+                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++)\n+                    {\n+                        if (lines[i].trim().length() \u003e 0) {\n+                            retVal \u003d true;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }               \n+        return retVal;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean hasText(final DetailAST slistAST)\n    {\n        boolean retVal \u003d false;\n        \n        final DetailAST rcurlyAST \u003d slistAST.findFirstToken(TokenTypes.RCURLY);\n        if (rcurlyAST !\u003d null) {\n            final int slistLineNo \u003d slistAST.getLineNo();\n            final int slistColNo \u003d slistAST.getColumnNo();\n            final int rcurlyLineNo \u003d rcurlyAST.getLineNo();\n            final int rcurlyColNo \u003d rcurlyAST.getColumnNo();\n            final String[] lines \u003d getLines();\n            if (slistLineNo \u003d\u003d rcurlyLineNo) {\n                // Handle braces on the same line\n                final String txt \u003d lines[slistLineNo - 1]\n                    .substring(slistColNo + 1, rcurlyColNo);\n                if (txt.trim().length() !\u003d 0) {\n                     retVal \u003d true;\n                }\n            }\n            else {\n                // check only whitespace of first \u0026 last lines\n                if ((lines[slistLineNo - 1]\n                     .substring(slistColNo + 1).trim().length() !\u003d 0)\n                    || (lines[rcurlyLineNo - 1]\n                        .substring(0, rcurlyColNo).trim().length() !\u003d 0))\n                {\n                    retVal \u003d true;\n                }\n                else {\n                    // check if all lines are also only whitespace\n                    for (int i \u003d slistLineNo; i \u003c (rcurlyLineNo - 1); i++)\n                    {\n                        if (lines[i].trim().length() \u003e 0) {\n                            retVal \u003d true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }               \n        return retVal;\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java"
    }
  }
}