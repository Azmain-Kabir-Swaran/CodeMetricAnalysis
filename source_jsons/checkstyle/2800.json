{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommentsIndentationCheck.java",
  "functionName": "isDistributedExpression",
  "functionId": "isDistributedExpression___comment-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
  "functionStartLine": 379,
  "functionEndLine": 407,
  "numCommitsSeen": 52,
  "timeTaken": 1304,
  "changeHistory": [
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6"
  ],
  "changeHistoryShort": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": "Ybodychange",
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7518: refactor line comparison\n",
      "commitDate": "06/02/20 6:58 PM",
      "commitName": "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
      "commitAuthor": "Andrei_Paikin",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 36.1,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     private boolean isDistributedExpression(DetailAST comment) {\n         DetailAST previousSibling \u003d comment.getPreviousSibling();\n         while (previousSibling !\u003d null \u0026\u0026 isComment(previousSibling)) {\n             previousSibling \u003d previousSibling.getPreviousSibling();\n         }\n         boolean isDistributed \u003d false;\n         if (previousSibling !\u003d null) {\n             if (previousSibling.getType() \u003d\u003d TokenTypes.SEMI\n                     \u0026\u0026 isOnPreviousLineIgnoringComments(comment, previousSibling)) {\n                 DetailAST currentToken \u003d previousSibling.getPreviousSibling();\n                 while (currentToken.getFirstChild() !\u003d null) {\n                     currentToken \u003d currentToken.getFirstChild();\n                 }\n                 if (currentToken.getType() \u003d\u003d TokenTypes.COMMENT_CONTENT) {\n                     currentToken \u003d currentToken.getParent();\n                     while (isComment(currentToken)) {\n                         currentToken \u003d currentToken.getNextSibling();\n                     }\n                 }\n-                if (previousSibling.getLineNo() !\u003d currentToken.getLineNo()) {\n+                if (!TokenUtil.areOnSameLine(previousSibling, currentToken)) {\n                     isDistributed \u003d true;\n                 }\n             }\n             else {\n                 isDistributed \u003d isStatementWithPossibleCurlies(previousSibling);\n             }\n         }\n         return isDistributed;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isDistributedExpression(DetailAST comment) {\n        DetailAST previousSibling \u003d comment.getPreviousSibling();\n        while (previousSibling !\u003d null \u0026\u0026 isComment(previousSibling)) {\n            previousSibling \u003d previousSibling.getPreviousSibling();\n        }\n        boolean isDistributed \u003d false;\n        if (previousSibling !\u003d null) {\n            if (previousSibling.getType() \u003d\u003d TokenTypes.SEMI\n                    \u0026\u0026 isOnPreviousLineIgnoringComments(comment, previousSibling)) {\n                DetailAST currentToken \u003d previousSibling.getPreviousSibling();\n                while (currentToken.getFirstChild() !\u003d null) {\n                    currentToken \u003d currentToken.getFirstChild();\n                }\n                if (currentToken.getType() \u003d\u003d TokenTypes.COMMENT_CONTENT) {\n                    currentToken \u003d currentToken.getParent();\n                    while (isComment(currentToken)) {\n                        currentToken \u003d currentToken.getNextSibling();\n                    }\n                }\n                if (!TokenUtil.areOnSameLine(previousSibling, currentToken)) {\n                    isDistributed \u003d true;\n                }\n            }\n            else {\n                isDistributed \u003d isStatementWithPossibleCurlies(previousSibling);\n            }\n        }\n        return isDistributed;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java",
      "extendedDetails": {}
    },
    "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3126: Fix a lot of CommentsIndentationCheck false-positives and false-negatives\n",
      "commitDate": "30/05/16 6:08 AM",
      "commitName": "e5c8a2a88433c9439b2cd17a60de6913a45ae0b6",
      "commitAuthor": "Vladislav Lisetskiy",
      "diff": "@@ -0,0 +1,29 @@\n+    private boolean isDistributedExpression(DetailAST comment) {\n+        DetailAST previousSibling \u003d comment.getPreviousSibling();\n+        while (previousSibling !\u003d null \u0026\u0026 isComment(previousSibling)) {\n+            previousSibling \u003d previousSibling.getPreviousSibling();\n+        }\n+        boolean isDistributed \u003d false;\n+        if (previousSibling !\u003d null) {\n+            if (previousSibling.getType() \u003d\u003d TokenTypes.SEMI\n+                    \u0026\u0026 isOnPreviousLineIgnoringComments(comment, previousSibling)) {\n+                DetailAST currentToken \u003d previousSibling.getPreviousSibling();\n+                while (currentToken.getFirstChild() !\u003d null) {\n+                    currentToken \u003d currentToken.getFirstChild();\n+                }\n+                if (currentToken.getType() \u003d\u003d TokenTypes.COMMENT_CONTENT) {\n+                    currentToken \u003d currentToken.getParent();\n+                    while (isComment(currentToken)) {\n+                        currentToken \u003d currentToken.getNextSibling();\n+                    }\n+                }\n+                if (previousSibling.getLineNo() !\u003d currentToken.getLineNo()) {\n+                    isDistributed \u003d true;\n+                }\n+            }\n+            else {\n+                isDistributed \u003d isStatementWithPossibleCurlies(previousSibling);\n+            }\n+        }\n+        return isDistributed;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isDistributedExpression(DetailAST comment) {\n        DetailAST previousSibling \u003d comment.getPreviousSibling();\n        while (previousSibling !\u003d null \u0026\u0026 isComment(previousSibling)) {\n            previousSibling \u003d previousSibling.getPreviousSibling();\n        }\n        boolean isDistributed \u003d false;\n        if (previousSibling !\u003d null) {\n            if (previousSibling.getType() \u003d\u003d TokenTypes.SEMI\n                    \u0026\u0026 isOnPreviousLineIgnoringComments(comment, previousSibling)) {\n                DetailAST currentToken \u003d previousSibling.getPreviousSibling();\n                while (currentToken.getFirstChild() !\u003d null) {\n                    currentToken \u003d currentToken.getFirstChild();\n                }\n                if (currentToken.getType() \u003d\u003d TokenTypes.COMMENT_CONTENT) {\n                    currentToken \u003d currentToken.getParent();\n                    while (isComment(currentToken)) {\n                        currentToken \u003d currentToken.getNextSibling();\n                    }\n                }\n                if (previousSibling.getLineNo() !\u003d currentToken.getLineNo()) {\n                    isDistributed \u003d true;\n                }\n            }\n            else {\n                isDistributed \u003d isStatementWithPossibleCurlies(previousSibling);\n            }\n        }\n        return isDistributed;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java"
    }
  }
}