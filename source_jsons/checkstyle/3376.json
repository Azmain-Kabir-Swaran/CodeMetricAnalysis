{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUtil.java",
  "functionName": "isEqualsMethod",
  "functionId": "isEqualsMethod___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
  "functionStartLine": 98,
  "functionEndLine": 119,
  "numCommitsSeen": 101,
  "timeTaken": 2901,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "ef1e65fb5128452cd8a19f82d09455b06a021b65",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "969678107261e649c968b56dbace0064304bfb56",
    "c044038c3b932586c0d384b614254cc2d1838838",
    "71d92d649fabf6cc0a88e9bba1dab411f7fe339a"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "ef1e65fb5128452cd8a19f82d09455b06a021b65": "Ybodychange",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": "Yfilerename",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "969678107261e649c968b56dbace0064304bfb56": "Ybodychange",
    "c044038c3b932586c0d384b614254cc2d1838838": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "71d92d649fabf6cc0a88e9bba1dab411f7fe339a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST ast) {\n        boolean equalsMethod \u003d false;\n\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final boolean staticOrAbstract \u003d\n                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null\n                    || modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n\n            if (!staticOrAbstract) {\n                final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final String name \u003d nameNode.getText();\n\n                if (\"equals\".equals(name)) {\n                    // one parameter?\n                    final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n                    equalsMethod \u003d paramsNode.getChildCount() \u003d\u003d 1;\n                }\n            }\n        }\n        return equalsMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java"
      }
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "22/09/17 5:11 AM",
      "commitNameOld": "b56d64035982726edf727fe37b1f583a76c96ad7",
      "commitAuthorOld": "Ruslan Iagudin",
      "daysBetweenCommits": 33.61,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n     public static boolean isEqualsMethod(DetailAST ast) {\n         boolean equalsMethod \u003d false;\n \n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n             final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-            final boolean staticOrAbstract \u003d modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n-                    || modifiers.branchContains(TokenTypes.ABSTRACT);\n+            final boolean staticOrAbstract \u003d\n+                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null\n+                    || modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n \n             if (!staticOrAbstract) {\n                 final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n                 final String name \u003d nameNode.getText();\n \n                 if (\"equals\".equals(name)) {\n                     // one parameter?\n                     final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n                     equalsMethod \u003d paramsNode.getChildCount() \u003d\u003d 1;\n                 }\n             }\n         }\n         return equalsMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST ast) {\n        boolean equalsMethod \u003d false;\n\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final boolean staticOrAbstract \u003d\n                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null\n                    || modifiers.findFirstToken(TokenTypes.ABSTRACT) !\u003d null;\n\n            if (!staticOrAbstract) {\n                final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final String name \u003d nameNode.getText();\n\n                if (\"equals\".equals(name)) {\n                    // one parameter?\n                    final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n                    equalsMethod \u003d paramsNode.getChildCount() \u003d\u003d 1;\n                }\n            }\n        }\n        return equalsMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {}
    },
    "ef1e65fb5128452cd8a19f82d09455b06a021b65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for CheckUtils\n",
      "commitDate": "28/08/15 11:06 PM",
      "commitName": "ef1e65fb5128452cd8a19f82d09455b06a021b65",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "27/08/15 10:30 PM",
      "commitNameOld": "95f8b08af84a2287dbd93c9cc740b6732e9e43b1",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n     public static boolean isEqualsMethod(DetailAST ast) {\n-        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n-            // A node must be method def\n-            return false;\n-        }\n+        boolean equalsMethod \u003d false;\n \n-        // non-static, non-abstract?\n-        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n-        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n-            || modifiers.branchContains(TokenTypes.ABSTRACT)) {\n-            return false;\n-        }\n+        if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n+            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n+            final boolean staticOrAbstract \u003d modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n+                    || modifiers.branchContains(TokenTypes.ABSTRACT);\n \n-        // named \"equals\"?\n-        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n-        final String name \u003d nameNode.getText();\n-        if (!\"equals\".equals(name)) {\n-            return false;\n-        }\n+            if (!staticOrAbstract) {\n+                final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n+                final String name \u003d nameNode.getText();\n \n-        // one parameter?\n-        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n-        return paramsNode.getChildCount() \u003d\u003d 1;\n+                if (\"equals\".equals(name)) {\n+                    // one parameter?\n+                    final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n+                    equalsMethod \u003d paramsNode.getChildCount() \u003d\u003d 1;\n+                }\n+            }\n+        }\n+        return equalsMethod;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST ast) {\n        boolean equalsMethod \u003d false;\n\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_DEF) {\n            final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n            final boolean staticOrAbstract \u003d modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n                    || modifiers.branchContains(TokenTypes.ABSTRACT);\n\n            if (!staticOrAbstract) {\n                final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n                final String name \u003d nameNode.getText();\n\n                if (\"equals\".equals(name)) {\n                    // one parameter?\n                    final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n                    equalsMethod \u003d paramsNode.getChildCount() \u003d\u003d 1;\n                }\n            }\n        }\n        return equalsMethod;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {}
    },
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": {
      "type": "Yfilerename",
      "commitMessage": "Utils classes have been moved to utils package. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "26/08/15 6:08 PM",
      "commitNameOld": "f6113bb56d695719a8803274effb3596cb82120f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST ast) {\n        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT)) {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n        return paramsNode.getChildCount() \u003d\u003d 1;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java"
      }
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public static boolean isEqualsMethod(DetailAST ast)\n     {\n         if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n             // A node must be method def\n             return false;\n         }\n \n         // non-static, non-abstract?\n         final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n         final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n         if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n         final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n-        return (paramsNode.getChildCount() \u003d\u003d 1);\n+        return paramsNode.getChildCount() \u003d\u003d 1;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST ast)\n    {\n        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n        return paramsNode.getChildCount() \u003d\u003d 1;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "08/09/14 3:21 PM",
          "commitNameOld": "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 132.68,
          "commitsBetweenForRepo": 354,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-    public static boolean isEqualsMethod(DetailAST aAST)\n+    public static boolean isEqualsMethod(DetailAST ast)\n     {\n-        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n             // A node must be method def\n             return false;\n         }\n \n         // non-static, non-abstract?\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n-        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n         if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n-        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean isEqualsMethod(DetailAST ast)\n    {\n        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "08/09/14 3:21 PM",
          "commitNameOld": "08ea556aed8265d64a5dd93963b1ce4587cc48b4",
          "commitAuthorOld": "ychulovskyy",
          "daysBetweenCommits": 132.68,
          "commitsBetweenForRepo": 354,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-    public static boolean isEqualsMethod(DetailAST aAST)\n+    public static boolean isEqualsMethod(DetailAST ast)\n     {\n-        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n             // A node must be method def\n             return false;\n         }\n \n         // non-static, non-abstract?\n-        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n-        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n         if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n-        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean isEqualsMethod(DetailAST ast)\n    {\n        if (ast.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d ast.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java"
      }
    },
    "969678107261e649c968b56dbace0064304bfb56": {
      "type": "Ybodychange",
      "commitMessage": "Fix for IllegalStateException in CheckUtils.isEqualsMethod()\n",
      "commitDate": "28/01/04 1:36 AM",
      "commitName": "969678107261e649c968b56dbace0064304bfb56",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "25/01/04 2:23 AM",
      "commitNameOld": "88b72c3df7214b3cb4f4fcb73b92883007caab17",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     public static boolean isEqualsMethod(DetailAST aAST)\n     {\n         if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n-            throw new IllegalArgumentException(\"A node must be method def\");\n+            // A node must be method def\n+            return false;\n         }\n \n         // non-static, non-abstract?\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n         final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n         if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n         final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static boolean isEqualsMethod(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            // A node must be method def\n            return false;\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
      "extendedDetails": {}
    },
    "c044038c3b932586c0d384b614254cc2d1838838": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "Added NPathComplexity, ClassDataAbstractionCoupling,\nBooleanExpressionComplexity and ClassFanOutComplexity checks\ncontributed by Simon Harris (requests 750757, 750758, 750760 and\n750759).\nIsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils.\n\nTODO: add documentation.\n",
      "commitDate": "02/01/04 12:05 AM",
      "commitName": "c044038c3b932586c0d384b614254cc2d1838838",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Added NPathComplexity, ClassDataAbstractionCoupling,\nBooleanExpressionComplexity and ClassFanOutComplexity checks\ncontributed by Simon Harris (requests 750757, 750758, 750760 and\n750759).\nIsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils.\n\nTODO: add documentation.\n",
          "commitDate": "02/01/04 12:05 AM",
          "commitName": "c044038c3b932586c0d384b614254cc2d1838838",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "01/01/04 6:34 PM",
          "commitNameOld": "1da0f94aa7f7b145275ca2659053427ebaf0f096",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    private boolean isEqualsMethod(DetailAST aAST)\n+    public static boolean isEqualsMethod(DetailAST aAST)\n     {\n+        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+            throw new IllegalArgumentException(\"A node must be method def\");\n+        }\n+\n         // non-static, non-abstract?\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n         final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n-        if (!name.equals(\"equals\")) {\n+        if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n         final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean isEqualsMethod(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            throw new IllegalArgumentException(\"A node must be method def\");\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java",
            "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
            "oldMethodName": "isEqualsMethod",
            "newMethodName": "isEqualsMethod"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added NPathComplexity, ClassDataAbstractionCoupling,\nBooleanExpressionComplexity and ClassFanOutComplexity checks\ncontributed by Simon Harris (requests 750757, 750758, 750760 and\n750759).\nIsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils.\n\nTODO: add documentation.\n",
          "commitDate": "02/01/04 12:05 AM",
          "commitName": "c044038c3b932586c0d384b614254cc2d1838838",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "01/01/04 6:34 PM",
          "commitNameOld": "1da0f94aa7f7b145275ca2659053427ebaf0f096",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    private boolean isEqualsMethod(DetailAST aAST)\n+    public static boolean isEqualsMethod(DetailAST aAST)\n     {\n+        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+            throw new IllegalArgumentException(\"A node must be method def\");\n+        }\n+\n         // non-static, non-abstract?\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n         final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n-        if (!name.equals(\"equals\")) {\n+        if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n         final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean isEqualsMethod(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            throw new IllegalArgumentException(\"A node must be method def\");\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added NPathComplexity, ClassDataAbstractionCoupling,\nBooleanExpressionComplexity and ClassFanOutComplexity checks\ncontributed by Simon Harris (requests 750757, 750758, 750760 and\n750759).\nIsEqualsMethod() moved from CovariantEqualsCheck to ChecUtils.\n\nTODO: add documentation.\n",
          "commitDate": "02/01/04 12:05 AM",
          "commitName": "c044038c3b932586c0d384b614254cc2d1838838",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "01/01/04 6:34 PM",
          "commitNameOld": "1da0f94aa7f7b145275ca2659053427ebaf0f096",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,25 @@\n-    private boolean isEqualsMethod(DetailAST aAST)\n+    public static boolean isEqualsMethod(DetailAST aAST)\n     {\n+        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+            throw new IllegalArgumentException(\"A node must be method def\");\n+        }\n+\n         // non-static, non-abstract?\n         final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n         if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n             || modifiers.branchContains(TokenTypes.ABSTRACT))\n         {\n             return false;\n         }\n \n         // named \"equals\"?\n         final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final String name \u003d nameNode.getText();\n-        if (!name.equals(\"equals\")) {\n+        if (!\"equals\".equals(name)) {\n             return false;\n         }\n \n         // one parameter?\n         final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n         return (paramsNode.getChildCount() \u003d\u003d 1);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static boolean isEqualsMethod(DetailAST aAST)\n    {\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            throw new IllegalArgumentException(\"A node must be method def\");\n        }\n\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!\"equals\".equals(name)) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "71d92d649fabf6cc0a88e9bba1dab411f7fe339a": {
      "type": "Yintroduced",
      "commitMessage": "check that a class that defines a covariant equals method also overrides\nequals(java.lang.Object)\n",
      "commitDate": "26/06/03 9:19 AM",
      "commitName": "71d92d649fabf6cc0a88e9bba1dab411f7fe339a",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,22 @@\n+    private boolean isEqualsMethod(DetailAST aAST)\n+    {\n+        // non-static, non-abstract?\n+        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n+        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n+            || modifiers.branchContains(TokenTypes.ABSTRACT))\n+        {\n+            return false;\n+        }\n+\n+        // named \"equals\"?\n+        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+        final String name \u003d nameNode.getText();\n+        if (!name.equals(\"equals\")) {\n+            return false;\n+        }\n+\n+        // one parameter?\n+        final DetailAST paramsNode \u003d\n+            aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        return (paramsNode.getChildCount() \u003d\u003d 1);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isEqualsMethod(DetailAST aAST)\n    {\n        // non-static, non-abstract?\n        final DetailAST modifiers \u003d aAST.findFirstToken(TokenTypes.MODIFIERS);\n        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)\n            || modifiers.branchContains(TokenTypes.ABSTRACT))\n        {\n            return false;\n        }\n\n        // named \"equals\"?\n        final DetailAST nameNode \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final String name \u003d nameNode.getText();\n        if (!name.equals(\"equals\")) {\n            return false;\n        }\n\n        // one parameter?\n        final DetailAST paramsNode \u003d\n            aAST.findFirstToken(TokenTypes.PARAMETERS);\n        return (paramsNode.getChildCount() \u003d\u003d 1);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java"
    }
  }
}