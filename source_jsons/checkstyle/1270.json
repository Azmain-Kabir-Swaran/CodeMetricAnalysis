{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MethodParamPadCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
  "functionStartLine": 144,
  "functionEndLine": 173,
  "numCommitsSeen": 62,
  "timeTaken": 2438,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "bc646907e94d628fa2037b752d72f8a7a25a0c4e",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "14172dd01adff4bc99296f633c4acad32e3d570f",
    "89f764baad352e57f18a9a0220fc5a7c28d9911b",
    "dc5ea22c7329171c5cacd974f554803eb3de674e"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "bc646907e94d628fa2037b752d72f8a7a25a0c4e": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "14172dd01adff4bc99296f633c4acad32e3d570f": "Ybodychange",
    "89f764baad352e57f18a9a0220fc5a7c28d9911b": "Ybodychange",
    "dc5ea22c7329171c5cacd974f554803eb3de674e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n         }\n \n         if (parenAST !\u003d null) {\n             final String line \u003d getLines()[parenAST.getLineNo() - 1];\n-            if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n+            if (CommonUtil.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n                 if (!allowLineBreaks) {\n                     log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n                 }\n             }\n             else {\n                 final int before \u003d parenAST.getColumnNo() - 1;\n                 if (option \u003d\u003d PadOption.NOSPACE\n                     \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                     log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n                 }\n                 else if (option \u003d\u003d PadOption.SPACE\n                          \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                     log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n                 }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n        }\n\n        if (parenAST !\u003d null) {\n            final String line \u003d getLines()[parenAST.getLineNo() - 1];\n            if (CommonUtil.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n                if (!allowLineBreaks) {\n                    log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n                }\n            }\n            else {\n                final int before \u003d parenAST.getColumnNo() - 1;\n                if (option \u003d\u003d PadOption.NOSPACE\n                    \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                    log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n                }\n                else if (option \u003d\u003d PadOption.SPACE\n                         \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                    log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 71.0,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n-            if (parenAST \u003d\u003d null) {\n-                return;\n-            }\n         }\n \n-        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n-        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n-            if (!allowLineBreaks) {\n-                log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n+        if (parenAST !\u003d null) {\n+            final String line \u003d getLines()[parenAST.getLineNo() - 1];\n+            if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n+                if (!allowLineBreaks) {\n+                    log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n+                }\n             }\n-        }\n-        else {\n-            final int before \u003d parenAST.getColumnNo() - 1;\n-            if (option \u003d\u003d PadOption.NOSPACE\n-                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n-                log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n-            }\n-            else if (option \u003d\u003d PadOption.SPACE\n-                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n-                log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n+            else {\n+                final int before \u003d parenAST.getColumnNo() - 1;\n+                if (option \u003d\u003d PadOption.NOSPACE\n+                    \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n+                    log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n+                }\n+                else if (option \u003d\u003d PadOption.SPACE\n+                         \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n+                    log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n+                }\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n        }\n\n        if (parenAST !\u003d null) {\n            final String line \u003d getLines()[parenAST.getLineNo() - 1];\n            if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n                if (!allowLineBreaks) {\n                    log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n                }\n            }\n            else {\n                final int before \u003d parenAST.getColumnNo() - 1;\n                if (option \u003d\u003d PadOption.NOSPACE\n                    \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                    log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n                }\n                else if (option \u003d\u003d PadOption.SPACE\n                         \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                    log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n                }\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n-                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n+                log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if (option \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n-                log(parenAST, WS_PRECEDED, parenAST.getText());\n+                log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n             }\n             else if (option \u003d\u003d PadOption.SPACE\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n-                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n+                log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, MSG_LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (option \u003d\u003d PadOption.NOSPACE\n                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, MSG_WS_PRECEDED, parenAST.getText());\n            }\n            else if (option \u003d\u003d PadOption.SPACE\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, MSG_WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "bc646907e94d628fa2037b752d72f8a7a25a0c4e": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2451: removed excess hierarchy from MethodParamPadCheck",
      "commitDate": "17/11/15 6:13 AM",
      "commitName": "bc646907e94d628fa2037b752d72f8a7a25a0c4e",
      "commitAuthor": "rnveach",
      "commitDateOld": "14/09/15 6:40 AM",
      "commitNameOld": "e5dd96d8dcfb6503d57fe70a9aff44fb5406e617",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 64.02,
      "commitsBetweenForRepo": 415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n                 log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n-            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n+            if (option \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST, WS_PRECEDED, parenAST.getText());\n             }\n-            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n+            else if (option \u003d\u003d PadOption.SPACE\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (option \u003d\u003d PadOption.NOSPACE\n                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, WS_PRECEDED, parenAST.getText());\n            }\n            else if (option \u003d\u003d PadOption.SPACE\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:50 AM",
      "commitNameOld": "55c92042eb6986e905529de841d3d1c9a7b2b6dd",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n-        if (CommonUtils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n+        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n                 log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST , WS_PRECEDED, parenAST.getText());\n             }\n             else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (CommonUtils.hasWhitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                log(parenAST , WS_PRECEDED, parenAST.getText());\n            }\n            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n-        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n+        if (CommonUtils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n                 log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST , WS_PRECEDED, parenAST.getText());\n             }\n             else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (CommonUtils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                log(parenAST , WS_PRECEDED, parenAST.getText());\n            }\n            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "4d6e2376db89b69167de867bfc28f8d8624a6b78": {
      "type": "Ybodychange",
      "commitMessage": "Move constants to left side of comparison. #1555\n\nFixes `ConstantOnLHSOfComparison` inspection violations.\n\nDescription:\n\u003eReports on comparison operations with constant values on their left-hand side. Some coding conventions specify that constants should be on the right-hand side of comparisons.\n",
      "commitDate": "08/08/15 6:46 PM",
      "commitName": "4d6e2376db89b69167de867bfc28f8d8624a6b78",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 16.82,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parenAST;\n         if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n                 log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n-            if (PadOption.NOSPACE \u003d\u003d getAbstractOption()\n+            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                 \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST , WS_PRECEDED, parenAST.getText());\n             }\n-            else if (PadOption.SPACE \u003d\u003d getAbstractOption()\n+            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (getAbstractOption() \u003d\u003d PadOption.NOSPACE\n                \u0026\u0026 Character.isWhitespace(line.charAt(before))) {\n                log(parenAST , WS_PRECEDED, parenAST.getText());\n            }\n            else if (getAbstractOption() \u003d\u003d PadOption.SPACE\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before))) {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST parenAST;\n-        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n+        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n                 log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n-            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n-                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n+            if (PadOption.NOSPACE \u003d\u003d getAbstractOption()\n+                \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n             {\n                 log(parenAST , WS_PRECEDED, parenAST.getText());\n             }\n-            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n+            else if (PadOption.SPACE \u003d\u003d getAbstractOption()\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n             {\n                 log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST parenAST;\n        if (ast.getType() \u003d\u003d TokenTypes.METHOD_CALL) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if (PadOption.NOSPACE \u003d\u003d getAbstractOption()\n                \u0026\u0026 Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST , WS_PRECEDED, parenAST.getText());\n            }\n            else if (PadOption.SPACE \u003d\u003d getAbstractOption()\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST parenAST;\n         if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n             parenAST \u003d ast;\n         }\n         else {\n             parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n             if (!allowLineBreaks) {\n-                log(parenAST, \"line.previous\", parenAST.getText());\n+                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n             {\n-                log(parenAST , \"ws.preceded\", parenAST.getText());\n+                log(parenAST , WS_PRECEDED, parenAST.getText());\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n             {\n-                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n+                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST parenAST;\n        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, LINE_PREVIOUS, parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n            {\n                log(parenAST , WS_PRECEDED, parenAST.getText());\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, WS_NOT_PRECEDED, parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 459,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         final DetailAST parenAST;\n-        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n-            parenAST \u003d aAST;\n+        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n+            parenAST \u003d ast;\n         }\n         else {\n-            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n-            if (!mAllowLineBreaks) {\n+            if (!allowLineBreaks) {\n                 log(parenAST, \"line.previous\", parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n             {\n                 log(parenAST , \"ws.preceded\", parenAST.getText());\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n             {\n                 log(parenAST, \"ws.notPreceded\", parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST parenAST;\n        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, \"line.previous\", parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n            {\n                log(parenAST , \"ws.preceded\", parenAST.getText());\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 459,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n         final DetailAST parenAST;\n-        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n-            parenAST \u003d aAST;\n+        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n+            parenAST \u003d ast;\n         }\n         else {\n-            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n \n         final String line \u003d getLines()[parenAST.getLineNo() - 1];\n         if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n-            if (!mAllowLineBreaks) {\n+            if (!allowLineBreaks) {\n                 log(parenAST, \"line.previous\", parenAST.getText());\n             }\n         }\n         else {\n             final int before \u003d parenAST.getColumnNo() - 1;\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n             {\n                 log(parenAST , \"ws.preceded\", parenAST.getText());\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n             {\n                 log(parenAST, \"ws.notPreceded\", parenAST.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST parenAST;\n        if ((ast.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d ast;\n        }\n        else {\n            parenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!allowLineBreaks) {\n                log(parenAST, \"line.previous\", parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n            {\n                log(parenAST , \"ws.preceded\", parenAST.getText());\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST parenAST;\n        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d aAST;\n        }\n        else {\n            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!mAllowLineBreaks) {\n                log(parenAST, \"line.previous\", parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n            {\n                log(parenAST , \"ws.preceded\", parenAST.getText());\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java"
      }
    },
    "14172dd01adff4bc99296f633c4acad32e3d570f": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1374792.  Now we do not need to look for ident before lparen, we just look at char instead.\n",
      "commitDate": "07/12/05 9:23 AM",
      "commitName": "14172dd01adff4bc99296f633c4acad32e3d570f",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 36.92,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,34 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST parenAST;\n         if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n             parenAST \u003d aAST;\n         }\n         else {\n             parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n-        int parenColumnNo \u003d parenAST.getColumnNo();\n-        final String[] lines \u003d getLines();\n-        int identLineNo \u003d -1;\n-        int identColumnNo \u003d -1;\n-        final String identText;\n-        final DetailAST identAST;\n-        final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n-        if (dotAST !\u003d null) {\n-            identAST \u003d dotAST.getLastChild();\n-        }\n-        else if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n-            identAST \u003d aAST;\n+\n+        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n+        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n+            if (!mAllowLineBreaks) {\n+                log(parenAST, \"line.previous\", parenAST.getText());\n+            }\n         }\n         else {\n-            identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n-        }\n-        identLineNo \u003d identAST.getLineNo();\n-        identColumnNo \u003d identAST.getColumnNo();\n-        identText \u003d identAST.getText();\n-\n-        if (identLineNo \u003d\u003d parenAST.getLineNo()) {\n-            final int after \u003d identColumnNo + identText.length();\n-            final String line \u003d lines[identLineNo - 1];\n+            final int before \u003d parenAST.getColumnNo() - 1;\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n-                \u0026\u0026 (Character.isWhitespace(line.charAt(after))))\n+                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n             {\n-                log(identLineNo, after, \"ws.followed\", identText);\n+                log(parenAST , \"ws.preceded\", parenAST.getText());\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n-                     \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n+                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n             {\n-                log(identLineNo, after, \"ws.notFollowed\", identText);\n+                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n             }\n         }\n-        else if (!mAllowLineBreaks) {\n-            log(\n-                parenAST.getLineNo(),\n-                parenColumnNo,\n-                \"line.previous\",\n-                parenAST.getText());\n-        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST parenAST;\n        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d aAST;\n        }\n        else {\n            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n\n        final String line \u003d getLines()[parenAST.getLineNo() - 1];\n        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {\n            if (!mAllowLineBreaks) {\n                log(parenAST, \"line.previous\", parenAST.getText());\n            }\n        }\n        else {\n            final int before \u003d parenAST.getColumnNo() - 1;\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(before))))\n            {\n                log(parenAST , \"ws.preceded\", parenAST.getText());\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(before)))\n            {\n                log(parenAST, \"ws.notPreceded\", parenAST.getText());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "89f764baad352e57f18a9a0220fc5a7c28d9911b": {
      "type": "Ybodychange",
      "commitMessage": "grammar changes for (SUPER_)CTOR_CALL\n",
      "commitDate": "07/09/05 8:56 AM",
      "commitName": "89f764baad352e57f18a9a0220fc5a7c28d9911b",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 241.21,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,55 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST parenAST;\n-        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n-            || (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL))\n-        {\n+        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n             parenAST \u003d aAST;\n         }\n         else {\n             parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n             // array construction \u003d\u003e parenAST \u003d\u003d null\n             if (parenAST \u003d\u003d null) {\n                 return;\n             }\n         }\n         int parenColumnNo \u003d parenAST.getColumnNo();\n         final String[] lines \u003d getLines();\n         int identLineNo \u003d -1;\n         int identColumnNo \u003d -1;\n         final String identText;\n-        if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n-            identText \u003d \"super\";\n-            final String parenLine \u003d lines[parenAST.getLineNo() - 1];\n-            final int superIndex \u003d\n-                parenLine.lastIndexOf(\"super\", parenAST.getColumnNo());\n-            if (superIndex !\u003d -1) {\n-                identLineNo \u003d aAST.getLineNo();\n-                identColumnNo \u003d superIndex;\n-            }\n+        final DetailAST identAST;\n+        final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n+        if (dotAST !\u003d null) {\n+            identAST \u003d dotAST.getLastChild();\n+        }\n+        else if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n+            identAST \u003d aAST;\n         }\n         else {\n-            final DetailAST identAST;\n-            final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n-            if (dotAST !\u003d null) {\n-                identAST \u003d dotAST.getLastChild();\n-            }\n-            else {\n-                identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n-            }\n-            identLineNo \u003d identAST.getLineNo();\n-            identColumnNo \u003d identAST.getColumnNo();\n-            identText \u003d identAST.getText();\n+            identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         }\n+        identLineNo \u003d identAST.getLineNo();\n+        identColumnNo \u003d identAST.getColumnNo();\n+        identText \u003d identAST.getText();\n \n         if (identLineNo \u003d\u003d parenAST.getLineNo()) {\n             final int after \u003d identColumnNo + identText.length();\n             final String line \u003d lines[identLineNo - 1];\n             if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                 \u0026\u0026 (Character.isWhitespace(line.charAt(after))))\n             {\n                 log(identLineNo, after, \"ws.followed\", identText);\n             }\n             else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                      \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n             {\n                 log(identLineNo, after, \"ws.notFollowed\", identText);\n             }\n         }\n         else if (!mAllowLineBreaks) {\n             log(\n                 parenAST.getLineNo(),\n                 parenColumnNo,\n                 \"line.previous\",\n                 parenAST.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST parenAST;\n        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)) {\n            parenAST \u003d aAST;\n        }\n        else {\n            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n        int parenColumnNo \u003d parenAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        int identLineNo \u003d -1;\n        int identColumnNo \u003d -1;\n        final String identText;\n        final DetailAST identAST;\n        final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n        if (dotAST !\u003d null) {\n            identAST \u003d dotAST.getLastChild();\n        }\n        else if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n            identAST \u003d aAST;\n        }\n        else {\n            identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        }\n        identLineNo \u003d identAST.getLineNo();\n        identColumnNo \u003d identAST.getColumnNo();\n        identText \u003d identAST.getText();\n\n        if (identLineNo \u003d\u003d parenAST.getLineNo()) {\n            final int after \u003d identColumnNo + identText.length();\n            final String line \u003d lines[identLineNo - 1];\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(after))))\n            {\n                log(identLineNo, after, \"ws.followed\", identText);\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n            {\n                log(identLineNo, after, \"ws.notFollowed\", identText);\n            }\n        }\n        else if (!mAllowLineBreaks) {\n            log(\n                parenAST.getLineNo(),\n                parenColumnNo,\n                \"line.previous\",\n                parenAST.getText());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java",
      "extendedDetails": {}
    },
    "dc5ea22c7329171c5cacd974f554803eb3de674e": {
      "type": "Yintroduced",
      "commitMessage": "Added check for the padding between the\nidentifier of a method definition, constructor definition,\nmethod call, or constructor invocation;\nand the left parenthesis of the parameter list.  (module\nMethodParamPad, request 843254)\n",
      "commitDate": "20/01/04 5:10 PM",
      "commitName": "dc5ea22c7329171c5cacd974f554803eb3de674e",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,66 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        final DetailAST parenAST;\n+        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n+            || (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL))\n+        {\n+            parenAST \u003d aAST;\n+        }\n+        else {\n+            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n+            // array construction \u003d\u003e parenAST \u003d\u003d null\n+            if (parenAST \u003d\u003d null) {\n+                return;\n+            }\n+        }\n+        int parenColumnNo \u003d parenAST.getColumnNo();\n+        final String[] lines \u003d getLines();\n+        int identLineNo \u003d -1;\n+        int identColumnNo \u003d -1;\n+        final String identText;\n+        if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n+            identText \u003d \"super\";\n+            final String parenLine \u003d lines[parenAST.getLineNo() - 1];\n+            final int superIndex \u003d\n+                parenLine.lastIndexOf(\"super\", parenAST.getColumnNo());\n+            if (superIndex !\u003d -1) {\n+                identLineNo \u003d aAST.getLineNo();\n+                identColumnNo \u003d superIndex;\n+            }\n+        }\n+        else {\n+            final DetailAST identAST;\n+            final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n+            if (dotAST !\u003d null) {\n+                identAST \u003d dotAST.getLastChild();\n+            }\n+            else {\n+                identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n+            }\n+            identLineNo \u003d identAST.getLineNo();\n+            identColumnNo \u003d identAST.getColumnNo();\n+            identText \u003d identAST.getText();\n+        }\n+\n+        if (identLineNo \u003d\u003d parenAST.getLineNo()) {\n+            final int after \u003d identColumnNo + identText.length();\n+            final String line \u003d lines[identLineNo - 1];\n+            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n+                \u0026\u0026 (Character.isWhitespace(line.charAt(after))))\n+            {\n+                log(identLineNo, after, \"ws.followed\", identText);\n+            }\n+            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n+                     \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n+            {\n+                log(identLineNo, after, \"ws.notFollowed\", identText);\n+            }\n+        }\n+        else if (!mAllowLineBreaks) {\n+            log(\n+                parenAST.getLineNo(),\n+                parenColumnNo,\n+                \"line.previous\",\n+                parenAST.getText());\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST parenAST;\n        if ((aAST.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n            || (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL))\n        {\n            parenAST \u003d aAST;\n        }\n        else {\n            parenAST \u003d aAST.findFirstToken(TokenTypes.LPAREN);\n            // array construction \u003d\u003e parenAST \u003d\u003d null\n            if (parenAST \u003d\u003d null) {\n                return;\n            }\n        }\n        int parenColumnNo \u003d parenAST.getColumnNo();\n        final String[] lines \u003d getLines();\n        int identLineNo \u003d -1;\n        int identColumnNo \u003d -1;\n        final String identText;\n        if (aAST.getType() \u003d\u003d TokenTypes.SUPER_CTOR_CALL) {\n            identText \u003d \"super\";\n            final String parenLine \u003d lines[parenAST.getLineNo() - 1];\n            final int superIndex \u003d\n                parenLine.lastIndexOf(\"super\", parenAST.getColumnNo());\n            if (superIndex !\u003d -1) {\n                identLineNo \u003d aAST.getLineNo();\n                identColumnNo \u003d superIndex;\n            }\n        }\n        else {\n            final DetailAST identAST;\n            final DetailAST dotAST \u003d aAST.findFirstToken(TokenTypes.DOT);\n            if (dotAST !\u003d null) {\n                identAST \u003d dotAST.getLastChild();\n            }\n            else {\n                identAST \u003d aAST.findFirstToken(TokenTypes.IDENT);\n            }\n            identLineNo \u003d identAST.getLineNo();\n            identColumnNo \u003d identAST.getColumnNo();\n            identText \u003d identAST.getText();\n        }\n\n        if (identLineNo \u003d\u003d parenAST.getLineNo()) {\n            final int after \u003d identColumnNo + identText.length();\n            final String line \u003d lines[identLineNo - 1];\n            if ((PadOption.NOSPACE \u003d\u003d getAbstractOption())\n                \u0026\u0026 (Character.isWhitespace(line.charAt(after))))\n            {\n                log(identLineNo, after, \"ws.followed\", identText);\n            }\n            else if ((PadOption.SPACE \u003d\u003d getAbstractOption())\n                     \u0026\u0026 !Character.isWhitespace(line.charAt(after)))\n            {\n                log(identLineNo, after, \"ws.notFollowed\", identText);\n            }\n        }\n        else if (!mAllowLineBreaks) {\n            log(\n                parenAST.getLineNo(),\n                parenColumnNo,\n                \"line.previous\",\n                parenAST.getText());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java"
    }
  }
}