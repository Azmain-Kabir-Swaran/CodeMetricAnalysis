{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocMethodCheck.java",
  "functionName": "checkParamTags",
  "functionId": "checkParamTags___tags-List__JavadocTag__(modifiers-final)__parent-DetailAST(modifiers-final)__reportExpectedTags-boolean",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
  "functionStartLine": 865,
  "functionEndLine": 912,
  "numCommitsSeen": 297,
  "timeTaken": 5762,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "d220d7c3cc74490c7f2923f2ea85d00133afe98c",
    "faa8a0b7a427385fab564d2959244355f8d9813f",
    "ef834b210cc5c7803ef930fcff96219b6b91922d",
    "d972822d63ee8eb60207e6de53632335dfbc4d52",
    "a21164df1fbaff36ba020968b3a6128ab8476756",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b",
    "72be23f288369fdd9e562999bb9b0e2ff646c897",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515",
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "d220d7c3cc74490c7f2923f2ea85d00133afe98c": "Ybodychange",
    "faa8a0b7a427385fab564d2959244355f8d9813f": "Ybodychange",
    "ef834b210cc5c7803ef930fcff96219b6b91922d": "Ybodychange",
    "d972822d63ee8eb60207e6de53632335dfbc4d52": "Ybodychange",
    "a21164df1fbaff36ba020968b3a6128ab8476756": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Ybodychange",
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": "Ybodychange",
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": "Ybodychange",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": "Ybodychange",
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": "Ybodychange",
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": "Ymultichange(Yparameterchange,Ybodychange)",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": "Ybodychange",
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b": "Ybodychange",
    "72be23f288369fdd9e562999bb9b0e2ff646c897": "Ymultichange(Yparameterchange,Ybodychange)",
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": "Yfilerename",
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49": "Ybodychange",
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n-        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n+        final List\u003cDetailAST\u003e typeParams \u003d CheckUtil\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             final String arg1 \u003d tag.getFirstArg();\n             boolean found \u003d removeMatchingParam(params, arg1);\n \n-            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n+            if (CommonUtil.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtil.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 found \u003d searchMatchingTypeParameter(typeParams,\n                         arg1.substring(1, arg1.length() - 1));\n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtil\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            final String arg1 \u003d tag.getFirstArg();\n            boolean found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtil.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtil.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                found \u003d searchMatchingTypeParameter(typeParams,\n                        arg1.substring(1, arg1.length() - 1));\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "d220d7c3cc74490c7f2923f2ea85d00133afe98c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2080: Fix typos in code\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "04/09/15 5:28 PM",
      "commitName": "d220d7c3cc74490c7f2923f2ea85d00133afe98c",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "31/08/15 12:58 PM",
      "commitNameOld": "49a0ee81710e0c43ed06a01f1d64ac7f5598a934",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 4.19,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             final String arg1 \u003d tag.getFirstArg();\n             boolean found \u003d removeMatchingParam(params, arg1);\n \n             if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 found \u003d searchMatchingTypeParameter(typeParams,\n                         arg1.substring(1, arg1.length() - 1));\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n-                log(param, MSG_EXCPECTED_TAG,\n+                log(param, MSG_EXPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n-                log(typeParam, MSG_EXCPECTED_TAG,\n+                log(typeParam, MSG_EXPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            final String arg1 \u003d tag.getFirstArg();\n            boolean found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                found \u003d searchMatchingTypeParameter(typeParams,\n                        arg1.substring(1, arg1.length() - 1));\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "faa8a0b7a427385fab564d2959244355f8d9813f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #46. Statements shouldn\u0027t be nested too deep\n",
      "commitDate": "31/08/15 12:49 PM",
      "commitName": "faa8a0b7a427385fab564d2959244355f8d9813f",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "31/08/15 11:24 AM",
      "commitNameOld": "2b861bd6e16584e22bb115ff7abd65c35072eb92",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,49 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             final String arg1 \u003d tag.getFirstArg();\n             boolean found \u003d removeMatchingParam(params, arg1);\n \n             if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n-                // Loop looking for matching type param\n-                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n-                while (typeParamsIt.hasNext()) {\n-                    final DetailAST typeParam \u003d typeParamsIt.next();\n-                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n-                            .equals(\n-                                    arg1.substring(1,\n-                                        arg1.length() - 1))) {\n-                        found \u003d true;\n-                        typeParamsIt.remove();\n-                        break;\n-                    }\n-                }\n+                found \u003d searchMatchingTypeParameter(typeParams,\n+                        arg1.substring(1, arg1.length() - 1));\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            final String arg1 \u003d tag.getFirstArg();\n            boolean found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                found \u003d searchMatchingTypeParameter(typeParams,\n                        arg1.substring(1, arg1.length() - 1));\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "ef834b210cc5c7803ef930fcff96219b6b91922d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Narrow scope of variable\n\nFixes `TooBroadScope` inspection violations introduced in recent commit.\n\nDescription:\n\u003eReports any variable declarations of which the scope can be narrowed. Especially useful for \"Pascal style\" declarations at the start of a method, but variables with too broad a scope are also often left over after refactorings.\n",
      "commitDate": "28/08/15 10:36 PM",
      "commitName": "ef834b210cc5c7803ef930fcff96219b6b91922d",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/08/15 12:48 PM",
      "commitNameOld": "37389ac4c4e4093b255951e66650878a84d2bf18",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,60 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n-            boolean found;\n             final String arg1 \u003d tag.getFirstArg();\n-            found \u003d removeMatchingParam(params, arg1);\n+            boolean found \u003d removeMatchingParam(params, arg1);\n \n             if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     arg1.substring(1,\n                                         arg1.length() - 1))) {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            final String arg1 \u003d tag.getFirstArg();\n            boolean found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1))) {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "d972822d63ee8eb60207e6de53632335dfbc4d52": {
      "type": "Ybodychange",
      "commitMessage": "Remove unused assignment. #1555\n\nFixes `UnusedAssignment` inspection violations.\n\nDescription:\n\u003eThis inspection points out the cases where a variable value is never used after its assignment.\n",
      "commitDate": "27/08/15 10:32 PM",
      "commitName": "d972822d63ee8eb60207e6de53632335dfbc4d52",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 10:31 PM",
      "commitNameOld": "a384794adeebe9ee5d2f023e841823734bf2453b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n-            boolean found \u003d false;\n+            boolean found;\n             final String arg1 \u003d tag.getFirstArg();\n             found \u003d removeMatchingParam(params, arg1);\n \n             if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     arg1.substring(1,\n                                         arg1.length() - 1))) {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found;\n            final String arg1 \u003d tag.getFirstArg();\n            found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1))) {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "a21164df1fbaff36ba020968b3a6128ab8476756": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fixed NPathComplexity violation in JavadocMethodCheck\n",
      "commitDate": "27/08/15 9:54 AM",
      "commitName": "a21164df1fbaff36ba020968b3a6128ab8476756",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "27/08/15 6:30 AM",
      "commitNameOld": "5b01236f52f59b632659cac386768805f7a9006f",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,61 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n-\n-            // Loop looking for matching param\n-            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             final String arg1 \u003d tag.getFirstArg();\n-            while (paramIt.hasNext()) {\n-                final DetailAST param \u003d paramIt.next();\n-                if (param.getText().equals(arg1)) {\n-                    found \u003d true;\n-                    paramIt.remove();\n-                    break;\n-                }\n-            }\n+            found \u003d removeMatchingParam(params, arg1);\n \n             if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     arg1.substring(1,\n                                         arg1.length() - 1))) {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n            final String arg1 \u003d tag.getFirstArg();\n            found \u003d removeMatchingParam(params, arg1);\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1))) {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             final String arg1 \u003d tag.getFirstArg();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(arg1)) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n-            if (Utils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 Utils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n+            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     arg1.substring(1,\n                                         arg1.length() - 1))) {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            final String arg1 \u003d tag.getFirstArg();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(arg1)) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (CommonUtils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 CommonUtils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1))) {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": "14/08/15 7:00 AM",
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "11/08/15 10:19 PM",
      "commitNameOld": "3bd699bd593414d63c7139aa410f13ec8341a027",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 2.36,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags) {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n-            final String arg1 \u003d tag.getArg1();\n+            final String arg1 \u003d tag.getFirstArg();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(arg1)) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (Utils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 Utils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     arg1.substring(1,\n                                         arg1.length() - 1))) {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags) {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            final String arg1 \u003d tag.getFirstArg();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(arg1)) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (Utils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 Utils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1))) {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "a2b8be14bb1230f1b184701bae8bcc7af102bb25": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from SimplifyStartsWith rule, issue #949\n",
      "commitDate": "03/05/15 8:00 AM",
      "commitName": "a2b8be14bb1230f1b184701bae8bcc7af102bb25",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "01/05/15 4:32 PM",
      "commitNameOld": "31421dcdda3b3534f2fcc5c6e88a8fdbc5d15311",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.64,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,73 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags)\n     {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n+            final String arg1 \u003d tag.getArg1();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n-                if (param.getText().equals(tag.getArg1())) {\n+                if (param.getText().equals(arg1)) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n-            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n+            if (Utils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 Utils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n-                                    tag.getArg1().substring(1,\n-                                            tag.getArg1().length() - 1)))\n+                                    arg1.substring(1,\n+                                        arg1.length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n-                        \"@param\", tag.getArg1());\n+                        \"@param\", arg1);\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            final String arg1 \u003d tag.getArg1();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(arg1)) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (Utils.startsWithChar(arg1, \u0027\u003c\u0027) \u0026\u0026 Utils.endsWithChar(arg1, \u0027\u003e\u0027)) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    arg1.substring(1,\n                                        arg1.length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", arg1);\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, javadoc package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n             final DetailAST parent, boolean reportExpectedTags)\n     {\n         final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n-                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n+                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n-                log(param, \"javadoc.expectedTag\",\n+                log(param, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n-                log(typeParam, \"javadoc.expectedTag\",\n+                log(typeParam, MSG_EXCPECTED_TAG,\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), MSG_UNUSED_TAG,\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, MSG_EXCPECTED_TAG,\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "29/12/14 7:49 AM",
          "commitNameOld": "c29a5466d141595ddf773f3bead5b0591203d7d2",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 20.94,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,72 @@\n-    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n-            final DetailAST aParent, boolean aReportExpectedTags)\n+    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n+            final DetailAST parent, boolean reportExpectedTags)\n     {\n-        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n+        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n-                .getTypeParameters(aParent);\n+                .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n-        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n+        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n-        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n+        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, \"javadoc.expectedTag\",\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, \"javadoc.expectedTag\",\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List\u003cJavadocTag\u003e(modifiers-final), aParent-DetailAST(modifiers-final), aReportExpectedTags-boolean]",
            "newValue": "[tags-List\u003cJavadocTag\u003e(modifiers-final), parent-DetailAST(modifiers-final), reportExpectedTags-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "29/12/14 7:49 AM",
          "commitNameOld": "c29a5466d141595ddf773f3bead5b0591203d7d2",
          "commitAuthorOld": "alexkravin",
          "daysBetweenCommits": 20.94,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,72 @@\n-    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n-            final DetailAST aParent, boolean aReportExpectedTags)\n+    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n+            final DetailAST parent, boolean reportExpectedTags)\n     {\n-        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n+        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n-                .getTypeParameters(aParent);\n+                .getTypeParameters(parent);\n \n         // Loop over the tags, checking to see they exist in the params.\n-        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n+        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n-        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n+        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n             for (DetailAST param : params) {\n                 log(param, \"javadoc.expectedTag\",\n                     JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n                 log(typeParam, \"javadoc.expectedTag\",\n                     JavadocTagInfo.PARAM.getText(),\n                     \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e tags,\n            final DetailAST parent, boolean reportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(parent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(parent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d tags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!allowMissingParamTags \u0026\u0026 reportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n            final DetailAST aParent, boolean aReportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java"
      }
    },
    "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767": {
      "type": "Ybodychange",
      "commitMessage": "record work on patch #2534038 from Travis for new annotation checks. Very good patch as usual from Travis. Shame on me for taking so long to apply it.\n",
      "commitDate": "23/03/09 3:49 AM",
      "commitName": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/03/09 9:16 PM",
      "commitNameOld": "216fcb79f9f5bbd05244364e926f261a90e697d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,72 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n             final DetailAST aParent, boolean aReportExpectedTags)\n     {\n         final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             for (DetailAST param : params) {\n-                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n+                log(param, \"javadoc.expectedTag\",\n+                    JavadocTagInfo.PARAM.getText(), param.getText());\n             }\n \n             for (DetailAST typeParam : typeParams) {\n-                log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n-                        + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n-                        + \"\u003e\");\n+                log(typeParam, \"javadoc.expectedTag\",\n+                    JavadocTagInfo.PARAM.getText(),\n+                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                    + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n            final DetailAST aParent, boolean aReportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(), param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, \"javadoc.expectedTag\",\n                    JavadocTagInfo.PARAM.getText(),\n                    \"\u003c\" + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "e50e1fcd1c17ba1f73d11df38382907cc163a1d1": {
      "type": "Ybodychange",
      "commitMessage": "Use the new syntactic sugar \"for loop\".\n\nEnd of the cosmetic changes.\n",
      "commitDate": "15/12/07 2:28 AM",
      "commitName": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/12/07 8:51 PM",
      "commitNameOld": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,70 @@\n     private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n             final DetailAST aParent, boolean aReportExpectedTags)\n     {\n         final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n         final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                 .getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n-            while (paramIt.hasNext()) {\n-                final DetailAST param \u003d paramIt.next();\n+            for (DetailAST param : params) {\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n \n-            final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n-            while (typeParamsIt.hasNext()) {\n-                final DetailAST typeParam \u003d typeParamsIt.next();\n+            for (DetailAST typeParam : typeParams) {\n                 log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                         + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                         + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n            final DetailAST aParent, boolean aReportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            for (DetailAST param : params) {\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            for (DetailAST typeParam : typeParams) {\n                log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                        + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 8:51 PM",
      "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "27/01/07 6:51 AM",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.58,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-    private void checkParamTags(final List aTags, final DetailAST aParent,\n-        boolean aReportExpectedTags)\n+    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n+            final DetailAST aParent, boolean aReportExpectedTags)\n     {\n-        final List params \u003d getParameters(aParent);\n-        final List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n+        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n+                .getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n-        final ListIterator tagIt \u003d aTags.listIterator();\n+        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n-            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n+            final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n-            final Iterator paramIt \u003d params.iterator();\n+            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n-                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n-                final Iterator typeParamsIt \u003d typeParams.iterator();\n+                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n-                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                    final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator paramIt \u003d params.iterator();\n+            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n-                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                final DetailAST param \u003d paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n \n-            final Iterator typeParamsIt \u003d typeParams.iterator();\n+            final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n             while (typeParamsIt.hasNext()) {\n-                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                final DetailAST typeParam \u003d typeParamsIt.next();\n                 log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                         + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                         + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n            final DetailAST aParent, boolean aReportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                        + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List(modifiers-final), aParent-DetailAST(modifiers-final), aReportExpectedTags-boolean]",
            "newValue": "[aTags-List\u003cJavadocTag\u003e(modifiers-final), aParent-DetailAST(modifiers-final), aReportExpectedTags-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Start of adding generics.\n",
          "commitDate": "14/12/07 8:51 PM",
          "commitName": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "27/01/07 6:51 AM",
          "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 321.58,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-    private void checkParamTags(final List aTags, final DetailAST aParent,\n-        boolean aReportExpectedTags)\n+    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n+            final DetailAST aParent, boolean aReportExpectedTags)\n     {\n-        final List params \u003d getParameters(aParent);\n-        final List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n+        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n+                .getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n-        final ListIterator tagIt \u003d aTags.listIterator();\n+        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n-            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n+            final JavadocTag tag \u003d tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n-            final Iterator paramIt \u003d params.iterator();\n+            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n-                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                final DetailAST param \u003d paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n-                final Iterator typeParamsIt \u003d typeParams.iterator();\n+                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n-                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                    final DetailAST typeParam \u003d typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator paramIt \u003d params.iterator();\n+            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n-                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                final DetailAST param \u003d paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n \n-            final Iterator typeParamsIt \u003d typeParams.iterator();\n+            final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n             while (typeParamsIt.hasNext()) {\n-                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                final DetailAST typeParam \u003d typeParamsIt.next();\n                 log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                         + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                         + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List\u003cJavadocTag\u003e aTags,\n            final DetailAST aParent, boolean aReportExpectedTags)\n    {\n        final List\u003cDetailAST\u003e params \u003d getParameters(aParent);\n        final List\u003cDetailAST\u003e typeParams \u003d CheckUtils\n                .getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator\u003cJavadocTag\u003e tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator\u003cDetailAST\u003e paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator\u003cDetailAST\u003e typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                        + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "22/05/06 6:49 AM",
      "commitNameOld": "0a72322796c28266f07df8af6f7e000aa9cf0e48",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 45.58,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n     private void checkParamTags(final List aTags, final DetailAST aParent,\n         boolean aReportExpectedTags)\n     {\n-        List params \u003d getParameters(aParent);\n-        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+        final List params \u003d getParameters(aParent);\n+        final List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n-                Iterator typeParamsIt \u003d typeParams.iterator();\n+                final Iterator typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                             .equals(\n                                     tag.getArg1().substring(1,\n                                             tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                         \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n \n             final Iterator typeParamsIt \u003d typeParams.iterator();\n             while (typeParamsIt.hasNext()) {\n                 final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                 log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                         + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                         + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List aTags, final DetailAST aParent,\n        boolean aReportExpectedTags)\n    {\n        final List params \u003d getParameters(aParent);\n        final List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                final Iterator typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                            .equals(\n                                    tag.getArg1().substring(1,\n                                            tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(), \"javadoc.unusedTag\",\n                        \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\", \"\u003c\"\n                        + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94": {
      "type": "Ybodychange",
      "commitMessage": "Fixed 1249707: AbstractTypeAwareCheck doesn\u0027t work with types from typeparm\n\nSome pretty big refactoring for typeaware checks performed.\nAlso added handling for type params.  Current handling algorithm\nhas some preconditions and restriction, but it works for most cases\n(not sure I\u0027ve covered all situation when type param will have name\nof real exception, but I do not think it is critical for now :)\n\nAlso, I\u0027ve added column number for JavadocTag (mainly to be able use\nClassInfo for it).  So, JavadocTypeCheck also affected.\n\nAnd I\u0027ve added new logger for TreeWalker (if we have loggers we should\nuse them :)\n",
      "commitDate": "05/08/05 6:33 AM",
      "commitName": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "03/07/05 2:37 AM",
      "commitNameOld": "b106eab0414affa16fbc0e2dfce511e3aed9d557",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 33.16,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n     private void checkParamTags(final List aTags, final DetailAST aParent,\n                                 boolean aReportExpectedTags)\n     {\n         List params \u003d getParameters(aParent);\n         List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n \n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             boolean found \u003d false;\n \n             // Loop looking for matching param\n             final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                 // Loop looking for matching type param\n                 Iterator typeParamsIt \u003d typeParams.iterator();\n                 while (typeParamsIt.hasNext()) {\n                     final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                     if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                         .equals(tag.getArg1().substring(\n                             1, tag.getArg1().length() - 1)))\n                     {\n                         found \u003d true;\n                         typeParamsIt.remove();\n                         break;\n                     }\n                 }\n \n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n-                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n-                    .getArg1());\n+                log(tag.getLineNo(), tag.getColumnNo(),\n+                    \"javadoc.unusedTag\", \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n \n             final Iterator typeParamsIt \u003d typeParams.iterator();\n             while (typeParamsIt.hasNext()) {\n                 final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                 log(typeParam, \"javadoc.expectedTag\", \"@param\",\n                     \"\u003c\"\n                     + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                     + \"\u003e\");\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                boolean aReportExpectedTags)\n    {\n        List params \u003d getParameters(aParent);\n        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                Iterator typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        .equals(tag.getArg1().substring(\n                            1, tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), tag.getColumnNo(),\n                    \"javadoc.unusedTag\", \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n                    \"\u003c\"\n                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "06c32930c34e2b10b5926883c29a4a20fe6ecf05": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "Fix for 1185501.\n",
      "commitDate": "05/06/05 3:36 PM",
      "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
      "commitAuthor": "Michael Studman",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix for 1185501.\n",
          "commitDate": "05/06/05 3:36 PM",
          "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
          "commitAuthor": "Michael Studman",
          "commitDateOld": "11/05/05 9:48 AM",
          "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 25.24,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,73 @@\n-    private void checkParamTags(List aTags, List aParams,\n+    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                 boolean aReportExpectedTags)\n     {\n+        List params \u003d getParameters(aParent);\n+        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n-            // Loop looking for matching param\n             boolean found \u003d false;\n-            final Iterator paramIt \u003d aParams.iterator();\n+\n+            // Loop looking for matching param\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n+            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n+                // Loop looking for matching type param\n+                Iterator typeParamsIt \u003d typeParams.iterator();\n+                while (typeParamsIt.hasNext()) {\n+                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                        .equals(tag.getArg1().substring(\n+                            1, tag.getArg1().length() - 1)))\n+                    {\n+                        found \u003d true;\n+                        typeParamsIt.remove();\n+                        break;\n+                    }\n+                }\n+\n+            }\n+\n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                     .getArg1());\n             }\n         }\n \n-        // Now dump out all parameters without tags :- unless\n+        // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator paramIt \u003d aParams.iterator();\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n+\n+            final Iterator typeParamsIt \u003d typeParams.iterator();\n+            while (typeParamsIt.hasNext()) {\n+                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n+                    \"\u003c\"\n+                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                    + \"\u003e\");\n+            }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                boolean aReportExpectedTags)\n    {\n        List params \u003d getParameters(aParent);\n        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                Iterator typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        .equals(tag.getArg1().substring(\n                            1, tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                    .getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n                    \"\u003c\"\n                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List, aParams-List, aReportExpectedTags-boolean]",
            "newValue": "[aTags-List(modifiers-final), aParent-DetailAST(modifiers-final), aReportExpectedTags-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix for 1185501.\n",
          "commitDate": "05/06/05 3:36 PM",
          "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
          "commitAuthor": "Michael Studman",
          "commitDateOld": "11/05/05 9:48 AM",
          "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 25.24,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,73 @@\n-    private void checkParamTags(List aTags, List aParams,\n+    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                 boolean aReportExpectedTags)\n     {\n+        List params \u003d getParameters(aParent);\n+        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n-            // Loop looking for matching param\n             boolean found \u003d false;\n-            final Iterator paramIt \u003d aParams.iterator();\n+\n+            // Loop looking for matching param\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n+            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n+                // Loop looking for matching type param\n+                Iterator typeParamsIt \u003d typeParams.iterator();\n+                while (typeParamsIt.hasNext()) {\n+                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                        .equals(tag.getArg1().substring(\n+                            1, tag.getArg1().length() - 1)))\n+                    {\n+                        found \u003d true;\n+                        typeParamsIt.remove();\n+                        break;\n+                    }\n+                }\n+\n+            }\n+\n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                     .getArg1());\n             }\n         }\n \n-        // Now dump out all parameters without tags :- unless\n+        // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator paramIt \u003d aParams.iterator();\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n+\n+            final Iterator typeParamsIt \u003d typeParams.iterator();\n+            while (typeParamsIt.hasNext()) {\n+                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n+                    \"\u003c\"\n+                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                    + \"\u003e\");\n+            }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                boolean aReportExpectedTags)\n    {\n        List params \u003d getParameters(aParent);\n        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                Iterator typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        .equals(tag.getArg1().substring(\n                            1, tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                    .getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n                    \"\u003c\"\n                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Fix for 1185501.\n",
          "commitDate": "05/06/05 3:36 PM",
          "commitName": "06c32930c34e2b10b5926883c29a4a20fe6ecf05",
          "commitAuthor": "Michael Studman",
          "commitDateOld": "11/05/05 9:48 AM",
          "commitNameOld": "e27489c7721909245ea5055eac3b9c7c659081f6",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 25.24,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,73 @@\n-    private void checkParamTags(List aTags, List aParams,\n+    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                 boolean aReportExpectedTags)\n     {\n+        List params \u003d getParameters(aParent);\n+        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n+\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n-            // Loop looking for matching param\n             boolean found \u003d false;\n-            final Iterator paramIt \u003d aParams.iterator();\n+\n+            // Loop looking for matching param\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n+            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n+                // Loop looking for matching type param\n+                Iterator typeParamsIt \u003d typeParams.iterator();\n+                while (typeParamsIt.hasNext()) {\n+                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                        .equals(tag.getArg1().substring(\n+                            1, tag.getArg1().length() - 1)))\n+                    {\n+                        found \u003d true;\n+                        typeParamsIt.remove();\n+                        break;\n+                    }\n+                }\n+\n+            }\n+\n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                     .getArg1());\n             }\n         }\n \n-        // Now dump out all parameters without tags :- unless\n+        // Now dump out all type parameters/parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n-            final Iterator paramIt \u003d aParams.iterator();\n+            final Iterator paramIt \u003d params.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n+\n+            final Iterator typeParamsIt \u003d typeParams.iterator();\n+            while (typeParamsIt.hasNext()) {\n+                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n+                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n+                    \"\u003c\"\n+                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n+                    + \"\u003e\");\n+            }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(final List aTags, final DetailAST aParent,\n                                boolean aReportExpectedTags)\n    {\n        List params \u003d getParameters(aParent);\n        List typeParams \u003d CheckUtils.getTypeParameters(aParent);\n\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            boolean found \u003d false;\n\n            // Loop looking for matching param\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            if (tag.getArg1().startsWith(\"\u003c\") \u0026\u0026 tag.getArg1().endsWith(\"\u003e\")) {\n                // Loop looking for matching type param\n                Iterator typeParamsIt \u003d typeParams.iterator();\n                while (typeParamsIt.hasNext()) {\n                    final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                        .equals(tag.getArg1().substring(\n                            1, tag.getArg1().length() - 1)))\n                    {\n                        found \u003d true;\n                        typeParamsIt.remove();\n                        break;\n                    }\n                }\n\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\", \"@param\", tag\n                    .getArg1());\n            }\n        }\n\n        // Now dump out all type parameters/parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d params.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n\n            final Iterator typeParamsIt \u003d typeParams.iterator();\n            while (typeParamsIt.hasNext()) {\n                final DetailAST typeParam \u003d (DetailAST) typeParamsIt.next();\n                log(typeParam, \"javadoc.expectedTag\", \"@param\",\n                    \"\u003c\"\n                    + typeParam.findFirstToken(TokenTypes.IDENT).getText()\n                    + \"\u003e\");\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List, aParams-List, aReportExpectedTags-boolean]",
            "newValue": "[aTags-List(modifiers-final), aParent-DetailAST(modifiers-final), aReportExpectedTags-boolean]"
          }
        }
      ]
    },
    "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b": {
      "type": "Ybodychange",
      "commitMessage": "Checnge some check to use new API (I hate wrapping :)\n",
      "commitDate": "07/01/04 7:30 PM",
      "commitName": "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "08/12/03 10:58 AM",
      "commitNameOld": "72be23f288369fdd9e562999bb9b0e2ff646c897",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 30.36,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n     private void checkParamTags(List aTags, List aParams,\n                                 boolean aReportExpectedTags)\n     {\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             // Loop looking for matching param\n             boolean found \u003d false;\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\",\n                               \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all parameters without tags :- unless\n         // the user has chosen to suppress these problems\n         if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n-                log(param.getLineNo(), param.getColumnNo(),\n-                    \"javadoc.expectedTag\", \"@param\", param.getText());\n+                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(List aTags, List aParams,\n                                boolean aReportExpectedTags)\n    {\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param, \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "72be23f288369fdd9e562999bb9b0e2ff646c897": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix for 855839 - JavadocMethod does not correctly treat {@inheritDoc}.\n",
      "commitDate": "08/12/03 10:58 AM",
      "commitName": "72be23f288369fdd9e562999bb9b0e2ff646c897",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix for 855839 - JavadocMethod does not correctly treat {@inheritDoc}.\n",
          "commitDate": "08/12/03 10:58 AM",
          "commitName": "72be23f288369fdd9e562999bb9b0e2ff646c897",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "23/11/03 10:45 PM",
          "commitNameOld": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 14.51,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-    private void checkParamTags(List aTags, List aParams)\n+    private void checkParamTags(List aTags, List aParams,\n+                                boolean aReportExpectedTags)\n     {\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             // Loop looking for matching param\n             boolean found \u003d false;\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\",\n                               \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all parameters without tags :- unless\n         // the user has chosen to suppress these problems\n-        if (!mAllowMissingParamTags) {\n+        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param.getLineNo(), param.getColumnNo(),\n                     \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(List aTags, List aParams,\n                                boolean aReportExpectedTags)\n    {\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param.getLineNo(), param.getColumnNo(),\n                    \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {
            "oldValue": "[aTags-List, aParams-List]",
            "newValue": "[aTags-List, aParams-List, aReportExpectedTags-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix for 855839 - JavadocMethod does not correctly treat {@inheritDoc}.\n",
          "commitDate": "08/12/03 10:58 AM",
          "commitName": "72be23f288369fdd9e562999bb9b0e2ff646c897",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "23/11/03 10:45 PM",
          "commitNameOld": "8fb2acd39b7db6223486f5e06126c7f0a2642a72",
          "commitAuthorOld": "Lars Kühne",
          "daysBetweenCommits": 14.51,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n-    private void checkParamTags(List aTags, List aParams)\n+    private void checkParamTags(List aTags, List aParams,\n+                                boolean aReportExpectedTags)\n     {\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             // Loop looking for matching param\n             boolean found \u003d false;\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\",\n                               \"@param\", tag.getArg1());\n             }\n         }\n \n         // Now dump out all parameters without tags :- unless\n         // the user has chosen to suppress these problems\n-        if (!mAllowMissingParamTags) {\n+        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 log(param.getLineNo(), param.getColumnNo(),\n                     \"javadoc.expectedTag\", \"@param\", param.getText());\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void checkParamTags(List aTags, List aParams,\n                                boolean aReportExpectedTags)\n    {\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags \u0026\u0026 aReportExpectedTags) {\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param.getLineNo(), param.getColumnNo(),\n                    \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "04ac5dd87c11a2bf7b908b45bbca7933382df515": {
      "type": "Yfilerename",
      "commitMessage": "Moving another Javadoc check to see what is involved.\nA suprisingly small amount. Love the Eclipse refactoring\nsupport having the smarts to do the CVS operations.\n",
      "commitDate": "03/06/03 6:51 AM",
      "commitName": "04ac5dd87c11a2bf7b908b45bbca7933382df515",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "03/06/03 6:33 AM",
      "commitNameOld": "2ef6dc6a43ede89c5b5b9091dee83e1e58bb5edc",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void checkParamTags(List aTags, List aParams)\n    {\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags) {\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param.getLineNo(), param.getColumnNo(),\n                    \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java"
      }
    },
    "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49": {
      "type": "Ybodychange",
      "commitMessage": "Patch from Simon Kitching to allow more configuration control over the\nJavadocMethodCheck.\n",
      "commitDate": "11/03/03 2:49 PM",
      "commitName": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/02/03 6:50 PM",
      "commitNameOld": "04b0bd64047e8eee752405a01de145b67f5fb845",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 23.83,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n     private void checkParamTags(List aTags, List aParams)\n     {\n         // Loop over the tags, checking to see they exist in the params.\n         final ListIterator tagIt \u003d aTags.listIterator();\n         while (tagIt.hasNext()) {\n             final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n \n             if (!tag.isParamTag()) {\n                 continue;\n             }\n \n             tagIt.remove();\n \n             // Loop looking for matching param\n             boolean found \u003d false;\n             final Iterator paramIt \u003d aParams.iterator();\n             while (paramIt.hasNext()) {\n                 final DetailAST param \u003d (DetailAST) paramIt.next();\n                 if (param.getText().equals(tag.getArg1())) {\n                     found \u003d true;\n                     paramIt.remove();\n                     break;\n                 }\n             }\n \n             // Handle extra JavadocTag\n             if (!found) {\n                 log(tag.getLineNo(), \"javadoc.unusedTag\",\n                               \"@param\", tag.getArg1());\n             }\n         }\n \n-        // Now dump out all parameters without tags\n-        final Iterator paramIt \u003d aParams.iterator();\n-        while (paramIt.hasNext()) {\n-            final DetailAST param \u003d (DetailAST) paramIt.next();\n-            log(param.getLineNo(), param.getColumnNo(),\n-                \"javadoc.expectedTag\", \"@param\", param.getText());\n+        // Now dump out all parameters without tags :- unless\n+        // the user has chosen to suppress these problems\n+        if (!mAllowMissingParamTags) {\n+            final Iterator paramIt \u003d aParams.iterator();\n+            while (paramIt.hasNext()) {\n+                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                log(param.getLineNo(), param.getColumnNo(),\n+                    \"javadoc.expectedTag\", \"@param\", param.getText());\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(List aTags, List aParams)\n    {\n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags :- unless\n        // the user has chosen to suppress these problems\n        if (!mAllowMissingParamTags) {\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                log(param.getLineNo(), param.getColumnNo(),\n                    \"javadoc.expectedTag\", \"@param\", param.getText());\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java",
      "extendedDetails": {}
    },
    "c75f97dbc2123f550a1acc64886a8bebf4b888cf": {
      "type": "Yintroduced",
      "commitMessage": "Javadoc method check\n",
      "commitDate": "05/11/02 5:13 AM",
      "commitName": "c75f97dbc2123f550a1acc64886a8bebf4b888cf",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,40 @@\n+    private void checkParamTags(List aTags, List aParams)\n+    {        \n+        // Loop over the tags, checking to see they exist in the params.\n+        final ListIterator tagIt \u003d aTags.listIterator();\n+        while (tagIt.hasNext()) {\n+            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n+\n+            if (!tag.isParamTag()) {\n+                continue;\n+            }\n+\n+            tagIt.remove();\n+\n+            // Loop looking for matching param\n+            boolean found \u003d false;\n+            final Iterator paramIt \u003d aParams.iterator();\n+            while (paramIt.hasNext()) {\n+                final DetailAST param \u003d (DetailAST) paramIt.next();\n+                if (param.getText().equals(tag.getArg1())) {\n+                    found \u003d true;\n+                    paramIt.remove();\n+                    break;\n+                }\n+            }\n+\n+            // Handle extra JavadocTag\n+            if (!found) {\n+                log(tag.getLineNo(), \"javadoc.unusedTag\",\n+                              \"@param\", tag.getArg1());\n+            }\n+        }\n+\n+        // Now dump out all parameters without tags\n+        final Iterator paramIt \u003d aParams.iterator();\n+        while (paramIt.hasNext()) {\n+            final DetailAST param \u003d (DetailAST) paramIt.next();\n+            log(param.getLineNo(), param.getColumnNo(),\n+                \"javadoc.expectedTag\", \"@param\", param.getText());\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkParamTags(List aTags, List aParams)\n    {        \n        // Loop over the tags, checking to see they exist in the params.\n        final ListIterator tagIt \u003d aTags.listIterator();\n        while (tagIt.hasNext()) {\n            final JavadocTag tag \u003d (JavadocTag) tagIt.next();\n\n            if (!tag.isParamTag()) {\n                continue;\n            }\n\n            tagIt.remove();\n\n            // Loop looking for matching param\n            boolean found \u003d false;\n            final Iterator paramIt \u003d aParams.iterator();\n            while (paramIt.hasNext()) {\n                final DetailAST param \u003d (DetailAST) paramIt.next();\n                if (param.getText().equals(tag.getArg1())) {\n                    found \u003d true;\n                    paramIt.remove();\n                    break;\n                }\n            }\n\n            // Handle extra JavadocTag\n            if (!found) {\n                log(tag.getLineNo(), \"javadoc.unusedTag\",\n                              \"@param\", tag.getArg1());\n            }\n        }\n\n        // Now dump out all parameters without tags\n        final Iterator paramIt \u003d aParams.iterator();\n        while (paramIt.hasNext()) {\n            final DetailAST param \u003d (DetailAST) paramIt.next();\n            log(param.getLineNo(), param.getColumnNo(),\n                \"javadoc.expectedTag\", \"@param\", param.getText());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java"
    }
  }
}