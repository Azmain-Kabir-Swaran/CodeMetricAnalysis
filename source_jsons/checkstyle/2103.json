{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NewlineAtEndOfFileCheck.java",
  "functionName": "endsWithNewline",
  "functionId": "endsWithNewline___file-RandomAccessFile__separator-LineSeparatorOption",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
  "functionStartLine": 226,
  "functionEndLine": 244,
  "numCommitsSeen": 108,
  "timeTaken": 2366,
  "changeHistory": [
    "46a01cb567dd9cd493871d35a963a1a71d94f867",
    "de50d3465849b83d25910590e1f5f39a25fe6e2c",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "e1761d121db0df2f9e31d7f3ab4337c9584adc71",
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5"
  ],
  "changeHistoryShort": {
    "46a01cb567dd9cd493871d35a963a1a71d94f867": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "de50d3465849b83d25910590e1f5f39a25fe6e2c": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "e1761d121db0df2f9e31d7f3ab4337c9584adc71": "Ybodychange",
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "46a01cb567dd9cd493871d35a963a1a71d94f867": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Issue #4074: fix overlap between lf and crlf at file end\n",
      "commitDate": "30/01/20 2:42 PM",
      "commitName": "46a01cb567dd9cd493871d35a963a1a71d94f867",
      "commitAuthor": "Andrei Paikin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #4074: fix overlap between lf and crlf at file end\n",
          "commitDate": "30/01/20 2:42 PM",
          "commitName": "46a01cb567dd9cd493871d35a963a1a71d94f867",
          "commitAuthor": "Andrei Paikin",
          "commitDateOld": "01/01/20 4:38 PM",
          "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 28.92,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n+    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n             throws IOException {\n         final boolean result;\n-        final int len \u003d lineSeparator.length();\n-        if (randomAccessFile.length() \u003c len) {\n+        final int len \u003d separator.length();\n+        if (file.length() \u003c len) {\n             result \u003d false;\n         }\n         else {\n-            randomAccessFile.seek(randomAccessFile.length() - len);\n+            file.seek(file.length() - len);\n             final byte[] lastBytes \u003d new byte[len];\n-            final int readBytes \u003d randomAccessFile.read(lastBytes);\n+            final int readBytes \u003d file.read(lastBytes);\n             if (readBytes !\u003d len) {\n                 throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                         + readBytes);\n             }\n-            result \u003d lineSeparator.matches(lastBytes);\n+            result \u003d separator.matches(lastBytes);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n            throws IOException {\n        final boolean result;\n        final int len \u003d separator.length();\n        if (file.length() \u003c len) {\n            result \u003d false;\n        }\n        else {\n            file.seek(file.length() - len);\n            final byte[] lastBytes \u003d new byte[len];\n            final int readBytes \u003d file.read(lastBytes);\n            if (readBytes !\u003d len) {\n                throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                        + readBytes);\n            }\n            result \u003d separator.matches(lastBytes);\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[randomAccessFile-RandomAccessFile]",
            "newValue": "[file-RandomAccessFile, separator-LineSeparatorOption]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Issue #4074: fix overlap between lf and crlf at file end\n",
          "commitDate": "30/01/20 2:42 PM",
          "commitName": "46a01cb567dd9cd493871d35a963a1a71d94f867",
          "commitAuthor": "Andrei Paikin",
          "commitDateOld": "01/01/20 4:38 PM",
          "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 28.92,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n+    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n             throws IOException {\n         final boolean result;\n-        final int len \u003d lineSeparator.length();\n-        if (randomAccessFile.length() \u003c len) {\n+        final int len \u003d separator.length();\n+        if (file.length() \u003c len) {\n             result \u003d false;\n         }\n         else {\n-            randomAccessFile.seek(randomAccessFile.length() - len);\n+            file.seek(file.length() - len);\n             final byte[] lastBytes \u003d new byte[len];\n-            final int readBytes \u003d randomAccessFile.read(lastBytes);\n+            final int readBytes \u003d file.read(lastBytes);\n             if (readBytes !\u003d len) {\n                 throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                         + readBytes);\n             }\n-            result \u003d lineSeparator.matches(lastBytes);\n+            result \u003d separator.matches(lastBytes);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n            throws IOException {\n        final boolean result;\n        final int len \u003d separator.length();\n        if (file.length() \u003c len) {\n            result \u003d false;\n        }\n        else {\n            file.seek(file.length() - len);\n            final byte[] lastBytes \u003d new byte[len];\n            final int readBytes \u003d file.read(lastBytes);\n            if (readBytes !\u003d len) {\n                throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                        + readBytes);\n            }\n            result \u003d separator.matches(lastBytes);\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #4074: fix overlap between lf and crlf at file end\n",
          "commitDate": "30/01/20 2:42 PM",
          "commitName": "46a01cb567dd9cd493871d35a963a1a71d94f867",
          "commitAuthor": "Andrei Paikin",
          "commitDateOld": "01/01/20 4:38 PM",
          "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 28.92,
          "commitsBetweenForRepo": 67,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n+    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n             throws IOException {\n         final boolean result;\n-        final int len \u003d lineSeparator.length();\n-        if (randomAccessFile.length() \u003c len) {\n+        final int len \u003d separator.length();\n+        if (file.length() \u003c len) {\n             result \u003d false;\n         }\n         else {\n-            randomAccessFile.seek(randomAccessFile.length() - len);\n+            file.seek(file.length() - len);\n             final byte[] lastBytes \u003d new byte[len];\n-            final int readBytes \u003d randomAccessFile.read(lastBytes);\n+            final int readBytes \u003d file.read(lastBytes);\n             if (readBytes !\u003d len) {\n                 throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                         + readBytes);\n             }\n-            result \u003d lineSeparator.matches(lastBytes);\n+            result \u003d separator.matches(lastBytes);\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static boolean endsWithNewline(RandomAccessFile file, LineSeparatorOption separator)\n            throws IOException {\n        final boolean result;\n        final int len \u003d separator.length();\n        if (file.length() \u003c len) {\n            result \u003d false;\n        }\n        else {\n            file.seek(file.length() - len);\n            final byte[] lastBytes \u003d new byte[len];\n            final int readBytes \u003d file.read(lastBytes);\n            if (readBytes !\u003d len) {\n                throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                        + readBytes);\n            }\n            result \u003d separator.matches(lastBytes);\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "de50d3465849b83d25910590e1f5f39a25fe6e2c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3496: Enforce ReturnCount max\u003d1 in com.puppycrawl.tools.checkstyle.checks and com.puppycrawl.tools.checkstyle\n",
      "commitDate": "21/04/17 7:14 PM",
      "commitName": "de50d3465849b83d25910590e1f5f39a25fe6e2c",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": "26/02/17 7:25 PM",
      "commitNameOld": "ce21086e087661553f3a774c38362327ee88996a",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 53.95,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,19 @@\n     private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n             throws IOException {\n+        final boolean result;\n         final int len \u003d lineSeparator.length();\n         if (randomAccessFile.length() \u003c len) {\n-            return false;\n+            result \u003d false;\n         }\n-        randomAccessFile.seek(randomAccessFile.length() - len);\n-        final byte[] lastBytes \u003d new byte[len];\n-        final int readBytes \u003d randomAccessFile.read(lastBytes);\n-        if (readBytes !\u003d len) {\n-            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n-                    + readBytes);\n+        else {\n+            randomAccessFile.seek(randomAccessFile.length() - len);\n+            final byte[] lastBytes \u003d new byte[len];\n+            final int readBytes \u003d randomAccessFile.read(lastBytes);\n+            if (readBytes !\u003d len) {\n+                throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n+                        + readBytes);\n+            }\n+            result \u003d lineSeparator.matches(lastBytes);\n         }\n-        return lineSeparator.matches(lastBytes);\n+        return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n            throws IOException {\n        final boolean result;\n        final int len \u003d lineSeparator.length();\n        if (randomAccessFile.length() \u003c len) {\n            result \u003d false;\n        }\n        else {\n            randomAccessFile.seek(randomAccessFile.length() - len);\n            final byte[] lastBytes \u003d new byte[len];\n            final int readBytes \u003d randomAccessFile.read(lastBytes);\n            if (readBytes !\u003d len) {\n                throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                        + readBytes);\n            }\n            result \u003d lineSeparator.matches(lastBytes);\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n+    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n         throws IOException\n     {\n-        final int len \u003d mLineSeparator.length();\n-        if (aRandomAccessFile.length() \u003c len) {\n+        final int len \u003d lineSeparator.length();\n+        if (randomAccessFile.length() \u003c len) {\n             return false;\n         }\n-        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n+        randomAccessFile.seek(randomAccessFile.length() - len);\n         final byte[] lastBytes \u003d new byte[len];\n-        final int readBytes \u003d aRandomAccessFile.read(lastBytes);\n+        final int readBytes \u003d randomAccessFile.read(lastBytes);\n         if (readBytes !\u003d len) {\n             throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                     + readBytes);\n         }\n-        return mLineSeparator.matches(lastBytes);\n+        return lineSeparator.matches(lastBytes);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n        throws IOException\n    {\n        final int len \u003d lineSeparator.length();\n        if (randomAccessFile.length() \u003c len) {\n            return false;\n        }\n        randomAccessFile.seek(randomAccessFile.length() - len);\n        final byte[] lastBytes \u003d new byte[len];\n        final int readBytes \u003d randomAccessFile.read(lastBytes);\n        if (readBytes !\u003d len) {\n            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                    + readBytes);\n        }\n        return lineSeparator.matches(lastBytes);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {
            "oldValue": "[aRandomAccessFile-RandomAccessFile]",
            "newValue": "[randomAccessFile-RandomAccessFile]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "13/01/15 11:20 AM",
          "commitNameOld": "501b7c5240705c6db756608618fdcf58189e807e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 5.8,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n+    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n         throws IOException\n     {\n-        final int len \u003d mLineSeparator.length();\n-        if (aRandomAccessFile.length() \u003c len) {\n+        final int len \u003d lineSeparator.length();\n+        if (randomAccessFile.length() \u003c len) {\n             return false;\n         }\n-        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n+        randomAccessFile.seek(randomAccessFile.length() - len);\n         final byte[] lastBytes \u003d new byte[len];\n-        final int readBytes \u003d aRandomAccessFile.read(lastBytes);\n+        final int readBytes \u003d randomAccessFile.read(lastBytes);\n         if (readBytes !\u003d len) {\n             throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                     + readBytes);\n         }\n-        return mLineSeparator.matches(lastBytes);\n+        return lineSeparator.matches(lastBytes);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean endsWithNewline(RandomAccessFile randomAccessFile)\n        throws IOException\n    {\n        final int len \u003d lineSeparator.length();\n        if (randomAccessFile.length() \u003c len) {\n            return false;\n        }\n        randomAccessFile.seek(randomAccessFile.length() - len);\n        final byte[] lastBytes \u003d new byte[len];\n        final int readBytes \u003d randomAccessFile.read(lastBytes);\n        if (readBytes !\u003d len) {\n            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                    + readBytes);\n        }\n        return lineSeparator.matches(lastBytes);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n        throws IOException\n    {\n        final int len \u003d mLineSeparator.length();\n        if (aRandomAccessFile.length() \u003c len) {\n            return false;\n        }\n        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n        final byte lastBytes[] \u003d new byte[len];\n        final int readBytes \u003d aRandomAccessFile.read(lastBytes);\n        if (readBytes !\u003d len) {\n            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                    + readBytes);\n        }\n        return mLineSeparator.matches(lastBytes);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java"
      }
    },
    "e1761d121db0df2f9e31d7f3ab4337c9584adc71": {
      "type": "Ybodychange",
      "commitMessage": "fix a couple of FindBugs errors\n",
      "commitDate": "18/03/09 4:44 AM",
      "commitName": "e1761d121db0df2f9e31d7f3ab4337c9584adc71",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "09/11/08 1:37 AM",
      "commitNameOld": "13b7c634337e38d20daa92ca9d5e069a2e72ec55",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,16 @@\n     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n         throws IOException\n     {\n         final int len \u003d mLineSeparator.length();\n         if (aRandomAccessFile.length() \u003c len) {\n             return false;\n         }\n         aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n         final byte lastBytes[] \u003d new byte[len];\n-        aRandomAccessFile.read(lastBytes);\n+        final int readBytes \u003d aRandomAccessFile.read(lastBytes);\n+        if (readBytes !\u003d len) {\n+            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n+                    + readBytes);\n+        }\n         return mLineSeparator.matches(lastBytes);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n        throws IOException\n    {\n        final int len \u003d mLineSeparator.length();\n        if (aRandomAccessFile.length() \u003c len) {\n            return false;\n        }\n        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n        final byte lastBytes[] \u003d new byte[len];\n        final int readBytes \u003d aRandomAccessFile.read(lastBytes);\n        if (readBytes !\u003d len) {\n            throw new IOException(\"Unable to read \" + len + \" bytes, got \"\n                    + readBytes);\n        }\n        return mLineSeparator.matches(lastBytes);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java",
      "extendedDetails": {}
    },
    "59aa156470fbdf19a54382fb2caaca2a95f4dbd5": {
      "type": "Yintroduced",
      "commitMessage": "added NewlineAtEndOfFile check, contributed by Christopher Lenz\n",
      "commitDate": "06/04/03 5:16 AM",
      "commitName": "59aa156470fbdf19a54382fb2caaca2a95f4dbd5",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,12 @@\n+    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n+        throws IOException\n+    {\n+        final int len \u003d mLineSeparator.length();\n+        if (aRandomAccessFile.length() \u003c len) {\n+            return false;\n+        }\n+        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n+        final byte lastBytes[] \u003d new byte[len];\n+        aRandomAccessFile.read(lastBytes);\n+        return mLineSeparator.matches(lastBytes);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)\n        throws IOException\n    {\n        final int len \u003d mLineSeparator.length();\n        if (aRandomAccessFile.length() \u003c len) {\n            return false;\n        }\n        aRandomAccessFile.seek(aRandomAccessFile.length() - len);\n        final byte lastBytes[] \u003d new byte[len];\n        aRandomAccessFile.read(lastBytes);\n        return mLineSeparator.matches(lastBytes);\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java"
    }
  }
}