{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "getFieldWithoutThis",
  "functionId": "getFieldWithoutThis___ast-DetailAST__parentType-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 458,
  "functionEndLine": 475,
  "numCommitsSeen": 131,
  "timeTaken": 3371,
  "changeHistory": [
    "c9b404f341509024532aa80847420d57a659b7c6",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
    "6c04cd63af392376159dc7aae41d85bbc348e96d",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
    "99ce97725cd037d152c571e5ff58eac9247d072d",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20"
  ],
  "changeHistoryShort": {
    "c9b404f341509024532aa80847420d57a659b7c6": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": "Ybodychange",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Ymultichange(Yrename,Ybodychange)",
    "6c04cd63af392376159dc7aae41d85bbc348e96d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": "Ybodychange",
    "99ce97725cd037d152c571e5ff58eac9247d072d": "Ybodychange",
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": "Ybodychange",
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c9b404f341509024532aa80847420d57a659b7c6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5008: Decreased ignored pitest coding mutations to 2\n",
      "commitDate": "16/07/19 6:40 PM",
      "commitName": "c9b404f341509024532aa80847420d57a659b7c6",
      "commitAuthor": "Emil Bremer Orloff",
      "commitDateOld": "07/05/19 4:48 AM",
      "commitNameOld": "45e7e369f5be02806597bbd1a61f64c50d90bae2",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 70.58,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n     private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtil.getSurroundingScope(ast) \u003d\u003d null;\n-        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n-                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n-                \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n                 \u0026\u0026 !isDeclarationToken(parentType)\n                 \u0026\u0026 !isLambdaParameter(ast)) {\n             final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n \n             if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                 frame \u003d getClassFrameWhereViolationIsFound(ast);\n             }\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtil.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)\n                \u0026\u0026 !isLambdaParameter(ast)) {\n            final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n\n            if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                frame \u003d getClassFrameWhereViolationIsFound(ast);\n            }\n        }\n        return frame;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n-        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n+        final boolean importOrPackage \u003d ScopeUtil.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n                 \u0026\u0026 !isDeclarationToken(parentType)\n                 \u0026\u0026 !isLambdaParameter(ast)) {\n             final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n \n             if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                 frame \u003d getClassFrameWhereViolationIsFound(ast);\n             }\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtil.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)\n                \u0026\u0026 !isLambdaParameter(ast)) {\n            final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n\n            if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                frame \u003d getClassFrameWhereViolationIsFound(ast);\n            }\n        }\n        return frame;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "bb05231428d62fa6e253fa3f55a47335c958f4b4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4207: Fixed false positives from RequireThis for lambdas\n",
      "commitDate": "23/05/17 6:02 AM",
      "commitName": "bb05231428d62fa6e253fa3f55a47335c958f4b4",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": "11/05/17 2:56 PM",
      "commitNameOld": "073c370de2e65fc346b51ef09763ecb30b5cd14f",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.63,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n-                \u0026\u0026 !isDeclarationToken(parentType)) {\n+                \u0026\u0026 !isDeclarationToken(parentType)\n+                \u0026\u0026 !isLambdaParameter(ast)) {\n             final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n \n             if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                 frame \u003d getClassFrameWhereViolationIsFound(ast);\n             }\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)\n                \u0026\u0026 !isLambdaParameter(ast)) {\n            final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n\n            if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                frame \u003d getClassFrameWhereViolationIsFound(ast);\n            }\n        }\n        return frame;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3335: prevented static variables being checked for RequireThis (#3355)\n\n",
      "commitDate": "25/07/16 9:51 PM",
      "commitName": "81c030e322201085e463b9cc97e3e8dbce0e38d4",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/07/16 9:56 AM",
      "commitNameOld": "0a85131b141a185ec3d7bb92df8ccbd92d38570e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 20.5,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n     private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n                 \u0026\u0026 !isDeclarationToken(parentType)) {\n-            frame \u003d getClassFrameWhereViolationIsFound(ast);\n+            final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n+\n+            if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n+                frame \u003d getClassFrameWhereViolationIsFound(ast);\n+            }\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n            final AbstractFrame fieldFrame \u003d findClassFrame(ast, false);\n\n            if (fieldFrame !\u003d null \u0026\u0026 ((ClassFrame) fieldFrame).hasInstanceMember(ast)) {\n                frame \u003d getClassFrameWhereViolationIsFound(ast);\n            }\n        }\n        return frame;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": "04/03/16 6:34 AM",
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
          "commitDate": "04/03/16 6:34 AM",
          "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "19/02/16 5:38 AM",
          "commitNameOld": "f6bec165c9c6b6d8cc430cb0694dd42ccb0b7f69",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 14.04,
          "commitsBetweenForRepo": 54,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private AbstractFrame processField(DetailAST ast, int parentType) {\n+    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n                 \u0026\u0026 !isDeclarationToken(parentType)) {\n-            frame \u003d checkField(ast);\n+            frame \u003d getClassFrameWhereViolationIsFound(ast);\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n            frame \u003d getClassFrameWhereViolationIsFound(ast);\n        }\n        return frame;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {
            "oldValue": "processField",
            "newValue": "getFieldWithoutThis"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
          "commitDate": "04/03/16 6:34 AM",
          "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
          "commitAuthor": "Andrei Selkin",
          "commitDateOld": "19/02/16 5:38 AM",
          "commitNameOld": "f6bec165c9c6b6d8cc430cb0694dd42ccb0b7f69",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 14.04,
          "commitsBetweenForRepo": 54,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private AbstractFrame processField(DetailAST ast, int parentType) {\n+    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n         AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n                 \u0026\u0026 !isDeclarationToken(parentType)) {\n-            frame \u003d checkField(ast);\n+            frame \u003d getClassFrameWhereViolationIsFound(ast);\n         }\n         return frame;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractFrame getFieldWithoutThis(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n            frame \u003d getClassFrameWhereViolationIsFound(ast);\n        }\n        return frame;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "6c04cd63af392376159dc7aae41d85bbc348e96d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Issue #2239: Extend RequireThis check message\n",
      "commitDate": "24/12/15 1:56 PM",
      "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
      "commitAuthor": "Vladislav Lisetskiy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Issue #2239: Extend RequireThis check message\n",
          "commitDate": "24/12/15 1:56 PM",
          "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "15/11/15 11:01 PM",
          "commitNameOld": "11639b8437306390798d85fc54422b4559f553c3",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 38.62,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-    private void processField(DetailAST ast, int parentType) {\n+    private AbstractFrame processField(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n+        AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n-                \u0026\u0026 !isDeclarationToken(parentType)\n-                \u0026\u0026 isClassField(ast)) {\n-            log(ast, MSG_VARIABLE, ast.getText());\n+                \u0026\u0026 !isDeclarationToken(parentType)) {\n+            frame \u003d checkField(ast);\n         }\n+        return frame;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractFrame processField(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n            frame \u003d checkField(ast);\n        }\n        return frame;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "AbstractFrame"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2239: Extend RequireThis check message\n",
          "commitDate": "24/12/15 1:56 PM",
          "commitName": "6c04cd63af392376159dc7aae41d85bbc348e96d",
          "commitAuthor": "Vladislav Lisetskiy",
          "commitDateOld": "15/11/15 11:01 PM",
          "commitNameOld": "11639b8437306390798d85fc54422b4559f553c3",
          "commitAuthorOld": "Vladislav Lisetskiy",
          "daysBetweenCommits": 38.62,
          "commitsBetweenForRepo": 152,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-    private void processField(DetailAST ast, int parentType) {\n+    private AbstractFrame processField(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n+        AbstractFrame frame \u003d null;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n-                \u0026\u0026 !isDeclarationToken(parentType)\n-                \u0026\u0026 isClassField(ast)) {\n-            log(ast, MSG_VARIABLE, ast.getText());\n+                \u0026\u0026 !isDeclarationToken(parentType)) {\n+            frame \u003d checkField(ast);\n         }\n+        return frame;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private AbstractFrame processField(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n        AbstractFrame frame \u003d null;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n            frame \u003d checkField(ast);\n        }\n        return frame;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f52306ff7799ea2b2e4d99fba7040a11b186d68a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2240: Fix false negative in RequireThisCheck\n",
      "commitDate": "15/11/15 6:23 AM",
      "commitName": "f52306ff7799ea2b2e4d99fba7040a11b186d68a",
      "commitAuthor": "Vladislav Lisetskiy",
      "commitDateOld": "07/11/15 5:12 PM",
      "commitNameOld": "4424370783f1c41fc1e146f554468f89e8f0e88b",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 7.55,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,15 @@\n     private void processField(DetailAST ast, int parentType) {\n         final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n         final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n         final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n \n         if (!importOrPackage\n                 \u0026\u0026 !methodNameInMethodCall\n                 \u0026\u0026 !typeName\n-                \u0026\u0026 !isDeclarationToken(parentType)) {\n-\n-            final String name \u003d ast.getText();\n-\n-            if (isClassField(name)) {\n-                log(ast, MSG_VARIABLE, name);\n-            }\n+                \u0026\u0026 !isDeclarationToken(parentType)\n+                \u0026\u0026 isClassField(ast)) {\n+            log(ast, MSG_VARIABLE, ast.getText());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processField(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)\n                \u0026\u0026 isClassField(ast)) {\n            log(ast, MSG_VARIABLE, ast.getText());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "99ce97725cd037d152c571e5ff58eac9247d072d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: ReturnCount violation fixed for RequireThisCheck\n",
      "commitDate": "27/08/15 10:56 PM",
      "commitName": "99ce97725cd037d152c571e5ff58eac9247d072d",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,19 @@\n     private void processField(DetailAST ast, int parentType) {\n-        if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n-            // it is not a class or interface it\u0027s\n-            // either import or package\n-            // we shouldn\u0027t checks this\n-            return;\n-        }\n+        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n+        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n+                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n+        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n+                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n \n-        if (parentType \u003d\u003d TokenTypes.DOT\n-                \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n-            // it\u0027s the method name in a method call; no problem\n-            return;\n-        }\n-        if (parentType \u003d\u003d TokenTypes.TYPE\n-                || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n-            // it\u0027s a type name; no problem\n-            return;\n-        }\n-        if (isDeclarationToken(parentType)) {\n-            // it\u0027s being declared; no problem\n-            return;\n-        }\n+        if (!importOrPackage\n+                \u0026\u0026 !methodNameInMethodCall\n+                \u0026\u0026 !typeName\n+                \u0026\u0026 !isDeclarationToken(parentType)) {\n \n-        final String name \u003d ast.getText();\n-        if (isClassField(name)) {\n-            log(ast, MSG_VARIABLE, name);\n+            final String name \u003d ast.getText();\n+\n+            if (isClassField(name)) {\n+                log(ast, MSG_VARIABLE, name);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processField(DetailAST ast, int parentType) {\n        final boolean importOrPackage \u003d ScopeUtils.getSurroundingScope(ast) \u003d\u003d null;\n        final boolean methodNameInMethodCall \u003d parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null;\n        final boolean typeName \u003d parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW;\n\n        if (!importOrPackage\n                \u0026\u0026 !methodNameInMethodCall\n                \u0026\u0026 !typeName\n                \u0026\u0026 !isDeclarationToken(parentType)) {\n\n            final String name \u003d ast.getText();\n\n            if (isClassField(name)) {\n                log(ast, MSG_VARIABLE, name);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "8c3e4a50749044ae3177fc4c84db9c4fd93abca2": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations partial fix\n",
      "commitDate": "25/08/15 5:12 AM",
      "commitName": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 5.37,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private void processField(DetailAST ast, int parentType) {\n         if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n             // it is not a class or interface it\u0027s\n             // either import or package\n             // we shouldn\u0027t checks this\n             return;\n         }\n \n         if (parentType \u003d\u003d TokenTypes.DOT\n                 \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n             // it\u0027s the method name in a method call; no problem\n             return;\n         }\n         if (parentType \u003d\u003d TokenTypes.TYPE\n                 || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n             // it\u0027s a type name; no problem\n             return;\n         }\n         if (isDeclarationToken(parentType)) {\n             // it\u0027s being declared; no problem\n             return;\n         }\n \n         final String name \u003d ast.getText();\n         if (isClassField(name)) {\n-            log(ast, \"require.this.variable\", name);\n+            log(ast, MSG_VARIABLE, name);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processField(DetailAST ast, int parentType) {\n        if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n            // it is not a class or interface it\u0027s\n            // either import or package\n            // we shouldn\u0027t checks this\n            return;\n        }\n\n        if (parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n            // it\u0027s the method name in a method call; no problem\n            return;\n        }\n        if (parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n            // it\u0027s a type name; no problem\n            return;\n        }\n        if (isDeclarationToken(parentType)) {\n            // it\u0027s being declared; no problem\n            return;\n        }\n\n        final String name \u003d ast.getText();\n        if (isClassField(name)) {\n            log(ast, MSG_VARIABLE, name);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20": {
      "type": "Yintroduced",
      "commitMessage": "RequireThisCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "14/06/15 9:56 PM",
      "commitName": "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,28 @@\n+    private void processField(DetailAST ast, int parentType) {\n+        if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n+            // it is not a class or interface it\u0027s\n+            // either import or package\n+            // we shouldn\u0027t checks this\n+            return;\n+        }\n+\n+        if (parentType \u003d\u003d TokenTypes.DOT\n+                \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n+            // it\u0027s the method name in a method call; no problem\n+            return;\n+        }\n+        if (parentType \u003d\u003d TokenTypes.TYPE\n+                || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n+            // it\u0027s a type name; no problem\n+            return;\n+        }\n+        if (isDeclarationToken(parentType)) {\n+            // it\u0027s being declared; no problem\n+            return;\n+        }\n+\n+        final String name \u003d ast.getText();\n+        if (isClassField(name)) {\n+            log(ast, \"require.this.variable\", name);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processField(DetailAST ast, int parentType) {\n        if (ScopeUtils.getSurroundingScope(ast) \u003d\u003d null) {\n            // it is not a class or interface it\u0027s\n            // either import or package\n            // we shouldn\u0027t checks this\n            return;\n        }\n\n        if (parentType \u003d\u003d TokenTypes.DOT\n                \u0026\u0026 ast.getPreviousSibling() !\u003d null) {\n            // it\u0027s the method name in a method call; no problem\n            return;\n        }\n        if (parentType \u003d\u003d TokenTypes.TYPE\n                || parentType \u003d\u003d TokenTypes.LITERAL_NEW) {\n            // it\u0027s a type name; no problem\n            return;\n        }\n        if (isDeclarationToken(parentType)) {\n            // it\u0027s being declared; no problem\n            return;\n        }\n\n        final String name \u003d ast.getText();\n        if (isClassField(name)) {\n            log(ast, \"require.this.variable\", name);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}