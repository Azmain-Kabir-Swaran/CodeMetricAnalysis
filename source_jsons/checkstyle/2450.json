{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnusedImportsCheck.java",
  "functionName": "collectReferencesFromJavadoc",
  "functionId": "collectReferencesFromJavadoc___textBlock-TextBlock",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
  "functionStartLine": 289,
  "functionEndLine": 303,
  "numCommitsSeen": 123,
  "timeTaken": 3031,
  "changeHistory": [
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "4acf7a786285d95d2c544f6d7daf6b31b86e0b44",
    "cc63d4f345211ba8befee3002d6b97c3898d3264",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5",
    "ce196814d857a4244a80c51d5151cc35e90b6749",
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2",
    "e196edcf8b06f6c287c06f01748dafa7fd9892e4"
  ],
  "changeHistoryShort": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "4acf7a786285d95d2c544f6d7daf6b31b86e0b44": "Ybodychange",
    "cc63d4f345211ba8befee3002d6b97c3898d3264": "Ybodychange",
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": "Ybodychange",
    "ce196814d857a4244a80c51d5151cc35e90b6749": "Ymultichange(Yparameterchange,Ybodychange)",
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": "Ymultichange(Yrename,Ybodychange)",
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0": "Yrename",
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": "Ybodychange",
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "e196edcf8b06f6c287c06f01748dafa7fd9892e4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n         final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n         // gather all the inline tags, like @link\n         // INLINE tags inside BLOCKs get hidden when using ALL\n-        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));\n+        tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.INLINE));\n         // gather all the block-level tags, like @throws and @see\n-        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));\n+        tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.BLOCK));\n \n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n \n         tags.stream()\n             .filter(JavadocTag::canReferenceImports)\n             .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        // gather all the inline tags, like @link\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.INLINE));\n        // gather all the block-level tags, like @throws and @see\n        tags.addAll(getValidTags(textBlock, JavadocUtil.JavadocTagType.BLOCK));\n\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n\n        tags.stream()\n            .filter(JavadocTag::canReferenceImports)\n            .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "4acf7a786285d95d2c544f6d7daf6b31b86e0b44": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4940: fix twelfth part idea violations\n",
      "commitDate": "17/08/17 5:06 PM",
      "commitName": "4acf7a786285d95d2c544f6d7daf6b31b86e0b44",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "10/07/17 5:40 PM",
      "commitNameOld": "cc63d4f345211ba8befee3002d6b97c3898d3264",
      "commitAuthorOld": "Brent Plump",
      "daysBetweenCommits": 37.98,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,15 @@\n     private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n-        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n         // gather all the inline tags, like @link\n         // INLINE tags inside BLOCKs get hidden when using ALL\n         tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));\n         // gather all the block-level tags, like @throws and @see\n         tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));\n+\n+        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n+\n         tags.stream()\n             .filter(JavadocTag::canReferenceImports)\n             .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        // gather all the inline tags, like @link\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));\n        // gather all the block-level tags, like @throws and @see\n        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));\n\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n\n        tags.stream()\n            .filter(JavadocTag::canReferenceImports)\n            .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "cc63d4f345211ba8befee3002d6b97c3898d3264": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4606: Support parameter imports for block-level javadoc tags\n",
      "commitDate": "10/07/17 5:40 PM",
      "commitName": "cc63d4f345211ba8befee3002d6b97c3898d3264",
      "commitAuthor": "Brent Plump",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 164.42,
      "commitsBetweenForRepo": 633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n-        // process all the @link type tags\n+        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n+        // gather all the inline tags, like @link\n         // INLINE tags inside BLOCKs get hidden when using ALL\n-        getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE).stream()\n+        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));\n+        // gather all the block-level tags, like @throws and @see\n+        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));\n+        tags.stream()\n             .filter(JavadocTag::canReferenceImports)\n             .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n-        // process all the @throws type tags\n-        getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK).stream()\n-            .filter(JavadocTag::canReferenceImports)\n-            .forEach(tag -\u003e references.addAll(matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME)));\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        final List\u003cJavadocTag\u003e tags \u003d new ArrayList\u003c\u003e();\n        // gather all the inline tags, like @link\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE));\n        // gather all the block-level tags, like @throws and @see\n        tags.addAll(getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK));\n        tags.stream()\n            .filter(JavadocTag::canReferenceImports)\n            .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "de022d2434e58dd633fd50a7f9bb50565a8767b5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3233: Resolve IntelijIdea inspection violations for java8 migration (#3434)\n\n",
      "commitDate": "08/09/16 5:30 AM",
      "commitName": "de022d2434e58dd633fd50a7f9bb50565a8767b5",
      "commitAuthor": "Mariia Mykhailova",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 215.94,
      "commitsBetweenForRepo": 461,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,13 @@\n     private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINE tags inside BLOCKs get hidden when using ALL\n-        for (final JavadocTag tag\n-                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {\n-            if (tag.canReferenceImports()) {\n-                references.addAll(processJavadocTag(tag));\n-            }\n-        }\n+        getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE).stream()\n+            .filter(JavadocTag::canReferenceImports)\n+            .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n         // process all the @throws type tags\n-        for (final JavadocTag tag\n-                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {\n-            if (tag.canReferenceImports()) {\n-                references.addAll(\n-                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n-            }\n-        }\n+        getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK).stream()\n+            .filter(JavadocTag::canReferenceImports)\n+            .forEach(tag -\u003e references.addAll(matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME)));\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE).stream()\n            .filter(JavadocTag::canReferenceImports)\n            .forEach(tag -\u003e references.addAll(processJavadocTag(tag)));\n        // process all the @throws type tags\n        getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK).stream()\n            .filter(JavadocTag::canReferenceImports)\n            .forEach(tag -\u003e references.addAll(matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME)));\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "ce196814d857a4244a80c51d5151cc35e90b6749": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #2080: Fix typos in code\n",
      "commitDate": "16/10/15 4:35 PM",
      "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #2080: Fix typos in code\n",
          "commitDate": "16/10/15 4:35 PM",
          "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "31/08/15 11:51 AM",
          "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 46.2,
          "commitsBetweenForRepo": 329,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINE tags inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n-                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n-                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {
            "oldValue": "[cmt-TextBlock]",
            "newValue": "[textBlock-TextBlock]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #2080: Fix typos in code\n",
          "commitDate": "16/10/15 4:35 PM",
          "commitName": "ce196814d857a4244a80c51d5151cc35e90b6749",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "31/08/15 11:51 AM",
          "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
          "commitAuthorOld": "Ruslan Diachenko",
          "daysBetweenCommits": 46.2,
          "commitsBetweenForRepo": 329,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINE tags inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n-                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n-                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock textBlock) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
      "commitDate": "27/08/15 10:26 PM",
      "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
          "commitDate": "27/08/15 10:26 PM",
          "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "27/08/15 10:26 PM",
          "commitNameOld": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private static Set\u003cString\u003e collectReferecesFromJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n-        // INLINEs inside BLOCKs get hidden when using ALL\n+        // INLINE tags inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {
            "oldValue": "collectReferecesFromJavadoc",
            "newValue": "collectReferencesFromJavadoc"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix typos in import and java8 packages. #1555\n\nFixes some `SpellCheckingInspection` inspection violations.\n\nDescription:\n\u003eSpellchecker inspection helps locate typos and misspelling in your code, comments and literals.\n",
          "commitDate": "27/08/15 10:26 PM",
          "commitName": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "27/08/15 10:26 PM",
          "commitNameOld": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-    private static Set\u003cString\u003e collectReferecesFromJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n-        // INLINEs inside BLOCKs get hidden when using ALL\n+        // INLINE tags inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static Set\u003cString\u003e collectReferencesFromJavadoc(TextBlock cmt) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINE tags inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0": {
      "type": "Yrename",
      "commitMessage": "Fix suspicious getters and setters. #1555\n\nFixes `SuspiciousGetterSetter` inspection violations.\n\nDescription:\n\u003eReports suspicious getter or setter methods. A getter or setter is suspicious if it accesses a different field than would be expected by its name.\n",
      "commitDate": "25/08/15 3:34 AM",
      "commitName": "0aec69c702a43a0219a7cc1e3d0c2a21d8d871f0",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "19/08/15 1:14 PM",
      "commitNameOld": "ea963bb721aafd9584242cedf2781f0294f2b18d",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 5.6,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n-    private static Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e collectReferecesFromJavadoc(TextBlock cmt) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e collectReferecesFromJavadoc(TextBlock cmt) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {
        "oldValue": "processJavadoc",
        "newValue": "collectReferecesFromJavadoc"
      }
    },
    "66d73fe6189267fee3423e2e8d7fc2d68599a43f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MemberName and MethodName violations fixed\n",
      "commitDate": "14/08/15 7:00 AM",
      "commitName": "66d73fe6189267fee3423e2e8d7fc2d68599a43f",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "22/07/15 10:58 PM",
      "commitNameOld": "acbd47a66b01acc392a7bd37ad3a2e65eecd308a",
      "commitAuthorOld": "Aleksandr Ivanov",
      "daysBetweenCommits": 22.33,
      "commitsBetweenForRepo": 269,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     private static Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n-                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n+                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getFirstArg(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n-    private Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n+    private static Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n         final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Set\u003cString\u003e processJavadoc(TextBlock cmt) {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": {
      "type": "Ybodychange",
      "commitMessage": "Replace verbose type arguments with diamond type \u003c\u003e\n\nThis syntax is not supported under Java 6 or earlier, but Checkstyle codebase uses Java 7 already.\n",
      "commitDate": "15/02/15 8:22 AM",
      "commitName": "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "08/02/15 1:46 PM",
      "commitNameOld": "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n     {\n-        final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n+        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n                 : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n    {\n        final Set\u003cString\u003e references \u003d new HashSet\u003c\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
      "extendedDetails": {}
    },
    "16dac636b246c658cad31ee9b2e45c53b851d4f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, imports, #512\n",
      "commitDate": "19/01/15 6:35 AM",
      "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "10/06/14 10:01 PM",
          "commitNameOld": "e196edcf8b06f6c287c06f01748dafa7fd9892e4",
          "commitAuthorOld": "James Gorman",
          "daysBetweenCommits": 222.4,
          "commitsBetweenForRepo": 455,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    private Set\u003cString\u003e processJavadoc(TextBlock aCmt)\n+    private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n     {\n         final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n-                : getValidTags(aCmt, JavadocUtils.JavadocTagType.INLINE))\n+                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n-                : getValidTags(aCmt, JavadocUtils.JavadocTagType.BLOCK))\n+                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n    {\n        final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {
            "oldValue": "[aCmt-TextBlock]",
            "newValue": "[cmt-TextBlock]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, imports, #512\n",
          "commitDate": "19/01/15 6:35 AM",
          "commitName": "16dac636b246c658cad31ee9b2e45c53b851d4f2",
          "commitAuthor": "alexkravin",
          "commitDateOld": "10/06/14 10:01 PM",
          "commitNameOld": "e196edcf8b06f6c287c06f01748dafa7fd9892e4",
          "commitAuthorOld": "James Gorman",
          "daysBetweenCommits": 222.4,
          "commitsBetweenForRepo": 455,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    private Set\u003cString\u003e processJavadoc(TextBlock aCmt)\n+    private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n     {\n         final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n         // process all the @link type tags\n         // INLINEs inside BLOCKs get hidden when using ALL\n         for (final JavadocTag tag\n-                : getValidTags(aCmt, JavadocUtils.JavadocTagType.INLINE))\n+                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(processJavadocTag(tag));\n             }\n         }\n         // process all the @throws type tags\n         for (final JavadocTag tag\n-                : getValidTags(aCmt, JavadocUtils.JavadocTagType.BLOCK))\n+                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n         {\n             if (tag.canReferenceImports()) {\n                 references.addAll(\n                         matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n             }\n         }\n         return references;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Set\u003cString\u003e processJavadoc(TextBlock cmt)\n    {\n        final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "e196edcf8b06f6c287c06f01748dafa7fd9892e4": {
      "type": "Yintroduced",
      "commitMessage": "Update UnusedImportsCheck to correctly detect classes in parameters and inline tags nested within block tags.\nfixing checkstyle issues\nFixing even more checkstyle issues\n",
      "commitDate": "10/06/14 10:01 PM",
      "commitName": "e196edcf8b06f6c287c06f01748dafa7fd9892e4",
      "commitAuthor": "James Gorman",
      "diff": "@@ -0,0 +1,23 @@\n+    private Set\u003cString\u003e processJavadoc(TextBlock aCmt)\n+    {\n+        final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n+        // process all the @link type tags\n+        // INLINEs inside BLOCKs get hidden when using ALL\n+        for (final JavadocTag tag\n+                : getValidTags(aCmt, JavadocUtils.JavadocTagType.INLINE))\n+        {\n+            if (tag.canReferenceImports()) {\n+                references.addAll(processJavadocTag(tag));\n+            }\n+        }\n+        // process all the @throws type tags\n+        for (final JavadocTag tag\n+                : getValidTags(aCmt, JavadocUtils.JavadocTagType.BLOCK))\n+        {\n+            if (tag.canReferenceImports()) {\n+                references.addAll(\n+                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n+            }\n+        }\n+        return references;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Set\u003cString\u003e processJavadoc(TextBlock aCmt)\n    {\n        final Set\u003cString\u003e references \u003d new HashSet\u003cString\u003e();\n        // process all the @link type tags\n        // INLINEs inside BLOCKs get hidden when using ALL\n        for (final JavadocTag tag\n                : getValidTags(aCmt, JavadocUtils.JavadocTagType.INLINE))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(processJavadocTag(tag));\n            }\n        }\n        // process all the @throws type tags\n        for (final JavadocTag tag\n                : getValidTags(aCmt, JavadocUtils.JavadocTagType.BLOCK))\n        {\n            if (tag.canReferenceImports()) {\n                references.addAll(\n                        matchPattern(tag.getArg1(), FIRST_CLASS_NAME));\n            }\n        }\n        return references;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java"
    }
  }
}