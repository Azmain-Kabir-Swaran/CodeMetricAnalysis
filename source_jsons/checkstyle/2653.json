{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MethodCallHandler.java",
  "functionName": "getIndentImpl",
  "functionId": "getIndentImpl",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
  "functionStartLine": 46,
  "functionEndLine": 83,
  "numCommitsSeen": 92,
  "timeTaken": 3764,
  "changeHistory": [
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
    "284278fde3431e33701cad1c3cc6690abcec0bb6",
    "658ed1355643faff0d29f21b9e3e386a98de15ae",
    "26c21a2833c6da6265123fece188e772ffd52606",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
    "8c891372187779376158becd95fcaf4e28b8bb8d",
    "4b95f33697750ed910d59830fc9c649f094d88f8",
    "7c9772cee74ae38d5f26c54de43beb75434aef24",
    "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d",
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb",
    "eb5896a4a1d66552f5100046413f15d62b485b62",
    "8bd1d6869ba97b6a03dd2b069ffbe5a1571e1b45",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "50559c68761e235f57e48cd2dc28928b417d7745",
    "5a4f991d2738c824f70f361b21d9da193ff3751c",
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
    "7f7db38a097a95c264307123924779380fb40077",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb",
    "092e1f69476fc715852035a25b23a11804183a23",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b"
  ],
  "changeHistoryShort": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": "Ybodychange",
    "284278fde3431e33701cad1c3cc6690abcec0bb6": "Ybodychange",
    "658ed1355643faff0d29f21b9e3e386a98de15ae": "Ybodychange",
    "26c21a2833c6da6265123fece188e772ffd52606": "Ybodychange",
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": "Ybodychange",
    "8c891372187779376158becd95fcaf4e28b8bb8d": "Ymultichange(Yrename,Ybodychange)",
    "4b95f33697750ed910d59830fc9c649f094d88f8": "Ybodychange",
    "7c9772cee74ae38d5f26c54de43beb75434aef24": "Ybodychange",
    "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d": "Ybodychange",
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb": "Ybodychange",
    "eb5896a4a1d66552f5100046413f15d62b485b62": "Ybodychange",
    "8bd1d6869ba97b6a03dd2b069ffbe5a1571e1b45": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "50559c68761e235f57e48cd2dc28928b417d7745": "Ymodifierchange",
    "5a4f991d2738c824f70f361b21d9da193ff3751c": "Ybodychange",
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c": "Ybodychange",
    "7f7db38a097a95c264307123924779380fb40077": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": "Ybodychange",
    "092e1f69476fc715852035a25b23a11804183a23": "Ybodychange",
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7518: refactor line comparison\n",
      "commitDate": "06/02/20 6:58 PM",
      "commitName": "8bf05ced07bb04c7240ae9f60ecda3c628e9b6f6",
      "commitAuthor": "Andrei_Paikin",
      "commitDateOld": "13/01/20 12:43 PM",
      "commitNameOld": "284278fde3431e33701cad1c3cc6690abcec0bb6",
      "commitAuthorOld": "alinkov",
      "daysBetweenCommits": 24.26,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     protected IndentLevel getIndentImpl() {\n         final IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n-            if (areOnSameLine(container.getMainAst(), getMainAst())\n+            if (TokenUtil.areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()\n                     || areMethodsChained(container.getMainAst(), getMainAst())) {\n                 indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n                 indentLevel \u003d new IndentLevel(container.getIndent(),\n                     getIndentCheck().getLineWrappingIndentation());\n             }\n         }\n         else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n             indentLevel \u003d super.getIndentImpl();\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getIndentImpl() {\n        final IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (TokenUtil.areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()\n                    || areMethodsChained(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(),\n                    getIndentCheck().getLineWrappingIndentation());\n            }\n        }\n        else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n            indentLevel \u003d super.getIndentImpl();\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "284278fde3431e33701cad1c3cc6690abcec0bb6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6210: Use lineWrappingIndentation in multiline method call\n",
      "commitDate": "13/01/20 12:43 PM",
      "commitName": "284278fde3431e33701cad1c3cc6690abcec0bb6",
      "commitAuthor": "alinkov",
      "commitDateOld": "01/01/20 4:38 PM",
      "commitNameOld": "ae9edbd4a8645c8cc1a99ad6890dd0006700d1cb",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 11.84,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n     protected IndentLevel getIndentImpl() {\n         final IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()\n                     || areMethodsChained(container.getMainAst(), getMainAst())) {\n                 indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n-                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n+                indentLevel \u003d new IndentLevel(container.getIndent(),\n+                    getIndentCheck().getLineWrappingIndentation());\n             }\n         }\n         else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n             indentLevel \u003d super.getIndentImpl();\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getIndentImpl() {\n        final IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()\n                    || areMethodsChained(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(),\n                    getIndentCheck().getLineWrappingIndentation());\n            }\n        }\n        else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n            indentLevel \u003d super.getIndentImpl();\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "658ed1355643faff0d29f21b9e3e386a98de15ae": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3808: Check indentation of this() and super()\n",
      "commitDate": "21/03/18 10:42 PM",
      "commitName": "658ed1355643faff0d29f21b9e3e386a98de15ae",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "0847a10b9430d9fb0a3f44df03e891da906bea47",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 76.6,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n     protected IndentLevel getIndentImpl() {\n         final IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()\n                     || areMethodsChained(container.getMainAst(), getMainAst())) {\n                 indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n                 indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n             }\n         }\n+        else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n+            indentLevel \u003d super.getIndentImpl();\n+        }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getIndentImpl() {\n        final IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()\n                    || areMethodsChained(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n            }\n        }\n        else if (getMainAst().getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_NEW) {\n            indentLevel \u003d super.getIndentImpl();\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "26c21a2833c6da6265123fece188e772ffd52606": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3208: Add better support for chained methods (#3339)\n\n",
      "commitDate": "29/07/16 7:59 AM",
      "commitName": "26c21a2833c6da6265123fece188e772ffd52606",
      "commitAuthor": "Kevin Conaway",
      "commitDateOld": "27/05/16 6:42 AM",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 63.05,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n     protected IndentLevel getIndentImpl() {\n         final IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n-                    || isChainedMethodCallWrapped()) {\n+                    || isChainedMethodCallWrapped()\n+                    || areMethodsChained(container.getMainAst(), getMainAst())) {\n                 indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n                 indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getIndentImpl() {\n        final IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()\n                    || areMethodsChained(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "0d8e93ce79ea33b72b3e904d8796984271ee3d8d": {
      "type": "Ybodychange",
      "commitMessage": "minor: enforce FinalLocalVariableCheck on checkstyle code\n",
      "commitDate": "24/01/16 6:35 AM",
      "commitName": "0d8e93ce79ea33b72b3e904d8796984271ee3d8d",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 19.59,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     protected IndentLevel getIndentImpl() {\n-        IndentLevel indentLevel;\n+        final IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()) {\n                 indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n                 indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getIndentImpl() {\n        final IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "8c891372187779376158becd95fcaf4e28b8bb8d": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "minor: renaming indentation methods to more natural name",
      "commitDate": "16/12/15 8:16 AM",
      "commitName": "8c891372187779376158becd95fcaf4e28b8bb8d",
      "commitAuthor": "rnveach",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "minor: renaming indentation methods to more natural name",
          "commitDate": "16/12/15 8:16 AM",
          "commitName": "8c891372187779376158becd95fcaf4e28b8bb8d",
          "commitAuthor": "rnveach",
          "commitDateOld": "04/12/15 10:53 AM",
          "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 11.89,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-    protected IndentLevel getLevelImpl() {\n+    protected IndentLevel getIndentImpl() {\n         IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()) {\n-                indentLevel \u003d container.getLevel();\n+                indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n-                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n+                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n-                indentLevel \u003d super.getLevelImpl();\n+                indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected IndentLevel getIndentImpl() {\n        IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {
            "oldValue": "getLevelImpl",
            "newValue": "getIndentImpl"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "minor: renaming indentation methods to more natural name",
          "commitDate": "16/12/15 8:16 AM",
          "commitName": "8c891372187779376158becd95fcaf4e28b8bb8d",
          "commitAuthor": "rnveach",
          "commitDateOld": "04/12/15 10:53 AM",
          "commitNameOld": "ab74399c2d18b8881c4a0c13155b7afce869eebf",
          "commitAuthorOld": "rnveach",
          "daysBetweenCommits": 11.89,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-    protected IndentLevel getLevelImpl() {\n+    protected IndentLevel getIndentImpl() {\n         IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())\n                     || isChainedMethodCallWrapped()) {\n-                indentLevel \u003d container.getLevel();\n+                indentLevel \u003d container.getIndent();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else {\n-                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n+                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n-                indentLevel \u003d super.getLevelImpl();\n+                indentLevel \u003d super.getIndentImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected IndentLevel getIndentImpl() {\n        IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getIndent();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getIndent(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getIndentImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "4b95f33697750ed910d59830fc9c649f094d88f8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Collapse if statement\n\nFixes `IfStatementWithIdenticalBranches` inspection violation.\n\nDescription:\n\u003eReports if statements with identical \"then\" and else branches. Such statements are almost certainly programmer error.\n",
      "commitDate": "30/08/15 10:12 PM",
      "commitName": "4b95f33697750ed910d59830fc9c649f094d88f8",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "28/08/15 10:35 PM",
      "commitNameOld": "7c9772cee74ae38d5f26c54de43beb75434aef24",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n     protected IndentLevel getLevelImpl() {\n         IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n-            if (areOnSameLine(container.getMainAst(), getMainAst())) {\n+            if (areOnSameLine(container.getMainAst(), getMainAst())\n+                    || isChainedMethodCallWrapped()) {\n                 indentLevel \u003d container.getLevel();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n-            else if (isChainedMethodCallWrapped()) {\n-                indentLevel \u003d container.getLevel();\n-            }\n             else {\n                 indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n             if (lineStart \u003d\u003d firstCol) {\n                 indentLevel \u003d super.getLevelImpl();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl() {\n        IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())\n                    || isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getLevel();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else {\n                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getLevelImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "7c9772cee74ae38d5f26c54de43beb75434aef24": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Flip negated if-else\n\nFixes `NegatedIfElse` inspection violations introduced in recent commit.\n\nDescription:\n\u003eReports if statements which contain else branches and whose conditions are negated. Flipping the order of the if and else branches will usually increase the clarity of such statements.\n",
      "commitDate": "28/08/15 10:35 PM",
      "commitName": "7c9772cee74ae38d5f26c54de43beb75434aef24",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:31 AM",
      "commitNameOld": "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     protected IndentLevel getLevelImpl() {\n         IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                 indentLevel \u003d container.getLevel();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n             else if (isChainedMethodCallWrapped()) {\n                 indentLevel \u003d container.getLevel();\n             }\n             else {\n                 indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n         }\n         else {\n             // if our expression isn\u0027t first on the line, just use the start\n             // of the line\n             final LineSet lines \u003d new LineSet();\n             findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n             final int firstCol \u003d lines.firstLineCol();\n             final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n-            if (lineStart !\u003d firstCol) {\n-                indentLevel \u003d new IndentLevel(lineStart);\n+            if (lineStart \u003d\u003d firstCol) {\n+                indentLevel \u003d super.getLevelImpl();\n             }\n             else {\n-                indentLevel \u003d super.getLevelImpl();\n+                indentLevel \u003d new IndentLevel(lineStart);\n             }\n         }\n         return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl() {\n        IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getLevel();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else if (isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getLevel();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart \u003d\u003d firstCol) {\n                indentLevel \u003d super.getLevelImpl();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: partial fix of ReturnCount violations\n",
      "commitDate": "27/08/15 5:31 AM",
      "commitName": "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "19/08/15 8:21 PM",
      "commitNameOld": "efa16e17bf710b7b24af828296c2337612912ba9",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 7.38,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n     protected IndentLevel getLevelImpl() {\n+        IndentLevel indentLevel;\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (areOnSameLine(container.getMainAst(), getMainAst())) {\n-                return container.getLevel();\n+                indentLevel \u003d container.getLevel();\n             }\n             // we should increase indentation only if this is the first\n             // chained method call which was moved to the next line\n-            if (isChainedMethodCallWrapped()) {\n-                return container.getLevel();\n+            else if (isChainedMethodCallWrapped()) {\n+                indentLevel \u003d container.getLevel();\n             }\n             else {\n-                return new IndentLevel(container.getLevel(), getBasicOffset());\n+                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n         }\n-\n-        // if our expression isn\u0027t first on the line, just use the start\n-        // of the line\n-        final LineSet lines \u003d new LineSet();\n-        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n-        final int firstCol \u003d lines.firstLineCol();\n-        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n-        if (lineStart !\u003d firstCol) {\n-            return new IndentLevel(lineStart);\n+        else {\n+            // if our expression isn\u0027t first on the line, just use the start\n+            // of the line\n+            final LineSet lines \u003d new LineSet();\n+            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n+            final int firstCol \u003d lines.firstLineCol();\n+            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n+            if (lineStart !\u003d firstCol) {\n+                indentLevel \u003d new IndentLevel(lineStart);\n+            }\n+            else {\n+                indentLevel \u003d super.getLevelImpl();\n+            }\n         }\n-        return super.getLevelImpl();\n+        return indentLevel;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl() {\n        IndentLevel indentLevel;\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                indentLevel \u003d container.getLevel();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            else if (isChainedMethodCallWrapped()) {\n                indentLevel \u003d container.getLevel();\n            }\n            else {\n                indentLevel \u003d new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n        }\n        else {\n            // if our expression isn\u0027t first on the line, just use the start\n            // of the line\n            final LineSet lines \u003d new LineSet();\n            findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n            final int firstCol \u003d lines.firstLineCol();\n            final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n            if (lineStart !\u003d firstCol) {\n                indentLevel \u003d new IndentLevel(lineStart);\n            }\n            else {\n                indentLevel \u003d super.getLevelImpl();\n            }\n        }\n        return indentLevel;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb": {
      "type": "Ybodychange",
      "commitMessage": "Add test coverage to MethodCallHandler in Indentation check. #1270\n",
      "commitDate": "19/07/15 12:00 AM",
      "commitName": "3d4290baf0a9dabd9f5e7f5db304e7ce7b491dcb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/07/15 9:51 PM",
      "commitNameOld": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,30 @@\n     protected IndentLevel getLevelImpl() {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n-            if (container !\u003d null) {\n-                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n-                    return container.getLevel();\n-                }\n-\n-                // we should increase indentation only if this is the first\n-                // chained method call which was moved to the next line\n-                if (isChainedMethodCallWrapped()) {\n-                    return container.getLevel();\n-                }\n-                else {\n-                    return new IndentLevel(container.getLevel(), getBasicOffset());\n-                }\n+            if (areOnSameLine(container.getMainAst(), getMainAst())) {\n+                return container.getLevel();\n             }\n-\n-            // if we get here, we are the child of the left hand side (name\n-            //  side) of a method call with no \"containing\" call, use\n-            //  the first non-method call parent\n-\n-            AbstractExpressionHandler p \u003d getParent();\n-            while (p instanceof MethodCallHandler) {\n-                p \u003d p.getParent();\n+            // we should increase indentation only if this is the first\n+            // chained method call which was moved to the next line\n+            if (isChainedMethodCallWrapped()) {\n+                return container.getLevel();\n             }\n-            return p.suggestedChildLevel(this);\n+            else {\n+                return new IndentLevel(container.getLevel(), getBasicOffset());\n+            }\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         final LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n         final int firstCol \u003d lines.firstLineCol();\n         final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl() {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                return container.getLevel();\n            }\n            // we should increase indentation only if this is the first\n            // chained method call which was moved to the next line\n            if (isChainedMethodCallWrapped()) {\n                return container.getLevel();\n            }\n            else {\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "eb5896a4a1d66552f5100046413f15d62b485b62": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations for AbstractNaming rule #983\n",
      "commitDate": "18/06/15 10:52 AM",
      "commitName": "eb5896a4a1d66552f5100046413f15d62b485b62",
      "commitAuthor": "Bhavik Patel",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 32.25,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n     protected IndentLevel getLevelImpl() {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n                 if (isChainedMethodCallWrapped()) {\n                     return container.getLevel();\n                 }\n                 else {\n                     return new IndentLevel(container.getLevel(), getBasicOffset());\n                 }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n-            ExpressionHandler p \u003d getParent();\n+            AbstractExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         final LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n         final int firstCol \u003d lines.firstLineCol();\n         final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl() {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                if (isChainedMethodCallWrapped()) {\n                    return container.getLevel();\n                }\n                else {\n                    return new IndentLevel(container.getLevel(), getBasicOffset());\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            AbstractExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "8bd1d6869ba97b6a03dd2b069ffbe5a1571e1b45": {
      "type": "Ybodychange",
      "commitMessage": "PMD rule AvoidDeeplyNestedIfStmts is activated. Issue #744\n",
      "commitDate": "23/04/15 3:09 PM",
      "commitName": "8bd1d6869ba97b6a03dd2b069ffbe5a1571e1b45",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "10/03/15 2:36 PM",
      "commitNameOld": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 44.02,
      "commitsBetweenForRepo": 205,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,44 @@\n     protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                     (MethodCallHandler) getParent();\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n-                final DetailAST main \u003d getMainAst();\n-                final DetailAST dot \u003d main.getFirstChild();\n-                final DetailAST target \u003d dot.getFirstChild();\n-\n-                if (dot.getType() \u003d\u003d TokenTypes.DOT\n-                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n-                {\n-                    final DetailAST dot1 \u003d target.getFirstChild();\n-                    final DetailAST target1 \u003d dot1.getFirstChild();\n-\n-                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n-                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n-                    {\n-                        return container.getLevel();\n-                    }\n+                if (isChainedMethodCallWrapped()) {\n+                    return container.getLevel();\n                 }\n-                return new IndentLevel(container.getLevel(), getBasicOffset());\n+                else {\n+                    return new IndentLevel(container.getLevel(), getBasicOffset());\n+                }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         final LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n         final int firstCol \u003d lines.firstLineCol();\n         final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                if (isChainedMethodCallWrapped()) {\n                    return container.getLevel();\n                }\n                else {\n                    return new IndentLevel(container.getLevel(), getBasicOffset());\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n-                ((MethodCallHandler) getParent());\n+                    (MethodCallHandler) getParent();\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n                 final DetailAST main \u003d getMainAst();\n                 final DetailAST dot \u003d main.getFirstChild();\n                 final DetailAST target \u003d dot.getFirstChild();\n \n-                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n-                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n+                if (dot.getType() \u003d\u003d TokenTypes.DOT\n+                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                 {\n                     final DetailAST dot1 \u003d target.getFirstChild();\n                     final DetailAST target1 \u003d dot1.getFirstChild();\n \n-                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n-                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n+                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n+                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                     {\n                         return container.getLevel();\n                     }\n                 }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         final LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n         final int firstCol \u003d lines.firstLineCol();\n         final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                    (MethodCallHandler) getParent();\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                final DetailAST main \u003d getMainAst();\n                final DetailAST dot \u003d main.getFirstChild();\n                final DetailAST target \u003d dot.getFirstChild();\n\n                if (dot.getType() \u003d\u003d TokenTypes.DOT\n                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                {\n                    final DetailAST dot1 \u003d target.getFirstChild();\n                    final DetailAST target1 \u003d dot1.getFirstChild();\n\n                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                final DetailAST main \u003d getMainAst();\n                final DetailAST dot \u003d main.getFirstChild();\n                final DetailAST target \u003d dot.getFirstChild();\n\n                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    final DetailAST dot1 \u003d target.getFirstChild();\n                    final DetailAST target1 \u003d dot1.getFirstChild();\n\n                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/08 3:11 PM",
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 247.52,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n     protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             final MethodCallHandler container \u003d\n                 ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n                 final DetailAST main \u003d getMainAst();\n-                final DetailAST dot \u003d (DetailAST) main.getFirstChild();\n-                final DetailAST target \u003d (DetailAST) dot.getFirstChild();\n+                final DetailAST dot \u003d main.getFirstChild();\n+                final DetailAST target \u003d dot.getFirstChild();\n \n                 if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n-                    final DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n-                    final DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n+                    final DetailAST dot1 \u003d target.getFirstChild();\n+                    final DetailAST target1 \u003d dot1.getFirstChild();\n \n                     if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                         \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                     {\n                         return container.getLevel();\n                     }\n                 }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         final LineSet lines \u003d new LineSet();\n-        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n+        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n         final int firstCol \u003d lines.firstLineCol();\n         final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                final DetailAST main \u003d getMainAst();\n                final DetailAST dot \u003d main.getFirstChild();\n                final DetailAST target \u003d dot.getFirstChild();\n\n                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    final DetailAST dot1 \u003d target.getFirstChild();\n                    final DetailAST target1 \u003d dot1.getFirstChild();\n\n                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n     protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n-            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n+            final MethodCallHandler container \u003d\n+                ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n-                DetailAST main \u003d getMainAst();\n-                DetailAST dot \u003d (DetailAST) main.getFirstChild();\n-                DetailAST target \u003d (DetailAST) dot.getFirstChild();\n+                final DetailAST main \u003d getMainAst();\n+                final DetailAST dot \u003d (DetailAST) main.getFirstChild();\n+                final DetailAST target \u003d (DetailAST) dot.getFirstChild();\n \n                 if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                     \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n-                    DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n-                    DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n+                    final DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n+                    final DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n \n                     if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                         \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                     {\n                         return container.getLevel();\n                     }\n                 }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n-        LineSet lines \u003d new LineSet();\n+        final LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n-        int firstCol \u003d lines.firstLineCol();\n-        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n+        final int firstCol \u003d lines.firstLineCol();\n+        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            final MethodCallHandler container \u003d\n                ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                final DetailAST main \u003d getMainAst();\n                final DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                final DetailAST target \u003d (DetailAST) dot.getFirstChild();\n\n                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    final DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                    final DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n\n                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        final LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        final int firstCol \u003d lines.firstLineCol();\n        final int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "23/07/05 2:18 AM",
      "commitNameOld": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 348.76,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n                 DetailAST main \u003d getMainAst();\n                 DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                 DetailAST target \u003d (DetailAST) dot.getFirstChild();\n \n-                if (dot.getType() \u003d\u003d TokenTypes.DOT\n-                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n+                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n+                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                 {\n                     DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                     DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n \n-                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n-                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n+                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n+                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                     {\n                         return container.getLevel();\n                     }\n                 }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                DetailAST main \u003d getMainAst();\n                DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                DetailAST target \u003d (DetailAST) dot.getFirstChild();\n\n                if ((dot.getType() \u003d\u003d TokenTypes.DOT)\n                    \u0026\u0026 (target.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                {\n                    DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                    DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n\n                    if ((dot1.getType() \u003d\u003d TokenTypes.DOT)\n                        \u0026\u0026 (target1.getType() \u003d\u003d TokenTypes.METHOD_CALL))\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "50559c68761e235f57e48cd2dc28928b417d7745": {
      "type": "Ymodifierchange",
      "commitMessage": "fix for 1232822 and some refactoring in indentation check\n",
      "commitDate": "23/07/05 1:44 AM",
      "commitName": "50559c68761e235f57e48cd2dc28928b417d7745",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "11/01/05 7:43 AM",
      "commitNameOld": "5a4f991d2738c824f70f361b21d9da193ff3751c",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 192.71,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n-    public IndentLevel getLevelImpl()\n+    protected IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n \n                 // we should increase indentation only if this is the first\n                 // chained method call which was moved to the next line\n                 DetailAST main \u003d getMainAst();\n                 DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                 DetailAST target \u003d (DetailAST) dot.getFirstChild();\n \n                 if (dot.getType() \u003d\u003d TokenTypes.DOT\n                     \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                 {\n                     DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                     DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n \n                     if (dot1.getType() \u003d\u003d TokenTypes.DOT\n                         \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                     {\n                         return container.getLevel();\n                     }\n                 }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                DetailAST main \u003d getMainAst();\n                DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                DetailAST target \u003d (DetailAST) dot.getFirstChild();\n\n                if (dot.getType() \u003d\u003d TokenTypes.DOT\n                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                {\n                    DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                    DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n\n                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "5a4f991d2738c824f70f361b21d9da193ff3751c": {
      "type": "Ybodychange",
      "commitMessage": "partitial fix for 1089128(Bugs in Indentation check)\n",
      "commitDate": "11/01/05 7:43 AM",
      "commitName": "5a4f991d2738c824f70f361b21d9da193ff3751c",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 2.2,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,54 @@\n     public IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n+\n+                // we should increase indentation only if this is the first\n+                // chained method call which was moved to the next line\n+                DetailAST main \u003d getMainAst();\n+                DetailAST dot \u003d (DetailAST) main.getFirstChild();\n+                DetailAST target \u003d (DetailAST) dot.getFirstChild();\n+\n+                if (dot.getType() \u003d\u003d TokenTypes.DOT\n+                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n+                {\n+                    DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n+                    DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n+\n+                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n+                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n+                    {\n+                        return container.getLevel();\n+                    }\n+                }\n                 return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n         return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n\n                // we should increase indentation only if this is the first\n                // chained method call which was moved to the next line\n                DetailAST main \u003d getMainAst();\n                DetailAST dot \u003d (DetailAST) main.getFirstChild();\n                DetailAST target \u003d (DetailAST) dot.getFirstChild();\n\n                if (dot.getType() \u003d\u003d TokenTypes.DOT\n                    \u0026\u0026 target.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                {\n                    DetailAST dot1 \u003d (DetailAST) target.getFirstChild();\n                    DetailAST target1 \u003d (DetailAST) dot1.getFirstChild();\n\n                    if (dot1.getType() \u003d\u003d TokenTypes.DOT\n                        \u0026\u0026 target1.getType() \u003d\u003d TokenTypes.METHOD_CALL)\n                    {\n                        return container.getLevel();\n                    }\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c": {
      "type": "Ybodychange",
      "commitMessage": "General cleanup.\n",
      "commitDate": "21/07/04 4:35 AM",
      "commitName": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 188.6,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,35 @@\n     public IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n-                else {\n-                    return new IndentLevel(container.getLevel(),\n-                                           getBasicOffset());\n-                }\n+                return new IndentLevel(container.getLevel(), getBasicOffset());\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return new IndentLevel(lineStart);\n         }\n-        else {\n-            return super.getLevelImpl();\n-        }\n+        return super.getLevelImpl();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n                return new IndentLevel(container.getLevel(), getBasicOffset());\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        return super.getLevelImpl();\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "7f7db38a097a95c264307123924779380fb40077": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "IndentationCheck: Some refactoring and fixes for some TODOs and bugs.\n",
      "commitDate": "12/08/03 12:19 PM",
      "commitName": "7f7db38a097a95c264307123924779380fb40077",
      "commitAuthor": "Oleg Sukhodolsky",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "IndentationCheck: Some refactoring and fixes for some TODOs and bugs.\n",
          "commitDate": "12/08/03 12:19 PM",
          "commitName": "7f7db38a097a95c264307123924779380fb40077",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "14/06/03 10:47 AM",
          "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 59.06,
          "commitsBetweenForRepo": 135,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-    public int getLevelImpl()\n+    public IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n                 else {\n-                    return container.getLevel()\n-                        + getIndentCheck().getBasicOffset();\n+                    return new IndentLevel(container.getLevel(),\n+                                           getBasicOffset());\n                 }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n-            return lineStart;\n+            return new IndentLevel(lineStart);\n         }\n         else {\n             return super.getLevelImpl();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n                else {\n                    return new IndentLevel(container.getLevel(),\n                                           getBasicOffset());\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        else {\n            return super.getLevelImpl();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "IndentLevel"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IndentationCheck: Some refactoring and fixes for some TODOs and bugs.\n",
          "commitDate": "12/08/03 12:19 PM",
          "commitName": "7f7db38a097a95c264307123924779380fb40077",
          "commitAuthor": "Oleg Sukhodolsky",
          "commitDateOld": "14/06/03 10:47 AM",
          "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
          "commitAuthorOld": "Oleg Sukhodolsky",
          "daysBetweenCommits": 59.06,
          "commitsBetweenForRepo": 135,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-    public int getLevelImpl()\n+    public IndentLevel getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n                 else {\n-                    return container.getLevel()\n-                        + getIndentCheck().getBasicOffset();\n+                    return new IndentLevel(container.getLevel(),\n+                                           getBasicOffset());\n                 }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n-            return lineStart;\n+            return new IndentLevel(lineStart);\n         }\n         else {\n             return super.getLevelImpl();\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public IndentLevel getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n                else {\n                    return new IndentLevel(container.getLevel(),\n                                           getBasicOffset());\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return new IndentLevel(lineStart);\n        }\n        else {\n            return super.getLevelImpl();\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e464c231eccec72f964131d9aeb5e49982c4b3bb": {
      "type": "Ybodychange",
      "commitMessage": "Indentation:\nFixes for several TODO comments.\nAdded AssignHandler.\n",
      "commitDate": "14/06/03 10:47 AM",
      "commitName": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "09/06/03 12:48 AM",
      "commitNameOld": "889587fdd22ba03ea670e404d36810e9af113c9d",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.42,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n     public int getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n-\n         if (getParent() instanceof MethodCallHandler) {\n-            MethodCallHandler container \u003d ((MethodCallHandler) getParent())\n-                .findContainingMethodCall(this);\n+            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n                 else {\n                     return container.getLevel()\n                         + getIndentCheck().getBasicOffset();\n                 }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n-            //  the first non-method callparent\n+            //  the first non-method call parent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return lineStart;\n         }\n         else {\n             return super.getLevelImpl();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent());\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n                else {\n                    return container.getLevel()\n                        + getIndentCheck().getBasicOffset();\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method call parent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return lineStart;\n        }\n        else {\n            return super.getLevelImpl();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "092e1f69476fc715852035a25b23a11804183a23": {
      "type": "Ybodychange",
      "commitMessage": "indentationAmount property renamed to basicOffset\n",
      "commitDate": "15/05/03 8:54 AM",
      "commitName": "092e1f69476fc715852035a25b23a11804183a23",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "14/05/03 1:11 AM",
      "commitNameOld": "a4d63db21d57ab53aff8a467f89df3867518ab91",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public int getLevelImpl()\n     {\n         // if inside a method call\u0027s params, this could be part of\n         // an expression, so get the previous line\u0027s start\n \n         if (getParent() instanceof MethodCallHandler) {\n             MethodCallHandler container \u003d ((MethodCallHandler) getParent())\n                 .findContainingMethodCall(this);\n             if (container !\u003d null) {\n                 if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                     return container.getLevel();\n                 }\n                 else {\n                     return container.getLevel()\n-                        + getIndentCheck().getIndentationAmount();\n+                        + getIndentCheck().getBasicOffset();\n                 }\n             }\n \n             // if we get here, we are the child of the left hand side (name\n             //  side) of a method call with no \"containing\" call, use\n             //  the first non-method callparent\n \n             ExpressionHandler p \u003d getParent();\n             while (p instanceof MethodCallHandler) {\n                 p \u003d p.getParent();\n             }\n             return p.suggestedChildLevel(this);\n         }\n \n         // if our expression isn\u0027t first on the line, just use the start\n         // of the line\n         LineSet lines \u003d new LineSet();\n         findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n         int firstCol \u003d lines.firstLineCol();\n         int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n         if (lineStart !\u003d firstCol) {\n             return lineStart;\n         }\n         else {\n             return super.getLevelImpl();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of\n        // an expression, so get the previous line\u0027s start\n\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent())\n                .findContainingMethodCall(this);\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                }\n                else {\n                    return container.getLevel()\n                        + getIndentCheck().getBasicOffset();\n                }\n            }\n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use\n            //  the first non-method callparent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return lineStart;\n        }\n        else {\n            return super.getLevelImpl();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java",
      "extendedDetails": {}
    },
    "eaad55fdba73e17e103dc6600867f26fd6a3896b": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring of original IndentationCheck made by Jeff Weston (Sir Toby) applied.\nFixed two know problems:\n - with static init block (catched by testValidBlockWithChecker())\n - with throws in method definition.\n   unit-test (testInvalidMethodWithChecker()) fixed too.\n",
      "commitDate": "11/05/03 12:53 AM",
      "commitName": "eaad55fdba73e17e103dc6600867f26fd6a3896b",
      "commitAuthor": "Oleg Sukhodolsky",
      "diff": "@@ -0,0 +1,42 @@\n+    public int getLevelImpl()\n+    {\n+        // if inside a method call\u0027s params, this could be part of \n+        // an expression, so get the previous line\u0027s start\n+\n+        if (getParent() instanceof MethodCallHandler) {\n+            MethodCallHandler container \u003d ((MethodCallHandler) getParent())\n+                .findContainingMethodCall(this);\n+            if (container !\u003d null) {\n+                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n+                    return container.getLevel();\n+                } \n+                else {\n+                    return container.getLevel()\n+                        + getIndentCheck().getIndentationAmount();\n+                }\n+            } \n+\n+            // if we get here, we are the child of the left hand side (name\n+            //  side) of a method call with no \"containing\" call, use \n+            //  the first non-method callparent\n+\n+            ExpressionHandler p \u003d getParent();\n+            while (p instanceof MethodCallHandler) {\n+                p \u003d p.getParent();\n+            }\n+            return p.suggestedChildLevel(this);\n+        }\n+\n+        // if our expression isn\u0027t first on the line, just use the start\n+        // of the line\n+        LineSet lines \u003d new LineSet();\n+        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n+        int firstCol \u003d lines.firstLineCol();\n+        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n+        if (lineStart !\u003d firstCol) {\n+            return lineStart;\n+        }\n+        else {\n+            return super.getLevelImpl();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int getLevelImpl()\n    {\n        // if inside a method call\u0027s params, this could be part of \n        // an expression, so get the previous line\u0027s start\n\n        if (getParent() instanceof MethodCallHandler) {\n            MethodCallHandler container \u003d ((MethodCallHandler) getParent())\n                .findContainingMethodCall(this);\n            if (container !\u003d null) {\n                if (areOnSameLine(container.getMainAst(), getMainAst())) {\n                    return container.getLevel();\n                } \n                else {\n                    return container.getLevel()\n                        + getIndentCheck().getIndentationAmount();\n                }\n            } \n\n            // if we get here, we are the child of the left hand side (name\n            //  side) of a method call with no \"containing\" call, use \n            //  the first non-method callparent\n\n            ExpressionHandler p \u003d getParent();\n            while (p instanceof MethodCallHandler) {\n                p \u003d p.getParent();\n            }\n            return p.suggestedChildLevel(this);\n        }\n\n        // if our expression isn\u0027t first on the line, just use the start\n        // of the line\n        LineSet lines \u003d new LineSet();\n        findSubtreeLines(lines, (DetailAST) getMainAst().getFirstChild(), true);\n        int firstCol \u003d lines.firstLineCol();\n        int lineStart \u003d getLineStart(getFirstAst(getMainAst()));\n        if (lineStart !\u003d firstCol) {\n            return lineStart;\n        }\n        else {\n            return super.getLevelImpl();\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java"
    }
  }
}