{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckstyleAntTask.java",
  "functionName": "realExecute",
  "functionId": "realExecute___checkstyleVersion-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
  "functionStartLine": 316,
  "functionEndLine": 338,
  "numCommitsSeen": 359,
  "timeTaken": 4957,
  "changeHistory": [
    "c28b535e91cb73f7630230695ef52fdf655e46e4",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1",
    "268665e6944469b55479a1bee817f99ec1bb144f",
    "3ef918920c58c550169ccef3cfe1706aede11a6e",
    "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80",
    "085ce12db0983590844ccc24ea49f91686a30ed8",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
    "500bf308fac4adc61bd3087a664779c8622efb3b",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
    "c876d2431e56405371b93c814de33c350766266d",
    "f38d8abd42c3e824635e542e6031b3da1997c02e",
    "02da493e64154d6bbac09a64d67a025f0e72cad1",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "81b52e27c5077f9a4f426d32b0e39a785052c715",
    "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c",
    "2dec3ca7aec1fc33f66c6864c39aa104739992aa",
    "a7684f8ad5b487933c41c714ac12a430a85dd5af",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "c1a79b112296dac813d0b4326043590f2eb2c378",
    "b1123e96e452b41c5fb22de20bb7a99d376d0380",
    "ba1663fc94f753cbfec512259a4ab304bdef7e9f",
    "f09c190dff9530b6b47ec14b3ac6d2162ba77b26",
    "47802121745d9113b54cdb2d8ccef59e74ce3e72",
    "e853ed726fc5ea30084202fa72c8117147fedb2b",
    "44ad8ceedb46e06938ec7962f168835756db31c9",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
    "822384a711290170148b43b5ae390dd4e8cfaf4f",
    "2debda611fe487021711aa4acce56651799a778f",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
    "4cbd709c019cf1b69796858506d673f7b66d37c7",
    "3288a81e30ddea194f76bd74f3b509500b864163",
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9",
    "aff5047c9e29ed3fa0a502dd9713fc5aae55146e",
    "816c6b33c9ab7b1f3584e3f29ff410fccaa193ee",
    "92358288d94bd806a7cdd0958f382d81416542c8",
    "34770c3eaa9ad06297c13fd43a55739c02c7d67d",
    "ff08629ef8d0623ef77edd32877da1992cf0ea18",
    "a1de1005813debb8c93fe1df597e8653ccefabed",
    "0e0ca2bddf5bd5ab2251c9d3513f6f423f757e65",
    "15c7162ea43a4e7517227a281f6f34d4a2ecb5a5",
    "403a3f70a368717081aeb87fedcaf0504dee61fe",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
    "6c304950f62f06cb3c72e46869c3fa3fbdc1e7d7",
    "69138e40225407ef560fd9d06d2903de37c83c2c",
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3"
  ],
  "changeHistoryShort": {
    "c28b535e91cb73f7630230695ef52fdf655e46e4": "Ybodychange",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": "Ybodychange",
    "268665e6944469b55479a1bee817f99ec1bb144f": "Ybodychange",
    "3ef918920c58c550169ccef3cfe1706aede11a6e": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80": "Ybodychange",
    "085ce12db0983590844ccc24ea49f91686a30ed8": "Ybodychange",
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": "Ybodychange",
    "500bf308fac4adc61bd3087a664779c8622efb3b": "Yfilerename",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": "Ybodychange",
    "c876d2431e56405371b93c814de33c350766266d": "Ybodychange",
    "f38d8abd42c3e824635e542e6031b3da1997c02e": "Ybodychange",
    "02da493e64154d6bbac09a64d67a025f0e72cad1": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "81b52e27c5077f9a4f426d32b0e39a785052c715": "Ybodychange",
    "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange)",
    "2dec3ca7aec1fc33f66c6864c39aa104739992aa": "Ybodychange",
    "a7684f8ad5b487933c41c714ac12a430a85dd5af": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "c1a79b112296dac813d0b4326043590f2eb2c378": "Ybodychange",
    "b1123e96e452b41c5fb22de20bb7a99d376d0380": "Ybodychange",
    "ba1663fc94f753cbfec512259a4ab304bdef7e9f": "Ybodychange",
    "f09c190dff9530b6b47ec14b3ac6d2162ba77b26": "Ybodychange",
    "47802121745d9113b54cdb2d8ccef59e74ce3e72": "Ybodychange",
    "e853ed726fc5ea30084202fa72c8117147fedb2b": "Ybodychange",
    "44ad8ceedb46e06938ec7962f168835756db31c9": "Ybodychange",
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": "Ybodychange",
    "822384a711290170148b43b5ae390dd4e8cfaf4f": "Ybodychange",
    "2debda611fe487021711aa4acce56651799a778f": "Ybodychange",
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": "Ybodychange",
    "4cbd709c019cf1b69796858506d673f7b66d37c7": "Ybodychange",
    "3288a81e30ddea194f76bd74f3b509500b864163": "Ybodychange",
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9": "Ybodychange",
    "aff5047c9e29ed3fa0a502dd9713fc5aae55146e": "Ybodychange",
    "816c6b33c9ab7b1f3584e3f29ff410fccaa193ee": "Ybodychange",
    "92358288d94bd806a7cdd0958f382d81416542c8": "Ybodychange",
    "34770c3eaa9ad06297c13fd43a55739c02c7d67d": "Ybodychange",
    "ff08629ef8d0623ef77edd32877da1992cf0ea18": "Ybodychange",
    "a1de1005813debb8c93fe1df597e8653ccefabed": "Ybodychange",
    "0e0ca2bddf5bd5ab2251c9d3513f6f423f757e65": "Ybodychange",
    "15c7162ea43a4e7517227a281f6f34d4a2ecb5a5": "Ybodychange",
    "403a3f70a368717081aeb87fedcaf0504dee61fe": "Ybodychange",
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": "Ybodychange",
    "6c304950f62f06cb3c72e46869c3fa3fbdc1e7d7": "Ybodychange",
    "69138e40225407ef560fd9d06d2903de37c83c2c": "Ybodychange",
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9": "Ybodychange",
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c28b535e91cb73f7630230695ef52fdf655e46e4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5616: Remove remnants of cobertura usage\n",
      "commitDate": "20/04/18 11:55 AM",
      "commitName": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n     private void realExecute(String checkstyleVersion) {\n         // Create the root module\n         RootModule rootModule \u003d null;\n         try {\n             rootModule \u003d createRootModule();\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 rootModule.addListener(element);\n             }\n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             rootModule.addListener(warningCounter);\n \n             processFiles(rootModule, warningCounter, checkstyleVersion);\n         }\n         finally {\n-            destroyRootModule(rootModule);\n+            if (rootModule !\u003d null) {\n+                rootModule.destroy();\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute(String checkstyleVersion) {\n        // Create the root module\n        RootModule rootModule \u003d null;\n        try {\n            rootModule \u003d createRootModule();\n\n            // setup the listeners\n            final AuditListener[] listeners \u003d getListeners();\n            for (AuditListener element : listeners) {\n                rootModule.addListener(element);\n            }\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            rootModule.addListener(warningCounter);\n\n            processFiles(rootModule, warningCounter, checkstyleVersion);\n        }\n        finally {\n            if (rootModule !\u003d null) {\n                rootModule.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3530: allowed ant to override and swap checker",
      "commitDate": "28/01/17 2:54 PM",
      "commitName": "785ed054a6e14465f8b2b717d28ec1a700de23a1",
      "commitAuthor": "rnveach",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.35,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     private void realExecute(String checkstyleVersion) {\n-        // Create the checker\n-        Checker checker \u003d null;\n+        // Create the root module\n+        RootModule rootModule \u003d null;\n         try {\n-            checker \u003d createChecker();\n+            rootModule \u003d createRootModule();\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n-                checker.addListener(element);\n+                rootModule.addListener(element);\n             }\n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n-            checker.addListener(warningCounter);\n+            rootModule.addListener(warningCounter);\n \n-            processFiles(checker, warningCounter, checkstyleVersion);\n+            processFiles(rootModule, warningCounter, checkstyleVersion);\n         }\n         finally {\n-            destroyChecker(checker);\n+            destroyRootModule(rootModule);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute(String checkstyleVersion) {\n        // Create the root module\n        RootModule rootModule \u003d null;\n        try {\n            rootModule \u003d createRootModule();\n\n            // setup the listeners\n            final AuditListener[] listeners \u003d getListeners();\n            for (AuditListener element : listeners) {\n                rootModule.addListener(element);\n            }\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            rootModule.addListener(warningCounter);\n\n            processFiles(rootModule, warningCounter, checkstyleVersion);\n        }\n        finally {\n            destroyRootModule(rootModule);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "268665e6944469b55479a1bee817f99ec1bb144f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1487: workaround for cobertura at CheckstyleAntTask.java to get 100% coverage\n",
      "commitDate": "12/03/16 6:43 AM",
      "commitName": "268665e6944469b55479a1bee817f99ec1bb144f",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "09/03/16 1:09 PM",
      "commitNameOld": "8c0b8bba131d164af52a0bd28150905115ffddf7",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 2.73,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n     private void realExecute(String checkstyleVersion) {\n         // Create the checker\n         Checker checker \u003d null;\n         try {\n             checker \u003d createChecker();\n \n             // setup the listeners\n             final AuditListener[] listeners \u003d getListeners();\n             for (AuditListener element : listeners) {\n                 checker.addListener(element);\n             }\n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             checker.addListener(warningCounter);\n \n             processFiles(checker, warningCounter, checkstyleVersion);\n         }\n         finally {\n-            if (checker !\u003d null) {\n-                checker.destroy();\n-            }\n+            destroyChecker(checker);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute(String checkstyleVersion) {\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            // setup the listeners\n            final AuditListener[] listeners \u003d getListeners();\n            for (AuditListener element : listeners) {\n                checker.addListener(element);\n            }\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            processFiles(checker, warningCounter, checkstyleVersion);\n        }\n        finally {\n            destroyChecker(checker);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "3ef918920c58c550169ccef3cfe1706aede11a6e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
      "commitDate": "30/08/15 10:04 PM",
      "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
      "commitAuthor": "Ruslan Diachenko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
          "commitDate": "30/08/15 10:04 PM",
          "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "30/08/15 6:53 AM",
          "commitNameOld": "bf4a25317356219807eabad0e075934a287ed27e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,23 @@\n-    private void realExecute() {\n-        // output version info in debug mode\n-        final ResourceBundle compilationProperties \u003d ResourceBundle\n-                .getBundle(\"checkstylecompilation\");\n-        final String version \u003d compilationProperties\n-                .getString(\"checkstyle.compile.version\");\n-        final String compileTimestamp \u003d compilationProperties\n-                .getString(\"checkstyle.compile.timestamp\");\n-        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n-        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n-\n-        // Check for no arguments\n-        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n-            throw new BuildException(\n-                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                    getLocation());\n-        }\n-\n-        if (configLocation \u003d\u003d null) {\n-            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n-        }\n-\n+    private void realExecute(String checkstyleVersion) {\n         // Create the checker\n         Checker checker \u003d null;\n         try {\n             checker \u003d createChecker();\n \n+            // setup the listeners\n+            final AuditListener[] listeners \u003d getListeners();\n+            for (AuditListener element : listeners) {\n+                checker.addListener(element);\n+            }\n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             checker.addListener(warningCounter);\n \n-            processFiles(checker, warningCounter, version);\n+            processFiles(checker, warningCounter, checkstyleVersion);\n         }\n         finally {\n             if (checker !\u003d null) {\n                 checker.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void realExecute(String checkstyleVersion) {\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            // setup the listeners\n            final AuditListener[] listeners \u003d getListeners();\n            for (AuditListener element : listeners) {\n                checker.addListener(element);\n            }\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            processFiles(checker, warningCounter, checkstyleVersion);\n        }\n        finally {\n            if (checker !\u003d null) {\n                checker.destroy();\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[checkstyleVersion-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #1566: IllegalCatch violations fixed for CheckstyleAntTask\n",
          "commitDate": "30/08/15 10:04 PM",
          "commitName": "3ef918920c58c550169ccef3cfe1706aede11a6e",
          "commitAuthor": "Ruslan Diachenko",
          "commitDateOld": "30/08/15 6:53 AM",
          "commitNameOld": "bf4a25317356219807eabad0e075934a287ed27e",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,23 @@\n-    private void realExecute() {\n-        // output version info in debug mode\n-        final ResourceBundle compilationProperties \u003d ResourceBundle\n-                .getBundle(\"checkstylecompilation\");\n-        final String version \u003d compilationProperties\n-                .getString(\"checkstyle.compile.version\");\n-        final String compileTimestamp \u003d compilationProperties\n-                .getString(\"checkstyle.compile.timestamp\");\n-        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n-        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n-\n-        // Check for no arguments\n-        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n-            throw new BuildException(\n-                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                    getLocation());\n-        }\n-\n-        if (configLocation \u003d\u003d null) {\n-            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n-        }\n-\n+    private void realExecute(String checkstyleVersion) {\n         // Create the checker\n         Checker checker \u003d null;\n         try {\n             checker \u003d createChecker();\n \n+            // setup the listeners\n+            final AuditListener[] listeners \u003d getListeners();\n+            for (AuditListener element : listeners) {\n+                checker.addListener(element);\n+            }\n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             checker.addListener(warningCounter);\n \n-            processFiles(checker, warningCounter, version);\n+            processFiles(checker, warningCounter, checkstyleVersion);\n         }\n         finally {\n             if (checker !\u003d null) {\n                 checker.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void realExecute(String checkstyleVersion) {\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            // setup the listeners\n            final AuditListener[] listeners \u003d getListeners();\n            for (AuditListener element : listeners) {\n                checker.addListener(element);\n            }\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            processFiles(checker, warningCounter, checkstyleVersion);\n        }\n        finally {\n            if (checker !\u003d null) {\n                checker.destroy();\n            }\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Reducing CheckstyleAntTask\u0027s method length\n",
      "commitDate": "27/08/15 6:30 AM",
      "commitName": "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "25/08/15 4:00 PM",
      "commitNameOld": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 1.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,39 @@\n     private void realExecute() {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (configLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker checker \u003d null;\n         try {\n             checker \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             checker.addListener(warningCounter);\n \n-            // Process the files\n-            long startTime \u003d System.currentTimeMillis();\n-            final List\u003cFile\u003e files \u003d scanFileSets();\n-            long endTime \u003d System.currentTimeMillis();\n-            log(\"To locate the files took \" + (endTime - startTime) + TIME_SUFFIX,\n-                Project.MSG_VERBOSE);\n-\n-            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n-                    + \" files\", Project.MSG_INFO);\n-            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n-\n-            startTime \u003d System.currentTimeMillis();\n-            final int numErrs \u003d checker.process(files);\n-            endTime \u003d System.currentTimeMillis();\n-            log(\"To process the files took \" + (endTime - startTime) + TIME_SUFFIX,\n-                Project.MSG_VERBOSE);\n-            final int numWarnings \u003d warningCounter.getCount();\n-            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n-                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n-\n-            // Handle the return status\n-            if (!ok) {\n-                final String failureMsg \u003d\n-                        \"Got \" + numErrs + \" errors and \" + numWarnings\n-                                + \" warnings.\";\n-                if (failureProperty !\u003d null) {\n-                    getProject().setProperty(failureProperty, failureMsg);\n-                }\n-\n-                if (failOnViolation) {\n-                    throw new BuildException(failureMsg, getLocation());\n-                }\n-            }\n+            processFiles(checker, warningCounter, version);\n         }\n         finally {\n             if (checker !\u003d null) {\n                 checker.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute() {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            processFiles(checker, warningCounter, version);\n        }\n        finally {\n            if (checker !\u003d null) {\n                checker.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "085ce12db0983590844ccc24ea49f91686a30ed8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: MultipleStringLiterals violations fixed\n",
      "commitDate": "25/08/15 4:00 PM",
      "commitName": "085ce12db0983590844ccc24ea49f91686a30ed8",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "25/08/15 4:39 AM",
      "commitNameOld": "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.47,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     private void realExecute() {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (configLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker checker \u003d null;\n         try {\n             checker \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             checker.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n-            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n+            log(\"To locate the files took \" + (endTime - startTime) + TIME_SUFFIX,\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d checker.process(files);\n             endTime \u003d System.currentTimeMillis();\n-            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n+            log(\"To process the files took \" + (endTime - startTime) + TIME_SUFFIX,\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (failureProperty !\u003d null) {\n                     getProject().setProperty(failureProperty, failureMsg);\n                 }\n \n                 if (failOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (checker !\u003d null) {\n                 checker.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute() {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + TIME_SUFFIX,\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d checker.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + TIME_SUFFIX,\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (failureProperty !\u003d null) {\n                    getProject().setProperty(failureProperty, failureMsg);\n                }\n\n                if (failOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (checker !\u003d null) {\n                checker.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "f1e80e4ecae727087ca135dfd02f72e2d6213efb": {
      "type": "Ybodychange",
      "commitMessage": "Rename variables with \u0027standard\u0027 names of unexpected types. #1555\n\nFixes `StandardVariableNames` inspection violations.\n\nDescription:\n\u003eReports on any variables with \u0027standard\u0027 names which are of unexpected types. Such names may be confusing. Standard names and types are as follows:\n* i, j, k, m, n - int\n* f - float\n* d - double\n* b - byte\n* c, ch - char\n* l - long\n* s, str - String\n",
      "commitDate": "07/08/15 9:38 PM",
      "commitName": "f1e80e4ecae727087ca135dfd02f72e2d6213efb",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/08/15 9:18 PM",
      "commitNameOld": "546f336e25b26d072f96e2cda139b885858ed5b0",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     private void realExecute() {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (configLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n-        Checker c \u003d null;\n+        Checker checker \u003d null;\n         try {\n-            c \u003d createChecker();\n+            checker \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n-            c.addListener(warningCounter);\n+            checker.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n-            final int numErrs \u003d c.process(files);\n+            final int numErrs \u003d checker.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (failureProperty !\u003d null) {\n                     getProject().setProperty(failureProperty, failureMsg);\n                 }\n \n                 if (failOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n-            if (c !\u003d null) {\n-                c.destroy();\n+            if (checker !\u003d null) {\n+                checker.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute() {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker checker \u003d null;\n        try {\n            checker \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            checker.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d checker.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (failureProperty !\u003d null) {\n                    getProject().setProperty(failureProperty, failureMsg);\n                }\n\n                if (failOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (checker !\u003d null) {\n                checker.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "500bf308fac4adc61bd3087a664779c8622efb3b": {
      "type": "Yfilerename",
      "commitMessage": "Rename CheckStyleTask to CheckstyleAntTask. #1108\n",
      "commitDate": "07/06/15 10:38 AM",
      "commitName": "500bf308fac4adc61bd3087a664779c8622efb3b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "07/06/15 8:42 AM",
      "commitNameOld": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0",
      "commitAuthorOld": "Bhavik Patel",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void realExecute() {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (failureProperty !\u003d null) {\n                    getProject().setProperty(failureProperty, failureMsg);\n                }\n\n                if (failOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java"
      }
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n-        if ((fileName \u003d\u003d null) \u0026\u0026 fileSets.isEmpty()) {\n+        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (configLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n-            final boolean ok \u003d (numErrs \u003c\u003d maxErrors)\n-                    \u0026\u0026 (numWarnings \u003c\u003d maxWarnings);\n+            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n+                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (failureProperty !\u003d null) {\n                     getProject().setProperty(failureProperty, failureMsg);\n                 }\n \n                 if (failOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if (fileName \u003d\u003d null \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d maxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d maxWarnings;\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (failureProperty !\u003d null) {\n                    getProject().setProperty(failureProperty, failureMsg);\n                }\n\n                if (failOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1": {
      "type": "Ybodychange",
      "commitMessage": "Prefixes, checkstyle, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java\n",
      "commitDate": "19/01/15 6:38 AM",
      "commitName": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1",
      "commitAuthor": "alexkravin",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 320.89,
      "commitsBetweenForRepo": 476,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n-        if ((mFileName \u003d\u003d null) \u0026\u0026 mFileSets.isEmpty()) {\n+        if ((fileName \u003d\u003d null) \u0026\u0026 fileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n-        if (mConfigLocation \u003d\u003d null) {\n+        if (configLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n-            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n+            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n-            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n-                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n+            final boolean ok \u003d (numErrs \u003c\u003d maxErrors)\n+                    \u0026\u0026 (numWarnings \u003c\u003d maxWarnings);\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n-                if (mFailureProperty !\u003d null) {\n-                    getProject().setProperty(mFailureProperty, failureMsg);\n+                if (failureProperty !\u003d null) {\n+                    getProject().setProperty(failureProperty, failureMsg);\n                 }\n \n-                if (mFailOnViolation) {\n+                if (failOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((fileName \u003d\u003d null) \u0026\u0026 fileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (configLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d maxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d maxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (failureProperty !\u003d null) {\n                    getProject().setProperty(failureProperty, failureMsg);\n                }\n\n                if (failOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 mFileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (mFailureProperty !\u003d null) {\n                    getProject().setProperty(mFailureProperty, failureMsg);\n                }\n\n                if (mFailOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java"
      }
    },
    "1d614c3a7ecf8a3ede4df8a50da46e71792d0025": {
      "type": "Ybodychange",
      "commitMessage": "poartial fix for #46 - Sonarqube found problems in Checkstyle\n",
      "commitDate": "05/12/13 9:12 AM",
      "commitName": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "06/10/13 11:31 PM",
      "commitNameOld": "07939ec7261d7e9e7c8d1492090d6d19d5f98887",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n-        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n+        if ((mFileName \u003d\u003d null) \u0026\u0026 mFileSets.isEmpty()) {\n             throw new BuildException(\n                     \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                     \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (mFailureProperty !\u003d null) {\n                     getProject().setProperty(mFailureProperty, failureMsg);\n                 }\n \n                 if (mFailOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 mFileSets.isEmpty()) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (mFailureProperty !\u003d null) {\n                    getProject().setProperty(mFailureProperty, failureMsg);\n                }\n\n                if (mFailOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "c876d2431e56405371b93c814de33c350766266d": {
      "type": "Ybodychange",
      "commitMessage": "Correct typos\n\nMany fixes to the documentation.\n",
      "commitDate": "06/10/13 1:35 PM",
      "commitName": "c876d2431e56405371b93c814de33c350766266d",
      "commitAuthor": "Andrew Gaul",
      "commitDateOld": "10/09/13 4:11 AM",
      "commitNameOld": "b0c33771f097f4895746eaddd40cb159e5bc5bee",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 26.39,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n-                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n+                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                     \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (mFailureProperty !\u003d null) {\n                     getProject().setProperty(mFailureProperty, failureMsg);\n                 }\n \n                 if (mFailOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify at least one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (mFailureProperty !\u003d null) {\n                    getProject().setProperty(mFailureProperty, failureMsg);\n                }\n\n                if (mFailOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f38d8abd42c3e824635e542e6031b3da1997c02e": {
      "type": "Ybodychange",
      "commitMessage": "Removed a native array in favour of a List\u003cFile\u003e -- was it worth it??\n\nAdded @Override where possible -- did this as I got bitten by a subtle bug when making the first change. The @Override would have prevented it.\n",
      "commitDate": "19/12/07 10:21 PM",
      "commitName": "f38d8abd42c3e824635e542e6031b3da1997c02e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/12/07 2:28 AM",
      "commitNameOld": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                     \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n-            final File[] files \u003d scanFileSets();\n+            final List\u003cFile\u003e files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n-            log(\"Running Checkstyle \" + version + \" on \" + files.length\n+            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                     \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n \n             // Handle the return status\n             if (!ok) {\n                 final String failureMsg \u003d\n                         \"Got \" + numErrs + \" errors and \" + numWarnings\n                                 + \" warnings.\";\n                 if (mFailureProperty !\u003d null) {\n                     getProject().setProperty(mFailureProperty, failureMsg);\n                 }\n \n                 if (mFailOnViolation) {\n                     throw new BuildException(failureMsg, getLocation());\n                 }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final List\u003cFile\u003e files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.size()\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (mFailureProperty !\u003d null) {\n                    getProject().setProperty(mFailureProperty, failureMsg);\n                }\n\n                if (mFailOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "02da493e64154d6bbac09a64d67a025f0e72cad1": {
      "type": "Ybodychange",
      "commitMessage": "Set the \"failureProperty\" with a meaningful message (feature request 1725475).\n",
      "commitDate": "03/06/07 8:04 PM",
      "commitName": "02da493e64154d6bbac09a64d67a025f0e72cad1",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 127.51,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,72 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                     \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final File[] files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.length\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                     \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n \n             // Handle the return status\n-            if (!ok \u0026\u0026 (mFailureProperty !\u003d null)) {\n-                getProject().setProperty(mFailureProperty, \"true\");\n-            }\n+            if (!ok) {\n+                final String failureMsg \u003d\n+                        \"Got \" + numErrs + \" errors and \" + numWarnings\n+                                + \" warnings.\";\n+                if (mFailureProperty !\u003d null) {\n+                    getProject().setProperty(mFailureProperty, failureMsg);\n+                }\n \n-            if (!ok \u0026\u0026 mFailOnViolation) {\n-                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n-                        + numWarnings + \" warnings.\", getLocation());\n+                if (mFailOnViolation) {\n+                    throw new BuildException(failureMsg, getLocation());\n+                }\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final File[] files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok) {\n                final String failureMsg \u003d\n                        \"Got \" + numErrs + \" errors and \" + numWarnings\n                                + \" warnings.\";\n                if (mFailureProperty !\u003d null) {\n                    getProject().setProperty(mFailureProperty, failureMsg);\n                }\n\n                if (mFailOnViolation) {\n                    throw new BuildException(failureMsg, getLocation());\n                }\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "17/06/06 7:18 AM",
      "commitNameOld": "81b52e27c5077f9a4f426d32b0e39a785052c715",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 19.55,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                     \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             long startTime \u003d System.currentTimeMillis();\n             final File[] files \u003d scanFileSets();\n             long endTime \u003d System.currentTimeMillis();\n             log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.length\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n             endTime \u003d System.currentTimeMillis();\n             log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                 Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n-            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n-                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n+            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n+                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n \n             // Handle the return status\n-            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n+            if (!ok \u0026\u0026 (mFailureProperty !\u003d null)) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                         + numWarnings + \" warnings.\", getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final File[] files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d (numErrs \u003c\u003d mMaxErrors)\n                    \u0026\u0026 (numWarnings \u003c\u003d mMaxWarnings);\n\n            // Handle the return status\n            if (!ok \u0026\u0026 (mFailureProperty !\u003d null)) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\", getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "81b52e27c5077f9a4f426d32b0e39a785052c715": {
      "type": "Ybodychange",
      "commitMessage": "Stop creating duplicate regular expression patterns.\n",
      "commitDate": "17/06/06 7:18 AM",
      "commitName": "81b52e27c5077f9a4f426d32b0e39a785052c715",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 228.79,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,68 @@\n     private void realExecute()\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d ResourceBundle\n                 .getBundle(\"checkstylecompilation\");\n         final String version \u003d compilationProperties\n                 .getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d compilationProperties\n                 .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                     \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                     getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                 new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n+            long startTime \u003d System.currentTimeMillis();\n             final File[] files \u003d scanFileSets();\n+            long endTime \u003d System.currentTimeMillis();\n+            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n+                Project.MSG_VERBOSE);\n \n             log(\"Running Checkstyle \" + version + \" on \" + files.length\n                     + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n+            startTime \u003d System.currentTimeMillis();\n             final int numErrs \u003d c.process(files);\n+            endTime \u003d System.currentTimeMillis();\n+            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n+                Project.MSG_VERBOSE);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                         + numWarnings + \" warnings.\", getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            long startTime \u003d System.currentTimeMillis();\n            final File[] files \u003d scanFileSets();\n            long endTime \u003d System.currentTimeMillis();\n            log(\"To locate the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            startTime \u003d System.currentTimeMillis();\n            final int numErrs \u003d c.process(files);\n            endTime \u003d System.currentTimeMillis();\n            log(\"To process the files took \" + (endTime - startTime) + \" ms.\",\n                Project.MSG_VERBOSE);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\", getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange)",
      "commitMessage": "Fix for infrastructure class loader. Needs to be verified by Lars (of\nEclipse plug-in fame! :-)\n",
      "commitDate": "25/09/05 3:50 AM",
      "commitName": "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c",
      "commitAuthor": "Oliver Burn",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Fix for infrastructure class loader. Needs to be verified by Lars (of\nEclipse plug-in fame! :-)\n",
          "commitDate": "25/09/05 3:50 AM",
          "commitName": "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "17/07/05 4:03 AM",
          "commitNameOld": "adce874628730a881c533bb04db2688d03a60fc6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 69.99,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,60 @@\n-    public void execute()\n-        throws BuildException\n+    private void realExecute()\n     {\n         // output version info in debug mode\n-        final ResourceBundle compilationProperties \u003d\n-            ResourceBundle.getBundle(\"checkstylecompilation\");\n-        final String version \u003d\n-            compilationProperties.getString(\"checkstyle.compile.version\");\n-        final String compileTimestamp \u003d\n-            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n+        final ResourceBundle compilationProperties \u003d ResourceBundle\n+                .getBundle(\"checkstylecompilation\");\n+        final String version \u003d compilationProperties\n+                .getString(\"checkstyle.compile.version\");\n+        final String compileTimestamp \u003d compilationProperties\n+                .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n-                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                getLocation());\n+                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n+                    getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n-                    new SeverityLevelCounter(SeverityLevel.WARNING);\n+                new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n \n-            log(\"Running Checkstyle \" + version\n-                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n+            log(\"Running Checkstyle \" + version + \" on \" + files.length\n+                    + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n-                throw new BuildException(\n-                        \"Got \" + numErrs + \" errors and \"\n-                        + numWarnings + \" warnings.\",\n-                                         getLocation());\n+                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n+                        + numWarnings + \" warnings.\", getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\", getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
          "extendedDetails": {
            "oldValue": "execute",
            "newValue": "realExecute"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix for infrastructure class loader. Needs to be verified by Lars (of\nEclipse plug-in fame! :-)\n",
          "commitDate": "25/09/05 3:50 AM",
          "commitName": "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "17/07/05 4:03 AM",
          "commitNameOld": "adce874628730a881c533bb04db2688d03a60fc6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 69.99,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,60 @@\n-    public void execute()\n-        throws BuildException\n+    private void realExecute()\n     {\n         // output version info in debug mode\n-        final ResourceBundle compilationProperties \u003d\n-            ResourceBundle.getBundle(\"checkstylecompilation\");\n-        final String version \u003d\n-            compilationProperties.getString(\"checkstyle.compile.version\");\n-        final String compileTimestamp \u003d\n-            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n+        final ResourceBundle compilationProperties \u003d ResourceBundle\n+                .getBundle(\"checkstylecompilation\");\n+        final String version \u003d compilationProperties\n+                .getString(\"checkstyle.compile.version\");\n+        final String compileTimestamp \u003d compilationProperties\n+                .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n-                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                getLocation());\n+                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n+                    getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n-                    new SeverityLevelCounter(SeverityLevel.WARNING);\n+                new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n \n-            log(\"Running Checkstyle \" + version\n-                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n+            log(\"Running Checkstyle \" + version + \" on \" + files.length\n+                    + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n-                throw new BuildException(\n-                        \"Got \" + numErrs + \" errors and \"\n-                        + numWarnings + \" warnings.\",\n-                                         getLocation());\n+                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n+                        + numWarnings + \" warnings.\", getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\", getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Fix for infrastructure class loader. Needs to be verified by Lars (of\nEclipse plug-in fame! :-)\n",
          "commitDate": "25/09/05 3:50 AM",
          "commitName": "8fe7c3a914d75fa7b20fb5115b08dade9ed7c88c",
          "commitAuthor": "Oliver Burn",
          "commitDateOld": "17/07/05 4:03 AM",
          "commitNameOld": "adce874628730a881c533bb04db2688d03a60fc6",
          "commitAuthorOld": "Oliver Burn",
          "daysBetweenCommits": 69.99,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,60 @@\n-    public void execute()\n-        throws BuildException\n+    private void realExecute()\n     {\n         // output version info in debug mode\n-        final ResourceBundle compilationProperties \u003d\n-            ResourceBundle.getBundle(\"checkstylecompilation\");\n-        final String version \u003d\n-            compilationProperties.getString(\"checkstyle.compile.version\");\n-        final String compileTimestamp \u003d\n-            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n+        final ResourceBundle compilationProperties \u003d ResourceBundle\n+                .getBundle(\"checkstylecompilation\");\n+        final String version \u003d compilationProperties\n+                .getString(\"checkstyle.compile.version\");\n+        final String compileTimestamp \u003d compilationProperties\n+                .getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n-                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                getLocation());\n+                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n+                    getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n-                    new SeverityLevelCounter(SeverityLevel.WARNING);\n+                new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n \n-            log(\"Running Checkstyle \" + version\n-                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n+            log(\"Running Checkstyle \" + version + \" on \" + files.length\n+                    + \" files\", Project.MSG_INFO);\n             log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n-                throw new BuildException(\n-                        \"Got \" + numErrs + \" errors and \"\n-                        + numWarnings + \" warnings.\",\n-                                         getLocation());\n+                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n+                        + numWarnings + \" warnings.\", getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void realExecute()\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d ResourceBundle\n                .getBundle(\"checkstylecompilation\");\n        final String version \u003d compilationProperties\n                .getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d compilationProperties\n                .getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                    \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                    getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n\n            log(\"Running Checkstyle \" + version + \" on \" + files.length\n                    + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\", getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
          "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
          "extendedDetails": {
            "oldValue": "[BuildException]",
            "newValue": "[]"
          }
        }
      ]
    },
    "2dec3ca7aec1fc33f66c6864c39aa104739992aa": {
      "type": "Ybodychange",
      "commitMessage": "I swear I usually don\u0027t make mistakes like this :-)\n",
      "commitDate": "03/04/05 9:17 PM",
      "commitName": "2dec3ca7aec1fc33f66c6864c39aa104739992aa",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "03/04/05 1:52 AM",
      "commitNameOld": "a7684f8ad5b487933c41c714ac12a430a85dd5af",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     public void execute()\n         throws BuildException\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d\n             ResourceBundle.getBundle(\"checkstylecompilation\");\n         final String version \u003d\n             compilationProperties.getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d\n             compilationProperties.getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                     new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n \n             log(\"Running Checkstyle \" + version\n                     + \" on \" + files.length + \" files\", Project.MSG_INFO);\n-            log(\"Using configuration\" + mConfigLocation, Project.MSG_VERBOSE);\n+            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n \n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\n                         \"Got \" + numErrs + \" errors and \"\n                         + numWarnings + \" warnings.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                    new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n\n            log(\"Running Checkstyle \" + version\n                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n            log(\"Using configuration \" + mConfigLocation, Project.MSG_VERBOSE);\n\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\n                        \"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "a7684f8ad5b487933c41c714ac12a430a85dd5af": {
      "type": "Ybodychange",
      "commitMessage": "always print a summary line in Ant task (bug #1099573)\n",
      "commitDate": "03/04/05 1:52 AM",
      "commitName": "a7684f8ad5b487933c41c714ac12a430a85dd5af",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 83.96,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,63 @@\n     public void execute()\n         throws BuildException\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d\n             ResourceBundle.getBundle(\"checkstylecompilation\");\n         final String version \u003d\n             compilationProperties.getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d\n             compilationProperties.getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n             final SeverityLevelCounter warningCounter \u003d\n                     new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n+\n+            log(\"Running Checkstyle \" + version\n+                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n+            log(\"Using configuration\" + mConfigLocation, Project.MSG_VERBOSE);\n+\n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\n                         \"Got \" + numErrs + \" errors and \"\n                         + numWarnings + \" warnings.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                    new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n\n            log(\"Running Checkstyle \" + version\n                    + \" on \" + files.length + \" files\", Project.MSG_INFO);\n            log(\"Using configuration\" + mConfigLocation, Project.MSG_VERBOSE);\n\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\n                        \"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "21/07/04 4:53 AM",
      "commitNameOld": "09dd78602f86ca6c996d1a79672c7614c5e42b96",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n     public void execute()\n         throws BuildException\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d\n             ResourceBundle.getBundle(\"checkstylecompilation\");\n         final String version \u003d\n             compilationProperties.getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d\n             compilationProperties.getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n-            SeverityLevelCounter warningCounter \u003d\n+            final SeverityLevelCounter warningCounter \u003d\n                     new SeverityLevelCounter(SeverityLevel.WARNING);\n             c.addListener(warningCounter);\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n             final int numWarnings \u003d warningCounter.getCount();\n             final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                     \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n             if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if (!ok \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\n                         \"Got \" + numErrs + \" errors and \"\n                         + numWarnings + \" warnings.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            final SeverityLevelCounter warningCounter \u003d\n                    new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\n                        \"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "c1a79b112296dac813d0b4326043590f2eb2c378": {
      "type": "Ybodychange",
      "commitMessage": "Added attributes maxErrors and maxWarnings to Ant task to allow finetuning of failure behaviour (request 783538)\nRefactored Checker to use new SeverityLevelCounter class instead of implementing the same funtionality in private inner class\n",
      "commitDate": "12/04/04 3:54 AM",
      "commitName": "c1a79b112296dac813d0b4326043590f2eb2c378",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 88.57,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,58 @@\n     public void execute()\n         throws BuildException\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d\n             ResourceBundle.getBundle(\"checkstylecompilation\");\n         final String version \u003d\n             compilationProperties.getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d\n             compilationProperties.getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             c \u003d createChecker();\n \n+            SeverityLevelCounter warningCounter \u003d\n+                    new SeverityLevelCounter(SeverityLevel.WARNING);\n+            c.addListener(warningCounter);\n+\n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n+            final int numWarnings \u003d warningCounter.getCount();\n+            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n+                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n \n             // Handle the return status\n-            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n+            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n-            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n-                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n+            if (!ok \u0026\u0026 mFailOnViolation) {\n+                throw new BuildException(\n+                        \"Got \" + numErrs + \" errors and \"\n+                        + numWarnings + \" warnings.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            SeverityLevelCounter warningCounter \u003d\n                    new SeverityLevelCounter(SeverityLevel.WARNING);\n            c.addListener(warningCounter);\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n            final int numWarnings \u003d warningCounter.getCount();\n            final boolean ok \u003d numErrs \u003c\u003d mMaxErrors\n                    \u0026\u0026 numWarnings \u003c\u003d mMaxWarnings;\n\n            // Handle the return status\n            if (!ok \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if (!ok \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\n                        \"Got \" + numErrs + \" errors and \"\n                        + numWarnings + \" warnings.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "b1123e96e452b41c5fb22de20bb7a99d376d0380": {
      "type": "Ybodychange",
      "commitMessage": "Small refactoring to reduce cyclomatic complexity of CheckStyleTask.execute().\n",
      "commitDate": "26/09/03 8:34 PM",
      "commitName": "b1123e96e452b41c5fb22de20bb7a99d376d0380",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "18/07/03 4:31 AM",
      "commitNameOld": "dd477210aefeabb265e105a9fe8120c8310605e8",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 70.67,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,49 @@\n     public void execute()\n         throws BuildException\n     {\n         // output version info in debug mode\n         final ResourceBundle compilationProperties \u003d\n             ResourceBundle.getBundle(\"checkstylecompilation\");\n         final String version \u003d\n             compilationProperties.getString(\"checkstyle.compile.version\");\n         final String compileTimestamp \u003d\n             compilationProperties.getString(\"checkstyle.compile.timestamp\");\n         log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n         log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n \n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n-            try {\n-                final Properties props \u003d createOverridingProperties();\n-                final Configuration config \u003d\n-                    ConfigurationLoader.loadConfiguration(\n-                        mConfigLocation, new PropertiesExpander(props));\n-\n-                final DefaultContext context \u003d new DefaultContext();\n-                final ClassLoader loader \u003d\n-                    new AntClassLoader(getProject(), mClasspath);\n-                context.add(\"classloader\", loader);\n-\n-                c \u003d new Checker();\n-\n-                //load the set of package names\n-                if (mPackageNamesFile !\u003d null) {\n-                    final ModuleFactory moduleFactory \u003d\n-                        PackageNamesLoader.loadModuleFactory(\n-                            mPackageNamesFile.getAbsolutePath());\n-                    c.setModuleFactory(moduleFactory);\n-                }\n-                c.contextualize(context);\n-                c.configure(config);\n-\n-                // setup the listeners\n-                final AuditListener[] listeners \u003d getListeners();\n-                for (int i \u003d 0; i \u003c listeners.length; i++) {\n-                    c.addListener(listeners[i]);\n-                }\n-            }\n-            catch (Exception e) {\n-                throw new BuildException(\n-                    \"Unable to create a Checker: \" + e.getMessage(), e);\n-            }\n+            c \u003d createChecker();\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            c \u003d createChecker();\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "ba1663fc94f753cbfec512259a4ab304bdef7e9f": {
      "type": "Ybodychange",
      "commitMessage": "rfe #528196, task should output version info\n",
      "commitDate": "29/03/03 5:39 AM",
      "commitName": "ba1663fc94f753cbfec512259a4ab304bdef7e9f",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/03/03 4:29 PM",
      "commitNameOld": "f09c190dff9530b6b47ec14b3ac6d2162ba77b26",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,81 @@\n     public void execute()\n         throws BuildException\n     {\n+        // output version info in debug mode\n+        final ResourceBundle compilationProperties \u003d\n+            ResourceBundle.getBundle(\"checkstylecompilation\");\n+        final String version \u003d\n+            compilationProperties.getString(\"checkstyle.compile.version\");\n+        final String compileTimestamp \u003d\n+            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n+        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n+        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n+\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n                         mConfigLocation, new PropertiesExpander(props));\n \n                 final DefaultContext context \u003d new DefaultContext();\n                 final ClassLoader loader \u003d\n                     new AntClassLoader(getProject(), mClasspath);\n                 context.add(\"classloader\", loader);\n \n                 c \u003d new Checker();\n \n                 //load the set of package names\n                 if (mPackageNamesFile !\u003d null) {\n                     final ModuleFactory moduleFactory \u003d\n                         PackageNamesLoader.loadModuleFactory(\n                             mPackageNamesFile.getAbsolutePath());\n                     c.setModuleFactory(moduleFactory);\n                 }\n                 c.contextualize(context);\n                 c.configure(config);\n \n                 // setup the listeners\n                 final AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // output version info in debug mode\n        final ResourceBundle compilationProperties \u003d\n            ResourceBundle.getBundle(\"checkstylecompilation\");\n        final String version \u003d\n            compilationProperties.getString(\"checkstyle.compile.version\");\n        final String compileTimestamp \u003d\n            compilationProperties.getString(\"checkstyle.compile.timestamp\");\n        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);\n        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);\n\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigLocation, new PropertiesExpander(props));\n\n                final DefaultContext context \u003d new DefaultContext();\n                final ClassLoader loader \u003d\n                    new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n\n                //load the set of package names\n                if (mPackageNamesFile !\u003d null) {\n                    final ModuleFactory moduleFactory \u003d\n                        PackageNamesLoader.loadModuleFactory(\n                            mPackageNamesFile.getAbsolutePath());\n                    c.setModuleFactory(moduleFactory);\n                }\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                final AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f09c190dff9530b6b47ec14b3ac6d2162ba77b26": {
      "type": "Ybodychange",
      "commitMessage": "Added support for metadata in the configuration file. This required increasing\nthe version number to 1.1. I thought this made sense, even though the change\nwas backwardly compatible.\n",
      "commitDate": "28/03/03 4:29 PM",
      "commitName": "f09c190dff9530b6b47ec14b3ac6d2162ba77b26",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "23/02/03 4:29 AM",
      "commitNameOld": "47802121745d9113b54cdb2d8ccef59e74ce3e72",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 33.5,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n                         mConfigLocation, new PropertiesExpander(props));\n \n-                DefaultContext context \u003d new DefaultContext();\n-                ClassLoader loader \u003d\n+                final DefaultContext context \u003d new DefaultContext();\n+                final ClassLoader loader \u003d\n                     new AntClassLoader(getProject(), mClasspath);\n                 context.add(\"classloader\", loader);\n \n                 c \u003d new Checker();\n-                \n+\n                 //load the set of package names\n                 if (mPackageNamesFile !\u003d null) {\n-                    ModuleFactory moduleFactory \u003d\n+                    final ModuleFactory moduleFactory \u003d\n                         PackageNamesLoader.loadModuleFactory(\n-                        mPackageNamesFile.getAbsolutePath());\n+                            mPackageNamesFile.getAbsolutePath());\n                     c.setModuleFactory(moduleFactory);\n                 }\n                 c.contextualize(context);\n                 c.configure(config);\n \n                 // setup the listeners\n-                AuditListener[] listeners \u003d getListeners();\n+                final AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigLocation, new PropertiesExpander(props));\n\n                final DefaultContext context \u003d new DefaultContext();\n                final ClassLoader loader \u003d\n                    new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n\n                //load the set of package names\n                if (mPackageNamesFile !\u003d null) {\n                    final ModuleFactory moduleFactory \u003d\n                        PackageNamesLoader.loadModuleFactory(\n                            mPackageNamesFile.getAbsolutePath());\n                    c.setModuleFactory(moduleFactory);\n                }\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                final AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "47802121745d9113b54cdb2d8ccef59e74ce3e72": {
      "type": "Ybodychange",
      "commitMessage": "use a PropertyResolver interface instead of using Properties directly\n",
      "commitDate": "23/02/03 4:29 AM",
      "commitName": "47802121745d9113b54cdb2d8ccef59e74ce3e72",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "08/02/03 9:57 AM",
      "commitNameOld": "e853ed726fc5ea30084202fa72c8117147fedb2b",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 14.77,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n-                        mConfigLocation, props);\n+                        mConfigLocation, new PropertiesExpander(props));\n \n                 DefaultContext context \u003d new DefaultContext();\n                 ClassLoader loader \u003d\n                     new AntClassLoader(getProject(), mClasspath);\n                 context.add(\"classloader\", loader);\n \n                 c \u003d new Checker();\n                 \n                 //load the set of package names\n                 if (mPackageNamesFile !\u003d null) {\n                     ModuleFactory moduleFactory \u003d\n                         PackageNamesLoader.loadModuleFactory(\n                         mPackageNamesFile.getAbsolutePath());\n                     c.setModuleFactory(moduleFactory);\n                 }\n                 c.contextualize(context);\n                 c.configure(config);\n \n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigLocation, new PropertiesExpander(props));\n\n                DefaultContext context \u003d new DefaultContext();\n                ClassLoader loader \u003d\n                    new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n                \n                //load the set of package names\n                if (mPackageNamesFile !\u003d null) {\n                    ModuleFactory moduleFactory \u003d\n                        PackageNamesLoader.loadModuleFactory(\n                        mPackageNamesFile.getAbsolutePath());\n                    c.setModuleFactory(moduleFactory);\n                }\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "e853ed726fc5ea30084202fa72c8117147fedb2b": {
      "type": "Ybodychange",
      "commitMessage": "added configuration loading from URLs, RFE #682140\n",
      "commitDate": "08/02/03 9:57 AM",
      "commitName": "e853ed726fc5ea30084202fa72c8117147fedb2b",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/01/03 11:56 AM",
      "commitNameOld": "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 10.92,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n-        if (mConfigFile \u003d\u003d null) {\n+        if (mConfigLocation \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n-                        mConfigFile.getAbsolutePath(), props);\n+                        mConfigLocation, props);\n \n                 DefaultContext context \u003d new DefaultContext();\n                 ClassLoader loader \u003d\n                     new AntClassLoader(getProject(), mClasspath);\n                 context.add(\"classloader\", loader);\n \n                 c \u003d new Checker();\n                 \n                 //load the set of package names\n                 if (mPackageNamesFile !\u003d null) {\n                     ModuleFactory moduleFactory \u003d\n                         PackageNamesLoader.loadModuleFactory(\n                         mPackageNamesFile.getAbsolutePath());\n                     c.setModuleFactory(moduleFactory);\n                 }\n                 c.contextualize(context);\n                 c.configure(config);\n \n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigLocation \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigLocation, props);\n\n                DefaultContext context \u003d new DefaultContext();\n                ClassLoader loader \u003d\n                    new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n                \n                //load the set of package names\n                if (mPackageNamesFile !\u003d null) {\n                    ModuleFactory moduleFactory \u003d\n                        PackageNamesLoader.loadModuleFactory(\n                        mPackageNamesFile.getAbsolutePath());\n                    c.setModuleFactory(moduleFactory);\n                }\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "44ad8ceedb46e06938ec7962f168835756db31c9": {
      "type": "Ybodychange",
      "commitMessage": "added attribute \"packageNamesFile\" to checkstyle task element\n",
      "commitDate": "19/12/02 3:27 PM",
      "commitName": "44ad8ceedb46e06938ec7962f168835756db31c9",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "08/12/02 9:39 AM",
      "commitNameOld": "ec0085226c3762e2d0d786ba1181e4e1d0496c0c",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 11.24,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,71 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n                         mConfigFile.getAbsolutePath(), props);\n \n                 DefaultContext context \u003d new DefaultContext();\n                 ClassLoader loader \u003d\n                     new AntClassLoader(getProject(), mClasspath);\n                 context.add(\"classloader\", loader);\n \n                 c \u003d new Checker();\n+                \n+                //load the set of package names\n+                if (mPackageNamesFile !\u003d null) {\n+                    ModuleFactory moduleFactory \u003d\n+                        PackageNamesLoader.loadModuleFactory(\n+                        mPackageNamesFile.getAbsolutePath());\n+                    c.setModuleFactory(moduleFactory);\n+                }\n                 c.contextualize(context);\n                 c.configure(config);\n \n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigFile.getAbsolutePath(), props);\n\n                DefaultContext context \u003d new DefaultContext();\n                ClassLoader loader \u003d\n                    new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n                \n                //load the set of package names\n                if (mPackageNamesFile !\u003d null) {\n                    ModuleFactory moduleFactory \u003d\n                        PackageNamesLoader.loadModuleFactory(\n                        mPackageNamesFile.getAbsolutePath());\n                    c.setModuleFactory(moduleFactory);\n                }\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "6ffc8dd26075456b055ffcd35d3915c23049bfbb": {
      "type": "Ybodychange",
      "commitMessage": "avalonization\n",
      "commitDate": "30/11/02 10:29 AM",
      "commitName": "6ffc8dd26075456b055ffcd35d3915c23049bfbb",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "22/11/02 5:43 AM",
      "commitNameOld": "2d1cc52679a3dbc51f404cb2af2d91ed6c67d2b8",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 8.2,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,62 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n                         mConfigFile.getAbsolutePath(), props);\n-                config.setClassLoader(new AntClassLoader(getProject(),\n-                                      mClasspath));\n-                c \u003d new Checker(config);\n+\n+                DefaultContext context \u003d new DefaultContext();\n+                ClassLoader loader \u003d new AntClassLoader(getProject(), mClasspath);\n+                context.add(\"classloader\", loader);\n+\n+                c \u003d new Checker();\n+                c.contextualize(context);\n+                c.configure(config);\n+\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigFile.getAbsolutePath(), props);\n\n                DefaultContext context \u003d new DefaultContext();\n                ClassLoader loader \u003d new AntClassLoader(getProject(), mClasspath);\n                context.add(\"classloader\", loader);\n\n                c \u003d new Checker();\n                c.contextualize(context);\n                c.configure(config);\n\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "822384a711290170148b43b5ae390dd4e8cfaf4f": {
      "type": "Ybodychange",
      "commitMessage": "Changed signature of Checker.process(String[]) to process(File[])\n\nThis is a step towards making TreeWalker a FileSetCheck, next some\nmethods need to be moved around.\n",
      "commitDate": "16/11/02 10:48 PM",
      "commitName": "822384a711290170148b43b5ae390dd4e8cfaf4f",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "16/11/02 11:38 AM",
      "commitNameOld": "2debda611fe487021711aa4acce56651799a778f",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.47,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Properties props \u003d createOverridingProperties();\n                 final Configuration config \u003d\n                     ConfigurationLoader.loadConfiguration(\n                         mConfigFile.getAbsolutePath(), props);\n                 config.setClassLoader(new AntClassLoader(getProject(),\n                                       mClasspath));\n                 c \u003d new Checker(config);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n-            final String[] files \u003d scanFileSets();\n+            final File[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigFile.getAbsolutePath(), props);\n                config.setClassLoader(new AntClassLoader(getProject(),\n                                      mClasspath));\n                c \u003d new Checker(config);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final File[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "2debda611fe487021711aa4acce56651799a778f": {
      "type": "Ybodychange",
      "commitMessage": "Added overriding global properties\nNeeds testing, especially in ant with CheckstyleTask.\n",
      "commitDate": "16/11/02 11:38 AM",
      "commitName": "2debda611fe487021711aa4acce56651799a778f",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "14/11/02 2:07 AM",
      "commitNameOld": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n-                final GlobalProperties config \u003d createGlobalProperties();\n-                final CheckConfiguration[] checkConfigs \u003d\n-                    ConfigurationLoader.loadConfigs(\n-                        mConfigFile.getAbsolutePath());\n-                c \u003d new Checker(config, checkConfigs);\n+                final Properties props \u003d createOverridingProperties();\n+                final Configuration config \u003d\n+                    ConfigurationLoader.loadConfiguration(\n+                        mConfigFile.getAbsolutePath(), props);\n+                config.setClassLoader(new AntClassLoader(getProject(),\n+                                      mClasspath));\n+                c \u003d new Checker(config);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Properties props \u003d createOverridingProperties();\n                final Configuration config \u003d\n                    ConfigurationLoader.loadConfiguration(\n                        mConfigFile.getAbsolutePath(), props);\n                config.setClassLoader(new AntClassLoader(getProject(),\n                                      mClasspath));\n                c \u003d new Checker(config);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "6f4247181beca3530b5c2dc762d9c5c6a018a06c": {
      "type": "Ybodychange",
      "commitMessage": "rename Configuration to GlobalProperties\n",
      "commitDate": "14/11/02 2:07 AM",
      "commitName": "6f4247181beca3530b5c2dc762d9c5c6a018a06c",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "12/11/02 8:21 PM",
      "commitNameOld": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n-                final Configuration config \u003d createConfiguration();\n+                final GlobalProperties config \u003d createGlobalProperties();\n                 final CheckConfiguration[] checkConfigs \u003d\n                     ConfigurationLoader.loadConfigs(\n                         mConfigFile.getAbsolutePath());\n                 c \u003d new Checker(config, checkConfigs);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final GlobalProperties config \u003d createGlobalProperties();\n                final CheckConfiguration[] checkConfigs \u003d\n                    ConfigurationLoader.loadConfigs(\n                        mConfigFile.getAbsolutePath());\n                c \u003d new Checker(config, checkConfigs);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "4cbd709c019cf1b69796858506d673f7b66d37c7": {
      "type": "Ybodychange",
      "commitMessage": "This is a really enjoyable commit to make. I have finally got to remove the\nugly Verifier class. The only remaining check are based on the new fileset\ncheck that Lars putting together. Magic. :-)\n",
      "commitDate": "12/11/02 8:21 PM",
      "commitName": "4cbd709c019cf1b69796858506d673f7b66d37c7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "05/11/02 4:18 PM",
      "commitNameOld": "c9bcfe0be081433adaa7f8db0882d4f78246c646",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         if (mConfigFile \u003d\u003d null) {\n             throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 final Configuration config \u003d createConfiguration();\n                 final CheckConfiguration[] checkConfigs \u003d\n                     ConfigurationLoader.loadConfigs(\n                         mConfigFile.getAbsolutePath());\n                 c \u003d new Checker(config, checkConfigs);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\n                     \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n-            final int numErrs \u003d c.processNEW(files);\n+            final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Configuration config \u003d createConfiguration();\n                final CheckConfiguration[] checkConfigs \u003d\n                    ConfigurationLoader.loadConfigs(\n                        mConfigFile.getAbsolutePath());\n                c \u003d new Checker(config, checkConfigs);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "3288a81e30ddea194f76bd74f3b509500b864163": {
      "type": "Ybodychange",
      "commitMessage": "Just converted over the Checkstyle ANT task to use the new framework. In\nprocess I had to fix numerous errors now being reported.\n\nThere are some bugs with the method checks, which I will now investigate.\n",
      "commitDate": "02/11/02 4:22 AM",
      "commitName": "3288a81e30ddea194f76bd74f3b509500b864163",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/09/02 6:36 PM",
      "commitNameOld": "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 56.45,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,54 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n-        final Configuration config \u003d createConfiguration();\n+        if (mConfigFile \u003d\u003d null) {\n+            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n+        }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n-                c \u003d new Checker(config);\n+                final Configuration config \u003d createConfiguration();\n+                final CheckConfiguration[] checkConfigs \u003d\n+                    ConfigurationLoader.loadConfigs(\n+                        mConfigFile.getAbsolutePath());\n+                c \u003d new Checker(config, checkConfigs);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n-                throw new BuildException(\"Unable to create a Checker\", e);\n+                throw new BuildException(\n+                    \"Unable to create a Checker: \" + e.getMessage(), e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n-            final int numErrs \u003d c.process(files);\n+            final int numErrs \u003d c.processNEW(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        if (mConfigFile \u003d\u003d null) {\n            throw new BuildException(\"Must specify \u0027config\u0027.\", getLocation());\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                final Configuration config \u003d createConfiguration();\n                final CheckConfiguration[] checkConfigs \u003d\n                    ConfigurationLoader.loadConfigs(\n                        mConfigFile.getAbsolutePath());\n                c \u003d new Checker(config, checkConfigs);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\n                    \"Unable to create a Checker: \" + e.getMessage(), e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.processNEW(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9": {
      "type": "Ybodychange",
      "commitMessage": "Yet another refactor to have the ANT task support a nested \u003cproperty\u003e\nelement. This let me remove the ugly have I put in to support relative\npaths. Got the idea from Vincet Massol. Bug 605141.\n",
      "commitDate": "06/09/02 6:36 PM",
      "commitName": "49eb0e934ee82cf33c6643a4a15eb74ad471a6a9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/09/02 7:46 PM",
      "commitNameOld": "aff5047c9e29ed3fa0a502dd9713fc5aae55146e",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,47 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n-        // setup the classloader\n-        if (mClasspath !\u003d null) {\n-            mConfig.setClassLoader(\n-                new AntClassLoader(getProject(), mClasspath));\n-        }\n-\n-        // set the root directory location\n-        mConfig.setRootDir(getProject().getBaseDir());\n+        final Configuration config \u003d createConfiguration();\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n-                c \u003d new Checker(mConfig);\n+                c \u003d new Checker(config);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        final Configuration config \u003d createConfiguration();\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                c \u003d new Checker(config);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "aff5047c9e29ed3fa0a502dd9713fc5aae55146e": {
      "type": "Ybodychange",
      "commitMessage": "Patch to make loading of relative file paths work. Basically duplicating the\nwork that ANT used to do. There had to be some pain in the refactoring. ;-)\n",
      "commitDate": "04/09/02 7:46 PM",
      "commitName": "aff5047c9e29ed3fa0a502dd9713fc5aae55146e",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/09/02 7:33 AM",
      "commitNameOld": "2df5874fc82ef6bbf8db66dafb3aec1e0caae19a",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,54 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 getLocation());\n         }\n \n         // setup the classloader\n         if (mClasspath !\u003d null) {\n             mConfig.setClassLoader(\n                 new AntClassLoader(getProject(), mClasspath));\n         }\n+\n+        // set the root directory location\n+        mConfig.setRootDir(getProject().getBaseDir());\n+\n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n-                applyExplicitOptions();\n                 c \u003d new Checker(mConfig);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        // setup the classloader\n        if (mClasspath !\u003d null) {\n            mConfig.setClassLoader(\n                new AntClassLoader(getProject(), mClasspath));\n        }\n\n        // set the root directory location\n        mConfig.setRootDir(getProject().getBaseDir());\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "816c6b33c9ab7b1f3584e3f29ff410fccaa193ee": {
      "type": "Ybodychange",
      "commitMessage": "use accessor methods for superclass atributes, fixes bug #594466 (I hope)\n",
      "commitDate": "13/08/02 9:58 AM",
      "commitName": "816c6b33c9ab7b1f3584e3f29ff410fccaa193ee",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "12/08/02 5:10 AM",
      "commitNameOld": "ecc852d48b9d26398926b255e3cd68572119c106",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n-                location);\n+                getLocation());\n         }\n \n         // setup the classloader\n         if (mClasspath !\u003d null) {\n-            mConfig.setClassLoader(new AntClassLoader(project, mClasspath));\n+            mConfig.setClassLoader(\n+                new AntClassLoader(getProject(), mClasspath));\n         }\n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 applyExplicitOptions();\n                 c \u003d new Checker(mConfig);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n-                                         location);\n+                                         getLocation());\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                getLocation());\n        }\n\n        // setup the classloader\n        if (mClasspath !\u003d null) {\n            mConfig.setClassLoader(\n                new AntClassLoader(getProject(), mClasspath));\n        }\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                applyExplicitOptions();\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         getLocation());\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "92358288d94bd806a7cdd0958f382d81416542c8": {
      "type": "Ybodychange",
      "commitMessage": "Support setting the classpath to locate classes\n",
      "commitDate": "15/06/02 6:34 AM",
      "commitName": "92358288d94bd806a7cdd0958f382d81416542c8",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "15/06/02 5:59 AM",
      "commitNameOld": "d114de9013714966678ff95b92a89c378d7444ac",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,50 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\n                 \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                 location);\n         }\n \n+        // setup the classloader\n+        if (mClasspath !\u003d null) {\n+            mConfig.setClassLoader(new AntClassLoader(project, mClasspath));\n+        }\n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 applyExplicitOptions();\n                 c \u003d new Checker(mConfig);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          location);\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                location);\n        }\n\n        // setup the classloader\n        if (mClasspath !\u003d null) {\n            mConfig.setClassLoader(new AntClassLoader(project, mClasspath));\n        }\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                applyExplicitOptions();\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         location);\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "34770c3eaa9ad06297c13fd43a55739c02c7d67d": {
      "type": "Ybodychange",
      "commitMessage": "Implemented checking that lines are broken on operators (except the assignment\nones). Still need to update the docs\n",
      "commitDate": "28/05/02 6:39 AM",
      "commitName": "34770c3eaa9ad06297c13fd43a55739c02c7d67d",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "26/05/02 5:58 AM",
      "commitNameOld": "615219883bbd43946f88da4da14ada0a86ab34e4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n-            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n-                                     \"or nested \u0027fileset\u0027.\", location);\n+            throw new BuildException(\n+                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n+                location);\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n                 applyExplicitOptions();\n                 c \u003d new Checker(mConfig);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          location);\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\n                \"Must specify atleast one of \u0027file\u0027 or nested \u0027fileset\u0027.\",\n                location);\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                applyExplicitOptions();\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         location);\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "ff08629ef8d0623ef77edd32877da1992cf0ea18": {
      "type": "Ybodychange",
      "commitMessage": "save task options in Runnables to make sure that task options\nalways overwrite the options in the properties file, independent of\nthe order in which the attributes are reported by ANT or the XML parser.\n",
      "commitDate": "01/05/02 12:40 AM",
      "commitName": "ff08629ef8d0623ef77edd32877da1992cf0ea18",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "28/04/02 9:07 PM",
      "commitNameOld": "2d315277b6e1c152fd78da9fb91f214c43b31996",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 2.15,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         Checker c \u003d null;\n         try {\n             try {\n+                applyExplicitOptions();\n                 c \u003d new Checker(mConfig);\n                 // setup the listeners\n                 AuditListener[] listeners \u003d getListeners();\n                 for (int i \u003d 0; i \u003c listeners.length; i++) {\n                     c.addListener(listeners[i]);\n                 }\n             }\n             catch (Exception e) {\n                 throw new BuildException(\"Unable to create a Checker\", e);\n             }\n \n             // Process the files\n             final String[] files \u003d scanFileSets();\n             final int numErrs \u003d c.process(files);\n \n             // Handle the return status\n             if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                 getProject().setProperty(mFailureProperty, \"true\");\n             }\n \n             if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                 throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                          location);\n             }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                applyExplicitOptions();\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         location);\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "a1de1005813debb8c93fe1df597e8653ccefabed": {
      "type": "Ybodychange",
      "commitMessage": "Reworked the logic to give a better error reporting.\n",
      "commitDate": "17/04/02 4:57 AM",
      "commitName": "a1de1005813debb8c93fe1df597e8653ccefabed",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "16/04/02 9:43 PM",
      "commitNameOld": "00447a8fe3741b163901128b01ab7087392fc7c6",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.3,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,44 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n-        final int numErrs;\n         Checker c \u003d null;\n         try {\n-            c \u003d new Checker(mConfig);\n-            AuditListener[] listeners \u003d getListeners();\n-            for (int i \u003d 0; i \u003c listeners.length; i++) {\n-                c.addListener(listeners[i]);\n+            try {\n+                c \u003d new Checker(mConfig);\n+                // setup the listeners\n+                AuditListener[] listeners \u003d getListeners();\n+                for (int i \u003d 0; i \u003c listeners.length; i++) {\n+                    c.addListener(listeners[i]);\n+                }\n             }\n+            catch (Exception e) {\n+                throw new BuildException(\"Unable to create a Checker\", e);\n+            }\n+\n+            // Process the files\n             final String[] files \u003d scanFileSets();\n-            numErrs \u003d c.process(files);\n-        }\n-        catch (Exception e) {\n-            throw new BuildException(\"Unable to create a Checker\", e);\n+            final int numErrs \u003d c.process(files);\n+\n+            // Handle the return status\n+            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n+                getProject().setProperty(mFailureProperty, \"true\");\n+            }\n+\n+            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n+                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n+                                         location);\n+            }\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n-\n-        if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n-            getProject().setProperty(mFailureProperty, \"true\");\n-        }\n-\n-        if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n-            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n-        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c \u003d null;\n        try {\n            try {\n                c \u003d new Checker(mConfig);\n                // setup the listeners\n                AuditListener[] listeners \u003d getListeners();\n                for (int i \u003d 0; i \u003c listeners.length; i++) {\n                    c.addListener(listeners[i]);\n                }\n            }\n            catch (Exception e) {\n                throw new BuildException(\"Unable to create a Checker\", e);\n            }\n\n            // Process the files\n            final String[] files \u003d scanFileSets();\n            final int numErrs \u003d c.process(files);\n\n            // Handle the return status\n            if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n                getProject().setProperty(mFailureProperty, \"true\");\n            }\n\n            if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n                throw new BuildException(\"Got \" + numErrs + \" errors.\",\n                                         location);\n            }\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "0e0ca2bddf5bd5ab2251c9d3513f6f423f757e65": {
      "type": "Ybodychange",
      "commitMessage": "added failureProperty to ant task (RFE 534038)\n",
      "commitDate": "23/03/02 9:03 AM",
      "commitName": "0e0ca2bddf5bd5ab2251c9d3513f6f423f757e65",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "22/02/02 10:16 PM",
      "commitNameOld": "47383398f80d54a36f2a2fcadb62d8a018d34ac8",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 28.45,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         final int numErrs;\n         Checker c \u003d null;\n         try {\n             c \u003d new Checker(mConfig);\n             AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n             final String[] files \u003d scanFileSets();\n             numErrs \u003d c.process(files);\n         }\n         catch (Exception e) {\n             throw new BuildException(\"Unable to create a Checker\", e);\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n \n+        if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n+            getProject().setProperty(mFailureProperty, \"true\");\n+        }\n+\n         if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        final int numErrs;\n        Checker c \u003d null;\n        try {\n            c \u003d new Checker(mConfig);\n            AuditListener[] listeners \u003d getListeners();\n            for (int i \u003d 0; i \u003c listeners.length; i++) {\n                c.addListener(listeners[i]);\n            }\n            final String[] files \u003d scanFileSets();\n            numErrs \u003d c.process(files);\n        }\n        catch (Exception e) {\n            throw new BuildException(\"Unable to create a Checker\", e);\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n\n        if ((numErrs \u003e 0) \u0026\u0026 mFailureProperty !\u003d null) {\n            getProject().setProperty(mFailureProperty, \"true\");\n        }\n\n        if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "15c7162ea43a4e7517227a281f6f34d4a2ecb5a5": {
      "type": "Ybodychange",
      "commitMessage": "Refactored Checker to not take a PrintStream. All errors are not logged to\nstandard output.\n",
      "commitDate": "23/01/02 4:28 AM",
      "commitName": "15c7162ea43a4e7517227a281f6f34d4a2ecb5a5",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "07/01/02 8:18 PM",
      "commitNameOld": "0b7bf277067a87a43a11ce53f730cbfcbb95549e",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 15.34,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         final int numErrs;\n         Checker c \u003d null;\n         try {\n-            c \u003d new Checker(mConfig, System.out);\n+            c \u003d new Checker(mConfig);\n             AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener(listeners[i]);\n             }\n             final String[] files \u003d scanFileSets();\n             numErrs \u003d c.process(files);\n         }\n         catch (Exception e) {\n             throw new BuildException(\"Unable to create a Checker\", e);\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n \n         if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        final int numErrs;\n        Checker c \u003d null;\n        try {\n            c \u003d new Checker(mConfig);\n            AuditListener[] listeners \u003d getListeners();\n            for (int i \u003d 0; i \u003c listeners.length; i++) {\n                c.addListener(listeners[i]);\n            }\n            final String[] files \u003d scanFileSets();\n            numErrs \u003d c.process(files);\n        }\n        catch (Exception e) {\n            throw new BuildException(\"Unable to create a Checker\", e);\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n\n        if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "403a3f70a368717081aeb87fedcaf0504dee61fe": {
      "type": "Ybodychange",
      "commitMessage": "patch to control ANT stopping the build on violations\n",
      "commitDate": "31/10/01 5:06 AM",
      "commitName": "403a3f70a368717081aeb87fedcaf0504dee61fe",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "30/08/01 9:13 AM",
      "commitNameOld": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 61.87,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         final int numErrs;\n         Checker c \u003d null;\n         try {\n             c \u003d new Checker(mConfig, System.out);\n             AuditListener[] listeners \u003d getListeners();\n             for (int i \u003d 0; i \u003c listeners.length; i++) {\n                 c.addListener( listeners[i] );\n             }\n             final String[] files \u003d scanFileSets();\n             numErrs \u003d c.process(files);\n         }\n         catch (Exception e) {\n             throw new BuildException(\"Unable to create a Checker\", e);\n         }\n         finally {\n             if (c !\u003d null) {\n                 c.destroy();\n             }\n         }\n \n-        if (numErrs \u003e 0) {\n+        if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        final int numErrs;\n        Checker c \u003d null;\n        try {\n            c \u003d new Checker(mConfig, System.out);\n            AuditListener[] listeners \u003d getListeners();\n            for (int i \u003d 0; i \u003c listeners.length; i++) {\n                c.addListener( listeners[i] );\n            }\n            final String[] files \u003d scanFileSets();\n            numErrs \u003d c.process(files);\n        }\n        catch (Exception e) {\n            throw new BuildException(\"Unable to create a Checker\", e);\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n\n        if ((numErrs \u003e 0) \u0026\u0026 mFailOnViolation) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "0e3fe5643667a53079dbd114e5b1e9aa91fde083": {
      "type": "Ybodychange",
      "commitMessage": "started to incorporate logging events\n",
      "commitDate": "30/08/01 9:13 AM",
      "commitName": "0e3fe5643667a53079dbd114e5b1e9aa91fde083",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "05/08/01 7:12 AM",
      "commitNameOld": "6c304950f62f06cb3c72e46869c3fa3fbdc1e7d7",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 25.08,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,34 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n-        Checker c;\n+        final int numErrs;\n+        Checker c \u003d null;\n         try {\n             c \u003d new Checker(mConfig, System.out);\n+            AuditListener[] listeners \u003d getListeners();\n+            for (int i \u003d 0; i \u003c listeners.length; i++) {\n+                c.addListener( listeners[i] );\n+            }\n+            final String[] files \u003d scanFileSets();\n+            numErrs \u003d c.process(files);\n         }\n-        catch (RESyntaxException e){\n-            e.printStackTrace();\n-            throw new BuildException(\"Unable to create a Checker\", location);\n+        catch (Exception e) {\n+            throw new BuildException(\"Unable to create a Checker\", e);\n         }\n-\n-        // Process the files\n-        int numErrs \u003d 0;\n-        if (mFileName !\u003d null) {\n-            numErrs +\u003d c.process(mFileName);\n+        finally {\n+            if (c !\u003d null) {\n+                c.destroy();\n+            }\n         }\n \n-        final Iterator it \u003d mFileSets.iterator();\n-        while (it.hasNext()) {\n-            final FileSet fs \u003d (FileSet) it.next();\n-            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n-            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n-                               ds.getIncludedFiles(),\n-                               c);\n-        }\n-\n-        c.destroy();\n-\n         if (numErrs \u003e 0) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        final int numErrs;\n        Checker c \u003d null;\n        try {\n            c \u003d new Checker(mConfig, System.out);\n            AuditListener[] listeners \u003d getListeners();\n            for (int i \u003d 0; i \u003c listeners.length; i++) {\n                c.addListener( listeners[i] );\n            }\n            final String[] files \u003d scanFileSets();\n            numErrs \u003d c.process(files);\n        }\n        catch (Exception e) {\n            throw new BuildException(\"Unable to create a Checker\", e);\n        }\n        finally {\n            if (c !\u003d null) {\n                c.destroy();\n            }\n        }\n\n        if (numErrs \u003e 0) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "6c304950f62f06cb3c72e46869c3fa3fbdc1e7d7": {
      "type": "Ybodychange",
      "commitMessage": "added support for caching\n",
      "commitDate": "05/08/01 7:12 AM",
      "commitName": "6c304950f62f06cb3c72e46869c3fa3fbdc1e7d7",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/08/01 11:41 PM",
      "commitNameOld": "d3f39e6b87a10ee26aa8da532b545e54090e7761",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         Checker c;\n         try {\n             c \u003d new Checker(mConfig, System.out);\n         }\n         catch (RESyntaxException e){\n             e.printStackTrace();\n             throw new BuildException(\"Unable to create a Checker\", location);\n         }\n \n         // Process the files\n         int numErrs \u003d 0;\n         if (mFileName !\u003d null) {\n             numErrs +\u003d c.process(mFileName);\n         }\n \n         final Iterator it \u003d mFileSets.iterator();\n         while (it.hasNext()) {\n             final FileSet fs \u003d (FileSet) it.next();\n             final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n             numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                                ds.getIncludedFiles(),\n                                c);\n         }\n \n+        c.destroy();\n+\n         if (numErrs \u003e 0) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c;\n        try {\n            c \u003d new Checker(mConfig, System.out);\n        }\n        catch (RESyntaxException e){\n            e.printStackTrace();\n            throw new BuildException(\"Unable to create a Checker\", location);\n        }\n\n        // Process the files\n        int numErrs \u003d 0;\n        if (mFileName !\u003d null) {\n            numErrs +\u003d c.process(mFileName);\n        }\n\n        final Iterator it \u003d mFileSets.iterator();\n        while (it.hasNext()) {\n            final FileSet fs \u003d (FileSet) it.next();\n            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                               ds.getIncludedFiles(),\n                               c);\n        }\n\n        c.destroy();\n\n        if (numErrs \u003e 0) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "69138e40225407ef560fd9d06d2903de37c83c2c": {
      "type": "Ybodychange",
      "commitMessage": "refactored to use the new Configuration class.\n",
      "commitDate": "29/06/01 12:21 AM",
      "commitName": "69138e40225407ef560fd9d06d2903de37c83c2c",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "28/06/01 6:10 AM",
      "commitNameOld": "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         Checker c;\n         try {\n-            c \u003d new Checker(mProps, System.out);\n+            c \u003d new Checker(mConfig, System.out);\n         }\n         catch (RESyntaxException e){\n             e.printStackTrace();\n             throw new BuildException(\"Unable to create a Checker\", location);\n         }\n \n         // Process the files\n         int numErrs \u003d 0;\n         if (mFileName !\u003d null) {\n             numErrs +\u003d c.process(mFileName);\n         }\n \n         final Iterator it \u003d mFileSets.iterator();\n         while (it.hasNext()) {\n             final FileSet fs \u003d (FileSet) it.next();\n             final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n             numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                                ds.getIncludedFiles(),\n                                c);\n         }\n \n         if (numErrs \u003e 0) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c;\n        try {\n            c \u003d new Checker(mConfig, System.out);\n        }\n        catch (RESyntaxException e){\n            e.printStackTrace();\n            throw new BuildException(\"Unable to create a Checker\", location);\n        }\n\n        // Process the files\n        int numErrs \u003d 0;\n        if (mFileName !\u003d null) {\n            numErrs +\u003d c.process(mFileName);\n        }\n\n        final Iterator it \u003d mFileSets.iterator();\n        while (it.hasNext()) {\n            final FileSet fs \u003d (FileSet) it.next();\n            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                               ds.getIncludedFiles(),\n                               c);\n        }\n\n        if (numErrs \u003e 0) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9": {
      "type": "Ybodychange",
      "commitMessage": "changed for release 1.2\n",
      "commitDate": "28/06/01 6:10 AM",
      "commitName": "f0f7f3e762ffef78dcf82bf1611c10da48b96cb9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "22/06/01 6:24 AM",
      "commitNameOld": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     public void execute()\n         throws BuildException\n     {\n         // Check for no arguments\n         if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n             throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                      \"or nested \u0027fileset\u0027.\", location);\n         }\n \n         // Create the checker\n         Checker c;\n         try {\n-            c \u003d new Checker(mProps, System.err);\n+            c \u003d new Checker(mProps, System.out);\n         }\n         catch (RESyntaxException e){\n             e.printStackTrace();\n             throw new BuildException(\"Unable to create a Checker\", location);\n         }\n \n         // Process the files\n         int numErrs \u003d 0;\n         if (mFileName !\u003d null) {\n             numErrs +\u003d c.process(mFileName);\n         }\n \n         final Iterator it \u003d mFileSets.iterator();\n         while (it.hasNext()) {\n             final FileSet fs \u003d (FileSet) it.next();\n             final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n             numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                                ds.getIncludedFiles(),\n                                c);\n         }\n \n         if (numErrs \u003e 0) {\n             throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c;\n        try {\n            c \u003d new Checker(mProps, System.out);\n        }\n        catch (RESyntaxException e){\n            e.printStackTrace();\n            throw new BuildException(\"Unable to create a Checker\", location);\n        }\n\n        // Process the files\n        int numErrs \u003d 0;\n        if (mFileName !\u003d null) {\n            numErrs +\u003d c.process(mFileName);\n        }\n\n        final Iterator it \u003d mFileSets.iterator();\n        while (it.hasNext()) {\n            final FileSet fs \u003d (FileSet) it.next();\n            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                               ds.getIncludedFiles(),\n                               c);\n        }\n\n        if (numErrs \u003e 0) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java",
      "extendedDetails": {}
    },
    "0fd69594a4c3e82f92f93f0371791da66938f8c3": {
      "type": "Yintroduced",
      "commitMessage": "first cut\n",
      "commitDate": "22/06/01 6:24 AM",
      "commitName": "0fd69594a4c3e82f92f93f0371791da66938f8c3",
      "commitAuthor": "Oliver Burn",
      "diff": "@@ -0,0 +1,38 @@\n+    public void execute()\n+        throws BuildException\n+    {\n+        // Check for no arguments\n+        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n+            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n+                                     \"or nested \u0027fileset\u0027.\", location);\n+        }\n+\n+        // Create the checker\n+        Checker c;\n+        try {\n+            c \u003d new Checker(mProps, System.err);\n+        }\n+        catch (RESyntaxException e){\n+            e.printStackTrace();\n+            throw new BuildException(\"Unable to create a Checker\", location);\n+        }\n+\n+        // Process the files\n+        int numErrs \u003d 0;\n+        if (mFileName !\u003d null) {\n+            numErrs +\u003d c.process(mFileName);\n+        }\n+\n+        final Iterator it \u003d mFileSets.iterator();\n+        while (it.hasNext()) {\n+            final FileSet fs \u003d (FileSet) it.next();\n+            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n+            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n+                               ds.getIncludedFiles(),\n+                               c);\n+        }\n+\n+        if (numErrs \u003e 0) {\n+            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void execute()\n        throws BuildException\n    {\n        // Check for no arguments\n        if ((mFileName \u003d\u003d null) \u0026\u0026 (mFileSets.size() \u003d\u003d 0)) {\n            throw new BuildException(\"Must specify atleast one of \u0027file\u0027 \" +\n                                     \"or nested \u0027fileset\u0027.\", location);\n        }\n\n        // Create the checker\n        Checker c;\n        try {\n            c \u003d new Checker(mProps, System.err);\n        }\n        catch (RESyntaxException e){\n            e.printStackTrace();\n            throw new BuildException(\"Unable to create a Checker\", location);\n        }\n\n        // Process the files\n        int numErrs \u003d 0;\n        if (mFileName !\u003d null) {\n            numErrs +\u003d c.process(mFileName);\n        }\n\n        final Iterator it \u003d mFileSets.iterator();\n        while (it.hasNext()) {\n            final FileSet fs \u003d (FileSet) it.next();\n            final DirectoryScanner ds \u003d fs.getDirectoryScanner(project);\n            numErrs +\u003d process(fs.getDir(project).getAbsolutePath(),\n                               ds.getIncludedFiles(),\n                               c);\n        }\n\n        if (numErrs \u003e 0) {\n            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java"
    }
  }
}