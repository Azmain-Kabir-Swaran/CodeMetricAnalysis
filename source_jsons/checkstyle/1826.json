{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "canBeReferencedFromStaticContext",
  "functionId": "canBeReferencedFromStaticContext___ident-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 791,
  "functionEndLine": 826,
  "numCommitsSeen": 91,
  "timeTaken": 1914,
  "changeHistory": [
    "253de634b108f3869a0136d33049e28877fea038",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25"
  ],
  "changeHistoryShort": {
    "253de634b108f3869a0136d33049e28877fea038": "Ybodychange",
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": "Ybodychange",
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Yintroduced"
  },
  "changeHistoryDetails": {
    "253de634b108f3869a0136d33049e28877fea038": {
      "type": "Ybodychange",
      "commitMessage": "Pull #5392: fixed RequireThisCheck and for loop variable handling",
      "commitDate": "26/12/17 1:51 PM",
      "commitName": "253de634b108f3869a0136d33049e28877fea038",
      "commitAuthor": "rnveach",
      "commitDateOld": "25/12/17 3:16 PM",
      "commitNameOld": "36fdb1ba18843c9e5a6e3a7e3bbacfad7fde7369",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n     private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n         AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n         boolean staticInitializationBlock \u003d false;\n-        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n+        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME\n+                || variableDeclarationFrame.getType() \u003d\u003d FrameType.FOR_FRAME) {\n             final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n             final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n             if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                 staticInitializationBlock \u003d true;\n                 break;\n             }\n             variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n         }\n \n         boolean staticContext \u003d false;\n         if (staticInitializationBlock) {\n             staticContext \u003d true;\n         }\n         else {\n             if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                 final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                 if (codeBlockDefinition !\u003d null) {\n                     final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                     staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                         || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                 }\n             }\n             else {\n                 final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                 final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                 staticContext \u003d definitionToken.findFirstToken(TokenTypes.MODIFIERS)\n                         .findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n             }\n         }\n         return !staticContext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n        AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n        boolean staticInitializationBlock \u003d false;\n        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME\n                || variableDeclarationFrame.getType() \u003d\u003d FrameType.FOR_FRAME) {\n            final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n            final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n            if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                staticInitializationBlock \u003d true;\n                break;\n            }\n            variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n        }\n\n        boolean staticContext \u003d false;\n        if (staticInitializationBlock) {\n            staticContext \u003d true;\n        }\n        else {\n            if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                if (codeBlockDefinition !\u003d null) {\n                    final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                    staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                }\n            }\n            else {\n                final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                staticContext \u003d definitionToken.findFirstToken(TokenTypes.MODIFIERS)\n                        .findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n            }\n        }\n        return !staticContext;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "f0ed29b5cfef6adcec791cfdc236a5b850b685ee": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for simple cases",
      "commitDate": "09/11/17 6:45 AM",
      "commitName": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthor": "rnveach",
      "commitDateOld": "30/10/17 6:16 PM",
      "commitNameOld": "5cdbb191a17c65c2956b35d71513e9b59b6d2166",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 9.56,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n         AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n         boolean staticInitializationBlock \u003d false;\n         while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n             final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n             final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n             if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                 staticInitializationBlock \u003d true;\n                 break;\n             }\n             variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n         }\n \n         boolean staticContext \u003d false;\n         if (staticInitializationBlock) {\n             staticContext \u003d true;\n         }\n         else {\n             if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                 final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                 if (codeBlockDefinition !\u003d null) {\n                     final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                     staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                         || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                 }\n             }\n             else {\n                 final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                 final DetailAST definitionToken \u003d frameNameIdent.getParent();\n-                staticContext \u003d definitionToken.branchContains(TokenTypes.LITERAL_STATIC);\n+                staticContext \u003d definitionToken.findFirstToken(TokenTypes.MODIFIERS)\n+                        .findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n             }\n         }\n         return !staticContext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n        AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n        boolean staticInitializationBlock \u003d false;\n        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n            final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n            final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n            if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                staticInitializationBlock \u003d true;\n                break;\n            }\n            variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n        }\n\n        boolean staticContext \u003d false;\n        if (staticInitializationBlock) {\n            staticContext \u003d true;\n        }\n        else {\n            if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                if (codeBlockDefinition !\u003d null) {\n                    final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                    staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                }\n            }\n            else {\n                final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                staticContext \u003d definitionToken.findFirstToken(TokenTypes.MODIFIERS)\n                        .findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n            }\n        }\n        return !staticContext;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5124: removed usage of branchContains for modifiers",
      "commitDate": "25/10/17 7:54 PM",
      "commitName": "3bcd2a83aac2ebc2fb9a8e34599d1d565a047b22",
      "commitAuthor": "rnveach",
      "commitDateOld": "01/08/17 4:59 AM",
      "commitNameOld": "1efd7acd6ca48569fd09a2a00e5a78505d772743",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 85.62,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n         AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n         boolean staticInitializationBlock \u003d false;\n         while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n             final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n             final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n             if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                 staticInitializationBlock \u003d true;\n                 break;\n             }\n             variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n         }\n \n         boolean staticContext \u003d false;\n         if (staticInitializationBlock) {\n             staticContext \u003d true;\n         }\n         else {\n             if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                 final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                 if (codeBlockDefinition !\u003d null) {\n                     final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                     staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n-                        || modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n+                        || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                 }\n             }\n             else {\n                 final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                 final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                 staticContext \u003d definitionToken.branchContains(TokenTypes.LITERAL_STATIC);\n             }\n         }\n         return !staticContext;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n        AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n        boolean staticInitializationBlock \u003d false;\n        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n            final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n            final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n            if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                staticInitializationBlock \u003d true;\n                break;\n            }\n            variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n        }\n\n        boolean staticContext \u003d false;\n        if (staticInitializationBlock) {\n            staticContext \u003d true;\n        }\n        else {\n            if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                if (codeBlockDefinition !\u003d null) {\n                    final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                    staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                        || modifiers.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null;\n                }\n            }\n            else {\n                final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                staticContext \u003d definitionToken.branchContains(TokenTypes.LITERAL_STATIC);\n            }\n        }\n        return !staticContext;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": "04/03/16 6:34 AM",
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,34 @@\n+    private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n+        AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n+        boolean staticInitializationBlock \u003d false;\n+        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n+            final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n+            final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n+            if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n+                staticInitializationBlock \u003d true;\n+                break;\n+            }\n+            variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n+        }\n+\n+        boolean staticContext \u003d false;\n+        if (staticInitializationBlock) {\n+            staticContext \u003d true;\n+        }\n+        else {\n+            if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n+                final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n+                if (codeBlockDefinition !\u003d null) {\n+                    final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n+                    staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n+                        || modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n+                }\n+            }\n+            else {\n+                final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n+                final DetailAST definitionToken \u003d frameNameIdent.getParent();\n+                staticContext \u003d definitionToken.branchContains(TokenTypes.LITERAL_STATIC);\n+            }\n+        }\n+        return !staticContext;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean canBeReferencedFromStaticContext(DetailAST ident) {\n        AbstractFrame variableDeclarationFrame \u003d findFrame(ident, false);\n        boolean staticInitializationBlock \u003d false;\n        while (variableDeclarationFrame.getType() \u003d\u003d FrameType.BLOCK_FRAME) {\n            final DetailAST blockFrameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n            final DetailAST definitionToken \u003d blockFrameNameIdent.getParent();\n            if (definitionToken.getType() \u003d\u003d TokenTypes.STATIC_INIT) {\n                staticInitializationBlock \u003d true;\n                break;\n            }\n            variableDeclarationFrame \u003d variableDeclarationFrame.getParent();\n        }\n\n        boolean staticContext \u003d false;\n        if (staticInitializationBlock) {\n            staticContext \u003d true;\n        }\n        else {\n            if (variableDeclarationFrame.getType() \u003d\u003d FrameType.CLASS_FRAME) {\n                final DetailAST codeBlockDefinition \u003d getCodeBlockDefinitionToken(ident);\n                if (codeBlockDefinition !\u003d null) {\n                    final DetailAST modifiers \u003d codeBlockDefinition.getFirstChild();\n                    staticContext \u003d codeBlockDefinition.getType() \u003d\u003d TokenTypes.STATIC_INIT\n                        || modifiers.branchContains(TokenTypes.LITERAL_STATIC);\n                }\n            }\n            else {\n                final DetailAST frameNameIdent \u003d variableDeclarationFrame.getFrameNameIdent();\n                final DetailAST definitionToken \u003d frameNameIdent.getParent();\n                staticContext \u003d definitionToken.branchContains(TokenTypes.LITERAL_STATIC);\n            }\n        }\n        return !staticContext;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}