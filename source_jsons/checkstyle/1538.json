{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EqualsHashCodeCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
  "functionStartLine": 156,
  "functionEndLine": 163,
  "numCommitsSeen": 78,
  "timeTaken": 2329,
  "changeHistory": [
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7",
    "459f912d7a438edcd020c2c4b18ad65ab648cfe8",
    "23a1b6253f6296c1a3888361953da47f2808ca3d",
    "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "8a518cb679589be5c8d70860a3317ea8b304faf0",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "88b72c3df7214b3cb4f4fcb73b92883007caab17",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14",
    "bb39d259614a2d41f57e233cbe98a8e4783af3c5",
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50",
    "675c037c85af8347d5b95b0b45f166b8599a9b27",
    "acc3f40015ffe1263cfa684ca4b29939249e9aed",
    "fc24f5f8b689ce613cdd0bb2c00e8e50cddc7da5"
  ],
  "changeHistoryShort": {
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7": "Ybodychange",
    "459f912d7a438edcd020c2c4b18ad65ab648cfe8": "Ybodychange",
    "23a1b6253f6296c1a3888361953da47f2808ca3d": "Ybodychange",
    "0f58857d73933c7b6b7e62f0c7c16ad7af51556f": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "8a518cb679589be5c8d70860a3317ea8b304faf0": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "88b72c3df7214b3cb4f4fcb73b92883007caab17": "Ybodychange",
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": "Yfilerename",
    "bb39d259614a2d41f57e233cbe98a8e4783af3c5": "Ybodychange",
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50": "Ybodychange",
    "675c037c85af8347d5b95b0b45f166b8599a9b27": "Ybodychange",
    "acc3f40015ffe1263cfa684ca4b29939249e9aed": "Ybodychange",
    "fc24f5f8b689ce613cdd0bb2c00e8e50cddc7da5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3308: fixed EqualsHashCode equals method parameter test (#3407)\n\n",
      "commitDate": "29/09/16 4:10 AM",
      "commitName": "dd4999dc38fe2b17bb4fd4872d553b9ed0970aa7",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/09/16 7:52 PM",
      "commitNameOld": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 8.35,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,8 @@\n     public void visitToken(DetailAST ast) {\n-        final DetailAST modifiers \u003d ast.getFirstChild();\n-        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n-        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n-        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n-\n-        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n-                \u0026\u0026 \"equals\".equals(methodName.getText())\n-                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n-                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n-            ) {\n+        if (isEqualsMethod(ast)) {\n             objBlockWithEquals.put(ast.getParent(), ast);\n         }\n-        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n-                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n-                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) {\n+        else if (isHashCodeMethod(ast)) {\n             objBlockWithHashCode.put(ast.getParent(), ast);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (isEqualsMethod(ast)) {\n            objBlockWithEquals.put(ast.getParent(), ast);\n        }\n        else if (isHashCodeMethod(ast)) {\n            objBlockWithHashCode.put(ast.getParent(), ast);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "459f912d7a438edcd020c2c4b18ad65ab648cfe8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3308: EqualsHashCode violation for hashCode without equals (#3387)\n\n",
      "commitDate": "05/08/16 12:47 AM",
      "commitName": "459f912d7a438edcd020c2c4b18ad65ab648cfe8",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 181.74,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             ) {\n-            objBlockEquals.put(ast.getParent(), ast);\n+            objBlockWithEquals.put(ast.getParent(), ast);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) {\n-            objBlockWithHashCode.add(ast.getParent());\n+            objBlockWithHashCode.put(ast.getParent(), ast);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            ) {\n            objBlockWithEquals.put(ast.getParent(), ast);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) {\n            objBlockWithHashCode.put(ast.getParent(), ast);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "23a1b6253f6296c1a3888361953da47f2808ca3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: Fix for \u0027Don\u0027t use trailing comments\u0027 (partial)\n",
      "commitDate": "21/08/15 5:05 AM",
      "commitName": "23a1b6253f6296c1a3888361953da47f2808ca3d",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "18/08/15 1:25 AM",
      "commitNameOld": "54ccca18635a4aeea90da86d30590df498f76b08",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             ) {\n             objBlockEquals.put(ast.getParent(), ast);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) { // no params\n+                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) {\n             objBlockWithHashCode.add(ast.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            ) {\n            objBlockEquals.put(ast.getParent(), ast);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) {\n            objBlockWithHashCode.add(ast.getParent());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "0f58857d73933c7b6b7e62f0c7c16ad7af51556f": {
      "type": "Ybodychange",
      "commitMessage": "Change location of left curly braces to end of line. #1089\n",
      "commitDate": "17/05/15 4:47 AM",
      "commitName": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "30/03/15 2:01 PM",
      "commitNameOld": "cf1d22f39fbde10e80414896a9424d706c544aaa",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 47.61,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n-    public void visitToken(DetailAST ast)\n-    {\n+    public void visitToken(DetailAST ast) {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n-            )\n-        {\n+            ) {\n             objBlockEquals.put(ast.getParent(), ast);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n-        {\n+                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) { // no params\n             objBlockWithHashCode.add(ast.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            ) {\n            objBlockEquals.put(ast.getParent(), ast);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) { // no params\n            objBlockWithHashCode.add(ast.getParent());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST ast)\n     {\n         final DetailAST modifiers \u003d ast.getFirstChild();\n         final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n-        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n+        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n+                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             objBlockEquals.put(ast.getParent(), ast);\n         }\n-        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n+        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n+                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             objBlockWithHashCode.add(ast.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            objBlockEquals.put(ast.getParent(), ast);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            objBlockWithHashCode.add(ast.getParent());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAST.getFirstChild();\n-        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n-        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n-        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n+        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n-            mObjBlockEquals.put(aAST.getParent(), aAST);\n+            objBlockEquals.put(ast.getParent(), ast);\n         }\n         else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n         {\n-            mObjBlockWithHashCode.add(aAST.getParent());\n+            objBlockWithHashCode.add(ast.getParent());\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            objBlockEquals.put(ast.getParent(), ast);\n        }\n        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n        {\n            objBlockWithHashCode.add(ast.getParent());\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.88,
          "commitsBetweenForRepo": 457,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,24 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        final DetailAST modifiers \u003d aAST.getFirstChild();\n-        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n-        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n-        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        final DetailAST modifiers \u003d ast.getFirstChild();\n+        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n+        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n+        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n \n         if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n-            mObjBlockEquals.put(aAST.getParent(), aAST);\n+            objBlockEquals.put(ast.getParent(), ast);\n         }\n         else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n         {\n-            mObjBlockWithHashCode.add(aAST.getParent());\n+            objBlockWithHashCode.add(ast.getParent());\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        final DetailAST modifiers \u003d ast.getFirstChild();\n        final AST type \u003d ast.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d ast.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d ast.findFirstToken(TokenTypes.PARAMETERS);\n\n        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            objBlockEquals.put(ast.getParent(), ast);\n        }\n        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n        {\n            objBlockWithHashCode.add(ast.getParent());\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.getFirstChild();\n        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java"
      }
    },
    "d62a2cc02092cb6c1a1666630a51a6ec7c50a878": {
      "type": "Ybodychange",
      "commitMessage": "Inspired by patch# 2111354 - changes to remove casting. Neat trick\n",
      "commitDate": "18/09/08 4:34 AM",
      "commitName": "d62a2cc02092cb6c1a1666630a51a6ec7c50a878",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "22/04/08 5:28 AM",
      "commitNameOld": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 148.96,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n+        final DetailAST modifiers \u003d aAST.getFirstChild();\n         final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n         if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d aAST.getFirstChild();\n        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n         final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n         final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n-        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n+                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n-        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n+        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n-                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n+                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN)\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getChildCount() \u003d\u003d 1)\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if ((type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT)\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 (parameters.getFirstChild() \u003d\u003d null)) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "8a518cb679589be5c8d70860a3317ea8b304faf0": {
      "type": "Ybodychange",
      "commitMessage": "Fixed EqualsHashCodeCheck to ignore generics in determination of check failure.\n",
      "commitDate": "17/04/05 4:13 AM",
      "commitName": "8a518cb679589be5c8d70860a3317ea8b304faf0",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 98.02,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n-        final AST type \u003d modifiers.getNextSibling();\n-        final AST methodName \u003d type.getNextSibling();\n+        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n+        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n         final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n        final AST type \u003d aAST.findFirstToken(TokenTypes.TYPE);\n        final AST methodName \u003d aAST.findFirstToken(TokenTypes.IDENT);\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "25/01/04 2:23 AM",
      "commitNameOld": "88b72c3df7214b3cb4f4fcb73b92883007caab17",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 214.13,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n-\n+        final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n         final AST type \u003d modifiers.getNextSibling();\n         final AST methodName \u003d type.getNextSibling();\n         final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n        final AST type \u003d modifiers.getNextSibling();\n        final AST methodName \u003d type.getNextSibling();\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "88b72c3df7214b3cb4f4fcb73b92883007caab17": {
      "type": "Ybodychange",
      "commitMessage": "General clean up - setting up Eclipse 3.0 M6.\n",
      "commitDate": "25/01/04 2:23 AM",
      "commitName": "88b72c3df7214b3cb4f4fcb73b92883007caab17",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/04 1:10 PM",
      "commitNameOld": "5670252b46f4915b276e647fa000361915eb4ff4",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 10.55,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n     public void visitToken(DetailAST aAST)\n     {\n         DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n \n-        AST type \u003d modifiers.getNextSibling();\n-        AST methodName \u003d type.getNextSibling();\n-        DetailAST parameters \u003d\n-            (DetailAST) aAST.findFirstToken(TokenTypes.PARAMETERS);\n+        final AST type \u003d modifiers.getNextSibling();\n+        final AST methodName \u003d type.getNextSibling();\n+        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n             )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        final AST type \u003d modifiers.getNextSibling();\n        final AST methodName \u003d type.getNextSibling();\n        final DetailAST parameters \u003d aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "9920857810ecc9efdbca19e2749b75abc0cbbf14": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Coding checks\n",
      "commitDate": "15/06/03 5:39 AM",
      "commitName": "9920857810ecc9efdbca19e2749b75abc0cbbf14",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/06/03 10:47 AM",
      "commitNameOld": "e464c231eccec72f964131d9aeb5e49982c4b3bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d\n            (DetailAST) aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n            )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java"
      }
    },
    "bb39d259614a2d41f57e233cbe98a8e4783af3c5": {
      "type": "Ybodychange",
      "commitMessage": "Corrections following grammar change that now generates\nLPAREN, RPAREN for METHOD_DEF parameters.\n",
      "commitDate": "07/05/03 5:06 PM",
      "commitName": "bb39d259614a2d41f57e233cbe98a8e4783af3c5",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "15/02/03 6:50 PM",
      "commitNameOld": "04b0bd64047e8eee752405a01de145b67f5fb845",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 80.89,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     public void visitToken(DetailAST aAST)\n     {\n         DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n \n         AST type \u003d modifiers.getNextSibling();\n         AST methodName \u003d type.getNextSibling();\n-        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n+        DetailAST parameters \u003d\n+            (DetailAST) aAST.findFirstToken(TokenTypes.PARAMETERS);\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                 )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d\n            (DetailAST) aAST.findFirstToken(TokenTypes.PARAMETERS);\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50": {
      "type": "Ybodychange",
      "commitMessage": "removed paranoia checks to increase code coverage\n",
      "commitDate": "07/11/02 11:10 AM",
      "commitName": "e6571e6f5703fdd89bc6cbeddcce767e58ddbf50",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "02/11/02 4:22 AM",
      "commitNameOld": "3288a81e30ddea194f76bd74f3b509500b864163",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 5.28,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,25 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        // paranoia\n-        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n-            return;\n-        }\n-\n         DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n \n         AST type \u003d modifiers.getNextSibling();\n         AST methodName \u003d type.getNextSibling();\n         DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                 )\n         {\n             mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "675c037c85af8347d5b95b0b45f166b8599a9b27": {
      "type": "Ybodychange",
      "commitMessage": "fixed style problems\n",
      "commitDate": "28/10/02 8:10 AM",
      "commitName": "675c037c85af8347d5b95b0b45f166b8599a9b27",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "22/10/02 5:28 AM",
      "commitNameOld": "acc3f40015ffe1263cfa684ca4b29939249e9aed",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 6.15,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // paranoia\n         if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n             return;\n         }\n \n         DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n \n         AST type \u003d modifiers.getNextSibling();\n         AST methodName \u003d type.getNextSibling();\n         DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                 )\n         {\n-            objBlockEquals.put(aAST.getParent(), aAST);\n+            mObjBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                 \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n-            objBlockWithHashCode.add(aAST.getParent());\n+            mObjBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            return;\n        }\n\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                )\n        {\n            mObjBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            mObjBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "acc3f40015ffe1263cfa684ca4b29939249e9aed": {
      "type": "Ybodychange",
      "commitMessage": "Added branchContains() to DetailAST.\n\nCurrently only used in EqualsHashCodeCheck to simplify code,\nbut I think this will be the main source of performance improvements in TreeWalker\n",
      "commitDate": "22/10/02 5:28 AM",
      "commitName": "acc3f40015ffe1263cfa684ca4b29939249e9aed",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "21/10/02 11:04 AM",
      "commitNameOld": "fc24f5f8b689ce613cdd0bb2c00e8e50cddc7da5",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,30 @@\n     public void visitToken(DetailAST aAST)\n     {\n         // paranoia\n         if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n             return;\n         }\n \n-        AST modifiers \u003d aAST.getFirstChild();\n-        final Set mods \u003d new HashSet();\n-        AST modifier \u003d modifiers.getFirstChild();\n-        while (modifier !\u003d null) {\n-            mods.add(modifier.getText());\n-            modifier \u003d modifier.getNextSibling();\n-        }\n+        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n \n         AST type \u003d modifiers.getNextSibling();\n         AST methodName \u003d type.getNextSibling();\n         DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n \n         if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                 \u0026\u0026 \"equals\".equals(methodName.getText())\n-                \u0026\u0026 mods.contains(\"public\")\n+                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                 \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                 )\n         {\n             objBlockEquals.put(aAST.getParent(), aAST);\n         }\n         else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                 \u0026\u0026 \"hashCode\".equals(methodName.getText())\n-//                \u0026\u0026 modifiers.subTreeContains(TokenTypes.LITERAL_PUBLIC)\n+                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                 \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n         {\n             objBlockWithHashCode.add(aAST.getParent());\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            return;\n        }\n\n        DetailAST modifiers \u003d (DetailAST) aAST.getFirstChild();\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                )\n        {\n            objBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n                \u0026\u0026 modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            objBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java",
      "extendedDetails": {}
    },
    "fc24f5f8b689ce613cdd0bb2c00e8e50cddc7da5": {
      "type": "Yintroduced",
      "commitMessage": "added check for equals() vs. hashCode, RFE #554373\nsee also Item 8 of \"Bloch, Effective Java\"\n",
      "commitDate": "21/10/02 11:04 AM",
      "commitName": "fc24f5f8b689ce613cdd0bb2c00e8e50cddc7da5",
      "commitAuthor": "Lars Kühne",
      "diff": "@@ -0,0 +1,36 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        // paranoia\n+        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n+            return;\n+        }\n+\n+        AST modifiers \u003d aAST.getFirstChild();\n+        final Set mods \u003d new HashSet();\n+        AST modifier \u003d modifiers.getFirstChild();\n+        while (modifier !\u003d null) {\n+            mods.add(modifier.getText());\n+            modifier \u003d modifier.getNextSibling();\n+        }\n+\n+        AST type \u003d modifiers.getNextSibling();\n+        AST methodName \u003d type.getNextSibling();\n+        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n+\n+        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n+                \u0026\u0026 \"equals\".equals(methodName.getText())\n+                \u0026\u0026 mods.contains(\"public\")\n+                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n+                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n+                )\n+        {\n+            objBlockEquals.put(aAST.getParent(), aAST);\n+        }\n+        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n+                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n+//                \u0026\u0026 modifiers.subTreeContains(TokenTypes.LITERAL_PUBLIC)\n+                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n+        {\n+            objBlockWithHashCode.add(aAST.getParent());\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        // paranoia\n        if (aAST.getType() !\u003d TokenTypes.METHOD_DEF) {\n            return;\n        }\n\n        AST modifiers \u003d aAST.getFirstChild();\n        final Set mods \u003d new HashSet();\n        AST modifier \u003d modifiers.getFirstChild();\n        while (modifier !\u003d null) {\n            mods.add(modifier.getText());\n            modifier \u003d modifier.getNextSibling();\n        }\n\n        AST type \u003d modifiers.getNextSibling();\n        AST methodName \u003d type.getNextSibling();\n        DetailAST parameters \u003d (DetailAST) methodName.getNextSibling();\n\n        if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_BOOLEAN\n                \u0026\u0026 \"equals\".equals(methodName.getText())\n                \u0026\u0026 mods.contains(\"public\")\n                \u0026\u0026 parameters.getChildCount() \u003d\u003d 1\n                \u0026\u0026 isObjectParam(parameters.getFirstChild())\n                )\n        {\n            objBlockEquals.put(aAST.getParent(), aAST);\n        }\n        else if (type.getFirstChild().getType() \u003d\u003d TokenTypes.LITERAL_INT\n                \u0026\u0026 \"hashCode\".equals(methodName.getText())\n//                \u0026\u0026 modifiers.subTreeContains(TokenTypes.LITERAL_PUBLIC)\n                \u0026\u0026 parameters.getFirstChild() \u003d\u003d null) // no params\n        {\n            objBlockWithHashCode.add(aAST.getParent());\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java"
    }
  }
}