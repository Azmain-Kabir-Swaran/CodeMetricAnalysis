{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeclarationOrderCheck.java",
  "functionName": "processModifiers",
  "functionId": "processModifiers___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
  "functionStartLine": 264,
  "functionEndLine": 268,
  "numCommitsSeen": 58,
  "timeTaken": 1100,
  "changeHistory": [
    "420a4908dad850554e3a093cde5ebc92878cbba7",
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
    "3eca04c940bcdf575c2f9009202a4145e9a82c15"
  ],
  "changeHistoryShort": {
    "420a4908dad850554e3a093cde5ebc92878cbba7": "Ybodychange",
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa": "Ybodychange",
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": "Ybodychange",
    "3eca04c940bcdf575c2f9009202a4145e9a82c15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "420a4908dad850554e3a093cde5ebc92878cbba7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1048: Duplicate error message for static final field in DeclarationOrderCheck\n",
      "commitDate": "17/02/16 6:18 AM",
      "commitName": "420a4908dad850554e3a093cde5ebc92878cbba7",
      "commitAuthor": "liscju",
      "commitDateOld": "06/02/16 3:49 PM",
      "commitNameOld": "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 10.6,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,5 @@\n     private void processModifiers(DetailAST ast) {\n-\n         final ScopeState state \u003d scopeStates.peek();\n-        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n-            if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                log(ast, MSG_INSTANCE);\n-            }\n-            else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n-                state.declarationAccess \u003d Scope.PUBLIC;\n-                state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n-            }\n-        }\n-        else {\n-            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                if (!ignoreModifiers\n-                        || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                    log(ast, MSG_STATIC);\n-                }\n-            }\n-            else {\n-                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n-            }\n-        }\n-\n-        final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n-        if (state.declarationAccess.compareTo(access) \u003e 0) {\n-            if (!ignoreModifiers\n-                    \u0026\u0026 !isForwardReference(ast.getParent())) {\n-                log(ast, MSG_ACCESS);\n-            }\n-        }\n-        else {\n-            state.declarationAccess \u003d access;\n-        }\n+        final boolean isStateValid \u003d processModifiersState(ast, state);\n+        processModifiersSubState(ast, state, isStateValid);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiers(DetailAST ast) {\n        final ScopeState state \u003d scopeStates.peek();\n        final boolean isStateValid \u003d processModifiersState(ast, state);\n        processModifiersSubState(ast, state, isStateValid);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
      "extendedDetails": {}
    },
    "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa": {
      "type": "Ybodychange",
      "commitMessage": "Issue #924: Fix enforcement of declaration order which leads to illegal forward reference\n",
      "commitDate": "06/02/16 3:49 PM",
      "commitName": "a40ba56ff316a7d9bdd726d9e831f303df3d5eaa",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 1.41,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n     private void processModifiers(DetailAST ast) {\n \n         final ScopeState state \u003d scopeStates.peek();\n         if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n             if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                 log(ast, MSG_INSTANCE);\n             }\n             else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                 state.declarationAccess \u003d Scope.PUBLIC;\n                 state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n             }\n         }\n         else {\n             if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                 if (!ignoreModifiers\n                         || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                     log(ast, MSG_STATIC);\n                 }\n             }\n             else {\n                 state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n             }\n         }\n \n         final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n         if (state.declarationAccess.compareTo(access) \u003e 0) {\n-            if (!ignoreModifiers) {\n+            if (!ignoreModifiers\n+                    \u0026\u0026 !isForwardReference(ast.getParent())) {\n                 log(ast, MSG_ACCESS);\n             }\n         }\n         else {\n             state.declarationAccess \u003d access;\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiers(DetailAST ast) {\n\n        final ScopeState state \u003d scopeStates.peek();\n        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n            if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                log(ast, MSG_INSTANCE);\n            }\n            else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                state.declarationAccess \u003d Scope.PUBLIC;\n                state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n            }\n        }\n        else {\n            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                if (!ignoreModifiers\n                        || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                    log(ast, MSG_STATIC);\n                }\n            }\n            else {\n                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n            }\n        }\n\n        final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n        if (state.declarationAccess.compareTo(access) \u003e 0) {\n            if (!ignoreModifiers\n                    \u0026\u0026 !isForwardReference(ast.getParent())) {\n                log(ast, MSG_ACCESS);\n            }\n        }\n        else {\n            state.declarationAccess \u003d access;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
      "extendedDetails": {}
    },
    "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65": {
      "type": "Ybodychange",
      "commitMessage": "Issue #974: PMD violation ConfusingTernary (partial fix)\n",
      "commitDate": "07/10/15 5:56 PM",
      "commitName": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "31/08/15 11:51 AM",
      "commitNameOld": "c899af31c112c07ea1244f6bbe2c5c6c56818ae5",
      "commitAuthorOld": "Ruslan Diachenko",
      "daysBetweenCommits": 37.25,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void processModifiers(DetailAST ast) {\n \n         final ScopeState state \u003d scopeStates.peek();\n-        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n-            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n-                if (!ignoreModifiers\n-                    || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n-                    log(ast, MSG_STATIC);\n-                }\n-            }\n-            else {\n-                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n-            }\n-        }\n-        else {\n+        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n             if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                 log(ast, MSG_INSTANCE);\n             }\n             else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                 state.declarationAccess \u003d Scope.PUBLIC;\n                 state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n             }\n         }\n+        else {\n+            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n+                if (!ignoreModifiers\n+                        || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n+                    log(ast, MSG_STATIC);\n+                }\n+            }\n+            else {\n+                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n+            }\n+        }\n \n         final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n         if (state.declarationAccess.compareTo(access) \u003e 0) {\n             if (!ignoreModifiers) {\n                 log(ast, MSG_ACCESS);\n             }\n         }\n         else {\n             state.declarationAccess \u003d access;\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiers(DetailAST ast) {\n\n        final ScopeState state \u003d scopeStates.peek();\n        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) \u003d\u003d null) {\n            if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                log(ast, MSG_INSTANCE);\n            }\n            else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                state.declarationAccess \u003d Scope.PUBLIC;\n                state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n            }\n        }\n        else {\n            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                if (!ignoreModifiers\n                        || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                    log(ast, MSG_STATIC);\n                }\n            }\n            else {\n                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n            }\n        }\n\n        final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n        if (state.declarationAccess.compareTo(access) \u003e 0) {\n            if (!ignoreModifiers) {\n                log(ast, MSG_ACCESS);\n            }\n        }\n        else {\n            state.declarationAccess \u003d access;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java",
      "extendedDetails": {}
    },
    "3eca04c940bcdf575c2f9009202a4145e9a82c15": {
      "type": "Yintroduced",
      "commitMessage": "DeclarationOrderCheck updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "3eca04c940bcdf575c2f9009202a4145e9a82c15",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,34 @@\n+    private void processModifiers(DetailAST ast) {\n+\n+        final ScopeState state \u003d scopeStates.peek();\n+        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n+            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n+                if (!ignoreModifiers\n+                    || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n+                    log(ast, MSG_STATIC);\n+                }\n+            }\n+            else {\n+                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n+            }\n+        }\n+        else {\n+            if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n+                log(ast, MSG_INSTANCE);\n+            }\n+            else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n+                state.declarationAccess \u003d Scope.PUBLIC;\n+                state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n+            }\n+        }\n+\n+        final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n+        if (state.declarationAccess.compareTo(access) \u003e 0) {\n+            if (!ignoreModifiers) {\n+                log(ast, MSG_ACCESS);\n+            }\n+        }\n+        else {\n+            state.declarationAccess \u003d access;\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processModifiers(DetailAST ast) {\n\n        final ScopeState state \u003d scopeStates.peek();\n        if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) !\u003d null) {\n            if (state.currentScopeState \u003e STATE_STATIC_VARIABLE_DEF) {\n                if (!ignoreModifiers\n                    || state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                    log(ast, MSG_STATIC);\n                }\n            }\n            else {\n                state.currentScopeState \u003d STATE_STATIC_VARIABLE_DEF;\n            }\n        }\n        else {\n            if (state.currentScopeState \u003e STATE_INSTANCE_VARIABLE_DEF) {\n                log(ast, MSG_INSTANCE);\n            }\n            else if (state.currentScopeState \u003d\u003d STATE_STATIC_VARIABLE_DEF) {\n                state.declarationAccess \u003d Scope.PUBLIC;\n                state.currentScopeState \u003d STATE_INSTANCE_VARIABLE_DEF;\n            }\n        }\n\n        final Scope access \u003d ScopeUtils.getScopeFromMods(ast);\n        if (state.declarationAccess.compareTo(access) \u003e 0) {\n            if (!ignoreModifiers) {\n                log(ast, MSG_ACCESS);\n            }\n        }\n        else {\n            state.declarationAccess \u003d access;\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java"
    }
  }
}