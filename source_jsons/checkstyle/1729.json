{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultipleStringLiteralsCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
  "functionStartLine": 190,
  "functionEndLine": 197,
  "numCommitsSeen": 76,
  "timeTaken": 2616,
  "changeHistory": [
    "ed12db011ca311d19b6d22fd13ed7420e408b34a",
    "f90ad7d5ed2f9e45eb434f024614f92695064b39",
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
    "08638b5f739d9929698860048c052da2d5f80209",
    "a501b8d95ac2840ce201549e552f2cc540fde4ce",
    "253622ab83a78434d28d050df40cdedcec303713",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
    "5d7063c660b241bce251f1a8c89394619f2791fb",
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4"
  ],
  "changeHistoryShort": {
    "ed12db011ca311d19b6d22fd13ed7420e408b34a": "Ybodychange",
    "f90ad7d5ed2f9e45eb434f024614f92695064b39": "Ybodychange",
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37": "Ybodychange",
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": "Ybodychange",
    "08638b5f739d9929698860048c052da2d5f80209": "Ybodychange",
    "a501b8d95ac2840ce201549e552f2cc540fde4ce": "Ybodychange",
    "253622ab83a78434d28d050df40cdedcec303713": "Ybodychange",
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": "Ybodychange",
    "5d7063c660b241bce251f1a8c89394619f2791fb": "Ybodychange",
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ed12db011ca311d19b6d22fd13ed7420e408b34a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6764: fix some sonar warnings and small refactoring\n",
      "commitDate": "17/05/19 9:49 AM",
      "commitName": "ed12db011ca311d19b6d22fd13ed7420e408b34a",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "20/04/19 8:08 AM",
      "commitNameOld": "bb4975e896a00378f1f9633d4ed2c7660a977483",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 27.07,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,8 @@\n     public void visitToken(DetailAST ast) {\n         if (!isInIgnoreOccurrenceContext(ast)) {\n             final String currentString \u003d ast.getText();\n             if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n-                List\u003cDetailAST\u003e hitList \u003d stringMap.get(currentString);\n-                if (hitList \u003d\u003d null) {\n-                    hitList \u003d new ArrayList\u003c\u003e();\n-                    stringMap.put(currentString, hitList);\n-                }\n-                hitList.add(ast);\n+                stringMap.computeIfAbsent(currentString, key -\u003e new ArrayList\u003c\u003e()).add(ast);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isInIgnoreOccurrenceContext(ast)) {\n            final String currentString \u003d ast.getText();\n            if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n                stringMap.computeIfAbsent(currentString, key -\u003e new ArrayList\u003c\u003e()).add(ast);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "f90ad7d5ed2f9e45eb434f024614f92695064b39": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5758: converted other line/column checks to log ast",
      "commitDate": "10/11/18 6:45 AM",
      "commitName": "f90ad7d5ed2f9e45eb434f024614f92695064b39",
      "commitAuthor": "rnveach",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 159.42,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,13 @@\n     public void visitToken(DetailAST ast) {\n         if (!isInIgnoreOccurrenceContext(ast)) {\n             final String currentString \u003d ast.getText();\n             if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n-                List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n+                List\u003cDetailAST\u003e hitList \u003d stringMap.get(currentString);\n                 if (hitList \u003d\u003d null) {\n                     hitList \u003d new ArrayList\u003c\u003e();\n                     stringMap.put(currentString, hitList);\n                 }\n-                final int line \u003d ast.getLineNo();\n-                final int col \u003d ast.getColumnNo();\n-                hitList.add(new StringInfo(line, col));\n+                hitList.add(ast);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isInIgnoreOccurrenceContext(ast)) {\n            final String currentString \u003d ast.getText();\n            if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n                List\u003cDetailAST\u003e hitList \u003d stringMap.get(currentString);\n                if (hitList \u003d\u003d null) {\n                    hitList \u003d new ArrayList\u003c\u003e();\n                    stringMap.put(currentString, hitList);\n                }\n                hitList.add(ast);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3255: changed module setters for pattern",
      "commitDate": "09/11/16 4:34 AM",
      "commitName": "8888fa5919dc31c6abe07ddc2f5fe0e29f66ef37",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/09/16 7:52 PM",
      "commitNameOld": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 49.4,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     public void visitToken(DetailAST ast) {\n         if (!isInIgnoreOccurrenceContext(ast)) {\n             final String currentString \u003d ast.getText();\n-            if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n+            if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n                 List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n                 if (hitList \u003d\u003d null) {\n                     hitList \u003d new ArrayList\u003c\u003e();\n                     stringMap.put(currentString, hitList);\n                 }\n                 final int line \u003d ast.getLineNo();\n                 final int col \u003d ast.getColumnNo();\n                 hitList.add(new StringInfo(line, col));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isInIgnoreOccurrenceContext(ast)) {\n            final String currentString \u003d ast.getText();\n            if (ignoreStringsRegexp \u003d\u003d null || !ignoreStringsRegexp.matcher(currentString).find()) {\n                List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n                if (hitList \u003d\u003d null) {\n                    hitList \u003d new ArrayList\u003c\u003e();\n                    stringMap.put(currentString, hitList);\n                }\n                final int line \u003d ast.getLineNo();\n                final int col \u003d ast.getColumnNo();\n                hitList.add(new StringInfo(line, col));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "fbf3f95c2273be23b966cba6e6ef89390a6fb020": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3433: Cut down on Checkstyle\u0027s dependencies on Guava (part 2) (#3454)\n\n",
      "commitDate": "20/09/16 7:52 PM",
      "commitName": "fbf3f95c2273be23b966cba6e6ef89390a6fb020",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "27/05/16 6:42 AM",
      "commitNameOld": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 116.55,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n     public void visitToken(DetailAST ast) {\n         if (!isInIgnoreOccurrenceContext(ast)) {\n             final String currentString \u003d ast.getText();\n             if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n                 List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n                 if (hitList \u003d\u003d null) {\n-                    hitList \u003d Lists.newArrayList();\n+                    hitList \u003d new ArrayList\u003c\u003e();\n                     stringMap.put(currentString, hitList);\n                 }\n                 final int line \u003d ast.getLineNo();\n                 final int col \u003d ast.getColumnNo();\n                 hitList.add(new StringInfo(line, col));\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isInIgnoreOccurrenceContext(ast)) {\n            final String currentString \u003d ast.getText();\n            if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n                List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n                if (hitList \u003d\u003d null) {\n                    hitList \u003d new ArrayList\u003c\u003e();\n                    stringMap.put(currentString, hitList);\n                }\n                final int line \u003d ast.getLineNo();\n                final int col \u003d ast.getColumnNo();\n                hitList.add(new StringInfo(line, col));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 111.99,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n     public void visitToken(DetailAST ast) {\n-        if (isInIgnoreOccurrenceContext(ast)) {\n-            return;\n-        }\n-        final String currentString \u003d ast.getText();\n-        if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n-            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n-            if (hitList \u003d\u003d null) {\n-                hitList \u003d Lists.newArrayList();\n-                stringMap.put(currentString, hitList);\n+        if (!isInIgnoreOccurrenceContext(ast)) {\n+            final String currentString \u003d ast.getText();\n+            if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n+                List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n+                if (hitList \u003d\u003d null) {\n+                    hitList \u003d Lists.newArrayList();\n+                    stringMap.put(currentString, hitList);\n+                }\n+                final int line \u003d ast.getLineNo();\n+                final int col \u003d ast.getColumnNo();\n+                hitList.add(new StringInfo(line, col));\n             }\n-            final int line \u003d ast.getLineNo();\n-            final int col \u003d ast.getColumnNo();\n-            hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (!isInIgnoreOccurrenceContext(ast)) {\n            final String currentString \u003d ast.getText();\n            if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n                List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n                if (hitList \u003d\u003d null) {\n                    hitList \u003d Lists.newArrayList();\n                    stringMap.put(currentString, hitList);\n                }\n                final int line \u003d ast.getLineNo();\n                final int col \u003d ast.getColumnNo();\n                hitList.add(new StringInfo(line, col));\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "20/02/15 5:02 AM",
      "commitNameOld": "27149f3504a2f350b74f456a9bffbae76a460060",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 18.36,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (isInIgnoreOccurrenceContext(ast)) {\n             return;\n         }\n         final String currentString \u003d ast.getText();\n-        if ((pattern \u003d\u003d null) || !pattern.matcher(currentString).find()) {\n+        if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n             List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n                 hitList \u003d Lists.newArrayList();\n                 stringMap.put(currentString, hitList);\n             }\n             final int line \u003d ast.getLineNo();\n             final int col \u003d ast.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (isInIgnoreOccurrenceContext(ast)) {\n            return;\n        }\n        final String currentString \u003d ast.getText();\n        if (pattern \u003d\u003d null || !pattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d Lists.newArrayList();\n                stringMap.put(currentString, hitList);\n            }\n            final int line \u003d ast.getLineNo();\n            final int col \u003d ast.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/07/14 12:44 PM",
          "commitNameOld": "dfb851e673a879120c80caca7167de3e5c3aa662",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 180.77,
          "commitsBetweenForRepo": 396,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (isInIgnoreOccurrenceContext(aAST)) {\n+        if (isInIgnoreOccurrenceContext(ast)) {\n             return;\n         }\n-        final String currentString \u003d aAST.getText();\n-        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n-            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n+        final String currentString \u003d ast.getText();\n+        if ((pattern \u003d\u003d null) || !pattern.matcher(currentString).find()) {\n+            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n                 hitList \u003d Lists.newArrayList();\n-                mStringMap.put(currentString, hitList);\n+                stringMap.put(currentString, hitList);\n             }\n-            final int line \u003d aAST.getLineNo();\n-            final int col \u003d aAST.getColumnNo();\n+            final int line \u003d ast.getLineNo();\n+            final int col \u003d ast.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (isInIgnoreOccurrenceContext(ast)) {\n            return;\n        }\n        final String currentString \u003d ast.getText();\n        if ((pattern \u003d\u003d null) || !pattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d Lists.newArrayList();\n                stringMap.put(currentString, hitList);\n            }\n            final int line \u003d ast.getLineNo();\n            final int col \u003d ast.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "22/07/14 12:44 PM",
          "commitNameOld": "dfb851e673a879120c80caca7167de3e5c3aa662",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 180.77,
          "commitsBetweenForRepo": 396,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (isInIgnoreOccurrenceContext(aAST)) {\n+        if (isInIgnoreOccurrenceContext(ast)) {\n             return;\n         }\n-        final String currentString \u003d aAST.getText();\n-        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n-            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n+        final String currentString \u003d ast.getText();\n+        if ((pattern \u003d\u003d null) || !pattern.matcher(currentString).find()) {\n+            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n                 hitList \u003d Lists.newArrayList();\n-                mStringMap.put(currentString, hitList);\n+                stringMap.put(currentString, hitList);\n             }\n-            final int line \u003d aAST.getLineNo();\n-            final int col \u003d aAST.getColumnNo();\n+            final int line \u003d ast.getLineNo();\n+            final int col \u003d ast.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (isInIgnoreOccurrenceContext(ast)) {\n            return;\n        }\n        final String currentString \u003d ast.getText();\n        if ((pattern \u003d\u003d null) || !pattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d stringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d Lists.newArrayList();\n                stringMap.put(currentString, hitList);\n            }\n            final int line \u003d ast.getLineNo();\n            final int col \u003d ast.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (isInIgnoreOccurrenceContext(aAST)) {\n            return;\n        }\n        final String currentString \u003d aAST.getText();\n        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d Lists.newArrayList();\n                mStringMap.put(currentString, hitList);\n            }\n            final int line \u003d aAST.getLineNo();\n            final int col \u003d aAST.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java"
      }
    },
    "7552a0b72e07c9a0070e84789b5abe6d293de6e0": {
      "type": "Ybodychange",
      "commitMessage": "Drinking the \"Google Collections\" Kool-Aid.\n\nI like the reduced duplication.\n",
      "commitDate": "22/04/08 5:28 AM",
      "commitName": "7552a0b72e07c9a0070e84789b5abe6d293de6e0",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "13/01/08 11:42 PM",
      "commitNameOld": "fd90bd5aa5cd623b08a2e44ef05e8fac8045d333",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 99.2,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (isInIgnoreOccurrenceContext(aAST)) {\n             return;\n         }\n         final String currentString \u003d aAST.getText();\n         if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n             List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n-                hitList \u003d new ArrayList\u003cStringInfo\u003e();\n+                hitList \u003d Lists.newArrayList();\n                 mStringMap.put(currentString, hitList);\n             }\n             final int line \u003d aAST.getLineNo();\n             final int col \u003d aAST.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (isInIgnoreOccurrenceContext(aAST)) {\n            return;\n        }\n        final String currentString \u003d aAST.getText();\n        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d Lists.newArrayList();\n                mStringMap.put(currentString, hitList);\n            }\n            final int line \u003d aAST.getLineNo();\n            final int col \u003d aAST.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "08638b5f739d9929698860048c052da2d5f80209": {
      "type": "Ybodychange",
      "commitMessage": "Start of adding generics.\n",
      "commitDate": "14/12/07 10:36 PM",
      "commitName": "08638b5f739d9929698860048c052da2d5f80209",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "11/02/07 5:37 AM",
      "commitNameOld": "a501b8d95ac2840ce201549e552f2cc540fde4ce",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 306.71,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (isInIgnoreOccurrenceContext(aAST)) {\n             return;\n         }\n         final String currentString \u003d aAST.getText();\n         if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n-            ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n+            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n-                hitList \u003d new ArrayList();\n+                hitList \u003d new ArrayList\u003cStringInfo\u003e();\n                 mStringMap.put(currentString, hitList);\n             }\n             final int line \u003d aAST.getLineNo();\n             final int col \u003d aAST.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (isInIgnoreOccurrenceContext(aAST)) {\n            return;\n        }\n        final String currentString \u003d aAST.getText();\n        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n            List\u003cStringInfo\u003e hitList \u003d mStringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d new ArrayList\u003cStringInfo\u003e();\n                mStringMap.put(currentString, hitList);\n            }\n            final int line \u003d aAST.getLineNo();\n            final int col \u003d aAST.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "a501b8d95ac2840ce201549e552f2cc540fde4ce": {
      "type": "Ybodychange",
      "commitMessage": "fix for bug 1560940: MultipleStringLiteralCheck now ignores annotations by default. It is possible to retain the old behaviour by setting the new check property ignoreOccurrenceContext to an empty value.\n",
      "commitDate": "11/02/07 5:37 AM",
      "commitName": "a501b8d95ac2840ce201549e552f2cc540fde4ce",
      "commitAuthor": "Lars Kühne",
      "commitDateOld": "27/01/07 6:51 AM",
      "commitNameOld": "1efc394250b8f1c79bd7f8344b738a7d13396ed3",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,17 @@\n     public void visitToken(DetailAST aAST)\n     {\n+        if (isInIgnoreOccurrenceContext(aAST)) {\n+            return;\n+        }\n         final String currentString \u003d aAST.getText();\n         if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n             ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n             if (hitList \u003d\u003d null) {\n                 hitList \u003d new ArrayList();\n                 mStringMap.put(currentString, hitList);\n             }\n             final int line \u003d aAST.getLineNo();\n             final int col \u003d aAST.getColumnNo();\n             hitList.add(new StringInfo(line, col));\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (isInIgnoreOccurrenceContext(aAST)) {\n            return;\n        }\n        final String currentString \u003d aAST.getText();\n        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n            ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d new ArrayList();\n                mStringMap.put(currentString, hitList);\n            }\n            final int line \u003d aAST.getLineNo();\n            final int col \u003d aAST.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "253622ab83a78434d28d050df40cdedcec303713": {
      "type": "Ybodychange",
      "commitMessage": "Patch 254918 from taab.\n",
      "commitDate": "07/10/05 6:18 PM",
      "commitName": "253622ab83a78434d28d050df40cdedcec303713",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 271.6,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,14 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String currentString \u003d aAST.getText();\n-        ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n-        if (hitList \u003d\u003d null) {\n-            hitList \u003d new ArrayList();\n-            mStringMap.put(currentString, hitList);\n+        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n+            ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n+            if (hitList \u003d\u003d null) {\n+                hitList \u003d new ArrayList();\n+                mStringMap.put(currentString, hitList);\n+            }\n+            final int line \u003d aAST.getLineNo();\n+            final int col \u003d aAST.getColumnNo();\n+            hitList.add(new StringInfo(line, col));\n         }\n-        final int line \u003d aAST.getLineNo();\n-        final int col \u003d aAST.getColumnNo();\n-        hitList.add(new StringInfo(line, col));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final String currentString \u003d aAST.getText();\n        if ((mPattern \u003d\u003d null) || !mPattern.matcher(currentString).find()) {\n            ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n            if (hitList \u003d\u003d null) {\n                hitList \u003d new ArrayList();\n                mStringMap.put(currentString, hitList);\n            }\n            final int line \u003d aAST.getLineNo();\n            final int col \u003d aAST.getColumnNo();\n            hitList.add(new StringInfo(line, col));\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "2f70947ed74ab968324fdcf83f808ff1d88df1fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:47 AM",
      "commitName": "2f70947ed74ab968324fdcf83f808ff1d88df1fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "26/08/04 6:34 AM",
      "commitNameOld": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final String currentString \u003d aAST.getText();\n         ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n         if (hitList \u003d\u003d null) {\n             hitList \u003d new ArrayList();\n             mStringMap.put(currentString, hitList);\n         }\n-        int line \u003d aAST.getLineNo();\n-        int col \u003d aAST.getColumnNo();\n+        final int line \u003d aAST.getLineNo();\n+        final int col \u003d aAST.getColumnNo();\n         hitList.add(new StringInfo(line, col));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final String currentString \u003d aAST.getText();\n        ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n        if (hitList \u003d\u003d null) {\n            hitList \u003d new ArrayList();\n            mStringMap.put(currentString, hitList);\n        }\n        final int line \u003d aAST.getLineNo();\n        final int col \u003d aAST.getColumnNo();\n        hitList.add(new StringInfo(line, col));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "5d7063c660b241bce251f1a8c89394619f2791fb": {
      "type": "Ybodychange",
      "commitMessage": "Tighten up code\n",
      "commitDate": "26/08/04 6:34 AM",
      "commitName": "5d7063c660b241bce251f1a8c89394619f2791fb",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "19/05/04 3:54 PM",
      "commitNameOld": "0e3f18dd62db45aa8819294b44805b67fd8e55a4",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 98.61,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n     public void visitToken(DetailAST aAST)\n     {\n-        String currentString \u003d aAST.getText();\n-        ArrayList i \u003d (ArrayList) mStringMap.get(currentString);\n-        if (i \u003d\u003d null) {\n-            i \u003d new ArrayList();\n-            mStringMap.put(currentString, i);\n+        final String currentString \u003d aAST.getText();\n+        ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n+        if (hitList \u003d\u003d null) {\n+            hitList \u003d new ArrayList();\n+            mStringMap.put(currentString, hitList);\n         }\n         int line \u003d aAST.getLineNo();\n         int col \u003d aAST.getColumnNo();\n-        i.add(new StringInfo(line, col));\n+        hitList.add(new StringInfo(line, col));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final String currentString \u003d aAST.getText();\n        ArrayList hitList \u003d (ArrayList) mStringMap.get(currentString);\n        if (hitList \u003d\u003d null) {\n            hitList \u003d new ArrayList();\n            mStringMap.put(currentString, hitList);\n        }\n        int line \u003d aAST.getLineNo();\n        int col \u003d aAST.getColumnNo();\n        hitList.add(new StringInfo(line, col));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java",
      "extendedDetails": {}
    },
    "0e3f18dd62db45aa8819294b44805b67fd8e55a4": {
      "type": "Yintroduced",
      "commitMessage": "MultipleStringLiteralsCheck contributed by Daniel Grenner, patch 929882\n",
      "commitDate": "19/05/04 3:54 PM",
      "commitName": "0e3f18dd62db45aa8819294b44805b67fd8e55a4",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,12 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        String currentString \u003d aAST.getText();\n+        ArrayList i \u003d (ArrayList) mStringMap.get(currentString);\n+        if (i \u003d\u003d null) {\n+            i \u003d new ArrayList();\n+            mStringMap.put(currentString, i);\n+        }\n+        int line \u003d aAST.getLineNo();\n+        int col \u003d aAST.getColumnNo();\n+        i.add(new StringInfo(line, col));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        String currentString \u003d aAST.getText();\n        ArrayList i \u003d (ArrayList) mStringMap.get(currentString);\n        if (i \u003d\u003d null) {\n            i \u003d new ArrayList();\n            mStringMap.put(currentString, i);\n        }\n        int line \u003d aAST.getLineNo();\n        int col \u003d aAST.getColumnNo();\n        i.add(new StringInfo(line, col));\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java"
    }
  }
}