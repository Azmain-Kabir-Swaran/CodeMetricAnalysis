{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TranslationCheck.java",
  "functionName": "extractBaseName",
  "functionId": "extractBaseName___fileName-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
  "functionStartLine": 489,
  "functionEndLine": 511,
  "numCommitsSeen": 82,
  "timeTaken": 1275,
  "changeHistory": [
    "bc4fe1ec9cc2abb9e370af4e8b44a4f7f71f9726",
    "3bd3a52280388520c64ec813dd1e4ffb3a0063a2",
    "d843dd8439cc5163bcd743443f970c392f4ae30e"
  ],
  "changeHistoryShort": {
    "bc4fe1ec9cc2abb9e370af4e8b44a4f7f71f9726": "Ybodychange",
    "3bd3a52280388520c64ec813dd1e4ffb3a0063a2": "Ybodychange",
    "d843dd8439cc5163bcd743443f970c392f4ae30e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc4fe1ec9cc2abb9e370af4e8b44a4f7f71f9726": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6241: resolved teamcity 2018.3 violations",
      "commitDate": "02/12/18 8:23 PM",
      "commitName": "bc4fe1ec9cc2abb9e370af4e8b44a4f7f71f9726",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/09/18 5:54 AM",
      "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
      "commitAuthorOld": "Boxuan Li",
      "daysBetweenCommits": 88.65,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private static String extractBaseName(String fileName) {\n         final String regexp;\n         final Matcher languageCountryVariantMatcher \u003d\n             LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n         final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n         final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n         if (languageCountryVariantMatcher.matches()) {\n             regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n         }\n         else if (languageCountryMatcher.matches()) {\n             regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n         }\n         else if (languageMatcher.matches()) {\n             regexp \u003d LANGUAGE_PATTERN.pattern();\n         }\n         else {\n             regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n         }\n         // We use substring(...) instead of replace(...), so that the regular expression does\n         // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n-        final String removePattern \u003d regexp.substring(\"^.+\".length(), regexp.length());\n+        final String removePattern \u003d regexp.substring(\"^.+\".length());\n         return fileName.replaceAll(removePattern, \"\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String extractBaseName(String fileName) {\n        final String regexp;\n        final Matcher languageCountryVariantMatcher \u003d\n            LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n        final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n        final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n        if (languageCountryVariantMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n        }\n        else if (languageCountryMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n        }\n        else if (languageMatcher.matches()) {\n            regexp \u003d LANGUAGE_PATTERN.pattern();\n        }\n        else {\n            regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n        }\n        // We use substring(...) instead of replace(...), so that the regular expression does\n        // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n        final String removePattern \u003d regexp.substring(\"^.+\".length());\n        return fileName.replaceAll(removePattern, \"\");\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
      "extendedDetails": {}
    },
    "3bd3a52280388520c64ec813dd1e4ffb3a0063a2": {
      "type": "Ybodychange",
      "commitMessage": "spelling: fix some typos in code/javadoc/comments\n",
      "commitDate": "05/04/17 5:37 AM",
      "commitName": "3bd3a52280388520c64ec813dd1e4ffb3a0063a2",
      "commitAuthor": "Vladislav Lisetskii",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 67.92,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private static String extractBaseName(String fileName) {\n         final String regexp;\n         final Matcher languageCountryVariantMatcher \u003d\n             LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n         final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n         final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n         if (languageCountryVariantMatcher.matches()) {\n             regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n         }\n         else if (languageCountryMatcher.matches()) {\n             regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n         }\n         else if (languageMatcher.matches()) {\n             regexp \u003d LANGUAGE_PATTERN.pattern();\n         }\n         else {\n             regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n         }\n-        // We use substring(...) insead of replace(...), so that the regular expression does\n+        // We use substring(...) instead of replace(...), so that the regular expression does\n         // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n         final String removePattern \u003d regexp.substring(\"^.+\".length(), regexp.length());\n         return fileName.replaceAll(removePattern, \"\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static String extractBaseName(String fileName) {\n        final String regexp;\n        final Matcher languageCountryVariantMatcher \u003d\n            LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n        final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n        final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n        if (languageCountryVariantMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n        }\n        else if (languageCountryMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n        }\n        else if (languageMatcher.matches()) {\n            regexp \u003d LANGUAGE_PATTERN.pattern();\n        }\n        else {\n            regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n        }\n        // We use substring(...) instead of replace(...), so that the regular expression does\n        // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n        final String removePattern \u003d regexp.substring(\"^.+\".length(), regexp.length());\n        return fileName.replaceAll(removePattern, \"\");\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java",
      "extendedDetails": {}
    },
    "d843dd8439cc5163bcd743443f970c392f4ae30e": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2204: Add \u0027baseName\u0027 option for TranslationCheck\n",
      "commitDate": "12/03/16 9:31 AM",
      "commitName": "d843dd8439cc5163bcd743443f970c392f4ae30e",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,23 @@\n+    private static String extractBaseName(String fileName) {\n+        final String regexp;\n+        final Matcher languageCountryVariantMatcher \u003d\n+            LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n+        final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n+        final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n+        if (languageCountryVariantMatcher.matches()) {\n+            regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n+        }\n+        else if (languageCountryMatcher.matches()) {\n+            regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n+        }\n+        else if (languageMatcher.matches()) {\n+            regexp \u003d LANGUAGE_PATTERN.pattern();\n+        }\n+        else {\n+            regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n+        }\n+        // We use substring(...) insead of replace(...), so that the regular expression does\n+        // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n+        final String removePattern \u003d regexp.substring(\"^.+\".length(), regexp.length());\n+        return fileName.replaceAll(removePattern, \"\");\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static String extractBaseName(String fileName) {\n        final String regexp;\n        final Matcher languageCountryVariantMatcher \u003d\n            LANGUAGE_COUNTRY_VARIANT_PATTERN.matcher(fileName);\n        final Matcher languageCountryMatcher \u003d LANGUAGE_COUNTRY_PATTERN.matcher(fileName);\n        final Matcher languageMatcher \u003d LANGUAGE_PATTERN.matcher(fileName);\n        if (languageCountryVariantMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_VARIANT_PATTERN.pattern();\n        }\n        else if (languageCountryMatcher.matches()) {\n            regexp \u003d LANGUAGE_COUNTRY_PATTERN.pattern();\n        }\n        else if (languageMatcher.matches()) {\n            regexp \u003d LANGUAGE_PATTERN.pattern();\n        }\n        else {\n            regexp \u003d DEFAULT_TRANSLATION_REGEXP;\n        }\n        // We use substring(...) insead of replace(...), so that the regular expression does\n        // not have to be compiled each time it is used inside \u0027replace\u0027 method.\n        final String removePattern \u003d regexp.substring(\"^.+\".length(), regexp.length());\n        return fileName.replaceAll(removePattern, \"\");\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java"
    }
  }
}