{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckUtil.java",
  "functionName": "getAccessModifierFromModifiersToken",
  "functionId": "getAccessModifierFromModifiersToken___modifiersToken-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
  "functionStartLine": 443,
  "functionEndLine": 464,
  "numCommitsSeen": 37,
  "timeTaken": 1594,
  "changeHistory": [
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf"
  ],
  "changeHistoryShort": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Yfilerename",
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7def79ae0ee0fcbd1cc2b719a124bcf095106948": {
      "type": "Ybodychange",
      "commitMessage": "minor: remove unnecessary antlr classes from main code",
      "commitDate": "30/03/19 5:55 AM",
      "commitName": "7def79ae0ee0fcbd1cc2b719a124bcf095106948",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 73.97,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {\n         if (modifiersToken \u003d\u003d null || modifiersToken.getType() !\u003d TokenTypes.MODIFIERS) {\n             throw new IllegalArgumentException(\"expected non-null AST-token with type \u0027MODIFIERS\u0027\");\n         }\n \n         // default access modifier\n         AccessModifier accessModifier \u003d AccessModifier.PACKAGE;\n-        for (AST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n+        for (DetailAST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n              token \u003d token.getNextSibling()) {\n             final int tokenType \u003d token.getType();\n             if (tokenType \u003d\u003d TokenTypes.LITERAL_PUBLIC) {\n                 accessModifier \u003d AccessModifier.PUBLIC;\n             }\n             else if (tokenType \u003d\u003d TokenTypes.LITERAL_PROTECTED) {\n                 accessModifier \u003d AccessModifier.PROTECTED;\n             }\n             else if (tokenType \u003d\u003d TokenTypes.LITERAL_PRIVATE) {\n                 accessModifier \u003d AccessModifier.PRIVATE;\n             }\n         }\n         return accessModifier;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {\n        if (modifiersToken \u003d\u003d null || modifiersToken.getType() !\u003d TokenTypes.MODIFIERS) {\n            throw new IllegalArgumentException(\"expected non-null AST-token with type \u0027MODIFIERS\u0027\");\n        }\n\n        // default access modifier\n        AccessModifier accessModifier \u003d AccessModifier.PACKAGE;\n        for (DetailAST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n             token \u003d token.getNextSibling()) {\n            final int tokenType \u003d token.getType();\n            if (tokenType \u003d\u003d TokenTypes.LITERAL_PUBLIC) {\n                accessModifier \u003d AccessModifier.PUBLIC;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PROTECTED) {\n                accessModifier \u003d AccessModifier.PROTECTED;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PRIVATE) {\n                accessModifier \u003d AccessModifier.PRIVATE;\n            }\n        }\n        return accessModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Yfilerename",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 6:34 PM",
      "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {\n        if (modifiersToken \u003d\u003d null || modifiersToken.getType() !\u003d TokenTypes.MODIFIERS) {\n            throw new IllegalArgumentException(\"expected non-null AST-token with type \u0027MODIFIERS\u0027\");\n        }\n\n        // default access modifier\n        AccessModifier accessModifier \u003d AccessModifier.PACKAGE;\n        for (AST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n             token \u003d token.getNextSibling()) {\n            final int tokenType \u003d token.getType();\n            if (tokenType \u003d\u003d TokenTypes.LITERAL_PUBLIC) {\n                accessModifier \u003d AccessModifier.PUBLIC;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PROTECTED) {\n                accessModifier \u003d AccessModifier.PROTECTED;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PRIVATE) {\n                accessModifier \u003d AccessModifier.PRIVATE;\n            }\n        }\n        return accessModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java"
      }
    },
    "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3675: Replace Scope with AccessModifier in ParameterNameCheck to avoid wrong scopes comparison\n",
      "commitDate": "26/01/17 8:47 AM",
      "commitName": "f91b1af3d7c130daaeb52fea303b5d8e4c2769bf",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,23 @@\n+    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {\n+        if (modifiersToken \u003d\u003d null || modifiersToken.getType() !\u003d TokenTypes.MODIFIERS) {\n+            throw new IllegalArgumentException(\"expected non-null AST-token with type \u0027MODIFIERS\u0027\");\n+        }\n+\n+        // default access modifier\n+        AccessModifier accessModifier \u003d AccessModifier.PACKAGE;\n+        for (AST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n+             token \u003d token.getNextSibling()) {\n+\n+            final int tokenType \u003d token.getType();\n+            if (tokenType \u003d\u003d TokenTypes.LITERAL_PUBLIC) {\n+                accessModifier \u003d AccessModifier.PUBLIC;\n+            }\n+            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PROTECTED) {\n+                accessModifier \u003d AccessModifier.PROTECTED;\n+            }\n+            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PRIVATE) {\n+                accessModifier \u003d AccessModifier.PRIVATE;\n+            }\n+        }\n+        return accessModifier;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static AccessModifier getAccessModifierFromModifiersToken(DetailAST modifiersToken) {\n        if (modifiersToken \u003d\u003d null || modifiersToken.getType() !\u003d TokenTypes.MODIFIERS) {\n            throw new IllegalArgumentException(\"expected non-null AST-token with type \u0027MODIFIERS\u0027\");\n        }\n\n        // default access modifier\n        AccessModifier accessModifier \u003d AccessModifier.PACKAGE;\n        for (AST token \u003d modifiersToken.getFirstChild(); token !\u003d null;\n             token \u003d token.getNextSibling()) {\n\n            final int tokenType \u003d token.getType();\n            if (tokenType \u003d\u003d TokenTypes.LITERAL_PUBLIC) {\n                accessModifier \u003d AccessModifier.PUBLIC;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PROTECTED) {\n                accessModifier \u003d AccessModifier.PROTECTED;\n            }\n            else if (tokenType \u003d\u003d TokenTypes.LITERAL_PRIVATE) {\n                accessModifier \u003d AccessModifier.PRIVATE;\n            }\n        }\n        return accessModifier;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java"
    }
  }
}