{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CustomImportOrderCheck.java",
  "functionName": "getCountOfEmptyLinesBetween",
  "functionId": "getCountOfEmptyLinesBetween___fromLineNo-int__toLineNo-int",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
  "functionStartLine": 879,
  "functionEndLine": 890,
  "numCommitsSeen": 188,
  "timeTaken": 2473,
  "changeHistory": [
    "018b52126dd3ddf58a47dadbe5f1b7ca5c7ffd3d",
    "5615664ca5d775db468c81e61f19bd6b818a14ed",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
    "914dd9994c9f108f54849a96bc35bbdd85de1053"
  ],
  "changeHistoryShort": {
    "018b52126dd3ddf58a47dadbe5f1b7ca5c7ffd3d": "Ybodychange",
    "5615664ca5d775db468c81e61f19bd6b818a14ed": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": "Ybodychange",
    "914dd9994c9f108f54849a96bc35bbdd85de1053": "Yintroduced"
  },
  "changeHistoryDetails": {
    "018b52126dd3ddf58a47dadbe5f1b7ca5c7ffd3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #7314: check empty line separator between import statements\n",
      "commitDate": "21/12/19 10:55 AM",
      "commitName": "018b52126dd3ddf58a47dadbe5f1b7ca5c7ffd3d",
      "commitAuthor": "Zhenlei Huang",
      "commitDateOld": "14/12/19 3:23 PM",
      "commitNameOld": "baa250c454de5845151b64ae940173744f4d0435",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,12 @@\n     private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n \n-        //  \"- 2\" because the numbering starts from zero\n-        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n-            if (CommonUtil.isBlank(lines[i])) {\n+        for (int i \u003d fromLineNo + 1; i \u003c\u003d toLineNo - 1; i++) {\n+            // \"- 1\" because the numbering is one-based\n+            if (CommonUtil.isBlank(lines[i - 1])) {\n                 result++;\n             }\n-            else {\n-                // stop on non-empty line\n-                break;\n-            }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n\n        for (int i \u003d fromLineNo + 1; i \u003c\u003d toLineNo - 1; i++) {\n            // \"- 1\" because the numbering is one-based\n            if (CommonUtil.isBlank(lines[i - 1])) {\n                result++;\n            }\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "5615664ca5d775db468c81e61f19bd6b818a14ed": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #6680: fix unexpected violation for extra empty line between package and import\n",
      "commitDate": "10/12/19 1:34 PM",
      "commitName": "5615664ca5d775db468c81e61f19bd6b818a14ed",
      "commitAuthor": "Zhenlei Huang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #6680: fix unexpected violation for extra empty line between package and import\n",
          "commitDate": "10/12/19 1:34 PM",
          "commitName": "5615664ca5d775db468c81e61f19bd6b818a14ed",
          "commitAuthor": "Zhenlei Huang",
          "commitDateOld": "20/09/19 2:34 PM",
          "commitNameOld": "922182037aff1b92f4a1aadbfb8ff2d2a98db874",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 81.0,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private int getCountOfEmptyLinesBefore(int lineNo) {\n+    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n-        //  [lineNo - 2] is the number of the previous line\n-        //  because the numbering starts from zero.\n-        int lineBeforeIndex \u003d lineNo - 2;\n-        while (lineBeforeIndex \u003e\u003d 0\n-                \u0026\u0026 CommonUtil.isBlank(lines[lineBeforeIndex])) {\n-            lineBeforeIndex--;\n-            result++;\n+\n+        //  \"- 2\" because the numbering starts from zero\n+        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n+            if (CommonUtil.isBlank(lines[i])) {\n+                result++;\n+            }\n+            else {\n+                // stop on non-empty line\n+                break;\n+            }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n\n        //  \"- 2\" because the numbering starts from zero\n        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n            if (CommonUtil.isBlank(lines[i])) {\n                result++;\n            }\n            else {\n                // stop on non-empty line\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "getCountOfEmptyLinesBefore",
            "newValue": "getCountOfEmptyLinesBetween"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #6680: fix unexpected violation for extra empty line between package and import\n",
          "commitDate": "10/12/19 1:34 PM",
          "commitName": "5615664ca5d775db468c81e61f19bd6b818a14ed",
          "commitAuthor": "Zhenlei Huang",
          "commitDateOld": "20/09/19 2:34 PM",
          "commitNameOld": "922182037aff1b92f4a1aadbfb8ff2d2a98db874",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 81.0,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private int getCountOfEmptyLinesBefore(int lineNo) {\n+    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n-        //  [lineNo - 2] is the number of the previous line\n-        //  because the numbering starts from zero.\n-        int lineBeforeIndex \u003d lineNo - 2;\n-        while (lineBeforeIndex \u003e\u003d 0\n-                \u0026\u0026 CommonUtil.isBlank(lines[lineBeforeIndex])) {\n-            lineBeforeIndex--;\n-            result++;\n+\n+        //  \"- 2\" because the numbering starts from zero\n+        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n+            if (CommonUtil.isBlank(lines[i])) {\n+                result++;\n+            }\n+            else {\n+                // stop on non-empty line\n+                break;\n+            }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n\n        //  \"- 2\" because the numbering starts from zero\n        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n            if (CommonUtil.isBlank(lines[i])) {\n                result++;\n            }\n            else {\n                // stop on non-empty line\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {
            "oldValue": "[lineNo-int]",
            "newValue": "[fromLineNo-int, toLineNo-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #6680: fix unexpected violation for extra empty line between package and import\n",
          "commitDate": "10/12/19 1:34 PM",
          "commitName": "5615664ca5d775db468c81e61f19bd6b818a14ed",
          "commitAuthor": "Zhenlei Huang",
          "commitDateOld": "20/09/19 2:34 PM",
          "commitNameOld": "922182037aff1b92f4a1aadbfb8ff2d2a98db874",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 81.0,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,16 @@\n-    private int getCountOfEmptyLinesBefore(int lineNo) {\n+    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n-        //  [lineNo - 2] is the number of the previous line\n-        //  because the numbering starts from zero.\n-        int lineBeforeIndex \u003d lineNo - 2;\n-        while (lineBeforeIndex \u003e\u003d 0\n-                \u0026\u0026 CommonUtil.isBlank(lines[lineBeforeIndex])) {\n-            lineBeforeIndex--;\n-            result++;\n+\n+        //  \"- 2\" because the numbering starts from zero\n+        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n+            if (CommonUtil.isBlank(lines[i])) {\n+                result++;\n+            }\n+            else {\n+                // stop on non-empty line\n+                break;\n+            }\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private int getCountOfEmptyLinesBetween(int fromLineNo, int toLineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n\n        //  \"- 2\" because the numbering starts from zero\n        for (int i \u003d toLineNo - 2; i \u003e fromLineNo - 2; i--) {\n            if (CommonUtil.isBlank(lines[i])) {\n                result++;\n            }\n            else {\n                // stop on non-empty line\n                break;\n            }\n        }\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 46.36,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n     private int getCountOfEmptyLinesBefore(int lineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n         //  [lineNo - 2] is the number of the previous line\n         //  because the numbering starts from zero.\n         int lineBeforeIndex \u003d lineNo - 2;\n         while (lineBeforeIndex \u003e\u003d 0\n-                \u0026\u0026 CommonUtils.isBlank(lines[lineBeforeIndex])) {\n+                \u0026\u0026 CommonUtil.isBlank(lines[lineBeforeIndex])) {\n             lineBeforeIndex--;\n             result++;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int getCountOfEmptyLinesBefore(int lineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n        //  [lineNo - 2] is the number of the previous line\n        //  because the numbering starts from zero.\n        int lineBeforeIndex \u003d lineNo - 2;\n        while (lineBeforeIndex \u003e\u003d 0\n                \u0026\u0026 CommonUtil.isBlank(lines[lineBeforeIndex])) {\n            lineBeforeIndex--;\n            result++;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4342: Applied requested changes\n",
      "commitDate": "18/05/17 12:43 PM",
      "commitName": "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "24/04/17 7:55 AM",
      "commitNameOld": "d6f3a17328226debcddb53ed25c39501f2781764",
      "commitAuthorOld": "Vladislav Lisetskii",
      "daysBetweenCommits": 24.2,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,13 @@\n     private int getCountOfEmptyLinesBefore(int lineNo) {\n         int result \u003d 0;\n         final String[] lines \u003d getLines();\n         //  [lineNo - 2] is the number of the previous line\n         //  because the numbering starts from zero.\n         int lineBeforeIndex \u003d lineNo - 2;\n-        while (lineBeforeIndex \u003e\u003d 0 \u0026\u0026 lines[lineBeforeIndex].trim().isEmpty()) {\n+        while (lineBeforeIndex \u003e\u003d 0\n+                \u0026\u0026 CommonUtils.isBlank(lines[lineBeforeIndex])) {\n             lineBeforeIndex--;\n             result++;\n         }\n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int getCountOfEmptyLinesBefore(int lineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n        //  [lineNo - 2] is the number of the previous line\n        //  because the numbering starts from zero.\n        int lineBeforeIndex \u003d lineNo - 2;\n        while (lineBeforeIndex \u003e\u003d 0\n                \u0026\u0026 CommonUtils.isBlank(lines[lineBeforeIndex])) {\n            lineBeforeIndex--;\n            result++;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java",
      "extendedDetails": {}
    },
    "914dd9994c9f108f54849a96bc35bbdd85de1053": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3551: CustomImportOrder shows violation on multiple line separation\n",
      "commitDate": "30/12/16 10:14 AM",
      "commitName": "914dd9994c9f108f54849a96bc35bbdd85de1053",
      "commitAuthor": "kazachka",
      "diff": "@@ -0,0 +1,12 @@\n+    private int getCountOfEmptyLinesBefore(int lineNo) {\n+        int result \u003d 0;\n+        final String[] lines \u003d getLines();\n+        //  [lineNo - 2] is the number of the previous line\n+        //  because the numbering starts from zero.\n+        int lineBeforeIndex \u003d lineNo - 2;\n+        while (lineBeforeIndex \u003e\u003d 0 \u0026\u0026 lines[lineBeforeIndex].trim().isEmpty()) {\n+            lineBeforeIndex--;\n+            result++;\n+        }\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int getCountOfEmptyLinesBefore(int lineNo) {\n        int result \u003d 0;\n        final String[] lines \u003d getLines();\n        //  [lineNo - 2] is the number of the previous line\n        //  because the numbering starts from zero.\n        int lineBeforeIndex \u003d lineNo - 2;\n        while (lineBeforeIndex \u003e\u003d 0 \u0026\u0026 lines[lineBeforeIndex].trim().isEmpty()) {\n            lineBeforeIndex--;\n            result++;\n        }\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java"
    }
  }
}