{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SuppressWarningsHolder.java",
  "functionName": "getAllAnnotationValues",
  "functionId": "getAllAnnotationValues___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
  "functionStartLine": 348,
  "functionEndLine": 377,
  "numCommitsSeen": 88,
  "timeTaken": 1159,
  "changeHistory": [
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a"
  ],
  "changeHistoryShort": {
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e8d0f037a2a300da55df6ab28d3459a6af9990d8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1290: Coverage has been increased to 100% in SuppressWarningsHolder.\n",
      "commitDate": "30/09/15 6:05 PM",
      "commitName": "e8d0f037a2a300da55df6ab28d3459a6af9990d8",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "29/09/15 4:52 PM",
      "commitNameOld": "d877cb15cfeae5f06a5d546dcc860c2aa32caac4",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n     private static List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n         // get values of annotation\n         List\u003cString\u003e values \u003d null;\n         final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n         if (lparenAST !\u003d null) {\n             final DetailAST nextAST \u003d lparenAST.getNextSibling();\n-            if (nextAST !\u003d null) {\n-                final int nextType \u003d nextAST.getType();\n-                switch (nextType) {\n-                    case TokenTypes.EXPR:\n-                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n-                        values \u003d getAnnotationValues(nextAST);\n-                        break;\n+            final int nextType \u003d nextAST.getType();\n+            switch (nextType) {\n+                case TokenTypes.EXPR:\n+                case TokenTypes.ANNOTATION_ARRAY_INIT:\n+                    values \u003d getAnnotationValues(nextAST);\n+                    break;\n \n-                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n-                        // expected children: IDENT ASSIGN ( EXPR |\n-                        // ANNOTATION_ARRAY_INIT )\n-                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n-                        break;\n+                case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n+                    // expected children: IDENT ASSIGN ( EXPR |\n+                    // ANNOTATION_ARRAY_INIT )\n+                    values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n+                    break;\n \n-                    case TokenTypes.RPAREN:\n-                        // no value present (not valid Java)\n-                        break;\n+                case TokenTypes.RPAREN:\n+                    // no value present (not valid Java)\n+                    break;\n \n-                    default:\n-                        // unknown annotation value type (new syntax?)\n-                }\n+                default:\n+                    // unknown annotation value type (new syntax?)\n+                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextAST);\n             }\n         }\n         return values;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n        // get values of annotation\n        List\u003cString\u003e values \u003d null;\n        final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n        if (lparenAST !\u003d null) {\n            final DetailAST nextAST \u003d lparenAST.getNextSibling();\n            final int nextType \u003d nextAST.getType();\n            switch (nextType) {\n                case TokenTypes.EXPR:\n                case TokenTypes.ANNOTATION_ARRAY_INIT:\n                    values \u003d getAnnotationValues(nextAST);\n                    break;\n\n                case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                    // expected children: IDENT ASSIGN ( EXPR |\n                    // ANNOTATION_ARRAY_INIT )\n                    values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                    break;\n\n                case TokenTypes.RPAREN:\n                    // no value present (not valid Java)\n                    break;\n\n                default:\n                    // unknown annotation value type (new syntax?)\n                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextAST);\n            }\n        }\n        return values;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/07/15 12:10 PM",
      "commitNameOld": "146e2657d319f070a4106cb0e4017fa6b3156949",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 12.4,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-    private List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n+    private static List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n         // get values of annotation\n         List\u003cString\u003e values \u003d null;\n         final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n         if (lparenAST !\u003d null) {\n             final DetailAST nextAST \u003d lparenAST.getNextSibling();\n             if (nextAST !\u003d null) {\n                 final int nextType \u003d nextAST.getType();\n                 switch (nextType) {\n                     case TokenTypes.EXPR:\n                     case TokenTypes.ANNOTATION_ARRAY_INIT:\n                         values \u003d getAnnotationValues(nextAST);\n                         break;\n \n                     case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                         // expected children: IDENT ASSIGN ( EXPR |\n                         // ANNOTATION_ARRAY_INIT )\n                         values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                         break;\n \n                     case TokenTypes.RPAREN:\n                         // no value present (not valid Java)\n                         break;\n \n                     default:\n                         // unknown annotation value type (new syntax?)\n                 }\n             }\n         }\n         return values;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n        // get values of annotation\n        List\u003cString\u003e values \u003d null;\n        final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n        if (lparenAST !\u003d null) {\n            final DetailAST nextAST \u003d lparenAST.getNextSibling();\n            if (nextAST !\u003d null) {\n                final int nextType \u003d nextAST.getType();\n                switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                }\n            }\n        }\n        return values;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "4287706cb4a0f7b8ab39bb6d5314b8b40841026a": {
      "type": "Yintroduced",
      "commitMessage": "SuppressWarningsHolder updated to follow Cyclomatic Complexity rule. #954\n",
      "commitDate": "13/06/15 11:01 PM",
      "commitName": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,31 @@\n+    private List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n+        // get values of annotation\n+        List\u003cString\u003e values \u003d null;\n+        final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n+        if (lparenAST !\u003d null) {\n+            final DetailAST nextAST \u003d lparenAST.getNextSibling();\n+            if (nextAST !\u003d null) {\n+                final int nextType \u003d nextAST.getType();\n+                switch (nextType) {\n+                    case TokenTypes.EXPR:\n+                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n+                        values \u003d getAnnotationValues(nextAST);\n+                        break;\n+\n+                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n+                        // expected children: IDENT ASSIGN ( EXPR |\n+                        // ANNOTATION_ARRAY_INIT )\n+                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n+                        break;\n+\n+                    case TokenTypes.RPAREN:\n+                        // no value present (not valid Java)\n+                        break;\n+\n+                    default:\n+                        // unknown annotation value type (new syntax?)\n+                }\n+            }\n+        }\n+        return values;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private List\u003cString\u003e getAllAnnotationValues(DetailAST ast) {\n        // get values of annotation\n        List\u003cString\u003e values \u003d null;\n        final DetailAST lparenAST \u003d ast.findFirstToken(TokenTypes.LPAREN);\n        if (lparenAST !\u003d null) {\n            final DetailAST nextAST \u003d lparenAST.getNextSibling();\n            if (nextAST !\u003d null) {\n                final int nextType \u003d nextAST.getType();\n                switch (nextType) {\n                    case TokenTypes.EXPR:\n                    case TokenTypes.ANNOTATION_ARRAY_INIT:\n                        values \u003d getAnnotationValues(nextAST);\n                        break;\n\n                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:\n                        // expected children: IDENT ASSIGN ( EXPR |\n                        // ANNOTATION_ARRAY_INIT )\n                        values \u003d getAnnotationValues(getNthChild(nextAST, 2));\n                        break;\n\n                    case TokenTypes.RPAREN:\n                        // no value present (not valid Java)\n                        break;\n\n                    default:\n                        // unknown annotation value type (new syntax?)\n                }\n            }\n        }\n        return values;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java"
    }
  }
}