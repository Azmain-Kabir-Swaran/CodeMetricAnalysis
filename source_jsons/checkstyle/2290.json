{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VisibilityModifierCheck.java",
  "functionName": "visitImport",
  "functionId": "visitImport___importAst-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
  "functionStartLine": 654,
  "functionEndLine": 670,
  "numCommitsSeen": 83,
  "timeTaken": 1392,
  "changeHistory": [
    "3af9d18bddcf149177e2b035ca345d6a7c90717b",
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac",
    "f9f60d3142533c3eebff775e8eb1159935faaba1"
  ],
  "changeHistoryShort": {
    "3af9d18bddcf149177e2b035ca345d6a7c90717b": "Ybodychange",
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac": "Ybodychange",
    "f9f60d3142533c3eebff775e8eb1159935faaba1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3af9d18bddcf149177e2b035ca345d6a7c90717b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5949: fix \u0027Redundant Collection operation\u0027 violations\n",
      "commitDate": "23/06/18 7:25 AM",
      "commitName": "3af9d18bddcf149177e2b035ca345d6a7c90717b",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 19.41,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,17 @@\n     private void visitImport(DetailAST importAst) {\n         if (!isStarImport(importAst)) {\n             final DetailAST type \u003d importAst.getFirstChild();\n             final String canonicalName \u003d getCanonicalName(type);\n             final String shortName \u003d getClassShortName(canonicalName);\n \n             // If imported canonical class name is not specified as allowed immutable class,\n             // but its short name collides with one of specified class - removes the short name\n             // from list to avoid names collision\n-            if (!immutableClassCanonicalNames.contains(canonicalName)\n-                     \u0026\u0026 immutableClassShortNames.contains(shortName)) {\n+            if (!immutableClassCanonicalNames.contains(canonicalName)) {\n                 immutableClassShortNames.remove(shortName);\n             }\n-            if (!ignoreAnnotationCanonicalNames.contains(canonicalName)\n-                     \u0026\u0026 ignoreAnnotationShortNames.contains(shortName)) {\n+            if (!ignoreAnnotationCanonicalNames.contains(canonicalName)) {\n                 ignoreAnnotationShortNames.remove(shortName);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitImport(DetailAST importAst) {\n        if (!isStarImport(importAst)) {\n            final DetailAST type \u003d importAst.getFirstChild();\n            final String canonicalName \u003d getCanonicalName(type);\n            final String shortName \u003d getClassShortName(canonicalName);\n\n            // If imported canonical class name is not specified as allowed immutable class,\n            // but its short name collides with one of specified class - removes the short name\n            // from list to avoid names collision\n            if (!immutableClassCanonicalNames.contains(canonicalName)) {\n                immutableClassShortNames.remove(shortName);\n            }\n            if (!ignoreAnnotationCanonicalNames.contains(canonicalName)) {\n                ignoreAnnotationShortNames.remove(shortName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "5f68bb50fd191fec409f5edb90755a18fce3e0ac": {
      "type": "Ybodychange",
      "commitMessage": "Visibility Modifier Check, ignore annotated fields\n",
      "commitDate": "07/03/15 5:14 PM",
      "commitName": "5f68bb50fd191fec409f5edb90755a18fce3e0ac",
      "commitAuthor": "alexkravin",
      "commitDateOld": "03/03/15 1:13 PM",
      "commitNameOld": "de4485a22bfe8eafc3c2e273fd328a0221d0ff9e",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 4.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n     private void visitImport(DetailAST importAst)\n     {\n         if (!isStarImport(importAst)) {\n             final DetailAST type \u003d importAst.getFirstChild();\n             final String canonicalName \u003d getCanonicalName(type);\n             final String shortName \u003d getClassShortName(canonicalName);\n \n             // If imported canonical class name is not specified as allowed immutable class,\n             // but its short name collides with one of specified class - removes the short name\n             // from list to avoid names collision\n             if (!immutableClassCanonicalNames.contains(canonicalName)\n                      \u0026\u0026 immutableClassShortNames.contains(shortName))\n             {\n                 immutableClassShortNames.remove(shortName);\n             }\n+            if (!ignoreAnnotationCanonicalNames.contains(canonicalName)\n+                     \u0026\u0026 ignoreAnnotationShortNames.contains(shortName))\n+            {\n+                ignoreAnnotationShortNames.remove(shortName);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitImport(DetailAST importAst)\n    {\n        if (!isStarImport(importAst)) {\n            final DetailAST type \u003d importAst.getFirstChild();\n            final String canonicalName \u003d getCanonicalName(type);\n            final String shortName \u003d getClassShortName(canonicalName);\n\n            // If imported canonical class name is not specified as allowed immutable class,\n            // but its short name collides with one of specified class - removes the short name\n            // from list to avoid names collision\n            if (!immutableClassCanonicalNames.contains(canonicalName)\n                     \u0026\u0026 immutableClassShortNames.contains(shortName))\n            {\n                immutableClassShortNames.remove(shortName);\n            }\n            if (!ignoreAnnotationCanonicalNames.contains(canonicalName)\n                     \u0026\u0026 ignoreAnnotationShortNames.contains(shortName))\n            {\n                ignoreAnnotationShortNames.remove(shortName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java",
      "extendedDetails": {}
    },
    "f9f60d3142533c3eebff775e8eb1159935faaba1": {
      "type": "Yintroduced",
      "commitMessage": "Visibility Modifier Check, added option allows public immutable fields, issue #61\n",
      "commitDate": "26/02/15 12:35 PM",
      "commitName": "f9f60d3142533c3eebff775e8eb1159935faaba1",
      "commitAuthor": "alexkravin",
      "diff": "@@ -0,0 +1,17 @@\n+    private void visitImport(DetailAST importAst)\n+    {\n+        if (!isStarImport(importAst)) {\n+            final DetailAST type \u003d importAst.getFirstChild();\n+            final String canonicalName \u003d getCanonicalName(type);\n+            final String shortName \u003d getClassShortName(canonicalName);\n+\n+            // If imported canonical class name is not specified as allowed immutable class,\n+            // but its short name collides with one of specified class - removes the short name\n+            // from list to avoid names collision\n+            if (!immutableClassCanonicalNames.contains(canonicalName)\n+                     \u0026\u0026 immutableClassShortNames.contains(shortName))\n+            {\n+                immutableClassShortNames.remove(shortName);\n+            }\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitImport(DetailAST importAst)\n    {\n        if (!isStarImport(importAst)) {\n            final DetailAST type \u003d importAst.getFirstChild();\n            final String canonicalName \u003d getCanonicalName(type);\n            final String shortName \u003d getClassShortName(canonicalName);\n\n            // If imported canonical class name is not specified as allowed immutable class,\n            // but its short name collides with one of specified class - removes the short name\n            // from list to avoid names collision\n            if (!immutableClassCanonicalNames.contains(canonicalName)\n                     \u0026\u0026 immutableClassShortNames.contains(shortName))\n            {\n                immutableClassShortNames.remove(shortName);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java"
    }
  }
}