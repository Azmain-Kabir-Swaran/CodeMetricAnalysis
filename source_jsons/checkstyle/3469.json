{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotationUtil.java",
  "functionName": "getAnnotation",
  "functionId": "getAnnotation___ast-DetailAST(modifiers-final)__annotation-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
  "functionStartLine": 180,
  "functionEndLine": 201,
  "numCommitsSeen": 25,
  "timeTaken": 2817,
  "changeHistory": [
    "20e7c597f4ddfdbd8b1025f909d354b9ddfcf3bb",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "77565df34f8e5a9cb08ba27c7b4e18c695ff971d",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
    "32a7a3336096bed0a09491493c257924037715f7",
    "167dd96d8ca503a472bf003f187191d6b0ce586c",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903",
    "dab75cd8a08345b16e334c803a3208f8494db097",
    "e3b3bfb9997b28fc95d0f950e9673a595e2f4c7d"
  ],
  "changeHistoryShort": {
    "20e7c597f4ddfdbd8b1025f909d354b9ddfcf3bb": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ymultichange(Yfilerename,Ybodychange)",
    "77565df34f8e5a9cb08ba27c7b4e18c695ff971d": "Ybodychange",
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": "Ybodychange",
    "32a7a3336096bed0a09491493c257924037715f7": "Ybodychange",
    "167dd96d8ca503a472bf003f187191d6b0ce586c": "Ybodychange",
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": "Ybodychange",
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": "Yfilerename",
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": "Ybodychange",
    "dab75cd8a08345b16e334c803a3208f8494db097": "Ybodychange",
    "e3b3bfb9997b28fc95d0f950e9673a595e2f4c7d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20e7c597f4ddfdbd8b1025f909d354b9ddfcf3bb": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5608: Adding support for allowedAnnotations in javadocTypeCheck\n",
      "commitDate": "13/11/18 9:09 PM",
      "commitName": "20e7c597f4ddfdbd8b1025f909d354b9ddfcf3bb",
      "commitAuthor": "Nikolaos Georgiou",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 163.02,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,22 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (CommonUtil.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n-        final DetailAST holder \u003d getAnnotationHolder(ast);\n-        DetailAST result \u003d null;\n-        for (DetailAST child \u003d holder.getFirstChild();\n-            child !\u003d null; child \u003d child.getNextSibling()) {\n-            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n-                final String name \u003d\n+        return findFirstAnnotation(ast, annotationNode -\u003e {\n+            final DetailAST firstChild \u003d annotationNode.findFirstToken(TokenTypes.AT);\n+            final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n-                if (annotation.equals(name)) {\n-                    result \u003d child;\n-                    break;\n-                }\n-            }\n-        }\n-\n-        return result;\n+            return annotation.equals(name);\n+        });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CommonUtil.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        return findFirstAnnotation(ast, annotationNode -\u003e {\n            final DetailAST firstChild \u003d annotationNode.findFirstToken(TokenTypes.AT);\n            final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n            return annotation.equals(name);\n        });\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n-        if (CommonUtils.isBlank(annotation)) {\n+        if (CommonUtil.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n         DetailAST result \u003d null;\n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     result \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CommonUtil.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n        DetailAST result \u003d null;\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    result \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
          "extendedDetails": {
            "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
            "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
          "commitDate": "03/06/18 9:40 PM",
          "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
          "commitAuthor": "Pavel Bludov",
          "commitDateOld": "03/06/18 6:34 PM",
          "commitNameOld": "2b9308a4f532e78a53e090922787175103dfeb34",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n-        if (CommonUtils.isBlank(annotation)) {\n+        if (CommonUtil.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n         DetailAST result \u003d null;\n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     result \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CommonUtil.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n        DetailAST result \u003d null;\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    result \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "77565df34f8e5a9cb08ba27c7b4e18c695ff971d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5327: fixed finding annotation name with comment embedded",
      "commitDate": "08/12/17 6:19 AM",
      "commitName": "77565df34f8e5a9cb08ba27c7b4e18c695ff971d",
      "commitAuthor": "rnveach",
      "commitDateOld": "09/11/17 6:45 AM",
      "commitNameOld": "f0ed29b5cfef6adcec791cfdc236a5b850b685ee",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 28.98,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (CommonUtils.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n         DetailAST result \u003d null;\n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                final DetailAST firstChild \u003d child.getFirstChild();\n+                final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     result \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CommonUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n        DetailAST result \u003d null;\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.findFirstToken(TokenTypes.AT);\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    result \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "7609e96cc998cca40b396eb3f2d7ae82f60fcce1": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4342: Applied requested changes\n",
      "commitDate": "18/05/17 12:43 PM",
      "commitName": "7609e96cc998cca40b396eb3f2d7ae82f60fcce1",
      "commitAuthor": "Dmytro Kytsmen",
      "commitDateOld": "27/01/17 6:31 AM",
      "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 111.22,
      "commitsBetweenForRepo": 401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n-        if (CharMatcher.WHITESPACE.matchesAllOf(annotation)) {\n+        if (CommonUtils.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n         DetailAST result \u003d null;\n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST firstChild \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     result \u003d child;\n                     break;\n                 }\n             }\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CommonUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n        DetailAST result \u003d null;\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    result \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "32a7a3336096bed0a09491493c257924037715f7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3628: ReturnCountExtendedCheck from sevntu is enabled, all violations are resolved\n",
      "commitDate": "10/12/16 3:25 PM",
      "commitName": "32a7a3336096bed0a09491493c257924037715f7",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 268.41,
      "commitsBetweenForRepo": 488,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (CharMatcher.WHITESPACE.matchesAllOf(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n-\n+        DetailAST result \u003d null;\n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST firstChild \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n-                    return child;\n+                    result \u003d child;\n+                    break;\n                 }\n             }\n         }\n \n-        return null;\n+        return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CharMatcher.WHITESPACE.matchesAllOf(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n        DetailAST result \u003d null;\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    result \u003d child;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "167dd96d8ca503a472bf003f187191d6b0ce586c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": "17/03/16 6:39 AM",
      "commitName": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 72.55,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n-        if (StringUtils.isBlank(annotation)) {\n+        if (CharMatcher.WHITESPACE.matchesAllOf(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST firstChild \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     return child;\n                 }\n             }\n         }\n \n         return null;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (CharMatcher.WHITESPACE.matchesAllOf(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "30c3a362d45721e6925fe89ba71f0fe69d0fc471": {
      "type": "Ybodychange",
      "commitMessage": "Issue #985: Fix PMD violations for ShortVariable rule\n",
      "commitDate": "06/10/15 5:46 PM",
      "commitName": "30c3a362d45721e6925fe89ba71f0fe69d0fc471",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "31/08/15 11:24 AM",
      "commitNameOld": "2b861bd6e16584e22bb115ff7abd65c35072eb92",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 36.27,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d getAnnotationHolder(ast);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n-                final DetailAST at \u003d child.getFirstChild();\n+                final DetailAST firstChild \u003d child.getFirstChild();\n                 final String name \u003d\n-                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n+                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     return child;\n                 }\n             }\n         }\n \n         return null;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (StringUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST firstChild \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "ed595de84fba2db507adaf01d04cb089a5e0bac5": {
      "type": "Yfilerename",
      "commitMessage": "Utils classes have been moved to utils package. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "26/08/15 6:08 PM",
      "commitNameOld": "f6113bb56d695719a8803274effb3596cb82120f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (StringUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/AnnotationUtility.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java"
      }
    },
    "82d8e91024a57a96fbb6410dacb29d6a3f582903": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary qualifiers. #1555\n\nFixes `UnnecessarilyQualifiedStaticUsage` inspection violations.\n\nDescription:\n\u003eReports calls to static methods or accesses of static fields on the current class which are qualified with the class name. Such qualification is unnecessary, and may be safely removed.\n",
      "commitDate": "11/08/15 1:14 PM",
      "commitName": "82d8e91024a57a96fbb6410dacb29d6a3f582903",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "11/08/15 5:18 AM",
      "commitNameOld": "1935bed5772c0a939b9168b81acd2ab5aa800538",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n             throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n             throw new IllegalArgumentException(\n                     \"the annotation is empty or spaces\");\n         }\n \n-        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(ast);\n+        final DetailAST holder \u003d getAnnotationHolder(ast);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST at \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(at.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     return child;\n                 }\n             }\n         }\n \n         return null;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (StringUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "dab75cd8a08345b16e334c803a3208f8494db097": {
      "type": "Ybodychange",
      "commitMessage": "Make coverage 100% for all classes at package com.puppycrawl.tools.checkstyle . #1294\n",
      "commitDate": "05/07/15 10:45 PM",
      "commitName": "dab75cd8a08345b16e334c803a3208f8494db097",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 49.75,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     public static DetailAST getAnnotation(final DetailAST ast,\n         String annotation) {\n         if (ast \u003d\u003d null) {\n-            throw new IllegalArgumentException(\"the ast is null\");\n+            throw new IllegalArgumentException(THE_AST_IS_NULL);\n         }\n \n         if (annotation \u003d\u003d null) {\n             throw new IllegalArgumentException(\"the annotation is null\");\n         }\n \n         if (StringUtils.isBlank(annotation)) {\n-            throw new IllegalArgumentException(\"the annotation\"\n-                + \"is empty or spaces\");\n+            throw new IllegalArgumentException(\n+                    \"the annotation is empty or spaces\");\n         }\n \n         final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(ast);\n \n         for (DetailAST child \u003d holder.getFirstChild();\n             child !\u003d null; child \u003d child.getNextSibling()) {\n             if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                 final DetailAST at \u003d child.getFirstChild();\n                 final String name \u003d\n                     FullIdent.createFullIdent(at.getNextSibling()).getText();\n                 if (annotation.equals(name)) {\n                     return child;\n                 }\n             }\n         }\n \n         return null;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation) {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(THE_AST_IS_NULL);\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (StringUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\n                    \"the annotation is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling()) {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/AnnotationUtility.java",
      "extendedDetails": {}
    },
    "e3b3bfb9997b28fc95d0f950e9673a595e2f4c7d": {
      "type": "Yintroduced",
      "commitMessage": "Util classes should be moved out of api package. Issue #1057\n",
      "commitDate": "05/05/15 4:40 PM",
      "commitName": "e3b3bfb9997b28fc95d0f950e9673a595e2f4c7d",
      "commitAuthor": "Roman Ivanov",
      "diff": "@@ -0,0 +1,33 @@\n+    public static DetailAST getAnnotation(final DetailAST ast,\n+        String annotation)\n+    {\n+        if (ast \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"the ast is null\");\n+        }\n+\n+        if (annotation \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"the annotation is null\");\n+        }\n+\n+        if (StringUtils.isBlank(annotation)) {\n+            throw new IllegalArgumentException(\"the annotation\"\n+                + \"is empty or spaces\");\n+        }\n+\n+        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(ast);\n+\n+        for (DetailAST child \u003d holder.getFirstChild();\n+            child !\u003d null; child \u003d child.getNextSibling())\n+        {\n+            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n+                final DetailAST at \u003d child.getFirstChild();\n+                final String name \u003d\n+                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n+                if (annotation.equals(name)) {\n+                    return child;\n+                }\n+            }\n+        }\n+\n+        return null;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static DetailAST getAnnotation(final DetailAST ast,\n        String annotation)\n    {\n        if (ast \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the ast is null\");\n        }\n\n        if (annotation \u003d\u003d null) {\n            throw new IllegalArgumentException(\"the annotation is null\");\n        }\n\n        if (StringUtils.isBlank(annotation)) {\n            throw new IllegalArgumentException(\"the annotation\"\n                + \"is empty or spaces\");\n        }\n\n        final DetailAST holder \u003d AnnotationUtility.getAnnotationHolder(ast);\n\n        for (DetailAST child \u003d holder.getFirstChild();\n            child !\u003d null; child \u003d child.getNextSibling())\n        {\n            if (child.getType() \u003d\u003d TokenTypes.ANNOTATION) {\n                final DetailAST at \u003d child.getFirstChild();\n                final String name \u003d\n                    FullIdent.createFullIdent(at.getNextSibling()).getText();\n                if (annotation.equals(name)) {\n                    return child;\n                }\n            }\n        }\n\n        return null;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/AnnotationUtility.java"
    }
  }
}