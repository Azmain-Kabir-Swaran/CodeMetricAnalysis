{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UniquePropertiesCheck.java",
  "functionName": "processFiltered",
  "functionId": "processFiltered___file-File__fileText-FileText",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
  "functionStartLine": 89,
  "functionEndLine": 106,
  "numCommitsSeen": 68,
  "timeTaken": 2953,
  "changeHistory": [
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
    "0461a0f839c8cd2306354912b4956267c1d0ec20",
    "c28b535e91cb73f7630230695ef52fdf655e46e4",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
    "0c2abadbb7f2887f31011157d62edf40bea131c3",
    "82979737c4201b4913ea30b9c9431e71783d1c02",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
    "ea963bb721aafd9584242cedf2781f0294f2b18d",
    "ca1c33e3112d9217e89eec82bbcd589381d48715",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "3ba599059682310f72e0fb7e5354be29e9ead169"
  ],
  "changeHistoryShort": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": "Ybodychange",
    "0461a0f839c8cd2306354912b4956267c1d0ec20": "Ybodychange",
    "c28b535e91cb73f7630230695ef52fdf655e46e4": "Ybodychange",
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": "Ybodychange",
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": "Ybodychange",
    "0c2abadbb7f2887f31011157d62edf40bea131c3": "Ybodychange",
    "82979737c4201b4913ea30b9c9431e71783d1c02": "Ymultichange(Yparameterchange,Ybodychange)",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": "Ybodychange",
    "ea963bb721aafd9584242cedf2781f0294f2b18d": "Ybodychange",
    "ca1c33e3112d9217e89eec82bbcd589381d48715": "Ybodychange",
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "3ba599059682310f72e0fb7e5354be29e9ead169": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c998a06ad78213e31b2449e9c9e466c2ff8222f9": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6000: Fix zero line violations\n",
      "commitDate": "05/09/18 5:54 AM",
      "commitName": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
      "commitAuthor": "Boxuan Li",
      "commitDateOld": "07/05/18 6:47 PM",
      "commitNameOld": "0461a0f839c8cd2306354912b4956267c1d0ec20",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 120.46,
      "commitsBetweenForRepo": 270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n         try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n             properties.load(inputStream);\n         }\n         catch (IOException ex) {\n-            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n+            log(1, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString, AtomicInteger\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getKey();\n             final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getValue().get() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n            properties.load(inputStream);\n        }\n        catch (IOException ex) {\n            log(1, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString, AtomicInteger\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getKey();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getValue().get() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "0461a0f839c8cd2306354912b4956267c1d0ec20": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3484: removed instances of guava immutables",
      "commitDate": "07/05/18 6:47 PM",
      "commitName": "0461a0f839c8cd2306354912b4956267c1d0ec20",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/04/18 11:55 AM",
      "commitNameOld": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 17.29,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n         try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n             properties.load(inputStream);\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n-        for (Entry\u003cString\u003e duplication : properties\n+        for (Entry\u003cString, AtomicInteger\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n-            final String keyName \u003d duplication.getElement();\n+            final String keyName \u003d duplication.getKey();\n             final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n-            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n+            log(lineNumber, MSG_KEY, keyName, duplication.getValue().get() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n            properties.load(inputStream);\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString, AtomicInteger\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getKey();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getValue().get() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "c28b535e91cb73f7630230695ef52fdf655e46e4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5616: Remove remnants of cobertura usage\n",
      "commitDate": "20/04/18 11:55 AM",
      "commitName": "c28b535e91cb73f7630230695ef52fdf655e46e4",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,18 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n-        InputStream inputStream \u003d null;\n-        try {\n-            inputStream \u003d Files.newInputStream(file.toPath());\n+        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n             properties.load(inputStream);\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n-        finally {\n-            Closeables.closeQuietly(inputStream);\n-        }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n        try (InputStream inputStream \u003d Files.newInputStream(file.toPath())) {\n            properties.load(inputStream);\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "042bf228c796f5fa7c5b4b96b94e0afd7b465538": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5638: File{Input,Output}Stream to Files.new{Input,Output}Stream\n",
      "commitDate": "14/04/18 5:52 AM",
      "commitName": "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "0847a10b9430d9fb0a3f44df03e891da906bea47",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 99.9,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n-        FileInputStream fileInputStream \u003d null;\n+        InputStream inputStream \u003d null;\n         try {\n-            fileInputStream \u003d new FileInputStream(file);\n-            properties.load(fileInputStream);\n+            inputStream \u003d Files.newInputStream(file.toPath());\n+            properties.load(inputStream);\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n         finally {\n-            Closeables.closeQuietly(fileInputStream);\n+            Closeables.closeQuietly(inputStream);\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n        InputStream inputStream \u003d null;\n        try {\n            inputStream \u003d Files.newInputStream(file.toPath());\n            properties.load(inputStream);\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n        finally {\n            Closeables.closeQuietly(inputStream);\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4713: fix all violations from the third part of idea violations\n",
      "commitDate": "20/07/17 10:04 PM",
      "commitName": "b1a0f2b5f61a997e0b7e3fdff8f19a0ae0180ac6",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "13/07/17 5:29 AM",
      "commitNameOld": "8c08011e09bef5b739ca59366aaa83f698104eb1",
      "commitAuthorOld": "BBG",
      "daysBetweenCommits": 7.69,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n-\n+        FileInputStream fileInputStream \u003d null;\n         try {\n-            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n-            try {\n-                // As file is already read, there should not be any exceptions.\n-                properties.load(fileInputStream);\n-            }\n-            finally {\n-                fileInputStream.close();\n-            }\n+            fileInputStream \u003d new FileInputStream(file);\n+            properties.load(fileInputStream);\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n+        finally {\n+            Closeables.closeQuietly(fileInputStream);\n+        }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n        FileInputStream fileInputStream \u003d null;\n        try {\n            fileInputStream \u003d new FileInputStream(file);\n            properties.load(fileInputStream);\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n        finally {\n            Closeables.closeQuietly(fileInputStream);\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "0c2abadbb7f2887f31011157d62edf40bea131c3": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4641: Avoid usage of getLines method from FileText\n",
      "commitDate": "10/07/17 12:57 PM",
      "commitName": "0c2abadbb7f2887f31011157d62edf40bea131c3",
      "commitAuthor": "Timur",
      "commitDateOld": "06/07/17 1:22 PM",
      "commitNameOld": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthorOld": "Timur",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n     protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n-            final List\u003cString\u003e lines \u003d fileText.getLines();\n-            final int lineNumber \u003d getLineNumber(lines, keyName);\n+            final int lineNumber \u003d getLineNumber(fileText, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(fileText, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "82979737c4201b4913ea30b9c9431e71783d1c02": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
      "commitDate": "06/07/17 1:22 PM",
      "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
      "commitAuthor": "Timur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
          "commitDate": "06/07/17 1:22 PM",
          "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthor": "Timur",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 160.24,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-    protected void processFiltered(File file, List\u003cString\u003e lines) {\n+    protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n+            final List\u003cString\u003e lines \u003d fileText.getLines();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final List\u003cString\u003e lines \u003d fileText.getLines();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {
            "oldValue": "[file-File, lines-List\u003cString\u003e]",
            "newValue": "[file-File, fileText-FileText]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3034: FileText should not extends AbstractList\n",
          "commitDate": "06/07/17 1:22 PM",
          "commitName": "82979737c4201b4913ea30b9c9431e71783d1c02",
          "commitAuthor": "Timur",
          "commitDateOld": "27/01/17 6:31 AM",
          "commitNameOld": "b4a337a599e853cdc44b19a76da28fcfab2956cd",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 160.24,
          "commitsBetweenForRepo": 584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-    protected void processFiltered(File file, List\u003cString\u003e lines) {\n+    protected void processFiltered(File file, FileText fileText) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n         catch (IOException ex) {\n             log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n+            final List\u003cString\u003e lines \u003d fileText.getLines();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, FileText fileText) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final List\u003cString\u003e lines \u003d fileText.getLines();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n         catch (IOException ex) {\n-            log(0, IO_EXCEPTION_KEY, file.getPath(),\n+            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                     ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException ex) {\n            log(0, MSG_IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "f65b17cbc30795247fef3077cce16a8bb53e9ffc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2616: Fix CatchParameterName check violations in Checkstyle code\n",
      "commitDate": "03/12/15 3:16 PM",
      "commitName": "f65b17cbc30795247fef3077cce16a8bb53e9ffc",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "25/10/15 1:50 PM",
      "commitNameOld": "66ed32ae55811c22434e7296566915759e921305",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 39.1,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n-        catch (IOException e) {\n+        catch (IOException ex) {\n             log(0, IO_EXCEPTION_KEY, file.getPath(),\n-                    e.getLocalizedMessage());\n+                    ex.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException ex) {\n            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                    ex.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "ea963bb721aafd9584242cedf2781f0294f2b18d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1566: \u0027missing javadoc comment\u0027 violations partial fix\n",
      "commitDate": "19/08/15 1:14 PM",
      "commitName": "ea963bb721aafd9584242cedf2781f0294f2b18d",
      "commitAuthor": "Ruslan Diachenko",
      "commitDateOld": "15/08/15 8:55 PM",
      "commitNameOld": "e936c4c6fae73ec4c53aa8f2f9db302d064e1b8e",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines) {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             final FileInputStream fileInputStream \u003d new FileInputStream(file);\n             try {\n                 // As file is already read, there should not be any exceptions.\n                 properties.load(fileInputStream);\n             }\n             finally {\n                 fileInputStream.close();\n             }\n         }\n         catch (IOException e) {\n             log(0, IO_EXCEPTION_KEY, file.getPath(),\n                     e.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n-                .getDuplicatedStrings().entrySet()) {\n+                .getDuplicatedKeys().entrySet()) {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines) {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedKeys().entrySet()) {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "ca1c33e3112d9217e89eec82bbcd589381d48715": {
      "type": "Ybodychange",
      "commitMessage": "Clean up open streams, issue #778\n\nAll violations of Fildbugs rule [OBL: Method may fail to clean up stream or resource](http://findbugs.sourceforge.net/bugDescriptions.html#OBL_UNSATISFIED_OBLIGATION) are fixed.\n",
      "commitDate": "15/03/15 3:17 PM",
      "commitName": "ca1c33e3112d9217e89eec82bbcd589381d48715",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 25.04,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,28 @@\n     protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n-            // As file is already read, there should not be any exceptions.\n-            properties.load(new FileInputStream(file));\n+            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n+            try {\n+                // As file is already read, there should not be any exceptions.\n+                properties.load(fileInputStream);\n+            }\n+            finally {\n+                fileInputStream.close();\n+            }\n         }\n         catch (IOException e) {\n             log(0, IO_EXCEPTION_KEY, file.getPath(),\n                     e.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedStrings().entrySet())\n         {\n             final String keyName \u003d duplication.getElement();\n             final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            final FileInputStream fileInputStream \u003d new FileInputStream(file);\n            try {\n                // As file is already read, there should not be any exceptions.\n                properties.load(fileInputStream);\n            }\n            finally {\n                fileInputStream.close();\n            }\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedStrings().entrySet())\n        {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {}
    },
    "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
      "commitDate": "19/01/15 6:37 AM",
      "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             // As file is already read, there should not be any exceptions.\n-            properties.load(new FileInputStream(aFile));\n+            properties.load(new FileInputStream(file));\n         }\n         catch (IOException e) {\n-            log(0, IO_EXCEPTION_KEY, aFile.getPath(),\n+            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                     e.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedStrings().entrySet())\n         {\n             final String keyName \u003d duplication.getElement();\n-            final int lineNumber \u003d getLineNumber(aLines, keyName);\n+            final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            // As file is already read, there should not be any exceptions.\n            properties.load(new FileInputStream(file));\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedStrings().entrySet())\n        {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {
            "oldValue": "[aFile-File, aLines-List\u003cString\u003e]",
            "newValue": "[file-File, lines-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, checks, #512\n\nConflicts:\n\tsrc/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java\n",
          "commitDate": "19/01/15 6:37 AM",
          "commitName": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3",
          "commitAuthor": "alexkravin",
          "commitDateOld": "04/03/14 9:18 AM",
          "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
          "commitAuthorOld": "Ivan Sopov",
          "daysBetweenCommits": 320.89,
          "commitsBetweenForRepo": 475,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    protected void processFiltered(File file, List\u003cString\u003e lines)\n     {\n         final UniqueProperties properties \u003d new UniqueProperties();\n \n         try {\n             // As file is already read, there should not be any exceptions.\n-            properties.load(new FileInputStream(aFile));\n+            properties.load(new FileInputStream(file));\n         }\n         catch (IOException e) {\n-            log(0, IO_EXCEPTION_KEY, aFile.getPath(),\n+            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                     e.getLocalizedMessage());\n         }\n \n         for (Entry\u003cString\u003e duplication : properties\n                 .getDuplicatedStrings().entrySet())\n         {\n             final String keyName \u003d duplication.getElement();\n-            final int lineNumber \u003d getLineNumber(aLines, keyName);\n+            final int lineNumber \u003d getLineNumber(lines, keyName);\n             // Number of occurrences is number of duplications + 1\n             log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void processFiltered(File file, List\u003cString\u003e lines)\n    {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            // As file is already read, there should not be any exceptions.\n            properties.load(new FileInputStream(file));\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, file.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedStrings().entrySet())\n        {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(lines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            // As file is already read, there should not be any exceptions.\n            properties.load(new FileInputStream(aFile));\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, aFile.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedStrings().entrySet())\n        {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(aLines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java"
      }
    },
    "3ba599059682310f72e0fb7e5354be29e9ead169": {
      "type": "Yintroduced",
      "commitMessage": "Implemented UniqueProperties check\n",
      "commitDate": "25/10/13 1:11 AM",
      "commitName": "3ba599059682310f72e0fb7e5354be29e9ead169",
      "commitAuthor": "Pavel Baranchikov",
      "diff": "@@ -0,0 +1,22 @@\n+    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n+    {\n+        final UniqueProperties properties \u003d new UniqueProperties();\n+\n+        try {\n+            // As file is already read, there should not be any exceptions.\n+            properties.load(new FileInputStream(aFile));\n+        }\n+        catch (IOException e) {\n+            log(0, IO_EXCEPTION_KEY, aFile.getPath(),\n+                    e.getLocalizedMessage());\n+        }\n+\n+        for (Entry\u003cString\u003e duplication : properties\n+                .getDuplicatedStrings().entrySet())\n+        {\n+            final String keyName \u003d duplication.getElement();\n+            final int lineNumber \u003d getLineNumber(aLines, keyName);\n+            // Number of occurrences is number of duplications + 1\n+            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void processFiltered(File aFile, List\u003cString\u003e aLines)\n    {\n        final UniqueProperties properties \u003d new UniqueProperties();\n\n        try {\n            // As file is already read, there should not be any exceptions.\n            properties.load(new FileInputStream(aFile));\n        }\n        catch (IOException e) {\n            log(0, IO_EXCEPTION_KEY, aFile.getPath(),\n                    e.getLocalizedMessage());\n        }\n\n        for (Entry\u003cString\u003e duplication : properties\n                .getDuplicatedStrings().entrySet())\n        {\n            final String keyName \u003d duplication.getElement();\n            final int lineNumber \u003d getLineNumber(aLines, keyName);\n            // Number of occurrences is number of duplications + 1\n            log(lineNumber, MSG_KEY, keyName, duplication.getCount() + 1);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java"
    }
  }
}