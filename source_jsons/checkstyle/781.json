{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckstyleAntTask.java",
  "functionName": "createRootModule",
  "functionId": "createRootModule",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
  "functionStartLine": 396,
  "functionEndLine": 428,
  "numCommitsSeen": 68,
  "timeTaken": 1764,
  "changeHistory": [
    "145160f5e21b80c27dc93a1904fe33b9afd4f212",
    "dc88a9954baf88df6543cf73baabed710f882363",
    "036582d728d2e2bb37f360bb3a74f899f04d587d",
    "61f2ef243a13f4105965dad88b647f5c64e41f86",
    "db21f8b13a1e593711727c1cb0192af46409a343",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1"
  ],
  "changeHistoryShort": {
    "145160f5e21b80c27dc93a1904fe33b9afd4f212": "Ybodychange",
    "dc88a9954baf88df6543cf73baabed710f882363": "Ybodychange",
    "036582d728d2e2bb37f360bb3a74f899f04d587d": "Ybodychange",
    "61f2ef243a13f4105965dad88b647f5c64e41f86": "Ybodychange",
    "db21f8b13a1e593711727c1cb0192af46409a343": "Ybodychange",
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "145160f5e21b80c27dc93a1904fe33b9afd4f212": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3773: start to remove classLoader from checkstyle",
      "commitDate": "11/10/19 11:09 PM",
      "commitName": "145160f5e21b80c27dc93a1904fe33b9afd4f212",
      "commitAuthor": "rnveach",
      "commitDateOld": "15/01/19 5:46 AM",
      "commitNameOld": "a73ff0890c27cbe8affc1a55f2710a231687bd85",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 269.68,
      "commitsBetweenForRepo": 574,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,33 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final ThreadModeSettings threadModeSettings \u003d\n                     ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n             final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n             if (executeIgnoredModules) {\n                 ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n             }\n             else {\n                 ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n             }\n \n             final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(config,\n                     new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n-\n-            if (rootModule instanceof Checker) {\n-                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n-                        classpath);\n-\n-                ((Checker) rootModule).setClassLoader(loader);\n-            }\n-\n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final ThreadModeSettings threadModeSettings \u003d\n                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n            final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n            if (executeIgnoredModules) {\n                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n            }\n            else {\n                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n            }\n\n            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(config,\n                    new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n            rootModule.configure(configuration);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "dc88a9954baf88df6543cf73baabed710f882363": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4709: fix avoid boolean parameters for public methods\n",
      "commitDate": "09/08/17 4:54 AM",
      "commitName": "dc88a9954baf88df6543cf73baabed710f882363",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "23/07/17 6:19 PM",
      "commitNameOld": "4c10bc55b4aea0f7e3b95b06d820eedb7c6a6fb2",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 16.44,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,41 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final ThreadModeSettings threadModeSettings \u003d\n                     ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n-            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(\n-                    config, new PropertiesExpander(props),\n-                    !executeIgnoredModules, threadModeSettings);\n+            final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n+            if (executeIgnoredModules) {\n+                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n+            }\n+            else {\n+                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n+            }\n+\n+            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(config,\n+                    new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final ThreadModeSettings threadModeSettings \u003d\n                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n            final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions;\n            if (executeIgnoredModules) {\n                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.EXECUTE;\n            }\n            else {\n                ignoredModulesOptions \u003d ConfigurationLoader.IgnoredModulesOptions.OMIT;\n            }\n\n            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(config,\n                    new PropertiesExpander(props), ignoredModulesOptions, threadModeSettings);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n\n            if (rootModule instanceof Checker) {\n                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                        classpath);\n\n                ((Checker) rootModule).setClassLoader(loader);\n            }\n\n            rootModule.configure(configuration);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "036582d728d2e2bb37f360bb3a74f899f04d587d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4370: Add multi thread mode to checkstyle launcher\n",
      "commitDate": "02/07/17 7:43 PM",
      "commitName": "036582d728d2e2bb37f360bb3a74f899f04d587d",
      "commitAuthor": "Andrew Kuchev",
      "commitDateOld": "25/06/17 4:11 PM",
      "commitNameOld": "61f2ef243a13f4105965dad88b647f5c64e41f86",
      "commitAuthorOld": "Michael Diamond",
      "daysBetweenCommits": 7.15,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n-            final Configuration configuration \u003d\n-                ConfigurationLoader.loadConfiguration(\n-                    config,\n-                    new PropertiesExpander(props),\n-                    !executeIgnoredModules);\n+            final ThreadModeSettings threadModeSettings \u003d\n+                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n+            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(\n+                    config, new PropertiesExpander(props),\n+                    !executeIgnoredModules, threadModeSettings);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final ThreadModeSettings threadModeSettings \u003d\n                    ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE;\n            final Configuration configuration \u003d ConfigurationLoader.loadConfiguration(\n                    config, new PropertiesExpander(props),\n                    !executeIgnoredModules, threadModeSettings);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n\n            if (rootModule instanceof Checker) {\n                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                        classpath);\n\n                ((Checker) rootModule).setClassLoader(loader);\n            }\n\n            rootModule.configure(configuration);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "61f2ef243a13f4105965dad88b647f5c64e41f86": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4449: Remove the Ant configUrl attribute and let config accept arbitrary strings, to be consistent with other config logic\n",
      "commitDate": "25/06/17 4:11 PM",
      "commitName": "61f2ef243a13f4105965dad88b647f5c64e41f86",
      "commitAuthor": "Michael Diamond",
      "commitDateOld": "19/06/17 2:53 PM",
      "commitNameOld": "db21f8b13a1e593711727c1cb0192af46409a343",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n-            final Configuration config \u003d\n+            final Configuration configuration \u003d\n                 ConfigurationLoader.loadConfiguration(\n-                    configLocation,\n+                    config,\n                     new PropertiesExpander(props),\n                     !executeIgnoredModules);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n-            rootModule \u003d (RootModule) factory.createModule(config.getName());\n+            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n-            rootModule.configure(config);\n+            rootModule.configure(configuration);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n-                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n+                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final Configuration configuration \u003d\n                ConfigurationLoader.loadConfiguration(\n                    config,\n                    new PropertiesExpander(props),\n                    !executeIgnoredModules);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(configuration.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n\n            if (rootModule instanceof Checker) {\n                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                        classpath);\n\n                ((Checker) rootModule).setClassLoader(loader);\n            }\n\n            rootModule.configure(configuration);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"config {%s}, classpath {%s}.\", config, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "db21f8b13a1e593711727c1cb0192af46409a343": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3566: renamed ant\u0027s omitIgnoredModules",
      "commitDate": "19/06/17 2:53 PM",
      "commitName": "db21f8b13a1e593711727c1cb0192af46409a343",
      "commitAuthor": "rnveach",
      "commitDateOld": "29/04/17 8:48 AM",
      "commitNameOld": "48f9e33c3f73f50051e8618ae83aa9444bae9784",
      "commitAuthorOld": "Andrew Kuchev",
      "daysBetweenCommits": 51.25,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private RootModule createRootModule() {\n         final RootModule rootModule;\n         try {\n             final Properties props \u003d createOverridingProperties();\n             final Configuration config \u003d\n                 ConfigurationLoader.loadConfiguration(\n                     configLocation,\n                     new PropertiesExpander(props),\n-                    omitIgnoredModules);\n+                    !executeIgnoredModules);\n \n             final ClassLoader moduleClassLoader \u003d\n                 Checker.class.getClassLoader();\n \n             final ModuleFactory factory \u003d new PackageObjectFactory(\n                     Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n \n             rootModule \u003d (RootModule) factory.createModule(config.getName());\n             rootModule.setModuleClassLoader(moduleClassLoader);\n \n             if (rootModule instanceof Checker) {\n                 final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                         classpath);\n \n                 ((Checker) rootModule).setClassLoader(loader);\n             }\n \n             rootModule.configure(config);\n         }\n         catch (final CheckstyleException ex) {\n             throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                     + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n         }\n         return rootModule;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final Configuration config \u003d\n                ConfigurationLoader.loadConfiguration(\n                    configLocation,\n                    new PropertiesExpander(props),\n                    !executeIgnoredModules);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(config.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n\n            if (rootModule instanceof Checker) {\n                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                        classpath);\n\n                ((Checker) rootModule).setClassLoader(loader);\n            }\n\n            rootModule.configure(config);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java",
      "extendedDetails": {}
    },
    "785ed054a6e14465f8b2b717d28ec1a700de23a1": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3530: allowed ant to override and swap checker",
      "commitDate": "28/01/17 2:54 PM",
      "commitName": "785ed054a6e14465f8b2b717d28ec1a700de23a1",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,34 @@\n+    private RootModule createRootModule() {\n+        final RootModule rootModule;\n+        try {\n+            final Properties props \u003d createOverridingProperties();\n+            final Configuration config \u003d\n+                ConfigurationLoader.loadConfiguration(\n+                    configLocation,\n+                    new PropertiesExpander(props),\n+                    omitIgnoredModules);\n+\n+            final ClassLoader moduleClassLoader \u003d\n+                Checker.class.getClassLoader();\n+\n+            final ModuleFactory factory \u003d new PackageObjectFactory(\n+                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n+\n+            rootModule \u003d (RootModule) factory.createModule(config.getName());\n+            rootModule.setModuleClassLoader(moduleClassLoader);\n+\n+            if (rootModule instanceof Checker) {\n+                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n+                        classpath);\n+\n+                ((Checker) rootModule).setClassLoader(loader);\n+            }\n+\n+            rootModule.configure(config);\n+        }\n+        catch (final CheckstyleException ex) {\n+            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n+                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n+        }\n+        return rootModule;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private RootModule createRootModule() {\n        final RootModule rootModule;\n        try {\n            final Properties props \u003d createOverridingProperties();\n            final Configuration config \u003d\n                ConfigurationLoader.loadConfiguration(\n                    configLocation,\n                    new PropertiesExpander(props),\n                    omitIgnoredModules);\n\n            final ClassLoader moduleClassLoader \u003d\n                Checker.class.getClassLoader();\n\n            final ModuleFactory factory \u003d new PackageObjectFactory(\n                    Checker.class.getPackage().getName() + \".\", moduleClassLoader);\n\n            rootModule \u003d (RootModule) factory.createModule(config.getName());\n            rootModule.setModuleClassLoader(moduleClassLoader);\n\n            if (rootModule instanceof Checker) {\n                final ClassLoader loader \u003d new AntClassLoader(getProject(),\n                        classpath);\n\n                ((Checker) rootModule).setClassLoader(loader);\n            }\n\n            rootModule.configure(config);\n        }\n        catch (final CheckstyleException ex) {\n            throw new BuildException(String.format(Locale.ROOT, \"Unable to create Root Module: \"\n                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), ex);\n        }\n        return rootModule;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java"
    }
  }
}