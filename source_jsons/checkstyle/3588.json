{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Main.java",
  "functionName": "runCli",
  "functionId": "runCli___options-CliOptions__filesToProcess-List__File__",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
  "functionStartLine": 275,
  "functionEndLine": 335,
  "numCommitsSeen": 220,
  "timeTaken": 2422,
  "changeHistory": [
    "5ed866347e51cac0a4835d93467908d2910a4b8f",
    "f3143fa28a339d6409932362307e906741b8c6f9",
    "c94c2c494a156dfc77f737ef43664a89ce600ad4",
    "58327e1dd9707b09f82ae2d4d4ce14c253247154",
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
    "44119413b68542bb1db3f50d2585834b9d00d1b3",
    "a6ab6053e6b3d421d19764418cba3858c683e6e8"
  ],
  "changeHistoryShort": {
    "5ed866347e51cac0a4835d93467908d2910a4b8f": "Ybodychange",
    "f3143fa28a339d6409932362307e906741b8c6f9": "Ymultichange(Yparameterchange,Ybodychange)",
    "c94c2c494a156dfc77f737ef43664a89ce600ad4": "Ybodychange",
    "58327e1dd9707b09f82ae2d4d4ce14c253247154": "Ybodychange",
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d": "Ybodychange",
    "44119413b68542bb1db3f50d2585834b9d00d1b3": "Ybodychange",
    "a6ab6053e6b3d421d19764418cba3858c683e6e8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ed866347e51cac0a4835d93467908d2910a4b8f": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6660: add xpath branch print\n",
      "commitDate": "08/09/19 6:04 AM",
      "commitName": "5ed866347e51cac0a4835d93467908d2910a4b8f",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "07/09/19 4:32 PM",
      "commitNameOld": "0764f80584b35691ace2ab6cc093d4d4a203c529",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n     private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n         final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n \n         // create config helper object\n         if (options.printAst) {\n             // print AST\n             final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n+        else if (Objects.nonNull(options.xpath)) {\n+            final String branch \u003d XpathUtil.printXpathBranch(options.xpath, filesToProcess.get(0));\n+            System.out.print(branch);\n+        }\n         else if (options.printAstWithComments) {\n             final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (options.printJavadocTree) {\n             final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n         else if (options.printTreeWithJavadoc) {\n             final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n         else if (hasSuppressionLineColumnNumber) {\n             final File file \u003d filesToProcess.get(0);\n             final String stringSuppressions \u003d\n                     SuppressionsStringPrinter.printSuppressions(file,\n                             options.suppressionLineColumnNumber, options.tabWidth);\n             System.out.print(stringSuppressions);\n         }\n         else {\n             if (options.debug) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n                 handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n             result \u003d runCheckstyle(options, filesToProcess);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n        final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n\n        // create config helper object\n        if (options.printAst) {\n            // print AST\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (Objects.nonNull(options.xpath)) {\n            final String branch \u003d XpathUtil.printXpathBranch(options.xpath, filesToProcess.get(0));\n            System.out.print(branch);\n        }\n        else if (options.printAstWithComments) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (options.printJavadocTree) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (options.printTreeWithJavadoc) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else if (hasSuppressionLineColumnNumber) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringSuppressions \u003d\n                    SuppressionsStringPrinter.printSuppressions(file,\n                            options.suppressionLineColumnNumber, options.tabWidth);\n            System.out.print(stringSuppressions);\n        }\n        else {\n            if (options.debug) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(options, filesToProcess);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "f3143fa28a339d6409932362307e906741b8c6f9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
      "commitDate": "29/10/18 4:33 PM",
      "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
      "commitAuthor": "Remko Popma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,57 @@\n-    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n+    private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n+        final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n \n         // create config helper object\n-        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n-        if (commandLine.hasOption(OPTION_T_NAME)) {\n+        if (options.printAst) {\n             // print AST\n-            final File file \u003d config.files.get(0);\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printAstWithComments) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_J_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printJavadocTree) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printTreeWithJavadoc) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_S_NAME)) {\n-            final File file \u003d config.files.get(0);\n-            final String suppressionLineColumnNumber \u003d config.suppressionLineColumnNumber;\n-            final int tabWidth \u003d config.tabWidth;\n+        else if (hasSuppressionLineColumnNumber) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringSuppressions \u003d\n                     SuppressionsStringPrinter.printSuppressions(file,\n-                            suppressionLineColumnNumber, tabWidth);\n+                            options.suppressionLineColumnNumber, options.tabWidth);\n             System.out.print(stringSuppressions);\n         }\n         else {\n-            if (commandLine.hasOption(OPTION_D_NAME)) {\n+            if (options.debug) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n-                handler.setFilter(new Filter() {\n-                    private final String packageName \u003d Main.class.getPackage().getName();\n-\n-                    @Override\n-                    public boolean isLoggable(LogRecord record) {\n-                        return record.getLoggerName().startsWith(packageName);\n-                    }\n-                });\n+                handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n-            result \u003d runCheckstyle(config);\n+            result \u003d runCheckstyle(options, filesToProcess);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n        final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n\n        // create config helper object\n        if (options.printAst) {\n            // print AST\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (options.printAstWithComments) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (options.printJavadocTree) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (options.printTreeWithJavadoc) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else if (hasSuppressionLineColumnNumber) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringSuppressions \u003d\n                    SuppressionsStringPrinter.printSuppressions(file,\n                            options.suppressionLineColumnNumber, options.tabWidth);\n            System.out.print(stringSuppressions);\n        }\n        else {\n            if (options.debug) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(options, filesToProcess);\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {
            "oldValue": "[commandLine-CommandLine, filesToProcess-List\u003cFile\u003e]",
            "newValue": "[options-CliOptions, filesToProcess-List\u003cFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #6068: migrate to picocli command line parser from Commons CLI\n",
          "commitDate": "29/10/18 4:33 PM",
          "commitName": "f3143fa28a339d6409932362307e906741b8c6f9",
          "commitAuthor": "Remko Popma",
          "commitDateOld": "05/09/18 5:54 AM",
          "commitNameOld": "c998a06ad78213e31b2449e9c9e466c2ff8222f9",
          "commitAuthorOld": "Boxuan Li",
          "daysBetweenCommits": 54.44,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,57 @@\n-    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n+    private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n+        final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n \n         // create config helper object\n-        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n-        if (commandLine.hasOption(OPTION_T_NAME)) {\n+        if (options.printAst) {\n             // print AST\n-            final File file \u003d config.files.get(0);\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printAstWithComments) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_J_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printJavadocTree) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n-            final File file \u003d config.files.get(0);\n+        else if (options.printTreeWithJavadoc) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n-        else if (commandLine.hasOption(OPTION_S_NAME)) {\n-            final File file \u003d config.files.get(0);\n-            final String suppressionLineColumnNumber \u003d config.suppressionLineColumnNumber;\n-            final int tabWidth \u003d config.tabWidth;\n+        else if (hasSuppressionLineColumnNumber) {\n+            final File file \u003d filesToProcess.get(0);\n             final String stringSuppressions \u003d\n                     SuppressionsStringPrinter.printSuppressions(file,\n-                            suppressionLineColumnNumber, tabWidth);\n+                            options.suppressionLineColumnNumber, options.tabWidth);\n             System.out.print(stringSuppressions);\n         }\n         else {\n-            if (commandLine.hasOption(OPTION_D_NAME)) {\n+            if (options.debug) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n-                handler.setFilter(new Filter() {\n-                    private final String packageName \u003d Main.class.getPackage().getName();\n-\n-                    @Override\n-                    public boolean isLoggable(LogRecord record) {\n-                        return record.getLoggerName().startsWith(packageName);\n-                    }\n-                });\n+                handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n-            result \u003d runCheckstyle(config);\n+            result \u003d runCheckstyle(options, filesToProcess);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static int runCli(CliOptions options, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n        final boolean hasSuppressionLineColumnNumber \u003d options.suppressionLineColumnNumber !\u003d null;\n\n        // create config helper object\n        if (options.printAst) {\n            // print AST\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (options.printAstWithComments) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (options.printJavadocTree) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (options.printTreeWithJavadoc) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else if (hasSuppressionLineColumnNumber) {\n            final File file \u003d filesToProcess.get(0);\n            final String stringSuppressions \u003d\n                    SuppressionsStringPrinter.printSuppressions(file,\n                            options.suppressionLineColumnNumber, options.tabWidth);\n            System.out.print(stringSuppressions);\n        }\n        else {\n            if (options.debug) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new OnlyCheckstyleLoggersFilter());\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(options, filesToProcess);\n        }\n\n        return result;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
          "extendedDetails": {}
        }
      ]
    },
    "c94c2c494a156dfc77f737ef43664a89ce600ad4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4530: Add the new option for Checkstyle CLI to generate the basic suppression xpath\n",
      "commitDate": "14/04/18 8:52 PM",
      "commitName": "c94c2c494a156dfc77f737ef43664a89ce600ad4",
      "commitAuthor": "Timur Tibeyev",
      "commitDateOld": "14/04/18 5:52 AM",
      "commitNameOld": "042bf228c796f5fa7c5b4b96b94e0afd7b465538",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,66 @@\n     private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n \n         // create config helper object\n         final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n         if (commandLine.hasOption(OPTION_T_NAME)) {\n             // print AST\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                     JavaParser.Options.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n+        else if (commandLine.hasOption(OPTION_S_NAME)) {\n+            final File file \u003d config.files.get(0);\n+            final String suppressionLineColumnNumber \u003d config.suppressionLineColumnNumber;\n+            final int tabWidth \u003d config.tabWidth;\n+            final String stringSuppressions \u003d\n+                    SuppressionsStringPrinter.printSuppressions(file,\n+                            suppressionLineColumnNumber, tabWidth);\n+            System.out.print(stringSuppressions);\n+        }\n         else {\n             if (commandLine.hasOption(OPTION_D_NAME)) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n                 handler.setFilter(new Filter() {\n                     private final String packageName \u003d Main.class.getPackage().getName();\n \n                     @Override\n                     public boolean isLoggable(LogRecord record) {\n                         return record.getLoggerName().startsWith(packageName);\n                     }\n                 });\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n             result \u003d runCheckstyle(config);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n\n        // create config helper object\n        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n        if (commandLine.hasOption(OPTION_T_NAME)) {\n            // print AST\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_S_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String suppressionLineColumnNumber \u003d config.suppressionLineColumnNumber;\n            final int tabWidth \u003d config.tabWidth;\n            final String stringSuppressions \u003d\n                    SuppressionsStringPrinter.printSuppressions(file,\n                            suppressionLineColumnNumber, tabWidth);\n            System.out.print(stringSuppressions);\n        }\n        else {\n            if (commandLine.hasOption(OPTION_D_NAME)) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new Filter() {\n                    private final String packageName \u003d Main.class.getPackage().getName();\n\n                    @Override\n                    public boolean isLoggable(LogRecord record) {\n                        return record.getLoggerName().startsWith(packageName);\n                    }\n                });\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(config);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "58327e1dd9707b09f82ae2d4d4ce14c253247154": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5436: Split TreeWalker to TreeWalker and JavaParser\n",
      "commitDate": "23/01/18 10:39 PM",
      "commitName": "58327e1dd9707b09f82ae2d4d4ce14c253247154",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "04/01/18 7:20 AM",
      "commitNameOld": "90f20e09869c71eb22190ad9c1d46d5deec324a5",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 19.64,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n     private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n \n         // create config helper object\n         final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n         if (commandLine.hasOption(OPTION_T_NAME)) {\n             // print AST\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n-                    AstTreeStringPrinter.PrintOptions.WITHOUT_COMMENTS);\n+                    JavaParser.Options.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n-                    AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);\n+                    JavaParser.Options.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n         else {\n             if (commandLine.hasOption(OPTION_D_NAME)) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n                 handler.setFilter(new Filter() {\n                     private final String packageName \u003d Main.class.getPackage().getName();\n \n                     @Override\n                     public boolean isLoggable(LogRecord record) {\n                         return record.getLoggerName().startsWith(packageName);\n                     }\n                 });\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n             result \u003d runCheckstyle(config);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n\n        // create config helper object\n        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n        if (commandLine.hasOption(OPTION_T_NAME)) {\n            // print AST\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    JavaParser.Options.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else {\n            if (commandLine.hasOption(OPTION_D_NAME)) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new Filter() {\n                    private final String packageName \u003d Main.class.getPackage().getName();\n\n                    @Override\n                    public boolean isLoggable(LogRecord record) {\n                        return record.getLoggerName().startsWith(packageName);\n                    }\n                });\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(config);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4707: fix all violations of BooleanParameter idea check except those addressed in separate task\n",
      "commitDate": "29/07/17 6:40 PM",
      "commitName": "dd91dc1cf4dfbffd1bd608a9b0f8a487eb25122d",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "27/07/17 5:54 AM",
      "commitNameOld": "b1b49751d38af0bf2476aea1f4595283615ab7de",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 2.53,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,57 @@\n     private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n \n         // create config helper object\n         final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n         if (commandLine.hasOption(OPTION_T_NAME)) {\n             // print AST\n             final File file \u003d config.files.get(0);\n-            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, false);\n+            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n+                    AstTreeStringPrinter.PrintOptions.WITHOUT_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             final File file \u003d config.files.get(0);\n-            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, true);\n+            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n+                    AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n         else {\n             if (commandLine.hasOption(OPTION_D_NAME)) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n                 handler.setLevel(Level.FINEST);\n                 handler.setFilter(new Filter() {\n                     private final String packageName \u003d Main.class.getPackage().getName();\n \n                     @Override\n                     public boolean isLoggable(LogRecord record) {\n                         return record.getLoggerName().startsWith(packageName);\n                     }\n                 });\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n             result \u003d runCheckstyle(config);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n\n        // create config helper object\n        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n        if (commandLine.hasOption(OPTION_T_NAME)) {\n            // print AST\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    AstTreeStringPrinter.PrintOptions.WITHOUT_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file,\n                    AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else {\n            if (commandLine.hasOption(OPTION_D_NAME)) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new Filter() {\n                    private final String packageName \u003d Main.class.getPackage().getName();\n\n                    @Override\n                    public boolean isLoggable(LogRecord record) {\n                        return record.getLoggerName().startsWith(packageName);\n                    }\n                });\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(config);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "44119413b68542bb1db3f50d2585834b9d00d1b3": {
      "type": "Ybodychange",
      "commitMessage": "minor: fix IntelijIdea violations of \u0027Scope of variable lnr is too broad\u0027\n",
      "commitDate": "11/07/16 9:47 PM",
      "commitName": "44119413b68542bb1db3f50d2585834b9d00d1b3",
      "commitAuthor": "Roman Ivanov",
      "commitDateOld": "17/06/16 10:48 AM",
      "commitNameOld": "980e53562ac1f29d2d9e8c434ada60515e9890e5",
      "commitAuthorOld": "Andrei Selkin",
      "daysBetweenCommits": 24.46,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,55 @@\n     private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n             throws IOException, CheckstyleException {\n         int result \u003d 0;\n \n         // create config helper object\n         final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n         if (commandLine.hasOption(OPTION_T_NAME)) {\n             // print AST\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, false);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, true);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n             System.out.print(stringAst);\n         }\n         else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n             final File file \u003d config.files.get(0);\n             final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n             System.out.print(stringAst);\n         }\n         else {\n             if (commandLine.hasOption(OPTION_D_NAME)) {\n                 final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                 final ConsoleHandler handler \u003d new ConsoleHandler();\n-\n-                parentLogger.setLevel(Level.FINEST);\n                 handler.setLevel(Level.FINEST);\n-                parentLogger.addHandler(handler);\n                 handler.setFilter(new Filter() {\n                     private final String packageName \u003d Main.class.getPackage().getName();\n \n                     @Override\n                     public boolean isLoggable(LogRecord record) {\n                         return record.getLoggerName().startsWith(packageName);\n                     }\n                 });\n+                parentLogger.addHandler(handler);\n+                parentLogger.setLevel(Level.FINEST);\n             }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Checkstyle debug logging enabled\");\n                 LOG.debug(\"Running Checkstyle with version: \"\n                         + Main.class.getPackage().getImplementationVersion());\n             }\n \n             // run Checker\n             result \u003d runCheckstyle(config);\n         }\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n\n        // create config helper object\n        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n        if (commandLine.hasOption(OPTION_T_NAME)) {\n            // print AST\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, false);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, true);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else {\n            if (commandLine.hasOption(OPTION_D_NAME)) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n                handler.setLevel(Level.FINEST);\n                handler.setFilter(new Filter() {\n                    private final String packageName \u003d Main.class.getPackage().getName();\n\n                    @Override\n                    public boolean isLoggable(LogRecord record) {\n                        return record.getLoggerName().startsWith(packageName);\n                    }\n                });\n                parentLogger.addHandler(handler);\n                parentLogger.setLevel(Level.FINEST);\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(config);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java",
      "extendedDetails": {}
    },
    "a6ab6053e6b3d421d19764418cba3858c683e6e8": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3086: added debug option",
      "commitDate": "27/05/16 6:18 AM",
      "commitName": "a6ab6053e6b3d421d19764418cba3858c683e6e8",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,56 @@\n+    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n+            throws IOException, CheckstyleException {\n+        int result \u003d 0;\n+\n+        // create config helper object\n+        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n+        if (commandLine.hasOption(OPTION_T_NAME)) {\n+            // print AST\n+            final File file \u003d config.files.get(0);\n+            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, false);\n+            System.out.print(stringAst);\n+        }\n+        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n+            final File file \u003d config.files.get(0);\n+            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, true);\n+            System.out.print(stringAst);\n+        }\n+        else if (commandLine.hasOption(OPTION_J_NAME)) {\n+            final File file \u003d config.files.get(0);\n+            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n+            System.out.print(stringAst);\n+        }\n+        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n+            final File file \u003d config.files.get(0);\n+            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n+            System.out.print(stringAst);\n+        }\n+        else {\n+            if (commandLine.hasOption(OPTION_D_NAME)) {\n+                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n+                final ConsoleHandler handler \u003d new ConsoleHandler();\n+\n+                parentLogger.setLevel(Level.FINEST);\n+                handler.setLevel(Level.FINEST);\n+                parentLogger.addHandler(handler);\n+                handler.setFilter(new Filter() {\n+                    private final String packageName \u003d Main.class.getPackage().getName();\n+\n+                    @Override\n+                    public boolean isLoggable(LogRecord record) {\n+                        return record.getLoggerName().startsWith(packageName);\n+                    }\n+                });\n+            }\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Checkstyle debug logging enabled\");\n+                LOG.debug(\"Running Checkstyle with version: \"\n+                        + Main.class.getPackage().getImplementationVersion());\n+            }\n+\n+            // run Checker\n+            result \u003d runCheckstyle(config);\n+        }\n+\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static int runCli(CommandLine commandLine, List\u003cFile\u003e filesToProcess)\n            throws IOException, CheckstyleException {\n        int result \u003d 0;\n\n        // create config helper object\n        final CliOptions config \u003d convertCliToPojo(commandLine, filesToProcess);\n        if (commandLine.hasOption(OPTION_T_NAME)) {\n            // print AST\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, false);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_T_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printFileAst(file, true);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d DetailNodeTreeStringPrinter.printFileAst(file);\n            System.out.print(stringAst);\n        }\n        else if (commandLine.hasOption(OPTION_CAPITAL_J_NAME)) {\n            final File file \u003d config.files.get(0);\n            final String stringAst \u003d AstTreeStringPrinter.printJavaAndJavadocTree(file);\n            System.out.print(stringAst);\n        }\n        else {\n            if (commandLine.hasOption(OPTION_D_NAME)) {\n                final Logger parentLogger \u003d Logger.getLogger(Main.class.getName()).getParent();\n                final ConsoleHandler handler \u003d new ConsoleHandler();\n\n                parentLogger.setLevel(Level.FINEST);\n                handler.setLevel(Level.FINEST);\n                parentLogger.addHandler(handler);\n                handler.setFilter(new Filter() {\n                    private final String packageName \u003d Main.class.getPackage().getName();\n\n                    @Override\n                    public boolean isLoggable(LogRecord record) {\n                        return record.getLoggerName().startsWith(packageName);\n                    }\n                });\n            }\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Checkstyle debug logging enabled\");\n                LOG.debug(\"Running Checkstyle with version: \"\n                        + Main.class.getPackage().getImplementationVersion());\n            }\n\n            // run Checker\n            result \u003d runCheckstyle(config);\n        }\n\n        return result;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java"
    }
  }
}