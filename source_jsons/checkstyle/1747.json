{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VariableDeclarationUsageDistanceCheck.java",
  "functionName": "calculateDistanceInSingleScope",
  "functionId": "calculateDistanceInSingleScope___semicolonAst-DetailAST__variableIdentAst-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
  "functionStartLine": 415,
  "functionEndLine": 443,
  "numCommitsSeen": 66,
  "timeTaken": 1629,
  "changeHistory": [
    "963f94927dafac985290943d9459eb68761b11cc",
    "4c078ba710068498ca513ce115993e30dab4562a",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96"
  ],
  "changeHistoryShort": {
    "963f94927dafac985290943d9459eb68761b11cc": "Ybodychange",
    "4c078ba710068498ca513ce115993e30dab4562a": "Ymodifierchange",
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": "Ybodychange",
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": "Ymultichange(Yparameterchange,Ybodychange)",
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "963f94927dafac985290943d9459eb68761b11cc": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2874: Use CyclomaticComplexity.switchBlockAsSingleDecisionPoint in checkstyle_checks.xml (#3401)\n\n",
      "commitDate": "08/09/16 1:07 PM",
      "commitName": "963f94927dafac985290943d9459eb68761b11cc",
      "commitAuthor": "Andrei Selkin",
      "commitDateOld": "05/02/16 6:01 AM",
      "commitNameOld": "cf96dd9adcf0c3c8f8f05a9ffdcb765cafe17479",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 216.25,
      "commitsBetweenForRepo": 463,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,30 @@\n     private static Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n             DetailAST semicolonAst, DetailAST variableIdentAst) {\n         int dist \u003d 0;\n         boolean firstUsageFound \u003d false;\n         DetailAST currentAst \u003d semicolonAst;\n         DetailAST variableUsageAst \u003d null;\n \n         while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                 \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY) {\n             if (currentAst.getFirstChild() !\u003d null) {\n \n                 if (isChild(currentAst, variableIdentAst)) {\n-\n-                    switch (currentAst.getType()) {\n-                        case TokenTypes.VARIABLE_DEF:\n-                            dist++;\n-                            break;\n-                        case TokenTypes.SLIST:\n-                            dist \u003d 0;\n-                            break;\n-                        case TokenTypes.LITERAL_FOR:\n-                        case TokenTypes.LITERAL_WHILE:\n-                        case TokenTypes.LITERAL_DO:\n-                        case TokenTypes.LITERAL_IF:\n-                        case TokenTypes.LITERAL_SWITCH:\n-                            if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n-                                dist++;\n-                            }\n-                            else {\n-                                // variable usage is in inner scope\n-                                // reset counters, because we can\u0027t determine distance\n-                                dist \u003d 0;\n-                            }\n-                            break;\n-                        default:\n-                            if (currentAst.branchContains(TokenTypes.SLIST)) {\n-                                dist \u003d 0;\n-                            }\n-                            else {\n-                                dist++;\n-                            }\n-                    }\n+                    dist \u003d getDistToVariableUsageInChildNode(currentAst, variableIdentAst, dist);\n                     variableUsageAst \u003d currentAst;\n                     firstUsageFound \u003d true;\n                 }\n                 else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     dist++;\n                 }\n             }\n             currentAst \u003d currentAst.getNextSibling();\n         }\n \n         // If variable wasn\u0027t used after its declaration, distance is 0.\n         if (!firstUsageFound) {\n             dist \u003d 0;\n         }\n \n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST semicolonAst, DetailAST variableIdentAst) {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d semicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY) {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, variableIdentAst)) {\n                    dist \u003d getDistToVariableUsageInChildNode(currentAst, variableIdentAst, dist);\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "4c078ba710068498ca513ce115993e30dab4562a": {
      "type": "Ymodifierchange",
      "commitMessage": "Make \"private\" methods \"static\" where possible. #46\n\nSonarQube rule: [\"private\" methods that don\u0027t access instance data should be \"static\"](http://nemo.sonarqube.org/coding_rules#rule_key\u003dsquid%3AS2325).\n\nRationale: private methods that don\u0027t access instance data can be static to prevent any misunderstanding about the contract of the method.\n",
      "commitDate": "17/07/15 9:51 PM",
      "commitName": "4c078ba710068498ca513ce115993e30dab4562a",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "17/05/15 4:47 AM",
      "commitNameOld": "0f58857d73933c7b6b7e62f0c7c16ad7af51556f",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 61.71,
      "commitsBetweenForRepo": 387,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n-    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n+    private static Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n             DetailAST semicolonAst, DetailAST variableIdentAst) {\n         int dist \u003d 0;\n         boolean firstUsageFound \u003d false;\n         DetailAST currentAst \u003d semicolonAst;\n         DetailAST variableUsageAst \u003d null;\n \n         while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                 \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY) {\n             if (currentAst.getFirstChild() !\u003d null) {\n \n                 if (isChild(currentAst, variableIdentAst)) {\n \n                     switch (currentAst.getType()) {\n                         case TokenTypes.VARIABLE_DEF:\n                             dist++;\n                             break;\n                         case TokenTypes.SLIST:\n                             dist \u003d 0;\n                             break;\n                         case TokenTypes.LITERAL_FOR:\n                         case TokenTypes.LITERAL_WHILE:\n                         case TokenTypes.LITERAL_DO:\n                         case TokenTypes.LITERAL_IF:\n                         case TokenTypes.LITERAL_SWITCH:\n                             if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                                 dist++;\n                             }\n                             else { // variable usage is in inner scope\n                                 // reset counters, because we can\u0027t determine distance\n                                 dist \u003d 0;\n                             }\n                             break;\n                         default:\n                             if (currentAst.branchContains(TokenTypes.SLIST)) {\n                                 dist \u003d 0;\n                             }\n                             else {\n                                 dist++;\n                             }\n                     }\n                     variableUsageAst \u003d currentAst;\n                     firstUsageFound \u003d true;\n                 }\n                 else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     dist++;\n                 }\n             }\n             currentAst \u003d currentAst.getNextSibling();\n         }\n \n         // If variable wasn\u0027t used after its declaration, distance is 0.\n         if (!firstUsageFound) {\n             dist \u003d 0;\n         }\n \n         return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST semicolonAst, DetailAST variableIdentAst) {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d semicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY) {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, variableIdentAst)) {\n\n                    switch (currentAst.getType()) {\n                        case TokenTypes.VARIABLE_DEF:\n                            dist++;\n                            break;\n                        case TokenTypes.SLIST:\n                            dist \u003d 0;\n                            break;\n                        case TokenTypes.LITERAL_FOR:\n                        case TokenTypes.LITERAL_WHILE:\n                        case TokenTypes.LITERAL_DO:\n                        case TokenTypes.LITERAL_IF:\n                        case TokenTypes.LITERAL_SWITCH:\n                            if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                                dist++;\n                            }\n                            else { // variable usage is in inner scope\n                                // reset counters, because we can\u0027t determine distance\n                                dist \u003d 0;\n                            }\n                            break;\n                        default:\n                            if (currentAst.branchContains(TokenTypes.SLIST)) {\n                                dist \u003d 0;\n                            }\n                            else {\n                                dist++;\n                            }\n                    }\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "ff5cbc39c4882b3a3dcdbedcad9393e170148725": {
      "type": "Ybodychange",
      "commitMessage": "Replace verbose type arguments with diamond type \u003c\u003e\n\nThis syntax is not supported under Java 6 or earlier, but Checkstyle codebase uses Java 7 already.\n",
      "commitDate": "15/02/15 8:22 AM",
      "commitName": "ff5cbc39c4882b3a3dcdbedcad9393e170148725",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "08/02/15 1:46 PM",
      "commitNameOld": "abe2b200312ee72aa552026b1a34e8bd72bfdc4e",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n     private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n             DetailAST semicolonAst, DetailAST variableIdentAst)\n     {\n         int dist \u003d 0;\n         boolean firstUsageFound \u003d false;\n         DetailAST currentAst \u003d semicolonAst;\n         DetailAST variableUsageAst \u003d null;\n \n         while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                 \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n         {\n             if (currentAst.getFirstChild() !\u003d null) {\n \n                 if (isChild(currentAst, variableIdentAst)) {\n \n                     switch (currentAst.getType()) {\n                         case TokenTypes.VARIABLE_DEF:\n                             dist++;\n                             break;\n                         case TokenTypes.SLIST:\n                             dist \u003d 0;\n                             break;\n                         case TokenTypes.LITERAL_FOR:\n                         case TokenTypes.LITERAL_WHILE:\n                         case TokenTypes.LITERAL_DO:\n                         case TokenTypes.LITERAL_IF:\n                         case TokenTypes.LITERAL_SWITCH:\n                             if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                                 dist++;\n                             }\n                             else { // variable usage is in inner scope\n                                 // reset counters, because we can\u0027t determine distance\n                                 dist \u003d 0;\n                             }\n                             break;\n                         default:\n                             if (currentAst.branchContains(TokenTypes.SLIST)) {\n                                 dist \u003d 0;\n                             }\n                             else {\n                                 dist++;\n                             }\n                     }\n                     variableUsageAst \u003d currentAst;\n                     firstUsageFound \u003d true;\n                 }\n                 else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     dist++;\n                 }\n             }\n             currentAst \u003d currentAst.getNextSibling();\n         }\n \n         // If variable wasn\u0027t used after its declaration, distance is 0.\n         if (!firstUsageFound) {\n             dist \u003d 0;\n         }\n \n-        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n+        return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST semicolonAst, DetailAST variableIdentAst)\n    {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d semicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n        {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, variableIdentAst)) {\n\n                    switch (currentAst.getType()) {\n                        case TokenTypes.VARIABLE_DEF:\n                            dist++;\n                            break;\n                        case TokenTypes.SLIST:\n                            dist \u003d 0;\n                            break;\n                        case TokenTypes.LITERAL_FOR:\n                        case TokenTypes.LITERAL_WHILE:\n                        case TokenTypes.LITERAL_DO:\n                        case TokenTypes.LITERAL_IF:\n                        case TokenTypes.LITERAL_SWITCH:\n                            if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                                dist++;\n                            }\n                            else { // variable usage is in inner scope\n                                // reset counters, because we can\u0027t determine distance\n                                dist \u003d 0;\n                            }\n                            break;\n                        default:\n                            if (currentAst.branchContains(TokenTypes.SLIST)) {\n                                dist \u003d 0;\n                            }\n                            else {\n                                dist++;\n                            }\n                    }\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003c\u003e(variableUsageAst, dist);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
      "extendedDetails": {}
    },
    "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, coding, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n     private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n-            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)\n+            DetailAST semicolonAst, DetailAST variableIdentAst)\n     {\n         int dist \u003d 0;\n         boolean firstUsageFound \u003d false;\n-        DetailAST currentAst \u003d aSemicolonAst;\n+        DetailAST currentAst \u003d semicolonAst;\n         DetailAST variableUsageAst \u003d null;\n \n         while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                 \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n         {\n             if (currentAst.getFirstChild() !\u003d null) {\n \n-                if (isChild(currentAst, aVariableIdentAst)) {\n+                if (isChild(currentAst, variableIdentAst)) {\n \n                     switch (currentAst.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                         dist++;\n                         break;\n                     case TokenTypes.SLIST:\n                         dist \u003d 0;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                     case TokenTypes.LITERAL_IF:\n                     case TokenTypes.LITERAL_SWITCH:\n-                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {\n+                        if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                             dist++;\n                         }\n                         else { // variable usage is in inner scope\n                             // reset counters, because we can\u0027t determine distance\n                             dist \u003d 0;\n                         }\n                         break;\n                     default:\n                         if (currentAst.branchContains(TokenTypes.SLIST)) {\n                             dist \u003d 0;\n                         }\n                         else {\n                             dist++;\n                         }\n                     }\n                     variableUsageAst \u003d currentAst;\n                     firstUsageFound \u003d true;\n                 }\n                 else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     dist++;\n                 }\n             }\n             currentAst \u003d currentAst.getNextSibling();\n         }\n \n         // If variable wasn\u0027t used after its declaration, distance is 0.\n         if (!firstUsageFound) {\n             dist \u003d 0;\n         }\n \n         return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST semicolonAst, DetailAST variableIdentAst)\n    {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d semicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n        {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, variableIdentAst)) {\n\n                    switch (currentAst.getType()) {\n                    case TokenTypes.VARIABLE_DEF:\n                        dist++;\n                        break;\n                    case TokenTypes.SLIST:\n                        dist \u003d 0;\n                        break;\n                    case TokenTypes.LITERAL_FOR:\n                    case TokenTypes.LITERAL_WHILE:\n                    case TokenTypes.LITERAL_DO:\n                    case TokenTypes.LITERAL_IF:\n                    case TokenTypes.LITERAL_SWITCH:\n                        if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                            dist++;\n                        }\n                        else { // variable usage is in inner scope\n                            // reset counters, because we can\u0027t determine distance\n                            dist \u003d 0;\n                        }\n                        break;\n                    default:\n                        if (currentAst.branchContains(TokenTypes.SLIST)) {\n                            dist \u003d 0;\n                        }\n                        else {\n                            dist++;\n                        }\n                    }\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
          "extendedDetails": {
            "oldValue": "[aSemicolonAst-DetailAST, aVariableIdentAst-DetailAST]",
            "newValue": "[semicolonAst-DetailAST, variableIdentAst-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, coding, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000",
          "commitAuthor": "alexkravin",
          "commitDateOld": "07/09/14 6:39 PM",
          "commitNameOld": "465efcd6e07314f81381551c338a50aede5d6626",
          "commitAuthorOld": "Roman Ivanov",
          "daysBetweenCommits": 133.53,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n     private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n-            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)\n+            DetailAST semicolonAst, DetailAST variableIdentAst)\n     {\n         int dist \u003d 0;\n         boolean firstUsageFound \u003d false;\n-        DetailAST currentAst \u003d aSemicolonAst;\n+        DetailAST currentAst \u003d semicolonAst;\n         DetailAST variableUsageAst \u003d null;\n \n         while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                 \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n         {\n             if (currentAst.getFirstChild() !\u003d null) {\n \n-                if (isChild(currentAst, aVariableIdentAst)) {\n+                if (isChild(currentAst, variableIdentAst)) {\n \n                     switch (currentAst.getType()) {\n                     case TokenTypes.VARIABLE_DEF:\n                         dist++;\n                         break;\n                     case TokenTypes.SLIST:\n                         dist \u003d 0;\n                         break;\n                     case TokenTypes.LITERAL_FOR:\n                     case TokenTypes.LITERAL_WHILE:\n                     case TokenTypes.LITERAL_DO:\n                     case TokenTypes.LITERAL_IF:\n                     case TokenTypes.LITERAL_SWITCH:\n-                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {\n+                        if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                             dist++;\n                         }\n                         else { // variable usage is in inner scope\n                             // reset counters, because we can\u0027t determine distance\n                             dist \u003d 0;\n                         }\n                         break;\n                     default:\n                         if (currentAst.branchContains(TokenTypes.SLIST)) {\n                             dist \u003d 0;\n                         }\n                         else {\n                             dist++;\n                         }\n                     }\n                     variableUsageAst \u003d currentAst;\n                     firstUsageFound \u003d true;\n                 }\n                 else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                     dist++;\n                 }\n             }\n             currentAst \u003d currentAst.getNextSibling();\n         }\n \n         // If variable wasn\u0027t used after its declaration, distance is 0.\n         if (!firstUsageFound) {\n             dist \u003d 0;\n         }\n \n         return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST semicolonAst, DetailAST variableIdentAst)\n    {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d semicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n        {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, variableIdentAst)) {\n\n                    switch (currentAst.getType()) {\n                    case TokenTypes.VARIABLE_DEF:\n                        dist++;\n                        break;\n                    case TokenTypes.SLIST:\n                        dist \u003d 0;\n                        break;\n                    case TokenTypes.LITERAL_FOR:\n                    case TokenTypes.LITERAL_WHILE:\n                    case TokenTypes.LITERAL_DO:\n                    case TokenTypes.LITERAL_IF:\n                    case TokenTypes.LITERAL_SWITCH:\n                        if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {\n                            dist++;\n                        }\n                        else { // variable usage is in inner scope\n                            // reset counters, because we can\u0027t determine distance\n                            dist \u003d 0;\n                        }\n                        break;\n                    default:\n                        if (currentAst.branchContains(TokenTypes.SLIST)) {\n                            dist \u003d 0;\n                        }\n                        else {\n                            dist++;\n                        }\n                    }\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "c4e886312aae13b6cfadceed25b1b8aec18d4a96": {
      "type": "Yintroduced",
      "commitMessage": "VariableDeclarationUsageDistanceCheck was imported #223\n",
      "commitDate": "06/08/14 10:50 PM",
      "commitName": "c4e886312aae13b6cfadceed25b1b8aec18d4a96",
      "commitAuthor": "Max",
      "diff": "@@ -0,0 +1,60 @@\n+    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n+            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)\n+    {\n+        int dist \u003d 0;\n+        boolean firstUsageFound \u003d false;\n+        DetailAST currentAst \u003d aSemicolonAst;\n+        DetailAST variableUsageAst \u003d null;\n+\n+        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n+                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n+        {\n+            if (currentAst.getFirstChild() !\u003d null) {\n+\n+                if (isChild(currentAst, aVariableIdentAst)) {\n+\n+                    switch (currentAst.getType()) {\n+                    case TokenTypes.VARIABLE_DEF:\n+                        dist++;\n+                        break;\n+                    case TokenTypes.SLIST:\n+                        dist \u003d 0;\n+                        break;\n+                    case TokenTypes.LITERAL_FOR:\n+                    case TokenTypes.LITERAL_WHILE:\n+                    case TokenTypes.LITERAL_DO:\n+                    case TokenTypes.LITERAL_IF:\n+                    case TokenTypes.LITERAL_SWITCH:\n+                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {\n+                            dist++;\n+                        }\n+                        else { // variable usage is in inner scope\n+                            // reset counters, because we can\u0027t determine distance\n+                            dist \u003d 0;\n+                        }\n+                        break;\n+                    default:\n+                        if (currentAst.branchContains(TokenTypes.SLIST)) {\n+                            dist \u003d 0;\n+                        }\n+                        else {\n+                            dist++;\n+                        }\n+                    }\n+                    variableUsageAst \u003d currentAst;\n+                    firstUsageFound \u003d true;\n+                }\n+                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n+                    dist++;\n+                }\n+            }\n+            currentAst \u003d currentAst.getNextSibling();\n+        }\n+\n+        // If variable wasn\u0027t used after its declaration, distance is 0.\n+        if (!firstUsageFound) {\n+            dist \u003d 0;\n+        }\n+\n+        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Entry\u003cDetailAST, Integer\u003e calculateDistanceInSingleScope(\n            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)\n    {\n        int dist \u003d 0;\n        boolean firstUsageFound \u003d false;\n        DetailAST currentAst \u003d aSemicolonAst;\n        DetailAST variableUsageAst \u003d null;\n\n        while (!firstUsageFound \u0026\u0026 currentAst !\u003d null\n                \u0026\u0026 currentAst.getType() !\u003d TokenTypes.RCURLY)\n        {\n            if (currentAst.getFirstChild() !\u003d null) {\n\n                if (isChild(currentAst, aVariableIdentAst)) {\n\n                    switch (currentAst.getType()) {\n                    case TokenTypes.VARIABLE_DEF:\n                        dist++;\n                        break;\n                    case TokenTypes.SLIST:\n                        dist \u003d 0;\n                        break;\n                    case TokenTypes.LITERAL_FOR:\n                    case TokenTypes.LITERAL_WHILE:\n                    case TokenTypes.LITERAL_DO:\n                    case TokenTypes.LITERAL_IF:\n                    case TokenTypes.LITERAL_SWITCH:\n                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {\n                            dist++;\n                        }\n                        else { // variable usage is in inner scope\n                            // reset counters, because we can\u0027t determine distance\n                            dist \u003d 0;\n                        }\n                        break;\n                    default:\n                        if (currentAst.branchContains(TokenTypes.SLIST)) {\n                            dist \u003d 0;\n                        }\n                        else {\n                            dist++;\n                        }\n                    }\n                    variableUsageAst \u003d currentAst;\n                    firstUsageFound \u003d true;\n                }\n                else if (currentAst.getType() !\u003d TokenTypes.VARIABLE_DEF) {\n                    dist++;\n                }\n            }\n            currentAst \u003d currentAst.getNextSibling();\n        }\n\n        // If variable wasn\u0027t used after its declaration, distance is 0.\n        if (!firstUsageFound) {\n            dist \u003d 0;\n        }\n\n        return new SimpleEntry\u003cDetailAST, Integer\u003e(variableUsageAst, dist);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java"
    }
  }
}