{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SingleSpaceSeparatorCheck.java",
  "functionName": "visitEachToken",
  "functionId": "visitEachToken___node-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java",
  "functionStartLine": 165,
  "functionEndLine": 187,
  "numCommitsSeen": 21,
  "timeTaken": 1101,
  "changeHistory": [
    "bda308e37284c468c4d08c262d6c6b76f85a502c",
    "77f7c0c7273045a42b4f9b015e125e6d4823cea7",
    "6c1a5e812a68ca12aaa861b3670622915ddc830c",
    "5c6f1ee17a98f088dcb4da9bb166864db1abf7dd"
  ],
  "changeHistoryShort": {
    "bda308e37284c468c4d08c262d6c6b76f85a502c": "Ybodychange",
    "77f7c0c7273045a42b4f9b015e125e6d4823cea7": "Ybodychange",
    "6c1a5e812a68ca12aaa861b3670622915ddc830c": "Ybodychange",
    "5c6f1ee17a98f088dcb4da9bb166864db1abf7dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bda308e37284c468c4d08c262d6c6b76f85a502c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for whitespace",
      "commitDate": "06/01/19 10:33 AM",
      "commitName": "bda308e37284c468c4d08c262d6c6b76f85a502c",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/12/18 5:13 AM",
      "commitNameOld": "77f7c0c7273045a42b4f9b015e125e6d4823cea7",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 17.22,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void visitEachToken(DetailAST node) {\n         DetailAST sibling \u003d node;\n \n-        while (sibling !\u003d null) {\n+        do {\n             final int columnNo \u003d sibling.getColumnNo() - 1;\n \n             // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n             // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n             // possible index for the second whitespace between non-whitespace characters.\n             final int minSecondWhitespaceColumnNo \u003d 2;\n \n             if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                     \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                             columnNo)) {\n                 log(sibling, MSG_KEY);\n             }\n             if (sibling.getChildCount() \u003e\u003d 1) {\n                 visitEachToken(sibling.getFirstChild());\n             }\n \n             sibling \u003d sibling.getNextSibling();\n-        }\n+        } while (sibling !\u003d null);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitEachToken(DetailAST node) {\n        DetailAST sibling \u003d node;\n\n        do {\n            final int columnNo \u003d sibling.getColumnNo() - 1;\n\n            // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n            // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n            // possible index for the second whitespace between non-whitespace characters.\n            final int minSecondWhitespaceColumnNo \u003d 2;\n\n            if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                    \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                            columnNo)) {\n                log(sibling, MSG_KEY);\n            }\n            if (sibling.getChildCount() \u003e\u003d 1) {\n                visitEachToken(sibling.getFirstChild());\n            }\n\n            sibling \u003d sibling.getNextSibling();\n        } while (sibling !\u003d null);\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java",
      "extendedDetails": {}
    },
    "77f7c0c7273045a42b4f9b015e125e6d4823cea7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5759: Update SingleSpaceSeparatorCheck to log DetailAST\n",
      "commitDate": "20/12/18 5:13 AM",
      "commitName": "77f7c0c7273045a42b4f9b015e125e6d4823cea7",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 199.36,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private void visitEachToken(DetailAST node) {\n         DetailAST sibling \u003d node;\n \n         while (sibling !\u003d null) {\n             final int columnNo \u003d sibling.getColumnNo() - 1;\n \n             // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n             // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n             // possible index for the second whitespace between non-whitespace characters.\n             final int minSecondWhitespaceColumnNo \u003d 2;\n \n             if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                     \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                             columnNo)) {\n-                log(sibling.getLineNo(), columnNo, MSG_KEY);\n+                log(sibling, MSG_KEY);\n             }\n             if (sibling.getChildCount() \u003e\u003d 1) {\n                 visitEachToken(sibling.getFirstChild());\n             }\n \n             sibling \u003d sibling.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitEachToken(DetailAST node) {\n        DetailAST sibling \u003d node;\n\n        while (sibling !\u003d null) {\n            final int columnNo \u003d sibling.getColumnNo() - 1;\n\n            // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n            // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n            // possible index for the second whitespace between non-whitespace characters.\n            final int minSecondWhitespaceColumnNo \u003d 2;\n\n            if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                    \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                            columnNo)) {\n                log(sibling, MSG_KEY);\n            }\n            if (sibling.getChildCount() \u003e\u003d 1) {\n                visitEachToken(sibling.getFirstChild());\n            }\n\n            sibling \u003d sibling.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java",
      "extendedDetails": {}
    },
    "6c1a5e812a68ca12aaa861b3670622915ddc830c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5003: increase coverage of pitest-checks-whitespace to 99%\n",
      "commitDate": "24/10/17 5:23 PM",
      "commitName": "6c1a5e812a68ca12aaa861b3670622915ddc830c",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "01/07/17 4:17 PM",
      "commitNameOld": "dfa3cee94273bf210acc39c3910a5b936f9be42f",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 115.05,
      "commitsBetweenForRepo": 455,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,23 @@\n     private void visitEachToken(DetailAST node) {\n         DetailAST sibling \u003d node;\n \n         while (sibling !\u003d null) {\n             final int columnNo \u003d sibling.getColumnNo() - 1;\n \n-            if (columnNo \u003e\u003d 0\n+            // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n+            // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n+            // possible index for the second whitespace between non-whitespace characters.\n+            final int minSecondWhitespaceColumnNo \u003d 2;\n+\n+            if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                     \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                             columnNo)) {\n                 log(sibling.getLineNo(), columnNo, MSG_KEY);\n             }\n-            if (sibling.getChildCount() \u003e 0) {\n+            if (sibling.getChildCount() \u003e\u003d 1) {\n                 visitEachToken(sibling.getFirstChild());\n             }\n \n             sibling \u003d sibling.getNextSibling();\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitEachToken(DetailAST node) {\n        DetailAST sibling \u003d node;\n\n        while (sibling !\u003d null) {\n            final int columnNo \u003d sibling.getColumnNo() - 1;\n\n            // in such expression: \"j  \u003d123\", placed at the start of the string index of the second\n            // space character will be: 2 \u003d 0(j) + 1(whitespace) + 1(whitespace). It is a minimal\n            // possible index for the second whitespace between non-whitespace characters.\n            final int minSecondWhitespaceColumnNo \u003d 2;\n\n            if (columnNo \u003e\u003d minSecondWhitespaceColumnNo\n                    \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                            columnNo)) {\n                log(sibling.getLineNo(), columnNo, MSG_KEY);\n            }\n            if (sibling.getChildCount() \u003e\u003d 1) {\n                visitEachToken(sibling.getFirstChild());\n            }\n\n            sibling \u003d sibling.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java",
      "extendedDetails": {}
    },
    "5c6f1ee17a98f088dcb4da9bb166864db1abf7dd": {
      "type": "Yintroduced",
      "commitMessage": "Issue #3173: moved SingleSpaceSeparatorCheck from sevntu to checkstyle (#3179)",
      "commitDate": "28/05/16 5:53 AM",
      "commitName": "5c6f1ee17a98f088dcb4da9bb166864db1abf7dd",
      "commitAuthor": "rnveach",
      "diff": "@@ -0,0 +1,18 @@\n+    private void visitEachToken(DetailAST node) {\n+        DetailAST sibling \u003d node;\n+\n+        while (sibling !\u003d null) {\n+            final int columnNo \u003d sibling.getColumnNo() - 1;\n+\n+            if (columnNo \u003e\u003d 0\n+                    \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n+                            columnNo)) {\n+                log(sibling.getLineNo(), columnNo, MSG_KEY);\n+            }\n+            if (sibling.getChildCount() \u003e 0) {\n+                visitEachToken(sibling.getFirstChild());\n+            }\n+\n+            sibling \u003d sibling.getNextSibling();\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void visitEachToken(DetailAST node) {\n        DetailAST sibling \u003d node;\n\n        while (sibling !\u003d null) {\n            final int columnNo \u003d sibling.getColumnNo() - 1;\n\n            if (columnNo \u003e\u003d 0\n                    \u0026\u0026 !isTextSeparatedCorrectlyFromPrevious(getLine(sibling.getLineNo() - 1),\n                            columnNo)) {\n                log(sibling.getLineNo(), columnNo, MSG_KEY);\n            }\n            if (sibling.getChildCount() \u003e 0) {\n                visitEachToken(sibling.getFirstChild());\n            }\n\n            sibling \u003d sibling.getNextSibling();\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SingleSpaceSeparatorCheck.java"
    }
  }
}