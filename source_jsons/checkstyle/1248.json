{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OperatorWrapCheck.java",
  "functionName": "visitToken",
  "functionId": "visitToken___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
  "functionStartLine": 287,
  "functionEndLine": 310,
  "numCommitsSeen": 80,
  "timeTaken": 3860,
  "changeHistory": [
    "bda308e37284c468c4d08c262d6c6b76f85a502c",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
    "629364ca98f02d530c2bec38a7d724f0def9c9bd",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
    "9777146e28e6457160a7f91d897776f9fe4af10a",
    "167dd96d8ca503a472bf003f187191d6b0ce586c",
    "77733a452387aa2ee99fdc9a737633566cc7af3d",
    "c4cac1d520d41f35a5c4405a7efd2b94be8b945b",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
    "1bd30555eac039d0486dffb3fc43b7a34117909b",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
    "d97a2df674716efb7deda50180ae933bdc46d68a",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
    "05211d164a1156c7d7b17e7cf72e49903bc532ac",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d",
    "d4b933799af120cf4a8490db98f396b6348430e9",
    "35d1673788bbbac8263fdb69275dc6a63b095a24",
    "c2d3932843e70e4bb5df7161800aca248f9af778",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd",
    "d7df762a65d0b123331588b5da385ac00c40b598",
    "2a9fd54faa88518c5f1fab50215f766eef19802d",
    "f3fe388937df6497e4afe551c952cacb548337c8",
    "2e8126e99047befc39560342981b0b8e7cabea21",
    "468541ac37d54fbeac5061958d3661ff133a7ffe",
    "850590186419416b1c02eba137fc6ec042de7f8b"
  ],
  "changeHistoryShort": {
    "bda308e37284c468c4d08c262d6c6b76f85a502c": "Ybodychange",
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": "Ybodychange",
    "629364ca98f02d530c2bec38a7d724f0def9c9bd": "Ybodychange",
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": "Ybodychange",
    "9777146e28e6457160a7f91d897776f9fe4af10a": "Ybodychange",
    "167dd96d8ca503a472bf003f187191d6b0ce586c": "Ybodychange",
    "77733a452387aa2ee99fdc9a737633566cc7af3d": "Ybodychange",
    "c4cac1d520d41f35a5c4405a7efd2b94be8b945b": "Ybodychange",
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": "Ybodychange",
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": "Ybodychange",
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": "Ybodychange",
    "1bd30555eac039d0486dffb3fc43b7a34117909b": "Ybodychange",
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": "Ybodychange",
    "d97a2df674716efb7deda50180ae933bdc46d68a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": "Ybodychange",
    "05211d164a1156c7d7b17e7cf72e49903bc532ac": "Ybodychange",
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": "Yfilerename",
    "d4b933799af120cf4a8490db98f396b6348430e9": "Ybodychange",
    "35d1673788bbbac8263fdb69275dc6a63b095a24": "Ybodychange",
    "c2d3932843e70e4bb5df7161800aca248f9af778": "Ybodychange",
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": "Ybodychange",
    "d7df762a65d0b123331588b5da385ac00c40b598": "Ybodychange",
    "2a9fd54faa88518c5f1fab50215f766eef19802d": "Ybodychange",
    "f3fe388937df6497e4afe551c952cacb548337c8": "Ybodychange",
    "2e8126e99047befc39560342981b0b8e7cabea21": "Yfilerename",
    "468541ac37d54fbeac5061958d3661ff133a7ffe": "Ybodychange",
    "850590186419416b1c02eba137fc6ec042de7f8b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bda308e37284c468c4d08c262d6c6b76f85a502c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6320: added REMOVE_CONDITIONALS mutator for whitespace",
      "commitDate": "06/01/19 10:33 AM",
      "commitName": "bda308e37284c468c4d08c262d6c6b76f85a502c",
      "commitAuthor": "rnveach",
      "commitDateOld": "19/12/18 8:36 AM",
      "commitNameOld": "257681b015217bf0e151c147e08e544d6881fba7",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 18.08,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parent \u003d ast.getParent();\n         //we do not want to check colon for cases and defaults\n-        if (ast.getType() !\u003d TokenTypes.COLON\n-                || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n-                    \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n+        if (parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n+                \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n             final String text \u003d ast.getText();\n             final int colNo \u003d ast.getColumnNo();\n             final int lineNo \u003d ast.getLineNo();\n             final String currentLine \u003d getLine(lineNo - 1);\n \n             // Check if rest of line is whitespace, and not just the operator\n             // by itself. This last bit is to handle the operator on a line by\n             // itself.\n             if (option \u003d\u003d WrapOption.NL\n                     \u0026\u0026 !text.equals(currentLine.trim())\n                     \u0026\u0026 CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n                 log(ast, MSG_LINE_NEW, text);\n             }\n             else if (option \u003d\u003d WrapOption.EOL\n                     \u0026\u0026 CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                 log(ast, MSG_LINE_PREVIOUS, text);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parent \u003d ast.getParent();\n        //we do not want to check colon for cases and defaults\n        if (parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n            final String text \u003d ast.getText();\n            final int colNo \u003d ast.getColumnNo();\n            final int lineNo \u003d ast.getLineNo();\n            final String currentLine \u003d getLine(lineNo - 1);\n\n            // Check if rest of line is whitespace, and not just the operator\n            // by itself. This last bit is to handle the operator on a line by\n            // itself.\n            if (option \u003d\u003d WrapOption.NL\n                    \u0026\u0026 !text.equals(currentLine.trim())\n                    \u0026\u0026 CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n                log(ast, MSG_LINE_NEW, text);\n            }\n            else if (option \u003d\u003d WrapOption.EOL\n                    \u0026\u0026 CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                log(ast, MSG_LINE_PREVIOUS, text);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5812: Rename all utility classes to xxxxUtil\n",
      "commitDate": "03/06/18 9:40 PM",
      "commitName": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "17/05/18 4:44 PM",
      "commitNameOld": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 17.21,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parent \u003d ast.getParent();\n         //we do not want to check colon for cases and defaults\n         if (ast.getType() !\u003d TokenTypes.COLON\n                 || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                     \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n             final String text \u003d ast.getText();\n             final int colNo \u003d ast.getColumnNo();\n             final int lineNo \u003d ast.getLineNo();\n             final String currentLine \u003d getLine(lineNo - 1);\n \n             // Check if rest of line is whitespace, and not just the operator\n             // by itself. This last bit is to handle the operator on a line by\n             // itself.\n             if (option \u003d\u003d WrapOption.NL\n                     \u0026\u0026 !text.equals(currentLine.trim())\n-                    \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n+                    \u0026\u0026 CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n                 log(ast, MSG_LINE_NEW, text);\n             }\n             else if (option \u003d\u003d WrapOption.EOL\n-                    \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n+                    \u0026\u0026 CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                 log(ast, MSG_LINE_PREVIOUS, text);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parent \u003d ast.getParent();\n        //we do not want to check colon for cases and defaults\n        if (ast.getType() !\u003d TokenTypes.COLON\n                || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                    \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n            final String text \u003d ast.getText();\n            final int colNo \u003d ast.getColumnNo();\n            final int lineNo \u003d ast.getLineNo();\n            final String currentLine \u003d getLine(lineNo - 1);\n\n            // Check if rest of line is whitespace, and not just the operator\n            // by itself. This last bit is to handle the operator on a line by\n            // itself.\n            if (option \u003d\u003d WrapOption.NL\n                    \u0026\u0026 !text.equals(currentLine.trim())\n                    \u0026\u0026 CommonUtil.isBlank(currentLine.substring(colNo + text.length()))) {\n                log(ast, MSG_LINE_NEW, text);\n            }\n            else if (option \u003d\u003d WrapOption.EOL\n                    \u0026\u0026 CommonUtil.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                log(ast, MSG_LINE_PREVIOUS, text);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "629364ca98f02d530c2bec38a7d724f0def9c9bd": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5757: switched simple log line/column to log ast",
      "commitDate": "17/05/18 4:44 PM",
      "commitName": "629364ca98f02d530c2bec38a7d724f0def9c9bd",
      "commitAuthor": "rnveach",
      "commitDateOld": "18/04/18 1:06 PM",
      "commitNameOld": "6893affeac7285afd16f8a389c7d65023d0c327a",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 29.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n     public void visitToken(DetailAST ast) {\n         final DetailAST parent \u003d ast.getParent();\n         //we do not want to check colon for cases and defaults\n         if (ast.getType() !\u003d TokenTypes.COLON\n                 || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                     \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n             final String text \u003d ast.getText();\n             final int colNo \u003d ast.getColumnNo();\n             final int lineNo \u003d ast.getLineNo();\n             final String currentLine \u003d getLine(lineNo - 1);\n \n             // Check if rest of line is whitespace, and not just the operator\n             // by itself. This last bit is to handle the operator on a line by\n             // itself.\n             if (option \u003d\u003d WrapOption.NL\n                     \u0026\u0026 !text.equals(currentLine.trim())\n                     \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n-                log(lineNo, colNo, MSG_LINE_NEW, text);\n+                log(ast, MSG_LINE_NEW, text);\n             }\n             else if (option \u003d\u003d WrapOption.EOL\n                     \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-                log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n+                log(ast, MSG_LINE_PREVIOUS, text);\n             }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parent \u003d ast.getParent();\n        //we do not want to check colon for cases and defaults\n        if (ast.getType() !\u003d TokenTypes.COLON\n                || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                    \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n            final String text \u003d ast.getText();\n            final int colNo \u003d ast.getColumnNo();\n            final int lineNo \u003d ast.getLineNo();\n            final String currentLine \u003d getLine(lineNo - 1);\n\n            // Check if rest of line is whitespace, and not just the operator\n            // by itself. This last bit is to handle the operator on a line by\n            // itself.\n            if (option \u003d\u003d WrapOption.NL\n                    \u0026\u0026 !text.equals(currentLine.trim())\n                    \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n                log(ast, MSG_LINE_NEW, text);\n            }\n            else if (option \u003d\u003d WrapOption.EOL\n                    \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                log(ast, MSG_LINE_PREVIOUS, text);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "39b343a32a4f1ce18ee98a34618fda0a5404d6a0": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3143: forbid empty return statements and fixed violations",
      "commitDate": "27/05/16 6:42 AM",
      "commitName": "39b343a32a4f1ce18ee98a34618fda0a5404d6a0",
      "commitAuthor": "rnveach",
      "commitDateOld": "20/03/16 2:34 PM",
      "commitNameOld": "9777146e28e6457160a7f91d897776f9fe4af10a",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 67.67,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n     public void visitToken(DetailAST ast) {\n-        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n-            final DetailAST parent \u003d ast.getParent();\n-            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n-                //we do not want to check colon for cases and defaults\n-                return;\n+        final DetailAST parent \u003d ast.getParent();\n+        //we do not want to check colon for cases and defaults\n+        if (ast.getType() !\u003d TokenTypes.COLON\n+                || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n+                    \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n+            final String text \u003d ast.getText();\n+            final int colNo \u003d ast.getColumnNo();\n+            final int lineNo \u003d ast.getLineNo();\n+            final String currentLine \u003d getLine(lineNo - 1);\n+\n+            // Check if rest of line is whitespace, and not just the operator\n+            // by itself. This last bit is to handle the operator on a line by\n+            // itself.\n+            if (option \u003d\u003d WrapOption.NL\n+                    \u0026\u0026 !text.equals(currentLine.trim())\n+                    \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n+                log(lineNo, colNo, MSG_LINE_NEW, text);\n             }\n-        }\n-\n-        final String text \u003d ast.getText();\n-        final int colNo \u003d ast.getColumnNo();\n-        final int lineNo \u003d ast.getLineNo();\n-        final String currentLine \u003d getLine(lineNo - 1);\n-\n-        // Check if rest of line is whitespace, and not just the operator\n-        // by itself. This last bit is to handle the operator on a line by\n-        // itself.\n-        if (option \u003d\u003d WrapOption.NL\n-                \u0026\u0026 !text.equals(currentLine.trim())\n-                \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n-            log(lineNo, colNo, MSG_LINE_NEW, text);\n-        }\n-        else if (option \u003d\u003d WrapOption.EOL\n-                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n+            else if (option \u003d\u003d WrapOption.EOL\n+                    \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n+                log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n+            }\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        final DetailAST parent \u003d ast.getParent();\n        //we do not want to check colon for cases and defaults\n        if (ast.getType() !\u003d TokenTypes.COLON\n                || parent.getType() !\u003d TokenTypes.LITERAL_DEFAULT\n                    \u0026\u0026 parent.getType() !\u003d TokenTypes.LITERAL_CASE) {\n            final String text \u003d ast.getText();\n            final int colNo \u003d ast.getColumnNo();\n            final int lineNo \u003d ast.getLineNo();\n            final String currentLine \u003d getLine(lineNo - 1);\n\n            // Check if rest of line is whitespace, and not just the operator\n            // by itself. This last bit is to handle the operator on a line by\n            // itself.\n            if (option \u003d\u003d WrapOption.NL\n                    \u0026\u0026 !text.equals(currentLine.trim())\n                    \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n                log(lineNo, colNo, MSG_LINE_NEW, text);\n            }\n            else if (option \u003d\u003d WrapOption.EOL\n                    \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n                log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n            }\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "9777146e28e6457160a7f91d897776f9fe4af10a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": "20/03/16 2:34 PM",
      "commitName": "9777146e28e6457160a7f91d897776f9fe4af10a",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": "17/03/16 6:39 AM",
      "commitNameOld": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthorOld": "Rasmus Kaj",
      "daysBetweenCommits": 3.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (option \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n-                \u0026\u0026 CharMatcher.WHITESPACE.matchesAllOf(\n-                    currentLine.substring(colNo + text.length()))) {\n+                \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n             log(lineNo, colNo, MSG_LINE_NEW, text);\n         }\n         else if (option \u003d\u003d WrapOption.EOL\n                 \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n             log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (option \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 CommonUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, MSG_LINE_NEW, text);\n        }\n        else if (option \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "167dd96d8ca503a472bf003f187191d6b0ce586c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2428: remove dependency to commons-lang3 library\n",
      "commitDate": "17/03/16 6:39 AM",
      "commitName": "167dd96d8ca503a472bf003f187191d6b0ce586c",
      "commitAuthor": "Rasmus Kaj",
      "commitDateOld": "24/02/16 10:36 AM",
      "commitNameOld": "2964e71460559d7bacf2380f67a9b5763cc4660f",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 21.79,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (option \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n-                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n+                \u0026\u0026 CharMatcher.WHITESPACE.matchesAllOf(\n+                    currentLine.substring(colNo + text.length()))) {\n             log(lineNo, colNo, MSG_LINE_NEW, text);\n         }\n         else if (option \u003d\u003d WrapOption.EOL\n                 \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n             log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (option \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 CharMatcher.WHITESPACE.matchesAllOf(\n                    currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, MSG_LINE_NEW, text);\n        }\n        else if (option \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "77733a452387aa2ee99fdc9a737633566cc7af3d": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2836: renamed error message fields to match standard naming",
      "commitDate": "21/01/16 6:40 AM",
      "commitName": "77733a452387aa2ee99fdc9a737633566cc7af3d",
      "commitAuthor": "rnveach",
      "commitDateOld": "04/01/16 4:25 PM",
      "commitNameOld": "617ebf2bf27d284dcc7b866f85439fcf6dab3402",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 16.59,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (option \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n                 \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n-            log(lineNo, colNo, LINE_NEW, text);\n+            log(lineNo, colNo, MSG_LINE_NEW, text);\n         }\n         else if (option \u003d\u003d WrapOption.EOL\n                 \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n-            log(lineNo, colNo, LINE_PREVIOUS, text);\n+            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (option \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, MSG_LINE_NEW, text);\n        }\n        else if (option \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, MSG_LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "c4cac1d520d41f35a5c4405a7efd2b94be8b945b": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2451: removed excess hierarchy from OperatorWrapCheck",
      "commitDate": "17/11/15 6:14 AM",
      "commitName": "c4cac1d520d41f35a5c4405a7efd2b94be8b945b",
      "commitAuthor": "rnveach",
      "commitDateOld": "28/08/15 10:50 PM",
      "commitNameOld": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthorOld": "Michal Kordas",
      "daysBetweenCommits": 80.35,
      "commitsBetweenForRepo": 612,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n-        final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if (wOp \u003d\u003d WrapOption.NL\n+        if (option \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n                 \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n             log(lineNo, colNo, LINE_NEW, text);\n         }\n-        else if (wOp \u003d\u003d WrapOption.EOL\n+        else if (option \u003d\u003d WrapOption.EOL\n                 \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n             log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (option \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if (option \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "46a52f84c014e4d25379f429f11ed3de11fe8ae7": {
      "type": "Ybodychange",
      "commitMessage": "Issue #1555: Rename methods returning boolean to use question word\n\nFixes some `BooleanMethodNameMustStartWithQuestion` inspection violations.\n\nDescription:\n\u003eReports boolean methods whose names do not start with a question word. Boolean methods that override library methods are ignored by this inspection.\n",
      "commitDate": "28/08/15 10:50 PM",
      "commitName": "46a52f84c014e4d25379f429f11ed3de11fe8ae7",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (wOp \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n                 \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n             log(lineNo, colNo, LINE_NEW, text);\n         }\n         else if (wOp \u003d\u003d WrapOption.EOL\n-                \u0026\u0026 CommonUtils.whitespaceBefore(colNo - 1, currentLine)) {\n+                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n             log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if (wOp \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.hasWhitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "cdf3e56bacd3895262af8a1df9ca5c81f4071970": {
      "type": "Ybodychange",
      "commitMessage": "Utils class has been splitted to CommonUtils and TokenUtils. Issue #1898\n",
      "commitDate": "27/08/15 5:17 AM",
      "commitName": "cdf3e56bacd3895262af8a1df9ca5c81f4071970",
      "commitAuthor": "Ilja Dubinin",
      "commitDateOld": "27/08/15 5:17 AM",
      "commitNameOld": "ed595de84fba2db507adaf01d04cb089a5e0bac5",
      "commitAuthorOld": "Ilja Dubinin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public void visitToken(DetailAST ast) {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (wOp \u003d\u003d WrapOption.NL\n                 \u0026\u0026 !text.equals(currentLine.trim())\n                 \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n             log(lineNo, colNo, LINE_NEW, text);\n         }\n         else if (wOp \u003d\u003d WrapOption.EOL\n-                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine)) {\n+                \u0026\u0026 CommonUtils.whitespaceBefore(colNo - 1, currentLine)) {\n             log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast) {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE) {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length()))) {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if (wOp \u003d\u003d WrapOption.EOL\n                \u0026\u0026 CommonUtils.whitespaceBefore(colNo - 1, currentLine)) {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671": {
      "type": "Ybodychange",
      "commitMessage": "Fix PMD violations from \u0027strings\u0027 ruleset, issue #873\n",
      "commitDate": "15/04/15 8:56 AM",
      "commitName": "1c42e3eeb9aeebc47b2373541c1cc8d311d8b671",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "15/03/15 2:22 PM",
      "commitNameOld": "1c15b6a36baa68dc3f2ebdf9baac131e98bb9e04",
      "commitAuthorOld": "alexkravin",
      "daysBetweenCommits": 30.77,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                 || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (wOp \u003d\u003d WrapOption.NL\n-            \u0026\u0026 !text.equals(currentLine.trim())\n-            \u0026\u0026 currentLine.substring(colNo + text.length())\n-                .trim().length() \u003d\u003d 0)\n+                \u0026\u0026 !text.equals(currentLine.trim())\n+                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length())))\n         {\n             log(lineNo, colNo, LINE_NEW, text);\n         }\n         else if (wOp \u003d\u003d WrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d WrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 StringUtils.isBlank(currentLine.substring(colNo + text.length())))\n        {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if (wOp \u003d\u003d WrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "1bd30555eac039d0486dffb3fc43b7a34117909b": {
      "type": "Ybodychange",
      "commitMessage": "Remove useless parentheses to fix PMD violations, issue #744\n\nParentheses are considered unnecessary if the evaluation order of an expression remains unchanged if the parentheses are removed.\n",
      "commitDate": "10/03/15 2:36 PM",
      "commitName": "1bd30555eac039d0486dffb3fc43b7a34117909b",
      "commitAuthor": "Michal Kordas",
      "commitDateOld": "05/03/15 4:47 PM",
      "commitNameOld": "f7828693395f71a6ae99710f3fab44cb8a66ea51",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n-            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n-                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n+            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n+                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if ((wOp \u003d\u003d WrapOption.NL)\n+        if (wOp \u003d\u003d WrapOption.NL\n             \u0026\u0026 !text.equals(currentLine.trim())\n-            \u0026\u0026 (currentLine.substring(colNo + text.length())\n-                .trim().length() \u003d\u003d 0))\n+            \u0026\u0026 currentLine.substring(colNo + text.length())\n+                .trim().length() \u003d\u003d 0)\n         {\n             log(lineNo, colNo, LINE_NEW, text);\n         }\n-        else if ((wOp \u003d\u003d WrapOption.EOL)\n+        else if (wOp \u003d\u003d WrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d WrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0)\n        {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if (wOp \u003d\u003d WrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf": {
      "type": "Ybodychange",
      "commitMessage": "Refactored UTs, whitespace package, issue #537\n",
      "commitDate": "20/02/15 5:02 AM",
      "commitName": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf",
      "commitAuthor": "alexkravin",
      "commitDateOld": "18/02/15 1:14 PM",
      "commitNameOld": "c9a9e6508c15e00cf6820b213d79d5ebf41c6343",
      "commitAuthorOld": "Roman Ivanov",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST ast)\n     {\n         if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d ast.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d ast.getText();\n         final int colNo \u003d ast.getColumnNo();\n         final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d WrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n-            log(lineNo, colNo, \"line.new\", text);\n+            log(lineNo, colNo, LINE_NEW, text);\n         }\n         else if ((wOp \u003d\u003d WrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n-            log(lineNo, colNo, \"line.previous\", text);\n+            log(lineNo, colNo, LINE_PREVIOUS, text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d WrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, LINE_NEW, text);\n        }\n        else if ((wOp \u003d\u003d WrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, LINE_PREVIOUS, text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "d97a2df674716efb7deda50180ae933bdc46d68a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, whitespace, #512\n",
      "commitDate": "19/01/15 6:20 AM",
      "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "02/11/14 11:48 AM",
          "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
          "commitAuthorOld": "sopov.ivan",
          "daysBetweenCommits": 77.77,
          "commitsBetweenForRepo": 237,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n-            final DetailAST parent \u003d aAST.getParent();\n+        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n+            final DetailAST parent \u003d ast.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n-        final String text \u003d aAST.getText();\n-        final int colNo \u003d aAST.getColumnNo();\n-        final int lineNo \u003d aAST.getLineNo();\n+        final String text \u003d ast.getText();\n+        final int colNo \u003d ast.getColumnNo();\n+        final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d WrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if ((wOp \u003d\u003d WrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d WrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d WrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
          "extendedDetails": {
            "oldValue": "[aAST-DetailAST]",
            "newValue": "[ast-DetailAST]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, whitespace, #512\n",
          "commitDate": "19/01/15 6:20 AM",
          "commitName": "d97a2df674716efb7deda50180ae933bdc46d68a",
          "commitAuthor": "alexkravin",
          "commitDateOld": "02/11/14 11:48 AM",
          "commitNameOld": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
          "commitAuthorOld": "sopov.ivan",
          "daysBetweenCommits": 77.77,
          "commitsBetweenForRepo": 237,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-    public void visitToken(DetailAST aAST)\n+    public void visitToken(DetailAST ast)\n     {\n-        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n-            final DetailAST parent \u003d aAST.getParent();\n+        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n+            final DetailAST parent \u003d ast.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n-        final String text \u003d aAST.getText();\n-        final int colNo \u003d aAST.getColumnNo();\n-        final int lineNo \u003d aAST.getLineNo();\n+        final String text \u003d ast.getText();\n+        final int colNo \u003d ast.getColumnNo();\n+        final int lineNo \u003d ast.getLineNo();\n         final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d WrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if ((wOp \u003d\u003d WrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void visitToken(DetailAST ast)\n    {\n        if (ast.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d ast.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d ast.getText();\n        final int colNo \u003d ast.getColumnNo();\n        final int lineNo \u003d ast.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d WrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d WrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "cba6fc8b0a653a795107566f895d2b8f73e2c6c9": {
      "type": "Ybodychange",
      "commitMessage": "FileContents.getLines performance fix\n",
      "commitDate": "02/11/14 11:48 AM",
      "commitName": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9",
      "commitAuthor": "sopov.ivan",
      "commitDateOld": "15/07/14 7:57 PM",
      "commitNameOld": "05211d164a1156c7d7b17e7cf72e49903bc532ac",
      "commitAuthorOld": "Max",
      "daysBetweenCommits": 109.7,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d aAST.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n-        final String currentLine \u003d getLines()[lineNo - 1];\n+        final String currentLine \u003d getLine(lineNo - 1);\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d WrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if ((wOp \u003d\u003d WrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLine(lineNo - 1);\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d WrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d WrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "05211d164a1156c7d7b17e7cf72e49903bc532ac": {
      "type": "Ybodychange",
      "commitMessage": "SeparatorWrapCheck #179. Covers separators like \u0027,\u0027, \u0027.\u0027.\n",
      "commitDate": "15/07/14 7:57 PM",
      "commitName": "05211d164a1156c7d7b17e7cf72e49903bc532ac",
      "commitAuthor": "Max",
      "commitDateOld": "04/03/14 9:18 AM",
      "commitNameOld": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthorOld": "Ivan Sopov",
      "daysBetweenCommits": 133.4,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d aAST.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n-        final OperatorWrapOption wOp \u003d getAbstractOption();\n+        final WrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n+        if ((wOp \u003d\u003d WrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n-        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n+        else if ((wOp \u003d\u003d WrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final WrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d WrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d WrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "f1efb27670a93690577f1bae17fc9dcbd88a795d": {
      "type": "Yfilerename",
      "commitMessage": "moving to standard directory layout\n",
      "commitDate": "04/03/14 9:18 AM",
      "commitName": "f1efb27670a93690577f1bae17fc9dcbd88a795d",
      "commitAuthor": "Ivan Sopov",
      "commitDateOld": "26/02/14 10:35 PM",
      "commitNameOld": "1cdaeaaa4fbf02a7388f1fcbea1c86ef0ea32fed",
      "commitAuthorOld": "Andrew Gaul",
      "daysBetweenCommits": 5.45,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final OperatorWrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java"
      }
    },
    "d4b933799af120cf4a8490db98f396b6348430e9": {
      "type": "Ybodychange",
      "commitMessage": "Overhaul of how \u003cspan class\u003d\"code\"\u003eAbstractOptionCheck\u003c/span\u003e works.\nIt now requires that the option type is a Java 5 Enum and hence the\n\u003cspan class\u003d\"code\"\u003eAbstractOption\u003c/span\u003e class has been removed.\n",
      "commitDate": "01/07/08 10:19 PM",
      "commitName": "d4b933799af120cf4a8490db98f396b6348430e9",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "14/01/08 3:11 PM",
      "commitNameOld": "315033ff5647ef9896130573d9212fee6fe141db",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 169.26,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n             final DetailAST parent \u003d aAST.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n-        final AbstractOption wOp \u003d getAbstractOption();\n+        final OperatorWrapOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d OperatorWrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final OperatorWrapOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "35d1673788bbbac8263fdb69275dc6a63b095a24": {
      "type": "Ybodychange",
      "commitMessage": "Making local variables final where possible.\n",
      "commitDate": "06/07/06 8:44 PM",
      "commitName": "35d1673788bbbac8263fdb69275dc6a63b095a24",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "06/07/06 8:26 PM",
      "commitNameOld": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n-            DetailAST parent \u003d aAST.getParent();\n+            final DetailAST parent \u003d aAST.getParent();\n             if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                 || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if ((wOp \u003d\u003d OperatorWrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            final DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "c2d3932843e70e4bb5df7161800aca248f9af778": {
      "type": "Ybodychange",
      "commitMessage": "Clean up the use of ()\u0027s\n",
      "commitDate": "06/07/06 8:26 PM",
      "commitName": "c2d3932843e70e4bb5df7161800aca248f9af778",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "31/10/05 11:23 AM",
      "commitNameOld": "1aee9d55cc5bd8cca011e17369f6e370efcc85bb",
      "commitAuthorOld": "Oleg Sukhodolsky",
      "daysBetweenCommits": 248.34,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n         if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n             DetailAST parent \u003d aAST.getParent();\n-            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n-                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n+            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n+                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n             {\n                 //we do not want to check colon for cases and defaults\n                 return;\n             }\n         }\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if (wOp \u003d\u003d OperatorWrapOption.NL\n+        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n-        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n+        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            DetailAST parent \u003d aAST.getParent();\n            if ((parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT)\n                || (parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE))\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if ((wOp \u003d\u003d OperatorWrapOption.NL)\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if ((wOp \u003d\u003d OperatorWrapOption.EOL)\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "865ba5284aace7651f93dc81b0c196d1316a9fdd": {
      "type": "Ybodychange",
      "commitMessage": "Changes for grammer to keep as much text in AST tree as we can.\nFor now I do nothing with this/super in (SUPER_)CTOR_CALL.\nShould think more about this.\n\nAlso I\u0027ve changed grammer to not generate extends/implement cleases\nif there is no such in the code.\n\nMade some refactoring for build.xml to make possible to redirect build\noutput to custom directory (and we used too much hardcoded paths there\n:)\n\nIt looks like this is my last commit before vacation, so I hope\nI will break nothing :)\n",
      "commitDate": "16/08/05 11:55 PM",
      "commitName": "865ba5284aace7651f93dc81b0c196d1316a9fdd",
      "commitAuthor": "Oleg Sukhodolsky",
      "commitDateOld": "12/04/05 5:58 PM",
      "commitNameOld": "d7df762a65d0b123331588b5da385ac00c40b598",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 126.25,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,35 @@\n     public void visitToken(DetailAST aAST)\n     {\n+        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n+            DetailAST parent \u003d aAST.getParent();\n+            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n+                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n+            {\n+                //we do not want to check colon for cases and defaults\n+                return;\n+            }\n+        }\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (wOp \u003d\u003d OperatorWrapOption.NL\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        if (aAST.getType() \u003d\u003d TokenTypes.COLON) {\n            DetailAST parent \u003d aAST.getParent();\n            if (parent.getType() \u003d\u003d TokenTypes.LITERAL_DEFAULT\n                || parent.getType() \u003d\u003d TokenTypes.LITERAL_CASE)\n            {\n                //we do not want to check colon for cases and defaults\n                return;\n            }\n        }\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d OperatorWrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "d7df762a65d0b123331588b5da385ac00c40b598": {
      "type": "Ybodychange",
      "commitMessage": "no message\n",
      "commitDate": "12/04/05 5:58 PM",
      "commitName": "d7df762a65d0b123331588b5da385ac00c40b598",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "06/04/05 6:17 AM",
      "commitNameOld": "e89639036c27938988f1dd545c2f2ddbe5029336",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 6.49,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if (CheckUtils.isOperatorTokenPartOfGenericDeclaration(aAST)) {\n-            return;\n-        }\n-        else if (wOp \u003d\u003d OperatorWrapOption.NL\n-                \u0026\u0026 !text.equals(currentLine.trim())\n-                \u0026\u0026 (currentLine.substring(colNo + text.length())\n-                    .trim().length() \u003d\u003d 0))\n+        if (wOp \u003d\u003d OperatorWrapOption.NL\n+            \u0026\u0026 !text.equals(currentLine.trim())\n+            \u0026\u0026 (currentLine.substring(colNo + text.length())\n+                .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d OperatorWrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "2a9fd54faa88518c5f1fab50215f766eef19802d": {
      "type": "Ybodychange",
      "commitMessage": "Refactored checking of operator token for participation in generic declaration into separate method.\n",
      "commitDate": "04/04/05 4:20 PM",
      "commitName": "2a9fd54faa88518c5f1fab50215f766eef19802d",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "04/04/05 2:55 PM",
      "commitNameOld": "f3fe388937df6497e4afe551c952cacb548337c8",
      "commitAuthorOld": "Michael Studman",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,30 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n \n-        // GT/LT aren\u0027t operators if they\u0027re part of type arguments or parameters\n-        if ((aAST.getType() \u003d\u003d TokenTypes.GT || aAST.getType() \u003d\u003d TokenTypes.LT) \u0026\u0026\n-            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n-            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_PARAMETERS))\n-        {\n-            return;\n-        }\n-\n-        //QUESTION is not an operator if it\u0027s part of a type argument\n-        if (aAST.getType() \u003d\u003d TokenTypes.QUESTION \u0026\u0026\n-            aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENT)\n-        {\n-            return;\n-        }\n-\n-        //BAND is not an operator if it\u0027s part of a type argument\n-        if (aAST.getType() \u003d\u003d TokenTypes.BAND \u0026\u0026\n-            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_UPPER_BOUNDS\n-            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_LOWER_BOUNDS))\n-        {\n-            return;\n-        }\n-\n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n-        if (wOp \u003d\u003d OperatorWrapOption.NL\n-            \u0026\u0026 !text.equals(currentLine.trim())\n-            \u0026\u0026 (currentLine.substring(colNo + text.length())\n-                .trim().length() \u003d\u003d 0))\n+        if (CheckUtils.isOperatorTokenPartOfGenericDeclaration(aAST))\n+        {\n+            return;\n+        }\n+        else if (wOp \u003d\u003d OperatorWrapOption.NL\n+                \u0026\u0026 !text.equals(currentLine.trim())\n+                \u0026\u0026 (currentLine.substring(colNo + text.length())\n+                    .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (CheckUtils.isOperatorTokenPartOfGenericDeclaration(aAST))\n        {\n            return;\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.NL\n                \u0026\u0026 !text.equals(currentLine.trim())\n                \u0026\u0026 (currentLine.substring(colNo + text.length())\n                    .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "f3fe388937df6497e4afe551c952cacb548337c8": {
      "type": "Ybodychange",
      "commitMessage": "Fix to ignore LT,GT,BAND,QUESTION tokens if part of generic declaration. Partially based on patch 1097339.\n",
      "commitDate": "04/04/05 2:55 PM",
      "commitName": "f3fe388937df6497e4afe551c952cacb548337c8",
      "commitAuthor": "Michael Studman",
      "commitDateOld": "09/01/05 2:50 AM",
      "commitNameOld": "0d887cde58e54d920644ee543dab346b93e8aae9",
      "commitAuthorOld": "Lars Kühne",
      "daysBetweenCommits": 85.46,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,49 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final AbstractOption wOp \u003d getAbstractOption();\n \n         final String text \u003d aAST.getText();\n         final int colNo \u003d aAST.getColumnNo();\n         final int lineNo \u003d aAST.getLineNo();\n         final String currentLine \u003d getLines()[lineNo - 1];\n+\n+        // GT/LT aren\u0027t operators if they\u0027re part of type arguments or parameters\n+        if ((aAST.getType() \u003d\u003d TokenTypes.GT || aAST.getType() \u003d\u003d TokenTypes.LT) \u0026\u0026\n+            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n+            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_PARAMETERS))\n+        {\n+            return;\n+        }\n+\n+        //QUESTION is not an operator if it\u0027s part of a type argument\n+        if (aAST.getType() \u003d\u003d TokenTypes.QUESTION \u0026\u0026\n+            aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENT)\n+        {\n+            return;\n+        }\n+\n+        //BAND is not an operator if it\u0027s part of a type argument\n+        if (aAST.getType() \u003d\u003d TokenTypes.BAND \u0026\u0026\n+            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_UPPER_BOUNDS\n+            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_LOWER_BOUNDS))\n+        {\n+            return;\n+        }\n+\n         // TODO: Handle comments before and after operator\n         // Check if rest of line is whitespace, and not just the operator\n         // by itself. This last bit is to handle the operator on a line by\n         // itself.\n         if (wOp \u003d\u003d OperatorWrapOption.NL\n             \u0026\u0026 !text.equals(currentLine.trim())\n             \u0026\u0026 (currentLine.substring(colNo + text.length())\n                 .trim().length() \u003d\u003d 0))\n         {\n             log(lineNo, colNo, \"line.new\", text);\n         }\n         else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                   \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n         {\n             log(lineNo, colNo, \"line.previous\", text);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n\n        // GT/LT aren\u0027t operators if they\u0027re part of type arguments or parameters\n        if ((aAST.getType() \u003d\u003d TokenTypes.GT || aAST.getType() \u003d\u003d TokenTypes.LT) \u0026\u0026\n            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENTS\n            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_PARAMETERS))\n        {\n            return;\n        }\n\n        //QUESTION is not an operator if it\u0027s part of a type argument\n        if (aAST.getType() \u003d\u003d TokenTypes.QUESTION \u0026\u0026\n            aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_ARGUMENT)\n        {\n            return;\n        }\n\n        //BAND is not an operator if it\u0027s part of a type argument\n        if (aAST.getType() \u003d\u003d TokenTypes.BAND \u0026\u0026\n            (aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_UPPER_BOUNDS\n            || aAST.getParent().getType() \u003d\u003d TokenTypes.TYPE_LOWER_BOUNDS))\n        {\n            return;\n        }\n\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d OperatorWrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "2e8126e99047befc39560342981b0b8e7cabea21": {
      "type": "Yfilerename",
      "commitMessage": "Refactored the Whitespace checks\n",
      "commitDate": "04/06/03 4:55 AM",
      "commitName": "2e8126e99047befc39560342981b0b8e7cabea21",
      "commitAuthor": "Oliver Burn",
      "commitDateOld": "04/06/03 3:42 AM",
      "commitNameOld": "3bd6412e39a141b980901f291391ff1bcc4a61f3",
      "commitAuthorOld": "Oliver Burn",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d OperatorWrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java",
      "extendedDetails": {
        "oldPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java",
        "newPath": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java"
      }
    },
    "468541ac37d54fbeac5061958d3661ff133a7ffe": {
      "type": "Ybodychange",
      "commitMessage": "added check for \u0027instanceof\u0027\nrefactored to a new variable\nremoved redundant IGNORE option\n",
      "commitDate": "09/11/02 6:50 AM",
      "commitName": "468541ac37d54fbeac5061958d3661ff133a7ffe",
      "commitAuthor": "Rick Giles",
      "commitDateOld": "08/11/02 11:20 AM",
      "commitNameOld": "850590186419416b1c02eba137fc6ec042de7f8b",
      "commitAuthorOld": "Rick Giles",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n     public void visitToken(DetailAST aAST)\n     {\n         final AbstractOption wOp \u003d getAbstractOption();\n \n-        if (wOp !\u003d OperatorWrapOption.NL.IGNORE) {\n-            final String text \u003d aAST.getText();\n-            final int colNo \u003d aAST.getColumnNo();\n-            final int lineNo \u003d aAST.getLineNo();\n-            // TODO: Handle comments before and after operator\n-            // Check if rest of line is whitespace, and not just the operator\n-            // by itself. This last bit is to handle the operator on a line by\n-            // itself.\n-            if (wOp \u003d\u003d OperatorWrapOption.NL\n-                \u0026\u0026 !text.equals(getLines()[lineNo - 1].trim())\n-                \u0026\u0026 (getLines()[lineNo - 1].substring(colNo + text.length())\n-                    .trim().length() \u003d\u003d 0))\n-            {\n-                log(lineNo, colNo, \"line.new\", text);\n-            }\n-            else if (wOp \u003d\u003d OperatorWrapOption.EOL\n-                      \u0026\u0026 Utils.whitespaceBefore(colNo - 1,\n-                                               getLines()[lineNo - 1]))\n-            {\n-                log(lineNo, colNo, \"line.previous\", text);\n-            }\n+        final String text \u003d aAST.getText();\n+        final int colNo \u003d aAST.getColumnNo();\n+        final int lineNo \u003d aAST.getLineNo();\n+        final String currentLine \u003d getLines()[lineNo - 1];\n+        // TODO: Handle comments before and after operator\n+        // Check if rest of line is whitespace, and not just the operator\n+        // by itself. This last bit is to handle the operator on a line by\n+        // itself.\n+        if (wOp \u003d\u003d OperatorWrapOption.NL\n+            \u0026\u0026 !text.equals(currentLine.trim())\n+            \u0026\u0026 (currentLine.substring(colNo + text.length())\n+                .trim().length() \u003d\u003d 0))\n+        {\n+            log(lineNo, colNo, \"line.new\", text);\n         }\n-\n+        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n+                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n+        {\n+            log(lineNo, colNo, \"line.previous\", text);\n+        }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        final String text \u003d aAST.getText();\n        final int colNo \u003d aAST.getColumnNo();\n        final int lineNo \u003d aAST.getLineNo();\n        final String currentLine \u003d getLines()[lineNo - 1];\n        // TODO: Handle comments before and after operator\n        // Check if rest of line is whitespace, and not just the operator\n        // by itself. This last bit is to handle the operator on a line by\n        // itself.\n        if (wOp \u003d\u003d OperatorWrapOption.NL\n            \u0026\u0026 !text.equals(currentLine.trim())\n            \u0026\u0026 (currentLine.substring(colNo + text.length())\n                .trim().length() \u003d\u003d 0))\n        {\n            log(lineNo, colNo, \"line.new\", text);\n        }\n        else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                  \u0026\u0026 Utils.whitespaceBefore(colNo - 1, currentLine))\n        {\n            log(lineNo, colNo, \"line.previous\", text);\n        }\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java",
      "extendedDetails": {}
    },
    "850590186419416b1c02eba137fc6ec042de7f8b": {
      "type": "Yintroduced",
      "commitMessage": "port operator wrap policy\n",
      "commitDate": "08/11/02 11:20 AM",
      "commitName": "850590186419416b1c02eba137fc6ec042de7f8b",
      "commitAuthor": "Rick Giles",
      "diff": "@@ -0,0 +1,28 @@\n+    public void visitToken(DetailAST aAST)\n+    {\n+        final AbstractOption wOp \u003d getAbstractOption();\n+\n+        if (wOp !\u003d OperatorWrapOption.NL.IGNORE) {\n+            final String text \u003d aAST.getText();\n+            final int colNo \u003d aAST.getColumnNo();\n+            final int lineNo \u003d aAST.getLineNo();\n+            // TODO: Handle comments before and after operator\n+            // Check if rest of line is whitespace, and not just the operator\n+            // by itself. This last bit is to handle the operator on a line by\n+            // itself.\n+            if (wOp \u003d\u003d OperatorWrapOption.NL\n+                \u0026\u0026 !text.equals(getLines()[lineNo - 1].trim())\n+                \u0026\u0026 (getLines()[lineNo - 1].substring(colNo + text.length())\n+                    .trim().length() \u003d\u003d 0))\n+            {\n+                log(lineNo, colNo, \"line.new\", text);\n+            }\n+            else if (wOp \u003d\u003d OperatorWrapOption.EOL\n+                      \u0026\u0026 Utils.whitespaceBefore(colNo - 1,\n+                                               getLines()[lineNo - 1]))\n+            {\n+                log(lineNo, colNo, \"line.previous\", text);\n+            }\n+        }\n+\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visitToken(DetailAST aAST)\n    {\n        final AbstractOption wOp \u003d getAbstractOption();\n\n        if (wOp !\u003d OperatorWrapOption.NL.IGNORE) {\n            final String text \u003d aAST.getText();\n            final int colNo \u003d aAST.getColumnNo();\n            final int lineNo \u003d aAST.getLineNo();\n            // TODO: Handle comments before and after operator\n            // Check if rest of line is whitespace, and not just the operator\n            // by itself. This last bit is to handle the operator on a line by\n            // itself.\n            if (wOp \u003d\u003d OperatorWrapOption.NL\n                \u0026\u0026 !text.equals(getLines()[lineNo - 1].trim())\n                \u0026\u0026 (getLines()[lineNo - 1].substring(colNo + text.length())\n                    .trim().length() \u003d\u003d 0))\n            {\n                log(lineNo, colNo, \"line.new\", text);\n            }\n            else if (wOp \u003d\u003d OperatorWrapOption.EOL\n                      \u0026\u0026 Utils.whitespaceBefore(colNo - 1,\n                                               getLines()[lineNo - 1]))\n            {\n                log(lineNo, colNo, \"line.previous\", text);\n            }\n        }\n\n    }",
      "path": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java"
    }
  }
}