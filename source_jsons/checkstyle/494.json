{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavadocDetailNodeParser.java",
  "functionName": "createJavadocParser",
  "functionId": "createJavadocParser___blockComment-String",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
  "functionStartLine": 170,
  "functionEndLine": 188,
  "numCommitsSeen": 111,
  "timeTaken": 3657,
  "changeHistory": [
    "b6e10e2604f5c1b0b79cec58a61c622d606b8081",
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
    "2f5115bce66f153ddfa02306505c1e81af942ff5",
    "ebeedf920b07095642db05d1b7b6e89697b1c41c",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
    "89a51ba032fd9126651fa9efad31baf10c006ddf",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534"
  ],
  "changeHistoryShort": {
    "b6e10e2604f5c1b0b79cec58a61c622d606b8081": "Ybodychange",
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "2f5115bce66f153ddfa02306505c1e81af942ff5": "Ybodychange",
    "ebeedf920b07095642db05d1b7b6e89697b1c41c": "Ybodychange",
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": "Ymovefromfile",
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": "Ymultichange(Yexceptionschange,Ybodychange)",
    "89a51ba032fd9126651fa9efad31baf10c006ddf": "Ymultichange(Yparameterchange,Ybodychange)",
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": "Yrename",
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e10e2604f5c1b0b79cec58a61c622d606b8081": {
      "type": "Ybodychange",
      "commitMessage": "Issue #5971: Remove usages of ANTLRInputStream\n",
      "commitDate": "28/06/18 5:20 AM",
      "commitName": "b6e10e2604f5c1b0b79cec58a61c622d606b8081",
      "commitAuthor": "Pavel Bludov",
      "commitDateOld": "03/06/18 9:40 PM",
      "commitNameOld": "641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8",
      "commitAuthorOld": "Pavel Bludov",
      "daysBetweenCommits": 24.32,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,19 @@\n     private JavadocParser createJavadocParser(String blockComment) {\n-        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n-\n-        final JavadocLexer lexer \u003d new JavadocLexer(input);\n+        final JavadocLexer lexer \u003d new JavadocLexer(CharStreams.fromString(blockComment));\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n         // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n         // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n         parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n         return parser;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private JavadocParser createJavadocParser(String blockComment) {\n        final JavadocLexer lexer \u003d new JavadocLexer(CharStreams.fromString(blockComment));\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "3660e750a3835eaeffec0f5451bee7a5189d0e0f": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "Issue #3311: Modified javadoc grammar, JavadocDetailNodeParser, AbstractJavadocCheck to enable selective processing of javadoc with non tight HTML\n",
      "commitDate": "08/09/17 5:40 AM",
      "commitName": "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
      "commitAuthor": "Piyush Sharma",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Issue #3311: Modified javadoc grammar, JavadocDetailNodeParser, AbstractJavadocCheck to enable selective processing of javadoc with non tight HTML\n",
          "commitDate": "08/09/17 5:40 AM",
          "commitName": "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
          "commitAuthor": "Piyush Sharma",
          "commitDateOld": "22/08/17 1:05 AM",
          "commitNameOld": "2f5115bce66f153ddfa02306505c1e81af942ff5",
          "commitAuthorOld": "vasilyeva",
          "daysBetweenCommits": 17.19,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private ParseTree parseJavadocAsParseTree(String blockComment) {\n+    private JavadocParser createJavadocParser(String blockComment) {\n         final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n-        // This strategy stops parsing when parser error occurs.\n-        // By default it uses Error Recover Strategy which is slow and useless.\n+        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n+        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n         parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n-        return parser.javadoc();\n+        return parser;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private JavadocParser createJavadocParser(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
          "extendedDetails": {
            "oldValue": "parseJavadocAsParseTree",
            "newValue": "createJavadocParser"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Issue #3311: Modified javadoc grammar, JavadocDetailNodeParser, AbstractJavadocCheck to enable selective processing of javadoc with non tight HTML\n",
          "commitDate": "08/09/17 5:40 AM",
          "commitName": "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
          "commitAuthor": "Piyush Sharma",
          "commitDateOld": "22/08/17 1:05 AM",
          "commitNameOld": "2f5115bce66f153ddfa02306505c1e81af942ff5",
          "commitAuthorOld": "vasilyeva",
          "daysBetweenCommits": 17.19,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private ParseTree parseJavadocAsParseTree(String blockComment) {\n+    private JavadocParser createJavadocParser(String blockComment) {\n         final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n-        // This strategy stops parsing when parser error occurs.\n-        // By default it uses Error Recover Strategy which is slow and useless.\n+        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n+        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n         parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n-        return parser.javadoc();\n+        return parser;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private JavadocParser createJavadocParser(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
          "extendedDetails": {
            "oldValue": "ParseTree",
            "newValue": "JavadocParser"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Issue #3311: Modified javadoc grammar, JavadocDetailNodeParser, AbstractJavadocCheck to enable selective processing of javadoc with non tight HTML\n",
          "commitDate": "08/09/17 5:40 AM",
          "commitName": "3660e750a3835eaeffec0f5451bee7a5189d0e0f",
          "commitAuthor": "Piyush Sharma",
          "commitDateOld": "22/08/17 1:05 AM",
          "commitNameOld": "2f5115bce66f153ddfa02306505c1e81af942ff5",
          "commitAuthorOld": "vasilyeva",
          "daysBetweenCommits": 17.19,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-    private ParseTree parseJavadocAsParseTree(String blockComment) {\n+    private JavadocParser createJavadocParser(String blockComment) {\n         final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n-        // This strategy stops parsing when parser error occurs.\n-        // By default it uses Error Recover Strategy which is slow and useless.\n+        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n+        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n         parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n-        return parser.javadoc();\n+        return parser;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private JavadocParser createJavadocParser(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // JavadocParserErrorStrategy stops parsing on first parse error encountered unlike the\n        // DefaultErrorStrategy used by ANTLR which rather attempts error recovery.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser;\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "2f5115bce66f153ddfa02306505c1e81af942ff5": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4398: increase coverage of pitest-checkstyle-tree-walker to 100%\n",
      "commitDate": "22/08/17 1:05 AM",
      "commitName": "2f5115bce66f153ddfa02306505c1e81af942ff5",
      "commitAuthor": "vasilyeva",
      "commitDateOld": "21/08/17 6:15 AM",
      "commitNameOld": "60c70922fa41c6a6b6d0e80fcbaea8bfb4acc5ad",
      "commitAuthorOld": "Piyush Sharma",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,21 @@\n     private ParseTree parseJavadocAsParseTree(String blockComment) {\n         final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n-        // remove default error listeners\n-        lexer.removeErrorListeners();\n-\n-        // add custom error listener that logs parsing errors\n-        lexer.addErrorListener(errorListener);\n-\n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser.javadoc();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "ebeedf920b07095642db05d1b7b6e89697b1c41c": {
      "type": "Ybodychange",
      "commitMessage": "Issue #4717: Added JavadocParserErrorStrategy which extends BailErrorStrategy\n",
      "commitDate": "28/07/17 12:48 AM",
      "commitName": "ebeedf920b07095642db05d1b7b6e89697b1c41c",
      "commitAuthor": "Piyush Sharma",
      "commitDateOld": "17/07/17 10:19 AM",
      "commitNameOld": "24a748caf712491e04970e1ec992d932c02da830",
      "commitAuthorOld": "vasilyeva",
      "daysBetweenCommits": 10.6,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     private ParseTree parseJavadocAsParseTree(String blockComment) {\n         final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n         lexer.addErrorListener(errorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n-        parser.setErrorHandler(new BailErrorStrategy());\n+        parser.setErrorHandler(new JavadocParserErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new JavadocParserErrorStrategy());\n\n        return parser.javadoc();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {}
    },
    "68b49fd2843f23f55dc711a89213d59f2acf3a0a": {
      "type": "Ymovefromfile",
      "commitMessage": "Issue #652: New CLI option to print Javadoc comment parse tree\n",
      "commitDate": "17/03/16 6:19 AM",
      "commitName": "68b49fd2843f23f55dc711a89213d59f2acf3a0a",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "16/03/16 11:32 AM",
      "commitNameOld": "888594049a74a7d8e9bbdfb5672c07db1f7ba220",
      "commitAuthorOld": "Vladislav Lisetskiy",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
      "extendedDetails": {
        "oldPath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
        "newPath": "src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java",
        "oldMethodName": "parseJavadocAsParseTree",
        "newMethodName": "parseJavadocAsParseTree"
      }
    },
    "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Improve test coverage in AbstractJavadocCheck. #1308\n",
      "commitDate": "01/08/15 5:29 AM",
      "commitName": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
      "commitAuthor": "Michal Kordas",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Improve test coverage in AbstractJavadocCheck. #1308\n",
          "commitDate": "01/08/15 5:29 AM",
          "commitName": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "08/07/15 6:34 PM",
          "commitNameOld": "e10364f313b887a6af19b3f63f2c5d671a453c63",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 23.45,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,27 @@\n-    private ParseTree parseJavadocAsParseTree(String blockComment)\n-        throws IOException {\n-        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n-        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n-\n-        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n+    private ParseTree parseJavadocAsParseTree(String blockComment) {\n+        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n         lexer.addErrorListener(errorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new BailErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Improve test coverage in AbstractJavadocCheck. #1308\n",
          "commitDate": "01/08/15 5:29 AM",
          "commitName": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36",
          "commitAuthor": "Michal Kordas",
          "commitDateOld": "08/07/15 6:34 PM",
          "commitNameOld": "e10364f313b887a6af19b3f63f2c5d671a453c63",
          "commitAuthorOld": "Michal Kordas",
          "daysBetweenCommits": 23.45,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,27 @@\n-    private ParseTree parseJavadocAsParseTree(String blockComment)\n-        throws IOException {\n-        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n-        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n-\n-        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n+    private ParseTree parseJavadocAsParseTree(String blockComment) {\n+        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n         lexer.addErrorListener(errorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new BailErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment) {\n        final ANTLRInputStream input \u003d new ANTLRInputStream(blockComment);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "89a51ba032fd9126651fa9efad31baf10c006ddf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Prefixes, javadoc, #512\n",
      "commitDate": "19/01/15 6:21 AM",
      "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
      "commitAuthor": "alexkravin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "24/11/14 4:22 PM",
          "commitNameOld": "be6a7ca77be3de342656ec381aaa02b89da252d4",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    private ParseTree parseJavadocAsParseTree(String aBlockComment)\n+    private ParseTree parseJavadocAsParseTree(String blockComment)\n         throws IOException\n     {\n         final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n-        final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n+        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n \n         final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n-        lexer.addErrorListener(mErrorListener);\n+        lexer.addErrorListener(errorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n-        parser.addErrorListener(mErrorListener);\n+        parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new BailErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment)\n        throws IOException\n    {\n        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n\n        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {
            "oldValue": "[aBlockComment-String]",
            "newValue": "[blockComment-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Prefixes, javadoc, #512\n",
          "commitDate": "19/01/15 6:21 AM",
          "commitName": "89a51ba032fd9126651fa9efad31baf10c006ddf",
          "commitAuthor": "alexkravin",
          "commitDateOld": "24/11/14 4:22 PM",
          "commitNameOld": "be6a7ca77be3de342656ec381aaa02b89da252d4",
          "commitAuthorOld": "Baratali Izmailov",
          "daysBetweenCommits": 55.58,
          "commitsBetweenForRepo": 187,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-    private ParseTree parseJavadocAsParseTree(String aBlockComment)\n+    private ParseTree parseJavadocAsParseTree(String blockComment)\n         throws IOException\n     {\n         final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n-        final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n+        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n \n         final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n-        lexer.addErrorListener(mErrorListener);\n+        lexer.addErrorListener(errorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n-        parser.addErrorListener(mErrorListener);\n+        parser.addErrorListener(errorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new BailErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ParseTree parseJavadocAsParseTree(String blockComment)\n        throws IOException\n    {\n        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n        final InputStream in \u003d new ByteArrayInputStream(blockComment.getBytes(utf8Charset));\n\n        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(errorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(errorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
          "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
          "extendedDetails": {}
        }
      ]
    },
    "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5": {
      "type": "Yrename",
      "commitMessage": "Issue #49. Caching DetailNode trees in AbstractJavadocCheck\n",
      "commitDate": "07/11/14 2:24 PM",
      "commitName": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5",
      "commitAuthor": "Baratali Izmailov",
      "commitDateOld": "19/10/14 1:32 PM",
      "commitNameOld": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthorOld": "Baratali Izmailov",
      "daysBetweenCommits": 19.08,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-    private ParseTree parseJavadoc(String aBlockComment)\n+    private ParseTree parseJavadocAsParseTree(String aBlockComment)\n         throws IOException\n     {\n         final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n         final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n \n         final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n \n         final JavadocLexer lexer \u003d new JavadocLexer(input);\n \n         // remove default error listeners\n         lexer.removeErrorListeners();\n \n         // add custom error listener that logs parsing errors\n         lexer.addErrorListener(mErrorListener);\n \n         final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n \n         final JavadocParser parser \u003d new JavadocParser(tokens);\n \n         // remove default error listeners\n         parser.removeErrorListeners();\n \n         // add custom error listener that logs syntax errors\n         parser.addErrorListener(mErrorListener);\n \n         // This strategy stops parsing when parser error occurs.\n         // By default it uses Error Recover Strategy which is slow and useless.\n         parser.setErrorHandler(new BailErrorStrategy());\n \n         return parser.javadoc();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ParseTree parseJavadocAsParseTree(String aBlockComment)\n        throws IOException\n    {\n        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n        final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n\n        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(mErrorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(mErrorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java",
      "extendedDetails": {
        "oldValue": "parseJavadoc",
        "newValue": "parseJavadocAsParseTree"
      }
    },
    "ff12c1b012a1b18da8a1cd2101efd0173c612534": {
      "type": "Yintroduced",
      "commitMessage": "Issue #49. Added support of Javadoc comments. Extended API to create Javadoc Checks.\n",
      "commitDate": "19/10/14 1:32 PM",
      "commitName": "ff12c1b012a1b18da8a1cd2101efd0173c612534",
      "commitAuthor": "Baratali Izmailov",
      "diff": "@@ -0,0 +1,32 @@\n+    private ParseTree parseJavadoc(String aBlockComment)\n+        throws IOException\n+    {\n+        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n+        final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n+\n+        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n+\n+        final JavadocLexer lexer \u003d new JavadocLexer(input);\n+\n+        // remove default error listeners\n+        lexer.removeErrorListeners();\n+\n+        // add custom error listener that logs parsing errors\n+        lexer.addErrorListener(mErrorListener);\n+\n+        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n+\n+        final JavadocParser parser \u003d new JavadocParser(tokens);\n+\n+        // remove default error listeners\n+        parser.removeErrorListeners();\n+\n+        // add custom error listener that logs syntax errors\n+        parser.addErrorListener(mErrorListener);\n+\n+        // This strategy stops parsing when parser error occurs.\n+        // By default it uses Error Recover Strategy which is slow and useless.\n+        parser.setErrorHandler(new BailErrorStrategy());\n+\n+        return parser.javadoc();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private ParseTree parseJavadoc(String aBlockComment)\n        throws IOException\n    {\n        final Charset utf8Charset \u003d Charset.forName(\"UTF-8\");\n        final InputStream in \u003d new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));\n\n        final ANTLRInputStream input \u003d new ANTLRInputStream(in);\n\n        final JavadocLexer lexer \u003d new JavadocLexer(input);\n\n        // remove default error listeners\n        lexer.removeErrorListeners();\n\n        // add custom error listener that logs parsing errors\n        lexer.addErrorListener(mErrorListener);\n\n        final CommonTokenStream tokens \u003d new CommonTokenStream(lexer);\n\n        final JavadocParser parser \u003d new JavadocParser(tokens);\n\n        // remove default error listeners\n        parser.removeErrorListeners();\n\n        // add custom error listener that logs syntax errors\n        parser.addErrorListener(mErrorListener);\n\n        // This strategy stops parsing when parser error occurs.\n        // By default it uses Error Recover Strategy which is slow and useless.\n        parser.setErrorHandler(new BailErrorStrategy());\n\n        return parser.javadoc();\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java"
    }
  }
}