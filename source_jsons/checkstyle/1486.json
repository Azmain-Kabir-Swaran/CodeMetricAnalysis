{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OneStatementPerLineCheck.java",
  "functionName": "checkIfSemicolonIsInDifferentLineThanPrevious",
  "functionId": "checkIfSemicolonIsInDifferentLineThanPrevious___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java",
  "functionStartLine": 247,
  "functionEndLine": 265,
  "numCommitsSeen": 34,
  "timeTaken": 816,
  "changeHistory": [
    "141f5d6668ef6b3a6af625cc5e10457ac3278f0a",
    "af047afee8216a4b0db9027dd013a1aad2be9494"
  ],
  "changeHistoryShort": {
    "141f5d6668ef6b3a6af625cc5e10457ac3278f0a": "Ybodychange",
    "af047afee8216a4b0db9027dd013a1aad2be9494": "Yintroduced"
  },
  "changeHistoryDetails": {
    "141f5d6668ef6b3a6af625cc5e10457ac3278f0a": {
      "type": "Ybodychange",
      "commitMessage": "Issue #6125: Ignore variable reference as resource statement\n",
      "commitDate": "16/05/19 6:44 AM",
      "commitName": "141f5d6668ef6b3a6af625cc5e10457ac3278f0a",
      "commitAuthor": "Andrei Paikin",
      "commitDateOld": "20/04/19 8:06 AM",
      "commitNameOld": "9d7f55d82162078946dcd3599363774797dc5dca",
      "commitAuthorOld": "pbludov",
      "daysBetweenCommits": 25.94,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,19 @@\n     private void checkIfSemicolonIsInDifferentLineThanPrevious(DetailAST ast) {\n         DetailAST currentStatement \u003d ast;\n         final boolean hasResourcesPrevSibling \u003d\n                 currentStatement.getPreviousSibling() !\u003d null\n                         \u0026\u0026 currentStatement.getPreviousSibling().getType() \u003d\u003d TokenTypes.RESOURCES;\n         if (!hasResourcesPrevSibling \u0026\u0026 isMultilineStatement(currentStatement)) {\n             currentStatement \u003d ast.getPreviousSibling();\n         }\n         if (isInLambda) {\n-            int countOfSemiInCurrentLambda \u003d countOfSemiInLambda.pop();\n-            countOfSemiInCurrentLambda++;\n-            countOfSemiInLambda.push(countOfSemiInCurrentLambda);\n-            if (!inForHeader \u0026\u0026 countOfSemiInCurrentLambda \u003e 1\n-                    \u0026\u0026 isOnTheSameLine(currentStatement,\n-                    lastStatementEnd, forStatementEnd,\n-                    lambdaStatementEnd)) {\n-                log(ast, MSG_KEY);\n-            }\n+            checkLambda(ast, currentStatement);\n+        }\n+        else if (isResource(ast.getParent())) {\n+            checkResourceVariable(ast);\n         }\n         else if (!inForHeader \u0026\u0026 isOnTheSameLine(currentStatement, lastStatementEnd,\n                 forStatementEnd, lambdaStatementEnd)) {\n             log(ast, MSG_KEY);\n         }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkIfSemicolonIsInDifferentLineThanPrevious(DetailAST ast) {\n        DetailAST currentStatement \u003d ast;\n        final boolean hasResourcesPrevSibling \u003d\n                currentStatement.getPreviousSibling() !\u003d null\n                        \u0026\u0026 currentStatement.getPreviousSibling().getType() \u003d\u003d TokenTypes.RESOURCES;\n        if (!hasResourcesPrevSibling \u0026\u0026 isMultilineStatement(currentStatement)) {\n            currentStatement \u003d ast.getPreviousSibling();\n        }\n        if (isInLambda) {\n            checkLambda(ast, currentStatement);\n        }\n        else if (isResource(ast.getParent())) {\n            checkResourceVariable(ast);\n        }\n        else if (!inForHeader \u0026\u0026 isOnTheSameLine(currentStatement, lastStatementEnd,\n                forStatementEnd, lambdaStatementEnd)) {\n            log(ast, MSG_KEY);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java",
      "extendedDetails": {}
    },
    "af047afee8216a4b0db9027dd013a1aad2be9494": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2688: Fix OneStatementPerLine lambda validation\n",
      "commitDate": "01/01/16 11:21 AM",
      "commitName": "af047afee8216a4b0db9027dd013a1aad2be9494",
      "commitAuthor": "liscju",
      "diff": "@@ -0,0 +1,24 @@\n+    private void checkIfSemicolonIsInDifferentLineThanPrevious(DetailAST ast) {\n+        DetailAST currentStatement \u003d ast;\n+        final boolean hasResourcesPrevSibling \u003d\n+                currentStatement.getPreviousSibling() !\u003d null\n+                        \u0026\u0026 currentStatement.getPreviousSibling().getType() \u003d\u003d TokenTypes.RESOURCES;\n+        if (!hasResourcesPrevSibling \u0026\u0026 isMultilineStatement(currentStatement)) {\n+            currentStatement \u003d ast.getPreviousSibling();\n+        }\n+        if (isInLambda) {\n+            int countOfSemiInCurrentLambda \u003d countOfSemiInLambda.pop();\n+            countOfSemiInCurrentLambda++;\n+            countOfSemiInLambda.push(countOfSemiInCurrentLambda);\n+            if (!inForHeader \u0026\u0026 countOfSemiInCurrentLambda \u003e 1\n+                    \u0026\u0026 isOnTheSameLine(currentStatement,\n+                    lastStatementEnd, forStatementEnd,\n+                    lambdaStatementEnd)) {\n+                log(ast, MSG_KEY);\n+            }\n+        }\n+        else if (!inForHeader \u0026\u0026 isOnTheSameLine(currentStatement, lastStatementEnd,\n+                forStatementEnd, lambdaStatementEnd)) {\n+            log(ast, MSG_KEY);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void checkIfSemicolonIsInDifferentLineThanPrevious(DetailAST ast) {\n        DetailAST currentStatement \u003d ast;\n        final boolean hasResourcesPrevSibling \u003d\n                currentStatement.getPreviousSibling() !\u003d null\n                        \u0026\u0026 currentStatement.getPreviousSibling().getType() \u003d\u003d TokenTypes.RESOURCES;\n        if (!hasResourcesPrevSibling \u0026\u0026 isMultilineStatement(currentStatement)) {\n            currentStatement \u003d ast.getPreviousSibling();\n        }\n        if (isInLambda) {\n            int countOfSemiInCurrentLambda \u003d countOfSemiInLambda.pop();\n            countOfSemiInCurrentLambda++;\n            countOfSemiInLambda.push(countOfSemiInCurrentLambda);\n            if (!inForHeader \u0026\u0026 countOfSemiInCurrentLambda \u003e 1\n                    \u0026\u0026 isOnTheSameLine(currentStatement,\n                    lastStatementEnd, forStatementEnd,\n                    lambdaStatementEnd)) {\n                log(ast, MSG_KEY);\n            }\n        }\n        else if (!inForHeader \u0026\u0026 isOnTheSameLine(currentStatement, lastStatementEnd,\n                forStatementEnd, lambdaStatementEnd)) {\n            log(ast, MSG_KEY);\n        }\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java"
    }
  }
}