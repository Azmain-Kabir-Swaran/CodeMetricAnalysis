{
  "origin": "codeshovel",
  "repositoryName": "checkstyle",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/checkstyle/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RequireThisCheck.java",
  "functionName": "isOverlappingByArgument",
  "functionId": "isOverlappingByArgument___ast-DetailAST",
  "sourceFilePath": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
  "functionStartLine": 890,
  "functionEndLine": 905,
  "numCommitsSeen": 91,
  "timeTaken": 1629,
  "changeHistory": [
    "073c370de2e65fc346b51ef09763ecb30b5cd14f",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25"
  ],
  "changeHistoryShort": {
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": "Ybodychange",
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": "Ybodychange",
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": "Yintroduced"
  },
  "changeHistoryDetails": {
    "073c370de2e65fc346b51ef09763ecb30b5cd14f": {
      "type": "Ybodychange",
      "commitMessage": "Pull #4343: moved more variables inside if blocks to reduce execution",
      "commitDate": "11/05/17 2:56 PM",
      "commitName": "073c370de2e65fc346b51ef09763ecb30b5cd14f",
      "commitAuthor": "rnveach",
      "commitDateOld": "12/04/17 6:09 PM",
      "commitNameOld": "db64216a19b480855058d85f489d22fface4ff13",
      "commitAuthorOld": "Piyush Sharma",
      "daysBetweenCommits": 28.87,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n     private boolean isOverlappingByArgument(DetailAST ast) {\n         boolean overlapping \u003d false;\n         final DetailAST parent \u003d ast.getParent();\n         final DetailAST sibling \u003d ast.getNextSibling();\n         if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n-            final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n-            final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n             if (isCompoundAssignToken(parent.getType())) {\n                 overlapping \u003d true;\n             }\n             else {\n+                final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n+                final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n                 overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n             }\n         }\n         return overlapping;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isOverlappingByArgument(DetailAST ast) {\n        boolean overlapping \u003d false;\n        final DetailAST parent \u003d ast.getParent();\n        final DetailAST sibling \u003d ast.getNextSibling();\n        if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n            if (isCompoundAssignToken(parent.getType())) {\n                overlapping \u003d true;\n            }\n            else {\n                final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n                final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n                overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n            }\n        }\n        return overlapping;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "81c030e322201085e463b9cc97e3e8dbce0e38d4": {
      "type": "Ybodychange",
      "commitMessage": "Issue #3335: prevented static variables being checked for RequireThis (#3355)\n\n",
      "commitDate": "25/07/16 9:51 PM",
      "commitName": "81c030e322201085e463b9cc97e3e8dbce0e38d4",
      "commitAuthor": "rnveach",
      "commitDateOld": "05/07/16 9:56 AM",
      "commitNameOld": "0a85131b141a185ec3d7bb92df8ccbd92d38570e",
      "commitAuthorOld": "rnveach",
      "daysBetweenCommits": 20.5,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n     private boolean isOverlappingByArgument(DetailAST ast) {\n         boolean overlapping \u003d false;\n         final DetailAST parent \u003d ast.getParent();\n         final DetailAST sibling \u003d ast.getNextSibling();\n         if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n             final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n-            if (classFrame !\u003d null) {\n-                final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n-                if (isCompoundAssignToken(parent.getType())) {\n-                    overlapping \u003d true;\n-                }\n-                else {\n-                    overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n-                }\n+            final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n+            if (isCompoundAssignToken(parent.getType())) {\n+                overlapping \u003d true;\n+            }\n+            else {\n+                overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n             }\n         }\n         return overlapping;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isOverlappingByArgument(DetailAST ast) {\n        boolean overlapping \u003d false;\n        final DetailAST parent \u003d ast.getParent();\n        final DetailAST sibling \u003d ast.getNextSibling();\n        if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n            final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n            final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n            if (isCompoundAssignToken(parent.getType())) {\n                overlapping \u003d true;\n            }\n            else {\n                overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n            }\n        }\n        return overlapping;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java",
      "extendedDetails": {}
    },
    "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25": {
      "type": "Yintroduced",
      "commitMessage": "Issue #2362: Add \u0027validateOnlyOverlapping\u0027 option for RequireThisCheck\n",
      "commitDate": "04/03/16 6:34 AM",
      "commitName": "d274db7b321e4624fbdc86f6f3d5cbf9c0830a25",
      "commitAuthor": "Andrei Selkin",
      "diff": "@@ -0,0 +1,18 @@\n+    private boolean isOverlappingByArgument(DetailAST ast) {\n+        boolean overlapping \u003d false;\n+        final DetailAST parent \u003d ast.getParent();\n+        final DetailAST sibling \u003d ast.getNextSibling();\n+        if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n+            final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n+            if (classFrame !\u003d null) {\n+                final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n+                if (isCompoundAssignToken(parent.getType())) {\n+                    overlapping \u003d true;\n+                }\n+                else {\n+                    overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n+                }\n+            }\n+        }\n+        return overlapping;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean isOverlappingByArgument(DetailAST ast) {\n        boolean overlapping \u003d false;\n        final DetailAST parent \u003d ast.getParent();\n        final DetailAST sibling \u003d ast.getNextSibling();\n        if (sibling !\u003d null \u0026\u0026 isAssignToken(parent.getType())) {\n            final ClassFrame classFrame \u003d (ClassFrame) findFrame(ast, true);\n            if (classFrame !\u003d null) {\n                final Set\u003cDetailAST\u003e exprIdents \u003d getAllTokensOfType(sibling, TokenTypes.IDENT);\n                if (isCompoundAssignToken(parent.getType())) {\n                    overlapping \u003d true;\n                }\n                else {\n                    overlapping \u003d classFrame.containsFieldOrVariableDef(exprIdents, ast);\n                }\n            }\n        }\n        return overlapping;\n    }",
      "path": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java"
    }
  }
}