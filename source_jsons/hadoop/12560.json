{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Balancer.java",
  "functionName": "runOneIteration",
  "functionId": "runOneIteration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
  "functionStartLine": 625,
  "functionEndLine": 683,
  "numCommitsSeen": 178,
  "timeTaken": 11659,
  "changeHistory": [
    "dcf55838ae41aecfa8a7b37d9b95478ce6acf0a7",
    "c48e9d608c1daf7826f2e738c0a67d8eab79d8de",
    "1f004b3367c57de9e8a67040a57efc31c9ba8ee2",
    "9b959f3ee70cfdaf532d72f0bbbd1a4be0be12aa",
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f",
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
    "e60673697d5046c29c52bbabdfe80506f99773e4",
    "c3cf331dc91e2beef2afeed11105084843b02858",
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
    "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d",
    "eae2a304624ee6caaa8591999752be2bba2b89e0",
    "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269",
    "99d072d0729295329f4bd851f119fb07c0f688c2",
    "8f5bd5f1bc25447f79400866fa921e2107a1fe73",
    "1634e980af422c0af2f7c9c7280a77f2fbddc9c0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "dcf55838ae41aecfa8a7b37d9b95478ce6acf0a7": "Ybodychange",
    "c48e9d608c1daf7826f2e738c0a67d8eab79d8de": "Ybodychange",
    "1f004b3367c57de9e8a67040a57efc31c9ba8ee2": "Ybodychange",
    "9b959f3ee70cfdaf532d72f0bbbd1a4be0be12aa": "Ybodychange",
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f": "Ybodychange",
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "e60673697d5046c29c52bbabdfe80506f99773e4": "Ymultichange(Yreturntypechange,Ybodychange)",
    "c3cf331dc91e2beef2afeed11105084843b02858": "Ybodychange",
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2": "Ybodychange",
    "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d": "Ybodychange",
    "eae2a304624ee6caaa8591999752be2bba2b89e0": "Ybodychange",
    "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269": "Ybodychange",
    "99d072d0729295329f4bd851f119fb07c0f688c2": "Ybodychange",
    "8f5bd5f1bc25447f79400866fa921e2107a1fe73": "Ybodychange",
    "1634e980af422c0af2f7c9c7280a77f2fbddc9c0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf55838ae41aecfa8a7b37d9b95478ce6acf0a7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14880. Correct the sequence of statistics \u0026 exit message in balencer. Contributed by Renukaprasad C.\n",
      "commitDate": "06/11/19 8:15 AM",
      "commitName": "dcf55838ae41aecfa8a7b37d9b95478ce6acf0a7",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "30/07/19 3:42 PM",
      "commitNameOld": "1f26cc8705b5af12eefedda019e7ab5c261d9bfb",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 98.73,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,59 @@\n   Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n-        System.out.println(\"The cluster is balanced. Exiting...\");\n         return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n \n       // Should not run the balancer during an unfinalized upgrade, since moved\n       // blocks are not deleted on the source datanode.\n       if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n         System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n             + \"please finalize the HDFS upgrade before running the balancer.\");\n         LOG.error(\"Balancer exiting as upgrade is not finalized, \"\n             + \"please finalize the HDFS upgrade before running the balancer.\");\n         return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n       }\n \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesBeingMoved \u003d chooseStorageGroups();\n       if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n         return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n       return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n\n      // Should not run the balancer during an unfinalized upgrade, since moved\n      // blocks are not deleted on the source datanode.\n      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n        System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        LOG.error(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n      }\n\n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n\n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "c48e9d608c1daf7826f2e738c0a67d8eab79d8de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10628. Log HDFS Balancer exit message to its own log. Contributed by Jiayi Zhou.\n",
      "commitDate": "15/07/16 11:42 AM",
      "commitName": "c48e9d608c1daf7826f2e738c0a67d8eab79d8de",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/05/16 12:49 PM",
      "commitNameOld": "15ed080e3610b7526eff12391de780948a75fa7b",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 51.95,
      "commitsBetweenForRepo": 480,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n \n       // Should not run the balancer during an unfinalized upgrade, since moved\n       // blocks are not deleted on the source datanode.\n       if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n         System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n             + \"please finalize the HDFS upgrade before running the balancer.\");\n+        LOG.error(\"Balancer exiting as upgrade is not finalized, \"\n+            + \"please finalize the HDFS upgrade before running the balancer.\");\n         return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n       }\n \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesBeingMoved \u003d chooseStorageGroups();\n       if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n         return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n       return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n\n      // Should not run the balancer during an unfinalized upgrade, since moved\n      // blocks are not deleted on the source datanode.\n      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n        System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        LOG.error(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n      }\n\n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n\n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "1f004b3367c57de9e8a67040a57efc31c9ba8ee2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9871. \"Bytes Being Moved\" -ve(-1 B) when cluster was already balanced. (Contributed by Brahma Reddy Battulla)\n",
      "commitDate": "28/03/16 8:25 PM",
      "commitName": "1f004b3367c57de9e8a67040a57efc31c9ba8ee2",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "25/02/16 9:24 AM",
      "commitNameOld": "ccff6035f50769eb69701128ae61efc69e82609d",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 32.42,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n \n       // Should not run the balancer during an unfinalized upgrade, since moved\n       // blocks are not deleted on the source datanode.\n       if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n         System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n             + \"please finalize the HDFS upgrade before running the balancer.\");\n         return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n       }\n \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesBeingMoved \u003d chooseStorageGroups();\n       if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n         return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n       return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, 0);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n\n      // Should not run the balancer during an unfinalized upgrade, since moved\n      // blocks are not deleted on the source datanode.\n      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n        System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n      }\n\n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n\n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "9b959f3ee70cfdaf532d72f0bbbd1a4be0be12aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9790. HDFS Balancer should exit with a proper message if upgrade is not finalized (Contributed by Xiaobing Zhou)\n",
      "commitDate": "11/02/16 8:40 PM",
      "commitName": "9b959f3ee70cfdaf532d72f0bbbd1a4be0be12aa",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "05/02/16 3:07 PM",
      "commitNameOld": "c6497949e866594050153b953a85c0a1db59d2f8",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 6.23,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n \n       // Should not run the balancer during an unfinalized upgrade, since moved\n       // blocks are not deleted on the source datanode.\n       if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n+        System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n+            + \"please finalize the HDFS upgrade before running the balancer.\");\n         return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n       }\n \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesBeingMoved \u003d chooseStorageGroups();\n       if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n         return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n       return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n\n      // Should not run the balancer during an unfinalized upgrade, since moved\n      // blocks are not deleted on the source datanode.\n      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n        System.err.println(\"Balancer exiting as upgrade is not finalized, \"\n            + \"please finalize the HDFS upgrade before running the balancer.\");\n        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n      }\n\n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n\n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8549. Abort the balancer if an upgrade is in progress.\n",
      "commitDate": "10/06/15 1:42 PM",
      "commitName": "a7a7768341f1b7d3a8f2686e2f4d00c57f2e1d4f",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "20/03/15 12:02 PM",
      "commitNameOld": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 82.07,
      "commitsBetweenForRepo": 760,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,56 @@\n   Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n-      \n+\n+      // Should not run the balancer during an unfinalized upgrade, since moved\n+      // blocks are not deleted on the source datanode.\n+      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n+        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n+      }\n+\n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesBeingMoved \u003d chooseStorageGroups();\n       if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-      \n+\n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n         return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n       return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n\n      // Should not run the balancer during an unfinalized upgrade, since moved\n      // blocks are not deleted on the source datanode.\n      if (!runDuringUpgrade \u0026\u0026 nnc.isUpgrading()) {\n        return newResult(ExitStatus.UNFINALIZED_UPGRADE, bytesLeftToMove, -1);\n      }\n\n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n\n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "ae71a671a3b4b454aa393c2974b6f1f16dd61405": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "06/11/14 5:48 PM",
      "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
          "commitDate": "06/11/14 5:48 PM",
          "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/09/14 9:08 PM",
          "commitNameOld": "e8e7fbe81abc64a9ae3d2f3f62c088426073b2bf",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 42.9,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,50 @@\n-  private ExitStatus run(int iteration, Formatter formatter,\n-      Configuration conf) {\n+  Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ExitStatus.SUCCESS;\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseStorageGroups();\n-      if (bytesToMove \u003d\u003d 0) {\n+      final long bytesBeingMoved \u003d chooseStorageGroups();\n+      if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ExitStatus.NO_MOVE_BLOCK;\n+        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n-        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-\n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n-          DateFormat.getDateTimeInstance().format(new Date()),\n-          iteration,\n-          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n-          StringUtils.byteDesc(bytesLeftToMove),\n-          StringUtils.byteDesc(bytesToMove)\n-          );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ExitStatus.NO_MOVE_PROGRESS;\n+        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n-      return ExitStatus.IN_PROGRESS;\n+      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.ILLEGAL_ARGUMENTS;\n+      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.IO_EXCEPTION;\n+      return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.INTERRUPTED;\n+      return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "run",
            "newValue": "runOneIteration"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
          "commitDate": "06/11/14 5:48 PM",
          "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/09/14 9:08 PM",
          "commitNameOld": "e8e7fbe81abc64a9ae3d2f3f62c088426073b2bf",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 42.9,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,50 @@\n-  private ExitStatus run(int iteration, Formatter formatter,\n-      Configuration conf) {\n+  Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ExitStatus.SUCCESS;\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseStorageGroups();\n-      if (bytesToMove \u003d\u003d 0) {\n+      final long bytesBeingMoved \u003d chooseStorageGroups();\n+      if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ExitStatus.NO_MOVE_BLOCK;\n+        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n-        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-\n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n-          DateFormat.getDateTimeInstance().format(new Date()),\n-          iteration,\n-          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n-          StringUtils.byteDesc(bytesLeftToMove),\n-          StringUtils.byteDesc(bytesToMove)\n-          );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ExitStatus.NO_MOVE_PROGRESS;\n+        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n-      return ExitStatus.IN_PROGRESS;\n+      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.ILLEGAL_ARGUMENTS;\n+      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.IO_EXCEPTION;\n+      return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.INTERRUPTED;\n+      return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "[iteration-int, formatter-Formatter, conf-Configuration]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
          "commitDate": "06/11/14 5:48 PM",
          "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/09/14 9:08 PM",
          "commitNameOld": "e8e7fbe81abc64a9ae3d2f3f62c088426073b2bf",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 42.9,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,50 @@\n-  private ExitStatus run(int iteration, Formatter formatter,\n-      Configuration conf) {\n+  Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ExitStatus.SUCCESS;\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseStorageGroups();\n-      if (bytesToMove \u003d\u003d 0) {\n+      final long bytesBeingMoved \u003d chooseStorageGroups();\n+      if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ExitStatus.NO_MOVE_BLOCK;\n+        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n-        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-\n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n-          DateFormat.getDateTimeInstance().format(new Date()),\n-          iteration,\n-          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n-          StringUtils.byteDesc(bytesLeftToMove),\n-          StringUtils.byteDesc(bytesToMove)\n-          );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ExitStatus.NO_MOVE_PROGRESS;\n+        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n-      return ExitStatus.IN_PROGRESS;\n+      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.ILLEGAL_ARGUMENTS;\n+      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.IO_EXCEPTION;\n+      return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.INTERRUPTED;\n+      return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "ExitStatus",
            "newValue": "Result"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
          "commitDate": "06/11/14 5:48 PM",
          "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/09/14 9:08 PM",
          "commitNameOld": "e8e7fbe81abc64a9ae3d2f3f62c088426073b2bf",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 42.9,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,50 @@\n-  private ExitStatus run(int iteration, Formatter formatter,\n-      Configuration conf) {\n+  Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ExitStatus.SUCCESS;\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseStorageGroups();\n-      if (bytesToMove \u003d\u003d 0) {\n+      final long bytesBeingMoved \u003d chooseStorageGroups();\n+      if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ExitStatus.NO_MOVE_BLOCK;\n+        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n-        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-\n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n-          DateFormat.getDateTimeInstance().format(new Date()),\n-          iteration,\n-          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n-          StringUtils.byteDesc(bytesLeftToMove),\n-          StringUtils.byteDesc(bytesToMove)\n-          );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ExitStatus.NO_MOVE_PROGRESS;\n+        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n-      return ExitStatus.IN_PROGRESS;\n+      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.ILLEGAL_ARGUMENTS;\n+      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.IO_EXCEPTION;\n+      return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.INTERRUPTED;\n+      return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7364. Balancer always shows zero Bytes Already Moved. Contributed by Tsz Wo Nicholas Sze.\n",
          "commitDate": "06/11/14 5:48 PM",
          "commitName": "ae71a671a3b4b454aa393c2974b6f1f16dd61405",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "24/09/14 9:08 PM",
          "commitNameOld": "e8e7fbe81abc64a9ae3d2f3f62c088426073b2bf",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 42.9,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,50 @@\n-  private ExitStatus run(int iteration, Formatter formatter,\n-      Configuration conf) {\n+  Result runOneIteration() {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ExitStatus.SUCCESS;\n+        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseStorageGroups();\n-      if (bytesToMove \u003d\u003d 0) {\n+      final long bytesBeingMoved \u003d chooseStorageGroups();\n+      if (bytesBeingMoved \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ExitStatus.NO_MOVE_BLOCK;\n+        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n       } else {\n-        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n             \" in this iteration\");\n       }\n-\n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n-          DateFormat.getDateTimeInstance().format(new Date()),\n-          iteration,\n-          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n-          StringUtils.byteDesc(bytesLeftToMove),\n-          StringUtils.byteDesc(bytesToMove)\n-          );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ExitStatus.NO_MOVE_PROGRESS;\n+        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n       }\n \n-      return ExitStatus.IN_PROGRESS;\n+      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.ILLEGAL_ARGUMENTS;\n+      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.IO_EXCEPTION;\n+      return newResult(ExitStatus.IO_EXCEPTION);\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ExitStatus.INTERRUPTED;\n+      return newResult(ExitStatus.INTERRUPTED);\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Result runOneIteration() {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return newResult(ExitStatus.SUCCESS, bytesLeftToMove, -1);\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesBeingMoved \u003d chooseStorageGroups();\n      if (bytesBeingMoved \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return newResult(ExitStatus.NO_MOVE_BLOCK, bytesLeftToMove, bytesBeingMoved);\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesBeingMoved) +\n            \" in this iteration\");\n      }\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return newResult(ExitStatus.NO_MOVE_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n      }\n\n      return newResult(ExitStatus.IN_PROGRESS, bytesLeftToMove, bytesBeingMoved);\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.ILLEGAL_ARGUMENTS);\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.IO_EXCEPTION);\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return newResult(ExitStatus.INTERRUPTED);\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {}
        }
      ]
    },
    "e60673697d5046c29c52bbabdfe80506f99773e4": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6837. Code cleanup for Balancer and Dispatcher. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617337 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/14 11:01 AM",
      "commitName": "e60673697d5046c29c52bbabdfe80506f99773e4",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6837. Code cleanup for Balancer and Dispatcher. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617337 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/08/14 11:01 AM",
          "commitName": "e60673697d5046c29c52bbabdfe80506f99773e4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/08/14 2:33 PM",
          "commitNameOld": "c3cf331dc91e2beef2afeed11105084843b02858",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  private ReturnStatus run(int iteration, Formatter formatter,\n+  private ExitStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ReturnStatus.SUCCESS;\n+        return ExitStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseStorageGroups();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ReturnStatus.NO_MOVE_BLOCK;\n+        return ExitStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(dispatcher.getBytesMoved()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ReturnStatus.NO_MOVE_PROGRESS;\n+        return ExitStatus.NO_MOVE_PROGRESS;\n       }\n \n-      return ReturnStatus.IN_PROGRESS;\n+      return ExitStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.ILLEGAL_ARGS;\n+      return ExitStatus.ILLEGAL_ARGUMENTS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.IO_EXCEPTION;\n+      return ExitStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.INTERRUPTED;\n+      return ExitStatus.INTERRUPTED;\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ExitStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ExitStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseStorageGroups();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ExitStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return ExitStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ExitStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.ILLEGAL_ARGUMENTS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.INTERRUPTED;\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "ReturnStatus",
            "newValue": "ExitStatus"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6837. Code cleanup for Balancer and Dispatcher. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617337 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/08/14 11:01 AM",
          "commitName": "e60673697d5046c29c52bbabdfe80506f99773e4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "08/08/14 2:33 PM",
          "commitNameOld": "c3cf331dc91e2beef2afeed11105084843b02858",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 2.85,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  private ReturnStatus run(int iteration, Formatter formatter,\n+  private ExitStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n       final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n-        return ReturnStatus.SUCCESS;\n+        return ExitStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseStorageGroups();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n-        return ReturnStatus.NO_MOVE_BLOCK;\n+        return ExitStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(dispatcher.getBytesMoved()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!dispatcher.dispatchAndCheckContinue()) {\n-        return ReturnStatus.NO_MOVE_PROGRESS;\n+        return ExitStatus.NO_MOVE_PROGRESS;\n       }\n \n-      return ReturnStatus.IN_PROGRESS;\n+      return ExitStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.ILLEGAL_ARGS;\n+      return ExitStatus.ILLEGAL_ARGUMENTS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.IO_EXCEPTION;\n+      return ExitStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n-      return ReturnStatus.INTERRUPTED;\n+      return ExitStatus.INTERRUPTED;\n     } finally {\n       dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ExitStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ExitStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseStorageGroups();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ExitStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return ExitStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ExitStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.ILLEGAL_ARGUMENTS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ExitStatus.INTERRUPTED;\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3cf331dc91e2beef2afeed11105084843b02858": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6828. Separate block replica dispatching from Balancer. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 2:33 PM",
      "commitName": "c3cf331dc91e2beef2afeed11105084843b02858",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/08/14 12:18 AM",
      "commitNameOld": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,59 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n-      /* get all live datanodes of a cluster and their disk usage\n-       * decide the number of bytes need to be moved\n-       */\n-      final long bytesLeftToMove \u003d init(\n-          nnc.getClient().getDatanodeStorageReport(DatanodeReportType.LIVE));\n+      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n+      final long bytesLeftToMove \u003d init(reports);\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseStorageGroups();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n-          StringUtils.byteDesc(bytesMoved.get()),\n+          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n-      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n+      if (!dispatcher.dispatchAndCheckContinue()) {\n         return ReturnStatus.NO_MOVE_PROGRESS;\n       }\n \n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n-      // shutdown thread pools\n-      dispatcherExecutor.shutdownNow();\n-      moverExecutor.shutdownNow();\n+      dispatcher.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      final List\u003cDatanodeStorageReport\u003e reports \u003d dispatcher.init();\n      final long bytesLeftToMove \u003d init(reports);\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseStorageGroups();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(dispatcher.getBytesMoved()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!dispatcher.dispatchAndCheckContinue()) {\n        return ReturnStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      dispatcher.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6809. Move Balancer\u0027s inner classes MovedBlocks and Matcher as to standalone classes and separates KeyManager from NameNodeConnector.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 12:18 AM",
      "commitName": "83b9933db3349e6a6faf23bce35c9d4ce3f7bcf2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/08/14 7:12 AM",
      "commitNameOld": "7e12b1912f8cdbe6d88ac0b8eb71d7c4dc1bf78e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.71,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d init(\n-          nnc.client.getDatanodeStorageReport(DatanodeReportType.LIVE));\n+          nnc.getClient().getDatanodeStorageReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseStorageGroups();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n         return ReturnStatus.NO_MOVE_PROGRESS;\n       }\n \n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d init(\n          nnc.getClient().getDatanodeStorageReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseStorageGroups();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n        return ReturnStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6685. Balancer should preserve storage type of replicas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615015 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 6:05 PM",
      "commitName": "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "30/07/14 11:02 PM",
      "commitNameOld": "b8b8f3f5e7214d6fcfc30e1b94ff097e52868f4f",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n-      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n+      final long bytesLeftToMove \u003d init(\n+          nnc.client.getDatanodeStorageReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n-      final long bytesToMove \u003d chooseNodes();\n+      final long bytesToMove \u003d chooseStorageGroups();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n         return ReturnStatus.NO_MOVE_PROGRESS;\n       }\n \n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d init(\n          nnc.client.getDatanodeStorageReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseStorageGroups();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n        return ReturnStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "eae2a304624ee6caaa8591999752be2bba2b89e0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4261. Fix bugs in Balaner causing infinite loop and TestBalancerWithNodeGroup timeing out.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 7:55 AM",
      "commitName": "eae2a304624ee6caaa8591999752be2bba2b89e0",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "08/01/13 1:05 PM",
      "commitNameOld": "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,63 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n-      if (dispatchBlockMoves() \u003e 0) {\n-        notChangedIterations \u003d 0;\n-      } else {\n-        notChangedIterations++;\n-        if (notChangedIterations \u003e\u003d 5) {\n-          System.out.println(\n-              \"No block has been moved for 5 iterations. Exiting...\");\n-          return ReturnStatus.NO_MOVE_PROGRESS;\n-        }\n+      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n+        return ReturnStatus.NO_MOVE_PROGRESS;\n       }\n \n-      // clean all lists\n-      resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n        return ReturnStatus.NO_MOVE_PROGRESS;\n      }\n\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4033. Miscellaneous findbugs 2 fixes. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430534 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 1:05 PM",
      "commitName": "5cdb7e5ce7f0c3129749be8f29e2f11c0e0f2269",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "10/12/12 10:17 PM",
      "commitNameOld": "99d072d0729295329f4bd851f119fb07c0f688c2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 28.62,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n-      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n+      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (dispatchBlockMoves() \u003e 0) {\n         notChangedIterations \u003d 0;\n       } else {\n         notChangedIterations++;\n         if (notChangedIterations \u003e\u003d 5) {\n           System.out.println(\n               \"No block has been moved for 5 iterations. Exiting...\");\n           return ReturnStatus.NO_MOVE_PROGRESS;\n         }\n       }\n \n       // clean all lists\n       resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s%n\",\n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData(conf);\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "99d072d0729295329f4bd851f119fb07c0f688c2": {
      "type": "Ybodychange",
      "commitMessage": "svn -c -1419192 . for reverting HDFS-4261 since TestBalancerWithNodeGroup failed in the recent Jenkins builds.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1420010 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 10:17 PM",
      "commitName": "99d072d0729295329f4bd851f119fb07c0f688c2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/12/12 7:31 PM",
      "commitNameOld": "8f5bd5f1bc25447f79400866fa921e2107a1fe73",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,72 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n-      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n-        return ReturnStatus.NO_MOVE_PROGRESS;\n+      if (dispatchBlockMoves() \u003e 0) {\n+        notChangedIterations \u003d 0;\n+      } else {\n+        notChangedIterations++;\n+        if (notChangedIterations \u003e\u003d 5) {\n+          System.out.println(\n+              \"No block has been moved for 5 iterations. Exiting...\");\n+          return ReturnStatus.NO_MOVE_PROGRESS;\n+        }\n       }\n \n       // clean all lists\n       resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData(conf);\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "8f5bd5f1bc25447f79400866fa921e2107a1fe73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4261. Fix bugs in Balancer that it does not terminate in some cases and it checks BlockPlacementPolicy instance incorrectly.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419192 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/12 7:31 PM",
      "commitName": "8f5bd5f1bc25447f79400866fa921e2107a1fe73",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/12/12 11:22 AM",
      "commitNameOld": "1f4b135b1f9c6aff1dab4fe749126ec814f8387b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.34,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,65 @@\n   private ReturnStatus run(int iteration, Formatter formatter,\n       Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n-      if (dispatchBlockMoves() \u003e 0) {\n-        notChangedIterations \u003d 0;\n-      } else {\n-        notChangedIterations++;\n-        if (notChangedIterations \u003e\u003d 5) {\n-          System.out.println(\n-              \"No block has been moved for 5 iterations. Exiting...\");\n-          return ReturnStatus.NO_MOVE_PROGRESS;\n-        }\n+      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n+        return ReturnStatus.NO_MOVE_PROGRESS;\n       }\n \n       // clean all lists\n       resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (!this.nnc.shouldContinue(dispatchBlockMoves())) {\n        return ReturnStatus.NO_MOVE_PROGRESS;\n      }\n\n      // clean all lists\n      resetData(conf);\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {}
    },
    "1634e980af422c0af2f7c9c7280a77f2fbddc9c0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3495. Update Balancer to support new NetworkTopology with NodeGroup.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/11/12 11:19 AM",
      "commitName": "1634e980af422c0af2f7c9c7280a77f2fbddc9c0",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3495. Update Balancer to support new NetworkTopology with NodeGroup.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414874 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/12 11:19 AM",
          "commitName": "1634e980af422c0af2f7c9c7280a77f2fbddc9c0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/08/12 5:28 PM",
          "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 105.79,
          "commitsBetweenForRepo": 628,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,72 @@\n-  private ReturnStatus run(int iteration, Formatter formatter) {\n+  private ReturnStatus run(int iteration, Formatter formatter,\n+      Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (dispatchBlockMoves() \u003e 0) {\n         notChangedIterations \u003d 0;\n       } else {\n         notChangedIterations++;\n         if (notChangedIterations \u003e\u003d 5) {\n           System.out.println(\n               \"No block has been moved for 5 iterations. Exiting...\");\n           return ReturnStatus.NO_MOVE_PROGRESS;\n         }\n       }\n \n       // clean all lists\n-      resetData();\n+      resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData(conf);\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {
            "oldValue": "[iteration-int, formatter-Formatter]",
            "newValue": "[iteration-int, formatter-Formatter, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3495. Update Balancer to support new NetworkTopology with NodeGroup.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1414874 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/12 11:19 AM",
          "commitName": "1634e980af422c0af2f7c9c7280a77f2fbddc9c0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/08/12 5:28 PM",
          "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 105.79,
          "commitsBetweenForRepo": 628,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,71 +1,72 @@\n-  private ReturnStatus run(int iteration, Formatter formatter) {\n+  private ReturnStatus run(int iteration, Formatter formatter,\n+      Configuration conf) {\n     try {\n       /* get all live datanodes of a cluster and their disk usage\n        * decide the number of bytes need to be moved\n        */\n       final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n       if (bytesLeftToMove \u003d\u003d 0) {\n         System.out.println(\"The cluster is balanced. Exiting...\");\n         return ReturnStatus.SUCCESS;\n       } else {\n         LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n             + \" to make the cluster balanced.\" );\n       }\n       \n       /* Decide all the nodes that will participate in the block move and\n        * the number of bytes that need to be moved from one node to another\n        * in this iteration. Maximum bytes to be moved per node is\n        * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n        */\n       final long bytesToMove \u003d chooseNodes();\n       if (bytesToMove \u003d\u003d 0) {\n         System.out.println(\"No block can be moved. Exiting...\");\n         return ReturnStatus.NO_MOVE_BLOCK;\n       } else {\n         LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n             \" in this iteration\");\n       }\n \n       formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n           DateFormat.getDateTimeInstance().format(new Date()),\n           iteration,\n           StringUtils.byteDesc(bytesMoved.get()),\n           StringUtils.byteDesc(bytesLeftToMove),\n           StringUtils.byteDesc(bytesToMove)\n           );\n       \n       /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n        * decide a block to be moved and its proxy source, \n        * then initiates the move until all bytes are moved or no more block\n        * available to move.\n        * Exit no byte has been moved for 5 consecutive iterations.\n        */\n       if (dispatchBlockMoves() \u003e 0) {\n         notChangedIterations \u003d 0;\n       } else {\n         notChangedIterations++;\n         if (notChangedIterations \u003e\u003d 5) {\n           System.out.println(\n               \"No block has been moved for 5 iterations. Exiting...\");\n           return ReturnStatus.NO_MOVE_PROGRESS;\n         }\n       }\n \n       // clean all lists\n-      resetData();\n+      resetData(conf);\n       return ReturnStatus.IN_PROGRESS;\n     } catch (IllegalArgumentException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.ILLEGAL_ARGS;\n     } catch (IOException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.IO_EXCEPTION;\n     } catch (InterruptedException e) {\n       System.out.println(e + \".  Exiting ...\");\n       return ReturnStatus.INTERRUPTED;\n     } finally {\n       // shutdown thread pools\n       dispatcherExecutor.shutdownNow();\n       moverExecutor.shutdownNow();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter,\n      Configuration conf) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData(conf);\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData();\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData();\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,71 @@\n+  private ReturnStatus run(int iteration, Formatter formatter) {\n+    try {\n+      /* get all live datanodes of a cluster and their disk usage\n+       * decide the number of bytes need to be moved\n+       */\n+      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n+      if (bytesLeftToMove \u003d\u003d 0) {\n+        System.out.println(\"The cluster is balanced. Exiting...\");\n+        return ReturnStatus.SUCCESS;\n+      } else {\n+        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n+            + \" to make the cluster balanced.\" );\n+      }\n+      \n+      /* Decide all the nodes that will participate in the block move and\n+       * the number of bytes that need to be moved from one node to another\n+       * in this iteration. Maximum bytes to be moved per node is\n+       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n+       */\n+      final long bytesToMove \u003d chooseNodes();\n+      if (bytesToMove \u003d\u003d 0) {\n+        System.out.println(\"No block can be moved. Exiting...\");\n+        return ReturnStatus.NO_MOVE_BLOCK;\n+      } else {\n+        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n+            \" in this iteration\");\n+      }\n+\n+      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n+          DateFormat.getDateTimeInstance().format(new Date()),\n+          iteration,\n+          StringUtils.byteDesc(bytesMoved.get()),\n+          StringUtils.byteDesc(bytesLeftToMove),\n+          StringUtils.byteDesc(bytesToMove)\n+          );\n+      \n+      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n+       * decide a block to be moved and its proxy source, \n+       * then initiates the move until all bytes are moved or no more block\n+       * available to move.\n+       * Exit no byte has been moved for 5 consecutive iterations.\n+       */\n+      if (dispatchBlockMoves() \u003e 0) {\n+        notChangedIterations \u003d 0;\n+      } else {\n+        notChangedIterations++;\n+        if (notChangedIterations \u003e\u003d 5) {\n+          System.out.println(\n+              \"No block has been moved for 5 iterations. Exiting...\");\n+          return ReturnStatus.NO_MOVE_PROGRESS;\n+        }\n+      }\n+\n+      // clean all lists\n+      resetData();\n+      return ReturnStatus.IN_PROGRESS;\n+    } catch (IllegalArgumentException e) {\n+      System.out.println(e + \".  Exiting ...\");\n+      return ReturnStatus.ILLEGAL_ARGS;\n+    } catch (IOException e) {\n+      System.out.println(e + \".  Exiting ...\");\n+      return ReturnStatus.IO_EXCEPTION;\n+    } catch (InterruptedException e) {\n+      System.out.println(e + \".  Exiting ...\");\n+      return ReturnStatus.INTERRUPTED;\n+    } finally {\n+      // shutdown thread pools\n+      dispatcherExecutor.shutdownNow();\n+      moverExecutor.shutdownNow();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ReturnStatus run(int iteration, Formatter formatter) {\n    try {\n      /* get all live datanodes of a cluster and their disk usage\n       * decide the number of bytes need to be moved\n       */\n      final long bytesLeftToMove \u003d initNodes(nnc.client.getDatanodeReport(DatanodeReportType.LIVE));\n      if (bytesLeftToMove \u003d\u003d 0) {\n        System.out.println(\"The cluster is balanced. Exiting...\");\n        return ReturnStatus.SUCCESS;\n      } else {\n        LOG.info( \"Need to move \"+ StringUtils.byteDesc(bytesLeftToMove)\n            + \" to make the cluster balanced.\" );\n      }\n      \n      /* Decide all the nodes that will participate in the block move and\n       * the number of bytes that need to be moved from one node to another\n       * in this iteration. Maximum bytes to be moved per node is\n       * Min(1 Band worth of bytes,  MAX_SIZE_TO_MOVE).\n       */\n      final long bytesToMove \u003d chooseNodes();\n      if (bytesToMove \u003d\u003d 0) {\n        System.out.println(\"No block can be moved. Exiting...\");\n        return ReturnStatus.NO_MOVE_BLOCK;\n      } else {\n        LOG.info( \"Will move \" + StringUtils.byteDesc(bytesToMove) +\n            \" in this iteration\");\n      }\n\n      formatter.format(\"%-24s %10d  %19s  %18s  %17s\\n\", \n          DateFormat.getDateTimeInstance().format(new Date()),\n          iteration,\n          StringUtils.byteDesc(bytesMoved.get()),\n          StringUtils.byteDesc(bytesLeftToMove),\n          StringUtils.byteDesc(bytesToMove)\n          );\n      \n      /* For each pair of \u003csource, target\u003e, start a thread that repeatedly \n       * decide a block to be moved and its proxy source, \n       * then initiates the move until all bytes are moved or no more block\n       * available to move.\n       * Exit no byte has been moved for 5 consecutive iterations.\n       */\n      if (dispatchBlockMoves() \u003e 0) {\n        notChangedIterations \u003d 0;\n      } else {\n        notChangedIterations++;\n        if (notChangedIterations \u003e\u003d 5) {\n          System.out.println(\n              \"No block has been moved for 5 iterations. Exiting...\");\n          return ReturnStatus.NO_MOVE_PROGRESS;\n        }\n      }\n\n      // clean all lists\n      resetData();\n      return ReturnStatus.IN_PROGRESS;\n    } catch (IllegalArgumentException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.ILLEGAL_ARGS;\n    } catch (IOException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.IO_EXCEPTION;\n    } catch (InterruptedException e) {\n      System.out.println(e + \".  Exiting ...\");\n      return ReturnStatus.INTERRUPTED;\n    } finally {\n      // shutdown thread pools\n      dispatcherExecutor.shutdownNow();\n      moverExecutor.shutdownNow();\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
    }
  }
}