{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HarFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___name-URI__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
  "functionStartLine": 128,
  "functionEndLine": 174,
  "numCommitsSeen": 36,
  "timeTaken": 5610,
  "changeHistory": [
    "deec7ca21ad1f7239b53f6dea36de043db13651b",
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "deec7ca21ad1f7239b53f6dea36de043db13651b": "Ybodychange",
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "deec7ca21ad1f7239b53f6dea36de043db13651b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9757. Har metadata cache can grow without limit (Cristina Abad via daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1512465 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/13 12:41 PM",
      "commitName": "deec7ca21ad1f7239b53f6dea36de043db13651b",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "22/07/13 11:15 AM",
      "commitNameOld": "c1314eb2a382bd9ce045a2fcc4a9e5c1fc368a24",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 18.06,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n+    // initialize the metadata cache, if needed\n+    initializeMetadataCache(conf);\n+\n     // decode the name\n     URI underLyingURI \u003d decodeHarURI(name, conf);\n     // we got the right har Path- now check if this is \n     // truly a har filesystem\n     Path harPath \u003d archivePath(\n       new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n     if (harPath \u003d\u003d null) { \n       throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                            name.toString());\n     }\n     if (fs \u003d\u003d null) {\n       fs \u003d FileSystem.get(underLyingURI, conf);\n     }\n     uri \u003d harPath.toUri();\n     archivePath \u003d new Path(uri.getPath());\n     harAuth \u003d getHarAuth(underLyingURI);\n     //check for the underlying fs containing\n     // the index file\n     Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n     Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n     if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n       throw new IOException(\"Invalid path for the Har Filesystem. \" +\n           \"No index file in \" + harPath);\n     }\n \n     metadata \u003d harMetaCache.get(uri);\n     if (metadata !\u003d null) {\n       FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n       FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n       if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n           aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n         // the archive has been overwritten since we last read it\n         // remove the entry from the meta data cache\n         metadata \u003d null;\n         harMetaCache.remove(uri);\n       }\n     }\n     if (metadata \u003d\u003d null) {\n       metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n       metadata.parseMetaData();\n       harMetaCache.put(uri, metadata);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    // initialize the metadata cache, if needed\n    initializeMetadataCache(conf);\n\n    // decode the name\n    URI underLyingURI \u003d decodeHarURI(name, conf);\n    // we got the right har Path- now check if this is \n    // truly a har filesystem\n    Path harPath \u003d archivePath(\n      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n    if (harPath \u003d\u003d null) { \n      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                           name.toString());\n    }\n    if (fs \u003d\u003d null) {\n      fs \u003d FileSystem.get(underLyingURI, conf);\n    }\n    uri \u003d harPath.toUri();\n    archivePath \u003d new Path(uri.getPath());\n    harAuth \u003d getHarAuth(underLyingURI);\n    //check for the underlying fs containing\n    // the index file\n    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n          \"No index file in \" + harPath);\n    }\n\n    metadata \u003d harMetaCache.get(uri);\n    if (metadata !\u003d null) {\n      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n        // the archive has been overwritten since we last read it\n        // remove the entry from the meta data cache\n        metadata \u003d null;\n        harMetaCache.remove(uri);\n      }\n    }\n    if (metadata \u003d\u003d null) {\n      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n      metadata.parseMetaData();\n      harMetaCache.put(uri, metadata);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {}
    },
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7810. move hadoop archive to core from tools. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 12:17 PM",
      "commitName": "0201be46c298e94176ec6297e9d9cdba3afc2bbd",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/12/11 10:07 AM",
      "commitNameOld": "f2f4e9341387199e04679ebc8de5e05c0fdbd437",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    // decode the name\n    URI underLyingURI \u003d decodeHarURI(name, conf);\n    // we got the right har Path- now check if this is \n    // truly a har filesystem\n    Path harPath \u003d archivePath(\n      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n    if (harPath \u003d\u003d null) { \n      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                           name.toString());\n    }\n    if (fs \u003d\u003d null) {\n      fs \u003d FileSystem.get(underLyingURI, conf);\n    }\n    uri \u003d harPath.toUri();\n    archivePath \u003d new Path(uri.getPath());\n    harAuth \u003d getHarAuth(underLyingURI);\n    //check for the underlying fs containing\n    // the index file\n    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n          \"No index file in \" + harPath);\n    }\n\n    metadata \u003d harMetaCache.get(uri);\n    if (metadata !\u003d null) {\n      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n        // the archive has been overwritten since we last read it\n        // remove the entry from the meta data cache\n        metadata \u003d null;\n        harMetaCache.remove(uri);\n      }\n    }\n    if (metadata \u003d\u003d null) {\n      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n      metadata.parseMetaData();\n      harMetaCache.put(uri, metadata);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    // decode the name\n    URI underLyingURI \u003d decodeHarURI(name, conf);\n    // we got the right har Path- now check if this is \n    // truly a har filesystem\n    Path harPath \u003d archivePath(\n      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n    if (harPath \u003d\u003d null) { \n      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                           name.toString());\n    }\n    if (fs \u003d\u003d null) {\n      fs \u003d FileSystem.get(underLyingURI, conf);\n    }\n    uri \u003d harPath.toUri();\n    archivePath \u003d new Path(uri.getPath());\n    harAuth \u003d getHarAuth(underLyingURI);\n    //check for the underlying fs containing\n    // the index file\n    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n          \"No index file in \" + harPath);\n    }\n\n    metadata \u003d harMetaCache.get(uri);\n    if (metadata !\u003d null) {\n      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n        // the archive has been overwritten since we last read it\n        // remove the entry from the meta data cache\n        metadata \u003d null;\n        harMetaCache.remove(uri);\n      }\n    }\n    if (metadata \u003d\u003d null) {\n      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n      metadata.parseMetaData();\n      harMetaCache.put(uri, metadata);\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    // decode the name\n    URI underLyingURI \u003d decodeHarURI(name, conf);\n    // we got the right har Path- now check if this is \n    // truly a har filesystem\n    Path harPath \u003d archivePath(\n      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n    if (harPath \u003d\u003d null) { \n      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                           name.toString());\n    }\n    if (fs \u003d\u003d null) {\n      fs \u003d FileSystem.get(underLyingURI, conf);\n    }\n    uri \u003d harPath.toUri();\n    archivePath \u003d new Path(uri.getPath());\n    harAuth \u003d getHarAuth(underLyingURI);\n    //check for the underlying fs containing\n    // the index file\n    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n          \"No index file in \" + harPath);\n    }\n\n    metadata \u003d harMetaCache.get(uri);\n    if (metadata !\u003d null) {\n      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n        // the archive has been overwritten since we last read it\n        // remove the entry from the meta data cache\n        metadata \u003d null;\n        harMetaCache.remove(uri);\n      }\n    }\n    if (metadata \u003d\u003d null) {\n      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n      metadata.parseMetaData();\n      harMetaCache.put(uri, metadata);\n    }\n  }",
      "path": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,44 @@\n+  public void initialize(URI name, Configuration conf) throws IOException {\n+    // decode the name\n+    URI underLyingURI \u003d decodeHarURI(name, conf);\n+    // we got the right har Path- now check if this is \n+    // truly a har filesystem\n+    Path harPath \u003d archivePath(\n+      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n+    if (harPath \u003d\u003d null) { \n+      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n+                           name.toString());\n+    }\n+    if (fs \u003d\u003d null) {\n+      fs \u003d FileSystem.get(underLyingURI, conf);\n+    }\n+    uri \u003d harPath.toUri();\n+    archivePath \u003d new Path(uri.getPath());\n+    harAuth \u003d getHarAuth(underLyingURI);\n+    //check for the underlying fs containing\n+    // the index file\n+    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n+    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n+    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n+      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n+          \"No index file in \" + harPath);\n+    }\n+\n+    metadata \u003d harMetaCache.get(uri);\n+    if (metadata !\u003d null) {\n+      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n+      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n+      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n+          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n+        // the archive has been overwritten since we last read it\n+        // remove the entry from the meta data cache\n+        metadata \u003d null;\n+        harMetaCache.remove(uri);\n+      }\n+    }\n+    if (metadata \u003d\u003d null) {\n+      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n+      metadata.parseMetaData();\n+      harMetaCache.put(uri, metadata);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    // decode the name\n    URI underLyingURI \u003d decodeHarURI(name, conf);\n    // we got the right har Path- now check if this is \n    // truly a har filesystem\n    Path harPath \u003d archivePath(\n      new Path(name.getScheme(), name.getAuthority(), name.getPath()));\n    if (harPath \u003d\u003d null) { \n      throw new IOException(\"Invalid path for the Har Filesystem. \" + \n                           name.toString());\n    }\n    if (fs \u003d\u003d null) {\n      fs \u003d FileSystem.get(underLyingURI, conf);\n    }\n    uri \u003d harPath.toUri();\n    archivePath \u003d new Path(uri.getPath());\n    harAuth \u003d getHarAuth(underLyingURI);\n    //check for the underlying fs containing\n    // the index file\n    Path masterIndexPath \u003d new Path(archivePath, \"_masterindex\");\n    Path archiveIndexPath \u003d new Path(archivePath, \"_index\");\n    if (!fs.exists(masterIndexPath) || !fs.exists(archiveIndexPath)) {\n      throw new IOException(\"Invalid path for the Har Filesystem. \" +\n          \"No index file in \" + harPath);\n    }\n\n    metadata \u003d harMetaCache.get(uri);\n    if (metadata !\u003d null) {\n      FileStatus mStat \u003d fs.getFileStatus(masterIndexPath);\n      FileStatus aStat \u003d fs.getFileStatus(archiveIndexPath);\n      if (mStat.getModificationTime() !\u003d metadata.getMasterIndexTimestamp() ||\n          aStat.getModificationTime() !\u003d metadata.getArchiveIndexTimestamp()) {\n        // the archive has been overwritten since we last read it\n        // remove the entry from the meta data cache\n        metadata \u003d null;\n        harMetaCache.remove(uri);\n      }\n    }\n    if (metadata \u003d\u003d null) {\n      metadata \u003d new HarMetaData(fs, masterIndexPath, archiveIndexPath);\n      metadata.parseMetaData();\n      harMetaCache.put(uri, metadata);\n    }\n  }",
      "path": "mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
    }
  }
}