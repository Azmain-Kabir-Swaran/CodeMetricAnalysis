{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "connectToZooKeeper",
  "functionId": "connectToZooKeeper",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 690,
  "functionEndLine": 710,
  "numCommitsSeen": 67,
  "timeTaken": 2355,
  "changeHistory": [
    "c82745432a962c817a8a7db92bb830fb6af01e33",
    "d5a6e764dc0bc1823661906b50dd80a4c25c9e42",
    "d863f7a1e452ecb26c3cb92bc6c90e552731304b",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e",
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec"
  ],
  "changeHistoryShort": {
    "c82745432a962c817a8a7db92bb830fb6af01e33": "Ymultichange(Yrename,Ybodychange)",
    "d5a6e764dc0bc1823661906b50dd80a4c25c9e42": "Ybodychange",
    "d863f7a1e452ecb26c3cb92bc6c90e552731304b": "Ybodychange",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": "Ymultichange(Yexceptionschange,Ybodychange)",
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7": "Ybodychange",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ybodychange",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c82745432a962c817a8a7db92bb830fb6af01e33": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HADOOP-10980. TestActiveStandbyElector fails occasionally in trunk. Contributed by Eric Badger\n",
      "commitDate": "03/08/16 1:17 PM",
      "commitName": "c82745432a962c817a8a7db92bb830fb6af01e33",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-10980. TestActiveStandbyElector fails occasionally in trunk. Contributed by Eric Badger\n",
          "commitDate": "03/08/16 1:17 PM",
          "commitName": "c82745432a962c817a8a7db92bb830fb6af01e33",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/10/15 1:41 PM",
          "commitNameOld": "0fce5f9a496925f0d53ea6c14318c9b513de9882",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 285.98,
          "commitsBetweenForRepo": 1997,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n+  protected synchronized ZooKeeper connectToZooKeeper() throws IOException,\n       KeeperException {\n     \n     // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n     // may trigger the Connected event immediately. So, if we register the\n     // watcher after constructing ZooKeeper, we may miss that event. Instead,\n     // we construct the watcher first, and have it block any events it receives\n     // before we can set its ZooKeeper reference.\n     watcher \u003d new WatcherWithClientRef();\n-    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n+    ZooKeeper zk \u003d createZooKeeper();\n     watcher.setZooKeeperRef(zk);\n \n     // Wait for the asynchronous success/failure. This may throw an exception\n     // if we don\u0027t connect within the session timeout.\n     watcher.waitForZKConnectionEvent(zkSessionTimeout);\n     \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized ZooKeeper connectToZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it block any events it receives\n    // before we can set its ZooKeeper reference.\n    watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d createZooKeeper();\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "getNewZooKeeper",
            "newValue": "connectToZooKeeper"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10980. TestActiveStandbyElector fails occasionally in trunk. Contributed by Eric Badger\n",
          "commitDate": "03/08/16 1:17 PM",
          "commitName": "c82745432a962c817a8a7db92bb830fb6af01e33",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/10/15 1:41 PM",
          "commitNameOld": "0fce5f9a496925f0d53ea6c14318c9b513de9882",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 285.98,
          "commitsBetweenForRepo": 1997,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n+  protected synchronized ZooKeeper connectToZooKeeper() throws IOException,\n       KeeperException {\n     \n     // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n     // may trigger the Connected event immediately. So, if we register the\n     // watcher after constructing ZooKeeper, we may miss that event. Instead,\n     // we construct the watcher first, and have it block any events it receives\n     // before we can set its ZooKeeper reference.\n     watcher \u003d new WatcherWithClientRef();\n-    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n+    ZooKeeper zk \u003d createZooKeeper();\n     watcher.setZooKeeperRef(zk);\n \n     // Wait for the asynchronous success/failure. This may throw an exception\n     // if we don\u0027t connect within the session timeout.\n     watcher.waitForZKConnectionEvent(zkSessionTimeout);\n     \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized ZooKeeper connectToZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it block any events it receives\n    // before we can set its ZooKeeper reference.\n    watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d createZooKeeper();\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {}
        }
      ]
    },
    "d5a6e764dc0bc1823661906b50dd80a4c25c9e42": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9220. Unnecessary transition to standby in ActiveStandbyElector. Contributed by Tom White and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482401 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/13 8:37 AM",
      "commitName": "d5a6e764dc0bc1823661906b50dd80a4c25c9e42",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "13/05/13 11:43 PM",
      "commitNameOld": "8a4ff65b3cf5c9b2d544733956fe22e1d03aefe4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n       KeeperException {\n     \n     // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n     // may trigger the Connected event immediately. So, if we register the\n     // watcher after constructing ZooKeeper, we may miss that event. Instead,\n     // we construct the watcher first, and have it block any events it receives\n     // before we can set its ZooKeeper reference.\n-    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n+    watcher \u003d new WatcherWithClientRef();\n     ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n     watcher.setZooKeeperRef(zk);\n \n     // Wait for the asynchronous success/failure. This may throw an exception\n     // if we don\u0027t connect within the session timeout.\n     watcher.waitForZKConnectionEvent(zkSessionTimeout);\n     \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it block any events it receives\n    // before we can set its ZooKeeper reference.\n    watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "d863f7a1e452ecb26c3cb92bc6c90e552731304b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9183. Potential deadlock in ActiveStandbyElector.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1431251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/13 2:05 AM",
      "commitName": "d863f7a1e452ecb26c3cb92bc6c90e552731304b",
      "commitAuthor": "Thomas White",
      "commitDateOld": "10/12/12 2:09 PM",
      "commitNameOld": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 30.5,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n       KeeperException {\n     \n     // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n     // may trigger the Connected event immediately. So, if we register the\n     // watcher after constructing ZooKeeper, we may miss that event. Instead,\n-    // we construct the watcher first, and have it queue any events it receives\n+    // we construct the watcher first, and have it block any events it receives\n     // before we can set its ZooKeeper reference.\n     WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n     ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n     watcher.setZooKeeperRef(zk);\n \n     // Wait for the asynchronous success/failure. This may throw an exception\n     // if we don\u0027t connect within the session timeout.\n     watcher.waitForZKConnectionEvent(zkSessionTimeout);\n     \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it block any events it receives\n    // before we can set its ZooKeeper reference.\n    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419831 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 2:09 PM",
      "commitName": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/12 2:09 PM",
          "commitName": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "19/09/12 9:06 PM",
          "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 81.75,
          "commitsBetweenForRepo": 417,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,21 @@\n-  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n-    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n-    zk.register(new WatcherWithClientRef(zk));\n+  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n+      KeeperException {\n+    \n+    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n+    // may trigger the Connected event immediately. So, if we register the\n+    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n+    // we construct the watcher first, and have it queue any events it receives\n+    // before we can set its ZooKeeper reference.\n+    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n+    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n+    watcher.setZooKeeperRef(zk);\n+\n+    // Wait for the asynchronous success/failure. This may throw an exception\n+    // if we don\u0027t connect within the session timeout.\n+    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n+    \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it queue any events it receives\n    // before we can set its ZooKeeper reference.\n    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, KeeperException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/12 2:09 PM",
          "commitName": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "19/09/12 9:06 PM",
          "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 81.75,
          "commitsBetweenForRepo": 417,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,21 @@\n-  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n-    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n-    zk.register(new WatcherWithClientRef(zk));\n+  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n+      KeeperException {\n+    \n+    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n+    // may trigger the Connected event immediately. So, if we register the\n+    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n+    // we construct the watcher first, and have it queue any events it receives\n+    // before we can set its ZooKeeper reference.\n+    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n+    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n+    watcher.setZooKeeperRef(zk);\n+\n+    // Wait for the asynchronous success/failure. This may throw an exception\n+    // if we don\u0027t connect within the session timeout.\n+    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n+    \n     for (ZKAuthInfo auth : zkAuthInfo) {\n       zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n     }\n     return zk;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException,\n      KeeperException {\n    \n    // Unfortunately, the ZooKeeper constructor connects to ZooKeeper and\n    // may trigger the Connected event immediately. So, if we register the\n    // watcher after constructing ZooKeeper, we may miss that event. Instead,\n    // we construct the watcher first, and have it queue any events it receives\n    // before we can set its ZooKeeper reference.\n    WatcherWithClientRef watcher \u003d new WatcherWithClientRef();\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, watcher);\n    watcher.setZooKeeperRef(zk);\n\n    // Wait for the asynchronous success/failure. This may throw an exception\n    // if we don\u0027t connect within the session timeout.\n    watcher.waitForZKConnectionEvent(zkSessionTimeout);\n    \n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {}
        }
      ]
    },
    "30e1b3bba856b2379a0dc1e7450512427d39c5d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8215. Security support for ZK Failover controller. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/12 4:37 PM",
      "commitName": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/03/12 1:30 PM",
      "commitNameOld": "543701387fc0054082a17da15e85e9e8f8025801",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 4.13,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,8 @@\n   protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n     ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n     zk.register(new WatcherWithClientRef(zk));\n+    for (ZKAuthInfo auth : zkAuthInfo) {\n+      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n+    }\n     return zk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n    zk.register(new WatcherWithClientRef(zk));\n    for (ZKAuthInfo auth : zkAuthInfo) {\n      zk.addAuthInfo(auth.getScheme(), auth.getAuth());\n    }\n    return zk;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/03/12 5:05 PM",
      "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,5 @@\n   protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n-    return new ZooKeeper(zkHostPort, zkSessionTimeout, this);\n+    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n+    zk.register(new WatcherWithClientRef(zk));\n+    return zk;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n    ZooKeeper zk \u003d new ZooKeeper(zkHostPort, zkSessionTimeout, null);\n    zk.register(new WatcherWithClientRef(zk));\n    return zk;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7992. Add ZKClient library to facilitate leader election. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1235841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:26 AM",
      "commitName": "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,3 @@\n+  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n+    return new ZooKeeper(zkHostPort, zkSessionTimeout, this);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized ZooKeeper getNewZooKeeper() throws IOException {\n    return new ZooKeeper(zkHostPort, zkSessionTimeout, this);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}