{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAMSimulator.java",
  "functionName": "init",
  "functionId": "init___heartbeatInterval-int__containerList-List__ContainerSimulator____rm-ResourceManager__se-SLSRunner__traceStartTime-long__traceFinishTime-long__user-String__queue-String__isTracked-boolean__oldAppId-String__baselineStartTimeMS-long__amContainerResource-Resource__nodeLabelExpr-String__params-Map__String,String____appIdAMSim-Map__ApplicationId,AMSimulator__",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
  "functionStartLine": 126,
  "functionEndLine": 154,
  "numCommitsSeen": 62,
  "timeTaken": 8463,
  "changeHistory": [
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
    "147df300bf00b5f4ed250426b6ccdd69085466da",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": "Ymultichange(Yparameterchange,Ybodychange)",
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ymultichange(Yparameterchange,Ybodychange)",
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Ymultichange(Yparameterchange,Ybodychange)",
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": "Ymultichange(Yparameterchange,Ybodychange)",
    "147df300bf00b5f4ed250426b6ccdd69085466da": "Ymultichange(Yparameterchange,Ybodychange)",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ymultichange(Yparameterchange,Ybodychange)",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9293. Optimize MockAMLauncher event handling. Contributed by Bibin A Chundatt.\n",
      "commitDate": "14/02/19 9:26 AM",
      "commitName": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
      "commitAuthor": "bibinchundatt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9293. Optimize MockAMLauncher event handling. Contributed by Bibin A Chundatt.\n",
          "commitDate": "14/02/19 9:26 AM",
          "commitName": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "31/07/18 9:36 AM",
          "commitNameOld": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 198.03,
          "commitsBetweenForRepo": 1577,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n       Resource amContainerResource, String nodeLabelExpr,\n-      Map\u003cString, String\u003e params) {\n-    super.init(heartbeatInterval, containerList, rm, se,\n-        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n+      Map\u003cString, String\u003e params, Map\u003cApplicationId, AMSimulator\u003e appIdAMSim) {\n+    super.init(heartbeatInterval, containerList, rm, se, traceStartTime,\n+        traceFinishTime, user, queue, isTracked, oldAppId, baselineStartTimeMS,\n+        amContainerResource, nodeLabelExpr, params, appIdAMSim);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, String nodeLabelExpr,\n      Map\u003cString, String\u003e params, Map\u003cApplicationId, AMSimulator\u003e appIdAMSim) {\n    super.init(heartbeatInterval, containerList, rm, se, traceStartTime,\n        traceFinishTime, user, queue, isTracked, oldAppId, baselineStartTimeMS,\n        amContainerResource, nodeLabelExpr, params, appIdAMSim);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource, nodeLabelExpr-String, params-Map\u003cString,String\u003e]",
            "newValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource, nodeLabelExpr-String, params-Map\u003cString,String\u003e, appIdAMSim-Map\u003cApplicationId,AMSimulator\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9293. Optimize MockAMLauncher event handling. Contributed by Bibin A Chundatt.\n",
          "commitDate": "14/02/19 9:26 AM",
          "commitName": "134ae8fc8045e2ae1ed7ca54df95f14ffc863d09",
          "commitAuthor": "bibinchundatt",
          "commitDateOld": "31/07/18 9:36 AM",
          "commitNameOld": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 198.03,
          "commitsBetweenForRepo": 1577,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n       Resource amContainerResource, String nodeLabelExpr,\n-      Map\u003cString, String\u003e params) {\n-    super.init(heartbeatInterval, containerList, rm, se,\n-        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n+      Map\u003cString, String\u003e params, Map\u003cApplicationId, AMSimulator\u003e appIdAMSim) {\n+    super.init(heartbeatInterval, containerList, rm, se, traceStartTime,\n+        traceFinishTime, user, queue, isTracked, oldAppId, baselineStartTimeMS,\n+        amContainerResource, nodeLabelExpr, params, appIdAMSim);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, String nodeLabelExpr,\n      Map\u003cString, String\u003e params, Map\u003cApplicationId, AMSimulator\u003e appIdAMSim) {\n    super.init(heartbeatInterval, containerList, rm, se, traceStartTime,\n        traceFinishTime, user, queue, isTracked, oldAppId, baselineStartTimeMS,\n        amContainerResource, nodeLabelExpr, params, appIdAMSim);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "20/02/18 5:00 PM",
          "commitNameOld": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthorOld": "Carlo Curino",
          "daysBetweenCommits": 160.65,
          "commitsBetweenForRepo": 1749,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n-      Resource amContainerResource, Map\u003cString, String\u003e params) {\n+      Resource amContainerResource, String nodeLabelExpr,\n+      Map\u003cString, String\u003e params) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource, params);\n+        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, String nodeLabelExpr,\n      Map\u003cString, String\u003e params) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource, params-Map\u003cString,String\u003e]",
            "newValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource, nodeLabelExpr-String, params-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
          "commitDate": "31/07/18 9:36 AM",
          "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "20/02/18 5:00 PM",
          "commitNameOld": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthorOld": "Carlo Curino",
          "daysBetweenCommits": 160.65,
          "commitsBetweenForRepo": 1749,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n-      Resource amContainerResource, Map\u003cString, String\u003e params) {\n+      Resource amContainerResource, String nodeLabelExpr,\n+      Map\u003cString, String\u003e params) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource, params);\n+        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, String nodeLabelExpr,\n      Map\u003cString, String\u003e params) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource, nodeLabelExpr, params);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "25/01/18 1:06 PM",
          "commitNameOld": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 26.16,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n-      Resource amContainerResource) {\n+      Resource amContainerResource, Map\u003cString, String\u003e params) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource);\n+        baselineStartTimeMS, amContainerResource, params);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, Map\u003cString, String\u003e params) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource, params);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource]",
            "newValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource, params-Map\u003cString,String\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
          "commitDate": "20/02/18 5:00 PM",
          "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
          "commitAuthor": "Carlo Curino",
          "commitDateOld": "25/01/18 1:06 PM",
          "commitNameOld": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 26.16,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue,\n       boolean isTracked, String oldAppId, long baselineStartTimeMS,\n-      Resource amContainerResource) {\n+      Resource amContainerResource, Map\u003cString, String\u003e params) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        baselineStartTimeMS, amContainerResource);\n+        baselineStartTimeMS, amContainerResource, params);\n     amtype \u003d \"mapreduce\";\n \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource, Map\u003cString, String\u003e params) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource, params);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
      "commitDate": "25/01/18 1:06 PM",
      "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
      "commitAuthor": "Yufei Gu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
          "commitDate": "25/01/18 1:06 PM",
          "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "30/06/17 5:03 PM",
          "commitNameOld": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 208.88,
          "commitsBetweenForRepo": 1509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n-      long traceStartTime, long traceFinishTime, String user, String queue, \n-      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n-      long baselineStartTimeMS, Resource amContainerResource) {\n+      long traceStartTime, long traceFinishTime, String user, String queue,\n+      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n+      Resource amContainerResource) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        rr, baselineStartTimeMS, amContainerResource);\n+        baselineStartTimeMS, amContainerResource);\n     amtype \u003d \"mapreduce\";\n-    \n+\n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, rr-ReservationSubmissionRequest, baselineStartTimeMS-long, amContainerResource-Resource]",
            "newValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, baselineStartTimeMS-long, amContainerResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
          "commitDate": "25/01/18 1:06 PM",
          "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "30/06/17 5:03 PM",
          "commitNameOld": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 208.88,
          "commitsBetweenForRepo": 1509,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n   public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n-      long traceStartTime, long traceFinishTime, String user, String queue, \n-      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n-      long baselineStartTimeMS, Resource amContainerResource) {\n+      long traceStartTime, long traceFinishTime, String user, String queue,\n+      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n+      Resource amContainerResource) {\n     super.init(heartbeatInterval, containerList, rm, se,\n         traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n-        rr, baselineStartTimeMS, amContainerResource);\n+        baselineStartTimeMS, amContainerResource);\n     amtype \u003d \"mapreduce\";\n-    \n+\n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue,\n      boolean isTracked, String oldAppId, long baselineStartTimeMS,\n      Resource amContainerResource) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        baselineStartTimeMS, amContainerResource);\n    amtype \u003d \"mapreduce\";\n\n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "147df300bf00b5f4ed250426b6ccdd69085466da": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "30/06/17 5:03 PM",
      "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
          "commitDate": "30/06/17 5:03 PM",
          "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 10.82,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(int id, int heartbeatInterval,\n+  public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n       boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n-      long baselineStartTimeMS) {\n-    super.init(id, heartbeatInterval, containerList, rm, se, \n-              traceStartTime, traceFinishTime, user, queue,\n-              isTracked, oldAppId, rr, baselineStartTimeMS);\n+      long baselineStartTimeMS, Resource amContainerResource) {\n+    super.init(heartbeatInterval, containerList, rm, se,\n+        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n+        rr, baselineStartTimeMS, amContainerResource);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n      long baselineStartTimeMS, Resource amContainerResource) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        rr, baselineStartTimeMS, amContainerResource);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[id-int, heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, rr-ReservationSubmissionRequest, baselineStartTimeMS-long]",
            "newValue": "[heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, rr-ReservationSubmissionRequest, baselineStartTimeMS-long, amContainerResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
          "commitDate": "30/06/17 5:03 PM",
          "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 10.82,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  public void init(int id, int heartbeatInterval,\n+  public void init(int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n       boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n-      long baselineStartTimeMS) {\n-    super.init(id, heartbeatInterval, containerList, rm, se, \n-              traceStartTime, traceFinishTime, user, queue,\n-              isTracked, oldAppId, rr, baselineStartTimeMS);\n+      long baselineStartTimeMS, Resource amContainerResource) {\n+    super.init(heartbeatInterval, containerList, rm, se,\n+        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n+        rr, baselineStartTimeMS, amContainerResource);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(\"Added new job with {} mapper and {} reducers\",\n         allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n      long baselineStartTimeMS, Resource amContainerResource) {\n    super.init(heartbeatInterval, containerList, rm, se,\n        traceStartTime, traceFinishTime, user, queue, isTracked, oldAppId,\n        rr, baselineStartTimeMS, amContainerResource);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "20/04/17 9:54 PM",
      "commitNameOld": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 59.97,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public void init(int id, int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n       boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n       long baselineStartTimeMS) {\n     super.init(id, heartbeatInterval, containerList, rm, se, \n               traceStartTime, traceFinishTime, user, queue,\n               isTracked, oldAppId, rr, baselineStartTimeMS);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n-    LOG.info(MessageFormat\n-        .format(\"Added new job with {0} mapper and {1} reducers\",\n-            allMaps.size(), allReduces.size()));\n+    LOG.info(\"Added new job with {} mapper and {} reducers\",\n+        allMaps.size(), allReduces.size());\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(int id, int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n      long baselineStartTimeMS) {\n    super.init(id, heartbeatInterval, containerList, rm, se, \n              traceStartTime, traceFinishTime, user, queue,\n              isTracked, oldAppId, rr, baselineStartTimeMS);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(\"Added new job with {} mapper and {} reducers\",\n        allMaps.size(), allReduces.size());\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "24/02/17 8:09 AM",
          "commitNameOld": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 55.53,
          "commitsBetweenForRepo": 331,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public void init(int id, int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n-      boolean isTracked, String oldAppId) {\n+      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n+      long baselineStartTimeMS) {\n     super.init(id, heartbeatInterval, containerList, rm, se, \n               traceStartTime, traceFinishTime, user, queue,\n-              isTracked, oldAppId);\n+              isTracked, oldAppId, rr, baselineStartTimeMS);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(MessageFormat\n         .format(\"Added new job with {0} mapper and {1} reducers\",\n             allMaps.size(), allReduces.size()));\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int id, int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n      long baselineStartTimeMS) {\n    super.init(id, heartbeatInterval, containerList, rm, se, \n              traceStartTime, traceFinishTime, user, queue,\n              isTracked, oldAppId, rr, baselineStartTimeMS);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(MessageFormat\n        .format(\"Added new job with {0} mapper and {1} reducers\",\n            allMaps.size(), allReduces.size()));\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {
            "oldValue": "[id-int, heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String]",
            "newValue": "[id-int, heartbeatInterval-int, containerList-List\u003cContainerSimulator\u003e, rm-ResourceManager, se-SLSRunner, traceStartTime-long, traceFinishTime-long, user-String, queue-String, isTracked-boolean, oldAppId-String, rr-ReservationSubmissionRequest, baselineStartTimeMS-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "24/02/17 8:09 AM",
          "commitNameOld": "b32ffa2753e83615b980721b6067fcc35ce54372",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 55.53,
          "commitsBetweenForRepo": 331,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public void init(int id, int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n-      boolean isTracked, String oldAppId) {\n+      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n+      long baselineStartTimeMS) {\n     super.init(id, heartbeatInterval, containerList, rm, se, \n               traceStartTime, traceFinishTime, user, queue,\n-              isTracked, oldAppId);\n+              isTracked, oldAppId, rr, baselineStartTimeMS);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n         allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n         allReduces.add(cs);\n       }\n     }\n \n     LOG.info(MessageFormat\n         .format(\"Added new job with {0} mapper and {1} reducers\",\n             allMaps.size(), allReduces.size()));\n \n     mapTotal \u003d allMaps.size();\n     reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(int id, int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId, ReservationSubmissionRequest rr,\n      long baselineStartTimeMS) {\n    super.init(id, heartbeatInterval, containerList, rm, se, \n              traceStartTime, traceFinishTime, user, queue,\n              isTracked, oldAppId, rr, baselineStartTimeMS);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(MessageFormat\n        .format(\"Added new job with {0} mapper and {1} reducers\",\n            allMaps.size(), allReduces.size()));\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/09/14 3:13 PM",
      "commitNameOld": "28d99db99236ff2a6e4a605802820e2b512225f9",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 898.75,
      "commitsBetweenForRepo": 6750,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public void init(int id, int heartbeatInterval,\n       List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n       long traceStartTime, long traceFinishTime, String user, String queue, \n       boolean isTracked, String oldAppId) {\n     super.init(id, heartbeatInterval, containerList, rm, se, \n               traceStartTime, traceFinishTime, user, queue,\n               isTracked, oldAppId);\n     amtype \u003d \"mapreduce\";\n     \n     // get map/reduce tasks\n     for (ContainerSimulator cs : containerList) {\n       if (cs.getType().equals(\"map\")) {\n         cs.setPriority(PRIORITY_MAP);\n-        pendingMaps.add(cs);\n+        allMaps.add(cs);\n       } else if (cs.getType().equals(\"reduce\")) {\n         cs.setPriority(PRIORITY_REDUCE);\n-        pendingReduces.add(cs);\n+        allReduces.add(cs);\n       }\n     }\n-    allMaps.addAll(pendingMaps);\n-    allReduces.addAll(pendingReduces);\n-    mapTotal \u003d pendingMaps.size();\n-    reduceTotal \u003d pendingReduces.size();\n+\n+    LOG.info(MessageFormat\n+        .format(\"Added new job with {0} mapper and {1} reducers\",\n+            allMaps.size(), allReduces.size()));\n+\n+    mapTotal \u003d allMaps.size();\n+    reduceTotal \u003d allReduces.size();\n     totalContainers \u003d mapTotal + reduceTotal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(int id, int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId) {\n    super.init(id, heartbeatInterval, containerList, rm, se, \n              traceStartTime, traceFinishTime, user, queue,\n              isTracked, oldAppId);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        allMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        allReduces.add(cs);\n      }\n    }\n\n    LOG.info(MessageFormat\n        .format(\"Added new job with {0} mapper and {1} reducers\",\n            allMaps.size(), allReduces.size()));\n\n    mapTotal \u003d allMaps.size();\n    reduceTotal \u003d allReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,25 @@\n+  public void init(int id, int heartbeatInterval,\n+      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n+      long traceStartTime, long traceFinishTime, String user, String queue, \n+      boolean isTracked, String oldAppId) {\n+    super.init(id, heartbeatInterval, containerList, rm, se, \n+              traceStartTime, traceFinishTime, user, queue,\n+              isTracked, oldAppId);\n+    amtype \u003d \"mapreduce\";\n+    \n+    // get map/reduce tasks\n+    for (ContainerSimulator cs : containerList) {\n+      if (cs.getType().equals(\"map\")) {\n+        cs.setPriority(PRIORITY_MAP);\n+        pendingMaps.add(cs);\n+      } else if (cs.getType().equals(\"reduce\")) {\n+        cs.setPriority(PRIORITY_REDUCE);\n+        pendingReduces.add(cs);\n+      }\n+    }\n+    allMaps.addAll(pendingMaps);\n+    allReduces.addAll(pendingReduces);\n+    mapTotal \u003d pendingMaps.size();\n+    reduceTotal \u003d pendingReduces.size();\n+    totalContainers \u003d mapTotal + reduceTotal;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(int id, int heartbeatInterval,\n      List\u003cContainerSimulator\u003e containerList, ResourceManager rm, SLSRunner se,\n      long traceStartTime, long traceFinishTime, String user, String queue, \n      boolean isTracked, String oldAppId) {\n    super.init(id, heartbeatInterval, containerList, rm, se, \n              traceStartTime, traceFinishTime, user, queue,\n              isTracked, oldAppId);\n    amtype \u003d \"mapreduce\";\n    \n    // get map/reduce tasks\n    for (ContainerSimulator cs : containerList) {\n      if (cs.getType().equals(\"map\")) {\n        cs.setPriority(PRIORITY_MAP);\n        pendingMaps.add(cs);\n      } else if (cs.getType().equals(\"reduce\")) {\n        cs.setPriority(PRIORITY_REDUCE);\n        pendingReduces.add(cs);\n      }\n    }\n    allMaps.addAll(pendingMaps);\n    allReduces.addAll(pendingReduces);\n    mapTotal \u003d pendingMaps.size();\n    reduceTotal \u003d pendingReduces.size();\n    totalContainers \u003d mapTotal + reduceTotal;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java"
    }
  }
}