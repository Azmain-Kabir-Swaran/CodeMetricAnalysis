{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TryManyReservationAgents.java",
  "functionName": "createReservation",
  "functionId": "createReservation___reservationId-ReservationId__user-String__plan-Plan__contract-ReservationDefinition",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/TryManyReservationAgents.java",
  "functionStartLine": 46,
  "functionEndLine": 74,
  "numCommitsSeen": 2,
  "timeTaken": 947,
  "changeHistory": [
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,29 @@\n+  public boolean createReservation(ReservationId reservationId, String user,\n+      Plan plan, ReservationDefinition contract) throws PlanningException {\n+\n+    // Save the planning exception\n+    PlanningException planningException \u003d null;\n+\n+    // Try all of the algorithms, in order\n+    for (ReservationAgent alg : algs) {\n+\n+      try {\n+        if (alg.createReservation(reservationId, user, plan, contract)) {\n+          return true;\n+        }\n+      } catch (PlanningException e) {\n+        planningException \u003d e;\n+      }\n+\n+    }\n+\n+    // If all of the algorithms failed and one of the algorithms threw an\n+    // exception, throw the last planning exception\n+    if (planningException !\u003d null) {\n+      throw planningException;\n+    }\n+\n+    // If all of the algorithms failed, return false\n+    return false;\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean createReservation(ReservationId reservationId, String user,\n      Plan plan, ReservationDefinition contract) throws PlanningException {\n\n    // Save the planning exception\n    PlanningException planningException \u003d null;\n\n    // Try all of the algorithms, in order\n    for (ReservationAgent alg : algs) {\n\n      try {\n        if (alg.createReservation(reservationId, user, plan, contract)) {\n          return true;\n        }\n      } catch (PlanningException e) {\n        planningException \u003d e;\n      }\n\n    }\n\n    // If all of the algorithms failed and one of the algorithms threw an\n    // exception, throw the last planning exception\n    if (planningException !\u003d null) {\n      throw planningException;\n    }\n\n    // If all of the algorithms failed, return false\n    return false;\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/TryManyReservationAgents.java"
    }
  }
}