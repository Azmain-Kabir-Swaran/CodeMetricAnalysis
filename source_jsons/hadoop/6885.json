{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeDirectory.java",
  "functionName": "cleanSubtreeRecursively",
  "functionId": "cleanSubtreeRecursively___reclaimContext-ReclaimContext__snapshot-int(modifiers-final)__prior-int__excludedNodes-Map__INode,INode__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
  "functionStartLine": 816,
  "functionEndLine": 832,
  "numCommitsSeen": 806,
  "timeTaken": 7453,
  "changeHistory": [
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "4536399d47f6c061e149e2504600804a0f1e093d",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b"
  ],
  "changeHistoryShort": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4536399d47f6c061e149e2504600804a0f1e093d": "Ymultichange(Yparameterchange,Ybodychange)",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ymultichange(Yparameterchange,Ybodychange)",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,17 @@\n-  public QuotaCounts cleanSubtreeRecursively(\n+  public void cleanSubtreeRecursively(\n       ReclaimContext reclaimContext, final int snapshot, int prior,\n       final Map\u003cINode, INode\u003e excludedNodes) {\n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n-          \u0026\u0026 excludedNodes.containsKey(child)) {\n-        continue;\n-      } else {\n-        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n-        counts.add(childCounts);\n+      if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID || excludedNodes \u003d\u003d null ||\n+          !excludedNodes.containsKey(child)) {\n+        child.cleanSubtree(reclaimContext, snapshot, prior);\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanSubtreeRecursively(\n      ReclaimContext reclaimContext, final int snapshot, int prior,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID || excludedNodes \u003d\u003d null ||\n          !excludedNodes.containsKey(child)) {\n        child.cleanSubtree(reclaimContext, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "QuotaCounts",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,17 @@\n-  public QuotaCounts cleanSubtreeRecursively(\n+  public void cleanSubtreeRecursively(\n       ReclaimContext reclaimContext, final int snapshot, int prior,\n       final Map\u003cINode, INode\u003e excludedNodes) {\n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n-          \u0026\u0026 excludedNodes.containsKey(child)) {\n-        continue;\n-      } else {\n-        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n-        counts.add(childCounts);\n+      if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID || excludedNodes \u003d\u003d null ||\n+          !excludedNodes.containsKey(child)) {\n+        child.cleanSubtree(reclaimContext, snapshot, prior);\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanSubtreeRecursively(\n      ReclaimContext reclaimContext, final int snapshot, int prior,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot \u003d\u003d Snapshot.CURRENT_STATE_ID || excludedNodes \u003d\u003d null ||\n          !excludedNodes.containsKey(child)) {\n        child.cleanSubtree(reclaimContext, snapshot, prior);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "4536399d47f6c061e149e2504600804a0f1e093d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
      "commitDate": "09/05/15 10:51 PM",
      "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,22 @@\n   public QuotaCounts cleanSubtreeRecursively(\n-      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n+      ReclaimContext reclaimContext, final int snapshot, int prior,\n       final Map\u003cINode, INode\u003e excludedNodes) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n-        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n-            collectedBlocks, removedINodes, removedUCFiles);\n+        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(\n      ReclaimContext reclaimContext, final int snapshot, int prior,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e, excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]",
            "newValue": "[reclaimContext-ReclaimContext, snapshot-int(modifiers-final), prior-int, excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,22 @@\n   public QuotaCounts cleanSubtreeRecursively(\n-      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n+      ReclaimContext reclaimContext, final int snapshot, int prior,\n       final Map\u003cINode, INode\u003e excludedNodes) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n-        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n-            collectedBlocks, removedINodes, removedUCFiles);\n+        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(\n      ReclaimContext reclaimContext, final int snapshot, int prior,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(reclaimContext, snapshot, prior);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:04 PM",
      "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/05/15 10:03 AM",
          "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n-      final int snapshot,\n-      int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n+  public QuotaCounts cleanSubtreeRecursively(\n+      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n+      final Map\u003cINode, INode\u003e excludedNodes) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n-            collectedBlocks, removedINodes);\n+            collectedBlocks, removedINodes, removedUCFiles);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(\n      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n            collectedBlocks, removedINodes, removedUCFiles);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite(modifiers-final), snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), removedUCFiles-List\u003cLong\u003e, excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
          "commitDate": "08/05/15 11:04 PM",
          "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "02/05/15 10:03 AM",
          "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 6.54,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n-      final int snapshot,\n-      int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n+  public QuotaCounts cleanSubtreeRecursively(\n+      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n+      final Map\u003cINode, INode\u003e excludedNodes) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n-            collectedBlocks, removedINodes);\n+            collectedBlocks, removedINodes, removedUCFiles);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(\n      final BlockStoragePolicySuite bsps, final int snapshot, int prior,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, List\u003cLong\u003e removedUCFiles,\n      final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n            collectedBlocks, removedINodes, removedUCFiles);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n+  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n-        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n+        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n             collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n      final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite(modifiers-final), snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n+  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n-        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n+        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n             collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n      final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "Quota.Counts",
            "newValue": "QuotaCounts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n+  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n-        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n+        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n             collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts cleanSubtreeRecursively(final BlockStoragePolicySuite bsps,\n      final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        QuotaCounts childCounts \u003d child.cleanSubtree(bsps, snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n-      final boolean countDiffChange) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-            collectedBlocks, removedINodes, countDiffChange);\n+            collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]",
            "newValue": "[snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n-      final boolean countDiffChange) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-            collectedBlocks, removedINodes, countDiffChange);\n+            collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/12/14 11:05 PM",
          "commitNameOld": "50ae1a6664a92619aa683d2a864d0da9fb4af026",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 41.73,
          "commitsBetweenForRepo": 229,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n       int prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n-      final boolean countDiffChange) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n     int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-            collectedBlocks, removedINodes, countDiffChange);\n+            collectedBlocks, removedINodes);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes) {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n+      int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n       final boolean countDiffChange) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n-    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n+    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n+        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n+      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n             collectedBlocks, removedINodes, countDiffChange);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n      final boolean countDiffChange) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes, countDiffChange);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]",
            "newValue": "[snapshot-int(modifiers-final), prior-int, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n+      int prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n       final boolean countDiffChange) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // DirectoryWithSnapshotFeature)\n-    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n+    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n+        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n+      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n             collectedBlocks, removedINodes, countDiffChange);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final int snapshot,\n      int prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n      final boolean countDiffChange) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    int s \u003d snapshot !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 prior !\u003d Snapshot.NO_SNAPSHOT_ID ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d Snapshot.CURRENT_STATE_ID \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes, countDiffChange);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/12/13 10:26 AM",
      "commitNameOld": "5fd7230671bb3d90081d4138c364c3f65b35cdbc",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n       final boolean countDiffChange) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n-    // INodeDirectoryWithSnapshot#cleanSubtree)\n+    // DirectoryWithSnapshotFeature)\n     Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n           \u0026\u0026 excludedNodes.containsKey(child)) {\n         continue;\n       } else {\n         Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n             collectedBlocks, removedINodes, countDiffChange);\n         counts.add(childCounts);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n      final boolean countDiffChange) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // DirectoryWithSnapshotFeature)\n    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes, countDiffChange);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/05/13 11:48 AM",
          "commitNameOld": "424b270c94297b00a850e7a821163b9802edc7ae",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 31.06,
          "commitsBetweenForRepo": 191,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n+      final boolean countDiffChange) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // INodeDirectoryWithSnapshot#cleanSubtree)\n     Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-          collectedBlocks, removedINodes);\n-      counts.add(childCounts);\n+      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n+          \u0026\u0026 excludedNodes.containsKey(child)) {\n+        continue;\n+      } else {\n+        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n+            collectedBlocks, removedINodes, countDiffChange);\n+        counts.add(childCounts);\n+      }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n      final boolean countDiffChange) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // INodeDirectoryWithSnapshot#cleanSubtree)\n    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes, countDiffChange);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), excludedNodes-Map\u003cINode,INode\u003e(modifiers-final), countDiffChange-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "06/05/13 11:48 AM",
          "commitNameOld": "424b270c94297b00a850e7a821163b9802edc7ae",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 31.06,
          "commitsBetweenForRepo": 191,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,23 @@\n   public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n       Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n+      final boolean countDiffChange) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // INodeDirectoryWithSnapshot#cleanSubtree)\n     Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n-      Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-          collectedBlocks, removedINodes);\n-      counts.add(childCounts);\n+      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n+          \u0026\u0026 excludedNodes.containsKey(child)) {\n+        continue;\n+      } else {\n+        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n+            collectedBlocks, removedINodes, countDiffChange);\n+        counts.add(childCounts);\n+      }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, final Map\u003cINode, INode\u003e excludedNodes, \n      final boolean countDiffChange) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // INodeDirectoryWithSnapshot#cleanSubtree)\n    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      if (snapshot !\u003d null \u0026\u0026 excludedNodes !\u003d null\n          \u0026\u0026 excludedNodes.containsKey(child)) {\n        continue;\n      } else {\n        Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n            collectedBlocks, removedINodes, countDiffChange);\n        counts.add(childCounts);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 5:00 PM",
      "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/04/13 3:13 PM",
          "commitNameOld": "43bdc22e9207a74678665de5f109dd7e56fe979a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)\n-      throws QuotaExceededException {\n+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // INodeDirectoryWithSnapshot#cleanSubtree)\n     Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-          collectedBlocks);\n+          collectedBlocks, removedINodes);\n       counts.add(childCounts);\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // INodeDirectoryWithSnapshot#cleanSubtree)\n    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n          collectedBlocks, removedINodes);\n      counts.add(childCounts);\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/04/13 3:13 PM",
          "commitNameOld": "43bdc22e9207a74678665de5f109dd7e56fe979a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n-      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks)\n-      throws QuotaExceededException {\n+      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     // in case of deletion snapshot, since this call happens after we modify\n     // the diff list, the snapshot to be deleted has been combined or renamed\n     // to its latest previous snapshot. (besides, we also need to consider nodes\n     // created after prior but before snapshot. this will be done in \n     // INodeDirectoryWithSnapshot#cleanSubtree)\n     Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n     for (INode child : getChildrenList(s)) {\n       Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n-          collectedBlocks);\n+          collectedBlocks, removedINodes);\n       counts.add(childCounts);\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts cleanSubtreeRecursively(final Snapshot snapshot,\n      Snapshot prior, final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) throws QuotaExceededException {\n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    // in case of deletion snapshot, since this call happens after we modify\n    // the diff list, the snapshot to be deleted has been combined or renamed\n    // to its latest previous snapshot. (besides, we also need to consider nodes\n    // created after prior but before snapshot. this will be done in \n    // INodeDirectoryWithSnapshot#cleanSubtree)\n    Snapshot s \u003d snapshot !\u003d null \u0026\u0026 prior !\u003d null ? prior : snapshot;\n    for (INode child : getChildrenList(s)) {\n      Quota.Counts childCounts \u003d child.cleanSubtree(snapshot, prior,\n          collectedBlocks, removedINodes);\n      counts.add(childCounts);\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}