{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HsJobBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
  "functionStartLine": 68,
  "functionEndLine": 218,
  "numCommitsSeen": 21,
  "timeTaken": 3747,
  "changeHistory": [
    "d5e69d89942fd5dcfafd56bf653565557ff85501",
    "88cbe57c069a1d2dd3bfb32e3ad742566470a10b",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "0881ed3fc313abda2896d3f26769690f5ba37346",
    "12fa4ec141f8d0cb105b6f60c3739a4b26890fd5",
    "ccbba4a4deb8ade54a04137c993526e461bcb46e",
    "e8302071ff16247a3d0cfc2dcca02da1bbf4db18",
    "89ded89e86e5d9a634d92a5d8a7c889744d97f94",
    "5e337149e39b10dd0badb1caea6977b5a1f6ebec",
    "ee5351bf22e113d39db3839432bc7d6c743cc736",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
    "4bca22005f48f426b9bc7cf36d435ead470a2590",
    "358eda0bfaaf24f2ff4b2ef9967a370ddcb0a336",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f",
    "be32d25c546a7d4f98604e142940c483213b485b"
  ],
  "changeHistoryShort": {
    "d5e69d89942fd5dcfafd56bf653565557ff85501": "Ybodychange",
    "88cbe57c069a1d2dd3bfb32e3ad742566470a10b": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "0881ed3fc313abda2896d3f26769690f5ba37346": "Ybodychange",
    "12fa4ec141f8d0cb105b6f60c3739a4b26890fd5": "Ybodychange",
    "ccbba4a4deb8ade54a04137c993526e461bcb46e": "Ybodychange",
    "e8302071ff16247a3d0cfc2dcca02da1bbf4db18": "Ybodychange",
    "89ded89e86e5d9a634d92a5d8a7c889744d97f94": "Ybodychange",
    "5e337149e39b10dd0badb1caea6977b5a1f6ebec": "Ybodychange",
    "ee5351bf22e113d39db3839432bc7d6c743cc736": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Ybodychange",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": "Ybodychange",
    "4bca22005f48f426b9bc7cf36d435ead470a2590": "Ybodychange",
    "358eda0bfaaf24f2ff4b2ef9967a370ddcb0a336": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ybodychange",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": "Ybodychange",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": "Ybodychange",
    "be32d25c546a7d4f98604e142940c483213b485b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5e69d89942fd5dcfafd56bf653565557ff85501": {
      "type": "Ybodychange",
      "commitMessage": "MapReduce JHS should honor yarn.webapp.filter-entity-list-by-user(addendum). Contributed by  Sunil Govindan.\n",
      "commitDate": "01/06/18 8:57 PM",
      "commitName": "d5e69d89942fd5dcfafd56bf653565557ff85501",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "28/05/18 1:35 AM",
      "commitNameOld": "88cbe57c069a1d2dd3bfb32e3ad742566470a10b",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 4.81,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,158 +1,151 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.p().__(\"Sorry, \", jid, \" not found.\").__();\n       return;\n     }\n-    ugi \u003d getCallerUGI();\n-    if (isFilterAppListByUserEnabled \u0026\u0026 ugi !\u003d null\n-        \u0026\u0026 !j.checkAccess(ugi, JobACL.VIEW_JOB)) {\n-      html.p().__(\"Sorry, \", jid, \" could not be viewed for \u0027\",\n-          ugi.getUserName(), \"\u0027.\").__();\n-      return;\n-    }\n     if(j instanceof UnparsedJob) {\n       final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n       UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n       html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n           .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n               \" will not be loaded.\").__();\n       html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n           + \" to view large jobs or adjust the property \" +\n           JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         __(\"Job Name:\", job.getName()).\n         __(\"User Name:\", job.getUserName()).\n         __(\"Queue:\", job.getQueueName()).\n         __(\"State:\", job.getState()).\n         __(\"Uberized:\", job.isUber()).\n         __(\"Submitted:\", new Date(job.getSubmitTime())).\n         __(\"Started:\", job.getStartTimeStr()).\n         __(\"Finished:\", new Date(job.getFinishTime())).\n         __(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n         __(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n             __().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             __();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress()).__().\n               td().a(\".logslink\", url(attempt.getLogsLink()),\n                       \"logs\").__().\n                 __();\n           }\n           table.__();\n           div.__();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\").__().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n           .__().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\").__().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts())).__().\n             __().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts())).__().\n             __().\n             __().\n             __();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.p().__(\"Sorry, \", jid, \" not found.\").__();\n      return;\n    }\n    if(j instanceof UnparsedJob) {\n      final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n      UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n      html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n          .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n              \" will not be loaded.\").__();\n      html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n          + \" to view large jobs or adjust the property \" +\n          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        __(\"Job Name:\", job.getName()).\n        __(\"User Name:\", job.getUserName()).\n        __(\"Queue:\", job.getQueueName()).\n        __(\"State:\", job.getState()).\n        __(\"Uberized:\", job.isUber()).\n        __(\"Submitted:\", new Date(job.getSubmitTime())).\n        __(\"Started:\", job.getStartTimeStr()).\n        __(\"Finished:\", new Date(job.getFinishTime())).\n        __(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n        __(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n            __().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            __();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress()).__().\n              td().a(\".logslink\", url(attempt.getLogsLink()),\n                      \"logs\").__().\n                __();\n          }\n          table.__();\n          div.__();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\").__().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n          .__().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\").__().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts())).__().\n            __().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts())).__().\n            __().\n            __().\n            __();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "88cbe57c069a1d2dd3bfb32e3ad742566470a10b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7097. MapReduce JHS should honor yarn.webapp.filter-entity-list-by-user. Contributed by  Sunil Govindan.\n",
      "commitDate": "28/05/18 1:35 AM",
      "commitName": "88cbe57c069a1d2dd3bfb32e3ad742566470a10b",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 304.35,
      "commitsBetweenForRepo": 2883,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,151 +1,158 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.p().__(\"Sorry, \", jid, \" not found.\").__();\n       return;\n     }\n+    ugi \u003d getCallerUGI();\n+    if (isFilterAppListByUserEnabled \u0026\u0026 ugi !\u003d null\n+        \u0026\u0026 !j.checkAccess(ugi, JobACL.VIEW_JOB)) {\n+      html.p().__(\"Sorry, \", jid, \" could not be viewed for \u0027\",\n+          ugi.getUserName(), \"\u0027.\").__();\n+      return;\n+    }\n     if(j instanceof UnparsedJob) {\n       final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n       UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n       html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n           .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n               \" will not be loaded.\").__();\n       html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n           + \" to view large jobs or adjust the property \" +\n           JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         __(\"Job Name:\", job.getName()).\n         __(\"User Name:\", job.getUserName()).\n         __(\"Queue:\", job.getQueueName()).\n         __(\"State:\", job.getState()).\n         __(\"Uberized:\", job.isUber()).\n         __(\"Submitted:\", new Date(job.getSubmitTime())).\n         __(\"Started:\", job.getStartTimeStr()).\n         __(\"Finished:\", new Date(job.getFinishTime())).\n         __(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n         __(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n             __().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             __();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress()).__().\n               td().a(\".logslink\", url(attempt.getLogsLink()),\n                       \"logs\").__().\n                 __();\n           }\n           table.__();\n           div.__();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\").__().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n           .__().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\").__().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts())).__().\n             __().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts())).__().\n             __().\n             __().\n             __();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.p().__(\"Sorry, \", jid, \" not found.\").__();\n      return;\n    }\n    ugi \u003d getCallerUGI();\n    if (isFilterAppListByUserEnabled \u0026\u0026 ugi !\u003d null\n        \u0026\u0026 !j.checkAccess(ugi, JobACL.VIEW_JOB)) {\n      html.p().__(\"Sorry, \", jid, \" could not be viewed for \u0027\",\n          ugi.getUserName(), \"\u0027.\").__();\n      return;\n    }\n    if(j instanceof UnparsedJob) {\n      final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n      UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n      html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n          .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n              \" will not be loaded.\").__();\n      html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n          + \" to view large jobs or adjust the property \" +\n          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        __(\"Job Name:\", job.getName()).\n        __(\"User Name:\", job.getUserName()).\n        __(\"Queue:\", job.getQueueName()).\n        __(\"State:\", job.getState()).\n        __(\"Uberized:\", job.isUber()).\n        __(\"Submitted:\", new Date(job.getSubmitTime())).\n        __(\"Started:\", job.getStartTimeStr()).\n        __(\"Finished:\", new Date(job.getFinishTime())).\n        __(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n        __(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n            __().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            __();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress()).__().\n              td().a(\".logslink\", url(attempt.getLogsLink()),\n                      \"logs\").__().\n                __();\n          }\n          table.__();\n          div.__();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\").__().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n          .__().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\").__().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts())).__().\n            __().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts())).__().\n            __().\n            __().\n            __();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "15/07/16 1:30 PM",
      "commitNameOld": "0881ed3fc313abda2896d3f26769690f5ba37346",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 377.15,
      "commitsBetweenForRepo": 2228,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,151 +1,151 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n-        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n+        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n-      html.p()._(\"Sorry, \", jid, \" not found.\")._();\n+      html.p().__(\"Sorry, \", jid, \" not found.\").__();\n       return;\n     }\n     if(j instanceof UnparsedJob) {\n       final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n       UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n-      html.p()._(\"The job has a total of \" + taskCount + \" tasks. \")\n-          ._(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n-              \" will not be loaded.\")._();\n-      html.p()._(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n+      html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n+          .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n+              \" will not be loaded.\").__();\n+      html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n           + \" to view large jobs or adjust the property \" +\n-          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\")._();\n+          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n-        _(\"Job Name:\", job.getName()).\n-        _(\"User Name:\", job.getUserName()).\n-        _(\"Queue:\", job.getQueueName()).\n-        _(\"State:\", job.getState()).\n-        _(\"Uberized:\", job.isUber()).\n-        _(\"Submitted:\", new Date(job.getSubmitTime())).\n-        _(\"Started:\", job.getStartTimeStr()).\n-        _(\"Finished:\", new Date(job.getFinishTime())).\n-        _(\"Elapsed:\", StringUtils.formatTime(\n+        __(\"Job Name:\", job.getName()).\n+        __(\"User Name:\", job.getUserName()).\n+        __(\"Queue:\", job.getQueueName()).\n+        __(\"State:\", job.getState()).\n+        __(\"Uberized:\", job.isUber()).\n+        __(\"Submitted:\", new Date(job.getSubmitTime())).\n+        __(\"Started:\", job.getStartTimeStr()).\n+        __(\"Finished:\", new Date(job.getFinishTime())).\n+        __(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n-      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n+      infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n-      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n-      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n-      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n+      infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n+      infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n+      infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n-      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n+      infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n-      _(InfoBlock.class).\n+        __(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n-          _().\n+            __().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n-            _();\n+            __();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n-                  attempt.getNodeHttpAddress())._().\n+                  attempt.getNodeHttpAddress()).__().\n               td().a(\".logslink\", url(attempt.getLogsLink()),\n-                      \"logs\")._().\n-            _();\n+                      \"logs\").__().\n+                __();\n           }\n-          table._();\n-          div._();\n+          table.__();\n+          div.__();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n-            th(_TH, \"Complete\")._().\n+            th(_TH, \"Complete\").__().\n           tr(_ODD).\n             th().\n-              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n+              a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n-            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n+            td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n           tr(_EVEN).\n             th().\n-              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n+              a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n-            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n-          ._().\n+            td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n+          .__().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n-          th(_TH, \"Successful\")._().\n+          th(_TH, \"Successful\").__().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n-              String.valueOf(job.getFailedMapAttempts()))._().\n+              String.valueOf(job.getFailedMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n-              String.valueOf(job.getKilledMapAttempts()))._().\n+              String.valueOf(job.getKilledMapAttempts())).__().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n-              String.valueOf(job.getSuccessfulMapAttempts()))._().\n-        _().\n+              String.valueOf(job.getSuccessfulMapAttempts())).__().\n+            __().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n-              String.valueOf(job.getFailedReduceAttempts()))._().\n+              String.valueOf(job.getFailedReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n-              String.valueOf(job.getKilledReduceAttempts()))._().\n+              String.valueOf(job.getKilledReduceAttempts())).__().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n-              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n-         _().\n-       _().\n-     _();\n+              String.valueOf(job.getSuccessfulReduceAttempts())).__().\n+            __().\n+            __().\n+            __();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p().__(\"Sorry, can\u0027t do anything without a JobID.\").__();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.p().__(\"Sorry, \", jid, \" not found.\").__();\n      return;\n    }\n    if(j instanceof UnparsedJob) {\n      final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n      UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n      html.p().__(\"The job has a total of \" + taskCount + \" tasks. \")\n          .__(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n              \" will not be loaded.\").__();\n      html.p().__(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n          + \" to view large jobs or adjust the property \" +\n          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\").__();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        __(\"Job Name:\", job.getName()).\n        __(\"User Name:\", job.getUserName()).\n        __(\"Queue:\", job.getQueueName()).\n        __(\"State:\", job.getState()).\n        __(\"Uberized:\", job.isUber()).\n        __(\"Submitted:\", new Date(job.getSubmitTime())).\n        __(\"Started:\", job.getStartTimeStr()).\n        __(\"Finished:\", new Date(job.getFinishTime())).\n        __(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock.__(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock.__(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock.__(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock.__(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock.__(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n        __(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n            __().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            __();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress()).__().\n              td().a(\".logslink\", url(attempt.getLogsLink()),\n                      \"logs\").__().\n                __();\n          }\n          table.__();\n          div.__();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\").__().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\").__().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted()))).__().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\").__().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted()))).__()\n          .__().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\").__().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts())).__().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts())).__().\n            __().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts())).__().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts())).__().\n            __().\n            __().\n            __();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "0881ed3fc313abda2896d3f26769690f5ba37346": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6652. Add configuration property to prevent JHS from loading jobs with a task count greater than X (haibochen via rkanter)\n",
      "commitDate": "15/07/16 1:30 PM",
      "commitName": "0881ed3fc313abda2896d3f26769690f5ba37346",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "17/05/16 7:54 AM",
      "commitNameOld": "12fa4ec141f8d0cb105b6f60c3739a4b26890fd5",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 59.23,
      "commitsBetweenForRepo": 535,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,151 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n-      html.\n-        p()._(\"Sorry, \", jid, \" not found.\")._();\n+      html.p()._(\"Sorry, \", jid, \" not found.\")._();\n+      return;\n+    }\n+    if(j instanceof UnparsedJob) {\n+      final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n+      UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n+      html.p()._(\"The job has a total of \" + taskCount + \" tasks. \")\n+          ._(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n+              \" will not be loaded.\")._();\n+      html.p()._(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n+          + \" to view large jobs or adjust the property \" +\n+          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", job.getStartTimeStr()).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getLogsLink()),\n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    if(j instanceof UnparsedJob) {\n      final int taskCount \u003d j.getTotalMaps() + j.getTotalReduces();\n      UnparsedJob oversizedJob \u003d (UnparsedJob) j;\n      html.p()._(\"The job has a total of \" + taskCount + \" tasks. \")\n          ._(\"Any job larger than \" + oversizedJob.getMaxTasksAllowed() +\n              \" will not be loaded.\")._();\n      html.p()._(\"You can either use the CLI tool: \u0027mapred job -history\u0027\"\n          + \" to view large jobs or adjust the property \" +\n          JHAdminConfig.MR_HS_LOADED_JOBS_TASKS_MAX + \".\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", job.getStartTimeStr()).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getLogsLink()),\n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "12fa4ec141f8d0cb105b6f60c3739a4b26890fd5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6701. application master log can not be available when clicking jobhistory\u0027s am logs link. Contributed by Haibo Chen\n",
      "commitDate": "17/05/16 7:54 AM",
      "commitName": "12fa4ec141f8d0cb105b6f60c3739a4b26890fd5",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "02/02/16 3:19 PM",
      "commitNameOld": "ccbba4a4deb8ade54a04137c993526e461bcb46e",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 104.65,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", job.getStartTimeStr()).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n-              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n+              td().a(\".logslink\", url(attempt.getLogsLink()),\n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", job.getStartTimeStr()).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getLogsLink()),\n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "ccbba4a4deb8ade54a04137c993526e461bcb46e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6620. Jobs that did not start are shown as starting in 1969 in the JHS web UI (haibochen via rkanter)\n",
      "commitDate": "02/02/16 3:19 PM",
      "commitName": "ccbba4a4deb8ade54a04137c993526e461bcb46e",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "03/06/15 11:46 PM",
      "commitNameOld": "e8302071ff16247a3d0cfc2dcca02da1bbf4db18",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 243.69,
      "commitsBetweenForRepo": 1649,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n-        _(\"Started:\", new Date(job.getStartTime())).\n+        _(\"Started:\", job.getStartTimeStr()).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n       infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", job.getStartTimeStr()).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "e8302071ff16247a3d0cfc2dcca02da1bbf4db18": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6382. Don\u0027t escape HTML links in Diagnostics in JHS job overview. (Siqi Li via gera)\n",
      "commitDate": "03/06/15 11:46 PM",
      "commitName": "e8302071ff16247a3d0cfc2dcca02da1bbf4db18",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "21/04/15 1:57 PM",
      "commitNameOld": "89ded89e86e5d9a634d92a5d8a7c889744d97f94",
      "commitAuthorOld": "Gera Shegalov",
      "daysBetweenCommits": 43.41,
      "commitsBetweenForRepo": 450,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(addTaskLinks(diag));\n       }\n-      infoBlock._(\"Diagnostics:\", b.toString());\n+      infoBlock._r(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._r(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "89ded89e86e5d9a634d92a5d8a7c889744d97f94": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6297. Task Id of the failed task in diagnostics should link to the task page. (Siqi Li via gera)\n",
      "commitDate": "21/04/15 1:57 PM",
      "commitName": "89ded89e86e5d9a634d92a5d8a7c889744d97f94",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "11/05/14 11:15 PM",
      "commitNameOld": "5e337149e39b10dd0badb1caea6977b5a1f6ebec",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 344.61,
      "commitsBetweenForRepo": 2870,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n-        b.append(diag);\n+        b.append(addTaskLinks(diag));\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(addTaskLinks(diag));\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "5e337149e39b10dd0badb1caea6977b5a1f6ebec": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5774. Job overview in History UI should list reducer phases in chronological order. (Gera Shegalov via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593890 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/14 11:15 PM",
      "commitName": "5e337149e39b10dd0badb1caea6977b5a1f6ebec",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/12/13 9:17 AM",
      "commitNameOld": "ee5351bf22e113d39db3839432bc7d6c743cc736",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 152.54,
      "commitsBetweenForRepo": 1055,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n-      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n+      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "ee5351bf22e113d39db3839432bc7d6c743cc736": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5052. Job History UI and web services confusing job start time and job submit time (Chen He via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1549896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 9:17 AM",
      "commitName": "ee5351bf22e113d39db3839432bc7d6c743cc736",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 69.77,
      "commitsBetweenForRepo": 427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,140 +1,141 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n+        _(\"Submitted:\", new Date(job.getSubmitTime())).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Submitted:\", new Date(job.getSubmitTime())).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 4:35 PM",
      "commitNameOld": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,140 +1,140 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n-              td().a(\".nodelink\", url(WebAppUtil.getSchemePrefix(),\n+              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(MRWebAppUtil.getYARNWebappScheme(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1203. Changed YARN web-app proxy to handle http and https URLs from AM registration and finish correctly. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5515. Fixed MR AM\u0027s webapp to depend on a new config mapreduce.ssl.enabled to enable https and disabling it by default as MR AM needs\nto set up its own certificates etc and not depend on clusters\u0027. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 4:35 PM",
      "commitName": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/08/12 3:52 PM",
      "commitNameOld": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 406.03,
      "commitsBetweenForRepo": 2353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,140 +1,140 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n-              td().a(\".nodelink\", url(HttpConfig.getSchemePrefix(),\n+              td().a(\".nodelink\", url(WebAppUtil.getSchemePrefix(),\n                   attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(WebAppUtil.getSchemePrefix(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "4bca22005f48f426b9bc7cf36d435ead470a2590": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8681. add support for HTTPS to the web UIs. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 3:52 PM",
      "commitName": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "04/06/12 10:41 AM",
      "commitNameOld": "358eda0bfaaf24f2ff4b2ef9967a370ddcb0a336",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 66.22,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,139 +1,140 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n         boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n             table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n-              td().a(\".nodelink\", url(\"http://\", attempt.getNodeHttpAddress()), \n+              td().a(\".nodelink\", url(HttpConfig.getSchemePrefix(),\n+                  attempt.getNodeHttpAddress()),\n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(HttpConfig.getSchemePrefix(),\n                  attempt.getNodeHttpAddress()),\n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "358eda0bfaaf24f2ff4b2ef9967a370ddcb0a336": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3350. Per-app RM page should have the list of application-attempts like on the app JHS page (Jonathon Eagles via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1346047 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/12 10:41 AM",
      "commitName": "358eda0bfaaf24f2ff4b2ef9967a370ddcb0a336",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 173.77,
      "commitsBetweenForRepo": 1214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,138 +1,139 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job j \u003d appContext.getJob(jobID);\n     if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n     JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(job.getStartTime())).\n         _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     // todo - switch to use JobInfo\n     List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(job.getNumMaps() \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n     if(job.getNumReduces() \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n     for (ConfEntryInfo entry : job.getAcls()) {\n       infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n+        boolean odd \u003d false;\n           for (AMInfo amInfo : amInfos) {\n             AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                 job.getId(), job.getUserName(), \"\", \"\");\n-            table.tr().\n+            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n               td(String.valueOf(attempt.getAttemptId())).\n               td(new Date(attempt.getStartTime()).toString()).\n               td().a(\".nodelink\", url(\"http://\", attempt.getNodeHttpAddress()), \n                   attempt.getNodeHttpAddress())._().\n               td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n             td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n             td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n        boolean odd \u003d false;\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr((odd \u003d !odd) ? _ODD : _EVEN).\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(\"http://\", attempt.getNodeHttpAddress()), \n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/11/11 11:28 PM",
      "commitNameOld": "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.65,
      "commitsBetweenForRepo": 186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,150 +1,138 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n-    Job job \u003d appContext.getJob(jobID);\n-    if (job \u003d\u003d null) {\n+    Job j \u003d appContext.getJob(jobID);\n+    if (j \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n-    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n-    List\u003cAMInfo\u003e amInfos \u003d job.getAMInfos();\n-    JobReport jobReport \u003d job.getReport();\n-    int mapTasks \u003d job.getTotalMaps();\n-    int mapTasksComplete \u003d job.getCompletedMaps();\n-    int reduceTasks \u003d job.getTotalReduces();\n-    int reducesTasksComplete \u003d job.getCompletedReduces();\n-    long startTime \u003d jobReport.getStartTime();\n-    long finishTime \u003d jobReport.getFinishTime();\n-    countTasksAndAttempts(job);\n+    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n+    JobInfo job \u003d new JobInfo(j);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n-        _(\"Started:\", new Date(startTime)).\n-        _(\"Finished:\", new Date(finishTime)).\n+        _(\"Started:\", new Date(job.getStartTime())).\n+        _(\"Finished:\", new Date(job.getFinishTime())).\n         _(\"Elapsed:\", StringUtils.formatTime(\n-            Times.elapsed(startTime, finishTime, false)));\n+            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n-    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n+    // todo - switch to use JobInfo\n+    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n-    if(numMaps \u003e 0) {\n-      infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n+    if(job.getNumMaps() \u003e 0) {\n+      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n     }\n-    if(numReduces \u003e 0) {\n-      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n-      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n-      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n+    if(job.getNumReduces() \u003e 0) {\n+      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n+      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n+      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n     }\n \n-    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n-      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n-          entry.getValue().getAclString());\n+    for (ConfEntryInfo entry : job.getAcls()) {\n+      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n           for (AMInfo amInfo : amInfos) {\n-            String nodeHttpAddress \u003d amInfo.getNodeManagerHost() + \n-                \":\" + amInfo.getNodeManagerHttpPort();\n-            NodeId nodeId \u003d BuilderUtils.newNodeId(\n-                amInfo.getNodeManagerHost(), amInfo.getNodeManagerPort());\n-            \n+            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n+                job.getId(), job.getUserName(), \"\", \"\");\n             table.tr().\n-              td(String.valueOf(amInfo.getAppAttemptId().getAttemptId())).\n-              td(new Date(amInfo.getStartTime()).toString()).\n-              td().a(\".nodelink\", url(\"http://\", nodeHttpAddress), \n-                  nodeHttpAddress)._().\n-              td().a(\".logslink\", url(\"logs\", nodeId.toString(), \n-                  amInfo.getContainerId().toString(), jid, job.getUserName()), \n+              td(String.valueOf(attempt.getAttemptId())).\n+              td(new Date(attempt.getStartTime()).toString()).\n+              td().a(\".nodelink\", url(\"http://\", attempt.getNodeHttpAddress()), \n+                  attempt.getNodeHttpAddress())._().\n+              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n-            td(String.valueOf(mapTasks)).\n-            td(String.valueOf(mapTasksComplete))._().\n+            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n+            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n-            td(String.valueOf(reduceTasks)).\n-            td(String.valueOf(reducesTasksComplete))._()\n+            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n+            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n-              String.valueOf(failedMapAttempts))._().\n+              String.valueOf(job.getFailedMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n-              String.valueOf(killedMapAttempts))._().\n+              String.valueOf(job.getKilledMapAttempts()))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n-              String.valueOf(successfulMapAttempts))._().\n+              String.valueOf(job.getSuccessfulMapAttempts()))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n-              String.valueOf(failedReduceAttempts))._().\n+              String.valueOf(job.getFailedReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n-              String.valueOf(killedReduceAttempts))._().\n+              String.valueOf(job.getKilledReduceAttempts()))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n-              String.valueOf(successfulReduceAttempts))._().\n+              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job j \u003d appContext.getJob(jobID);\n    if (j \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    List\u003cAMInfo\u003e amInfos \u003d j.getAMInfos();\n    JobInfo job \u003d new JobInfo(j);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(job.getStartTime())).\n        _(\"Finished:\", new Date(job.getFinishTime())).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(job.getStartTime(), job.getFinishTime(), false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    // todo - switch to use JobInfo\n    List\u003cString\u003e diagnostics \u003d j.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(job.getNumMaps() \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(job.getAvgMapTime()));\n    }\n    if(job.getNumReduces() \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(job.getAvgReduceTime()));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(job.getAvgShuffleTime()));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(job.getAvgMergeTime()));\n    }\n\n    for (ConfEntryInfo entry : job.getAcls()) {\n      infoBlock._(\"ACL \"+entry.getName()+\":\", entry.getValue());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n          for (AMInfo amInfo : amInfos) {\n            AMAttemptInfo attempt \u003d new AMAttemptInfo(amInfo,\n                job.getId(), job.getUserName(), \"\", \"\");\n            table.tr().\n              td(String.valueOf(attempt.getAttemptId())).\n              td(new Date(attempt.getStartTime()).toString()).\n              td().a(\".nodelink\", url(\"http://\", attempt.getNodeHttpAddress()), \n                  attempt.getNodeHttpAddress())._().\n              td().a(\".logslink\", url(attempt.getShortLogsLink()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(String.valueOf(job.getMapsTotal()))).\n            td(String.valueOf(String.valueOf(job.getMapsCompleted())))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(String.valueOf(job.getReducesTotal()))).\n            td(String.valueOf(String.valueOf(job.getReducesCompleted())))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledMapAttempts()))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulMapAttempts()))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(job.getFailedReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(job.getKilledReduceAttempts()))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(job.getSuccessfulReduceAttempts()))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3342. Fixed JobHistoryServer to also show the job\u0027s queue name. Contributed by Jonathan Eagles.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1199133 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/11 11:28 PM",
      "commitName": "9fe9f42c8fad872f7aab5f9bbdac4a860edb0d43",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/10/11 11:42 PM",
      "commitNameOld": "47a381e306877750b5a3ce5d76e0a5ff652ec188",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.03,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,149 +1,150 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n     List\u003cAMInfo\u003e amInfos \u003d job.getAMInfos();\n     JobReport jobReport \u003d job.getReport();\n     int mapTasks \u003d job.getTotalMaps();\n     int mapTasksComplete \u003d job.getCompletedMaps();\n     int reduceTasks \u003d job.getTotalReduces();\n     int reducesTasksComplete \u003d job.getCompletedReduces();\n     long startTime \u003d jobReport.getStartTime();\n     long finishTime \u003d jobReport.getFinishTime();\n     countTasksAndAttempts(job);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n+        _(\"Queue:\", job.getQueueName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(startTime)).\n         _(\"Finished:\", new Date(finishTime)).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(startTime, finishTime, false)));\n     \n     String amString \u003d\n         amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n     \n     List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(numMaps \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n     }\n     if(numReduces \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n     }\n \n     for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n       infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n           entry.getValue().getAclString());\n     }\n     DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP);\n     \n       // MRAppMasters Table\n         TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n         table.\n           tr().\n             th(amString).\n           _().\n           tr().\n             th(_TH, \"Attempt Number\").\n             th(_TH, \"Start Time\").\n             th(_TH, \"Node\").\n             th(_TH, \"Logs\").\n             _();\n           for (AMInfo amInfo : amInfos) {\n             String nodeHttpAddress \u003d amInfo.getNodeManagerHost() + \n                 \":\" + amInfo.getNodeManagerHttpPort();\n             NodeId nodeId \u003d BuilderUtils.newNodeId(\n                 amInfo.getNodeManagerHost(), amInfo.getNodeManagerPort());\n             \n             table.tr().\n               td(String.valueOf(amInfo.getAppAttemptId().getAttemptId())).\n               td(new Date(amInfo.getStartTime()).toString()).\n               td().a(\".nodelink\", url(\"http://\", nodeHttpAddress), \n                   nodeHttpAddress)._().\n               td().a(\".logslink\", url(\"logs\", nodeId.toString(), \n                   amInfo.getContainerId().toString(), jid, job.getUserName()), \n                       \"logs\")._().\n             _();\n           }\n           table._();\n           div._();\n           \n         \n         html.div(_INFO_WRAP).        \n       \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(mapTasks)).\n             td(String.valueOf(mapTasksComplete))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(reduceTasks)).\n             td(String.valueOf(reducesTasksComplete))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulMapAttempts))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulReduceAttempts))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n    List\u003cAMInfo\u003e amInfos \u003d job.getAMInfos();\n    JobReport jobReport \u003d job.getReport();\n    int mapTasks \u003d job.getTotalMaps();\n    int mapTasksComplete \u003d job.getCompletedMaps();\n    int reduceTasks \u003d job.getTotalReduces();\n    int reducesTasksComplete \u003d job.getCompletedReduces();\n    long startTime \u003d jobReport.getStartTime();\n    long finishTime \u003d jobReport.getFinishTime();\n    countTasksAndAttempts(job);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"Queue:\", job.getQueueName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(startTime)).\n        _(\"Finished:\", new Date(finishTime)).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(startTime, finishTime, false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(numMaps \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n    }\n    if(numReduces \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n    }\n\n    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n          entry.getValue().getAclString());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n          for (AMInfo amInfo : amInfos) {\n            String nodeHttpAddress \u003d amInfo.getNodeManagerHost() + \n                \":\" + amInfo.getNodeManagerHttpPort();\n            NodeId nodeId \u003d BuilderUtils.newNodeId(\n                amInfo.getNodeManagerHost(), amInfo.getNodeManagerPort());\n            \n            table.tr().\n              td(String.valueOf(amInfo.getAppAttemptId().getAttemptId())).\n              td(new Date(amInfo.getStartTime()).toString()).\n              td().a(\".nodelink\", url(\"http://\", nodeHttpAddress), \n                  nodeHttpAddress)._().\n              td().a(\".logslink\", url(\"logs\", nodeId.toString(), \n                  amInfo.getContainerId().toString(), jid, job.getUserName()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(mapTasks)).\n            td(String.valueOf(mapTasksComplete))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(reduceTasks)).\n            td(String.valueOf(reducesTasksComplete))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulMapAttempts))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulReduceAttempts))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/09/11 3:21 PM",
      "commitNameOld": "d9ba4670ed0134816d5d063d48394e31b51c3b35",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 42.35,
      "commitsBetweenForRepo": 350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,112 +1,149 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n-    \n+    List\u003cAMInfo\u003e amInfos \u003d job.getAMInfos();\n     JobReport jobReport \u003d job.getReport();\n     int mapTasks \u003d job.getTotalMaps();\n     int mapTasksComplete \u003d job.getCompletedMaps();\n     int reduceTasks \u003d job.getTotalReduces();\n     int reducesTasksComplete \u003d job.getCompletedReduces();\n     long startTime \u003d jobReport.getStartTime();\n     long finishTime \u003d jobReport.getFinishTime();\n     countTasksAndAttempts(job);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(startTime)).\n         _(\"Finished:\", new Date(finishTime)).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(startTime, finishTime, false)));\n     \n+    String amString \u003d\n+        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n+    \n     List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n \n     if(numMaps \u003e 0) {\n       infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n     }\n     if(numReduces \u003e 0) {\n       infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n       infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n       infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n     }\n \n     for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n       infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n           entry.getValue().getAclString());\n     }\n-    html.\n+    DIV\u003cHamlet\u003e div \u003d html.\n       _(InfoBlock.class).\n-      div(_INFO_WRAP).\n-\n+      div(_INFO_WRAP);\n+    \n+      // MRAppMasters Table\n+        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n+        table.\n+          tr().\n+            th(amString).\n+          _().\n+          tr().\n+            th(_TH, \"Attempt Number\").\n+            th(_TH, \"Start Time\").\n+            th(_TH, \"Node\").\n+            th(_TH, \"Logs\").\n+            _();\n+          for (AMInfo amInfo : amInfos) {\n+            String nodeHttpAddress \u003d amInfo.getNodeManagerHost() + \n+                \":\" + amInfo.getNodeManagerHttpPort();\n+            NodeId nodeId \u003d BuilderUtils.newNodeId(\n+                amInfo.getNodeManagerHost(), amInfo.getNodeManagerPort());\n+            \n+            table.tr().\n+              td(String.valueOf(amInfo.getAppAttemptId().getAttemptId())).\n+              td(new Date(amInfo.getStartTime()).toString()).\n+              td().a(\".nodelink\", url(\"http://\", nodeHttpAddress), \n+                  nodeHttpAddress)._().\n+              td().a(\".logslink\", url(\"logs\", nodeId.toString(), \n+                  amInfo.getContainerId().toString(), jid, job.getUserName()), \n+                      \"logs\")._().\n+            _();\n+          }\n+          table._();\n+          div._();\n+          \n+        \n+        html.div(_INFO_WRAP).        \n+      \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(mapTasks)).\n             td(String.valueOf(mapTasksComplete))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(reduceTasks)).\n             td(String.valueOf(reducesTasksComplete))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulMapAttempts))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulReduceAttempts))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n    List\u003cAMInfo\u003e amInfos \u003d job.getAMInfos();\n    JobReport jobReport \u003d job.getReport();\n    int mapTasks \u003d job.getTotalMaps();\n    int mapTasksComplete \u003d job.getCompletedMaps();\n    int reduceTasks \u003d job.getTotalReduces();\n    int reducesTasksComplete \u003d job.getCompletedReduces();\n    long startTime \u003d jobReport.getStartTime();\n    long finishTime \u003d jobReport.getFinishTime();\n    countTasksAndAttempts(job);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(startTime)).\n        _(\"Finished:\", new Date(finishTime)).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(startTime, finishTime, false)));\n    \n    String amString \u003d\n        amInfos.size() \u003d\u003d 1 ? \"ApplicationMaster\" : \"ApplicationMasters\"; \n    \n    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(numMaps \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n    }\n    if(numReduces \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n    }\n\n    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n          entry.getValue().getAclString());\n    }\n    DIV\u003cHamlet\u003e div \u003d html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP);\n    \n      // MRAppMasters Table\n        TABLE\u003cDIV\u003cHamlet\u003e\u003e table \u003d div.table(\"#job\");\n        table.\n          tr().\n            th(amString).\n          _().\n          tr().\n            th(_TH, \"Attempt Number\").\n            th(_TH, \"Start Time\").\n            th(_TH, \"Node\").\n            th(_TH, \"Logs\").\n            _();\n          for (AMInfo amInfo : amInfos) {\n            String nodeHttpAddress \u003d amInfo.getNodeManagerHost() + \n                \":\" + amInfo.getNodeManagerHttpPort();\n            NodeId nodeId \u003d BuilderUtils.newNodeId(\n                amInfo.getNodeManagerHost(), amInfo.getNodeManagerPort());\n            \n            table.tr().\n              td(String.valueOf(amInfo.getAppAttemptId().getAttemptId())).\n              td(new Date(amInfo.getStartTime()).toString()).\n              td().a(\".nodelink\", url(\"http://\", nodeHttpAddress), \n                  nodeHttpAddress)._().\n              td().a(\".logslink\", url(\"logs\", nodeId.toString(), \n                  amInfo.getContainerId().toString(), jid, job.getUserName()), \n                      \"logs\")._().\n            _();\n          }\n          table._();\n          div._();\n          \n        \n        html.div(_INFO_WRAP).        \n      \n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(mapTasks)).\n            td(String.valueOf(mapTasksComplete))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(reduceTasks)).\n            td(String.valueOf(reducesTasksComplete))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulMapAttempts))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulReduceAttempts))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2672. MR-279: JobHistory Server needs Analysis this job. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171297 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/09/11 3:21 PM",
      "commitName": "d9ba4670ed0134816d5d063d48394e31b51c3b35",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/09/11 3:55 PM",
      "commitNameOld": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,112 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n     Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n     \n     JobReport jobReport \u003d job.getReport();\n     int mapTasks \u003d job.getTotalMaps();\n     int mapTasksComplete \u003d job.getCompletedMaps();\n     int reduceTasks \u003d job.getTotalReduces();\n     int reducesTasksComplete \u003d job.getCompletedReduces();\n     long startTime \u003d jobReport.getStartTime();\n     long finishTime \u003d jobReport.getFinishTime();\n     countTasksAndAttempts(job);\n     ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n         _(\"User Name:\", job.getUserName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(startTime)).\n         _(\"Finished:\", new Date(finishTime)).\n         _(\"Elapsed:\", StringUtils.formatTime(\n-            Times.elapsed(startTime, finishTime)));\n+            Times.elapsed(startTime, finishTime, false)));\n     \n     List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n     if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n       StringBuffer b \u003d new StringBuffer();\n       for(String diag: diagnostics) {\n         b.append(diag);\n       }\n       infoBlock._(\"Diagnostics:\", b.toString());\n     }\n-    \n+\n+    if(numMaps \u003e 0) {\n+      infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n+    }\n+    if(numReduces \u003e 0) {\n+      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n+      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n+      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n+    }\n+\n     for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n       infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n           entry.getValue().getAclString());\n     }\n     html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP).\n \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n             th(_TH, \"Total\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n             td(String.valueOf(mapTasks)).\n             td(String.valueOf(mapTasksComplete))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n             td(String.valueOf(reduceTasks)).\n             td(String.valueOf(reducesTasksComplete))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulMapAttempts))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulReduceAttempts))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n    \n    JobReport jobReport \u003d job.getReport();\n    int mapTasks \u003d job.getTotalMaps();\n    int mapTasksComplete \u003d job.getCompletedMaps();\n    int reduceTasks \u003d job.getTotalReduces();\n    int reducesTasksComplete \u003d job.getCompletedReduces();\n    long startTime \u003d jobReport.getStartTime();\n    long finishTime \u003d jobReport.getFinishTime();\n    countTasksAndAttempts(job);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(startTime)).\n        _(\"Finished:\", new Date(finishTime)).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(startTime, finishTime, false)));\n    \n    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n\n    if(numMaps \u003e 0) {\n      infoBlock._(\"Average Map Time\", StringUtils.formatTime(avgMapTime));\n    }\n    if(numReduces \u003e 0) {\n      infoBlock._(\"Average Reduce Time\", StringUtils.formatTime(avgReduceTime));\n      infoBlock._(\"Average Shuffle Time\", StringUtils.formatTime(avgShuffleTime));\n      infoBlock._(\"Average Merge Time\", StringUtils.formatTime(avgSortTime));\n    }\n\n    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n          entry.getValue().getAclString());\n    }\n    html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP).\n\n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(mapTasks)).\n            td(String.valueOf(mapTasksComplete))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(reduceTasks)).\n            td(String.valueOf(reducesTasksComplete))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulMapAttempts))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulReduceAttempts))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2676. MR-279: JobHistory Job page needs reformatted. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170379 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 3:55 PM",
      "commitName": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "12/09/11 7:24 AM",
      "commitNameOld": "be32d25c546a7d4f98604e142940c483213b485b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.35,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,103 @@\n   @Override protected void render(Block html) {\n     String jid \u003d $(JOB_ID);\n     if (jid.isEmpty()) {\n       html.\n         p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n       return;\n     }\n     JobId jobID \u003d MRApps.toJobID(jid);\n     Job job \u003d appContext.getJob(jobID);\n     if (job \u003d\u003d null) {\n       html.\n         p()._(\"Sorry, \", jid, \" not found.\")._();\n       return;\n     }\n+    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n+    \n     JobReport jobReport \u003d job.getReport();\n-    String mapPct \u003d percent(jobReport.getMapProgress());\n-    String reducePct \u003d percent(jobReport.getReduceProgress());\n     int mapTasks \u003d job.getTotalMaps();\n     int mapTasksComplete \u003d job.getCompletedMaps();\n     int reduceTasks \u003d job.getTotalReduces();\n     int reducesTasksComplete \u003d job.getCompletedReduces();\n     long startTime \u003d jobReport.getStartTime();\n     long finishTime \u003d jobReport.getFinishTime();\n     countTasksAndAttempts(job);\n-    info(\"Job Overview\").\n+    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n         _(\"Job Name:\", job.getName()).\n+        _(\"User Name:\", job.getUserName()).\n         _(\"State:\", job.getState()).\n         _(\"Uberized:\", job.isUber()).\n         _(\"Started:\", new Date(startTime)).\n+        _(\"Finished:\", new Date(finishTime)).\n         _(\"Elapsed:\", StringUtils.formatTime(\n             Times.elapsed(startTime, finishTime)));\n+    \n+    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n+    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n+      StringBuffer b \u003d new StringBuffer();\n+      for(String diag: diagnostics) {\n+        b.append(diag);\n+      }\n+      infoBlock._(\"Diagnostics:\", b.toString());\n+    }\n+    \n+    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n+      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n+          entry.getValue().getAclString());\n+    }\n     html.\n       _(InfoBlock.class).\n       div(_INFO_WRAP).\n \n       // Tasks table\n         table(\"#job\").\n           tr().\n             th(_TH, \"Task Type\").\n-            th(_TH, \"Progress\").\n             th(_TH, \"Total\").\n-            th(_TH, \"Pending\").\n-            th(_TH, \"Running\").\n             th(_TH, \"Complete\")._().\n           tr(_ODD).\n             th().\n               a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n-            td().\n-              div(_PROGRESSBAR).\n-                $title(join(mapPct, \u0027%\u0027)). // tooltip\n-                div(_PROGRESSBAR_VALUE).\n-                  $style(join(\"width:\", mapPct, \u0027%\u0027))._()._()._().\n             td(String.valueOf(mapTasks)).\n-            td(String.valueOf(pendingMapTasks)).\n-            td(String.valueOf(runningMapTasks)).\n             td(String.valueOf(mapTasksComplete))._().\n           tr(_EVEN).\n             th().\n               a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n-            td().\n-              div(_PROGRESSBAR).\n-                $title(join(reducePct, \u0027%\u0027)). // tooltip\n-                div(_PROGRESSBAR_VALUE).\n-                  $style(join(\"width:\", reducePct, \u0027%\u0027))._()._()._().\n             td(String.valueOf(reduceTasks)).\n-            td(String.valueOf(pendingReduceTasks)).\n-            td(String.valueOf(runningReduceTasks)).\n             td(String.valueOf(reducesTasksComplete))._()\n           ._().\n \n         // Attempts table\n         table(\"#job\").\n         tr().\n           th(_TH, \"Attempt Type\").\n-          th(_TH, \"New\").\n-          th(_TH, \"Running\").\n           th(_TH, \"Failed\").\n           th(_TH, \"Killed\").\n           th(_TH, \"Successful\")._().\n         tr(_ODD).\n           th(\"Maps\").\n           td().a(url(\"attempts\", jid, \"m\",\n-              TaskAttemptStateUI.NEW.toString()), \n-              String.valueOf(newMapAttempts))._().\n-          td().a(url(\"attempts\", jid, \"m\",\n-              TaskAttemptStateUI.RUNNING.toString()), \n-              String.valueOf(runningMapAttempts))._().\n-          td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedMapAttempts))._().\n           td().a(url(\"attempts\", jid, \"m\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulMapAttempts))._().\n         _().\n         tr(_EVEN).\n           th(\"Reduces\").\n           td().a(url(\"attempts\", jid, \"r\",\n-              TaskAttemptStateUI.NEW.toString()), \n-              String.valueOf(newReduceAttempts))._().\n-          td().a(url(\"attempts\", jid, \"r\",\n-              TaskAttemptStateUI.RUNNING.toString()), \n-              String.valueOf(runningReduceAttempts))._().\n-          td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.FAILED.toString()), \n               String.valueOf(failedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.KILLED.toString()), \n               String.valueOf(killedReduceAttempts))._().\n           td().a(url(\"attempts\", jid, \"r\",\n               TaskAttemptStateUI.SUCCESSFUL.toString()), \n               String.valueOf(successfulReduceAttempts))._().\n          _().\n        _().\n      _();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    Map\u003cJobACL, AccessControlList\u003e acls \u003d job.getJobACLs();\n    \n    JobReport jobReport \u003d job.getReport();\n    int mapTasks \u003d job.getTotalMaps();\n    int mapTasksComplete \u003d job.getCompletedMaps();\n    int reduceTasks \u003d job.getTotalReduces();\n    int reducesTasksComplete \u003d job.getCompletedReduces();\n    long startTime \u003d jobReport.getStartTime();\n    long finishTime \u003d jobReport.getFinishTime();\n    countTasksAndAttempts(job);\n    ResponseInfo infoBlock \u003d info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"User Name:\", job.getUserName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(startTime)).\n        _(\"Finished:\", new Date(finishTime)).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(startTime, finishTime)));\n    \n    List\u003cString\u003e diagnostics \u003d job.getDiagnostics();\n    if(diagnostics !\u003d null \u0026\u0026 !diagnostics.isEmpty()) {\n      StringBuffer b \u003d new StringBuffer();\n      for(String diag: diagnostics) {\n        b.append(diag);\n      }\n      infoBlock._(\"Diagnostics:\", b.toString());\n    }\n    \n    for(Map.Entry\u003cJobACL, AccessControlList\u003e entry : acls.entrySet()) {\n      infoBlock._(\"ACL \"+entry.getKey().getAclName()+\":\",\n          entry.getValue().getAclString());\n    }\n    html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP).\n\n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Total\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td(String.valueOf(mapTasks)).\n            td(String.valueOf(mapTasksComplete))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td(String.valueOf(reduceTasks)).\n            td(String.valueOf(reducesTasksComplete))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulMapAttempts))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulReduceAttempts))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java",
      "extendedDetails": {}
    },
    "be32d25c546a7d4f98604e142940c483213b485b": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2675. Reformat JobHistory Server main page to be more useful. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169763 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 7:24 AM",
      "commitName": "be32d25c546a7d4f98604e142940c483213b485b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,118 @@\n+  @Override protected void render(Block html) {\n+    String jid \u003d $(JOB_ID);\n+    if (jid.isEmpty()) {\n+      html.\n+        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n+      return;\n+    }\n+    JobId jobID \u003d MRApps.toJobID(jid);\n+    Job job \u003d appContext.getJob(jobID);\n+    if (job \u003d\u003d null) {\n+      html.\n+        p()._(\"Sorry, \", jid, \" not found.\")._();\n+      return;\n+    }\n+    JobReport jobReport \u003d job.getReport();\n+    String mapPct \u003d percent(jobReport.getMapProgress());\n+    String reducePct \u003d percent(jobReport.getReduceProgress());\n+    int mapTasks \u003d job.getTotalMaps();\n+    int mapTasksComplete \u003d job.getCompletedMaps();\n+    int reduceTasks \u003d job.getTotalReduces();\n+    int reducesTasksComplete \u003d job.getCompletedReduces();\n+    long startTime \u003d jobReport.getStartTime();\n+    long finishTime \u003d jobReport.getFinishTime();\n+    countTasksAndAttempts(job);\n+    info(\"Job Overview\").\n+        _(\"Job Name:\", job.getName()).\n+        _(\"State:\", job.getState()).\n+        _(\"Uberized:\", job.isUber()).\n+        _(\"Started:\", new Date(startTime)).\n+        _(\"Elapsed:\", StringUtils.formatTime(\n+            Times.elapsed(startTime, finishTime)));\n+    html.\n+      _(InfoBlock.class).\n+      div(_INFO_WRAP).\n+\n+      // Tasks table\n+        table(\"#job\").\n+          tr().\n+            th(_TH, \"Task Type\").\n+            th(_TH, \"Progress\").\n+            th(_TH, \"Total\").\n+            th(_TH, \"Pending\").\n+            th(_TH, \"Running\").\n+            th(_TH, \"Complete\")._().\n+          tr(_ODD).\n+            th().\n+              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n+            td().\n+              div(_PROGRESSBAR).\n+                $title(join(mapPct, \u0027%\u0027)). // tooltip\n+                div(_PROGRESSBAR_VALUE).\n+                  $style(join(\"width:\", mapPct, \u0027%\u0027))._()._()._().\n+            td(String.valueOf(mapTasks)).\n+            td(String.valueOf(pendingMapTasks)).\n+            td(String.valueOf(runningMapTasks)).\n+            td(String.valueOf(mapTasksComplete))._().\n+          tr(_EVEN).\n+            th().\n+              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n+            td().\n+              div(_PROGRESSBAR).\n+                $title(join(reducePct, \u0027%\u0027)). // tooltip\n+                div(_PROGRESSBAR_VALUE).\n+                  $style(join(\"width:\", reducePct, \u0027%\u0027))._()._()._().\n+            td(String.valueOf(reduceTasks)).\n+            td(String.valueOf(pendingReduceTasks)).\n+            td(String.valueOf(runningReduceTasks)).\n+            td(String.valueOf(reducesTasksComplete))._()\n+          ._().\n+\n+        // Attempts table\n+        table(\"#job\").\n+        tr().\n+          th(_TH, \"Attempt Type\").\n+          th(_TH, \"New\").\n+          th(_TH, \"Running\").\n+          th(_TH, \"Failed\").\n+          th(_TH, \"Killed\").\n+          th(_TH, \"Successful\")._().\n+        tr(_ODD).\n+          th(\"Maps\").\n+          td().a(url(\"attempts\", jid, \"m\",\n+              TaskAttemptStateUI.NEW.toString()), \n+              String.valueOf(newMapAttempts))._().\n+          td().a(url(\"attempts\", jid, \"m\",\n+              TaskAttemptStateUI.RUNNING.toString()), \n+              String.valueOf(runningMapAttempts))._().\n+          td().a(url(\"attempts\", jid, \"m\",\n+              TaskAttemptStateUI.FAILED.toString()), \n+              String.valueOf(failedMapAttempts))._().\n+          td().a(url(\"attempts\", jid, \"m\",\n+              TaskAttemptStateUI.KILLED.toString()), \n+              String.valueOf(killedMapAttempts))._().\n+          td().a(url(\"attempts\", jid, \"m\",\n+              TaskAttemptStateUI.SUCCESSFUL.toString()), \n+              String.valueOf(successfulMapAttempts))._().\n+        _().\n+        tr(_EVEN).\n+          th(\"Reduces\").\n+          td().a(url(\"attempts\", jid, \"r\",\n+              TaskAttemptStateUI.NEW.toString()), \n+              String.valueOf(newReduceAttempts))._().\n+          td().a(url(\"attempts\", jid, \"r\",\n+              TaskAttemptStateUI.RUNNING.toString()), \n+              String.valueOf(runningReduceAttempts))._().\n+          td().a(url(\"attempts\", jid, \"r\",\n+              TaskAttemptStateUI.FAILED.toString()), \n+              String.valueOf(failedReduceAttempts))._().\n+          td().a(url(\"attempts\", jid, \"r\",\n+              TaskAttemptStateUI.KILLED.toString()), \n+              String.valueOf(killedReduceAttempts))._().\n+          td().a(url(\"attempts\", jid, \"r\",\n+              TaskAttemptStateUI.SUCCESSFUL.toString()), \n+              String.valueOf(successfulReduceAttempts))._().\n+         _().\n+       _().\n+     _();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @Override protected void render(Block html) {\n    String jid \u003d $(JOB_ID);\n    if (jid.isEmpty()) {\n      html.\n        p()._(\"Sorry, can\u0027t do anything without a JobID.\")._();\n      return;\n    }\n    JobId jobID \u003d MRApps.toJobID(jid);\n    Job job \u003d appContext.getJob(jobID);\n    if (job \u003d\u003d null) {\n      html.\n        p()._(\"Sorry, \", jid, \" not found.\")._();\n      return;\n    }\n    JobReport jobReport \u003d job.getReport();\n    String mapPct \u003d percent(jobReport.getMapProgress());\n    String reducePct \u003d percent(jobReport.getReduceProgress());\n    int mapTasks \u003d job.getTotalMaps();\n    int mapTasksComplete \u003d job.getCompletedMaps();\n    int reduceTasks \u003d job.getTotalReduces();\n    int reducesTasksComplete \u003d job.getCompletedReduces();\n    long startTime \u003d jobReport.getStartTime();\n    long finishTime \u003d jobReport.getFinishTime();\n    countTasksAndAttempts(job);\n    info(\"Job Overview\").\n        _(\"Job Name:\", job.getName()).\n        _(\"State:\", job.getState()).\n        _(\"Uberized:\", job.isUber()).\n        _(\"Started:\", new Date(startTime)).\n        _(\"Elapsed:\", StringUtils.formatTime(\n            Times.elapsed(startTime, finishTime)));\n    html.\n      _(InfoBlock.class).\n      div(_INFO_WRAP).\n\n      // Tasks table\n        table(\"#job\").\n          tr().\n            th(_TH, \"Task Type\").\n            th(_TH, \"Progress\").\n            th(_TH, \"Total\").\n            th(_TH, \"Pending\").\n            th(_TH, \"Running\").\n            th(_TH, \"Complete\")._().\n          tr(_ODD).\n            th().\n              a(url(\"tasks\", jid, \"m\"), \"Map\")._().\n            td().\n              div(_PROGRESSBAR).\n                $title(join(mapPct, \u0027%\u0027)). // tooltip\n                div(_PROGRESSBAR_VALUE).\n                  $style(join(\"width:\", mapPct, \u0027%\u0027))._()._()._().\n            td(String.valueOf(mapTasks)).\n            td(String.valueOf(pendingMapTasks)).\n            td(String.valueOf(runningMapTasks)).\n            td(String.valueOf(mapTasksComplete))._().\n          tr(_EVEN).\n            th().\n              a(url(\"tasks\", jid, \"r\"), \"Reduce\")._().\n            td().\n              div(_PROGRESSBAR).\n                $title(join(reducePct, \u0027%\u0027)). // tooltip\n                div(_PROGRESSBAR_VALUE).\n                  $style(join(\"width:\", reducePct, \u0027%\u0027))._()._()._().\n            td(String.valueOf(reduceTasks)).\n            td(String.valueOf(pendingReduceTasks)).\n            td(String.valueOf(runningReduceTasks)).\n            td(String.valueOf(reducesTasksComplete))._()\n          ._().\n\n        // Attempts table\n        table(\"#job\").\n        tr().\n          th(_TH, \"Attempt Type\").\n          th(_TH, \"New\").\n          th(_TH, \"Running\").\n          th(_TH, \"Failed\").\n          th(_TH, \"Killed\").\n          th(_TH, \"Successful\")._().\n        tr(_ODD).\n          th(\"Maps\").\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.NEW.toString()), \n              String.valueOf(newMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.RUNNING.toString()), \n              String.valueOf(runningMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedMapAttempts))._().\n          td().a(url(\"attempts\", jid, \"m\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulMapAttempts))._().\n        _().\n        tr(_EVEN).\n          th(\"Reduces\").\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.NEW.toString()), \n              String.valueOf(newReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.RUNNING.toString()), \n              String.valueOf(runningReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.FAILED.toString()), \n              String.valueOf(failedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.KILLED.toString()), \n              String.valueOf(killedReduceAttempts))._().\n          td().a(url(\"attempts\", jid, \"r\",\n              TaskAttemptStateUI.SUCCESSFUL.toString()), \n              String.valueOf(successfulReduceAttempts))._().\n         _().\n       _().\n     _();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsJobBlock.java"
    }
  }
}