{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSParentQueue.java",
  "functionName": "assignContainer",
  "functionId": "assignContainer___node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
  "functionStartLine": 193,
  "functionEndLine": 231,
  "numCommitsSeen": 47,
  "timeTaken": 3497,
  "changeHistory": [
    "b3c75c1f1d347d1a9e5bd54decf27babb6a309f6",
    "2564884757fbf4df7718f814cc448f7f23dad875",
    "f48fec83d0f2d1a781a141ad7216463c5526321f",
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21"
  ],
  "changeHistoryShort": {
    "b3c75c1f1d347d1a9e5bd54decf27babb6a309f6": "Ybodychange",
    "2564884757fbf4df7718f814cc448f7f23dad875": "Ybodychange",
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Ybodychange",
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689": "Ybodychange",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": "Ybodychange",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": "Ymultichange(Yparameterchange,Ybodychange)",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3c75c1f1d347d1a9e5bd54decf27babb6a309f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8985. Improve debug log in FSParentQueue when assigning container. (Contributed by  Wilfred Spiegelenburg)\n",
      "commitDate": "05/12/18 3:02 PM",
      "commitName": "b3c75c1f1d347d1a9e5bd54decf27babb6a309f6",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "20/11/18 2:12 PM",
      "commitNameOld": "a41b648e98b6a1c5a9cdb7393e73e576a97f56d4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 15.03,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,39 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n \n     // If this queue is over its limit, reject\n     if (!assignContainerPreCheck(node)) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Assign container precheck on node \" + node + \" failed\");\n+        LOG.debug(\"Assign container precheck for queue \" + getName() +\n+            \" on node \" + node.getNodeName() + \" failed\");\n       }\n       return assigned;\n     }\n \n     // Sort the queues while holding a read lock on this parent only.\n     // The individual entries are not locked and can change which means that\n     // the collection of childQueues can not be sorted by calling Sort().\n     // Locking each childqueue to prevent changes would have a large\n     // performance impact.\n     // We do not have to handle the queue removal case as a queue must be\n     // empty before removal. Assigning an application to a queue and removal of\n     // that queue both need the scheduler lock.\n     TreeSet\u003cFSQueue\u003e sortedChildQueues \u003d new TreeSet\u003c\u003e(policy.getComparator());\n     readLock.lock();\n     try {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Node \" + node.getNodeName() + \" offered to parent queue: \" +\n+            getName() + \" visiting \" + childQueues.size() + \" children\");\n+      }\n       sortedChildQueues.addAll(childQueues);\n       for (FSQueue child : sortedChildQueues) {\n         assigned \u003d child.assignContainer(node);\n         if (!Resources.equals(assigned, Resources.none())) {\n           break;\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (!assignContainerPreCheck(node)) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Assign container precheck for queue \" + getName() +\n            \" on node \" + node.getNodeName() + \" failed\");\n      }\n      return assigned;\n    }\n\n    // Sort the queues while holding a read lock on this parent only.\n    // The individual entries are not locked and can change which means that\n    // the collection of childQueues can not be sorted by calling Sort().\n    // Locking each childqueue to prevent changes would have a large\n    // performance impact.\n    // We do not have to handle the queue removal case as a queue must be\n    // empty before removal. Assigning an application to a queue and removal of\n    // that queue both need the scheduler lock.\n    TreeSet\u003cFSQueue\u003e sortedChildQueues \u003d new TreeSet\u003c\u003e(policy.getComparator());\n    readLock.lock();\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Node \" + node.getNodeName() + \" offered to parent queue: \" +\n            getName() + \" visiting \" + childQueues.size() + \" children\");\n      }\n      sortedChildQueues.addAll(childQueues);\n      for (FSQueue child : sortedChildQueues) {\n        assigned \u003d child.assignContainer(node);\n        if (!Resources.equals(assigned, Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "2564884757fbf4df7718f814cc448f7f23dad875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8436. FSParentQueue: Comparison method violates its general contract. (Wilfred Spiegelenburg via Haibo Chen)\n",
      "commitDate": "19/07/18 1:22 PM",
      "commitName": "2564884757fbf4df7718f814cc448f7f23dad875",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "21/05/18 8:10 AM",
      "commitNameOld": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 59.22,
      "commitsBetweenForRepo": 410,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,34 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n \n     // If this queue is over its limit, reject\n     if (!assignContainerPreCheck(node)) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Assign container precheck on node \" + node + \" failed\");\n       }\n       return assigned;\n     }\n \n-    // Hold the write lock when sorting childQueues\n-    writeLock.lock();\n-    try {\n-      Collections.sort(childQueues, policy.getComparator());\n-    } finally {\n-      writeLock.unlock();\n-    }\n-\n-    /*\n-     * We are releasing the lock between the sort and iteration of the\n-     * \"sorted\" list. There could be changes to the list here:\n-     * 1. Add a child queue to the end of the list, this doesn\u0027t affect\n-     * container assignment.\n-     * 2. Remove a child queue, this is probably good to take care of so we\n-     * don\u0027t assign to a queue that is going to be removed shortly.\n-     */\n+    // Sort the queues while holding a read lock on this parent only.\n+    // The individual entries are not locked and can change which means that\n+    // the collection of childQueues can not be sorted by calling Sort().\n+    // Locking each childqueue to prevent changes would have a large\n+    // performance impact.\n+    // We do not have to handle the queue removal case as a queue must be\n+    // empty before removal. Assigning an application to a queue and removal of\n+    // that queue both need the scheduler lock.\n+    TreeSet\u003cFSQueue\u003e sortedChildQueues \u003d new TreeSet\u003c\u003e(policy.getComparator());\n     readLock.lock();\n     try {\n-      for (FSQueue child : childQueues) {\n+      sortedChildQueues.addAll(childQueues);\n+      for (FSQueue child : sortedChildQueues) {\n         assigned \u003d child.assignContainer(node);\n         if (!Resources.equals(assigned, Resources.none())) {\n           break;\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (!assignContainerPreCheck(node)) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Assign container precheck on node \" + node + \" failed\");\n      }\n      return assigned;\n    }\n\n    // Sort the queues while holding a read lock on this parent only.\n    // The individual entries are not locked and can change which means that\n    // the collection of childQueues can not be sorted by calling Sort().\n    // Locking each childqueue to prevent changes would have a large\n    // performance impact.\n    // We do not have to handle the queue removal case as a queue must be\n    // empty before removal. Assigning an application to a queue and removal of\n    // that queue both need the scheduler lock.\n    TreeSet\u003cFSQueue\u003e sortedChildQueues \u003d new TreeSet\u003c\u003e(policy.getComparator());\n    readLock.lock();\n    try {\n      sortedChildQueues.addAll(childQueues);\n      for (FSQueue child : sortedChildQueues) {\n        assigned \u003d child.assignContainer(node);\n        if (!Resources.equals(assigned, Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "20/10/17 1:32 AM",
      "commitNameOld": "1f4cdf10681b6903207a63fb5c306c9665ed9464",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 213.28,
      "commitsBetweenForRepo": 2066,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n \n     // If this queue is over its limit, reject\n     if (!assignContainerPreCheck(node)) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Assign container precheck on node \" + node + \" failed\");\n+      }\n       return assigned;\n     }\n \n     // Hold the write lock when sorting childQueues\n     writeLock.lock();\n     try {\n       Collections.sort(childQueues, policy.getComparator());\n     } finally {\n       writeLock.unlock();\n     }\n \n     /*\n      * We are releasing the lock between the sort and iteration of the\n      * \"sorted\" list. There could be changes to the list here:\n      * 1. Add a child queue to the end of the list, this doesn\u0027t affect\n      * container assignment.\n      * 2. Remove a child queue, this is probably good to take care of so we\n      * don\u0027t assign to a queue that is going to be removed shortly.\n      */\n     readLock.lock();\n     try {\n       for (FSQueue child : childQueues) {\n         assigned \u003d child.assignContainer(node);\n         if (!Resources.equals(assigned, Resources.none())) {\n           break;\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (!assignContainerPreCheck(node)) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Assign container precheck on node \" + node + \" failed\");\n      }\n      return assigned;\n    }\n\n    // Hold the write lock when sorting childQueues\n    writeLock.lock();\n    try {\n      Collections.sort(childQueues, policy.getComparator());\n    } finally {\n      writeLock.unlock();\n    }\n\n    /*\n     * We are releasing the lock between the sort and iteration of the\n     * \"sorted\" list. There could be changes to the list here:\n     * 1. Add a child queue to the end of the list, this doesn\u0027t affect\n     * container assignment.\n     * 2. Remove a child queue, this is probably good to take care of so we\n     * don\u0027t assign to a queue that is going to be removed shortly.\n     */\n    readLock.lock();\n    try {\n      for (FSQueue child : childQueues) {\n        assigned \u003d child.assignContainer(node);\n        if (!Resources.equals(assigned, Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3762. FairScheduler: CME on FSParentQueue#getQueueUserAclInfo. (kasha)\n",
      "commitDate": "03/06/15 1:47 PM",
      "commitName": "edb9cd0f7aa1ecaf34afaa120e3d79583e0ec689",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/14 10:27 AM",
      "commitNameOld": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 273.14,
      "commitsBetweenForRepo": 2415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,37 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n \n     // If this queue is over its limit, reject\n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n-    Collections.sort(childQueues, policy.getComparator());\n-    for (FSQueue child : childQueues) {\n-      assigned \u003d child.assignContainer(node);\n-      if (!Resources.equals(assigned, Resources.none())) {\n-        break;\n+    // Hold the write lock when sorting childQueues\n+    writeLock.lock();\n+    try {\n+      Collections.sort(childQueues, policy.getComparator());\n+    } finally {\n+      writeLock.unlock();\n+    }\n+\n+    /*\n+     * We are releasing the lock between the sort and iteration of the\n+     * \"sorted\" list. There could be changes to the list here:\n+     * 1. Add a child queue to the end of the list, this doesn\u0027t affect\n+     * container assignment.\n+     * 2. Remove a child queue, this is probably good to take care of so we\n+     * don\u0027t assign to a queue that is going to be removed shortly.\n+     */\n+    readLock.lock();\n+    try {\n+      for (FSQueue child : childQueues) {\n+        assigned \u003d child.assignContainer(node);\n+        if (!Resources.equals(assigned, Resources.none())) {\n+          break;\n+        }\n       }\n+    } finally {\n+      readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    // Hold the write lock when sorting childQueues\n    writeLock.lock();\n    try {\n      Collections.sort(childQueues, policy.getComparator());\n    } finally {\n      writeLock.unlock();\n    }\n\n    /*\n     * We are releasing the lock between the sort and iteration of the\n     * \"sorted\" list. There could be changes to the list here:\n     * 1. Add a child queue to the end of the list, this doesn\u0027t affect\n     * container assignment.\n     * 2. Remove a child queue, this is probably good to take care of so we\n     * don\u0027t assign to a queue that is going to be removed shortly.\n     */\n    readLock.lock();\n    try {\n      for (FSQueue child : childQueues) {\n        assigned \u003d child.assignContainer(node);\n        if (!Resources.equals(assigned, Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-595. Refactor fair scheduler to use common Resources. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475670 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 1:33 AM",
      "commitName": "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/04/13 11:11 AM",
      "commitNameOld": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,17 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n \n     // If this queue is over its limit, reject\n-    if (Resources.greaterThan(getResourceUsage(),\n-        queueMgr.getMaxResources(getName()))) {\n+    if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Collections.sort(childQueues, policy.getComparator());\n     for (FSQueue child : childQueues) {\n       assigned \u003d child.assignContainer(node);\n-      if (node.getReservedContainer() !\u003d null\n-          || Resources.greaterThan(assigned, Resources.none())) {\n+      if (!Resources.equals(assigned, Resources.none())) {\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Collections.sort(childQueues, policy.getComparator());\n    for (FSQueue child : childQueues) {\n      assigned \u003d child.assignContainer(node);\n      if (!Resources.equals(assigned, Resources.none())) {\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
      "extendedDetails": {}
    },
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 11:11 AM",
      "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "25/03/13 8:25 PM",
          "commitNameOld": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 23.62,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,19 @@\n-  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n-    throw new IllegalStateException(\n-        \"Parent queue should not be assigned container\");\n+  public Resource assignContainer(FSSchedulerNode node) {\n+    Resource assigned \u003d Resources.none();\n+\n+    // If this queue is over its limit, reject\n+    if (Resources.greaterThan(getResourceUsage(),\n+        queueMgr.getMaxResources(getName()))) {\n+      return assigned;\n+    }\n+\n+    Collections.sort(childQueues, policy.getComparator());\n+    for (FSQueue child : childQueues) {\n+      assigned \u003d child.assignContainer(node);\n+      if (node.getReservedContainer() !\u003d null\n+          || Resources.greaterThan(assigned, Resources.none())) {\n+        break;\n+      }\n+    }\n+    return assigned;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return assigned;\n    }\n\n    Collections.sort(childQueues, policy.getComparator());\n    for (FSQueue child : childQueues) {\n      assigned \u003d child.assignContainer(node);\n      if (node.getReservedContainer() !\u003d null\n          || Resources.greaterThan(assigned, Resources.none())) {\n        break;\n      }\n    }\n    return assigned;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
          "extendedDetails": {
            "oldValue": "[node-FSSchedulerNode, reserved-boolean]",
            "newValue": "[node-FSSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "25/03/13 8:25 PM",
          "commitNameOld": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 23.62,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,4 +1,19 @@\n-  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n-    throw new IllegalStateException(\n-        \"Parent queue should not be assigned container\");\n+  public Resource assignContainer(FSSchedulerNode node) {\n+    Resource assigned \u003d Resources.none();\n+\n+    // If this queue is over its limit, reject\n+    if (Resources.greaterThan(getResourceUsage(),\n+        queueMgr.getMaxResources(getName()))) {\n+      return assigned;\n+    }\n+\n+    Collections.sort(childQueues, policy.getComparator());\n+    for (FSQueue child : childQueues) {\n+      assigned \u003d child.assignContainer(node);\n+      if (node.getReservedContainer() !\u003d null\n+          || Resources.greaterThan(assigned, Resources.none())) {\n+        break;\n+      }\n+    }\n+    return assigned;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return assigned;\n    }\n\n    Collections.sort(childQueues, policy.getComparator());\n    for (FSQueue child : childQueues) {\n      assigned \u003d child.assignContainer(node);\n      if (node.getReservedContainer() !\u003d null\n          || Resources.greaterThan(assigned, Resources.none())) {\n        break;\n      }\n    }\n    return assigned;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Yintroduced",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,4 @@\n+  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n+    throw new IllegalStateException(\n+        \"Parent queue should not be assigned container\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    throw new IllegalStateException(\n        \"Parent queue should not be assigned container\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java"
    }
  }
}