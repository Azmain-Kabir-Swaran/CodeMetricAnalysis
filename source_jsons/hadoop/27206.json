{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineStorageUtils.java",
  "functionName": "matchKeyValueFilter",
  "functionId": "matchKeyValueFilter___entity-TimelineEntity__kvFilter-TimelineKeyValueFilter__entityFiltersType-TimelineEntityFiltersType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
  "functionStartLine": 128,
  "functionEndLine": 151,
  "numCommitsSeen": 17,
  "timeTaken": 1921,
  "changeHistory": [
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "b51d0fef56a59b15489f5b932025718b4e9613d2"
  ],
  "changeHistoryShort": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,24 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n-      }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n-      }\n+  private static boolean matchKeyValueFilter(TimelineEntity entity,\n+      TimelineKeyValueFilter kvFilter,\n+      TimelineEntityFiltersType entityFiltersType) {\n+    Map\u003cString, ? extends Object\u003e map \u003d null;\n+    // Supported only for config and info filters.\n+    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n+      map \u003d entity.getConfigs();\n+    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n+      map \u003d entity.getInfo();\n     }\n-    return true;\n+    if (map \u003d\u003d null) {\n+      return false;\n+    }\n+    Object value \u003d map.get(kvFilter.getKey());\n+    if (value \u003d\u003d null) {\n+      return false;\n+    }\n+    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n+    // compare op is EQUAL.\n+    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n+    // equal to the value of the key.\n+    return !(value.equals(kvFilter.getValue()) ^\n+        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchKeyValueFilter(TimelineEntity entity,\n      TimelineKeyValueFilter kvFilter,\n      TimelineEntityFiltersType entityFiltersType) {\n    Map\u003cString, ? extends Object\u003e map \u003d null;\n    // Supported only for config and info filters.\n    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n      map \u003d entity.getConfigs();\n    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n      map \u003d entity.getInfo();\n    }\n    if (map \u003d\u003d null) {\n      return false;\n    }\n    Object value \u003d map.get(kvFilter.getKey());\n    if (value \u003d\u003d null) {\n      return false;\n    }\n    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n    // compare op is EQUAL.\n    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n    // equal to the value of the key.\n    return !(value.equals(kvFilter.getValue()) ^\n        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "matchFilters",
            "newValue": "matchKeyValueFilter"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,24 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n-      }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n-      }\n+  private static boolean matchKeyValueFilter(TimelineEntity entity,\n+      TimelineKeyValueFilter kvFilter,\n+      TimelineEntityFiltersType entityFiltersType) {\n+    Map\u003cString, ? extends Object\u003e map \u003d null;\n+    // Supported only for config and info filters.\n+    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n+      map \u003d entity.getConfigs();\n+    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n+      map \u003d entity.getInfo();\n     }\n-    return true;\n+    if (map \u003d\u003d null) {\n+      return false;\n+    }\n+    Object value \u003d map.get(kvFilter.getKey());\n+    if (value \u003d\u003d null) {\n+      return false;\n+    }\n+    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n+    // compare op is EQUAL.\n+    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n+    // equal to the value of the key.\n+    return !(value.equals(kvFilter.getValue()) ^\n+        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchKeyValueFilter(TimelineEntity entity,\n      TimelineKeyValueFilter kvFilter,\n      TimelineEntityFiltersType entityFiltersType) {\n    Map\u003cString, ? extends Object\u003e map \u003d null;\n    // Supported only for config and info filters.\n    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n      map \u003d entity.getConfigs();\n    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n      map \u003d entity.getInfo();\n    }\n    if (map \u003d\u003d null) {\n      return false;\n    }\n    Object value \u003d map.get(kvFilter.getKey());\n    if (value \u003d\u003d null) {\n      return false;\n    }\n    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n    // compare op is EQUAL.\n    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n    // equal to the value of the key.\n    return !(value.equals(kvFilter.getValue()) ^\n        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[map-Map\u003cString,? extends Object\u003e, filters-Map\u003cString,? extends Object\u003e]",
            "newValue": "[entity-TimelineEntity, kvFilter-TimelineKeyValueFilter, entityFiltersType-TimelineEntityFiltersType]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,24 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n-      }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n-      }\n+  private static boolean matchKeyValueFilter(TimelineEntity entity,\n+      TimelineKeyValueFilter kvFilter,\n+      TimelineEntityFiltersType entityFiltersType) {\n+    Map\u003cString, ? extends Object\u003e map \u003d null;\n+    // Supported only for config and info filters.\n+    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n+      map \u003d entity.getConfigs();\n+    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n+      map \u003d entity.getInfo();\n     }\n-    return true;\n+    if (map \u003d\u003d null) {\n+      return false;\n+    }\n+    Object value \u003d map.get(kvFilter.getKey());\n+    if (value \u003d\u003d null) {\n+      return false;\n+    }\n+    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n+    // compare op is EQUAL.\n+    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n+    // equal to the value of the key.\n+    return !(value.equals(kvFilter.getValue()) ^\n+        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchKeyValueFilter(TimelineEntity entity,\n      TimelineKeyValueFilter kvFilter,\n      TimelineEntityFiltersType entityFiltersType) {\n    Map\u003cString, ? extends Object\u003e map \u003d null;\n    // Supported only for config and info filters.\n    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n      map \u003d entity.getConfigs();\n    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n      map \u003d entity.getInfo();\n    }\n    if (map \u003d\u003d null) {\n      return false;\n    }\n    Object value \u003d map.get(kvFilter.getKey());\n    if (value \u003d\u003d null) {\n      return false;\n    }\n    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n    // compare op is EQUAL.\n    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n    // equal to the value of the key.\n    return !(value.equals(kvFilter.getValue()) ^\n        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,24 @@\n-  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n-      Map\u003cString, ? extends Object\u003e filters) {\n-    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n-      Object value \u003d map.get(filter.getKey());\n-      if (value \u003d\u003d null) {\n-        return false;\n-      }\n-      if (!value.equals(filter.getValue())) {\n-        return false;\n-      }\n+  private static boolean matchKeyValueFilter(TimelineEntity entity,\n+      TimelineKeyValueFilter kvFilter,\n+      TimelineEntityFiltersType entityFiltersType) {\n+    Map\u003cString, ? extends Object\u003e map \u003d null;\n+    // Supported only for config and info filters.\n+    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n+      map \u003d entity.getConfigs();\n+    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n+      map \u003d entity.getInfo();\n     }\n-    return true;\n+    if (map \u003d\u003d null) {\n+      return false;\n+    }\n+    Object value \u003d map.get(kvFilter.getKey());\n+    if (value \u003d\u003d null) {\n+      return false;\n+    }\n+    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n+    // compare op is EQUAL.\n+    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n+    // equal to the value of the key.\n+    return !(value.equals(kvFilter.getValue()) ^\n+        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean matchKeyValueFilter(TimelineEntity entity,\n      TimelineKeyValueFilter kvFilter,\n      TimelineEntityFiltersType entityFiltersType) {\n    Map\u003cString, ? extends Object\u003e map \u003d null;\n    // Supported only for config and info filters.\n    if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.CONFIG) {\n      map \u003d entity.getConfigs();\n    } else if (entityFiltersType \u003d\u003d TimelineEntityFiltersType.INFO) {\n      map \u003d entity.getInfo();\n    }\n    if (map \u003d\u003d null) {\n      return false;\n    }\n    Object value \u003d map.get(kvFilter.getKey());\n    if (value \u003d\u003d null) {\n      return false;\n    }\n    // Matches if filter\u0027s value is equal to the value of the key and filter\u0027s\n    // compare op is EQUAL.\n    // If compare op is NOT_EQUAL, for a match to occur, value should not be\n    // equal to the value of the key.\n    return !(value.equals(kvFilter.getValue()) ^\n        kvFilter.getCompareOp() \u003d\u003d TimelineCompareOp.EQUAL);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,13 @@\n+  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n+      Map\u003cString, ? extends Object\u003e filters) {\n+    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n+      Object value \u003d map.get(filter.getKey());\n+      if (value \u003d\u003d null) {\n+        return false;\n+      }\n+      if (!value.equals(filter.getValue())) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean matchFilters(Map\u003cString, ? extends Object\u003e map,\n      Map\u003cString, ? extends Object\u003e filters) {\n    for (Map.Entry\u003cString, ? extends Object\u003e filter : filters.entrySet()) {\n      Object value \u003d map.get(filter.getKey());\n      if (value \u003d\u003d null) {\n        return false;\n      }\n      if (!value.equals(filter.getValue())) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimelineStorageUtils.java"
    }
  }
}