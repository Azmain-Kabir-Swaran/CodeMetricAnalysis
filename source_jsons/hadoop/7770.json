{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionUpdater.java",
  "functionName": "processCheckpoints",
  "functionId": "processCheckpoints___zoneNode-INode(modifiers-final)__tracker-ZoneSubmissionTracker(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
  "functionStartLine": 372,
  "functionEndLine": 421,
  "numCommitsSeen": 5,
  "timeTaken": 2882,
  "changeHistory": [
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24": "Ybodychange",
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13731. ReencryptionUpdater fails with ConcurrentModificationException during processCheckpoints. Contributed by Zsolt Venczel.\n",
      "commitDate": "28/08/18 3:13 PM",
      "commitName": "3e18b957ebdf20925224ab9c28e6c2f4b6bbdb24",
      "commitAuthor": "Zsolt Venczel",
      "commitDateOld": "10/04/18 11:05 AM",
      "commitNameOld": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 140.17,
      "commitsBetweenForRepo": 1546,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n       final ZoneSubmissionTracker tracker)\n       throws ExecutionException, IOException, InterruptedException {\n     assert dir.hasWriteLock();\n     final long zoneId \u003d zoneNode.getId();\n     final String zonePath \u003d zoneNode.getFullPathName();\n     final ZoneReencryptionStatus status \u003d\n         handler.getReencryptionStatus().getZoneStatus(zoneId);\n     assert status !\u003d null;\n     // always start from the beginning, because the checkpoint means all files\n     // before it are re-encrypted.\n     final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n     final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n-    while (iter.hasNext()) {\n-      Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n-      if (curr.isCancelled()) {\n-        break;\n+    synchronized (handler) {\n+      while (iter.hasNext()) {\n+        Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n+        if (curr.isCancelled()) {\n+          break;\n+        }\n+        if (!curr.isDone() || !curr.get().processed) {\n+          // still has earlier tasks not completed, skip here.\n+          break;\n+        }\n+        ReencryptionTask task \u003d curr.get();\n+        LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n+            + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n+        assert zoneId \u003d\u003d task.zoneId;\n+        try {\n+          final XAttr xattr \u003d FSDirEncryptionZoneOp\n+              .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n+                  task.numFilesUpdated, task.numFailures);\n+          xAttrs.clear();\n+          xAttrs.add(xattr);\n+        } catch (IOException ie) {\n+          LOG.warn(\"Failed to update re-encrypted progress to xattr\" +\n+                  \" for zone {}\", zonePath, ie);\n+          ++task.numFailures;\n+        }\n+        ++tracker.numCheckpointed;\n+        iter.remove();\n       }\n-      if (!curr.isDone() || !curr.get().processed) {\n-        // still has earlier tasks not completed, skip here.\n-        break;\n-      }\n-      ReencryptionTask task \u003d curr.get();\n-      LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n-          + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n-      assert zoneId \u003d\u003d task.zoneId;\n-      try {\n-        final XAttr xattr \u003d FSDirEncryptionZoneOp\n-            .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n-                task.numFilesUpdated, task.numFailures);\n-        xAttrs.clear();\n-        xAttrs.add(xattr);\n-      } catch (IOException ie) {\n-        LOG.warn(\"Failed to update re-encrypted progress to xattr for zone {}\",\n-            zonePath, ie);\n-        ++task.numFailures;\n-      }\n-      ++tracker.numCheckpointed;\n-      iter.remove();\n     }\n     if (tracker.isCompleted()) {\n       LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n               + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n       return handler.completeReencryption(zoneNode);\n     }\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n      final ZoneSubmissionTracker tracker)\n      throws ExecutionException, IOException, InterruptedException {\n    assert dir.hasWriteLock();\n    final long zoneId \u003d zoneNode.getId();\n    final String zonePath \u003d zoneNode.getFullPathName();\n    final ZoneReencryptionStatus status \u003d\n        handler.getReencryptionStatus().getZoneStatus(zoneId);\n    assert status !\u003d null;\n    // always start from the beginning, because the checkpoint means all files\n    // before it are re-encrypted.\n    final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n    final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n    synchronized (handler) {\n      while (iter.hasNext()) {\n        Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n        if (curr.isCancelled()) {\n          break;\n        }\n        if (!curr.isDone() || !curr.get().processed) {\n          // still has earlier tasks not completed, skip here.\n          break;\n        }\n        ReencryptionTask task \u003d curr.get();\n        LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n            + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n        assert zoneId \u003d\u003d task.zoneId;\n        try {\n          final XAttr xattr \u003d FSDirEncryptionZoneOp\n              .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n                  task.numFilesUpdated, task.numFailures);\n          xAttrs.clear();\n          xAttrs.add(xattr);\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to update re-encrypted progress to xattr\" +\n                  \" for zone {}\", zonePath, ie);\n          ++task.numFailures;\n        }\n        ++tracker.numCheckpointed;\n        iter.remove();\n      }\n    }\n    if (tracker.isCompleted()) {\n      LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n              + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n      return handler.completeReencryption(zoneNode);\n    }\n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12518. Re-encryption should handle task cancellation and progress better.\n",
      "commitDate": "20/10/17 4:25 PM",
      "commitName": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/09/17 7:50 PM",
      "commitNameOld": "633c1ea4554cae6cd684f60848497817d4ed3d82",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 46.86,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n       final ZoneSubmissionTracker tracker)\n       throws ExecutionException, IOException, InterruptedException {\n     assert dir.hasWriteLock();\n     final long zoneId \u003d zoneNode.getId();\n     final String zonePath \u003d zoneNode.getFullPathName();\n     final ZoneReencryptionStatus status \u003d\n         handler.getReencryptionStatus().getZoneStatus(zoneId);\n     assert status !\u003d null;\n     // always start from the beginning, because the checkpoint means all files\n     // before it are re-encrypted.\n     final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n     final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n     ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n     while (iter.hasNext()) {\n       Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n+      if (curr.isCancelled()) {\n+        break;\n+      }\n       if (!curr.isDone() || !curr.get().processed) {\n         // still has earlier tasks not completed, skip here.\n         break;\n       }\n       ReencryptionTask task \u003d curr.get();\n       LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n           + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n       assert zoneId \u003d\u003d task.zoneId;\n       try {\n         final XAttr xattr \u003d FSDirEncryptionZoneOp\n             .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n                 task.numFilesUpdated, task.numFailures);\n         xAttrs.clear();\n         xAttrs.add(xattr);\n       } catch (IOException ie) {\n         LOG.warn(\"Failed to update re-encrypted progress to xattr for zone {}\",\n             zonePath, ie);\n         ++task.numFailures;\n       }\n       ++tracker.numCheckpointed;\n       iter.remove();\n     }\n     if (tracker.isCompleted()) {\n       LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n               + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n       return handler.completeReencryption(zoneNode);\n     }\n     return xAttrs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n      final ZoneSubmissionTracker tracker)\n      throws ExecutionException, IOException, InterruptedException {\n    assert dir.hasWriteLock();\n    final long zoneId \u003d zoneNode.getId();\n    final String zonePath \u003d zoneNode.getFullPathName();\n    final ZoneReencryptionStatus status \u003d\n        handler.getReencryptionStatus().getZoneStatus(zoneId);\n    assert status !\u003d null;\n    // always start from the beginning, because the checkpoint means all files\n    // before it are re-encrypted.\n    final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n    final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n    while (iter.hasNext()) {\n      Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n      if (curr.isCancelled()) {\n        break;\n      }\n      if (!curr.isDone() || !curr.get().processed) {\n        // still has earlier tasks not completed, skip here.\n        break;\n      }\n      ReencryptionTask task \u003d curr.get();\n      LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n          + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n      assert zoneId \u003d\u003d task.zoneId;\n      try {\n        final XAttr xattr \u003d FSDirEncryptionZoneOp\n            .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n                task.numFilesUpdated, task.numFailures);\n        xAttrs.clear();\n        xAttrs.add(xattr);\n      } catch (IOException ie) {\n        LOG.warn(\"Failed to update re-encrypted progress to xattr for zone {}\",\n            zonePath, ie);\n        ++task.numFailures;\n      }\n      ++tracker.numCheckpointed;\n      iter.remove();\n    }\n    if (tracker.isCompleted()) {\n      LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n              + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n      return handler.completeReencryption(zoneNode);\n    }\n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,45 @@\n+  private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n+      final ZoneSubmissionTracker tracker)\n+      throws ExecutionException, IOException, InterruptedException {\n+    assert dir.hasWriteLock();\n+    final long zoneId \u003d zoneNode.getId();\n+    final String zonePath \u003d zoneNode.getFullPathName();\n+    final ZoneReencryptionStatus status \u003d\n+        handler.getReencryptionStatus().getZoneStatus(zoneId);\n+    assert status !\u003d null;\n+    // always start from the beginning, because the checkpoint means all files\n+    // before it are re-encrypted.\n+    final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n+    final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n+    ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n+    while (iter.hasNext()) {\n+      Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n+      if (!curr.isDone() || !curr.get().processed) {\n+        // still has earlier tasks not completed, skip here.\n+        break;\n+      }\n+      ReencryptionTask task \u003d curr.get();\n+      LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n+          + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n+      assert zoneId \u003d\u003d task.zoneId;\n+      try {\n+        final XAttr xattr \u003d FSDirEncryptionZoneOp\n+            .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n+                task.numFilesUpdated, task.numFailures);\n+        xAttrs.clear();\n+        xAttrs.add(xattr);\n+      } catch (IOException ie) {\n+        LOG.warn(\"Failed to update re-encrypted progress to xattr for zone {}\",\n+            zonePath, ie);\n+        ++task.numFailures;\n+      }\n+      ++tracker.numCheckpointed;\n+      iter.remove();\n+    }\n+    if (tracker.isCompleted()) {\n+      LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n+              + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n+      return handler.completeReencryption(zoneNode);\n+    }\n+    return xAttrs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cXAttr\u003e processCheckpoints(final INode zoneNode,\n      final ZoneSubmissionTracker tracker)\n      throws ExecutionException, IOException, InterruptedException {\n    assert dir.hasWriteLock();\n    final long zoneId \u003d zoneNode.getId();\n    final String zonePath \u003d zoneNode.getFullPathName();\n    final ZoneReencryptionStatus status \u003d\n        handler.getReencryptionStatus().getZoneStatus(zoneId);\n    assert status !\u003d null;\n    // always start from the beginning, because the checkpoint means all files\n    // before it are re-encrypted.\n    final LinkedList\u003cFuture\u003e tasks \u003d tracker.getTasks();\n    final List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(1);\n    ListIterator\u003cFuture\u003e iter \u003d tasks.listIterator();\n    while (iter.hasNext()) {\n      Future\u003cReencryptionTask\u003e curr \u003d iter.next();\n      if (!curr.isDone() || !curr.get().processed) {\n        // still has earlier tasks not completed, skip here.\n        break;\n      }\n      ReencryptionTask task \u003d curr.get();\n      LOG.debug(\"Updating re-encryption checkpoint with completed task.\"\n          + \" last: {} size:{}.\", task.lastFile, task.batch.size());\n      assert zoneId \u003d\u003d task.zoneId;\n      try {\n        final XAttr xattr \u003d FSDirEncryptionZoneOp\n            .updateReencryptionProgress(dir, zoneNode, status, task.lastFile,\n                task.numFilesUpdated, task.numFailures);\n        xAttrs.clear();\n        xAttrs.add(xattr);\n      } catch (IOException ie) {\n        LOG.warn(\"Failed to update re-encrypted progress to xattr for zone {}\",\n            zonePath, ie);\n        ++task.numFailures;\n      }\n      ++tracker.numCheckpointed;\n      iter.remove();\n    }\n    if (tracker.isCompleted()) {\n      LOG.debug(\"Removed re-encryption tracker for zone {} because it completed\"\n              + \" with {} tasks.\", zonePath, tracker.numCheckpointed);\n      return handler.completeReencryption(zoneNode);\n    }\n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java"
    }
  }
}