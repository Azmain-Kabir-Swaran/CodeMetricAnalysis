{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageHandler.java",
  "functionName": "exceptionCaught",
  "functionId": "exceptionCaught___ctx-ChannelHandlerContext__cause-Throwable",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageHandler.java",
  "functionStartLine": 140,
  "functionEndLine": 160,
  "numCommitsSeen": 16,
  "timeTaken": 1474,
  "changeHistory": [
    "bc433908d35758ff0a7225cd6f5662959ef4d294",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "675bca2968700d3627449700b827c3771827cef8"
  ],
  "changeHistoryShort": {
    "bc433908d35758ff0a7225cd6f5662959ef4d294": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "675bca2968700d3627449700b827c3771827cef8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc433908d35758ff0a7225cd6f5662959ef4d294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8462. Implement GETXATTRS and LISTXATTRS operations for WebImageViewer. Contributed by Jagadesh Kiran N.\n",
      "commitDate": "25/06/15 8:20 AM",
      "commitName": "bc433908d35758ff0a7225cd6f5662959ef4d294",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/05/15 10:30 PM",
      "commitNameOld": "ada233b7cd7db39e609bb57e487fee8cec59cd48",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 31.41,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n           throws Exception {\n     Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n       Exception(cause);\n     final String output \u003d JsonUtil.toJsonString(e);\n     ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes(Charsets.UTF_8));\n     final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n             HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n \n     resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n     if (e instanceof IllegalArgumentException) {\n       resp.setStatus(BAD_REQUEST);\n     } else if (e instanceof FileNotFoundException) {\n       resp.setStatus(NOT_FOUND);\n+    } else if (e instanceof IOException) {\n+      resp.setStatus(FORBIDDEN);\n     }\n-\n     resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());\n     resp.headers().set(CONNECTION, CLOSE);\n     ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n          throws Exception {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n      Exception(cause);\n    final String output \u003d JsonUtil.toJsonString(e);\n    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes(Charsets.UTF_8));\n    final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n            HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n\n    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n    if (e instanceof IllegalArgumentException) {\n      resp.setStatus(BAD_REQUEST);\n    } else if (e instanceof FileNotFoundException) {\n      resp.setStatus(NOT_FOUND);\n    } else if (e instanceof IOException) {\n      resp.setStatus(FORBIDDEN);\n    }\n    resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());\n    resp.headers().set(CONNECTION, CLOSE);\n    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageHandler.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/10/14 4:53 PM",
      "commitNameOld": "675bca2968700d3627449700b827c3771827cef8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 43.86,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n           throws Exception {\n     Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n       Exception(cause);\n     final String output \u003d JsonUtil.toJsonString(e);\n-    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes());\n+    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes(Charsets.UTF_8));\n     final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n             HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n \n-    resp.headers().set(\"Content-Type\", \"application/json\");\n+    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n     if (e instanceof IllegalArgumentException) {\n       resp.setStatus(BAD_REQUEST);\n     } else if (e instanceof FileNotFoundException) {\n       resp.setStatus(NOT_FOUND);\n     }\n \n-    resp.headers().set(\"Content-Length\", resp.content().readableBytes());\n-    resp.headers().set(\"Connection\", \"close\");\n+    resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());\n+    resp.headers().set(CONNECTION, CLOSE);\n     ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n          throws Exception {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n      Exception(cause);\n    final String output \u003d JsonUtil.toJsonString(e);\n    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes(Charsets.UTF_8));\n    final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n            HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n\n    resp.headers().set(CONTENT_TYPE, APPLICATION_JSON_UTF8);\n    if (e instanceof IllegalArgumentException) {\n      resp.setStatus(BAD_REQUEST);\n    } else if (e instanceof FileNotFoundException) {\n      resp.setStatus(NOT_FOUND);\n    }\n\n    resp.headers().set(CONTENT_LENGTH, resp.content().readableBytes());\n    resp.headers().set(CONNECTION, CLOSE);\n    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageHandler.java",
      "extendedDetails": {}
    },
    "675bca2968700d3627449700b827c3771827cef8": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7280. Use netty 4 in WebImageViewer. Contributed by Haohui Mai.\n",
      "commitDate": "28/10/14 4:53 PM",
      "commitName": "675bca2968700d3627449700b827c3771827cef8",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,20 @@\n+  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n+          throws Exception {\n+    Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n+      Exception(cause);\n+    final String output \u003d JsonUtil.toJsonString(e);\n+    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes());\n+    final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n+            HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n+\n+    resp.headers().set(\"Content-Type\", \"application/json\");\n+    if (e instanceof IllegalArgumentException) {\n+      resp.setStatus(BAD_REQUEST);\n+    } else if (e instanceof FileNotFoundException) {\n+      resp.setStatus(NOT_FOUND);\n+    }\n+\n+    resp.headers().set(\"Content-Length\", resp.content().readableBytes());\n+    resp.headers().set(\"Connection\", \"close\");\n+    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n          throws Exception {\n    Exception e \u003d cause instanceof Exception ? (Exception) cause : new\n      Exception(cause);\n    final String output \u003d JsonUtil.toJsonString(e);\n    ByteBuf content \u003d Unpooled.wrappedBuffer(output.getBytes());\n    final DefaultFullHttpResponse resp \u003d new DefaultFullHttpResponse(\n            HTTP_1_1, INTERNAL_SERVER_ERROR, content);\n\n    resp.headers().set(\"Content-Type\", \"application/json\");\n    if (e instanceof IllegalArgumentException) {\n      resp.setStatus(BAD_REQUEST);\n    } else if (e instanceof FileNotFoundException) {\n      resp.setStatus(NOT_FOUND);\n    }\n\n    resp.headers().set(\"Content-Length\", resp.content().readableBytes());\n    resp.headers().set(\"Connection\", \"close\");\n    ctx.write(resp).addListener(ChannelFutureListener.CLOSE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageHandler.java"
    }
  }
}