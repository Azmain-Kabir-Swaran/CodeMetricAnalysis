{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueue.java",
  "functionName": "getQueueStatistics",
  "functionId": "getQueueStatistics",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
  "functionStartLine": 266,
  "functionEndLine": 288,
  "numCommitsSeen": 60,
  "timeTaken": 1870,
  "changeHistory": [
    "9f0aea0ee2c680afd26ef9da6ac662be00d8e24f",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0"
  ],
  "changeHistoryShort": {
    "9f0aea0ee2c680afd26ef9da6ac662be00d8e24f": "Ybodychange",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9f0aea0ee2c680afd26ef9da6ac662be00d8e24f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6481. Yarn top shows negative container number in FS\n(Contributed by Tao Jie via Daniel Templeton)\n",
      "commitDate": "02/05/17 1:06 PM",
      "commitName": "9f0aea0ee2c680afd26ef9da6ac662be00d8e24f",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "10/03/17 4:13 PM",
      "commitNameOld": "4db9cc70d0178703fb28f451eb84d97f2bf63af8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 52.83,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public QueueStatistics getQueueStatistics() {\n     QueueStatistics stats \u003d\n         recordFactory.newRecordInstance(QueueStatistics.class);\n     stats.setNumAppsSubmitted(getMetrics().getAppsSubmitted());\n     stats.setNumAppsRunning(getMetrics().getAppsRunning());\n     stats.setNumAppsPending(getMetrics().getAppsPending());\n     stats.setNumAppsCompleted(getMetrics().getAppsCompleted());\n     stats.setNumAppsKilled(getMetrics().getAppsKilled());\n     stats.setNumAppsFailed(getMetrics().getAppsFailed());\n     stats.setNumActiveUsers(getMetrics().getActiveUsers());\n     stats.setAvailableMemoryMB(getMetrics().getAvailableMB());\n     stats.setAllocatedMemoryMB(getMetrics().getAllocatedMB());\n     stats.setPendingMemoryMB(getMetrics().getPendingMB());\n     stats.setReservedMemoryMB(getMetrics().getReservedMB());\n     stats.setAvailableVCores(getMetrics().getAvailableVirtualCores());\n     stats.setAllocatedVCores(getMetrics().getAllocatedVirtualCores());\n     stats.setPendingVCores(getMetrics().getPendingVirtualCores());\n     stats.setReservedVCores(getMetrics().getReservedVirtualCores());\n+    stats.setAllocatedContainers(getMetrics().getAllocatedContainers());\n+    stats.setPendingContainers(getMetrics().getPendingContainers());\n+    stats.setReservedContainers(getMetrics().getReservedContainers());\n     return stats;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueStatistics getQueueStatistics() {\n    QueueStatistics stats \u003d\n        recordFactory.newRecordInstance(QueueStatistics.class);\n    stats.setNumAppsSubmitted(getMetrics().getAppsSubmitted());\n    stats.setNumAppsRunning(getMetrics().getAppsRunning());\n    stats.setNumAppsPending(getMetrics().getAppsPending());\n    stats.setNumAppsCompleted(getMetrics().getAppsCompleted());\n    stats.setNumAppsKilled(getMetrics().getAppsKilled());\n    stats.setNumAppsFailed(getMetrics().getAppsFailed());\n    stats.setNumActiveUsers(getMetrics().getActiveUsers());\n    stats.setAvailableMemoryMB(getMetrics().getAvailableMB());\n    stats.setAllocatedMemoryMB(getMetrics().getAllocatedMB());\n    stats.setPendingMemoryMB(getMetrics().getPendingMB());\n    stats.setReservedMemoryMB(getMetrics().getReservedMB());\n    stats.setAvailableVCores(getMetrics().getAvailableVirtualCores());\n    stats.setAllocatedVCores(getMetrics().getAllocatedVirtualCores());\n    stats.setPendingVCores(getMetrics().getPendingVirtualCores());\n    stats.setReservedVCores(getMetrics().getReservedVirtualCores());\n    stats.setAllocatedContainers(getMetrics().getAllocatedContainers());\n    stats.setPendingContainers(getMetrics().getPendingContainers());\n    stats.setReservedContainers(getMetrics().getReservedContainers());\n    return stats;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java",
      "extendedDetails": {}
    },
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,20 @@\n+  public QueueStatistics getQueueStatistics() {\n+    QueueStatistics stats \u003d\n+        recordFactory.newRecordInstance(QueueStatistics.class);\n+    stats.setNumAppsSubmitted(getMetrics().getAppsSubmitted());\n+    stats.setNumAppsRunning(getMetrics().getAppsRunning());\n+    stats.setNumAppsPending(getMetrics().getAppsPending());\n+    stats.setNumAppsCompleted(getMetrics().getAppsCompleted());\n+    stats.setNumAppsKilled(getMetrics().getAppsKilled());\n+    stats.setNumAppsFailed(getMetrics().getAppsFailed());\n+    stats.setNumActiveUsers(getMetrics().getActiveUsers());\n+    stats.setAvailableMemoryMB(getMetrics().getAvailableMB());\n+    stats.setAllocatedMemoryMB(getMetrics().getAllocatedMB());\n+    stats.setPendingMemoryMB(getMetrics().getPendingMB());\n+    stats.setReservedMemoryMB(getMetrics().getReservedMB());\n+    stats.setAvailableVCores(getMetrics().getAvailableVirtualCores());\n+    stats.setAllocatedVCores(getMetrics().getAllocatedVirtualCores());\n+    stats.setPendingVCores(getMetrics().getPendingVirtualCores());\n+    stats.setReservedVCores(getMetrics().getReservedVirtualCores());\n+    return stats;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public QueueStatistics getQueueStatistics() {\n    QueueStatistics stats \u003d\n        recordFactory.newRecordInstance(QueueStatistics.class);\n    stats.setNumAppsSubmitted(getMetrics().getAppsSubmitted());\n    stats.setNumAppsRunning(getMetrics().getAppsRunning());\n    stats.setNumAppsPending(getMetrics().getAppsPending());\n    stats.setNumAppsCompleted(getMetrics().getAppsCompleted());\n    stats.setNumAppsKilled(getMetrics().getAppsKilled());\n    stats.setNumAppsFailed(getMetrics().getAppsFailed());\n    stats.setNumActiveUsers(getMetrics().getActiveUsers());\n    stats.setAvailableMemoryMB(getMetrics().getAvailableMB());\n    stats.setAllocatedMemoryMB(getMetrics().getAllocatedMB());\n    stats.setPendingMemoryMB(getMetrics().getPendingMB());\n    stats.setReservedMemoryMB(getMetrics().getReservedMB());\n    stats.setAvailableVCores(getMetrics().getAvailableVirtualCores());\n    stats.setAllocatedVCores(getMetrics().getAllocatedVirtualCores());\n    stats.setPendingVCores(getMetrics().getPendingVirtualCores());\n    stats.setReservedVCores(getMetrics().getReservedVirtualCores());\n    return stats;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueue.java"
    }
  }
}