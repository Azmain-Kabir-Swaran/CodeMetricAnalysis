{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "removeVolumes",
  "functionId": "removeVolumes___storageLocations-Collection__StorageLocation__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 505,
  "functionEndLine": 542,
  "numCommitsSeen": 172,
  "timeTaken": 6545,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "63320d1daab7ce846bb180623378efe431ad8c52",
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7",
    "e9f1396834174646a8d7aa8fc6c4a4f724ca5b28",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "b49c3a1813aa8c5b05fe6c02a653286c573137ca",
    "40a415799b1ff3602fbb461765f8b36f1133bda2",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
    "912ad32b03c1e023ab88918bfa8cb356d1851545",
    "7eab2a29a5706ce10912c12fa225ef6b27a82cbe"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "63320d1daab7ce846bb180623378efe431ad8c52": "Ybodychange",
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7": "Ybodychange",
    "e9f1396834174646a8d7aa8fc6c4a4f724ca5b28": "Ybodychange",
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ymultichange(Yparameterchange,Ybodychange)",
    "b49c3a1813aa8c5b05fe6c02a653286c573137ca": "Ymultichange(Yparameterchange,Ybodychange)",
    "40a415799b1ff3602fbb461765f8b36f1133bda2": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": "Ymultichange(Yexceptionschange,Ybodychange)",
    "912ad32b03c1e023ab88918bfa8cb356d1851545": "Ybodychange",
    "7eab2a29a5706ce10912c12fa225ef6b27a82cbe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   synchronized void removeVolumes(\n       final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n     if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       StorageLocation sdLocation \u003d sd.getStorageLocation();\n       if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         getStorageDirs().remove(sd);\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n-          LOG.warn(String.format(\n-            \"I/O error attempting to unlock storage directory %s.\",\n-            sd.getRoot()), e);\n+          LOG.warn(\"I/O error attempting to unlock storage directory {}.\",\n+              sd.getRoot(), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        getStorageDirs().remove(sd);\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(\"I/O error attempting to unlock storage directory {}.\",\n              sd.getRoot(), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "63320d1daab7ce846bb180623378efe431ad8c52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11287. Storage class member storageDirs should be private to avoid unprotected access by derived classes. (Manoj Govindassamy via lei)\n",
      "commitDate": "18/01/17 11:38 PM",
      "commitName": "63320d1daab7ce846bb180623378efe431ad8c52",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "29/12/16 12:57 AM",
      "commitNameOld": "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 20.94,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   synchronized void removeVolumes(\n       final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n     if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       StorageLocation sdLocation \u003d sd.getStorageLocation();\n       if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n-        this.storageDirs.remove(sd);\n+        getStorageDirs().remove(sd);\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        getStorageDirs().remove(sd);\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11267. Avoid redefinition of storageDirs in NNStorage and cleanup its accessors in Storage. (Manoj Govindassamy via lei)\n",
      "commitDate": "29/12/16 12:57 AM",
      "commitName": "a4f66655ec22ca8c960f971f2b0cdafbd3430ad7",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "28/12/16 11:11 PM",
      "commitNameOld": "e9f1396834174646a8d7aa8fc6c4a4f724ca5b28",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   synchronized void removeVolumes(\n       final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n     if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n-    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n+    for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       StorageLocation sdLocation \u003d sd.getStorageLocation();\n       if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         this.storageDirs.remove(sd);\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d getStorageDirs().iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        this.storageDirs.remove(sd);\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "e9f1396834174646a8d7aa8fc6c4a4f724ca5b28": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11251. ConcurrentModificationException during DataNode#refreshVolumes. (Manoj Govindassamy via lei)\n",
      "commitDate": "28/12/16 11:11 PM",
      "commitName": "e9f1396834174646a8d7aa8fc6c4a4f724ca5b28",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "14/12/16 11:18 AM",
      "commitNameOld": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 14.49,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   synchronized void removeVolumes(\n       final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n     if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       StorageLocation sdLocation \u003d sd.getStorageLocation();\n       if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n-        it.remove();\n+        this.storageDirs.remove(sd);\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        this.storageDirs.remove(sd);\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,39 @@\n-  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n+  synchronized void removeVolumes(\n+      final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n-    if (dirsToRemove.isEmpty()) {\n+    if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n-      if (dirsToRemove.contains(sd.getRoot())) {\n+      StorageLocation sdLocation \u003d sd.getStorageLocation();\n+      if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[dirsToRemove-Set\u003cFile\u003e(modifiers-final)]",
            "newValue": "[storageLocations-Collection\u003cStorageLocation\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,39 @@\n-  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n+  synchronized void removeVolumes(\n+      final Collection\u003cStorageLocation\u003e storageLocations)\n       throws IOException {\n-    if (dirsToRemove.isEmpty()) {\n+    if (storageLocations.isEmpty()) {\n       return;\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n-      if (dirsToRemove.contains(sd.getRoot())) {\n+      StorageLocation sdLocation \u003d sd.getStorageLocation();\n+      if (storageLocations.contains(sdLocation)) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(\n      final Collection\u003cStorageLocation\u003e storageLocations)\n      throws IOException {\n    if (storageLocations.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      StorageLocation sdLocation \u003d sd.getStorageLocation();\n      if (storageLocations.contains(sdLocation)) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "b49c3a1813aa8c5b05fe6c02a653286c573137ca": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7722. DataNode#checkDiskError should also remove Storage when error is found. (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "12/03/15 12:00 PM",
      "commitName": "b49c3a1813aa8c5b05fe6c02a653286c573137ca",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7722. DataNode#checkDiskError should also remove Storage when error is found. (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "12/03/15 12:00 PM",
          "commitName": "b49c3a1813aa8c5b05fe6c02a653286c573137ca",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "04/03/15 5:51 PM",
          "commitNameOld": "430b5371883e22abb65f37c3e3d4afc3f421fc89",
          "commitAuthorOld": "Dongming Liang",
          "daysBetweenCommits": 7.71,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,37 @@\n-  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n+  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n       throws IOException {\n-    if (locations.isEmpty()) {\n+    if (dirsToRemove.isEmpty()) {\n       return;\n     }\n \n-    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n-    for (StorageLocation sl : locations) {\n-      dataDirs.add(sl.getFile());\n-    }\n-\n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n-      if (dataDirs.contains(sd.getRoot())) {\n+      if (dirsToRemove.contains(sd.getRoot())) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n      throws IOException {\n    if (dirsToRemove.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dirsToRemove.contains(sd.getRoot())) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[locations-Collection\u003cStorageLocation\u003e]",
            "newValue": "[dirsToRemove-Set\u003cFile\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7722. DataNode#checkDiskError should also remove Storage when error is found. (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "12/03/15 12:00 PM",
          "commitName": "b49c3a1813aa8c5b05fe6c02a653286c573137ca",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "04/03/15 5:51 PM",
          "commitNameOld": "430b5371883e22abb65f37c3e3d4afc3f421fc89",
          "commitAuthorOld": "Dongming Liang",
          "daysBetweenCommits": 7.71,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,37 @@\n-  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n+  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n       throws IOException {\n-    if (locations.isEmpty()) {\n+    if (dirsToRemove.isEmpty()) {\n       return;\n     }\n \n-    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n-    for (StorageLocation sl : locations) {\n-      dataDirs.add(sl.getFile());\n-    }\n-\n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n-      if (dataDirs.contains(sd.getRoot())) {\n+      if (dirsToRemove.contains(sd.getRoot())) {\n         // Remove the block pool level storage first.\n         for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n             this.bpStorageMap.entrySet()) {\n           String bpid \u003d entry.getKey();\n           BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n           File bpRoot \u003d\n               BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n           bpsStorage.remove(bpRoot.getAbsoluteFile());\n         }\n \n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(final Set\u003cFile\u003e dirsToRemove)\n      throws IOException {\n    if (dirsToRemove.isEmpty()) {\n      return;\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dirsToRemove.contains(sd.getRoot())) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "40a415799b1ff3602fbb461765f8b36f1133bda2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7719. BlockPoolSliceStorage#removeVolumes fails to remove some in-memory state associated with volumes. (Lei (Eddy) Xu via Colin P. McCabe)\n",
      "commitDate": "04/02/15 12:10 PM",
      "commitName": "40a415799b1ff3602fbb461765f8b36f1133bda2",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "22/01/15 2:08 PM",
      "commitNameOld": "d34074e237ee10b83aeb02294f595714d43e39e4",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 12.92,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n       throws IOException {\n     if (locations.isEmpty()) {\n       return;\n     }\n \n     Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n     for (StorageLocation sl : locations) {\n       dataDirs.add(sl.getFile());\n     }\n \n-    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n-      bpsStorage.removeVolumes(dataDirs);\n-    }\n-\n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       if (dataDirs.contains(sd.getRoot())) {\n+        // Remove the block pool level storage first.\n+        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n+            this.bpStorageMap.entrySet()) {\n+          String bpid \u003d entry.getKey();\n+          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n+          File bpRoot \u003d\n+              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n+          bpsStorage.remove(bpRoot.getAbsoluteFile());\n+        }\n+\n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n           errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n      throws IOException {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        // Remove the block pool level storage first.\n        for (Map.Entry\u003cString, BlockPoolSliceStorage\u003e entry :\n            this.bpStorageMap.entrySet()) {\n          String bpid \u003d entry.getKey();\n          BlockPoolSliceStorage bpsStorage \u003d entry.getValue();\n          File bpRoot \u003d\n              BlockPoolSliceStorage.getBpRoot(bpid, sd.getCurrentDir());\n          bpsStorage.remove(bpRoot.getAbsoluteFile());\n        }\n\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/10/14 5:31 PM",
      "commitNameOld": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 41.84,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n       throws IOException {\n     if (locations.isEmpty()) {\n       return;\n     }\n \n     Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n     for (StorageLocation sl : locations) {\n       dataDirs.add(sl.getFile());\n     }\n \n     for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n       bpsStorage.removeVolumes(dataDirs);\n     }\n \n     StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       if (dataDirs.contains(sd.getRoot())) {\n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n-          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s\\n\",\n+          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n               sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n     if (errorMsgBuilder.length() \u003e 0) {\n       throw new IOException(errorMsgBuilder.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n      throws IOException {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n      bpsStorage.removeVolumes(dataDirs);\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s%n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a9331fe9b071fdcdae0c6c747d7b6b306142e671": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "30/10/14 5:31 PM",
      "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "30/10/14 5:31 PM",
          "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "22/09/14 6:00 PM",
          "commitNameOld": "889122bd5580b6a83d35ef945db7ec001b7b550a",
          "commitAuthorOld": "",
          "daysBetweenCommits": 37.98,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,36 @@\n-  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n+  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n+      throws IOException {\n     if (locations.isEmpty()) {\n       return;\n     }\n \n     Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n     for (StorageLocation sl : locations) {\n       dataDirs.add(sl.getFile());\n     }\n \n     for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n       bpsStorage.removeVolumes(dataDirs);\n     }\n \n+    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       if (dataDirs.contains(sd.getRoot())) {\n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n+          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s\\n\",\n+              sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n+    if (errorMsgBuilder.length() \u003e 0) {\n+      throw new IOException(errorMsgBuilder.toString());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n      throws IOException {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n      bpsStorage.removeVolumes(dataDirs);\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s\\n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7035. Make adding a new data directory to the DataNode an atomic operation and improve error handling (Lei Xu via Colin P. McCabe)\n",
          "commitDate": "30/10/14 5:31 PM",
          "commitName": "a9331fe9b071fdcdae0c6c747d7b6b306142e671",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "22/09/14 6:00 PM",
          "commitNameOld": "889122bd5580b6a83d35ef945db7ec001b7b550a",
          "commitAuthorOld": "",
          "daysBetweenCommits": 37.98,
          "commitsBetweenForRepo": 371,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,36 @@\n-  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n+  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n+      throws IOException {\n     if (locations.isEmpty()) {\n       return;\n     }\n \n     Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n     for (StorageLocation sl : locations) {\n       dataDirs.add(sl.getFile());\n     }\n \n     for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n       bpsStorage.removeVolumes(dataDirs);\n     }\n \n+    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       if (dataDirs.contains(sd.getRoot())) {\n         it.remove();\n         try {\n           sd.unlock();\n         } catch (IOException e) {\n           LOG.warn(String.format(\n             \"I/O error attempting to unlock storage directory %s.\",\n             sd.getRoot()), e);\n+          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s\\n\",\n+              sd.getRoot(), e.getMessage()));\n         }\n       }\n     }\n+    if (errorMsgBuilder.length() \u003e 0) {\n+      throw new IOException(errorMsgBuilder.toString());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations)\n      throws IOException {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n      bpsStorage.removeVolumes(dataDirs);\n    }\n\n    StringBuilder errorMsgBuilder \u003d new StringBuilder();\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n          errorMsgBuilder.append(String.format(\"Failed to remove %s: %s\\n\",\n              sd.getRoot(), e.getMessage()));\n        }\n      }\n    }\n    if (errorMsgBuilder.length() \u003e 0) {\n      throw new IOException(errorMsgBuilder.toString());\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "912ad32b03c1e023ab88918bfa8cb356d1851545": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7106. Reconfiguring DataNode volumes does not release the lock files in removed volumes. (cnauroth via cmccabe)\n",
      "commitDate": "22/09/14 11:51 AM",
      "commitName": "912ad32b03c1e023ab88918bfa8cb356d1851545",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "08/09/14 9:20 PM",
      "commitNameOld": "f949f6b54825dac61511a5761837e2fd14437239",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 13.6,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,29 @@\n   synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n     if (locations.isEmpty()) {\n       return;\n     }\n \n     Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n     for (StorageLocation sl : locations) {\n       dataDirs.add(sl.getFile());\n     }\n \n     for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n       bpsStorage.removeVolumes(dataDirs);\n     }\n \n     for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n          it.hasNext(); ) {\n       StorageDirectory sd \u003d it.next();\n       if (dataDirs.contains(sd.getRoot())) {\n         it.remove();\n+        try {\n+          sd.unlock();\n+        } catch (IOException e) {\n+          LOG.warn(String.format(\n+            \"I/O error attempting to unlock storage directory %s.\",\n+            sd.getRoot()), e);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n      bpsStorage.removeVolumes(dataDirs);\n    }\n\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        it.remove();\n        try {\n          sd.unlock();\n        } catch (IOException e) {\n          LOG.warn(String.format(\n            \"I/O error attempting to unlock storage directory %s.\",\n            sd.getRoot()), e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "7eab2a29a5706ce10912c12fa225ef6b27a82cbe": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6774. Make FsDataset and DataStore support removing volumes. Contributed by Lei Xu.\n",
      "commitDate": "29/08/14 1:00 PM",
      "commitName": "7eab2a29a5706ce10912c12fa225ef6b27a82cbe",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,22 @@\n+  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n+    if (locations.isEmpty()) {\n+      return;\n+    }\n+\n+    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n+    for (StorageLocation sl : locations) {\n+      dataDirs.add(sl.getFile());\n+    }\n+\n+    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n+      bpsStorage.removeVolumes(dataDirs);\n+    }\n+\n+    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n+         it.hasNext(); ) {\n+      StorageDirectory sd \u003d it.next();\n+      if (dataDirs.contains(sd.getRoot())) {\n+        it.remove();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void removeVolumes(Collection\u003cStorageLocation\u003e locations) {\n    if (locations.isEmpty()) {\n      return;\n    }\n\n    Set\u003cFile\u003e dataDirs \u003d new HashSet\u003cFile\u003e();\n    for (StorageLocation sl : locations) {\n      dataDirs.add(sl.getFile());\n    }\n\n    for (BlockPoolSliceStorage bpsStorage : this.bpStorageMap.values()) {\n      bpsStorage.removeVolumes(dataDirs);\n    }\n\n    for (Iterator\u003cStorageDirectory\u003e it \u003d this.storageDirs.iterator();\n         it.hasNext(); ) {\n      StorageDirectory sd \u003d it.next();\n      if (dataDirs.contains(sd.getRoot())) {\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}