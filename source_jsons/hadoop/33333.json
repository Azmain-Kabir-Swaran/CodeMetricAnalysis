{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePluginManager.java",
  "functionName": "initializePlugins",
  "functionId": "initializePlugins___conf-Configuration__context-Context__plugins-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
  "functionStartLine": 104,
  "functionEndLine": 134,
  "numCommitsSeen": 25,
  "timeTaken": 2329,
  "changeHistory": [
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3"
  ],
  "changeHistoryShort": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": "Ymultichange(Yparameterchange,Ybodychange)",
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
      "commitDate": "21/08/19 7:44 AM",
      "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
          "commitDate": "21/08/19 7:44 AM",
          "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "14/08/19 7:58 AM",
          "commitNameOld": "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Map\u003cString, ResourcePlugin\u003e initializePlugins(\n+  private Map\u003cString, ResourcePlugin\u003e initializePlugins(Configuration conf,\n       Context context, String[] plugins) throws YarnException {\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n \n     for (String resourceName : plugins) {\n       resourceName \u003d resourceName.trim();\n       ensurePluginIsSupported(resourceName);\n \n       if (!isPluginDuplicate(pluginMap, resourceName)) {\n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n           final GpuNodeResourceUpdateHandler updateHandler \u003d\n-              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n+              new GpuNodeResourceUpdateHandler(gpuDiscoverer, conf);\n           plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n         } else if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         LOG.info(\"Initialized plugin {}\", plugin);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     return pluginMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, ResourcePlugin\u003e initializePlugins(Configuration conf,\n      Context context, String[] plugins) throws YarnException {\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n\n    for (String resourceName : plugins) {\n      resourceName \u003d resourceName.trim();\n      ensurePluginIsSupported(resourceName);\n\n      if (!isPluginDuplicate(pluginMap, resourceName)) {\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n          final GpuNodeResourceUpdateHandler updateHandler \u003d\n              new GpuNodeResourceUpdateHandler(gpuDiscoverer, conf);\n          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    return pluginMap;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
          "extendedDetails": {
            "oldValue": "[context-Context, plugins-String[]]",
            "newValue": "[conf-Configuration, context-Context, plugins-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9217. Nodemanager will fail to start if GPU is misconfigured on the node or GPU drivers missing. Contributed by Peter Bacsko\n",
          "commitDate": "21/08/19 7:44 AM",
          "commitName": "e8fa192f07b6f2e7a0b03813edca03c505a8ac1b",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "14/08/19 7:58 AM",
          "commitNameOld": "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 63,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Map\u003cString, ResourcePlugin\u003e initializePlugins(\n+  private Map\u003cString, ResourcePlugin\u003e initializePlugins(Configuration conf,\n       Context context, String[] plugins) throws YarnException {\n     Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n \n     for (String resourceName : plugins) {\n       resourceName \u003d resourceName.trim();\n       ensurePluginIsSupported(resourceName);\n \n       if (!isPluginDuplicate(pluginMap, resourceName)) {\n         ResourcePlugin plugin \u003d null;\n         if (resourceName.equals(GPU_URI)) {\n           final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n           final GpuNodeResourceUpdateHandler updateHandler \u003d\n-              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n+              new GpuNodeResourceUpdateHandler(gpuDiscoverer, conf);\n           plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n         } else if (resourceName.equals(FPGA_URI)) {\n           plugin \u003d new FpgaResourcePlugin();\n         }\n \n         if (plugin \u003d\u003d null) {\n           throw new YarnException(\n               \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                   + \" should be loaded and initialized\");\n         }\n         plugin.initialize(context);\n         LOG.info(\"Initialized plugin {}\", plugin);\n         pluginMap.put(resourceName, plugin);\n       }\n     }\n     return pluginMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, ResourcePlugin\u003e initializePlugins(Configuration conf,\n      Context context, String[] plugins) throws YarnException {\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n\n    for (String resourceName : plugins) {\n      resourceName \u003d resourceName.trim();\n      ensurePluginIsSupported(resourceName);\n\n      if (!isPluginDuplicate(pluginMap, resourceName)) {\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n          final GpuNodeResourceUpdateHandler updateHandler \u003d\n              new GpuNodeResourceUpdateHandler(gpuDiscoverer, conf);\n          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    return pluginMap;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5e609384f68cc45b0c2bfbde0a49426c90017d3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9140. Code cleanup in ResourcePluginManager.initialize and in TestResourcePluginManager. Contributed by Peter Bacsko\n",
      "commitDate": "14/08/19 7:58 AM",
      "commitName": "e5e609384f68cc45b0c2bfbde0a49426c90017d3",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,31 @@\n+  private Map\u003cString, ResourcePlugin\u003e initializePlugins(\n+      Context context, String[] plugins) throws YarnException {\n+    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n+\n+    for (String resourceName : plugins) {\n+      resourceName \u003d resourceName.trim();\n+      ensurePluginIsSupported(resourceName);\n+\n+      if (!isPluginDuplicate(pluginMap, resourceName)) {\n+        ResourcePlugin plugin \u003d null;\n+        if (resourceName.equals(GPU_URI)) {\n+          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n+          final GpuNodeResourceUpdateHandler updateHandler \u003d\n+              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n+          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n+        } else if (resourceName.equals(FPGA_URI)) {\n+          plugin \u003d new FpgaResourcePlugin();\n+        }\n+\n+        if (plugin \u003d\u003d null) {\n+          throw new YarnException(\n+              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n+                  + \" should be loaded and initialized\");\n+        }\n+        plugin.initialize(context);\n+        LOG.info(\"Initialized plugin {}\", plugin);\n+        pluginMap.put(resourceName, plugin);\n+      }\n+    }\n+    return pluginMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, ResourcePlugin\u003e initializePlugins(\n      Context context, String[] plugins) throws YarnException {\n    Map\u003cString, ResourcePlugin\u003e pluginMap \u003d Maps.newHashMap();\n\n    for (String resourceName : plugins) {\n      resourceName \u003d resourceName.trim();\n      ensurePluginIsSupported(resourceName);\n\n      if (!isPluginDuplicate(pluginMap, resourceName)) {\n        ResourcePlugin plugin \u003d null;\n        if (resourceName.equals(GPU_URI)) {\n          final GpuDiscoverer gpuDiscoverer \u003d new GpuDiscoverer();\n          final GpuNodeResourceUpdateHandler updateHandler \u003d\n              new GpuNodeResourceUpdateHandler(gpuDiscoverer);\n          plugin \u003d new GpuResourcePlugin(updateHandler, gpuDiscoverer);\n        } else if (resourceName.equals(FPGA_URI)) {\n          plugin \u003d new FpgaResourcePlugin();\n        }\n\n        if (plugin \u003d\u003d null) {\n          throw new YarnException(\n              \"This shouldn\u0027t happen, plugin\u003d\" + resourceName\n                  + \" should be loaded and initialized\");\n        }\n        plugin.initialize(context);\n        LOG.info(\"Initialized plugin {}\", plugin);\n        pluginMap.put(resourceName, plugin);\n      }\n    }\n    return pluginMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java"
    }
  }
}