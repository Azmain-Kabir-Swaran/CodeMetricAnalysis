{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AmFilterInitializer.java",
  "functionName": "initFilter",
  "functionId": "initFilter___container-FilterContainer__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
  "functionStartLine": 43,
  "functionEndLine": 79,
  "numCommitsSeen": 11,
  "timeTaken": 2675,
  "changeHistory": [
    "55c32776b1f130c6b81ef7aff5fc1562180f4601",
    "87ea1dff9c431fb88e064e497b35fc17c65f1d53",
    "4111e6c7819d66e17e0932302c589777a355dbae",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
    "4224e613409ec97ff52ba28a7cedfe0485577257",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
    "4bca22005f48f426b9bc7cf36d435ead470a2590",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421"
  ],
  "changeHistoryShort": {
    "55c32776b1f130c6b81ef7aff5fc1562180f4601": "Ybodychange",
    "87ea1dff9c431fb88e064e497b35fc17c65f1d53": "Ybodychange",
    "4111e6c7819d66e17e0932302c589777a355dbae": "Ybodychange",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": "Ybodychange",
    "4224e613409ec97ff52ba28a7cedfe0485577257": "Ybodychange",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": "Ybodychange",
    "4bca22005f48f426b9bc7cf36d435ead470a2590": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55c32776b1f130c6b81ef7aff5fc1562180f4601": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7801. AmFilterInitializer should addFilter after fill all parameters. Contributed by Wangda Tan\n",
      "commitDate": "24/01/18 11:17 AM",
      "commitName": "55c32776b1f130c6b81ef7aff5fc1562180f4601",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/10/17 10:41 AM",
      "commitNameOld": "87ea1dff9c431fb88e064e497b35fc17c65f1d53",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 102.07,
      "commitsBetweenForRepo": 662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n     StringBuilder sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n \n     String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n     String proxyBase \u003d getApplicationWebProxyBase();\n     sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(prefix).append(proxy).append(proxyBase)\n           .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n-    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n \n     // Handle RM HA urls\n     // Include yarn-site.xml in the classpath\n     YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n     Collection\u003cString\u003e rmIds \u003d getRmIds(yarnConf);\n     if (rmIds !\u003d null) {\n       List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n       for (String rmId : rmIds) {\n         String url \u003d getUrlByRmId(yarnConf, rmId);\n         urls.add(url);\n       }\n       if (!urls.isEmpty()) {\n         params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n       }\n     }\n+\n+    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n    StringBuilder sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n\n    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n    String proxyBase \u003d getApplicationWebProxyBase();\n    sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(prefix).append(proxy).append(proxyBase)\n          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n\n    // Handle RM HA urls\n    // Include yarn-site.xml in the classpath\n    YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n    Collection\u003cString\u003e rmIds \u003d getRmIds(yarnConf);\n    if (rmIds !\u003d null) {\n      List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n      for (String rmId : rmIds) {\n        String url \u003d getUrlByRmId(yarnConf, rmId);\n        urls.add(url);\n      }\n      if (!urls.isEmpty()) {\n        params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n      }\n    }\n\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "87ea1dff9c431fb88e064e497b35fc17c65f1d53": {
      "type": "Ybodychange",
      "commitMessage": "Addendum fix for: YARN-7269. Tracking URL in the app state does not get redirected to ApplicationMaster for Running applications. (Wangda Tan)\n\nChange-Id: If1fe4a62e07b25e6f1b8ba803495da87e2cb2df6\n",
      "commitDate": "14/10/17 10:41 AM",
      "commitName": "87ea1dff9c431fb88e064e497b35fc17c65f1d53",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "03/10/17 9:54 AM",
      "commitNameOld": "4111e6c7819d66e17e0932302c589777a355dbae",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.03,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n     StringBuilder sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n \n     String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n     String proxyBase \u003d getApplicationWebProxyBase();\n     sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(prefix).append(proxy).append(proxyBase)\n           .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n \n     // Handle RM HA urls\n-    List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n-\n     // Include yarn-site.xml in the classpath\n     YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n-    for (String rmId : getRmIds(yarnConf)) {\n-      String url \u003d getUrlByRmId(yarnConf, rmId);\n-      urls.add(url);\n+    Collection\u003cString\u003e rmIds \u003d getRmIds(yarnConf);\n+    if (rmIds !\u003d null) {\n+      List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n+      for (String rmId : rmIds) {\n+        String url \u003d getUrlByRmId(yarnConf, rmId);\n+        urls.add(url);\n+      }\n+      if (!urls.isEmpty()) {\n+        params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n+      }\n     }\n-    params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n    StringBuilder sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n\n    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n    String proxyBase \u003d getApplicationWebProxyBase();\n    sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(prefix).append(proxy).append(proxyBase)\n          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n\n    // Handle RM HA urls\n    // Include yarn-site.xml in the classpath\n    YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n    Collection\u003cString\u003e rmIds \u003d getRmIds(yarnConf);\n    if (rmIds !\u003d null) {\n      List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n      for (String rmId : rmIds) {\n        String url \u003d getUrlByRmId(yarnConf, rmId);\n        urls.add(url);\n      }\n      if (!urls.isEmpty()) {\n        params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "4111e6c7819d66e17e0932302c589777a355dbae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7269. Tracking URL in the app state does not get redirected to ApplicationMaster for Running applications. Contributed by Wangda Tan\n",
      "commitDate": "03/10/17 9:54 AM",
      "commitName": "4111e6c7819d66e17e0932302c589777a355dbae",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/02/15 10:57 AM",
      "commitNameOld": "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 963.91,
      "commitsBetweenForRepo": 6871,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,32 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n     StringBuilder sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n \n     String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n     String proxyBase \u003d getApplicationWebProxyBase();\n     sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(prefix).append(proxy).append(proxyBase)\n           .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n+\n+    // Handle RM HA urls\n+    List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n+\n+    // Include yarn-site.xml in the classpath\n+    YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n+    for (String rmId : getRmIds(yarnConf)) {\n+      String url \u003d getUrlByRmId(yarnConf, rmId);\n+      urls.add(url);\n+    }\n+    params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n    StringBuilder sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n\n    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n    String proxyBase \u003d getApplicationWebProxyBase();\n    sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(prefix).append(proxy).append(proxyBase)\n          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n\n    // Handle RM HA urls\n    List\u003cString\u003e urls \u003d new ArrayList\u003c\u003e();\n\n    // Include yarn-site.xml in the classpath\n    YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n    for (String rmId : getRmIds(yarnConf)) {\n      String url \u003d getUrlByRmId(yarnConf, rmId);\n      urls.add(url);\n    }\n    params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3147. Clean up RM web proxy code. Contributed by Steve Loughran\n",
      "commitDate": "12/02/15 10:57 AM",
      "commitName": "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/03/14 9:20 PM",
      "commitNameOld": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 328.61,
      "commitsBetweenForRepo": 2590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n-    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n     List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n     StringBuilder sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n \n     String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n     String proxyBase \u003d getApplicationWebProxyBase();\n     sb \u003d new StringBuilder();\n     for (String proxy : proxies) {\n       sb.append(prefix).append(proxy).append(proxyBase)\n           .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n     }\n     sb.setLength(sb.length() - 1);\n     params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();\n    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n    StringBuilder sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n\n    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n    String proxyBase \u003d getApplicationWebProxyBase();\n    sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(prefix).append(proxy).append(proxyBase)\n          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "4224e613409ec97ff52ba28a7cedfe0485577257": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1811. Fixed AMFilters in YARN to correctly accept requests from either web-app proxy or the RMs when HA is enabled. Contributed by Robert Kanter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579877 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 9:20 PM",
      "commitName": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/02/14 11:23 AM",
      "commitNameOld": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 21.37,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,21 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n-    String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n-    String[] parts \u003d proxy.split(\":\");\n-    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n-    params.put(AmIpFilter.PROXY_URI_BASE, WebAppUtils.getHttpSchemePrefix(conf)\n-        + proxy + getApplicationWebProxyBase());\n+    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n+    StringBuilder sb \u003d new StringBuilder();\n+    for (String proxy : proxies) {\n+      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n+    }\n+    sb.setLength(sb.length() - 1);\n+    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n+\n+    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n+    String proxyBase \u003d getApplicationWebProxyBase();\n+    sb \u003d new StringBuilder();\n+    for (String proxy : proxies) {\n+      sb.append(prefix).append(proxy).append(proxyBase)\n+          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n+    }\n+    sb.setLength(sb.length() - 1);\n+    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    List\u003cString\u003e proxies \u003d WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\n    StringBuilder sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\n\n    String prefix \u003d WebAppUtils.getHttpSchemePrefix(conf);\n    String proxyBase \u003d getApplicationWebProxyBase();\n    sb \u003d new StringBuilder();\n    for (String proxy : proxies) {\n      sb.append(prefix).append(proxy).append(proxyBase)\n          .append(AmIpFilter.PROXY_HOSTS_DELIMITER);\n    }\n    sb.setLength(sb.length() - 1);\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5770. Fixed MapReduce ApplicationMaster to correctly redirect to the YARN\u0027s web-app proxy with the correct scheme prefix. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/14 11:23 AM",
      "commitName": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/02/14 12:01 PM",
      "commitNameOld": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.97,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,9 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n     String[] parts \u003d proxy.split(\":\");\n     params.put(AmIpFilter.PROXY_HOST, parts[0]);\n-    params.put(AmIpFilter.PROXY_URI_BASE,\n-        WebAppUtils.getHttpSchemePrefix(conf) + proxy +\n-        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n+    params.put(AmIpFilter.PROXY_URI_BASE, WebAppUtils.getHttpSchemePrefix(conf)\n+        + proxy + getApplicationWebProxyBase());\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE, WebAppUtils.getHttpSchemePrefix(conf)\n        + proxy + getApplicationWebProxyBase());\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/13 10:20 AM",
      "commitNameOld": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 143.11,
      "commitsBetweenForRepo": 898,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n     String[] parts \u003d proxy.split(\":\");\n     params.put(AmIpFilter.PROXY_HOST, parts[0]);\n     params.put(AmIpFilter.PROXY_URI_BASE,\n-        HttpConfig.getSchemePrefix() + proxy +\n+        WebAppUtils.getHttpSchemePrefix(conf) + proxy +\n         System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE,\n        WebAppUtils.getHttpSchemePrefix(conf) + proxy +\n        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1204. Added separate configuration properties for https for RM and NM without which servers enabled with https will also start on http ports. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5523. Added separate configuration properties for https for JHS without which even when https is enabled, it starts on http port itself. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 10:20 AM",
      "commitName": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/08/12 3:52 PM",
      "commitNameOld": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 410.77,
      "commitsBetweenForRepo": 2369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n-    String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n+    String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n     String[] parts \u003d proxy.split(\":\");\n     params.put(AmIpFilter.PROXY_HOST, parts[0]);\n     params.put(AmIpFilter.PROXY_URI_BASE,\n         HttpConfig.getSchemePrefix() + proxy +\n         System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d WebAppUtils.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE,\n        HttpConfig.getSchemePrefix() + proxy +\n        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "4bca22005f48f426b9bc7cf36d435ead470a2590": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8681. add support for HTTPS to the web UIs. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 3:52 PM",
      "commitName": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,10 @@\n   public void initFilter(FilterContainer container, Configuration conf) {\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n     String[] parts \u003d proxy.split(\":\");\n     params.put(AmIpFilter.PROXY_HOST, parts[0]);\n-    params.put(AmIpFilter.PROXY_URI_BASE, \"http://\"+proxy+\n+    params.put(AmIpFilter.PROXY_URI_BASE,\n+        HttpConfig.getSchemePrefix() + proxy +\n         System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n     container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE,\n        HttpConfig.getSchemePrefix() + proxy +\n        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE, \"http://\"+proxy+\n        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java"
      }
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,9 @@\n+  public void initFilter(FilterContainer container, Configuration conf) {\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n+    String[] parts \u003d proxy.split(\":\");\n+    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n+    params.put(AmIpFilter.PROXY_URI_BASE, \"http://\"+proxy+\n+        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n+    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initFilter(FilterContainer container, Configuration conf) {\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    String[] parts \u003d proxy.split(\":\");\n    params.put(AmIpFilter.PROXY_HOST, parts[0]);\n    params.put(AmIpFilter.PROXY_URI_BASE, \"http://\"+proxy+\n        System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV));\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmFilterInitializer.java"
    }
  }
}