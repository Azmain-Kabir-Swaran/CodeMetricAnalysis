{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeWebHdfsMethods.java",
  "functionName": "redirectURI",
  "functionId": "redirectURI___rb-ResponseBuilder__namenode-NameNode(modifiers-final)__ugi-UserGroupInformation(modifiers-final)__delegation-DelegationParam(modifiers-final)__username-UserParam(modifiers-final)__doAsUser-DoAsParam(modifiers-final)__path-String(modifiers-final)__op-HttpOpParam.Op(modifiers-final)__openOffset-long(modifiers-final)__blocksize-long(modifiers-final)__excludeDatanodes-String(modifiers-final)__parameters-Param__?,?__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
  "functionStartLine": 386,
  "functionEndLine": 446,
  "numCommitsSeen": 294,
  "timeTaken": 8107,
  "changeHistory": [
    "e7b63baca1e10b28d8b4462fd80537b871951aa3",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "9454dc5e8091354cd0a4b8c8aa5f4004529db5d5",
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
    "7817245d88cb20ece994cc1c5afb3afa0da2661c",
    "df6e1ab4916e41810f092474a1f3abd9845d9956",
    "256adb2106cb838f3aff21f5a77f2973807d0df3",
    "d02baff9a0d8cec92bde751777f3e575da2339c8",
    "bf1649d5fd095ce027f013be57d216212fa14198",
    "433a6e78f69f1168979ff41ac684fba73a6bc2d2",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818",
    "40fe96546fcd68696076db67053f30d38a39a0d5",
    "8335995630e2c4288795fa0dfa9b670090a6790b",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c",
    "6c3b59505b863f03629da52a1e9b886fe9b496d0",
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6"
  ],
  "changeHistoryShort": {
    "e7b63baca1e10b28d8b4462fd80537b871951aa3": "Ybodychange",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ymultichange(Yparameterchange,Ybodychange)",
    "9454dc5e8091354cd0a4b8c8aa5f4004529db5d5": "Ybodychange",
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7": "Ybodychange",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": "Ybodychange",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": "Ymultichange(Yparameterchange,Ybodychange)",
    "7817245d88cb20ece994cc1c5afb3afa0da2661c": "Ybodychange",
    "df6e1ab4916e41810f092474a1f3abd9845d9956": "Ybodychange",
    "256adb2106cb838f3aff21f5a77f2973807d0df3": "Ybodychange",
    "d02baff9a0d8cec92bde751777f3e575da2339c8": "Ybodychange",
    "bf1649d5fd095ce027f013be57d216212fa14198": "Ymultichange(Yparameterchange,Ybodychange)",
    "433a6e78f69f1168979ff41ac684fba73a6bc2d2": "Ybodychange",
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": "Ymultichange(Yparameterchange,Ybodychange)",
    "40fe96546fcd68696076db67053f30d38a39a0d5": "Ybodychange",
    "8335995630e2c4288795fa0dfa9b670090a6790b": "Ybodychange",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "6c3b59505b863f03629da52a1e9b886fe9b496d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7b63baca1e10b28d8b4462fd80537b871951aa3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14070. Refactor NameNodeWebHdfsMethods to allow better extensibility. Contributed by CR Hota\n",
      "commitDate": "12/11/18 11:15 PM",
      "commitName": "e7b63baca1e10b28d8b4462fd80537b871951aa3",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "10/10/18 10:11 AM",
      "commitNameOld": "3ead525c71cba068e7abf1c76ad629bfeec10852",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 33.59,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n     HdfsFileStatus status \u003d null;\n     if (op \u003d\u003d GetOpParam.Op.OPEN\n         || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n         || op \u003d\u003d PostOpParam.Op.APPEND) {\n       status \u003d np.getFileInfo(path);\n     }\n     dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n         excludeDatanodes, remoteAddr, status);\n     if (dn \u003d\u003d null) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n           + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n-          namenode, ugi, null);\n+          ugi, null);\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n \n     StringBuilder queryBuilder \u003d new StringBuilder();\n     queryBuilder.append(op.toQueryString());\n     queryBuilder.append(delegationQuery);\n     queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n     queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n \n     boolean prependReservedRawPath  \u003d false;\n     if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n         \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n       prependReservedRawPath \u003d true;\n       rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n           encodeFeInfo(status.getFileEncryptionInfo()));\n     }\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n         (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n \n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         queryBuilder.toString(), null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n    HdfsFileStatus status \u003d null;\n    if (op \u003d\u003d GetOpParam.Op.OPEN\n        || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n        || op \u003d\u003d PostOpParam.Op.APPEND) {\n      status \u003d np.getFileInfo(path);\n    }\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes, remoteAddr, status);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          ugi, null);\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n\n    StringBuilder queryBuilder \u003d new StringBuilder();\n    queryBuilder.append(op.toQueryString());\n    queryBuilder.append(delegationQuery);\n    queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n    queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n\n    boolean prependReservedRawPath  \u003d false;\n    if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n        \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n      prependReservedRawPath \u003d true;\n      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n          encodeFeInfo(status.getFileEncryptionInfo()));\n    }\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n        (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        queryBuilder.toString(), null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "08/01/18 2:25 PM",
          "commitNameOld": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 21.04,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,61 @@\n-  private URI redirectURI(final NameNode namenode,\n+  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n+    final NamenodeProtocols np \u003d getRPCServer(namenode);\n+    HdfsFileStatus status \u003d null;\n+    if (op \u003d\u003d GetOpParam.Op.OPEN\n+        || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n+        || op \u003d\u003d PostOpParam.Op.APPEND) {\n+      status \u003d np.getFileInfo(path);\n+    }\n     dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n-        excludeDatanodes, remoteAddr);\n+        excludeDatanodes, remoteAddr, status);\n     if (dn \u003d\u003d null) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n           + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, null);\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n-    final String query \u003d op.toQueryString() + delegationQuery\n-        + \"\u0026\" + new NamenodeAddressParam(namenode)\n-        + Param.toSortedString(\"\u0026\", parameters);\n-    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n+\n+    StringBuilder queryBuilder \u003d new StringBuilder();\n+    queryBuilder.append(op.toQueryString());\n+    queryBuilder.append(delegationQuery);\n+    queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n+    queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n+\n+    boolean prependReservedRawPath  \u003d false;\n+    if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n+        \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n+      prependReservedRawPath \u003d true;\n+      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n+          encodeFeInfo(status.getFileEncryptionInfo()));\n+    }\n+    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n+        (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n \n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n-        query, null);\n+        queryBuilder.toString(), null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n    HdfsFileStatus status \u003d null;\n    if (op \u003d\u003d GetOpParam.Op.OPEN\n        || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n        || op \u003d\u003d PostOpParam.Op.APPEND) {\n      status \u003d np.getFileInfo(path);\n    }\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes, remoteAddr, status);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, null);\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n\n    StringBuilder queryBuilder \u003d new StringBuilder();\n    queryBuilder.append(op.toQueryString());\n    queryBuilder.append(delegationQuery);\n    queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n    queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n\n    boolean prependReservedRawPath  \u003d false;\n    if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n        \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n      prependReservedRawPath \u003d true;\n      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n          encodeFeInfo(status.getFileEncryptionInfo()));\n    }\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n        (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        queryBuilder.toString(), null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), blocksize-long(modifiers-final), excludeDatanodes-String(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[rb-ResponseBuilder, namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), blocksize-long(modifiers-final), excludeDatanodes-String(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "08/01/18 2:25 PM",
          "commitNameOld": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 21.04,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,61 @@\n-  private URI redirectURI(final NameNode namenode,\n+  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n+    final NamenodeProtocols np \u003d getRPCServer(namenode);\n+    HdfsFileStatus status \u003d null;\n+    if (op \u003d\u003d GetOpParam.Op.OPEN\n+        || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n+        || op \u003d\u003d PostOpParam.Op.APPEND) {\n+      status \u003d np.getFileInfo(path);\n+    }\n     dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n-        excludeDatanodes, remoteAddr);\n+        excludeDatanodes, remoteAddr, status);\n     if (dn \u003d\u003d null) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n           + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, null);\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n-    final String query \u003d op.toQueryString() + delegationQuery\n-        + \"\u0026\" + new NamenodeAddressParam(namenode)\n-        + Param.toSortedString(\"\u0026\", parameters);\n-    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n+\n+    StringBuilder queryBuilder \u003d new StringBuilder();\n+    queryBuilder.append(op.toQueryString());\n+    queryBuilder.append(delegationQuery);\n+    queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n+    queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n+\n+    boolean prependReservedRawPath  \u003d false;\n+    if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n+        \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n+      prependReservedRawPath \u003d true;\n+      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n+          encodeFeInfo(status.getFileEncryptionInfo()));\n+    }\n+    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n+        (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n \n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n-        query, null);\n+        queryBuilder.toString(), null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(ResponseBuilder rb, final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n    HdfsFileStatus status \u003d null;\n    if (op \u003d\u003d GetOpParam.Op.OPEN\n        || op \u003d\u003d GetOpParam.Op.GETFILECHECKSUM\n        || op \u003d\u003d PostOpParam.Op.APPEND) {\n      status \u003d np.getFileInfo(path);\n    }\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes, remoteAddr, status);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, null);\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n\n    StringBuilder queryBuilder \u003d new StringBuilder();\n    queryBuilder.append(op.toQueryString());\n    queryBuilder.append(delegationQuery);\n    queryBuilder.append(\"\u0026\").append(new NamenodeAddressParam(namenode));\n    queryBuilder.append(Param.toSortedString(\"\u0026\", parameters));\n\n    boolean prependReservedRawPath  \u003d false;\n    if (op \u003d\u003d GetOpParam.Op.OPEN \u0026\u0026 supportEZ\n        \u0026\u0026 status.getFileEncryptionInfo() !\u003d null) {\n      prependReservedRawPath \u003d true;\n      rb.header(WebHdfsFileSystem.FEFINFO_HEADER,\n          encodeFeInfo(status.getFileEncryptionInfo()));\n    }\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX +\n        (prependReservedRawPath ? \"/.reserved/raw\" + path : path);\n\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        queryBuilder.toString(), null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "9454dc5e8091354cd0a4b8c8aa5f4004529db5d5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11000. webhdfs PUT does not work if requests are routed to call queue. Contributed by Kihwal Lee.\n",
      "commitDate": "13/10/16 6:47 AM",
      "commitName": "9454dc5e8091354cd0a4b8c8aa5f4004529db5d5",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "12/10/16 1:11 PM",
      "commitNameOld": "85cd06f6636f295ad1f3bf2a90063f4714c9cca7",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n         excludeDatanodes, remoteAddr);\n     if (dn \u003d\u003d null) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n           + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n-          namenode, ugi, userPrincipal.getName());\n+          namenode, ugi, null);\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes, remoteAddr);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, null);\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10789. Route webhdfs through the RPC call queue. Contributed by Daryn Sharp and Rushabh S Shah.\n",
      "commitDate": "12/10/16 1:11 PM",
      "commitName": "85cd06f6636f295ad1f3bf2a90063f4714c9cca7",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/09/16 11:02 AM",
      "commitNameOld": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 36.09,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n-        excludeDatanodes);\n+        excludeDatanodes, remoteAddr);\n     if (dn \u003d\u003d null) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n           + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n-          namenode, ugi, request.getUserPrincipal().getName());\n+          namenode, ugi, userPrincipal.getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n-    final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes, remoteAddr);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, userPrincipal.getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10320. Rack failures may result in NN terminate. (Xiao Chen via mingma)\n",
      "commitDate": "04/05/16 5:02 PM",
      "commitName": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "11/12/15 10:59 AM",
      "commitNameOld": "576b569b6c97bd5f57e52efdabdf8c2fa996a524",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 145.21,
      "commitsBetweenForRepo": 899,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n-    try {\n-      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n-          excludeDatanodes);\n-    } catch (InvalidTopologyException ite) {\n-      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n+    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n+        excludeDatanodes);\n+    if (dn \u003d\u003d null) {\n+      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n+          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n        excludeDatanodes);\n    if (dn \u003d\u003d null) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster\"\n          + \" health. excludeDatanodes\u003d\" + excludeDatanodes);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 11:20 AM",
      "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n-      final long blocksize,\n+      final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     try {\n-      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n+      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n+          excludeDatanodes);\n     } catch (InvalidTopologyException ite) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    try {\n      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n          excludeDatanodes);\n    } catch (InvalidTopologyException ite) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), blocksize-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), blocksize-long(modifiers-final), excludeDatanodes-String(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n-      final long blocksize,\n+      final long blocksize, final String excludeDatanodes,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     try {\n-      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n+      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n+          excludeDatanodes);\n     } catch (InvalidTopologyException ite) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize, final String excludeDatanodes,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    try {\n      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize,\n          excludeDatanodes);\n    } catch (InvalidTopologyException ite) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "7817245d88cb20ece994cc1c5afb3afa0da2661c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6100. DataNodeWebHdfsMethods does not failover in HA mode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 10:29 AM",
      "commitName": "7817245d88cb20ece994cc1c5afb3afa0da2661c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "05/03/14 1:51 PM",
      "commitNameOld": "b46fbd0275bfc7ec16a219c72cff555d912170d7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 13.82,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn;\n     try {\n       dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n     } catch (InvalidTopologyException ite) {\n       throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n     }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n-        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n+        + \"\u0026\" + new NamenodeAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    try {\n      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n    } catch (InvalidTopologyException ite) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "df6e1ab4916e41810f092474a1f3abd9845d9956": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5939. WebHdfs returns misleading error code and logs nothing if trying to create a file with no DNs in cluster. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1571781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/14 10:36 AM",
      "commitName": "df6e1ab4916e41810f092474a1f3abd9845d9956",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "13/02/14 10:21 AM",
      "commitNameOld": "a49dee06fb2e13de5fbeecf101cc0777bef547b1",
      "commitAuthorOld": "",
      "daysBetweenCommits": 12.01,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n-        blocksize);\n+    final DatanodeInfo dn;\n+    try {\n+      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n+    } catch (InvalidTopologyException ite) {\n+      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n+    }\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn;\n    try {\n      dn \u003d chooseDatanode(namenode, path, op, openOffset, blocksize);\n    } catch (InvalidTopologyException ite) {\n      throw new IOException(\"Failed to find datanode, suggest to check cluster health.\", ite);\n    }\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "256adb2106cb838f3aff21f5a77f2973807d0df3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5891. webhdfs should not try connecting the DN during redirection. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 3:57 PM",
      "commitName": "256adb2106cb838f3aff21f5a77f2973807d0df3",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "05/12/13 3:41 PM",
      "commitNameOld": "00718c2ffaa11cbdabac6f5ef4b2de5dcf9d6859",
      "commitAuthorOld": "",
      "daysBetweenCommits": 69.01,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n-    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n-        blocksize, conf);\n+        blocksize);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final String scheme \u003d request.getScheme();\n     int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n         .getInfoSecurePort();\n     final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n         query, null);\n \n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n        blocksize);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "d02baff9a0d8cec92bde751777f3e575da2339c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 1:40 PM",
      "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "20/11/13 1:51 PM",
      "commitNameOld": "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,39 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n         blocksize, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n-    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n-        uripath, query, null);\n+    final String scheme \u003d request.getScheme();\n+    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n+        .getInfoSecurePort();\n+    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n+        query, null);\n+\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n        blocksize, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final String scheme \u003d request.getScheme();\n    int port \u003d \"http\".equals(scheme) ? dn.getInfoPort() : dn\n        .getInfoSecurePort();\n    final URI uri \u003d new URI(scheme, null, dn.getHostName(), port, uripath,\n        query, null);\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "bf1649d5fd095ce027f013be57d216212fa14198": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3551. WebHDFS CREATE should use client location for HTTP redirection.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354316 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/12 7:51 PM",
      "commitName": "bf1649d5fd095ce027f013be57d216212fa14198",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3551. WebHDFS CREATE should use client location for HTTP redirection.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354316 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/06/12 7:51 PM",
          "commitName": "bf1649d5fd095ce027f013be57d216212fa14198",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/06/12 5:54 PM",
          "commitNameOld": "5991ed9cbd18520040159508ef8bd02b7b3bf5e5",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 18.08,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,35 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n+      final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n+        blocksize, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n        blocksize, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), blocksize-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3551. WebHDFS CREATE should use client location for HTTP redirection.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354316 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/06/12 7:51 PM",
          "commitName": "bf1649d5fd095ce027f013be57d216212fa14198",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/06/12 5:54 PM",
          "commitNameOld": "5991ed9cbd18520040159508ef8bd02b7b3bf5e5",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 18.08,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,35 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n+      final long blocksize,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n+        blocksize, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n         + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final long blocksize,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset,\n        blocksize, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "433a6e78f69f1168979ff41ac684fba73a6bc2d2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2545. Change WebHDFS to support multiple namenodes in federation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214027 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 5:47 PM",
      "commitName": "433a6e78f69f1168979ff41ac684fba73a6bc2d2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/12/11 1:26 AM",
      "commitNameOld": "9b1f47226b076bf912a922aba293218dcadc7024",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.68,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString() + delegationQuery\n+        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + \"\u0026\" + new NamenodeRpcAddressParam(namenode)\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "09a156fcce2bc1be4081717bf7ef7d290e80d818": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2539. Support doAs and GETHOMEDIRECTORY in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11 8:19 PM",
      "commitName": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2539. Support doAs and GETHOMEDIRECTORY in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11 8:19 PM",
          "commitName": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/11/11 11:25 AM",
          "commitNameOld": "94c631af1fc49f5ae5881fcd5f0e80b17308d15d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n+      final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n-      delegationQuery \u003d \"\";\n+      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n-    final String query \u003d op.toQueryString()\n-        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n+    final String query \u003d op.toQueryString() + delegationQuery\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2539. Support doAs and GETHOMEDIRECTORY in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11 8:19 PM",
          "commitName": "09a156fcce2bc1be4081717bf7ef7d290e80d818",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "08/11/11 11:25 AM",
          "commitNameOld": "94c631af1fc49f5ae5881fcd5f0e80b17308d15d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.37,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n+      final UserParam username, final DoAsParam doAsUser,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n-      delegationQuery \u003d \"\";\n+      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n-    final String query \u003d op.toQueryString()\n-        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n+    final String query \u003d op.toQueryString() + delegationQuery\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final UserParam username, final DoAsParam doAsUser,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d Param.toSortedString(\"\u0026\", doAsUser, username);\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString() + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "40fe96546fcd68696076db67053f30d38a39a0d5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2129. Simplify BlockReader to not inherit from FSInputChecker. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/11 11:54 PM",
      "commitName": "40fe96546fcd68696076db67053f30d38a39a0d5",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "01/11/11 7:08 PM",
      "commitNameOld": "bd21ddcb78350b311f271e233038b8ca78a65242",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n+    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d \"\";\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString()\n         + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n         + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset, conf);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d \"\";\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString()\n        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "8335995630e2c4288795fa0dfa9b670090a6790b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2501. Add version prefix and root methods to webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189028 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 10:16 PM",
      "commitName": "8335995630e2c4288795fa0dfa9b670090a6790b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "20/10/11 5:27 PM",
      "commitNameOld": "7c48130d41a4671dc06a558d82765d0459ad55bf",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.2,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private URI redirectURI(final NameNode namenode,\n       final UserGroupInformation ugi, final DelegationParam delegation,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n \n     final String delegationQuery;\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       //security disabled\n       delegationQuery \u003d \"\";\n     } else if (delegation.getValue() !\u003d null) {\n       //client has provided a token\n       delegationQuery \u003d \"\u0026\" + delegation;\n     } else {\n       //generate a token\n       final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n           namenode, ugi, request.getUserPrincipal().getName());\n       delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n     }\n     final String query \u003d op.toQueryString()\n         + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n         + Param.toSortedString(\"\u0026\", parameters);\n-    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n+    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d \"\";\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString()\n        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/11 8:02 AM",
      "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/09/11 8:02 AM",
          "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/09/11 1:34 AM",
          "commitNameOld": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.27,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,31 @@\n-  private static URI redirectURI(final NameNode namenode,\n+  private URI redirectURI(final NameNode namenode,\n+      final UserGroupInformation ugi, final DelegationParam delegation,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n-    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n+\n+    final String delegationQuery;\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      //security disabled\n+      delegationQuery \u003d \"\";\n+    } else if (delegation.getValue() !\u003d null) {\n+      //client has provided a token\n+      delegationQuery \u003d \"\u0026\" + delegation;\n+    } else {\n+      //generate a token\n+      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n+          namenode, ugi, request.getUserPrincipal().getName());\n+      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n+    }\n+    final String query \u003d op.toQueryString()\n+        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n+        + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d \"\";\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString()\n        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[namenode-NameNode(modifiers-final), ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/09/11 8:02 AM",
          "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/09/11 1:34 AM",
          "commitNameOld": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.27,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,31 @@\n-  private static URI redirectURI(final NameNode namenode,\n+  private URI redirectURI(final NameNode namenode,\n+      final UserGroupInformation ugi, final DelegationParam delegation,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n-    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n+\n+    final String delegationQuery;\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      //security disabled\n+      delegationQuery \u003d \"\";\n+    } else if (delegation.getValue() !\u003d null) {\n+      //client has provided a token\n+      delegationQuery \u003d \"\u0026\" + delegation;\n+    } else {\n+      //generate a token\n+      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n+          namenode, ugi, request.getUserPrincipal().getName());\n+      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n+    }\n+    final String query \u003d op.toQueryString()\n+        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n+        + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d \"\";\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString()\n        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/09/11 8:02 AM",
          "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/09/11 1:34 AM",
          "commitNameOld": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.27,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,31 @@\n-  private static URI redirectURI(final NameNode namenode,\n+  private URI redirectURI(final NameNode namenode,\n+      final UserGroupInformation ugi, final DelegationParam delegation,\n       final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n     final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n-    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n+\n+    final String delegationQuery;\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      //security disabled\n+      delegationQuery \u003d \"\";\n+    } else if (delegation.getValue() !\u003d null) {\n+      //client has provided a token\n+      delegationQuery \u003d \"\u0026\" + delegation;\n+    } else {\n+      //generate a token\n+      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n+          namenode, ugi, request.getUserPrincipal().getName());\n+      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n+    }\n+    final String query \u003d op.toQueryString()\n+        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n+        + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private URI redirectURI(final NameNode namenode,\n      final UserGroupInformation ugi, final DelegationParam delegation,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n\n    final String delegationQuery;\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      //security disabled\n      delegationQuery \u003d \"\";\n    } else if (delegation.getValue() !\u003d null) {\n      //client has provided a token\n      delegationQuery \u003d \"\u0026\" + delegation;\n    } else {\n      //generate a token\n      final Token\u003c? extends TokenIdentifier\u003e t \u003d generateDelegationToken(\n          namenode, ugi, request.getUserPrincipal().getName());\n      delegationQuery \u003d \"\u0026\" + new DelegationParam(t.encodeToUrlString());\n    }\n    final String query \u003d op.toQueryString()\n        + \u0027\u0026\u0027 + new UserParam(ugi) + delegationQuery\n        + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "6c3b59505b863f03629da52a1e9b886fe9b496d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2317. Support read access to HDFS in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 1:34 AM",
      "commitName": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2317. Support read access to HDFS in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170085 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/09/11 1:34 AM",
          "commitName": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/09/11 6:41 PM",
          "commitNameOld": "61d0b7530c8978c095ab6f62d9d38e168bd829c6",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.29,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   private static URI redirectURI(final NameNode namenode,\n-      final String path, final HttpOpParam.Op op,\n+      final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op);\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n     final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static URI redirectURI(final NameNode namenode,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[namenode-NameNode(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]",
            "newValue": "[namenode-NameNode(modifiers-final), path-String(modifiers-final), op-HttpOpParam.Op(modifiers-final), openOffset-long(modifiers-final), parameters-Param\u003c?,?\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2317. Support read access to HDFS in webhdfs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170085 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/09/11 1:34 AM",
          "commitName": "6c3b59505b863f03629da52a1e9b886fe9b496d0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/09/11 6:41 PM",
          "commitNameOld": "61d0b7530c8978c095ab6f62d9d38e168bd829c6",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 2.29,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   private static URI redirectURI(final NameNode namenode,\n-      final String path, final HttpOpParam.Op op,\n+      final String path, final HttpOpParam.Op op, final long openOffset,\n       final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n-    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op);\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n     final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n     final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n \n     final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n         uripath, query, null);\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"redirectURI\u003d\" + uri);\n     }\n     return uri;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static URI redirectURI(final NameNode namenode,\n      final String path, final HttpOpParam.Op op, final long openOffset,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op, openOffset);\n    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "61d0b7530c8978c095ab6f62d9d38e168bd829c6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2284. Add a new FileSystem, webhdfs://, for supporting write Http access to HDFS.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 6:41 PM",
      "commitName": "61d0b7530c8978c095ab6f62d9d38e168bd829c6",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,14 @@\n+  private static URI redirectURI(final NameNode namenode,\n+      final String path, final HttpOpParam.Op op,\n+      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n+    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op);\n+    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n+    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n+\n+    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n+        uripath, query, null);\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"redirectURI\u003d\" + uri);\n+    }\n+    return uri;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static URI redirectURI(final NameNode namenode,\n      final String path, final HttpOpParam.Op op,\n      final Param\u003c?, ?\u003e... parameters) throws URISyntaxException, IOException {\n    final DatanodeInfo dn \u003d chooseDatanode(namenode, path, op);\n    final String query \u003d op.toQueryString() + Param.toSortedString(\"\u0026\", parameters);\n    final String uripath \u003d \"/\" + WebHdfsFileSystem.PATH_PREFIX + path;\n\n    final URI uri \u003d new URI(\"http\", null, dn.getHostName(), dn.getInfoPort(),\n        uripath, query, null);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"redirectURI\u003d\" + uri);\n    }\n    return uri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java"
    }
  }
}