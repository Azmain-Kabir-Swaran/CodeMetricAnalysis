{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FpgaResourcePlugin.java",
  "functionName": "createFpgaVendorPlugin",
  "functionId": "createFpgaVendorPlugin___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaResourcePlugin.java",
  "functionStartLine": 49,
  "functionEndLine": 66,
  "numCommitsSeen": 4,
  "timeTaken": 755,
  "changeHistory": [
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,18 @@\n+  private AbstractFpgaVendorPlugin createFpgaVendorPlugin(Configuration conf) {\n+    String vendorPluginClass \u003d conf.get(YarnConfiguration.NM_FPGA_VENDOR_PLUGIN,\n+        YarnConfiguration.DEFAULT_NM_FPGA_VENDOR_PLUGIN);\n+    LOG.info(\"Using FPGA vendor plugin: \" + vendorPluginClass);\n+    try {\n+      Class\u003c?\u003e schedulerClazz \u003d Class.forName(vendorPluginClass);\n+      if (AbstractFpgaVendorPlugin.class.isAssignableFrom(schedulerClazz)) {\n+        return (AbstractFpgaVendorPlugin) ReflectionUtils.newInstance(schedulerClazz,\n+            conf);\n+      } else {\n+        throw new YarnRuntimeException(\"Class: \" + vendorPluginClass\n+            + \" not instance of \" + AbstractFpgaVendorPlugin.class.getCanonicalName());\n+      }\n+    } catch (ClassNotFoundException e) {\n+      throw new YarnRuntimeException(\"Could not instantiate FPGA vendor plugin: \"\n+          + vendorPluginClass, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AbstractFpgaVendorPlugin createFpgaVendorPlugin(Configuration conf) {\n    String vendorPluginClass \u003d conf.get(YarnConfiguration.NM_FPGA_VENDOR_PLUGIN,\n        YarnConfiguration.DEFAULT_NM_FPGA_VENDOR_PLUGIN);\n    LOG.info(\"Using FPGA vendor plugin: \" + vendorPluginClass);\n    try {\n      Class\u003c?\u003e schedulerClazz \u003d Class.forName(vendorPluginClass);\n      if (AbstractFpgaVendorPlugin.class.isAssignableFrom(schedulerClazz)) {\n        return (AbstractFpgaVendorPlugin) ReflectionUtils.newInstance(schedulerClazz,\n            conf);\n      } else {\n        throw new YarnRuntimeException(\"Class: \" + vendorPluginClass\n            + \" not instance of \" + AbstractFpgaVendorPlugin.class.getCanonicalName());\n      }\n    } catch (ClassNotFoundException e) {\n      throw new YarnRuntimeException(\"Could not instantiate FPGA vendor plugin: \"\n          + vendorPluginClass, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaResourcePlugin.java"
    }
  }
}