{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CountersStrings.java",
  "functionName": "toEscapedCompactString",
  "functionId": "toEscapedCompactString___group-G",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java",
  "functionStartLine": 102,
  "functionEndLine": 140,
  "numCommitsSeen": 5,
  "timeTaken": 1288,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "24676e8c2ef48e67265d33c053badb31aecad616"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "24676e8c2ef48e67265d33c053badb31aecad616": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  String toEscapedCompactString(G group) {\n    List\u003cString\u003e escapedStrs \u003d Lists.newArrayList();\n    int length;\n    String escapedName, escapedDispName;\n    synchronized(group) {\n      // First up, obtain the strings that need escaping. This will help us\n      // determine the buffer length apriori.\n      escapedName \u003d escape(group.getName());\n      escapedDispName \u003d escape(group.getDisplayName());\n      int i \u003d 0;\n      length \u003d escapedName.length() + escapedDispName.length();\n      for (Counter counter : group) {\n        String escapedStr \u003d toEscapedCompactString(counter);\n        escapedStrs.add(escapedStr);\n        length +\u003d escapedStr.length();\n      }\n    }\n    length +\u003d 6; // for all the delimiting characters below\n    StringBuilder builder \u003d new StringBuilder(length);\n    builder.append(GROUP_OPEN); // group start\n\n    // Add the group name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedName);\n    builder.append(UNIT_CLOSE);\n\n    // Add the display name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedDispName);\n    builder.append(UNIT_CLOSE);\n\n    // write the value\n    for(String escaped : escapedStrs) {\n      builder.append(escaped);\n    }\n\n    builder.append(GROUP_CLOSE); // group end\n    return builder.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  String toEscapedCompactString(G group) {\n    List\u003cString\u003e escapedStrs \u003d Lists.newArrayList();\n    int length;\n    String escapedName, escapedDispName;\n    synchronized(group) {\n      // First up, obtain the strings that need escaping. This will help us\n      // determine the buffer length apriori.\n      escapedName \u003d escape(group.getName());\n      escapedDispName \u003d escape(group.getDisplayName());\n      int i \u003d 0;\n      length \u003d escapedName.length() + escapedDispName.length();\n      for (Counter counter : group) {\n        String escapedStr \u003d toEscapedCompactString(counter);\n        escapedStrs.add(escapedStr);\n        length +\u003d escapedStr.length();\n      }\n    }\n    length +\u003d 6; // for all the delimiting characters below\n    StringBuilder builder \u003d new StringBuilder(length);\n    builder.append(GROUP_OPEN); // group start\n\n    // Add the group name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedName);\n    builder.append(UNIT_CLOSE);\n\n    // Add the display name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedDispName);\n    builder.append(UNIT_CLOSE);\n\n    // write the value\n    for(String escaped : escapedStrs) {\n      builder.append(escaped);\n    }\n\n    builder.append(GROUP_CLOSE); // group end\n    return builder.toString();\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/CountersStrings.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/util/CountersStrings.java"
      }
    },
    "24676e8c2ef48e67265d33c053badb31aecad616": {
      "type": "Yintroduced",
      "commitMessage": " MAPREDUCE-901. Efficient framework counters. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157290 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/11 4:25 PM",
      "commitName": "24676e8c2ef48e67265d33c053badb31aecad616",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,39 @@\n+  String toEscapedCompactString(G group) {\n+    List\u003cString\u003e escapedStrs \u003d Lists.newArrayList();\n+    int length;\n+    String escapedName, escapedDispName;\n+    synchronized(group) {\n+      // First up, obtain the strings that need escaping. This will help us\n+      // determine the buffer length apriori.\n+      escapedName \u003d escape(group.getName());\n+      escapedDispName \u003d escape(group.getDisplayName());\n+      int i \u003d 0;\n+      length \u003d escapedName.length() + escapedDispName.length();\n+      for (Counter counter : group) {\n+        String escapedStr \u003d toEscapedCompactString(counter);\n+        escapedStrs.add(escapedStr);\n+        length +\u003d escapedStr.length();\n+      }\n+    }\n+    length +\u003d 6; // for all the delimiting characters below\n+    StringBuilder builder \u003d new StringBuilder(length);\n+    builder.append(GROUP_OPEN); // group start\n+\n+    // Add the group name\n+    builder.append(UNIT_OPEN);\n+    builder.append(escapedName);\n+    builder.append(UNIT_CLOSE);\n+\n+    // Add the display name\n+    builder.append(UNIT_OPEN);\n+    builder.append(escapedDispName);\n+    builder.append(UNIT_CLOSE);\n+\n+    // write the value\n+    for(String escaped : escapedStrs) {\n+      builder.append(escaped);\n+    }\n+\n+    builder.append(GROUP_CLOSE); // group end\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  String toEscapedCompactString(G group) {\n    List\u003cString\u003e escapedStrs \u003d Lists.newArrayList();\n    int length;\n    String escapedName, escapedDispName;\n    synchronized(group) {\n      // First up, obtain the strings that need escaping. This will help us\n      // determine the buffer length apriori.\n      escapedName \u003d escape(group.getName());\n      escapedDispName \u003d escape(group.getDisplayName());\n      int i \u003d 0;\n      length \u003d escapedName.length() + escapedDispName.length();\n      for (Counter counter : group) {\n        String escapedStr \u003d toEscapedCompactString(counter);\n        escapedStrs.add(escapedStr);\n        length +\u003d escapedStr.length();\n      }\n    }\n    length +\u003d 6; // for all the delimiting characters below\n    StringBuilder builder \u003d new StringBuilder(length);\n    builder.append(GROUP_OPEN); // group start\n\n    // Add the group name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedName);\n    builder.append(UNIT_CLOSE);\n\n    // Add the display name\n    builder.append(UNIT_OPEN);\n    builder.append(escapedDispName);\n    builder.append(UNIT_CLOSE);\n\n    // write the value\n    for(String escaped : escapedStrs) {\n      builder.append(escaped);\n    }\n\n    builder.append(GROUP_CLOSE); // group end\n    return builder.toString();\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/CountersStrings.java"
    }
  }
}