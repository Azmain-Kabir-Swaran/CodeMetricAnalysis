{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "getMaxAllocatableContainers",
  "functionId": "getMaxAllocatableContainers___application-FifoAppAttempt__schedulerKey-SchedulerRequestKey__node-FiCaSchedulerNode__type-NodeType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 552,
  "functionEndLine": 584,
  "numCommitsSeen": 327,
  "timeTaken": 11363,
  "changeHistory": [
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yparameterchange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e": "Ybodychange",
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,33 @@\n   private int getMaxAllocatableContainers(FifoAppAttempt application,\n       SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n-    int maxContainers \u003d 0;\n-\n-    ResourceRequest offSwitchRequest \u003d\n-        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n-    if (offSwitchRequest !\u003d null) {\n-      maxContainers \u003d offSwitchRequest.getNumContainers();\n-    }\n+    PendingAsk offswitchAsk \u003d application.getPendingAsk(schedulerKey,\n+        ResourceRequest.ANY);\n+    int maxContainers \u003d offswitchAsk.getCount();\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-      ResourceRequest rackLocalRequest \u003d\n-          application.getResourceRequest(schedulerKey, node.getRMNode()\n-              .getRackName());\n-      if (rackLocalRequest \u003d\u003d null) {\n+      PendingAsk rackLocalAsk \u003d application.getPendingAsk(schedulerKey,\n+          node.getRackName());\n+      if (rackLocalAsk.getCount() \u003c\u003d 0) {\n         return maxContainers;\n       }\n \n-      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n+      maxContainers \u003d Math.min(maxContainers,\n+          rackLocalAsk.getCount());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-      ResourceRequest nodeLocalRequest \u003d\n-          application.getResourceRequest(schedulerKey, node.getRMNode()\n-              .getNodeAddress());\n-      if (nodeLocalRequest !\u003d null) {\n-        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n+      PendingAsk nodeLocalAsk \u003d application.getPendingAsk(schedulerKey,\n+          node.getRMNode().getHostName());\n+\n+      if (nodeLocalAsk.getCount() \u003e 0) {\n+        maxContainers \u003d Math.min(maxContainers,\n+            nodeLocalAsk.getCount());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int getMaxAllocatableContainers(FifoAppAttempt application,\n      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n    PendingAsk offswitchAsk \u003d application.getPendingAsk(schedulerKey,\n        ResourceRequest.ANY);\n    int maxContainers \u003d offswitchAsk.getCount();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      PendingAsk rackLocalAsk \u003d application.getPendingAsk(schedulerKey,\n          node.getRackName());\n      if (rackLocalAsk.getCount() \u003c\u003d 0) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers,\n          rackLocalAsk.getCount());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      PendingAsk nodeLocalAsk \u003d application.getPendingAsk(schedulerKey,\n          node.getRMNode().getHostName());\n\n      if (nodeLocalAsk.getCount() \u003e 0) {\n        maxContainers \u003d Math.min(maxContainers,\n            nodeLocalAsk.getCount());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/10/16 9:17 PM",
      "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n-  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n+  private int getMaxAllocatableContainers(FifoAppAttempt application,\n       SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n     int maxContainers \u003d 0;\n \n     ResourceRequest offSwitchRequest \u003d\n         application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchRequest !\u003d null) {\n       maxContainers \u003d offSwitchRequest.getNumContainers();\n     }\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n       ResourceRequest rackLocalRequest \u003d\n           application.getResourceRequest(schedulerKey, node.getRMNode()\n               .getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n       ResourceRequest nodeLocalRequest \u003d\n           application.getResourceRequest(schedulerKey, node.getRMNode()\n               .getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int getMaxAllocatableContainers(FifoAppAttempt application,\n      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n    int maxContainers \u003d 0;\n\n    ResourceRequest offSwitchRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchRequest !\u003d null) {\n      maxContainers \u003d offSwitchRequest.getNumContainers();\n    }\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldValue": "[application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey, node-FiCaSchedulerNode, type-NodeType]",
        "newValue": "[application-FifoAppAttempt, schedulerKey-SchedulerRequestKey, node-FiCaSchedulerNode, type-NodeType]"
      }
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n   private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n-      Priority priority, FiCaSchedulerNode node, NodeType type) {\n+      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n     int maxContainers \u003d 0;\n-    \n-    ResourceRequest offSwitchRequest \u003d \n-      application.getResourceRequest(priority, ResourceRequest.ANY);\n+\n+    ResourceRequest offSwitchRequest \u003d\n+        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchRequest !\u003d null) {\n       maxContainers \u003d offSwitchRequest.getNumContainers();\n     }\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-      ResourceRequest rackLocalRequest \u003d \n-        application.getResourceRequest(priority, node.getRMNode().getRackName());\n+      ResourceRequest rackLocalRequest \u003d\n+          application.getResourceRequest(schedulerKey, node.getRMNode()\n+              .getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-      ResourceRequest nodeLocalRequest \u003d \n-        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n+      ResourceRequest nodeLocalRequest \u003d\n+          application.getResourceRequest(schedulerKey, node.getRMNode()\n+              .getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n    int maxContainers \u003d 0;\n\n    ResourceRequest offSwitchRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchRequest !\u003d null) {\n      maxContainers \u003d offSwitchRequest.getNumContainers();\n    }\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[application-FiCaSchedulerApp, priority-Priority, node-FiCaSchedulerNode, type-NodeType]",
            "newValue": "[application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey, node-FiCaSchedulerNode, type-NodeType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n   private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n-      Priority priority, FiCaSchedulerNode node, NodeType type) {\n+      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n     int maxContainers \u003d 0;\n-    \n-    ResourceRequest offSwitchRequest \u003d \n-      application.getResourceRequest(priority, ResourceRequest.ANY);\n+\n+    ResourceRequest offSwitchRequest \u003d\n+        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchRequest !\u003d null) {\n       maxContainers \u003d offSwitchRequest.getNumContainers();\n     }\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n-      ResourceRequest rackLocalRequest \u003d \n-        application.getResourceRequest(priority, node.getRMNode().getRackName());\n+      ResourceRequest rackLocalRequest \u003d\n+          application.getResourceRequest(schedulerKey, node.getRMNode()\n+              .getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n-      ResourceRequest nodeLocalRequest \u003d \n-        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n+      ResourceRequest nodeLocalRequest \u003d\n+          application.getResourceRequest(schedulerKey, node.getRMNode()\n+              .getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, NodeType type) {\n    int maxContainers \u003d 0;\n\n    ResourceRequest offSwitchRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchRequest !\u003d null) {\n      maxContainers \u003d offSwitchRequest.getNumContainers();\n    }\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d\n          application.getResourceRequest(schedulerKey, node.getRMNode()\n              .getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1444. Fix CapacityScheduler to deal with cases where applications specify host/rack requests without off-switch request. Contributed by Wangda Tan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576751 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/14 7:36 AM",
      "commitName": "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "19/02/14 3:39 PM",
      "commitNameOld": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.62,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n       Priority priority, FiCaSchedulerNode node, NodeType type) {\n+    int maxContainers \u003d 0;\n+    \n     ResourceRequest offSwitchRequest \u003d \n       application.getResourceRequest(priority, ResourceRequest.ANY);\n-    int maxContainers \u003d offSwitchRequest.getNumContainers();\n+    if (offSwitchRequest !\u003d null) {\n+      maxContainers \u003d offSwitchRequest.getNumContainers();\n+    }\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n       ResourceRequest rackLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n       ResourceRequest nodeLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      Priority priority, FiCaSchedulerNode node, NodeType type) {\n    int maxContainers \u003d 0;\n    \n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchRequest !\u003d null) {\n      maxContainers \u003d offSwitchRequest.getNumContainers();\n    }\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "520033b1cd81c76b38fcdcfcfeed16158db4bbba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-450. Define value for * in the scheduling protocol (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1462271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/13 12:44 PM",
      "commitName": "520033b1cd81c76b38fcdcfcfeed16158db4bbba",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "25/02/13 7:32 PM",
      "commitNameOld": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 30.68,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n       Priority priority, FiCaSchedulerNode node, NodeType type) {\n     ResourceRequest offSwitchRequest \u003d \n-      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n+      application.getResourceRequest(priority, ResourceRequest.ANY);\n     int maxContainers \u003d offSwitchRequest.getNumContainers();\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n       ResourceRequest rackLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n       ResourceRequest nodeLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      Priority priority, FiCaSchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, ResourceRequest.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      Priority priority, FiCaSchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/07/12 1:53 PM",
          "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 3.2,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private int getMaxAllocatableContainers(SchedulerApp application,\n-      Priority priority, SchedulerNode node, NodeType type) {\n+  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n+      Priority priority, FiCaSchedulerNode node, NodeType type) {\n     ResourceRequest offSwitchRequest \u003d \n-      application.getResourceRequest(priority, SchedulerNode.ANY);\n+      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n     int maxContainers \u003d offSwitchRequest.getNumContainers();\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n       ResourceRequest rackLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n       ResourceRequest nodeLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      Priority priority, FiCaSchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp, priority-Priority, node-SchedulerNode, type-NodeType]",
            "newValue": "[application-FiCaSchedulerApp, priority-Priority, node-FiCaSchedulerNode, type-NodeType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/07/12 1:53 PM",
          "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 3.2,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private int getMaxAllocatableContainers(SchedulerApp application,\n-      Priority priority, SchedulerNode node, NodeType type) {\n+  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n+      Priority priority, FiCaSchedulerNode node, NodeType type) {\n     ResourceRequest offSwitchRequest \u003d \n-      application.getResourceRequest(priority, SchedulerNode.ANY);\n+      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n     int maxContainers \u003d offSwitchRequest.getNumContainers();\n \n     if (type \u003d\u003d NodeType.OFF_SWITCH) {\n       return maxContainers;\n     }\n \n     if (type \u003d\u003d NodeType.RACK_LOCAL) {\n       ResourceRequest rackLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getRackName());\n       if (rackLocalRequest \u003d\u003d null) {\n         return maxContainers;\n       }\n \n       maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n     }\n \n     if (type \u003d\u003d NodeType.NODE_LOCAL) {\n       ResourceRequest nodeLocalRequest \u003d \n         application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n       if (nodeLocalRequest !\u003d null) {\n         maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n       }\n     }\n \n     return maxContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int getMaxAllocatableContainers(FiCaSchedulerApp application,\n      Priority priority, FiCaSchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, FiCaSchedulerNode.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int getMaxAllocatableContainers(SchedulerApp application,\n      Priority priority, SchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, SchedulerNode.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  private int getMaxAllocatableContainers(SchedulerApp application,\n+      Priority priority, SchedulerNode node, NodeType type) {\n+    ResourceRequest offSwitchRequest \u003d \n+      application.getResourceRequest(priority, SchedulerNode.ANY);\n+    int maxContainers \u003d offSwitchRequest.getNumContainers();\n+\n+    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n+      return maxContainers;\n+    }\n+\n+    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n+      ResourceRequest rackLocalRequest \u003d \n+        application.getResourceRequest(priority, node.getRMNode().getRackName());\n+      if (rackLocalRequest \u003d\u003d null) {\n+        return maxContainers;\n+      }\n+\n+      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n+    }\n+\n+    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n+      ResourceRequest nodeLocalRequest \u003d \n+        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n+      if (nodeLocalRequest !\u003d null) {\n+        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n+      }\n+    }\n+\n+    return maxContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int getMaxAllocatableContainers(SchedulerApp application,\n      Priority priority, SchedulerNode node, NodeType type) {\n    ResourceRequest offSwitchRequest \u003d \n      application.getResourceRequest(priority, SchedulerNode.ANY);\n    int maxContainers \u003d offSwitchRequest.getNumContainers();\n\n    if (type \u003d\u003d NodeType.OFF_SWITCH) {\n      return maxContainers;\n    }\n\n    if (type \u003d\u003d NodeType.RACK_LOCAL) {\n      ResourceRequest rackLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getRackName());\n      if (rackLocalRequest \u003d\u003d null) {\n        return maxContainers;\n      }\n\n      maxContainers \u003d Math.min(maxContainers, rackLocalRequest.getNumContainers());\n    }\n\n    if (type \u003d\u003d NodeType.NODE_LOCAL) {\n      ResourceRequest nodeLocalRequest \u003d \n        application.getResourceRequest(priority, node.getRMNode().getNodeAddress());\n      if (nodeLocalRequest !\u003d null) {\n        maxContainers \u003d Math.min(maxContainers, nodeLocalRequest.getNumContainers());\n      }\n    }\n\n    return maxContainers;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}