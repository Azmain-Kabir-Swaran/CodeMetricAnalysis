{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppReportFetcher.java",
  "functionName": "getApplicationReport",
  "functionId": "getApplicationReport___appId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
  "functionStartLine": 115,
  "functionEndLine": 138,
  "numCommitsSeen": 10,
  "timeTaken": 1980,
  "changeHistory": [
    "692d51c09d3668cde47cc297296d095ddfa933a3",
    "fbd6063269221ec25834684477f434e19f0b66af",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421"
  ],
  "changeHistoryShort": {
    "692d51c09d3668cde47cc297296d095ddfa933a3": "Ymultichange(Yreturntypechange,Ybodychange)",
    "fbd6063269221ec25834684477f434e19f0b66af": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": "Yexceptionschange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "692d51c09d3668cde47cc297296d095ddfa933a3": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3975. WebAppProxyServlet should not redirect to RM page if AHS is enabled. Contributed by Mit Desai\n",
      "commitDate": "23/09/15 9:38 AM",
      "commitName": "692d51c09d3668cde47cc297296d095ddfa933a3",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3975. WebAppProxyServlet should not redirect to RM page if AHS is enabled. Contributed by Mit Desai\n",
          "commitDate": "23/09/15 9:38 AM",
          "commitName": "692d51c09d3668cde47cc297296d095ddfa933a3",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "24/07/15 10:15 AM",
          "commitNameOld": "fbd6063269221ec25834684477f434e19f0b66af",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 60.97,
          "commitsBetweenForRepo": 338,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public ApplicationReport getApplicationReport(ApplicationId appId)\n+  public FetchedAppReport getApplicationReport(ApplicationId appId)\n   throws YarnException, IOException {\n     GetApplicationReportRequest request \u003d recordFactory\n         .newRecordInstance(GetApplicationReportRequest.class);\n     request.setApplicationId(appId);\n \n-    GetApplicationReportResponse response;\n+    ApplicationReport appReport;\n+    FetchedAppReport fetchedAppReport;\n     try {\n-      response \u003d applicationsManager.getApplicationReport(request);\n-    } catch (YarnException e) {\n+      appReport \u003d applicationsManager.\n+          getApplicationReport(request).getApplicationReport();\n+      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.RM);\n+    } catch (ApplicationNotFoundException e) {\n       if (!isAHSEnabled) {\n         // Just throw it as usual if historyService is not enabled.\n         throw e;\n       }\n-      // Even if history-service is enabled, treat all exceptions still the same\n-      // except the following\n-      if (!(e.getClass() \u003d\u003d ApplicationNotFoundException.class)) {\n-        throw e;\n-      }\n-      response \u003d historyManager.getApplicationReport(request);\n+      //Fetch the application report from AHS\n+      appReport \u003d historyManager.\n+          getApplicationReport(request).getApplicationReport();\n+      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.AHS);\n     }\n-    return response.getApplicationReport();\n+    return fetchedAppReport;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FetchedAppReport getApplicationReport(ApplicationId appId)\n  throws YarnException, IOException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n\n    ApplicationReport appReport;\n    FetchedAppReport fetchedAppReport;\n    try {\n      appReport \u003d applicationsManager.\n          getApplicationReport(request).getApplicationReport();\n      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.RM);\n    } catch (ApplicationNotFoundException e) {\n      if (!isAHSEnabled) {\n        // Just throw it as usual if historyService is not enabled.\n        throw e;\n      }\n      //Fetch the application report from AHS\n      appReport \u003d historyManager.\n          getApplicationReport(request).getApplicationReport();\n      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.AHS);\n    }\n    return fetchedAppReport;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
          "extendedDetails": {
            "oldValue": "ApplicationReport",
            "newValue": "FetchedAppReport"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3975. WebAppProxyServlet should not redirect to RM page if AHS is enabled. Contributed by Mit Desai\n",
          "commitDate": "23/09/15 9:38 AM",
          "commitName": "692d51c09d3668cde47cc297296d095ddfa933a3",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "24/07/15 10:15 AM",
          "commitNameOld": "fbd6063269221ec25834684477f434e19f0b66af",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 60.97,
          "commitsBetweenForRepo": 338,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  public ApplicationReport getApplicationReport(ApplicationId appId)\n+  public FetchedAppReport getApplicationReport(ApplicationId appId)\n   throws YarnException, IOException {\n     GetApplicationReportRequest request \u003d recordFactory\n         .newRecordInstance(GetApplicationReportRequest.class);\n     request.setApplicationId(appId);\n \n-    GetApplicationReportResponse response;\n+    ApplicationReport appReport;\n+    FetchedAppReport fetchedAppReport;\n     try {\n-      response \u003d applicationsManager.getApplicationReport(request);\n-    } catch (YarnException e) {\n+      appReport \u003d applicationsManager.\n+          getApplicationReport(request).getApplicationReport();\n+      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.RM);\n+    } catch (ApplicationNotFoundException e) {\n       if (!isAHSEnabled) {\n         // Just throw it as usual if historyService is not enabled.\n         throw e;\n       }\n-      // Even if history-service is enabled, treat all exceptions still the same\n-      // except the following\n-      if (!(e.getClass() \u003d\u003d ApplicationNotFoundException.class)) {\n-        throw e;\n-      }\n-      response \u003d historyManager.getApplicationReport(request);\n+      //Fetch the application report from AHS\n+      appReport \u003d historyManager.\n+          getApplicationReport(request).getApplicationReport();\n+      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.AHS);\n     }\n-    return response.getApplicationReport();\n+    return fetchedAppReport;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FetchedAppReport getApplicationReport(ApplicationId appId)\n  throws YarnException, IOException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n\n    ApplicationReport appReport;\n    FetchedAppReport fetchedAppReport;\n    try {\n      appReport \u003d applicationsManager.\n          getApplicationReport(request).getApplicationReport();\n      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.RM);\n    } catch (ApplicationNotFoundException e) {\n      if (!isAHSEnabled) {\n        // Just throw it as usual if historyService is not enabled.\n        throw e;\n      }\n      //Fetch the application report from AHS\n      appReport \u003d historyManager.\n          getApplicationReport(request).getApplicationReport();\n      fetchedAppReport \u003d new FetchedAppReport(appReport, AppReportSource.AHS);\n    }\n    return fetchedAppReport;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
          "extendedDetails": {}
        }
      ]
    },
    "fbd6063269221ec25834684477f434e19f0b66af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3967. Fetch the application report from the AHS if the RM does not\nknow about it. Contributed by Mit Desai\n",
      "commitDate": "24/07/15 10:15 AM",
      "commitName": "fbd6063269221ec25834684477f434e19f0b66af",
      "commitAuthor": "Xuan",
      "commitDateOld": "07/01/14 2:16 PM",
      "commitNameOld": "4931545f76f6c76e80e65c3bf6773e1983248044",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 562.79,
      "commitsBetweenForRepo": 4562,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,23 @@\n   public ApplicationReport getApplicationReport(ApplicationId appId)\n   throws YarnException, IOException {\n     GetApplicationReportRequest request \u003d recordFactory\n         .newRecordInstance(GetApplicationReportRequest.class);\n     request.setApplicationId(appId);\n-    \n-    GetApplicationReportResponse response \u003d applicationsManager\n-        .getApplicationReport(request);\n+\n+    GetApplicationReportResponse response;\n+    try {\n+      response \u003d applicationsManager.getApplicationReport(request);\n+    } catch (YarnException e) {\n+      if (!isAHSEnabled) {\n+        // Just throw it as usual if historyService is not enabled.\n+        throw e;\n+      }\n+      // Even if history-service is enabled, treat all exceptions still the same\n+      // except the following\n+      if (!(e.getClass() \u003d\u003d ApplicationNotFoundException.class)) {\n+        throw e;\n+      }\n+      response \u003d historyManager.getApplicationReport(request);\n+    }\n     return response.getApplicationReport();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationReport getApplicationReport(ApplicationId appId)\n  throws YarnException, IOException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n\n    GetApplicationReportResponse response;\n    try {\n      response \u003d applicationsManager.getApplicationReport(request);\n    } catch (YarnException e) {\n      if (!isAHSEnabled) {\n        // Just throw it as usual if historyService is not enabled.\n        throw e;\n      }\n      // Even if history-service is enabled, treat all exceptions still the same\n      // except the following\n      if (!(e.getClass() \u003d\u003d ApplicationNotFoundException.class)) {\n        throw e;\n      }\n      response \u003d historyManager.getApplicationReport(request);\n    }\n    return response.getApplicationReport();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/05/13 3:53 PM",
      "commitNameOld": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.22,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public ApplicationReport getApplicationReport(ApplicationId appId)\n-  throws YarnRemoteException, IOException {\n+  throws YarnException, IOException {\n     GetApplicationReportRequest request \u003d recordFactory\n         .newRecordInstance(GetApplicationReportRequest.class);\n     request.setApplicationId(appId);\n     \n     GetApplicationReportResponse response \u003d applicationsManager\n         .getApplicationReport(request);\n     return response.getApplicationReport();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationReport getApplicationReport(ApplicationId appId)\n  throws YarnException, IOException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n    \n    GetApplicationReportResponse response \u003d applicationsManager\n        .getApplicationReport(request);\n    return response.getApplicationReport();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "0727ecaf50481fa7a529398bc2a12ce18c9a6b43": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-631. Changed ClientRMProtocol api to throw IOException and YarnRemoteException. Contributed by Xuan Gong.\nMAPREDUCE-5212. Handling YarnRemoteException separately from IOException in MR App after YARN-631. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480494 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/13 3:53 PM",
      "commitName": "0727ecaf50481fa7a529398bc2a12ce18c9a6b43",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 273.73,
      "commitsBetweenForRepo": 1442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   public ApplicationReport getApplicationReport(ApplicationId appId)\n-  throws YarnRemoteException {\n+  throws YarnRemoteException, IOException {\n     GetApplicationReportRequest request \u003d recordFactory\n         .newRecordInstance(GetApplicationReportRequest.class);\n     request.setApplicationId(appId);\n     \n     GetApplicationReportResponse response \u003d applicationsManager\n         .getApplicationReport(request);\n     return response.getApplicationReport();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationReport getApplicationReport(ApplicationId appId)\n  throws YarnRemoteException, IOException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n    \n    GetApplicationReportResponse response \u003d applicationsManager\n        .getApplicationReport(request);\n    return response.getApplicationReport();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ApplicationReport getApplicationReport(ApplicationId appId)\n  throws YarnRemoteException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n    \n    GetApplicationReportResponse response \u003d applicationsManager\n        .getApplicationReport(request);\n    return response.getApplicationReport();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java"
      }
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,10 @@\n+  public ApplicationReport getApplicationReport(ApplicationId appId)\n+  throws YarnRemoteException {\n+    GetApplicationReportRequest request \u003d recordFactory\n+        .newRecordInstance(GetApplicationReportRequest.class);\n+    request.setApplicationId(appId);\n+    \n+    GetApplicationReportResponse response \u003d applicationsManager\n+        .getApplicationReport(request);\n+    return response.getApplicationReport();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ApplicationReport getApplicationReport(ApplicationId appId)\n  throws YarnRemoteException {\n    GetApplicationReportRequest request \u003d recordFactory\n        .newRecordInstance(GetApplicationReportRequest.class);\n    request.setApplicationId(appId);\n    \n    GetApplicationReportResponse response \u003d applicationsManager\n        .getApplicationReport(request);\n    return response.getApplicationReport();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/AppReportFetcher.java"
    }
  }
}