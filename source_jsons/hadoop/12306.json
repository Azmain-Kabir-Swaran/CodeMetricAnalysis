{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VolumeScanner.java",
  "functionName": "calculateShouldScan",
  "functionId": "calculateShouldScan___storageId-String__targetBytesPerSec-long__scannedBytesSum-long__startMinute-long__curMinute-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java",
  "functionStartLine": 461,
  "functionEndLine": 484,
  "numCommitsSeen": 21,
  "timeTaken": 2503,
  "changeHistory": [
    "115428176e1d919fe7d54d01b34dfda57d1b3950",
    "6e62a1a6728b1f782f64065424f92b292c3f163a"
  ],
  "changeHistoryShort": {
    "115428176e1d919fe7d54d01b34dfda57d1b3950": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e62a1a6728b1f782f64065424f92b292c3f163a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "115428176e1d919fe7d54d01b34dfda57d1b3950": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7721. The HDFS BlockScanner may run fast during the first hour (cmccabe)\n",
      "commitDate": "03/02/15 11:05 AM",
      "commitName": "115428176e1d919fe7d54d01b34dfda57d1b3950",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7721. The HDFS BlockScanner may run fast during the first hour (cmccabe)\n",
          "commitDate": "03/02/15 11:05 AM",
          "commitName": "115428176e1d919fe7d54d01b34dfda57d1b3950",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/01/15 7:00 PM",
          "commitNameOld": "6e62a1a6728b1f782f64065424f92b292c3f163a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 12.67,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,24 @@\n-  static boolean calculateShouldScan(long targetBytesPerSec,\n-                                     long scannedBytesSum) {\n-    long effectiveBytesPerSec \u003d\n-        scannedBytesSum / (SECONDS_PER_MINUTE * MINUTES_PER_HOUR);\n+  static boolean calculateShouldScan(String storageId, long targetBytesPerSec,\n+                   long scannedBytesSum, long startMinute, long curMinute) {\n+    long runMinutes \u003d curMinute - startMinute;\n+    long effectiveBytesPerSec;\n+    if (runMinutes \u003c\u003d 0) {\n+      // avoid division by zero\n+      effectiveBytesPerSec \u003d scannedBytesSum;\n+    } else {\n+      if (runMinutes \u003e MINUTES_PER_HOUR) {\n+        // we only keep an hour\u0027s worth of rate information\n+        runMinutes \u003d MINUTES_PER_HOUR;\n+      }\n+      effectiveBytesPerSec \u003d scannedBytesSum /\n+          (SECONDS_PER_MINUTE * runMinutes);\n+    }\n+\n     boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n-    LOG.trace(\"calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n-        \"targetBytesPerSec \u003d {}.  shouldScan \u003d {}\",\n-        effectiveBytesPerSec, targetBytesPerSec, shouldScan);\n+    LOG.trace(\"{}: calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n+        \"targetBytesPerSec \u003d {}.  startMinute \u003d {}, curMinute \u003d {}, \" +\n+        \"shouldScan \u003d {}\",\n+        storageId, effectiveBytesPerSec, targetBytesPerSec,\n+        startMinute, curMinute, shouldScan);\n     return shouldScan;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean calculateShouldScan(String storageId, long targetBytesPerSec,\n                   long scannedBytesSum, long startMinute, long curMinute) {\n    long runMinutes \u003d curMinute - startMinute;\n    long effectiveBytesPerSec;\n    if (runMinutes \u003c\u003d 0) {\n      // avoid division by zero\n      effectiveBytesPerSec \u003d scannedBytesSum;\n    } else {\n      if (runMinutes \u003e MINUTES_PER_HOUR) {\n        // we only keep an hour\u0027s worth of rate information\n        runMinutes \u003d MINUTES_PER_HOUR;\n      }\n      effectiveBytesPerSec \u003d scannedBytesSum /\n          (SECONDS_PER_MINUTE * runMinutes);\n    }\n\n    boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n    LOG.trace(\"{}: calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n        \"targetBytesPerSec \u003d {}.  startMinute \u003d {}, curMinute \u003d {}, \" +\n        \"shouldScan \u003d {}\",\n        storageId, effectiveBytesPerSec, targetBytesPerSec,\n        startMinute, curMinute, shouldScan);\n    return shouldScan;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java",
          "extendedDetails": {
            "oldValue": "[targetBytesPerSec-long, scannedBytesSum-long]",
            "newValue": "[storageId-String, targetBytesPerSec-long, scannedBytesSum-long, startMinute-long, curMinute-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7721. The HDFS BlockScanner may run fast during the first hour (cmccabe)\n",
          "commitDate": "03/02/15 11:05 AM",
          "commitName": "115428176e1d919fe7d54d01b34dfda57d1b3950",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/01/15 7:00 PM",
          "commitNameOld": "6e62a1a6728b1f782f64065424f92b292c3f163a",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 12.67,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,24 @@\n-  static boolean calculateShouldScan(long targetBytesPerSec,\n-                                     long scannedBytesSum) {\n-    long effectiveBytesPerSec \u003d\n-        scannedBytesSum / (SECONDS_PER_MINUTE * MINUTES_PER_HOUR);\n+  static boolean calculateShouldScan(String storageId, long targetBytesPerSec,\n+                   long scannedBytesSum, long startMinute, long curMinute) {\n+    long runMinutes \u003d curMinute - startMinute;\n+    long effectiveBytesPerSec;\n+    if (runMinutes \u003c\u003d 0) {\n+      // avoid division by zero\n+      effectiveBytesPerSec \u003d scannedBytesSum;\n+    } else {\n+      if (runMinutes \u003e MINUTES_PER_HOUR) {\n+        // we only keep an hour\u0027s worth of rate information\n+        runMinutes \u003d MINUTES_PER_HOUR;\n+      }\n+      effectiveBytesPerSec \u003d scannedBytesSum /\n+          (SECONDS_PER_MINUTE * runMinutes);\n+    }\n+\n     boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n-    LOG.trace(\"calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n-        \"targetBytesPerSec \u003d {}.  shouldScan \u003d {}\",\n-        effectiveBytesPerSec, targetBytesPerSec, shouldScan);\n+    LOG.trace(\"{}: calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n+        \"targetBytesPerSec \u003d {}.  startMinute \u003d {}, curMinute \u003d {}, \" +\n+        \"shouldScan \u003d {}\",\n+        storageId, effectiveBytesPerSec, targetBytesPerSec,\n+        startMinute, curMinute, shouldScan);\n     return shouldScan;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static boolean calculateShouldScan(String storageId, long targetBytesPerSec,\n                   long scannedBytesSum, long startMinute, long curMinute) {\n    long runMinutes \u003d curMinute - startMinute;\n    long effectiveBytesPerSec;\n    if (runMinutes \u003c\u003d 0) {\n      // avoid division by zero\n      effectiveBytesPerSec \u003d scannedBytesSum;\n    } else {\n      if (runMinutes \u003e MINUTES_PER_HOUR) {\n        // we only keep an hour\u0027s worth of rate information\n        runMinutes \u003d MINUTES_PER_HOUR;\n      }\n      effectiveBytesPerSec \u003d scannedBytesSum /\n          (SECONDS_PER_MINUTE * runMinutes);\n    }\n\n    boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n    LOG.trace(\"{}: calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n        \"targetBytesPerSec \u003d {}.  startMinute \u003d {}, curMinute \u003d {}, \" +\n        \"shouldScan \u003d {}\",\n        storageId, effectiveBytesPerSec, targetBytesPerSec,\n        startMinute, curMinute, shouldScan);\n    return shouldScan;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e62a1a6728b1f782f64065424f92b292c3f163a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7430. Refactor the BlockScanner to use O(1) memory and use multiple threads (cmccabe)\n",
      "commitDate": "21/01/15 7:00 PM",
      "commitName": "6e62a1a6728b1f782f64065424f92b292c3f163a",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,10 @@\n+  static boolean calculateShouldScan(long targetBytesPerSec,\n+                                     long scannedBytesSum) {\n+    long effectiveBytesPerSec \u003d\n+        scannedBytesSum / (SECONDS_PER_MINUTE * MINUTES_PER_HOUR);\n+    boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n+    LOG.trace(\"calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n+        \"targetBytesPerSec \u003d {}.  shouldScan \u003d {}\",\n+        effectiveBytesPerSec, targetBytesPerSec, shouldScan);\n+    return shouldScan;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean calculateShouldScan(long targetBytesPerSec,\n                                     long scannedBytesSum) {\n    long effectiveBytesPerSec \u003d\n        scannedBytesSum / (SECONDS_PER_MINUTE * MINUTES_PER_HOUR);\n    boolean shouldScan \u003d effectiveBytesPerSec \u003c\u003d targetBytesPerSec;\n    LOG.trace(\"calculateShouldScan: effectiveBytesPerSec \u003d {}, and \" +\n        \"targetBytesPerSec \u003d {}.  shouldScan \u003d {}\",\n        effectiveBytesPerSec, targetBytesPerSec, shouldScan);\n    return shouldScan;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/VolumeScanner.java"
    }
  }
}