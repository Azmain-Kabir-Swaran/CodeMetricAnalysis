{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RoundRobinVolumeChoosingPolicy.java",
  "functionName": "chooseVolume",
  "functionId": "chooseVolume___curVolumeIndex-int(modifiers-final)__volumes-List__V__(modifiers-final)__blockSize-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
  "functionStartLine": 72,
  "functionEndLine": 105,
  "numCommitsSeen": 9,
  "timeTaken": 1786,
  "changeHistory": [
    "11f750e6a77b905b20541f9ec510b1875ad91357",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e"
  ],
  "changeHistoryShort": {
    "11f750e6a77b905b20541f9ec510b1875ad91357": "Ybodychange",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11f750e6a77b905b20541f9ec510b1875ad91357": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14616. Add the warn log when the volume available space isn\u0027t enough. Contributed by liying.\n",
      "commitDate": "07/08/19 12:19 PM",
      "commitName": "11f750e6a77b905b20541f9ec510b1875ad91357",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 334.9,
      "commitsBetweenForRepo": 2579,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   private V chooseVolume(final int curVolumeIndex, final List\u003cV\u003e volumes,\n                          long blockSize) throws IOException {\n     // since volumes could\u0027ve been removed because of the failure\n     // make sure we are not out of bounds\n     int curVolume \u003d curVolumes[curVolumeIndex] \u003c volumes.size()\n             ? curVolumes[curVolumeIndex] : 0;\n \n     int startVolume \u003d curVolume;\n     long maxAvailable \u003d 0;\n \n     while (true) {\n       final V volume \u003d volumes.get(curVolume);\n       curVolume \u003d (curVolume + 1) % volumes.size();\n       long availableVolumeSize \u003d volume.getAvailable();\n       if (availableVolumeSize \u003e blockSize) {\n         curVolumes[curVolumeIndex] \u003d curVolume;\n         return volume;\n       }\n \n       if (availableVolumeSize \u003e maxAvailable) {\n         maxAvailable \u003d availableVolumeSize;\n       }\n \n       if (curVolume \u003d\u003d startVolume) {\n         throw new DiskOutOfSpaceException(\"Out of space: \"\n             + \"The volume with the most available space (\u003d\" + maxAvailable\n             + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n+      } else {\n+        LOG.warn(\"The volume[{}] with the available space (\u003d{} B) is \"\n+            + \"less than the block size (\u003d{} B).\", volume.getBaseURI(),\n+            availableVolumeSize, blockSize);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private V chooseVolume(final int curVolumeIndex, final List\u003cV\u003e volumes,\n                         long blockSize) throws IOException {\n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    int curVolume \u003d curVolumes[curVolumeIndex] \u003c volumes.size()\n            ? curVolumes[curVolumeIndex] : 0;\n\n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n\n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) {\n        curVolumes[curVolumeIndex] \u003d curVolume;\n        return volume;\n      }\n\n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n\n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\"Out of space: \"\n            + \"The volume with the most available space (\u003d\" + maxAvailable\n            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n      } else {\n        LOG.warn(\"The volume[{}] with the available space (\u003d{} B) is \"\n            + \"less than the block size (\u003d{} B).\", volume.getBaseURI(),\n            availableVolumeSize, blockSize);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
      "extendedDetails": {}
    },
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9608. Disk IO imbalance in HDFS with heterogeneous storages. Contributed by Wei Zhou.\n",
      "commitDate": "17/02/16 11:29 AM",
      "commitName": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,30 @@\n+  private V chooseVolume(final int curVolumeIndex, final List\u003cV\u003e volumes,\n+                         long blockSize) throws IOException {\n+    // since volumes could\u0027ve been removed because of the failure\n+    // make sure we are not out of bounds\n+    int curVolume \u003d curVolumes[curVolumeIndex] \u003c volumes.size()\n+            ? curVolumes[curVolumeIndex] : 0;\n+\n+    int startVolume \u003d curVolume;\n+    long maxAvailable \u003d 0;\n+\n+    while (true) {\n+      final V volume \u003d volumes.get(curVolume);\n+      curVolume \u003d (curVolume + 1) % volumes.size();\n+      long availableVolumeSize \u003d volume.getAvailable();\n+      if (availableVolumeSize \u003e blockSize) {\n+        curVolumes[curVolumeIndex] \u003d curVolume;\n+        return volume;\n+      }\n+\n+      if (availableVolumeSize \u003e maxAvailable) {\n+        maxAvailable \u003d availableVolumeSize;\n+      }\n+\n+      if (curVolume \u003d\u003d startVolume) {\n+        throw new DiskOutOfSpaceException(\"Out of space: \"\n+            + \"The volume with the most available space (\u003d\" + maxAvailable\n+            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private V chooseVolume(final int curVolumeIndex, final List\u003cV\u003e volumes,\n                         long blockSize) throws IOException {\n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    int curVolume \u003d curVolumes[curVolumeIndex] \u003c volumes.size()\n            ? curVolumes[curVolumeIndex] : 0;\n\n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n\n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) {\n        curVolumes[curVolumeIndex] \u003d curVolume;\n        return volume;\n      }\n\n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n\n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\"Out of space: \"\n            + \"The volume with the most available space (\u003d\" + maxAvailable\n            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java"
    }
  }
}