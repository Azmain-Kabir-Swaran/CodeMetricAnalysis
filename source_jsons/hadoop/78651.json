{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NflyFSystem.java",
  "functionName": "listStatus",
  "functionId": "listStatus___f-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java",
  "functionStartLine": 805,
  "functionEndLine": 845,
  "numCommitsSeen": 3,
  "timeTaken": 716,
  "changeHistory": [
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0"
  ],
  "changeHistoryShort": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,41 @@\n+  public FileStatus[] listStatus(Path f) throws FileNotFoundException,\n+      IOException {\n+    final List\u003cIOException\u003e ioExceptions \u003d\n+        new ArrayList\u003cIOException\u003e(nodes.length);\n+\n+    final MRNflyNode[] mrNodes \u003d workSet();\n+    if (nflyFlags.contains(NflyKey.readMostRecent)) {\n+      int numNotFounds \u003d 0;\n+      for (final MRNflyNode nflyNode : mrNodes) {\n+        try {\n+          nflyNode.updateFileStatus(f);\n+        } catch (FileNotFoundException fnfe) {\n+          numNotFounds++;\n+          processThrowable(nflyNode, \"listStatus\", fnfe, ioExceptions, f);\n+        } catch (Throwable t) {\n+          processThrowable(nflyNode, \"listStatus\", t, ioExceptions, f);\n+        }\n+      }\n+      mayThrowFileNotFound(ioExceptions, numNotFounds);\n+      Arrays.sort(mrNodes);\n+    }\n+\n+    int numNotFounds \u003d 0;\n+    for (final MRNflyNode nflyNode : mrNodes) {\n+      try {\n+        final FileStatus[] realStats \u003d nflyNode.getFs().listStatus(f);\n+        final FileStatus[] nflyStats \u003d new FileStatus[realStats.length];\n+        for (int i \u003d 0; i \u003c realStats.length; i++) {\n+          nflyStats[i] \u003d new NflyStatus(nflyNode.getFs(), realStats[i]);\n+        }\n+        return nflyStats;\n+      } catch (FileNotFoundException fnfe) {\n+        numNotFounds++;\n+        processThrowable(nflyNode, \"listStatus\", fnfe, ioExceptions, f);\n+      } catch (Throwable t) {\n+        processThrowable(nflyNode, \"listStatus\", t, ioExceptions, f);\n+      }\n+    }\n+    mayThrowFileNotFound(ioExceptions, numNotFounds);\n+    throw MultipleIOException.createIOException(ioExceptions);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) throws FileNotFoundException,\n      IOException {\n    final List\u003cIOException\u003e ioExceptions \u003d\n        new ArrayList\u003cIOException\u003e(nodes.length);\n\n    final MRNflyNode[] mrNodes \u003d workSet();\n    if (nflyFlags.contains(NflyKey.readMostRecent)) {\n      int numNotFounds \u003d 0;\n      for (final MRNflyNode nflyNode : mrNodes) {\n        try {\n          nflyNode.updateFileStatus(f);\n        } catch (FileNotFoundException fnfe) {\n          numNotFounds++;\n          processThrowable(nflyNode, \"listStatus\", fnfe, ioExceptions, f);\n        } catch (Throwable t) {\n          processThrowable(nflyNode, \"listStatus\", t, ioExceptions, f);\n        }\n      }\n      mayThrowFileNotFound(ioExceptions, numNotFounds);\n      Arrays.sort(mrNodes);\n    }\n\n    int numNotFounds \u003d 0;\n    for (final MRNflyNode nflyNode : mrNodes) {\n      try {\n        final FileStatus[] realStats \u003d nflyNode.getFs().listStatus(f);\n        final FileStatus[] nflyStats \u003d new FileStatus[realStats.length];\n        for (int i \u003d 0; i \u003c realStats.length; i++) {\n          nflyStats[i] \u003d new NflyStatus(nflyNode.getFs(), realStats[i]);\n        }\n        return nflyStats;\n      } catch (FileNotFoundException fnfe) {\n        numNotFounds++;\n        processThrowable(nflyNode, \"listStatus\", fnfe, ioExceptions, f);\n      } catch (Throwable t) {\n        processThrowable(nflyNode, \"listStatus\", t, ioExceptions, f);\n      }\n    }\n    mayThrowFileNotFound(ioExceptions, numNotFounds);\n    throw MultipleIOException.createIOException(ioExceptions);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/NflyFSystem.java"
    }
  }
}