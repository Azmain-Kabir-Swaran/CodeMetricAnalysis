{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "getApplicationReport",
  "functionId": "getApplicationReport___request-GetApplicationReportRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 402,
  "functionEndLine": 436,
  "numCommitsSeen": 156,
  "timeTaken": 9687,
  "changeHistory": [
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
    "beb65c9465806114237aa271b07b31ff3c1f4404",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
    "ed6598791e63f8086c5a04b93dad9b241b8514c8",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "ad3d3f54d5f9d2b3648da43481c72bc3f6748ace",
    "fab57a144de0cd515e1de9107e4d3ac58037d846",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5": "Ybodychange",
    "beb65c9465806114237aa271b07b31ff3c1f4404": "Ybodychange",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": "Ybodychange",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": "Ybodychange",
    "ed6598791e63f8086c5a04b93dad9b241b8514c8": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "ad3d3f54d5f9d2b3648da43481c72bc3f6748ace": "Ybodychange",
    "fab57a144de0cd515e1de9107e4d3ac58037d846": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6189: Improve application status log message when RM restarted when\napp is in NEW state. Contributed by Junping Du\n",
      "commitDate": "28/02/17 11:04 AM",
      "commitName": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthor": "Xuan",
      "commitDateOld": "23/02/17 12:49 AM",
      "commitNameOld": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n     if (applicationId \u003d\u003d null) {\n       throw new ApplicationNotFoundException(\"Invalid application id: null\");\n     }\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\"\n-          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n+          + applicationId + \"\u0027 doesn\u0027t exist in RM. Please check \"\n+          + \"that the job submission was successful.\");\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(callerUGI.getUserName(),\n             allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationNotFoundException(\"Invalid application id: null\");\n    }\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n          + applicationId + \"\u0027 doesn\u0027t exist in RM. Please check \"\n          + \"that the job submission was successful.\");\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(callerUGI.getUserName(),\n            allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "beb65c9465806114237aa271b07b31ff3c1f4404": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1556. NPE getting application report with a null appId. Contributed by Weiwei Yang.\n",
      "commitDate": "28/08/15 5:57 AM",
      "commitName": "beb65c9465806114237aa271b07b31ff3c1f4404",
      "commitAuthor": "Junping Du",
      "commitDateOld": "24/08/15 8:36 PM",
      "commitNameOld": "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.39,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n+    if (applicationId \u003d\u003d null) {\n+      throw new ApplicationNotFoundException(\"Invalid application id: null\");\n+    }\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\"\n           + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(callerUGI.getUserName(),\n             allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n    if (applicationId \u003d\u003d null) {\n      throw new ApplicationNotFoundException(\"Invalid application id: null\");\n    }\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(callerUGI.getUserName(),\n            allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": {
      "type": "Ybodychange",
      "commitMessage": "YARN-899. Added back queue level administrator-acls so that there is no regression w.r.t 1.x. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/13 1:21 AM",
      "commitName": "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/09/13 11:33 AM",
      "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 12.57,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\"\n           + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n-        ApplicationAccessType.VIEW_APP, applicationId);\n+        ApplicationAccessType.VIEW_APP, application);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(callerUGI.getUserName(),\n             allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(callerUGI.getUserName(),\n            allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": {
      "type": "Ybodychange",
      "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/13 6:12 PM",
      "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/13 2:16 PM",
      "commitNameOld": "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.16,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\"\n           + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, applicationId);\n     ApplicationReport report \u003d\n-        application.createAndGetApplicationReport(allowAccess);\n+        application.createAndGetApplicationReport(callerUGI.getUserName(),\n+            allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(callerUGI.getUserName(),\n            allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "ed6598791e63f8086c5a04b93dad9b241b8514c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-873. YARNClient.getApplicationReport(unknownAppId) returns a null report (Xuan Gong via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/07/13 2:34 PM",
      "commitName": "ed6598791e63f8086c5a04b93dad9b241b8514c8",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "09/07/13 4:01 PM",
      "commitNameOld": "e2cce7bd26cb943225a0d4ffb6f674e1b8ee39ae",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 14.94,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n-      // If the RM doesn\u0027t have the application, provide the response with\n-      // application report as null and let the clients to handle.\n-      return recordFactory\n-          .newRecordInstance(GetApplicationReportResponse.class);\n+      // If the RM doesn\u0027t have the application, throw\n+      // ApplicationNotFoundException and let client to handle.\n+      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n+          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, applicationId);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\"\n          + applicationId + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public GetApplicationReportResponse getApplicationReport(\n-      GetApplicationReportRequest request) throws YarnRemoteException {\n+      GetApplicationReportRequest request) throws YarnException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, provide the response with\n       // application report as null and let the clients to handle.\n       return recordFactory\n           .newRecordInstance(GetApplicationReportResponse.class);\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, applicationId);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, provide the response with\n      // application report as null and let the clients to handle.\n      return recordFactory\n          .newRecordInstance(GetApplicationReportResponse.class);\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnException]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, provide the response with\n      // application report as null and let the clients to handle.\n      return recordFactory\n          .newRecordInstance(GetApplicationReportResponse.class);\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "ad3d3f54d5f9d2b3648da43481c72bc3f6748ace": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3348. Fixed a bug in MR client to redirect to JobHistoryServer correctly when RM forgets the app. Contributed by Devaraj K.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1298978 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/03/12 10:53 AM",
      "commitName": "ad3d3f54d5f9d2b3648da43481c72bc3f6748ace",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/03/12 3:40 PM",
      "commitNameOld": "fab57a144de0cd515e1de9107e4d3ac58037d846",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnRemoteException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n-      throw RPCUtil.getRemoteException(\"Trying to get information for an \"\n-          + \"absent application \" + applicationId);\n+      // If the RM doesn\u0027t have the application, provide the response with\n+      // application report as null and let the clients to handle.\n+      return recordFactory\n+          .newRecordInstance(GetApplicationReportResponse.class);\n     }\n \n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, applicationId);\n     ApplicationReport report \u003d\n         application.createAndGetApplicationReport(allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, provide the response with\n      // application report as null and let the clients to handle.\n      return recordFactory\n          .newRecordInstance(GetApplicationReportResponse.class);\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "fab57a144de0cd515e1de9107e4d3ac58037d846": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3792. Fix \"bin/mapred job -list\" to display all jobs instead of only the jobs owned by the user. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 3:40 PM",
      "commitName": "fab57a144de0cd515e1de9107e4d3ac58037d846",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/12 12:03 PM",
      "commitNameOld": "c7d64769c1a72f2aab9958e33a7cf28d02612306",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 28.15,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,28 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnRemoteException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(\"Trying to get information for an \"\n           + \"absent application \" + applicationId);\n     }\n \n-    if (!checkAccess(callerUGI, application.getUser(),\n-        ApplicationAccessType.VIEW_APP, applicationId)) {\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + ApplicationAccessType.VIEW_APP.name() + \" on \" + applicationId));\n-    }\n-\n-    ApplicationReport report \u003d application.createAndGetApplicationReport();\n+    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.VIEW_APP, applicationId);\n+    ApplicationReport report \u003d\n+        application.createAndGetApplicationReport(allowAccess);\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(\"Trying to get information for an \"\n          + \"absent application \" + applicationId);\n    }\n\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId);\n    ApplicationReport report \u003d\n        application.createAndGetApplicationReport(allowAccess);\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 10:21 PM",
      "commitNameOld": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,32 @@\n   public GetApplicationReportResponse getApplicationReport(\n       GetApplicationReportRequest request) throws YarnRemoteException {\n     ApplicationId applicationId \u003d request.getApplicationId();\n-    RMApp application \u003d rmContext.getRMApps().get(applicationId);\n-    ApplicationReport report \u003d (application \u003d\u003d null) ? null : application\n-        .createAndGetApplicationReport();\n+\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n+    if (application \u003d\u003d null) {\n+      throw RPCUtil.getRemoteException(\"Trying to get information for an \"\n+          + \"absent application \" + applicationId);\n+    }\n+\n+    if (!checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.VIEW_APP, applicationId)) {\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + ApplicationAccessType.VIEW_APP.name() + \" on \" + applicationId));\n+    }\n+\n+    ApplicationReport report \u003d application.createAndGetApplicationReport();\n \n     GetApplicationReportResponse response \u003d recordFactory\n         .newRecordInstance(GetApplicationReportResponse.class);\n     response.setApplicationReport(report);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(\"Trying to get information for an \"\n          + \"absent application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, applicationId)) {\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.VIEW_APP.name() + \" on \" + applicationId));\n    }\n\n    ApplicationReport report \u003d application.createAndGetApplicationReport();\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n    RMApp application \u003d rmContext.getRMApps().get(applicationId);\n    ApplicationReport report \u003d (application \u003d\u003d null) ? null : application\n        .createAndGetApplicationReport();\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,12 @@\n+  public GetApplicationReportResponse getApplicationReport(\n+      GetApplicationReportRequest request) throws YarnRemoteException {\n+    ApplicationId applicationId \u003d request.getApplicationId();\n+    RMApp application \u003d rmContext.getRMApps().get(applicationId);\n+    ApplicationReport report \u003d (application \u003d\u003d null) ? null : application\n+        .createAndGetApplicationReport();\n+\n+    GetApplicationReportResponse response \u003d recordFactory\n+        .newRecordInstance(GetApplicationReportResponse.class);\n+    response.setApplicationReport(report);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetApplicationReportResponse getApplicationReport(\n      GetApplicationReportRequest request) throws YarnRemoteException {\n    ApplicationId applicationId \u003d request.getApplicationId();\n    RMApp application \u003d rmContext.getRMApps().get(applicationId);\n    ApplicationReport report \u003d (application \u003d\u003d null) ? null : application\n        .createAndGetApplicationReport();\n\n    GetApplicationReportResponse response \u003d recordFactory\n        .newRecordInstance(GetApplicationReportResponse.class);\n    response.setApplicationReport(report);\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}