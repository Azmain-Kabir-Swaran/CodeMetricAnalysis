{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "handleContainerExitCode",
  "functionId": "handleContainerExitCode___exitCode-int__containerLogDir-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 648,
  "functionEndLine": 674,
  "numCommitsSeen": 95,
  "timeTaken": 3664,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "cd04e954d2db27f0a15b7d1c492b7cdb656a51db",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "cd04e954d2db27f0a15b7d1c492b7cdb656a51db": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/01/19 10:40 PM",
      "commitNameOld": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 70.7,
      "commitsBetweenForRepo": 575,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n     ContainerId containerId \u003d container.getContainerId();\n-\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n-          + exitCode);\n-    }\n+    LOG.debug(\"Container {} completed with exit code {}\", containerId,\n+        exitCode);\n \n     StringBuilder diagnosticInfo \u003d\n         new StringBuilder(\"Container exited with a non-zero exit code \");\n     diagnosticInfo.append(exitCode);\n     diagnosticInfo.append(\". \");\n     if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       // If the process was killed, Send container_cleanedup_after_kill and\n       // just break out of this method.\n       dispatcher.getEventHandler().handle(\n           new ContainerExitEvent(containerId,\n               ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n               diagnosticInfo.toString()));\n     } else if (exitCode !\u003d 0) {\n       handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n           diagnosticInfo);\n     } else {\n       LOG.info(\"Container \" + containerId + \" succeeded \");\n       dispatcher.getEventHandler().handle(\n           new ContainerEvent(containerId,\n               ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n    ContainerId containerId \u003d container.getContainerId();\n    LOG.debug(\"Container {} completed with exit code {}\", containerId,\n        exitCode);\n\n    StringBuilder diagnosticInfo \u003d\n        new StringBuilder(\"Container exited with a non-zero exit code \");\n    diagnosticInfo.append(exitCode);\n    diagnosticInfo.append(\". \");\n    if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      // If the process was killed, Send container_cleanedup_after_kill and\n      // just break out of this method.\n      dispatcher.getEventHandler().handle(\n          new ContainerExitEvent(containerId,\n              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n              diagnosticInfo.toString()));\n    } else if (exitCode !\u003d 0) {\n      handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n          diagnosticInfo);\n    } else {\n      LOG.info(\"Container \" + containerId + \" succeeded \");\n      dispatcher.getEventHandler().handle(\n          new ContainerEvent(containerId,\n              ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "cd04e954d2db27f0a15b7d1c492b7cdb656a51db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8331. Race condition in NM container launched after done. Contributed by Pradeep Ambati\n",
      "commitDate": "09/08/18 8:17 AM",
      "commitName": "cd04e954d2db27f0a15b7d1c492b7cdb656a51db",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/06/18 4:12 PM",
      "commitNameOld": "8a32bc39eb210fca8052c472601e24c2446b4cc2",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 47.67,
      "commitsBetweenForRepo": 296,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,30 @@\n   protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n     ContainerId containerId \u003d container.getContainerId();\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n           + exitCode);\n     }\n \n     StringBuilder diagnosticInfo \u003d\n         new StringBuilder(\"Container exited with a non-zero exit code \");\n     diagnosticInfo.append(exitCode);\n     diagnosticInfo.append(\". \");\n     if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       // If the process was killed, Send container_cleanedup_after_kill and\n       // just break out of this method.\n-\n-      // If Container was killed before starting... NO need to do this.\n-      if (!killedBeforeStart) {\n-        dispatcher.getEventHandler().handle(\n-            new ContainerExitEvent(containerId,\n-                ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n-                diagnosticInfo.toString()));\n-      }\n+      dispatcher.getEventHandler().handle(\n+          new ContainerExitEvent(containerId,\n+              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n+              diagnosticInfo.toString()));\n     } else if (exitCode !\u003d 0) {\n       handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n           diagnosticInfo);\n     } else {\n       LOG.info(\"Container \" + containerId + \" succeeded \");\n       dispatcher.getEventHandler().handle(\n           new ContainerEvent(containerId,\n               ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n    ContainerId containerId \u003d container.getContainerId();\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n          + exitCode);\n    }\n\n    StringBuilder diagnosticInfo \u003d\n        new StringBuilder(\"Container exited with a non-zero exit code \");\n    diagnosticInfo.append(exitCode);\n    diagnosticInfo.append(\". \");\n    if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      // If the process was killed, Send container_cleanedup_after_kill and\n      // just break out of this method.\n      dispatcher.getEventHandler().handle(\n          new ContainerExitEvent(containerId,\n              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n              diagnosticInfo.toString()));\n    } else if (exitCode !\u003d 0) {\n      handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n          diagnosticInfo);\n    } else {\n      LOG.info(\"Container \" + containerId + \" succeeded \");\n      dispatcher.getEventHandler().handle(\n          new ContainerEvent(containerId,\n              ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/11/16 2:21 AM",
      "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 14.27,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n     ContainerId containerId \u003d container.getContainerId();\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n           + exitCode);\n     }\n \n     StringBuilder diagnosticInfo \u003d\n         new StringBuilder(\"Container exited with a non-zero exit code \");\n     diagnosticInfo.append(exitCode);\n     diagnosticInfo.append(\". \");\n     if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n         || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n       // If the process was killed, Send container_cleanedup_after_kill and\n       // just break out of this method.\n-      dispatcher.getEventHandler().handle(\n-          new ContainerExitEvent(containerId,\n-              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n-              diagnosticInfo.toString()));\n+\n+      // If Container was killed before starting... NO need to do this.\n+      if (!killedBeforeStart) {\n+        dispatcher.getEventHandler().handle(\n+            new ContainerExitEvent(containerId,\n+                ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n+                diagnosticInfo.toString()));\n+      }\n     } else if (exitCode !\u003d 0) {\n       handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n           diagnosticInfo);\n     } else {\n       LOG.info(\"Container \" + containerId + \" succeeded \");\n       dispatcher.getEventHandler().handle(\n           new ContainerEvent(containerId,\n               ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n    ContainerId containerId \u003d container.getContainerId();\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n          + exitCode);\n    }\n\n    StringBuilder diagnosticInfo \u003d\n        new StringBuilder(\"Container exited with a non-zero exit code \");\n    diagnosticInfo.append(exitCode);\n    diagnosticInfo.append(\". \");\n    if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      // If the process was killed, Send container_cleanedup_after_kill and\n      // just break out of this method.\n\n      // If Container was killed before starting... NO need to do this.\n      if (!killedBeforeStart) {\n        dispatcher.getEventHandler().handle(\n            new ContainerExitEvent(containerId,\n                ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n                diagnosticInfo.toString()));\n      }\n    } else if (exitCode !\u003d 0) {\n      handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n          diagnosticInfo);\n    } else {\n      LOG.info(\"Container \" + containerId + \" succeeded \");\n      dispatcher.getEventHandler().handle(\n          new ContainerEvent(containerId,\n              ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,30 @@\n+  protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n+    ContainerId containerId \u003d container.getContainerId();\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n+          + exitCode);\n+    }\n+\n+    StringBuilder diagnosticInfo \u003d\n+        new StringBuilder(\"Container exited with a non-zero exit code \");\n+    diagnosticInfo.append(exitCode);\n+    diagnosticInfo.append(\". \");\n+    if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n+        || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n+      // If the process was killed, Send container_cleanedup_after_kill and\n+      // just break out of this method.\n+      dispatcher.getEventHandler().handle(\n+          new ContainerExitEvent(containerId,\n+              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n+              diagnosticInfo.toString()));\n+    } else if (exitCode !\u003d 0) {\n+      handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n+          diagnosticInfo);\n+    } else {\n+      LOG.info(\"Container \" + containerId + \" succeeded \");\n+      dispatcher.getEventHandler().handle(\n+          new ContainerEvent(containerId,\n+              ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitCode(int exitCode, Path containerLogDir) {\n    ContainerId containerId \u003d container.getContainerId();\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Container \" + containerId + \" completed with exit code \"\n          + exitCode);\n    }\n\n    StringBuilder diagnosticInfo \u003d\n        new StringBuilder(\"Container exited with a non-zero exit code \");\n    diagnosticInfo.append(exitCode);\n    diagnosticInfo.append(\". \");\n    if (exitCode \u003d\u003d ExitCode.FORCE_KILLED.getExitCode()\n        || exitCode \u003d\u003d ExitCode.TERMINATED.getExitCode()) {\n      // If the process was killed, Send container_cleanedup_after_kill and\n      // just break out of this method.\n      dispatcher.getEventHandler().handle(\n          new ContainerExitEvent(containerId,\n              ContainerEventType.CONTAINER_KILLED_ON_REQUEST, exitCode,\n              diagnosticInfo.toString()));\n    } else if (exitCode !\u003d 0) {\n      handleContainerExitWithFailure(containerId, exitCode, containerLogDir,\n          diagnosticInfo);\n    } else {\n      LOG.info(\"Container \" + containerId + \" succeeded \");\n      dispatcher.getEventHandler().handle(\n          new ContainerEvent(containerId,\n              ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}