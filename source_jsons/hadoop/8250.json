{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EncryptionZoneManager.java",
  "functionName": "createEncryptionZone",
  "functionId": "createEncryptionZone___srcIIP-INodesInPath__suite-CipherSuite__version-CryptoProtocolVersion__keyName-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
  "functionStartLine": 532,
  "functionEndLine": 569,
  "numCommitsSeen": 103,
  "timeTaken": 7160,
  "changeHistory": [
    "70590cd8d948de581e2ae1184afb08574c67bbbe",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "6de9213df111a9a4ed875db995d67af72d08a798",
    "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "1737950d0fc83c68f386881b843c41b0b1e342de",
    "ab47b666d0b6580230afda951eec60c555c4c3d4",
    "512b756973f31359510b8af01bb26c9ddbe06ed9",
    "69b75fca7aec5f5cbf79bc7db3915119cef69e65",
    "b57ec165674143daf4fa50378446a9f831d3b9d3",
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
    "d79f27b429410daa6770a51867d7ecea728dff89",
    "ceed0f6c46736323bd1b077125ff4e217c649208"
  ],
  "changeHistoryShort": {
    "70590cd8d948de581e2ae1184afb08574c67bbbe": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ymultichange(Yparameterchange,Ybodychange)",
    "6de9213df111a9a4ed875db995d67af72d08a798": "Ybodychange",
    "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c": "Ybodychange",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ybodychange",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ymultichange(Yparameterchange,Ybodychange)",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ymultichange(Yparameterchange,Ybodychange)",
    "ab47b666d0b6580230afda951eec60c555c4c3d4": "Ybodychange",
    "512b756973f31359510b8af01bb26c9ddbe06ed9": "Ybodychange",
    "69b75fca7aec5f5cbf79bc7db3915119cef69e65": "Ymultichange(Yparameterchange,Ybodychange)",
    "b57ec165674143daf4fa50378446a9f831d3b9d3": "Ybodychange",
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee": "Ybodychange",
    "d79f27b429410daa6770a51867d7ecea728dff89": "Ymultichange(Yparameterchange,Ybodychange)",
    "ceed0f6c46736323bd1b077125ff4e217c649208": "Yintroduced"
  },
  "changeHistoryDetails": {
    "70590cd8d948de581e2ae1184afb08574c67bbbe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13292. Crypto command should give proper exception when trying to set key on existing EZ directory. Contributed by Ranith Sardar.\n",
      "commitDate": "06/04/18 10:53 PM",
      "commitName": "70590cd8d948de581e2ae1184afb08574c67bbbe",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "29/03/18 3:46 PM",
      "commitNameOld": "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 8.3,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n \n     // Check if src is a valid path for new EZ creation\n     if (srcIIP.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n     }\n-    if (dir.isNonEmptyDirectory(srcIIP)) {\n-      throw new IOException(\n-          \"Attempt to create an encryption zone for a non-empty directory.\");\n-    }\n \n     INode srcINode \u003d srcIIP.getLastINode();\n     if (!srcINode.isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n \n     if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n         get(srcINode.getId()) !\u003d null) {\n       throw new IOException(\n           \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n     }\n \n+    if (dir.isNonEmptyDirectory(srcIIP)) {\n+      throw new IOException(\n+          \"Attempt to create an encryption zone for a non-empty directory.\");\n+    }\n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n\n    // Check if src is a valid path for new EZ creation\n    if (srcIIP.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n    }\n\n    INode srcINode \u003d srcIIP.getLastINode();\n    if (!srcINode.isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n\n    if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n        get(srcINode.getId()) !\u003d null) {\n      throw new IOException(\n          \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n    }\n\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "13/06/16 11:50 AM",
          "commitNameOld": "709a814fe0153e86a37806796ea27c8252d9c6d1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 115.06,
          "commitsBetweenForRepo": 876,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  XAttr createEncryptionZone(String src, CipherSuite suite,\n+  XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n \n     // Check if src is a valid path for new EZ creation\n-    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n-    if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n-      throw new FileNotFoundException(\"cannot find \" + src);\n+    if (srcIIP.getLastINode() \u003d\u003d null) {\n+      throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n     }\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     INode srcINode \u003d srcIIP.getLastINode();\n     if (!srcINode.isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n \n     if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n         get(srcINode.getId()) !\u003d null) {\n-      throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n-          \"zone.\");\n+      throw new IOException(\n+          \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n-    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n+    FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n\n    // Check if src is a valid path for new EZ creation\n    if (srcIIP.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n    }\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    INode srcINode \u003d srcIIP.getLastINode();\n    if (!srcINode.isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n\n    if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n        get(srcINode.getId()) !\u003d null) {\n      throw new IOException(\n          \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[src-String, suite-CipherSuite, version-CryptoProtocolVersion, keyName-String]",
            "newValue": "[srcIIP-INodesInPath, suite-CipherSuite, version-CryptoProtocolVersion, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "13/06/16 11:50 AM",
          "commitNameOld": "709a814fe0153e86a37806796ea27c8252d9c6d1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 115.06,
          "commitsBetweenForRepo": 876,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  XAttr createEncryptionZone(String src, CipherSuite suite,\n+  XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n \n     // Check if src is a valid path for new EZ creation\n-    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n-    if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n-      throw new FileNotFoundException(\"cannot find \" + src);\n+    if (srcIIP.getLastINode() \u003d\u003d null) {\n+      throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n     }\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     INode srcINode \u003d srcIIP.getLastINode();\n     if (!srcINode.isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n \n     if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n         get(srcINode.getId()) !\u003d null) {\n-      throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n-          \"zone.\");\n+      throw new IOException(\n+          \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n-    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n+    FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(INodesInPath srcIIP, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n\n    // Check if src is a valid path for new EZ creation\n    if (srcIIP.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"cannot find \" + srcIIP.getPath());\n    }\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    INode srcINode \u003d srcIIP.getLastINode();\n    if (!srcINode.isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n\n    if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n        get(srcINode.getId()) !\u003d null) {\n      throw new IOException(\n          \"Directory \" + srcIIP.getPath() + \" is already an encryption zone.\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, srcIIP, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6de9213df111a9a4ed875db995d67af72d08a798": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10458. getFileEncryptionInfo should return quickly for non-encrypted cluster.\n",
      "commitDate": "06/06/16 3:52 PM",
      "commitName": "6de9213df111a9a4ed875db995d67af72d08a798",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/03/16 11:39 AM",
      "commitNameOld": "e3bb38d62567eafe57d16b78deeba1b71c58e41c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 77.18,
      "commitsBetweenForRepo": 502,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   XAttr createEncryptionZone(String src, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n \n     // Check if src is a valid path for new EZ creation\n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n       throw new FileNotFoundException(\"cannot find \" + src);\n     }\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     INode srcINode \u003d srcIIP.getLastINode();\n     if (!srcINode.isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n \n-    if (encryptionZones.get(srcINode.getId()) !\u003d null) {\n+    if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n+        get(srcINode.getId()) !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n           \"zone.\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n\n    // Check if src is a valid path for new EZ creation\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"cannot find \" + src);\n    }\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    INode srcINode \u003d srcIIP.getLastINode();\n    if (!srcINode.isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n\n    if (hasCreatedEncryptionZone() \u0026\u0026 encryptionZones.\n        get(srcINode.getId()) !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n          \"zone.\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9244. Support nested encryption zones.\n\nChange-Id: I43a13035a8b27956e90967ee82058efb647c3415\n",
      "commitDate": "08/02/16 4:30 PM",
      "commitName": "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c",
      "commitAuthor": "zhezhang",
      "commitDateOld": "21/09/15 6:53 PM",
      "commitNameOld": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 139.94,
      "commitsBetweenForRepo": 972,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   XAttr createEncryptionZone(String src, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n+\n+    // Check if src is a valid path for new EZ creation\n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+    if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n+      throw new FileNotFoundException(\"cannot find \" + src);\n+    }\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n-    if (srcIIP !\u003d null \u0026\u0026\n-        srcIIP.getLastINode() !\u003d null \u0026\u0026\n-        !srcIIP.getLastINode().isDirectory()) {\n+    INode srcINode \u003d srcIIP.getLastINode();\n+    if (!srcINode.isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n-    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n-    if (ezi !\u003d null) {\n-      throw new IOException(\"Directory \" + src + \" is already in an \" +\n-          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n+\n+    if (encryptionZones.get(srcINode.getId()) !\u003d null) {\n+      throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n+          \"zone.\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n\n    // Check if src is a valid path for new EZ creation\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP \u003d\u003d null || srcIIP.getLastINode() \u003d\u003d null) {\n      throw new FileNotFoundException(\"cannot find \" + src);\n    }\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    INode srcINode \u003d srcIIP.getLastINode();\n    if (!srcINode.isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n\n    if (encryptionZones.get(srcINode.getId()) !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already an encryption \" +\n          \"zone.\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/07/15 1:55 PM",
      "commitNameOld": "cb03768b1b2250b9b5a7944cf6ef918e8a974e20",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 62.21,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   XAttr createEncryptionZone(String src, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n-        PBHelper.convert(suite, version, keyName);\n+        PBHelperClient.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                       EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelperClient.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/12/14 2:17 PM",
      "commitNameOld": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.9,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   XAttr createEncryptionZone(String src, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelper.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n-    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n+    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n+                                      EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    FSDirXAttrOp.unprotectedSetXAttrs(dir, src, xattrs,\n                                      EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "29/09/14 2:14 PM",
      "commitNameOld": "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 67.04,
      "commitsBetweenForRepo": 578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   XAttr createEncryptionZone(String src, CipherSuite suite,\n       CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n-    if (dir.isNonEmptyDirectory(src)) {\n+    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+    if (dir.isNonEmptyDirectory(srcIIP)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n-    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n         PBHelper.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (dir.isNonEmptyDirectory(srcIIP)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
          "commitDate": "25/09/14 6:40 PM",
          "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/09/14 9:29 PM",
          "commitNameOld": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 3.88,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n+  XAttr createEncryptionZone(String src, CipherSuite suite,\n+      CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n-        PBHelper.convert(suite, keyName);\n+        PBHelper.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[src-String, suite-CipherSuite, keyName-String]",
            "newValue": "[src-String, suite-CipherSuite, version-CryptoProtocolVersion, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
          "commitDate": "25/09/14 6:40 PM",
          "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/09/14 9:29 PM",
          "commitNameOld": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 3.88,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n-  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n+  XAttr createEncryptionZone(String src, CipherSuite suite,\n+      CryptoProtocolVersion version, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n-        PBHelper.convert(suite, keyName);\n+        PBHelper.convert(suite, version, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, version, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 9:28 PM",
          "commitNameOld": "0ecefe60179968984b1892a14411566b7a0c8df3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  XAttr createEncryptionZone(String src, String keyName)\n+  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n+    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n+        PBHelper.convert(suite, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n-        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[src-String, keyName-String]",
            "newValue": "[src-String, suite-CipherSuite, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
          "commitDate": "21/09/14 9:29 PM",
          "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 9:28 PM",
          "commitNameOld": "0ecefe60179968984b1892a14411566b7a0c8df3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  XAttr createEncryptionZone(String src, String keyName)\n+  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     if (srcIIP !\u003d null \u0026\u0026\n         srcIIP.getLastINode() !\u003d null \u0026\u0026\n         !srcIIP.getLastINode().isDirectory()) {\n       throw new IOException(\"Attempt to create an encryption zone for a file.\");\n     }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n+    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n+        PBHelper.convert(suite, keyName);\n     final XAttr ezXAttr \u003d XAttrHelper\n-        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, CipherSuite suite, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final HdfsProtos.ZoneEncryptionInfoProto proto \u003d\n        PBHelper.convert(suite, keyName);\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, proto.toByteArray());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ab47b666d0b6580230afda951eec60c555c4c3d4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6785. Should not be able to create encryption zone using path to a non-directory file. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1614755 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/14 1:00 PM",
      "commitName": "ab47b666d0b6580230afda951eec60c555c4c3d4",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/07/14 8:23 AM",
      "commitNameOld": "512b756973f31359510b8af01bb26c9ddbe06ed9",
      "commitAuthorOld": "Charles Lamb",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   XAttr createEncryptionZone(String src, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+    if (srcIIP !\u003d null \u0026\u0026\n+        srcIIP.getLastINode() !\u003d null \u0026\u0026\n+        !srcIIP.getLastINode().isDirectory()) {\n+      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n+    }\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    if (srcIIP !\u003d null \u0026\u0026\n        srcIIP.getLastINode() !\u003d null \u0026\u0026\n        !srcIIP.getLastINode().isDirectory()) {\n      throw new IOException(\"Attempt to create an encryption zone for a file.\");\n    }\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "512b756973f31359510b8af01bb26c9ddbe06ed9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6738. Remove unnecessary getEncryptionZoneForPath call in EZManager#createEncryptionZone. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612849 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 8:23 AM",
      "commitName": "512b756973f31359510b8af01bb26c9ddbe06ed9",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "22/07/14 10:57 AM",
      "commitNameOld": "69b75fca7aec5f5cbf79bc7db3915119cef69e65",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   XAttr createEncryptionZone(String src, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n     final XAttr ezXAttr \u003d XAttrHelper\n         .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n     xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-    ezi \u003d getEncryptionZoneForPath(srcIIP);\n     return ezXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    return ezXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "69b75fca7aec5f5cbf79bc7db3915119cef69e65": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6720. Remove KeyProvider in EncryptionZoneManager. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612632 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 10:57 AM",
      "commitName": "69b75fca7aec5f5cbf79bc7db3915119cef69e65",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6720. Remove KeyProvider in EncryptionZoneManager. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612632 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 10:57 AM",
          "commitName": "69b75fca7aec5f5cbf79bc7db3915119cef69e65",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/07/14 5:55 PM",
          "commitNameOld": "b57ec165674143daf4fa50378446a9f831d3b9d3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n+  XAttr createEncryptionZone(String src, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n-    final XAttr keyIdXAttr \u003d XAttrHelper\n-        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+    final XAttr ezXAttr \u003d XAttrHelper\n+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n-    xattrs.add(keyIdXAttr);\n+    xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-    // Re-get the new encryption zone add the latest key version\n     ezi \u003d getEncryptionZoneForPath(srcIIP);\n-    return keyIdXAttr;\n+    return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    ezi \u003d getEncryptionZoneForPath(srcIIP);\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[src-String, keyId-String, keyVersion-KeyVersion]",
            "newValue": "[src-String, keyName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6720. Remove KeyProvider in EncryptionZoneManager. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612632 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 10:57 AM",
          "commitName": "69b75fca7aec5f5cbf79bc7db3915119cef69e65",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/07/14 5:55 PM",
          "commitNameOld": "b57ec165674143daf4fa50378446a9f831d3b9d3",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,26 @@\n-  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n+  XAttr createEncryptionZone(String src, String keyName)\n       throws IOException {\n     assert dir.hasWriteLock();\n     if (dir.isNonEmptyDirectory(src)) {\n       throw new IOException(\n           \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n \n     final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n     EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n     if (ezi !\u003d null) {\n       throw new IOException(\"Directory \" + src + \" is already in an \" +\n           \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n     }\n \n-    final XAttr keyIdXAttr \u003d XAttrHelper\n-        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+    final XAttr ezXAttr \u003d XAttrHelper\n+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n \n     final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n-    xattrs.add(keyIdXAttr);\n+    xattrs.add(ezXAttr);\n     // updating the xattr will call addEncryptionZone,\n     // done this way to handle edit log loading\n     dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-    // Re-get the new encryption zone add the latest key version\n     ezi \u003d getEncryptionZoneForPath(srcIIP);\n-    return keyIdXAttr;\n+    return ezXAttr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, String keyName)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final XAttr ezXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyName.getBytes());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(ezXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    ezi \u003d getEncryptionZoneForPath(srcIIP);\n    return ezXAttr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "b57ec165674143daf4fa50378446a9f831d3b9d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6718. Remove EncryptionZoneManager lock. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 5:55 PM",
      "commitName": "b57ec165674143daf4fa50378446a9f831d3b9d3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/07/14 5:27 PM",
      "commitNameOld": "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,27 @@\n   XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n       throws IOException {\n     assert dir.hasWriteLock();\n-    writeLock();\n-    try {\n-      if (dir.isNonEmptyDirectory(src)) {\n-        throw new IOException(\n-            \"Attempt to create an encryption zone for a non-empty directory.\");\n-      }\n-\n-      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n-      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n-      if (ezi !\u003d null) {\n-        throw new IOException(\"Directory \" + src + \" is already in an \" +\n-            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n-      }\n-\n-      final XAttr keyIdXAttr \u003d XAttrHelper\n-          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n-\n-      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n-      xattrs.add(keyIdXAttr);\n-      // updating the xattr will call addEncryptionZone,\n-      // done this way to handle edit log loading\n-      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-      // Re-get the new encryption zone add the latest key version\n-      ezi \u003d getEncryptionZoneForPath(srcIIP);\n-      return keyIdXAttr;\n-    } finally {\n-      writeUnlock();\n+    if (dir.isNonEmptyDirectory(src)) {\n+      throw new IOException(\n+          \"Attempt to create an encryption zone for a non-empty directory.\");\n     }\n+\n+    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n+    if (ezi !\u003d null) {\n+      throw new IOException(\"Directory \" + src + \" is already in an \" +\n+          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n+    }\n+\n+    final XAttr keyIdXAttr \u003d XAttrHelper\n+        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+\n+    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n+    xattrs.add(keyIdXAttr);\n+    // updating the xattr will call addEncryptionZone,\n+    // done this way to handle edit log loading\n+    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n+    // Re-get the new encryption zone add the latest key version\n+    ezi \u003d getEncryptionZoneForPath(srcIIP);\n+    return keyIdXAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n      throws IOException {\n    assert dir.hasWriteLock();\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src + \" is already in an \" +\n          \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n    }\n\n    final XAttr keyIdXAttr \u003d XAttrHelper\n        .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(keyIdXAttr);\n    // updating the xattr will call addEncryptionZone,\n    // done this way to handle edit log loading\n    dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    // Re-get the new encryption zone add the latest key version\n    ezi \u003d getEncryptionZoneForPath(srcIIP);\n    return keyIdXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6716. Update usage of KeyProviderCryptoExtension APIs on NameNode. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612438 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 5:27 PM",
      "commitName": "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/07/14 1:54 PM",
      "commitNameOld": "d79f27b429410daa6770a51867d7ecea728dff89",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 10.15,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n       throws IOException {\n     assert dir.hasWriteLock();\n     writeLock();\n     try {\n       if (dir.isNonEmptyDirectory(src)) {\n         throw new IOException(\n             \"Attempt to create an encryption zone for a non-empty directory.\");\n       }\n \n       final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n       EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n       if (ezi !\u003d null) {\n         throw new IOException(\"Directory \" + src + \" is already in an \" +\n             \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n       }\n \n       final XAttr keyIdXAttr \u003d XAttrHelper\n           .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n \n       final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n       xattrs.add(keyIdXAttr);\n       // updating the xattr will call addEncryptionZone,\n       // done this way to handle edit log loading\n       dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n       // Re-get the new encryption zone add the latest key version\n       ezi \u003d getEncryptionZoneForPath(srcIIP);\n-      ezi.addKeyVersion(keyVersion);\n       return keyIdXAttr;\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n      throws IOException {\n    assert dir.hasWriteLock();\n    writeLock();\n    try {\n      if (dir.isNonEmptyDirectory(src)) {\n        throw new IOException(\n            \"Attempt to create an encryption zone for a non-empty directory.\");\n      }\n\n      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n      if (ezi !\u003d null) {\n        throw new IOException(\"Directory \" + src + \" is already in an \" +\n            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n      }\n\n      final XAttr keyIdXAttr \u003d XAttrHelper\n          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n\n      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n      xattrs.add(keyIdXAttr);\n      // updating the xattr will call addEncryptionZone,\n      // done this way to handle edit log loading\n      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n      // Re-get the new encryption zone add the latest key version\n      ezi \u003d getEncryptionZoneForPath(srcIIP);\n      return keyIdXAttr;\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "d79f27b429410daa6770a51867d7ecea728dff89": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6474. Namenode needs to get the actual keys and iv from the KeyProvider. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609833 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 1:54 PM",
      "commitName": "d79f27b429410daa6770a51867d7ecea728dff89",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6474. Namenode needs to get the actual keys and iv from the KeyProvider. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609833 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/14 1:54 PM",
          "commitName": "d79f27b429410daa6770a51867d7ecea728dff89",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/07/14 9:34 PM",
          "commitNameOld": "ceed0f6c46736323bd1b077125ff4e217c649208",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 3.68,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,33 @@\n-  XAttr createEncryptionZone(String src, String keyId) throws IOException {\n-    if (dir.isNonEmptyDirectory(src)) {\n-      throw new IOException(\n-          \"Attempt to create an encryption zone for a non-empty directory.\");\n-    }\n+  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n+      throws IOException {\n+    assert dir.hasWriteLock();\n+    writeLock();\n+    try {\n+      if (dir.isNonEmptyDirectory(src)) {\n+        throw new IOException(\n+            \"Attempt to create an encryption zone for a non-empty directory.\");\n+      }\n \n-    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n-    final EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n-    if (ezi !\u003d null) {\n-      throw new IOException(\"Directory \" + src +\n-          \" is already in an encryption zone. (\" + ezi.getFullPathName() + \")\");\n-    }\n+      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n+      if (ezi !\u003d null) {\n+        throw new IOException(\"Directory \" + src + \" is already in an \" +\n+            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n+      }\n \n-    final XAttr keyIdXAttr \u003d\n-        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n-    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n-    xattrs.add(keyIdXAttr);\n-    final INode inode \u003d\n-        dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-    addEncryptionZone(inode.getId(), keyId);\n-    return keyIdXAttr;\n+      final XAttr keyIdXAttr \u003d XAttrHelper\n+          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+\n+      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n+      xattrs.add(keyIdXAttr);\n+      // updating the xattr will call addEncryptionZone,\n+      // done this way to handle edit log loading\n+      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n+      // Re-get the new encryption zone add the latest key version\n+      ezi \u003d getEncryptionZoneForPath(srcIIP);\n+      ezi.addKeyVersion(keyVersion);\n+      return keyIdXAttr;\n+    } finally {\n+      writeUnlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n      throws IOException {\n    assert dir.hasWriteLock();\n    writeLock();\n    try {\n      if (dir.isNonEmptyDirectory(src)) {\n        throw new IOException(\n            \"Attempt to create an encryption zone for a non-empty directory.\");\n      }\n\n      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n      if (ezi !\u003d null) {\n        throw new IOException(\"Directory \" + src + \" is already in an \" +\n            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n      }\n\n      final XAttr keyIdXAttr \u003d XAttrHelper\n          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n\n      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n      xattrs.add(keyIdXAttr);\n      // updating the xattr will call addEncryptionZone,\n      // done this way to handle edit log loading\n      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n      // Re-get the new encryption zone add the latest key version\n      ezi \u003d getEncryptionZoneForPath(srcIIP);\n      ezi.addKeyVersion(keyVersion);\n      return keyIdXAttr;\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[src-String, keyId-String]",
            "newValue": "[src-String, keyId-String, keyVersion-KeyVersion]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6474. Namenode needs to get the actual keys and iv from the KeyProvider. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609833 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/14 1:54 PM",
          "commitName": "d79f27b429410daa6770a51867d7ecea728dff89",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/07/14 9:34 PM",
          "commitNameOld": "ceed0f6c46736323bd1b077125ff4e217c649208",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 3.68,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,33 @@\n-  XAttr createEncryptionZone(String src, String keyId) throws IOException {\n-    if (dir.isNonEmptyDirectory(src)) {\n-      throw new IOException(\n-          \"Attempt to create an encryption zone for a non-empty directory.\");\n-    }\n+  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n+      throws IOException {\n+    assert dir.hasWriteLock();\n+    writeLock();\n+    try {\n+      if (dir.isNonEmptyDirectory(src)) {\n+        throw new IOException(\n+            \"Attempt to create an encryption zone for a non-empty directory.\");\n+      }\n \n-    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n-    final EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n-    if (ezi !\u003d null) {\n-      throw new IOException(\"Directory \" + src +\n-          \" is already in an encryption zone. (\" + ezi.getFullPathName() + \")\");\n-    }\n+      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n+      if (ezi !\u003d null) {\n+        throw new IOException(\"Directory \" + src + \" is already in an \" +\n+            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n+      }\n \n-    final XAttr keyIdXAttr \u003d\n-        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n-    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n-    xattrs.add(keyIdXAttr);\n-    final INode inode \u003d\n-        dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n-    addEncryptionZone(inode.getId(), keyId);\n-    return keyIdXAttr;\n+      final XAttr keyIdXAttr \u003d XAttrHelper\n+          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+\n+      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n+      xattrs.add(keyIdXAttr);\n+      // updating the xattr will call addEncryptionZone,\n+      // done this way to handle edit log loading\n+      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n+      // Re-get the new encryption zone add the latest key version\n+      ezi \u003d getEncryptionZoneForPath(srcIIP);\n+      ezi.addKeyVersion(keyVersion);\n+      return keyIdXAttr;\n+    } finally {\n+      writeUnlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  XAttr createEncryptionZone(String src, String keyId, KeyVersion keyVersion)\n      throws IOException {\n    assert dir.hasWriteLock();\n    writeLock();\n    try {\n      if (dir.isNonEmptyDirectory(src)) {\n        throw new IOException(\n            \"Attempt to create an encryption zone for a non-empty directory.\");\n      }\n\n      final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n      EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n      if (ezi !\u003d null) {\n        throw new IOException(\"Directory \" + src + \" is already in an \" +\n            \"encryption zone. (\" + getFullPathName(ezi) + \")\");\n      }\n\n      final XAttr keyIdXAttr \u003d XAttrHelper\n          .buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n\n      final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n      xattrs.add(keyIdXAttr);\n      // updating the xattr will call addEncryptionZone,\n      // done this way to handle edit log loading\n      dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n      // Re-get the new encryption zone add the latest key version\n      ezi \u003d getEncryptionZoneForPath(srcIIP);\n      ezi.addKeyVersion(keyVersion);\n      return keyIdXAttr;\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ceed0f6c46736323bd1b077125ff4e217c649208": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6635. Refactor encryption zone functionality into new EncryptionZoneManager class. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 9:34 PM",
      "commitName": "ceed0f6c46736323bd1b077125ff4e217c649208",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,22 @@\n+  XAttr createEncryptionZone(String src, String keyId) throws IOException {\n+    if (dir.isNonEmptyDirectory(src)) {\n+      throw new IOException(\n+          \"Attempt to create an encryption zone for a non-empty directory.\");\n+    }\n+\n+    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n+    final EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n+    if (ezi !\u003d null) {\n+      throw new IOException(\"Directory \" + src +\n+          \" is already in an encryption zone. (\" + ezi.getFullPathName() + \")\");\n+    }\n+\n+    final XAttr keyIdXAttr \u003d\n+        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n+    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n+    xattrs.add(keyIdXAttr);\n+    final INode inode \u003d\n+        dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n+    addEncryptionZone(inode.getId(), keyId);\n+    return keyIdXAttr;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  XAttr createEncryptionZone(String src, String keyId) throws IOException {\n    if (dir.isNonEmptyDirectory(src)) {\n      throw new IOException(\n          \"Attempt to create an encryption zone for a non-empty directory.\");\n    }\n\n    final INodesInPath srcIIP \u003d dir.getINodesInPath4Write(src, false);\n    final EncryptionZoneInt ezi \u003d getEncryptionZoneForPath(srcIIP);\n    if (ezi !\u003d null) {\n      throw new IOException(\"Directory \" + src +\n          \" is already in an encryption zone. (\" + ezi.getFullPathName() + \")\");\n    }\n\n    final XAttr keyIdXAttr \u003d\n        XAttrHelper.buildXAttr(CRYPTO_XATTR_ENCRYPTION_ZONE, keyId.getBytes());\n    final List\u003cXAttr\u003e xattrs \u003d Lists.newArrayListWithCapacity(1);\n    xattrs.add(keyIdXAttr);\n    final INode inode \u003d\n        dir.unprotectedSetXAttrs(src, xattrs, EnumSet.of(XAttrSetFlag.CREATE));\n    addEncryptionZone(inode.getId(), keyId);\n    return keyIdXAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java"
    }
  }
}