{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultRequestInterceptor.java",
  "functionName": "init",
  "functionId": "init___appContext-AMRMProxyApplicationContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
  "functionStartLine": 69,
  "functionEndLine": 93,
  "numCommitsSeen": 9,
  "timeTaken": 1636,
  "changeHistory": [
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02"
  ],
  "changeHistoryShort": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ybodychange",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ybodychange",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/07/16 11:48 AM",
      "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.54,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,25 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     try {\n       user \u003d\n           UserGroupInformation.createProxyUser(appContext\n               .getApplicationAttemptId().toString(), UserGroupInformation\n               .getCurrentUser());\n       user.addToken(appContext.getAMRMToken());\n       final Configuration conf \u003d this.getConf();\n \n-      rmClient \u003d user.doAs(\n-          new PrivilegedExceptionAction\u003cDistributedSchedulingAMProtocol\u003e() {\n-            @Override\n-            public DistributedSchedulingAMProtocol run() throws Exception {\n-              setAMRMTokenService(conf);\n-              return ServerRMProxy.createRMProxy(conf,\n-                  DistributedSchedulingAMProtocol.class);\n-            }\n-          });\n+      rmClient \u003d createRMClient(appContext, conf);\n     } catch (IOException e) {\n       String message \u003d\n           \"Error while creating of RM app master service proxy for attemptId:\"\n               + appContext.getApplicationAttemptId().toString();\n       if (user !\u003d null) {\n         message +\u003d \", user: \" + user;\n       }\n \n       LOG.info(message);\n       throw new YarnRuntimeException(message, e);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    try {\n      user \u003d\n          UserGroupInformation.createProxyUser(appContext\n              .getApplicationAttemptId().toString(), UserGroupInformation\n              .getCurrentUser());\n      user.addToken(appContext.getAMRMToken());\n      final Configuration conf \u003d this.getConf();\n\n      rmClient \u003d createRMClient(appContext, conf);\n    } catch (IOException e) {\n      String message \u003d\n          \"Error while creating of RM app master service proxy for attemptId:\"\n              + appContext.getApplicationAttemptId().toString();\n      if (user !\u003d null) {\n        message +\u003d \", user: \" + user;\n      }\n\n      LOG.info(message);\n      throw new YarnRuntimeException(message, e);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
      "extendedDetails": {}
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "22/06/16 7:04 PM",
      "commitNameOld": "99e5dd68d0f44109c169d74824fa45a7396a5990",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 38.7,
      "commitsBetweenForRepo": 383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     try {\n       user \u003d\n           UserGroupInformation.createProxyUser(appContext\n               .getApplicationAttemptId().toString(), UserGroupInformation\n               .getCurrentUser());\n       user.addToken(appContext.getAMRMToken());\n       final Configuration conf \u003d this.getConf();\n \n-      rmClient \u003d\n-          user.doAs(new PrivilegedExceptionAction\u003cDistributedSchedulerProtocol\u003e() {\n+      rmClient \u003d user.doAs(\n+          new PrivilegedExceptionAction\u003cDistributedSchedulingAMProtocol\u003e() {\n             @Override\n-            public DistributedSchedulerProtocol run() throws Exception {\n+            public DistributedSchedulingAMProtocol run() throws Exception {\n               setAMRMTokenService(conf);\n               return ServerRMProxy.createRMProxy(conf,\n-                  DistributedSchedulerProtocol.class);\n+                  DistributedSchedulingAMProtocol.class);\n             }\n           });\n     } catch (IOException e) {\n       String message \u003d\n           \"Error while creating of RM app master service proxy for attemptId:\"\n               + appContext.getApplicationAttemptId().toString();\n       if (user !\u003d null) {\n         message +\u003d \", user: \" + user;\n       }\n \n       LOG.info(message);\n       throw new YarnRuntimeException(message, e);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    try {\n      user \u003d\n          UserGroupInformation.createProxyUser(appContext\n              .getApplicationAttemptId().toString(), UserGroupInformation\n              .getCurrentUser());\n      user.addToken(appContext.getAMRMToken());\n      final Configuration conf \u003d this.getConf();\n\n      rmClient \u003d user.doAs(\n          new PrivilegedExceptionAction\u003cDistributedSchedulingAMProtocol\u003e() {\n            @Override\n            public DistributedSchedulingAMProtocol run() throws Exception {\n              setAMRMTokenService(conf);\n              return ServerRMProxy.createRMProxy(conf,\n                  DistributedSchedulingAMProtocol.class);\n            }\n          });\n    } catch (IOException e) {\n      String message \u003d\n          \"Error while creating of RM app master service proxy for attemptId:\"\n              + appContext.getApplicationAttemptId().toString();\n      if (user !\u003d null) {\n        message +\u003d \", user: \" + user;\n      }\n\n      LOG.info(message);\n      throw new YarnRuntimeException(message, e);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "27/03/16 8:22 PM",
      "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 28.09,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     try {\n       user \u003d\n           UserGroupInformation.createProxyUser(appContext\n               .getApplicationAttemptId().toString(), UserGroupInformation\n               .getCurrentUser());\n       user.addToken(appContext.getAMRMToken());\n       final Configuration conf \u003d this.getConf();\n \n       rmClient \u003d\n-          user.doAs(new PrivilegedExceptionAction\u003cApplicationMasterProtocol\u003e() {\n+          user.doAs(new PrivilegedExceptionAction\u003cDistributedSchedulerProtocol\u003e() {\n             @Override\n-            public ApplicationMasterProtocol run() throws Exception {\n-              return ClientRMProxy.createRMProxy(conf,\n-                  ApplicationMasterProtocol.class);\n+            public DistributedSchedulerProtocol run() throws Exception {\n+              setAMRMTokenService(conf);\n+              return ServerRMProxy.createRMProxy(conf,\n+                  DistributedSchedulerProtocol.class);\n             }\n           });\n     } catch (IOException e) {\n       String message \u003d\n           \"Error while creating of RM app master service proxy for attemptId:\"\n               + appContext.getApplicationAttemptId().toString();\n       if (user !\u003d null) {\n         message +\u003d \", user: \" + user;\n       }\n \n       LOG.info(message);\n       throw new YarnRuntimeException(message, e);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    try {\n      user \u003d\n          UserGroupInformation.createProxyUser(appContext\n              .getApplicationAttemptId().toString(), UserGroupInformation\n              .getCurrentUser());\n      user.addToken(appContext.getAMRMToken());\n      final Configuration conf \u003d this.getConf();\n\n      rmClient \u003d\n          user.doAs(new PrivilegedExceptionAction\u003cDistributedSchedulerProtocol\u003e() {\n            @Override\n            public DistributedSchedulerProtocol run() throws Exception {\n              setAMRMTokenService(conf);\n              return ServerRMProxy.createRMProxy(conf,\n                  DistributedSchedulerProtocol.class);\n            }\n          });\n    } catch (IOException e) {\n      String message \u003d\n          \"Error while creating of RM app master service proxy for attemptId:\"\n              + appContext.getApplicationAttemptId().toString();\n      if (user !\u003d null) {\n        message +\u003d \", user: \" + user;\n      }\n\n      LOG.info(message);\n      throw new YarnRuntimeException(message, e);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
      "extendedDetails": {}
    },
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  public void init(AMRMProxyApplicationContext appContext) {\n+    super.init(appContext);\n+    try {\n+      user \u003d\n+          UserGroupInformation.createProxyUser(appContext\n+              .getApplicationAttemptId().toString(), UserGroupInformation\n+              .getCurrentUser());\n+      user.addToken(appContext.getAMRMToken());\n+      final Configuration conf \u003d this.getConf();\n+\n+      rmClient \u003d\n+          user.doAs(new PrivilegedExceptionAction\u003cApplicationMasterProtocol\u003e() {\n+            @Override\n+            public ApplicationMasterProtocol run() throws Exception {\n+              return ClientRMProxy.createRMProxy(conf,\n+                  ApplicationMasterProtocol.class);\n+            }\n+          });\n+    } catch (IOException e) {\n+      String message \u003d\n+          \"Error while creating of RM app master service proxy for attemptId:\"\n+              + appContext.getApplicationAttemptId().toString();\n+      if (user !\u003d null) {\n+        message +\u003d \", user: \" + user;\n+      }\n+\n+      LOG.info(message);\n+      throw new YarnRuntimeException(message, e);\n+    } catch (Exception e) {\n+      throw new YarnRuntimeException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    try {\n      user \u003d\n          UserGroupInformation.createProxyUser(appContext\n              .getApplicationAttemptId().toString(), UserGroupInformation\n              .getCurrentUser());\n      user.addToken(appContext.getAMRMToken());\n      final Configuration conf \u003d this.getConf();\n\n      rmClient \u003d\n          user.doAs(new PrivilegedExceptionAction\u003cApplicationMasterProtocol\u003e() {\n            @Override\n            public ApplicationMasterProtocol run() throws Exception {\n              return ClientRMProxy.createRMProxy(conf,\n                  ApplicationMasterProtocol.class);\n            }\n          });\n    } catch (IOException e) {\n      String message \u003d\n          \"Error while creating of RM app master service proxy for attemptId:\"\n              + appContext.getApplicationAttemptId().toString();\n      if (user !\u003d null) {\n        message +\u003d \", user: \" + user;\n      }\n\n      LOG.info(message);\n      throw new YarnRuntimeException(message, e);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java"
    }
  }
}