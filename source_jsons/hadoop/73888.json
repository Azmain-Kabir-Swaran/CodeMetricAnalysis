{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "processConnectionContext",
  "functionId": "processConnectionContext___buffer-RpcWritable.Buffer",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2432,
  "functionEndLine": 2478,
  "numCommitsSeen": 391,
  "timeTaken": 8860,
  "changeHistory": [
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
    "bd3735554fa5c3bc064c57ec78f4308430b14b48",
    "580a8334963709e728ed677c815fb7fef9bca70e",
    "b3018e73ccae43484d9cb85eabae814eb7f050a6",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
    "5f9b4c14a175873b4f82654513e289c657c694eb",
    "eb1cc863d20c77f93fe1eb3604dbb5705325c40e",
    "1594dd6965c412a08339a0079ee1416dd6f595f9",
    "b1aa62a848646f78e019c74186d9696e9101afcf",
    "a7d4f30131b374baaa1efba22c7ae8e80c000f45",
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "8a2b40d0726215e48b53ab22382dd49379c36249",
    "b802476d9d44e581d64f810c55fc8f0c35171401",
    "1793e7d9094cd984ae402177c5935239059d74e8",
    "940389afce6a1b9b9e1519aed528cbc444786756",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "bd3735554fa5c3bc064c57ec78f4308430b14b48": "Ybodychange",
    "580a8334963709e728ed677c815fb7fef9bca70e": "Ymultichange(Yparameterchange,Ybodychange)",
    "b3018e73ccae43484d9cb85eabae814eb7f050a6": "Ybodychange",
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "5f9b4c14a175873b4f82654513e289c657c694eb": "Ybodychange",
    "eb1cc863d20c77f93fe1eb3604dbb5705325c40e": "Ybodychange",
    "1594dd6965c412a08339a0079ee1416dd6f595f9": "Ybodychange",
    "b1aa62a848646f78e019c74186d9696e9101afcf": "Ybodychange",
    "a7d4f30131b374baaa1efba22c7ae8e80c000f45": "Ybodychange",
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9": "Ymultichange(Yrename,Ybodychange)",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "8a2b40d0726215e48b53ab22382dd49379c36249": "Ybodychange",
    "b802476d9d44e581d64f810c55fc8f0c35171401": "Ybodychange",
    "1793e7d9094cd984ae402177c5935239059d74e8": "Ybodychange",
    "940389afce6a1b9b9e1519aed528cbc444786756": "Ymultichange(Yparameterchange,Ybodychange)",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": "Ybodychange",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 8:47 AM",
      "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
          "commitDate": "09/02/17 8:47 AM",
          "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "28/11/16 9:07 PM",
          "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 72.49,
          "commitsBetweenForRepo": 352,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n     private void processConnectionContext(RpcWritable.Buffer buffer)\n-        throws WrappedRpcServerException {\n+        throws RpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n       connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n-            throw new WrappedRpcServerException(\n+            throw new FatalRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n       if (user !\u003d null) {\n         connectionManager.incrUserConnections(user.getShortUserName());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(RpcWritable.Buffer buffer)\n        throws RpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new FatalRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n      if (user !\u003d null) {\n        connectionManager.incrUserConnections(user.getShortUserName());\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[WrappedRpcServerException]",
            "newValue": "[RpcServerException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
          "commitDate": "09/02/17 8:47 AM",
          "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "28/11/16 9:07 PM",
          "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 72.49,
          "commitsBetweenForRepo": 352,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n     private void processConnectionContext(RpcWritable.Buffer buffer)\n-        throws WrappedRpcServerException {\n+        throws RpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n-        throw new WrappedRpcServerException(\n+        throw new FatalRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n       connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n-            throw new WrappedRpcServerException(\n+            throw new FatalRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n       if (user !\u003d null) {\n         connectionManager.incrUserConnections(user.getShortUserName());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(RpcWritable.Buffer buffer)\n        throws RpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new FatalRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new FatalRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n      if (user !\u003d null) {\n        connectionManager.incrUserConnections(user.getShortUserName());\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "bd3735554fa5c3bc064c57ec78f4308430b14b48": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13742. Expose NumOpenConnectionsPerUser as a metric. Brahma Reddy Battula.\n",
      "commitDate": "17/11/16 10:16 AM",
      "commitName": "bd3735554fa5c3bc064c57ec78f4308430b14b48",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "29/09/16 11:27 AM",
      "commitNameOld": "236ac773c964fa21d6d5f1496023cd61818dd3b1",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n     private void processConnectionContext(RpcWritable.Buffer buffer)\n         throws WrappedRpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n         throw new WrappedRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n       connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n             throw new WrappedRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n+      if (user !\u003d null) {\n+        connectionManager.incrUserConnections(user.getShortUserName());\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(RpcWritable.Buffer buffer)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n      if (user !\u003d null) {\n        connectionManager.incrUserConnections(user.getShortUserName());\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "580a8334963709e728ed677c815fb7fef9bca70e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13483. Optimize IPC server protobuf decoding. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 11:22 AM",
      "commitName": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13483. Optimize IPC server protobuf decoding. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 11:22 AM",
          "commitName": "580a8334963709e728ed677c815fb7fef9bca70e",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "03/08/16 7:31 AM",
          "commitNameOld": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-    private void processConnectionContext(DataInputStream dis)\n+    private void processConnectionContext(RpcWritable.Buffer buffer)\n         throws WrappedRpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n         throw new WrappedRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n-      connectionContext \u003d decodeProtobufFromStream(\n-          IpcConnectionContextProto.newBuilder(), dis);\n+      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n             throw new WrappedRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(RpcWritable.Buffer buffer)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[dis-DataInputStream]",
            "newValue": "[buffer-RpcWritable.Buffer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13483. Optimize IPC server protobuf decoding. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 11:22 AM",
          "commitName": "580a8334963709e728ed677c815fb7fef9bca70e",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "03/08/16 7:31 AM",
          "commitNameOld": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,44 @@\n-    private void processConnectionContext(DataInputStream dis)\n+    private void processConnectionContext(RpcWritable.Buffer buffer)\n         throws WrappedRpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n         throw new WrappedRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n-      connectionContext \u003d decodeProtobufFromStream(\n-          IpcConnectionContextProto.newBuilder(), dis);\n+      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n             throw new WrappedRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(RpcWritable.Buffer buffer)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d getMessage(IpcConnectionContextProto.getDefaultInstance(), buffer);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "b3018e73ccae43484d9cb85eabae814eb7f050a6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13429. Dispose of unnecessary SASL servers. Contributed by Daryn Sharp.\n",
      "commitDate": "02/08/16 8:40 AM",
      "commitName": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 1.29,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void processConnectionContext(DataInputStream dis)\n         throws WrappedRpcServerException {\n       // allow only one connection context during a session\n       if (connectionContextRead) {\n         throw new WrappedRpcServerException(\n             RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n             \"Connection context already processed\");\n       }\n       connectionContext \u003d decodeProtobufFromStream(\n           IpcConnectionContextProto.newBuilder(), dis);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n-      if (saslServer \u003d\u003d null) {\n+      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n             throw new WrappedRpcServerException(\n                 RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                 new AccessControlException(\"Authenticated user (\" + user\n                     + \") doesn\u0027t match what the client claims to be (\"\n                     + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n       authorizeConnection();\n       // don\u0027t set until after authz because connection isn\u0027t established\n       connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(DataInputStream dis)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d decodeProtobufFromStream(\n          IpcConnectionContextProto.newBuilder(), dis);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (authProtocol \u003d\u003d AuthProtocol.NONE) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "a3a9d72e98a9cc0f94af7c832dd13c408856636d": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 10:59 AM",
      "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
      "commitAuthor": "Daryn Sharp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 10:59 AM",
          "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "09/07/13 4:45 PM",
          "commitNameOld": "0a5f16a89e3942953d7d6c2d26542764298c6430",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 6.76,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,45 @@\n-    private void processConnectionContext(byte[] buf) throws IOException {\n-      DataInputStream in \u003d\n-        new DataInputStream(new ByteArrayInputStream(buf));\n-      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n+    private void processConnectionContext(DataInputStream dis)\n+        throws WrappedRpcServerException {\n+      // allow only one connection context during a session\n+      if (connectionContextRead) {\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n+            \"Connection context already processed\");\n+      }\n+      connectionContext \u003d decodeProtobufFromStream(\n+          IpcConnectionContextProto.newBuilder(), dis);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n-            throw new AccessControlException(\"Authenticated user (\" + user\n-                + \") doesn\u0027t match what the client claims to be (\"\n-                + protocolUser + \")\");\n+            throw new WrappedRpcServerException(\n+                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n+                new AccessControlException(\"Authenticated user (\" + user\n+                    + \") doesn\u0027t match what the client claims to be (\"\n+                    + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n+      authorizeConnection();\n+      // don\u0027t set until after authz because connection isn\u0027t established\n+      connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(DataInputStream dis)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d decodeProtobufFromStream(\n          IpcConnectionContextProto.newBuilder(), dis);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[buf-byte[]]",
            "newValue": "[dis-DataInputStream]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 10:59 AM",
          "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "09/07/13 4:45 PM",
          "commitNameOld": "0a5f16a89e3942953d7d6c2d26542764298c6430",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 6.76,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,45 @@\n-    private void processConnectionContext(byte[] buf) throws IOException {\n-      DataInputStream in \u003d\n-        new DataInputStream(new ByteArrayInputStream(buf));\n-      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n+    private void processConnectionContext(DataInputStream dis)\n+        throws WrappedRpcServerException {\n+      // allow only one connection context during a session\n+      if (connectionContextRead) {\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n+            \"Connection context already processed\");\n+      }\n+      connectionContext \u003d decodeProtobufFromStream(\n+          IpcConnectionContextProto.newBuilder(), dis);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n-            throw new AccessControlException(\"Authenticated user (\" + user\n-                + \") doesn\u0027t match what the client claims to be (\"\n-                + protocolUser + \")\");\n+            throw new WrappedRpcServerException(\n+                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n+                new AccessControlException(\"Authenticated user (\" + user\n+                    + \") doesn\u0027t match what the client claims to be (\"\n+                    + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n+      authorizeConnection();\n+      // don\u0027t set until after authz because connection isn\u0027t established\n+      connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(DataInputStream dis)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d decodeProtobufFromStream(\n          IpcConnectionContextProto.newBuilder(), dis);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[WrappedRpcServerException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9683. [RPC v9] Wrap IpcConnectionContext in RPC headers (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 10:59 AM",
          "commitName": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "09/07/13 4:45 PM",
          "commitNameOld": "0a5f16a89e3942953d7d6c2d26542764298c6430",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 6.76,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,45 @@\n-    private void processConnectionContext(byte[] buf) throws IOException {\n-      DataInputStream in \u003d\n-        new DataInputStream(new ByteArrayInputStream(buf));\n-      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n+    private void processConnectionContext(DataInputStream dis)\n+        throws WrappedRpcServerException {\n+      // allow only one connection context during a session\n+      if (connectionContextRead) {\n+        throw new WrappedRpcServerException(\n+            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n+            \"Connection context already processed\");\n+      }\n+      connectionContext \u003d decodeProtobufFromStream(\n+          IpcConnectionContextProto.newBuilder(), dis);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n-            throw new AccessControlException(\"Authenticated user (\" + user\n-                + \") doesn\u0027t match what the client claims to be (\"\n-                + protocolUser + \")\");\n+            throw new WrappedRpcServerException(\n+                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n+                new AccessControlException(\"Authenticated user (\" + user\n+                    + \") doesn\u0027t match what the client claims to be (\"\n+                    + protocolUser + \")\"));\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n+      authorizeConnection();\n+      // don\u0027t set until after authz because connection isn\u0027t established\n+      connectionContextRead \u003d true;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(DataInputStream dis)\n        throws WrappedRpcServerException {\n      // allow only one connection context during a session\n      if (connectionContextRead) {\n        throw new WrappedRpcServerException(\n            RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,\n            \"Connection context already processed\");\n      }\n      connectionContext \u003d decodeProtobufFromStream(\n          IpcConnectionContextProto.newBuilder(), dis);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new WrappedRpcServerException(\n                RpcErrorCodeProto.FATAL_UNAUTHORIZED,\n                new AccessControlException(\"Authenticated user (\" + user\n                    + \") doesn\u0027t match what the client claims to be (\"\n                    + protocolUser + \")\"));\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n      authorizeConnection();\n      // don\u0027t set until after authz because connection isn\u0027t established\n      connectionContextRead \u003d true;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "5f9b4c14a175873b4f82654513e289c657c694eb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 1:09 PM",
      "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "10/06/13 8:30 PM",
      "commitNameOld": "a841be808a780db0653b17bb702037f422c5b1ec",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 10.69,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n-          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n+          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.TOKEN) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "eb1cc863d20c77f93fe1eb3604dbb5705325c40e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9339. IPC.Server incorrectly sets UGI auth type. Contributed by Daryn Sharp\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450963 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/13 1:16 PM",
      "commitName": "eb1cc863d20c77f93fe1eb3604dbb5705325c40e",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/12/12 2:16 PM",
      "commitNameOld": "aa4fe26a01d2ca881cb458d49032ce419351bed1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 71.96,
      "commitsBetweenForRepo": 301,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,34 @@\n     private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n-        if (user !\u003d null) {\n-          user.setAuthenticationMethod(AuthMethod.SIMPLE);\n-        }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "1594dd6965c412a08339a0079ee1416dd6f595f9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9015. Standardize creation of SaslRpcServers (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406851 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/12 2:50 PM",
      "commitName": "1594dd6965c412a08339a0079ee1416dd6f595f9",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/11/12 10:37 AM",
      "commitNameOld": "b1aa62a848646f78e019c74186d9696e9101afcf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n-      if (!useSasl) {\n+      if (saslServer \u003d\u003d null) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (saslServer \u003d\u003d null) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "b1aa62a848646f78e019c74186d9696e9101afcf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9010. Map UGI authenticationMethod to RPC authMethod (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1405910 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/11/12 10:37 AM",
      "commitName": "b1aa62a848646f78e019c74186d9696e9101afcf",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/10/12 8:46 AM",
      "commitNameOld": "12eb3b8abc0ac056922040ff935ef299849ca557",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 6.12,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n-          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n+          user.setAuthenticationMethod(AuthMethod.SIMPLE);\n         }\n       } else {\n         // user is authenticated\n-        user.setAuthenticationMethod(authMethod.authenticationMethod);\n+        user.setAuthenticationMethod(authMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "a7d4f30131b374baaa1efba22c7ae8e80c000f45": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8783. Improve RPC.Server\u0027s digest auth (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1393483 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/12 6:43 AM",
      "commitName": "a7d4f30131b374baaa1efba22c7ae8e80c000f45",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "24/09/12 4:16 PM",
      "commitNameOld": "5308a0ecd5d2d31ac92122ed517e24449137184c",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 8.6,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n     private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n       protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n           .getProtocol() : null;\n \n       UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod.authenticationMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n-            // Now the user is a proxy user, set Authentication method Proxy.\n-            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "    HADOOP-7557 Make IPC header be extensible (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/02/12 12:43 PM",
      "commitName": "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "    HADOOP-7557 Make IPC header be extensible (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/02/12 12:43 PM",
          "commitName": "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "23/02/12 8:05 PM",
          "commitNameOld": "22d5944c42b4bef5144a9f6426751b15717c5a3e",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 5.69,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    private void processHeader(byte[] buf) throws IOException {\n+    private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n-      header.readFields(in);\n-      protocolName \u003d header.getProtocol();\n+      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n+      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n+          .getProtocol() : null;\n \n-      \n-      UserGroupInformation protocolUser \u003d header.getUgi();\n+      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod.authenticationMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n             // Now the user is a proxy user, set Authentication method Proxy.\n             user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "processHeader",
            "newValue": "processConnectionContext"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "    HADOOP-7557 Make IPC header be extensible (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295261 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/02/12 12:43 PM",
          "commitName": "7ae04652a6adf0f9d04b8702a7fe3b9790afa8b9",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "23/02/12 8:05 PM",
          "commitNameOld": "22d5944c42b4bef5144a9f6426751b15717c5a3e",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 5.69,
          "commitsBetweenForRepo": 51,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-    private void processHeader(byte[] buf) throws IOException {\n+    private void processConnectionContext(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n-      header.readFields(in);\n-      protocolName \u003d header.getProtocol();\n+      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n+      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n+          .getProtocol() : null;\n \n-      \n-      UserGroupInformation protocolUser \u003d header.getUgi();\n+      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod.authenticationMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n             // Now the user is a proxy user, set Authentication method Proxy.\n             user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processConnectionContext(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      connectionContext \u003d IpcConnectionContextProto.parseFrom(in);\n      protocolName \u003d connectionContext.hasProtocol() ? connectionContext\n          .getProtocol() : null;\n\n      UserGroupInformation protocolUser \u003d ProtoUtil.getUgi(connectionContext);\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": {
      "type": "Ybodychange",
      "commitMessage": "  HADOOP-7524 and MapReduce-2887 Change RPC to allow multiple protocols including multuple versions of the same protocol (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/09/11 5:31 PM",
      "commitName": "b97a4d40c8752451fc02168a7f6eb3e93e459c2d",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 9.01,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,39 @@\n     private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n-      try {\n-        String protocolClassName \u003d header.getProtocol();\n-        if (protocolClassName !\u003d null) {\n-          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n-          rpcDetailedMetrics.init(protocol);\n-        }\n-      } catch (ClassNotFoundException cnfe) {\n-        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n-      }\n+      protocolName \u003d header.getProtocol();\n+\n       \n       UserGroupInformation protocolUser \u003d header.getUgi();\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod.authenticationMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n             // Now the user is a proxy user, set Authentication method Proxy.\n             user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      protocolName \u003d header.getProtocol();\n\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n          rpcDetailedMetrics.init(protocol);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n          rpcDetailedMetrics.init(protocol);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n          rpcDetailedMetrics.init(protocol);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "8a2b40d0726215e48b53ab22382dd49379c36249": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6920. Metrics instrumentation to move new metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/11 4:56 PM",
      "commitName": "8a2b40d0726215e48b53ab22382dd49379c36249",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "10/05/11 3:24 PM",
      "commitNameOld": "c0d70530b173beb2d53a4175236520df8e3967c8",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n+          rpcDetailedMetrics.init(protocol);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n       UserGroupInformation protocolUser \u003d header.getUgi();\n       if (!useSasl) {\n         user \u003d protocolUser;\n         if (user !\u003d null) {\n           user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n         }\n       } else {\n         // user is authenticated\n         user.setAuthenticationMethod(authMethod.authenticationMethod);\n         //Now we check if this is a proxy user case. If the protocol user is\n         //different from the \u0027user\u0027, it is a proxy user scenario. However, \n         //this is not allowed if user authenticated with DIGEST.\n         if ((protocolUser !\u003d null)\n             \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n           if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n             // Not allowed to doAs if token authentication is used\n             throw new AccessControlException(\"Authenticated user (\" + user\n                 + \") doesn\u0027t match what the client claims to be (\"\n                 + protocolUser + \")\");\n           } else {\n             // Effective user can be different from authenticated user\n             // for simple auth or kerberos auth\n             // The user is the real user. Now we create a proxy user\n             UserGroupInformation realUser \u003d user;\n             user \u003d UserGroupInformation.createProxyUser(protocolUser\n                 .getUserName(), realUser);\n             // Now the user is a proxy user, set Authentication method Proxy.\n             user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n          rpcDetailedMetrics.init(protocol);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "b802476d9d44e581d64f810c55fc8f0c35171401": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6580. UGI should contain authentication method.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@933810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/10 4:01 PM",
      "commitName": "b802476d9d44e581d64f810c55fc8f0c35171401",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "01/03/10 1:36 PM",
      "commitNameOld": "6b9fb8c78b4c18211145deeac7abc5fc0af5d185",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 43.06,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,45 @@\n     private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n       UserGroupInformation protocolUser \u003d header.getUgi();\n       if (!useSasl) {\n         user \u003d protocolUser;\n-      } else if ((protocolUser !\u003d null)\n-          \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n-        if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n-          // Not allowed to doAs if token authentication is used\n-          throw new AccessControlException(\"Authenticated user (\" + user\n-              + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n-              + \")\");\n-        } else {\n-          //Effective user can be different from authenticated user\n-          //for simple auth or kerberos auth\n-          user \u003d UserGroupInformation.createProxyUser(protocolUser\n-              .getUserName(), user);\n+        if (user !\u003d null) {\n+          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n+        }\n+      } else {\n+        // user is authenticated\n+        user.setAuthenticationMethod(authMethod.authenticationMethod);\n+        //Now we check if this is a proxy user case. If the protocol user is\n+        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n+        //this is not allowed if user authenticated with DIGEST.\n+        if ((protocolUser !\u003d null)\n+            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n+          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n+            // Not allowed to doAs if token authentication is used\n+            throw new AccessControlException(\"Authenticated user (\" + user\n+                + \") doesn\u0027t match what the client claims to be (\"\n+                + protocolUser + \")\");\n+          } else {\n+            // Effective user can be different from authenticated user\n+            // for simple auth or kerberos auth\n+            // The user is the real user. Now we create a proxy user\n+            UserGroupInformation realUser \u003d user;\n+            user \u003d UserGroupInformation.createProxyUser(protocolUser\n+                .getUserName(), realUser);\n+            // Now the user is a proxy user, set Authentication method Proxy.\n+            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n+          }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n        if (user !\u003d null) {\n          user.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);\n        }\n      } else {\n        // user is authenticated\n        user.setAuthenticationMethod(authMethod.authenticationMethod);\n        //Now we check if this is a proxy user case. If the protocol user is\n        //different from the \u0027user\u0027, it is a proxy user scenario. However, \n        //this is not allowed if user authenticated with DIGEST.\n        if ((protocolUser !\u003d null)\n            \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n          if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n            // Not allowed to doAs if token authentication is used\n            throw new AccessControlException(\"Authenticated user (\" + user\n                + \") doesn\u0027t match what the client claims to be (\"\n                + protocolUser + \")\");\n          } else {\n            // Effective user can be different from authenticated user\n            // for simple auth or kerberos auth\n            // The user is the real user. Now we create a proxy user\n            UserGroupInformation realUser \u003d user;\n            user \u003d UserGroupInformation.createProxyUser(protocolUser\n                .getUserName(), realUser);\n            // Now the user is a proxy user, set Authentication method Proxy.\n            user.setAuthenticationMethod(AuthenticationMethod.PROXY);\n          }\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "1793e7d9094cd984ae402177c5935239059d74e8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6510. Adds a way for superusers to impersonate other users in a secure environment. Contributed by Jitendra Nath Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@907549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/10 8:55 PM",
      "commitName": "1793e7d9094cd984ae402177c5935239059d74e8",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "02/02/10 5:30 PM",
      "commitNameOld": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,31 @@\n     private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n       UserGroupInformation protocolUser \u003d header.getUgi();\n       if (!useSasl) {\n         user \u003d protocolUser;\n-      } else if (protocolUser !\u003d null \u0026\u0026 !protocolUser.equals(user)) {\n-        throw new AccessControlException(\"Authenticated user (\" + user\n-            + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n-            + \")\");\n+      } else if ((protocolUser !\u003d null)\n+          \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n+        if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n+          // Not allowed to doAs if token authentication is used\n+          throw new AccessControlException(\"Authenticated user (\" + user\n+              + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n+              + \")\");\n+        } else {\n+          //Effective user can be different from authenticated user\n+          //for simple auth or kerberos auth\n+          user \u003d UserGroupInformation.createProxyUser(protocolUser\n+              .getUserName(), user);\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n      } else if ((protocolUser !\u003d null)\n          \u0026\u0026 (!protocolUser.getUserName().equals(user.getUserName()))) {\n        if (authMethod \u003d\u003d AuthMethod.DIGEST) {\n          // Not allowed to doAs if token authentication is used\n          throw new AccessControlException(\"Authenticated user (\" + user\n              + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n              + \")\");\n        } else {\n          //Effective user can be different from authenticated user\n          //for simple auth or kerberos auth\n          user \u003d UserGroupInformation.createProxyUser(protocolUser\n              .getUserName(), user);\n        }\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "940389afce6a1b9b9e1519aed528cbc444786756": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/10 5:30 PM",
      "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthor": "Devaraj Das",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/02/10 5:30 PM",
          "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "27/01/10 12:08 AM",
          "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.72,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,22 @@\n-    private void processHeader() throws IOException {\n+    private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n-        new DataInputStream(new ByteArrayInputStream(data.array()));\n+        new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n-      user \u003d header.getUgi();\n+      UserGroupInformation protocolUser \u003d header.getUgi();\n+      if (!useSasl) {\n+        user \u003d protocolUser;\n+      } else if (protocolUser !\u003d null \u0026\u0026 !protocolUser.equals(user)) {\n+        throw new AccessControlException(\"Authenticated user (\" + user\n+            + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n+            + \")\");\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n      } else if (protocolUser !\u003d null \u0026\u0026 !protocolUser.equals(user)) {\n        throw new AccessControlException(\"Authenticated user (\" + user\n            + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n            + \")\");\n      }\n    }",
          "path": "src/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[buf-byte[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/02/10 5:30 PM",
          "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
          "commitAuthor": "Devaraj Das",
          "commitDateOld": "27/01/10 12:08 AM",
          "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 6.72,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,22 @@\n-    private void processHeader() throws IOException {\n+    private void processHeader(byte[] buf) throws IOException {\n       DataInputStream in \u003d\n-        new DataInputStream(new ByteArrayInputStream(data.array()));\n+        new DataInputStream(new ByteArrayInputStream(buf));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n-      user \u003d header.getUgi();\n+      UserGroupInformation protocolUser \u003d header.getUgi();\n+      if (!useSasl) {\n+        user \u003d protocolUser;\n+      } else if (protocolUser !\u003d null \u0026\u0026 !protocolUser.equals(user)) {\n+        throw new AccessControlException(\"Authenticated user (\" + user\n+            + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n+            + \")\");\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void processHeader(byte[] buf) throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(buf));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      UserGroupInformation protocolUser \u003d header.getUgi();\n      if (!useSasl) {\n        user \u003d protocolUser;\n      } else if (protocolUser !\u003d null \u0026\u0026 !protocolUser.equals(user)) {\n        throw new AccessControlException(\"Authenticated user (\" + user\n            + \") doesn\u0027t match what the client claims to be (\" + protocolUser\n            + \")\");\n      }\n    }",
          "path": "src/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/10 12:08 AM",
      "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "23/12/09 4:47 PM",
      "commitNameOld": "29a1ba1e8fb11432404cea49e46eef47c36bb70a",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 34.31,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,15 @@\n     private void processHeader() throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(data.array()));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n-      // TODO: Get the user name from the GSS API for Kerberbos-based security\n-      // Create the user subject; however use the groups as defined on the\n-      // server-side, don\u0027t trust the user groups provided by the client\n-      UserGroupInformation ugi \u003d header.getUgi();\n-      user \u003d null;\n-      if(ugi !\u003d null) {\n-        user \u003d SecurityUtil.getSubject(conf, header.getUgi().getUserName());\n-      }\n+      user \u003d header.getUgi();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader() throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(data.array()));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      user \u003d header.getUgi();\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": {
      "type": "Ybodychange",
      "commitMessage": "   HADOOP-4656. Add a user to groups mapping service (boryas and acmurthy_)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@892066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/09 5:29 PM",
      "commitName": "ae93ba7501d95e9d26a29de25f4cc39e5225ca20",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 212.88,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n     private void processHeader() throws IOException {\n       DataInputStream in \u003d\n         new DataInputStream(new ByteArrayInputStream(data.array()));\n       header.readFields(in);\n       try {\n         String protocolClassName \u003d header.getProtocol();\n         if (protocolClassName !\u003d null) {\n           protocol \u003d getProtocolClass(header.getProtocol(), conf);\n         }\n       } catch (ClassNotFoundException cnfe) {\n         throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n       }\n       \n       // TODO: Get the user name from the GSS API for Kerberbos-based security\n-      // Create the user subject\n-      user \u003d SecurityUtil.getSubject(header.getUgi());\n+      // Create the user subject; however use the groups as defined on the\n+      // server-side, don\u0027t trust the user groups provided by the client\n+      UserGroupInformation ugi \u003d header.getUgi();\n+      user \u003d null;\n+      if(ugi !\u003d null) {\n+        user \u003d SecurityUtil.getSubject(conf, header.getUgi().getUserName());\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader() throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(data.array()));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      // TODO: Get the user name from the GSS API for Kerberbos-based security\n      // Create the user subject; however use the groups as defined on the\n      // server-side, don\u0027t trust the user groups provided by the client\n      UserGroupInformation ugi \u003d header.getUgi();\n      user \u003d null;\n      if(ugi !\u003d null) {\n        user \u003d SecurityUtil.getSubject(conf, header.getUgi().getUserName());\n      }\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,17 @@\n+    private void processHeader() throws IOException {\n+      DataInputStream in \u003d\n+        new DataInputStream(new ByteArrayInputStream(data.array()));\n+      header.readFields(in);\n+      try {\n+        String protocolClassName \u003d header.getProtocol();\n+        if (protocolClassName !\u003d null) {\n+          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n+        }\n+      } catch (ClassNotFoundException cnfe) {\n+        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n+      }\n+      \n+      // TODO: Get the user name from the GSS API for Kerberbos-based security\n+      // Create the user subject\n+      user \u003d SecurityUtil.getSubject(header.getUgi());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processHeader() throws IOException {\n      DataInputStream in \u003d\n        new DataInputStream(new ByteArrayInputStream(data.array()));\n      header.readFields(in);\n      try {\n        String protocolClassName \u003d header.getProtocol();\n        if (protocolClassName !\u003d null) {\n          protocol \u003d getProtocolClass(header.getProtocol(), conf);\n        }\n      } catch (ClassNotFoundException cnfe) {\n        throw new IOException(\"Unknown protocol: \" + header.getProtocol());\n      }\n      \n      // TODO: Get the user name from the GSS API for Kerberbos-based security\n      // Create the user subject\n      user \u003d SecurityUtil.getSubject(header.getUgi());\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}