{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StateStoreZooKeeperImpl.java",
  "functionName": "remove",
  "functionId": "remove___clazz-Class__T____query-Query__T__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java",
  "functionStartLine": 213,
  "functionEndLine": 258,
  "numCommitsSeen": 7,
  "timeTaken": 1686,
  "changeHistory": [
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
    "7cb6bdf09ed361e067ebf234230babd1391a7d4b"
  ],
  "changeHistoryShort": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": "Ybodychange",
    "7cb6bdf09ed361e067ebf234230babd1391a7d4b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public \u003cT extends BaseRecord\u003e int remove(\n      Class\u003cT\u003e clazz, Query\u003cT\u003e query) throws IOException {\n    verifyDriverReady();\n    if (query \u003d\u003d null) {\n      return 0;\n    }\n\n    // Read the current data\n    long start \u003d monotonicNow();\n    List\u003cT\u003e records \u003d null;\n    try {\n      QueryResult\u003cT\u003e result \u003d get(clazz);\n      records \u003d result.getRecords();\n    } catch (IOException ex) {\n      LOG.error(\"Cannot get existing records\", ex);\n      getMetrics().addFailure(monotonicNow() - start);\n      return 0;\n    }\n\n    // Check the records to remove\n    String znode \u003d getZNodeForClass(clazz);\n    List\u003cT\u003e recordsToRemove \u003d filterMultiple(query, records);\n\n    // Remove the records\n    int removed \u003d 0;\n    for (T existingRecord : recordsToRemove) {\n      LOG.info(\"Removing \\\"{}\\\"\", existingRecord);\n      try {\n        String primaryKey \u003d getPrimaryKey(existingRecord);\n        String path \u003d getNodePath(znode, primaryKey);\n        if (zkManager.delete(path)) {\n          removed++;\n        } else {\n          LOG.error(\"Did not remove \\\"{}\\\"\", existingRecord);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Cannot remove \\\"{}\\\"\", existingRecord, e);\n        getMetrics().addFailure(monotonicNow() - start);\n      }\n    }\n    long end \u003d monotonicNow();\n    if (removed \u003e 0) {\n      getMetrics().addRemove(end - start);\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java"
      }
    },
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12335. Federation Metrics. Contributed by Inigo Goiri.\n\n(cherry picked from commit 3b19e77752afce87936f5c0d1e6d272fba798d7b)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "7cb6bdf09ed361e067ebf234230babd1391a7d4b",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,46 @@\n   public \u003cT extends BaseRecord\u003e int remove(\n       Class\u003cT\u003e clazz, Query\u003cT\u003e query) throws IOException {\n     verifyDriverReady();\n     if (query \u003d\u003d null) {\n       return 0;\n     }\n \n     // Read the current data\n+    long start \u003d monotonicNow();\n     List\u003cT\u003e records \u003d null;\n     try {\n       QueryResult\u003cT\u003e result \u003d get(clazz);\n       records \u003d result.getRecords();\n     } catch (IOException ex) {\n       LOG.error(\"Cannot get existing records\", ex);\n+      getMetrics().addFailure(monotonicNow() - start);\n       return 0;\n     }\n \n     // Check the records to remove\n     String znode \u003d getZNodeForClass(clazz);\n     List\u003cT\u003e recordsToRemove \u003d filterMultiple(query, records);\n \n     // Remove the records\n     int removed \u003d 0;\n     for (T existingRecord : recordsToRemove) {\n       LOG.info(\"Removing \\\"{}\\\"\", existingRecord);\n       try {\n         String primaryKey \u003d getPrimaryKey(existingRecord);\n         String path \u003d getNodePath(znode, primaryKey);\n         if (zkManager.delete(path)) {\n           removed++;\n         } else {\n           LOG.error(\"Did not remove \\\"{}\\\"\", existingRecord);\n         }\n       } catch (Exception e) {\n         LOG.error(\"Cannot remove \\\"{}\\\"\", existingRecord, e);\n+        getMetrics().addFailure(monotonicNow() - start);\n       }\n     }\n+    long end \u003d monotonicNow();\n+    if (removed \u003e 0) {\n+      getMetrics().addRemove(end - start);\n+    }\n     return removed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT extends BaseRecord\u003e int remove(\n      Class\u003cT\u003e clazz, Query\u003cT\u003e query) throws IOException {\n    verifyDriverReady();\n    if (query \u003d\u003d null) {\n      return 0;\n    }\n\n    // Read the current data\n    long start \u003d monotonicNow();\n    List\u003cT\u003e records \u003d null;\n    try {\n      QueryResult\u003cT\u003e result \u003d get(clazz);\n      records \u003d result.getRecords();\n    } catch (IOException ex) {\n      LOG.error(\"Cannot get existing records\", ex);\n      getMetrics().addFailure(monotonicNow() - start);\n      return 0;\n    }\n\n    // Check the records to remove\n    String znode \u003d getZNodeForClass(clazz);\n    List\u003cT\u003e recordsToRemove \u003d filterMultiple(query, records);\n\n    // Remove the records\n    int removed \u003d 0;\n    for (T existingRecord : recordsToRemove) {\n      LOG.info(\"Removing \\\"{}\\\"\", existingRecord);\n      try {\n        String primaryKey \u003d getPrimaryKey(existingRecord);\n        String path \u003d getNodePath(znode, primaryKey);\n        if (zkManager.delete(path)) {\n          removed++;\n        } else {\n          LOG.error(\"Did not remove \\\"{}\\\"\", existingRecord);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Cannot remove \\\"{}\\\"\", existingRecord, e);\n        getMetrics().addFailure(monotonicNow() - start);\n      }\n    }\n    long end \u003d monotonicNow();\n    if (removed \u003e 0) {\n      getMetrics().addRemove(end - start);\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java",
      "extendedDetails": {}
    },
    "7cb6bdf09ed361e067ebf234230babd1391a7d4b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10631. Federation State Store ZooKeeper implementation. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 23c4ddee11ab1300325a6361124ee8ad6f68d7a4)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "7cb6bdf09ed361e067ebf234230babd1391a7d4b",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,39 @@\n+  public \u003cT extends BaseRecord\u003e int remove(\n+      Class\u003cT\u003e clazz, Query\u003cT\u003e query) throws IOException {\n+    verifyDriverReady();\n+    if (query \u003d\u003d null) {\n+      return 0;\n+    }\n+\n+    // Read the current data\n+    List\u003cT\u003e records \u003d null;\n+    try {\n+      QueryResult\u003cT\u003e result \u003d get(clazz);\n+      records \u003d result.getRecords();\n+    } catch (IOException ex) {\n+      LOG.error(\"Cannot get existing records\", ex);\n+      return 0;\n+    }\n+\n+    // Check the records to remove\n+    String znode \u003d getZNodeForClass(clazz);\n+    List\u003cT\u003e recordsToRemove \u003d filterMultiple(query, records);\n+\n+    // Remove the records\n+    int removed \u003d 0;\n+    for (T existingRecord : recordsToRemove) {\n+      LOG.info(\"Removing \\\"{}\\\"\", existingRecord);\n+      try {\n+        String primaryKey \u003d getPrimaryKey(existingRecord);\n+        String path \u003d getNodePath(znode, primaryKey);\n+        if (zkManager.delete(path)) {\n+          removed++;\n+        } else {\n+          LOG.error(\"Did not remove \\\"{}\\\"\", existingRecord);\n+        }\n+      } catch (Exception e) {\n+        LOG.error(\"Cannot remove \\\"{}\\\"\", existingRecord, e);\n+      }\n+    }\n+    return removed;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT extends BaseRecord\u003e int remove(\n      Class\u003cT\u003e clazz, Query\u003cT\u003e query) throws IOException {\n    verifyDriverReady();\n    if (query \u003d\u003d null) {\n      return 0;\n    }\n\n    // Read the current data\n    List\u003cT\u003e records \u003d null;\n    try {\n      QueryResult\u003cT\u003e result \u003d get(clazz);\n      records \u003d result.getRecords();\n    } catch (IOException ex) {\n      LOG.error(\"Cannot get existing records\", ex);\n      return 0;\n    }\n\n    // Check the records to remove\n    String znode \u003d getZNodeForClass(clazz);\n    List\u003cT\u003e recordsToRemove \u003d filterMultiple(query, records);\n\n    // Remove the records\n    int removed \u003d 0;\n    for (T existingRecord : recordsToRemove) {\n      LOG.info(\"Removing \\\"{}\\\"\", existingRecord);\n      try {\n        String primaryKey \u003d getPrimaryKey(existingRecord);\n        String path \u003d getNodePath(znode, primaryKey);\n        if (zkManager.delete(path)) {\n          removed++;\n        } else {\n          LOG.error(\"Did not remove \\\"{}\\\"\", existingRecord);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Cannot remove \\\"{}\\\"\", existingRecord, e);\n      }\n    }\n    return removed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/driver/impl/StateStoreZooKeeperImpl.java"
    }
  }
}