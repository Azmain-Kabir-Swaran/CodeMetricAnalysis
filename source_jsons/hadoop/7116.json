{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySatisfier.java",
  "functionName": "getMaxRemaining",
  "functionId": "getMaxRemaining___node-DatanodeWithStorage__storageType-StorageType",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
  "functionStartLine": 866,
  "functionEndLine": 879,
  "numCommitsSeen": 58,
  "timeTaken": 4438,
  "changeHistory": [
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54",
    "1438da494424193e330f24edef823bbd60dc37d2"
  ],
  "changeHistoryShort": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": "Yfilerename",
    "1438da494424193e330f24edef823bbd60dc37d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  private static long getMaxRemaining(StorageReport[] storageReports,\n-      StorageType t) {\n+  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n+      DatanodeWithStorage node, StorageType storageType) {\n     long max \u003d 0L;\n-    for (StorageReport r : storageReports) {\n-      if (r.getStorage().getStorageType() \u003d\u003d t) {\n-        if (r.getRemaining() \u003e max) {\n-          max \u003d r.getRemaining();\n-        }\n+    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n+    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n+        .getNodesWithStorages(storageType);\n+    for (DatanodeWithStorage.StorageDetails n : storages) {\n+      if (n.availableSizeToMove() \u003e max) {\n+        max \u003d n.availableSizeToMove();\n+        nodeInfo \u003d n;\n       }\n     }\n-    return max;\n+    return nodeInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n      DatanodeWithStorage node, StorageType storageType) {\n    long max \u003d 0L;\n    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n        .getNodesWithStorages(storageType);\n    for (DatanodeWithStorage.StorageDetails n : storages) {\n      if (n.availableSizeToMove() \u003e max) {\n        max \u003d n.availableSizeToMove();\n        nodeInfo \u003d n;\n      }\n    }\n    return nodeInfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "[storageReports-StorageReport[], t-StorageType]",
            "newValue": "[node-DatanodeWithStorage, storageType-StorageType]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  private static long getMaxRemaining(StorageReport[] storageReports,\n-      StorageType t) {\n+  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n+      DatanodeWithStorage node, StorageType storageType) {\n     long max \u003d 0L;\n-    for (StorageReport r : storageReports) {\n-      if (r.getStorage().getStorageType() \u003d\u003d t) {\n-        if (r.getRemaining() \u003e max) {\n-          max \u003d r.getRemaining();\n-        }\n+    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n+    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n+        .getNodesWithStorages(storageType);\n+    for (DatanodeWithStorage.StorageDetails n : storages) {\n+      if (n.availableSizeToMove() \u003e max) {\n+        max \u003d n.availableSizeToMove();\n+        nodeInfo \u003d n;\n       }\n     }\n-    return max;\n+    return nodeInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n      DatanodeWithStorage node, StorageType storageType) {\n    long max \u003d 0L;\n    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n        .getNodesWithStorages(storageType);\n    for (DatanodeWithStorage.StorageDetails n : storages) {\n      if (n.availableSizeToMove() \u003e max) {\n        max \u003d n.availableSizeToMove();\n        nodeInfo \u003d n;\n      }\n    }\n    return nodeInfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "long",
            "newValue": "DatanodeWithStorage.StorageDetails"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  private static long getMaxRemaining(StorageReport[] storageReports,\n-      StorageType t) {\n+  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n+      DatanodeWithStorage node, StorageType storageType) {\n     long max \u003d 0L;\n-    for (StorageReport r : storageReports) {\n-      if (r.getStorage().getStorageType() \u003d\u003d t) {\n-        if (r.getRemaining() \u003e max) {\n-          max \u003d r.getRemaining();\n-        }\n+    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n+    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n+        .getNodesWithStorages(storageType);\n+    for (DatanodeWithStorage.StorageDetails n : storages) {\n+      if (n.availableSizeToMove() \u003e max) {\n+        max \u003d n.availableSizeToMove();\n+        nodeInfo \u003d n;\n       }\n     }\n-    return max;\n+    return nodeInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static DatanodeWithStorage.StorageDetails getMaxRemaining(\n      DatanodeWithStorage node, StorageType storageType) {\n    long max \u003d 0L;\n    DatanodeWithStorage.StorageDetails nodeInfo \u003d null;\n    List\u003cDatanodeWithStorage.StorageDetails\u003e storages \u003d node\n        .getNodesWithStorages(storageType);\n    for (DatanodeWithStorage.StorageDetails n : storages) {\n      if (n.availableSizeToMove() \u003e max) {\n        max \u003d n.availableSizeToMove();\n        nodeInfo \u003d n;\n      }\n    }\n    return nodeInfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {}
        }
      ]
    },
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-12955: [SPS]: Move SPS classes to a separate package. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static long getMaxRemaining(StorageReport[] storageReports,\n      StorageType t) {\n    long max \u003d 0L;\n    for (StorageReport r : storageReports) {\n      if (r.getStorage().getStorageType() \u003d\u003d t) {\n        if (r.getRemaining() \u003e max) {\n          max \u003d r.getRemaining();\n        }\n      }\n    }\n    return max;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java"
      }
    },
    "1438da494424193e330f24edef823bbd60dc37d2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10800: [SPS]: Daemon thread in Namenode to find blocks placed in other storage than what the policy specifies. Contributed by Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "1438da494424193e330f24edef823bbd60dc37d2",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,12 @@\n+  private static long getMaxRemaining(StorageReport[] storageReports,\n+      StorageType t) {\n+    long max \u003d 0L;\n+    for (StorageReport r : storageReports) {\n+      if (r.getStorage().getStorageType() \u003d\u003d t) {\n+        if (r.getRemaining() \u003e max) {\n+          max \u003d r.getRemaining();\n+        }\n+      }\n+    }\n+    return max;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static long getMaxRemaining(StorageReport[] storageReports,\n      StorageType t) {\n    long max \u003d 0L;\n    for (StorageReport r : storageReports) {\n      if (r.getStorage().getStorageType() \u003d\u003d t) {\n        if (r.getRemaining() \u003e max) {\n          max \u003d r.getRemaining();\n        }\n      }\n    }\n    return max;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java"
    }
  }
}