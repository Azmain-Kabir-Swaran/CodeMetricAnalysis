{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobConf.java",
  "functionName": "findContainingJar",
  "functionId": "findContainingJar___my_class-Class",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
  "functionStartLine": 2013,
  "functionEndLine": 2015,
  "numCommitsSeen": 36,
  "timeTaken": 5149,
  "changeHistory": [
    "892e088773c67dabb535f9c0591661fc7c990887",
    "9c17410c50812bf58b7b3af7d6fd4d662d03c71a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "892e088773c67dabb535f9c0591661fc7c990887": "Ybodychange",
    "9c17410c50812bf58b7b3af7d6fd4d662d03c71a": "Ymodifierchange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "892e088773c67dabb535f9c0591661fc7c990887": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9349. Confusing output when running hadoop version from one hadoop installation when HADOOP_HOME points to another. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1451448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/13 5:20 PM",
      "commitName": "892e088773c67dabb535f9c0591661fc7c990887",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "01/02/13 4:47 PM",
      "commitNameOld": "a04bee4567cfa0611023eff33f3dcad22fa265e5",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 27.02,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,3 @@\n   public static String findContainingJar(Class my_class) {\n-    ClassLoader loader \u003d my_class.getClassLoader();\n-    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n-    try {\n-      for(Enumeration itr \u003d loader.getResources(class_file);\n-          itr.hasMoreElements();) {\n-        URL url \u003d (URL) itr.nextElement();\n-        if (\"jar\".equals(url.getProtocol())) {\n-          String toReturn \u003d url.getPath();\n-          if (toReturn.startsWith(\"file:\")) {\n-            toReturn \u003d toReturn.substring(\"file:\".length());\n-          }\n-          // URLDecoder is a misnamed class, since it actually decodes\n-          // x-www-form-urlencoded MIME type rather than actual\n-          // URL encoding (which the file path has). Therefore it would\n-          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n-          // either unencoded or encoded as \"%20\"). Replace +s first, so\n-          // that they are kept sacred during the decoding process.\n-          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n-          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n-          return toReturn.replaceAll(\"!.*$\", \"\");\n-        }\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-    return null;\n+    return ClassUtil.findContainingJar(my_class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String findContainingJar(Class my_class) {\n    return ClassUtil.findContainingJar(my_class);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
      "extendedDetails": {}
    },
    "9c17410c50812bf58b7b3af7d6fd4d662d03c71a": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-3370. Fixed MiniMRYarnCluster and related tests to not use a hard-coded path for the mr-app jar. Contributed by Ahmed Radwan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/11/11 12:44 AM",
      "commitName": "9c17410c50812bf58b7b3af7d6fd4d662d03c71a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/10/11 2:02 PM",
      "commitNameOld": "6288dfa873364d1bb735bdb811002f0080e9a1be",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 17.49,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n-  static String findContainingJar(Class my_class) {\n+  public static String findContainingJar(Class my_class) {\n     ClassLoader loader \u003d my_class.getClassLoader();\n     String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n     try {\n       for(Enumeration itr \u003d loader.getResources(class_file);\n           itr.hasMoreElements();) {\n         URL url \u003d (URL) itr.nextElement();\n         if (\"jar\".equals(url.getProtocol())) {\n           String toReturn \u003d url.getPath();\n           if (toReturn.startsWith(\"file:\")) {\n             toReturn \u003d toReturn.substring(\"file:\".length());\n           }\n           // URLDecoder is a misnamed class, since it actually decodes\n           // x-www-form-urlencoded MIME type rather than actual\n           // URL encoding (which the file path has). Therefore it would\n           // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n           // either unencoded or encoded as \"%20\"). Replace +s first, so\n           // that they are kept sacred during the decoding process.\n           toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n           toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n           return toReturn.replaceAll(\"!.*$\", \"\");\n         }\n       }\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String findContainingJar(Class my_class) {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    try {\n      for(Enumeration itr \u003d loader.getResources(class_file);\n          itr.hasMoreElements();) {\n        URL url \u003d (URL) itr.nextElement();\n        if (\"jar\".equals(url.getProtocol())) {\n          String toReturn \u003d url.getPath();\n          if (toReturn.startsWith(\"file:\")) {\n            toReturn \u003d toReturn.substring(\"file:\".length());\n          }\n          // URLDecoder is a misnamed class, since it actually decodes\n          // x-www-form-urlencoded MIME type rather than actual\n          // URL encoding (which the file path has). Therefore it would\n          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n          // either unencoded or encoded as \"%20\"). Replace +s first, so\n          // that they are kept sacred during the decoding process.\n          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n          return toReturn.replaceAll(\"!.*$\", \"\");\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return null;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
      "extendedDetails": {
        "oldValue": "[static]",
        "newValue": "[public, static]"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String findContainingJar(Class my_class) {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    try {\n      for(Enumeration itr \u003d loader.getResources(class_file);\n          itr.hasMoreElements();) {\n        URL url \u003d (URL) itr.nextElement();\n        if (\"jar\".equals(url.getProtocol())) {\n          String toReturn \u003d url.getPath();\n          if (toReturn.startsWith(\"file:\")) {\n            toReturn \u003d toReturn.substring(\"file:\".length());\n          }\n          // URLDecoder is a misnamed class, since it actually decodes\n          // x-www-form-urlencoded MIME type rather than actual\n          // URL encoding (which the file path has). Therefore it would\n          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n          // either unencoded or encoded as \"%20\"). Replace +s first, so\n          // that they are kept sacred during the decoding process.\n          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n          return toReturn.replaceAll(\"!.*$\", \"\");\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return null;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String findContainingJar(Class my_class) {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    try {\n      for(Enumeration itr \u003d loader.getResources(class_file);\n          itr.hasMoreElements();) {\n        URL url \u003d (URL) itr.nextElement();\n        if (\"jar\".equals(url.getProtocol())) {\n          String toReturn \u003d url.getPath();\n          if (toReturn.startsWith(\"file:\")) {\n            toReturn \u003d toReturn.substring(\"file:\".length());\n          }\n          // URLDecoder is a misnamed class, since it actually decodes\n          // x-www-form-urlencoded MIME type rather than actual\n          // URL encoding (which the file path has). Therefore it would\n          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n          // either unencoded or encoded as \"%20\"). Replace +s first, so\n          // that they are kept sacred during the decoding process.\n          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n          return toReturn.replaceAll(\"!.*$\", \"\");\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return null;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/JobConf.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/JobConf.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  static String findContainingJar(Class my_class) {\n+    ClassLoader loader \u003d my_class.getClassLoader();\n+    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n+    try {\n+      for(Enumeration itr \u003d loader.getResources(class_file);\n+          itr.hasMoreElements();) {\n+        URL url \u003d (URL) itr.nextElement();\n+        if (\"jar\".equals(url.getProtocol())) {\n+          String toReturn \u003d url.getPath();\n+          if (toReturn.startsWith(\"file:\")) {\n+            toReturn \u003d toReturn.substring(\"file:\".length());\n+          }\n+          // URLDecoder is a misnamed class, since it actually decodes\n+          // x-www-form-urlencoded MIME type rather than actual\n+          // URL encoding (which the file path has). Therefore it would\n+          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n+          // either unencoded or encoded as \"%20\"). Replace +s first, so\n+          // that they are kept sacred during the decoding process.\n+          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n+          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n+          return toReturn.replaceAll(\"!.*$\", \"\");\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static String findContainingJar(Class my_class) {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    try {\n      for(Enumeration itr \u003d loader.getResources(class_file);\n          itr.hasMoreElements();) {\n        URL url \u003d (URL) itr.nextElement();\n        if (\"jar\".equals(url.getProtocol())) {\n          String toReturn \u003d url.getPath();\n          if (toReturn.startsWith(\"file:\")) {\n            toReturn \u003d toReturn.substring(\"file:\".length());\n          }\n          // URLDecoder is a misnamed class, since it actually decodes\n          // x-www-form-urlencoded MIME type rather than actual\n          // URL encoding (which the file path has). Therefore it would\n          // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n          // either unencoded or encoded as \"%20\"). Replace +s first, so\n          // that they are kept sacred during the decoding process.\n          toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n          toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n          return toReturn.replaceAll(\"!.*$\", \"\");\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    return null;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/JobConf.java"
    }
  }
}