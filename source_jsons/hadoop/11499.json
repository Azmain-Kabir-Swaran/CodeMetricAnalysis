{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RamDiskAsyncLazyPersistService.java",
  "functionName": "addExecutorForVolume",
  "functionId": "addExecutorForVolume___storageId-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskAsyncLazyPersistService.java",
  "functionStartLine": 79,
  "functionEndLine": 99,
  "numCommitsSeen": 20,
  "timeTaken": 2447,
  "changeHistory": [
    "96b12662ea76e3ded4ef13944fc8df206cfb4613",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f"
  ],
  "changeHistoryShort": {
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": "Ymultichange(Yparameterchange,Ybodychange)",
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96b12662ea76e3ded4ef13944fc8df206cfb4613": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "10/10/16 3:30 PM",
      "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private void addExecutorForVolume(final File volume) {\n+  private void addExecutorForVolume(final String storageId) {\n     ThreadFactory threadFactory \u003d new ThreadFactory() {\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d new Thread(threadGroup, r);\n-        t.setName(\"Async RamDisk lazy persist worker for volume \" + volume);\n+        t.setName(\"Async RamDisk lazy persist worker \" +\n+            \" for volume with id \" + storageId);\n         return t;\n       }\n     };\n \n     ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n         CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n         THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n         new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n \n     // This can reduce the number of running threads\n     executor.allowCoreThreadTimeOut(true);\n-    executors.put(volume, executor);\n+    executors.put(storageId, executor);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addExecutorForVolume(final String storageId) {\n    ThreadFactory threadFactory \u003d new ThreadFactory() {\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d new Thread(threadGroup, r);\n        t.setName(\"Async RamDisk lazy persist worker \" +\n            \" for volume with id \" + storageId);\n        return t;\n      }\n    };\n\n    ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n        CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n        THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n        new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n\n    // This can reduce the number of running threads\n    executor.allowCoreThreadTimeOut(true);\n    executors.put(storageId, executor);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskAsyncLazyPersistService.java",
          "extendedDetails": {
            "oldValue": "[volume-File(modifiers-final)]",
            "newValue": "[storageId-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10637. Modifications to remove the assumption that FsVolumes are backed by java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "10/10/16 3:30 PM",
          "commitName": "96b12662ea76e3ded4ef13944fc8df206cfb4613",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "13/09/16 12:54 PM",
          "commitNameOld": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 27.11,
          "commitsBetweenForRepo": 180,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  private void addExecutorForVolume(final File volume) {\n+  private void addExecutorForVolume(final String storageId) {\n     ThreadFactory threadFactory \u003d new ThreadFactory() {\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d new Thread(threadGroup, r);\n-        t.setName(\"Async RamDisk lazy persist worker for volume \" + volume);\n+        t.setName(\"Async RamDisk lazy persist worker \" +\n+            \" for volume with id \" + storageId);\n         return t;\n       }\n     };\n \n     ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n         CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n         THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n         new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n \n     // This can reduce the number of running threads\n     executor.allowCoreThreadTimeOut(true);\n-    executors.put(volume, executor);\n+    executors.put(storageId, executor);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addExecutorForVolume(final String storageId) {\n    ThreadFactory threadFactory \u003d new ThreadFactory() {\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d new Thread(threadGroup, r);\n        t.setName(\"Async RamDisk lazy persist worker \" +\n            \" for volume with id \" + storageId);\n        return t;\n      }\n    };\n\n    ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n        CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n        THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n        new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n\n    // This can reduce the number of running threads\n    executor.allowCoreThreadTimeOut(true);\n    executors.put(storageId, executor);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskAsyncLazyPersistService.java",
          "extendedDetails": {}
        }
      ]
    },
    "1efd9c98258fbb973d2058dcf0850042e53bd02f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7112. LazyWriter should use either async IO or one thread per physical disk. Contributed by Xiaoyu Yao.\n",
      "commitDate": "07/10/14 8:25 PM",
      "commitName": "1efd9c98258fbb973d2058dcf0850042e53bd02f",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,20 @@\n+  private void addExecutorForVolume(final File volume) {\n+    ThreadFactory threadFactory \u003d new ThreadFactory() {\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        Thread t \u003d new Thread(threadGroup, r);\n+        t.setName(\"Async RamDisk lazy persist worker for volume \" + volume);\n+        return t;\n+      }\n+    };\n+\n+    ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n+        CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n+        THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n+        new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n+\n+    // This can reduce the number of running threads\n+    executor.allowCoreThreadTimeOut(true);\n+    executors.put(volume, executor);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addExecutorForVolume(final File volume) {\n    ThreadFactory threadFactory \u003d new ThreadFactory() {\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d new Thread(threadGroup, r);\n        t.setName(\"Async RamDisk lazy persist worker for volume \" + volume);\n        return t;\n      }\n    };\n\n    ThreadPoolExecutor executor \u003d new ThreadPoolExecutor(\n        CORE_THREADS_PER_VOLUME, MAXIMUM_THREADS_PER_VOLUME,\n        THREADS_KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n        new LinkedBlockingQueue\u003cRunnable\u003e(), threadFactory);\n\n    // This can reduce the number of running threads\n    executor.allowCoreThreadTimeOut(true);\n    executors.put(volume, executor);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskAsyncLazyPersistService.java"
    }
  }
}