{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RunJar.java",
  "functionName": "createClassLoader",
  "functionId": "createClassLoader___file-File__workDir-File(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
  "functionStartLine": 337,
  "functionEndLine": 376,
  "numCommitsSeen": 50,
  "timeTaken": 3123,
  "changeHistory": [
    "fcbac00212e99c91bd1368e002823d1260b3879f",
    "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
    "da4ba50269254456650c08c739f2b394d1182ee4"
  ],
  "changeHistoryShort": {
    "fcbac00212e99c91bd1368e002823d1260b3879f": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b": "Ymultichange(Yparameterchange,Ybodychange)",
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f": "Ybodychange",
    "da4ba50269254456650c08c739f2b394d1182ee4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fcbac00212e99c91bd1368e002823d1260b3879f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\"\n\nThis reverts commit 4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b.\n",
      "commitDate": "15/09/16 10:18 AM",
      "commitName": "fcbac00212e99c91bd1368e002823d1260b3879f",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\"\n\nThis reverts commit 4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b.\n",
          "commitDate": "15/09/16 10:18 AM",
          "commitName": "fcbac00212e99c91bd1368e002823d1260b3879f",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "11/08/16 7:56 PM",
          "commitNameOld": "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 34.6,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,40 @@\n-  private ClassLoader createClassLoader(final File workDir)\n+  private ClassLoader createClassLoader(File file, final File workDir)\n       throws MalformedURLException {\n     ClassLoader loader;\n     // see if the client classloader is enabled\n     if (useClientClassLoader()) {\n       StringBuilder sb \u003d new StringBuilder();\n       sb.append(workDir).append(\"/\").\n+          append(File.pathSeparator).append(file).\n           append(File.pathSeparator).append(workDir).append(\"/classes/\").\n           append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n       // HADOOP_CLASSPATH is added to the client classpath\n       String hadoopClasspath \u003d getHadoopClasspath();\n       if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n         sb.append(File.pathSeparator).append(hadoopClasspath);\n       }\n       String clientClasspath \u003d sb.toString();\n       // get the system classes\n       String systemClasses \u003d getSystemClasses();\n       List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n           null :\n           Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n       // create an application classloader that isolates the user classes\n       loader \u003d new ApplicationClassLoader(clientClasspath,\n           getClass().getClassLoader(), systemClassesList);\n     } else {\n       List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n       classPath.add(new File(workDir + \"/\").toURI().toURL());\n+      classPath.add(file.toURI().toURL());\n       classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n       File[] libs \u003d new File(workDir, \"lib\").listFiles();\n       if (libs !\u003d null) {\n         for (File lib : libs) {\n           classPath.add(lib.toURI().toURL());\n         }\n       }\n       // create a normal parent-delegating classloader\n       loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n     }\n     return loader;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClassLoader createClassLoader(File file, final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir).append(\"/\").\n          append(File.pathSeparator).append(file).\n          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n      classPath.add(new File(workDir + \"/\").toURI().toURL());\n      classPath.add(file.toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (File lib : libs) {\n          classPath.add(lib.toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n    }\n    return loader;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {
            "oldValue": "[workDir-File(modifiers-final)]",
            "newValue": "[file-File, workDir-File(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\"\n\nThis reverts commit 4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b.\n",
          "commitDate": "15/09/16 10:18 AM",
          "commitName": "fcbac00212e99c91bd1368e002823d1260b3879f",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "11/08/16 7:56 PM",
          "commitNameOld": "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 34.6,
          "commitsBetweenForRepo": 198,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,40 @@\n-  private ClassLoader createClassLoader(final File workDir)\n+  private ClassLoader createClassLoader(File file, final File workDir)\n       throws MalformedURLException {\n     ClassLoader loader;\n     // see if the client classloader is enabled\n     if (useClientClassLoader()) {\n       StringBuilder sb \u003d new StringBuilder();\n       sb.append(workDir).append(\"/\").\n+          append(File.pathSeparator).append(file).\n           append(File.pathSeparator).append(workDir).append(\"/classes/\").\n           append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n       // HADOOP_CLASSPATH is added to the client classpath\n       String hadoopClasspath \u003d getHadoopClasspath();\n       if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n         sb.append(File.pathSeparator).append(hadoopClasspath);\n       }\n       String clientClasspath \u003d sb.toString();\n       // get the system classes\n       String systemClasses \u003d getSystemClasses();\n       List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n           null :\n           Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n       // create an application classloader that isolates the user classes\n       loader \u003d new ApplicationClassLoader(clientClasspath,\n           getClass().getClassLoader(), systemClassesList);\n     } else {\n       List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n       classPath.add(new File(workDir + \"/\").toURI().toURL());\n+      classPath.add(file.toURI().toURL());\n       classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n       File[] libs \u003d new File(workDir, \"lib\").listFiles();\n       if (libs !\u003d null) {\n         for (File lib : libs) {\n           classPath.add(lib.toURI().toURL());\n         }\n       }\n       // create a normal parent-delegating classloader\n       loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n     }\n     return loader;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClassLoader createClassLoader(File file, final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir).append(\"/\").\n          append(File.pathSeparator).append(file).\n          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n      classPath.add(new File(workDir + \"/\").toURI().toURL());\n      classPath.add(file.toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (File lib : libs) {\n          classPath.add(lib.toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n    }\n    return loader;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {}
        }
      ]
    },
    "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\n",
      "commitDate": "11/08/16 7:56 PM",
      "commitName": "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\n",
          "commitDate": "11/08/16 7:56 PM",
          "commitName": "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "04/05/16 9:49 AM",
          "commitNameOld": "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 99.42,
          "commitsBetweenForRepo": 812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,38 @@\n-  private ClassLoader createClassLoader(File file, final File workDir)\n+  private ClassLoader createClassLoader(final File workDir)\n       throws MalformedURLException {\n     ClassLoader loader;\n     // see if the client classloader is enabled\n     if (useClientClassLoader()) {\n       StringBuilder sb \u003d new StringBuilder();\n       sb.append(workDir).append(\"/\").\n-          append(File.pathSeparator).append(file).\n           append(File.pathSeparator).append(workDir).append(\"/classes/\").\n           append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n       // HADOOP_CLASSPATH is added to the client classpath\n       String hadoopClasspath \u003d getHadoopClasspath();\n       if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n         sb.append(File.pathSeparator).append(hadoopClasspath);\n       }\n       String clientClasspath \u003d sb.toString();\n       // get the system classes\n       String systemClasses \u003d getSystemClasses();\n       List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n           null :\n           Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n       // create an application classloader that isolates the user classes\n       loader \u003d new ApplicationClassLoader(clientClasspath,\n           getClass().getClassLoader(), systemClassesList);\n     } else {\n       List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n       classPath.add(new File(workDir + \"/\").toURI().toURL());\n-      classPath.add(file.toURI().toURL());\n       classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n       File[] libs \u003d new File(workDir, \"lib\").listFiles();\n       if (libs !\u003d null) {\n         for (File lib : libs) {\n           classPath.add(lib.toURI().toURL());\n         }\n       }\n       // create a normal parent-delegating classloader\n       loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n     }\n     return loader;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClassLoader createClassLoader(final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir).append(\"/\").\n          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n      classPath.add(new File(workDir + \"/\").toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (File lib : libs) {\n          classPath.add(lib.toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n    }\n    return loader;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {
            "oldValue": "[file-File, workDir-File(modifiers-final)]",
            "newValue": "[workDir-File(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13410. RunJar adds the content of the jar twice to the classpath (Yuanbo Liu via sjlee)\n",
          "commitDate": "11/08/16 7:56 PM",
          "commitName": "4d3ea92f4fe4be2a0ee9849c65cb1c91b0c5711b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "04/05/16 9:49 AM",
          "commitNameOld": "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 99.42,
          "commitsBetweenForRepo": 812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,38 @@\n-  private ClassLoader createClassLoader(File file, final File workDir)\n+  private ClassLoader createClassLoader(final File workDir)\n       throws MalformedURLException {\n     ClassLoader loader;\n     // see if the client classloader is enabled\n     if (useClientClassLoader()) {\n       StringBuilder sb \u003d new StringBuilder();\n       sb.append(workDir).append(\"/\").\n-          append(File.pathSeparator).append(file).\n           append(File.pathSeparator).append(workDir).append(\"/classes/\").\n           append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n       // HADOOP_CLASSPATH is added to the client classpath\n       String hadoopClasspath \u003d getHadoopClasspath();\n       if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n         sb.append(File.pathSeparator).append(hadoopClasspath);\n       }\n       String clientClasspath \u003d sb.toString();\n       // get the system classes\n       String systemClasses \u003d getSystemClasses();\n       List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n           null :\n           Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n       // create an application classloader that isolates the user classes\n       loader \u003d new ApplicationClassLoader(clientClasspath,\n           getClass().getClassLoader(), systemClassesList);\n     } else {\n       List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n       classPath.add(new File(workDir + \"/\").toURI().toURL());\n-      classPath.add(file.toURI().toURL());\n       classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n       File[] libs \u003d new File(workDir, \"lib\").listFiles();\n       if (libs !\u003d null) {\n         for (File lib : libs) {\n           classPath.add(lib.toURI().toURL());\n         }\n       }\n       // create a normal parent-delegating classloader\n       loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n     }\n     return loader;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClassLoader createClassLoader(final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir).append(\"/\").\n          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n      classPath.add(new File(workDir + \"/\").toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (File lib : libs) {\n          classPath.add(lib.toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n    }\n    return loader;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {}
        }
      ]
    },
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13068. Clean up RunJar and related test class. (Contributed by Andras Bokor)\n",
      "commitDate": "04/05/16 9:49 AM",
      "commitName": "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "27/04/16 10:06 AM",
      "commitNameOld": "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private ClassLoader createClassLoader(File file, final File workDir)\n       throws MalformedURLException {\n     ClassLoader loader;\n     // see if the client classloader is enabled\n     if (useClientClassLoader()) {\n       StringBuilder sb \u003d new StringBuilder();\n-      sb.append(workDir+\"/\").\n+      sb.append(workDir).append(\"/\").\n           append(File.pathSeparator).append(file).\n-          append(File.pathSeparator).append(workDir+\"/classes/\").\n-          append(File.pathSeparator).append(workDir+\"/lib/*\");\n+          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n+          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n       // HADOOP_CLASSPATH is added to the client classpath\n       String hadoopClasspath \u003d getHadoopClasspath();\n       if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n         sb.append(File.pathSeparator).append(hadoopClasspath);\n       }\n       String clientClasspath \u003d sb.toString();\n       // get the system classes\n       String systemClasses \u003d getSystemClasses();\n       List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n           null :\n           Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n       // create an application classloader that isolates the user classes\n       loader \u003d new ApplicationClassLoader(clientClasspath,\n           getClass().getClassLoader(), systemClassesList);\n     } else {\n-      List\u003cURL\u003e classPath \u003d new ArrayList\u003cURL\u003e();\n-      classPath.add(new File(workDir+\"/\").toURI().toURL());\n+      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n+      classPath.add(new File(workDir + \"/\").toURI().toURL());\n       classPath.add(file.toURI().toURL());\n       classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n       File[] libs \u003d new File(workDir, \"lib\").listFiles();\n       if (libs !\u003d null) {\n-        for (int i \u003d 0; i \u003c libs.length; i++) {\n-          classPath.add(libs[i].toURI().toURL());\n+        for (File lib : libs) {\n+          classPath.add(lib.toURI().toURL());\n         }\n       }\n       // create a normal parent-delegating classloader\n-      loader \u003d new URLClassLoader(classPath.toArray(new URL[0]));\n+      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n     }\n     return loader;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ClassLoader createClassLoader(File file, final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir).append(\"/\").\n          append(File.pathSeparator).append(file).\n          append(File.pathSeparator).append(workDir).append(\"/classes/\").\n          append(File.pathSeparator).append(workDir).append(\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003c\u003e();\n      classPath.add(new File(workDir + \"/\").toURI().toURL());\n      classPath.add(file.toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (File lib : libs) {\n          classPath.add(lib.toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[classPath.size()]));\n    }\n    return loader;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "da4ba50269254456650c08c739f2b394d1182ee4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10893. isolated classloader on the client side. Contributed by Sangjin Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619604 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/14 2:38 PM",
      "commitName": "da4ba50269254456650c08c739f2b394d1182ee4",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,40 @@\n+  private ClassLoader createClassLoader(File file, final File workDir)\n+      throws MalformedURLException {\n+    ClassLoader loader;\n+    // see if the client classloader is enabled\n+    if (useClientClassLoader()) {\n+      StringBuilder sb \u003d new StringBuilder();\n+      sb.append(workDir+\"/\").\n+          append(File.pathSeparator).append(file).\n+          append(File.pathSeparator).append(workDir+\"/classes/\").\n+          append(File.pathSeparator).append(workDir+\"/lib/*\");\n+      // HADOOP_CLASSPATH is added to the client classpath\n+      String hadoopClasspath \u003d getHadoopClasspath();\n+      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n+        sb.append(File.pathSeparator).append(hadoopClasspath);\n+      }\n+      String clientClasspath \u003d sb.toString();\n+      // get the system classes\n+      String systemClasses \u003d getSystemClasses();\n+      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n+          null :\n+          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n+      // create an application classloader that isolates the user classes\n+      loader \u003d new ApplicationClassLoader(clientClasspath,\n+          getClass().getClassLoader(), systemClassesList);\n+    } else {\n+      List\u003cURL\u003e classPath \u003d new ArrayList\u003cURL\u003e();\n+      classPath.add(new File(workDir+\"/\").toURI().toURL());\n+      classPath.add(file.toURI().toURL());\n+      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n+      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n+      if (libs !\u003d null) {\n+        for (int i \u003d 0; i \u003c libs.length; i++) {\n+          classPath.add(libs[i].toURI().toURL());\n+        }\n+      }\n+      // create a normal parent-delegating classloader\n+      loader \u003d new URLClassLoader(classPath.toArray(new URL[0]));\n+    }\n+    return loader;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ClassLoader createClassLoader(File file, final File workDir)\n      throws MalformedURLException {\n    ClassLoader loader;\n    // see if the client classloader is enabled\n    if (useClientClassLoader()) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(workDir+\"/\").\n          append(File.pathSeparator).append(file).\n          append(File.pathSeparator).append(workDir+\"/classes/\").\n          append(File.pathSeparator).append(workDir+\"/lib/*\");\n      // HADOOP_CLASSPATH is added to the client classpath\n      String hadoopClasspath \u003d getHadoopClasspath();\n      if (hadoopClasspath !\u003d null \u0026\u0026 !hadoopClasspath.isEmpty()) {\n        sb.append(File.pathSeparator).append(hadoopClasspath);\n      }\n      String clientClasspath \u003d sb.toString();\n      // get the system classes\n      String systemClasses \u003d getSystemClasses();\n      List\u003cString\u003e systemClassesList \u003d systemClasses \u003d\u003d null ?\n          null :\n          Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));\n      // create an application classloader that isolates the user classes\n      loader \u003d new ApplicationClassLoader(clientClasspath,\n          getClass().getClassLoader(), systemClassesList);\n    } else {\n      List\u003cURL\u003e classPath \u003d new ArrayList\u003cURL\u003e();\n      classPath.add(new File(workDir+\"/\").toURI().toURL());\n      classPath.add(file.toURI().toURL());\n      classPath.add(new File(workDir, \"classes/\").toURI().toURL());\n      File[] libs \u003d new File(workDir, \"lib\").listFiles();\n      if (libs !\u003d null) {\n        for (int i \u003d 0; i \u003c libs.length; i++) {\n          classPath.add(libs[i].toURI().toURL());\n        }\n      }\n      // create a normal parent-delegating classloader\n      loader \u003d new URLClassLoader(classPath.toArray(new URL[0]));\n    }\n    return loader;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java"
    }
  }
}