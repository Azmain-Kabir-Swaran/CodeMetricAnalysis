{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebServiceUtil.java",
  "functionName": "mergeAppsInfo",
  "functionId": "mergeAppsInfo___appsInfo-ArrayList__AppInfo____returnPartialResult-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
  "functionStartLine": 272,
  "functionEndLine": 317,
  "numCommitsSeen": 8,
  "timeTaken": 1155,
  "changeHistory": [
    "cc8893edc0b7960e958723c81062986c12f06ade"
  ],
  "changeHistoryShort": {
    "cc8893edc0b7960e958723c81062986c12f06ade": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc8893edc0b7960e958723c81062986c12f06ade": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7010. Federation: routing REST invocations transparently to multiple RMs (part 2 - getApps). (Contributed by Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "29/08/17 2:53 PM",
      "commitName": "cc8893edc0b7960e958723c81062986c12f06ade",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,46 @@\n+  public static AppsInfo mergeAppsInfo(ArrayList\u003cAppInfo\u003e appsInfo,\n+      boolean returnPartialResult) {\n+    AppsInfo allApps \u003d new AppsInfo();\n+\n+    Map\u003cString, AppInfo\u003e federationAM \u003d new HashMap\u003cString, AppInfo\u003e();\n+    Map\u003cString, AppInfo\u003e federationUAMSum \u003d new HashMap\u003cString, AppInfo\u003e();\n+    for (AppInfo a : appsInfo) {\n+      // Check if this AppInfo is an AM\n+      if (a.getAMHostHttpAddress() !\u003d null) {\n+        // Insert in the list of AM\n+        federationAM.put(a.getAppId(), a);\n+        // Check if there are any UAM found before\n+        if (federationUAMSum.containsKey(a.getAppId())) {\n+          // Merge the current AM with the found UAM\n+          mergeAMWithUAM(a, federationUAMSum.get(a.getAppId()));\n+          // Remove the sum of the UAMs\n+          federationUAMSum.remove(a.getAppId());\n+        }\n+        // This AppInfo is an UAM\n+      } else {\n+        if (federationAM.containsKey(a.getAppId())) {\n+          // Merge the current UAM with its own AM\n+          mergeAMWithUAM(federationAM.get(a.getAppId()), a);\n+        } else if (federationUAMSum.containsKey(a.getAppId())) {\n+          // Merge the current UAM with its own UAM and update the list of UAM\n+          federationUAMSum.put(a.getAppId(),\n+              mergeUAMWithUAM(federationUAMSum.get(a.getAppId()), a));\n+        } else {\n+          // Insert in the list of UAM\n+          federationUAMSum.put(a.getAppId(), a);\n+        }\n+      }\n+    }\n+\n+    // Check the remaining UAMs are depending or not from federation\n+    for (AppInfo a : federationUAMSum.values()) {\n+      if (returnPartialResult || (a.getName() !\u003d null\n+          \u0026\u0026 !(a.getName().startsWith(UnmanagedApplicationManager.APP_NAME)\n+              || a.getName().startsWith(PARTIAL_REPORT)))) {\n+        federationAM.put(a.getAppId(), a);\n+      }\n+    }\n+\n+    allApps.addAll(new ArrayList\u003cAppInfo\u003e(federationAM.values()));\n+    return allApps;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AppsInfo mergeAppsInfo(ArrayList\u003cAppInfo\u003e appsInfo,\n      boolean returnPartialResult) {\n    AppsInfo allApps \u003d new AppsInfo();\n\n    Map\u003cString, AppInfo\u003e federationAM \u003d new HashMap\u003cString, AppInfo\u003e();\n    Map\u003cString, AppInfo\u003e federationUAMSum \u003d new HashMap\u003cString, AppInfo\u003e();\n    for (AppInfo a : appsInfo) {\n      // Check if this AppInfo is an AM\n      if (a.getAMHostHttpAddress() !\u003d null) {\n        // Insert in the list of AM\n        federationAM.put(a.getAppId(), a);\n        // Check if there are any UAM found before\n        if (federationUAMSum.containsKey(a.getAppId())) {\n          // Merge the current AM with the found UAM\n          mergeAMWithUAM(a, federationUAMSum.get(a.getAppId()));\n          // Remove the sum of the UAMs\n          federationUAMSum.remove(a.getAppId());\n        }\n        // This AppInfo is an UAM\n      } else {\n        if (federationAM.containsKey(a.getAppId())) {\n          // Merge the current UAM with its own AM\n          mergeAMWithUAM(federationAM.get(a.getAppId()), a);\n        } else if (federationUAMSum.containsKey(a.getAppId())) {\n          // Merge the current UAM with its own UAM and update the list of UAM\n          federationUAMSum.put(a.getAppId(),\n              mergeUAMWithUAM(federationUAMSum.get(a.getAppId()), a));\n        } else {\n          // Insert in the list of UAM\n          federationUAMSum.put(a.getAppId(), a);\n        }\n      }\n    }\n\n    // Check the remaining UAMs are depending or not from federation\n    for (AppInfo a : federationUAMSum.values()) {\n      if (returnPartialResult || (a.getName() !\u003d null\n          \u0026\u0026 !(a.getName().startsWith(UnmanagedApplicationManager.APP_NAME)\n              || a.getName().startsWith(PARTIAL_REPORT)))) {\n        federationAM.put(a.getAppId(), a);\n      }\n    }\n\n    allApps.addAll(new ArrayList\u003cAppInfo\u003e(federationAM.values()));\n    return allApps;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java"
    }
  }
}