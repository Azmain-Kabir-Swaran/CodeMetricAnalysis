{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "processQueue",
  "functionId": "processQueue",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 5280,
  "functionEndLine": 5312,
  "numCommitsSeen": 477,
  "timeTaken": 8705,
  "changeHistory": [
    "9eb7a8bdf8f3b1dc76efc22db9651474303d309e",
    "f741476146574550a1a208d58ef8be76639e5ddc"
  ],
  "changeHistoryShort": {
    "9eb7a8bdf8f3b1dc76efc22db9651474303d309e": "Ybodychange",
    "f741476146574550a1a208d58ef8be76639e5ddc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9eb7a8bdf8f3b1dc76efc22db9651474303d309e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15041. Make MAX_LOCK_HOLD_MS and full queue size configurable. Contributed by zhuqi.\n",
      "commitDate": "23/02/20 12:55 AM",
      "commitName": "9eb7a8bdf8f3b1dc76efc22db9651474303d309e",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "13/02/20 3:27 AM",
      "commitNameOld": "a98352ced18e51003b443e1a652d19ec00b2f2d2",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 9.89,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     private void processQueue() {\n       while (namesystem.isRunning()) {\n         NameNodeMetrics metrics \u003d NameNode.getNameNodeMetrics();\n         try {\n           Runnable action \u003d queue.take();\n           // batch as many operations in the write lock until the queue\n           // runs dry, or the max lock hold is reached.\n           int processed \u003d 0;\n           namesystem.writeLock();\n           metrics.setBlockOpsQueued(queue.size() + 1);\n           try {\n             long start \u003d Time.monotonicNow();\n             do {\n               processed++;\n               action.run();\n-              if (Time.monotonicNow() - start \u003e MAX_LOCK_HOLD_MS) {\n+              if (Time.monotonicNow() - start \u003e maxLockHoldTime) {\n                 break;\n               }\n               action \u003d queue.poll();\n             } while (action !\u003d null);\n           } finally {\n             namesystem.writeUnlock();\n             metrics.addBlockOpsBatched(processed - 1);\n           }\n         } catch (InterruptedException e) {\n           // ignore unless thread was specifically interrupted.\n           if (Thread.interrupted()) {\n             break;\n           }\n         }\n       }\n       queue.clear();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processQueue() {\n      while (namesystem.isRunning()) {\n        NameNodeMetrics metrics \u003d NameNode.getNameNodeMetrics();\n        try {\n          Runnable action \u003d queue.take();\n          // batch as many operations in the write lock until the queue\n          // runs dry, or the max lock hold is reached.\n          int processed \u003d 0;\n          namesystem.writeLock();\n          metrics.setBlockOpsQueued(queue.size() + 1);\n          try {\n            long start \u003d Time.monotonicNow();\n            do {\n              processed++;\n              action.run();\n              if (Time.monotonicNow() - start \u003e maxLockHoldTime) {\n                break;\n              }\n              action \u003d queue.poll();\n            } while (action !\u003d null);\n          } finally {\n            namesystem.writeUnlock();\n            metrics.addBlockOpsBatched(processed - 1);\n          }\n        } catch (InterruptedException e) {\n          // ignore unless thread was specifically interrupted.\n          if (Thread.interrupted()) {\n            break;\n          }\n        }\n      }\n      queue.clear();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f741476146574550a1a208d58ef8be76639e5ddc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9198. Coalesce IBR processing in the NN. (Daryn Sharp via umamahesh)\n",
      "commitDate": "16/12/15 6:16 PM",
      "commitName": "f741476146574550a1a208d58ef8be76639e5ddc",
      "commitAuthor": "Uma Mahesh",
      "diff": "@@ -0,0 +1,33 @@\n+    private void processQueue() {\n+      while (namesystem.isRunning()) {\n+        NameNodeMetrics metrics \u003d NameNode.getNameNodeMetrics();\n+        try {\n+          Runnable action \u003d queue.take();\n+          // batch as many operations in the write lock until the queue\n+          // runs dry, or the max lock hold is reached.\n+          int processed \u003d 0;\n+          namesystem.writeLock();\n+          metrics.setBlockOpsQueued(queue.size() + 1);\n+          try {\n+            long start \u003d Time.monotonicNow();\n+            do {\n+              processed++;\n+              action.run();\n+              if (Time.monotonicNow() - start \u003e MAX_LOCK_HOLD_MS) {\n+                break;\n+              }\n+              action \u003d queue.poll();\n+            } while (action !\u003d null);\n+          } finally {\n+            namesystem.writeUnlock();\n+            metrics.addBlockOpsBatched(processed - 1);\n+          }\n+        } catch (InterruptedException e) {\n+          // ignore unless thread was specifically interrupted.\n+          if (Thread.interrupted()) {\n+            break;\n+          }\n+        }\n+      }\n+      queue.clear();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processQueue() {\n      while (namesystem.isRunning()) {\n        NameNodeMetrics metrics \u003d NameNode.getNameNodeMetrics();\n        try {\n          Runnable action \u003d queue.take();\n          // batch as many operations in the write lock until the queue\n          // runs dry, or the max lock hold is reached.\n          int processed \u003d 0;\n          namesystem.writeLock();\n          metrics.setBlockOpsQueued(queue.size() + 1);\n          try {\n            long start \u003d Time.monotonicNow();\n            do {\n              processed++;\n              action.run();\n              if (Time.monotonicNow() - start \u003e MAX_LOCK_HOLD_MS) {\n                break;\n              }\n              action \u003d queue.poll();\n            } while (action !\u003d null);\n          } finally {\n            namesystem.writeUnlock();\n            metrics.addBlockOpsBatched(processed - 1);\n          }\n        } catch (InterruptedException e) {\n          // ignore unless thread was specifically interrupted.\n          if (Thread.interrupted()) {\n            break;\n          }\n        }\n      }\n      queue.clear();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
    }
  }
}