{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractINodeDiffList.java",
  "functionName": "deleteSnapshotDiff",
  "functionId": "deleteSnapshotDiff___reclaimContext-INode.ReclaimContext__snapshot-int(modifiers-final)__prior-int(modifiers-final)__currentINode-N(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
  "functionStartLine": 74,
  "functionEndLine": 110,
  "numCommitsSeen": 227,
  "timeTaken": 9950,
  "changeHistory": [
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252",
    "bcba844d1144cc334e2babbc34c9d42eac1c203a",
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "4536399d47f6c061e149e2504600804a0f1e093d",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
    "d46e1608626c64400d2b6c7693a4c035783c55b4",
    "72d783374c1e302492d7ce537222b563241038bb",
    "0fa5cad0b27780c27a284c23101b1099d4886506",
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b",
    "9701555899315c94584b24d8717c1d7540a4a491",
    "3b3ea5c4220e674064c7603a449f63904c10bac1",
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
    "02e6b72ae148fc8c2ba02ef624536b9e48997b31",
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
    "e7db60fbfcc222b32d610ffd912683494674ad2f",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
    "a3bf2083867db5d848ea14f145d120f02b820af2",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
    "2d4097840c29116e9b000c158ce841d27863ad6e"
  ],
  "changeHistoryShort": {
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": "Ybodychange",
    "bcba844d1144cc334e2babbc34c9d42eac1c203a": "Ybodychange",
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4536399d47f6c061e149e2504600804a0f1e093d": "Ymultichange(Yparameterchange,Ybodychange)",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ymultichange(Yparameterchange,Ybodychange)",
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380": "Ybodychange",
    "d46e1608626c64400d2b6c7693a4c035783c55b4": "Ymultichange(Yparameterchange,Ybodychange)",
    "72d783374c1e302492d7ce537222b563241038bb": "Ymodifierchange",
    "0fa5cad0b27780c27a284c23101b1099d4886506": "Ymultichange(Yexceptionschange,Ybodychange)",
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232": "Ybodychange",
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": "Ymultichange(Yparameterchange,Ybodychange)",
    "9701555899315c94584b24d8717c1d7540a4a491": "Ybodychange",
    "3b3ea5c4220e674064c7603a449f63904c10bac1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "02e6b72ae148fc8c2ba02ef624536b9e48997b31": "Ymultichange(Yparameterchange,Ybodychange)",
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3": "Ybodychange",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": "Ybodychange",
    "e7db60fbfcc222b32d610ffd912683494674ad2f": "Ymultichange(Yreturntypechange,Yparametermetachange)",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "a3bf2083867db5d848ea14f145d120f02b820af2": "Ybodychange",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": "Ybodychange",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": "Ybodychange",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": "Ymultichange(Ybodychange,Yparametermetachange)",
    "2d4097840c29116e9b000c158ce841d27863ad6e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13142. Define and Implement a DiifList Interface to store and manage SnapshotDiffs.  Contributed by Shashikant Banerjee\n",
      "commitDate": "15/02/18 3:33 AM",
      "commitName": "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "30/06/17 10:28 AM",
      "commitNameOld": "bcba844d1144cc334e2babbc34c9d42eac1c203a",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 229.75,
      "commitsBetweenForRepo": 1650,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n       final int snapshot, final int prior, final N currentINode) {\n     if (diffs \u003d\u003d null) {\n       return;\n     }\n-    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n+    int snapshotIndex \u003d diffs.binarySearch(snapshot);\n \n     D removed;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n         if (diffs.isEmpty()) {\n           diffs \u003d null;\n         }\n         removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n             removed);\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n      final int snapshot, final int prior, final N currentINode) {\n    if (diffs \u003d\u003d null) {\n      return;\n    }\n    int snapshotIndex \u003d diffs.binarySearch(snapshot);\n\n    D removed;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        if (diffs.isEmpty()) {\n          diffs \u003d null;\n        }\n        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n            removed);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "bcba844d1144cc334e2babbc34c9d42eac1c203a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12042. Lazy initialize AbstractINodeDiffList#diffs for snapshots to reduce memory consumption. Contributed by Misha Dmitriev.\n",
      "commitDate": "30/06/17 10:28 AM",
      "commitName": "bcba844d1144cc334e2babbc34c9d42eac1c203a",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "13/05/15 9:50 PM",
      "commitNameOld": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 778.53,
      "commitsBetweenForRepo": 5262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n       final int snapshot, final int prior, final N currentINode) {\n+    if (diffs \u003d\u003d null) {\n+      return;\n+    }\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n \n     D removed;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n+        if (diffs.isEmpty()) {\n+          diffs \u003d null;\n+        }\n         removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n             removed);\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n      final int snapshot, final int prior, final N currentINode) {\n    if (diffs \u003d\u003d null) {\n      return;\n    }\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n\n    D removed;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        if (diffs.isEmpty()) {\n          diffs \u003d null;\n        }\n        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n            removed);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,31 @@\n-  public final QuotaCounts deleteSnapshotDiff(\n-      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n-      final N currentINode) {\n+  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n+      final int snapshot, final int prior, final N currentINode) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    \n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n-    D removed \u003d null;\n+\n+    D removed;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n-            currentINode));\n+        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n-        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n-            currentINode, removed));\n+        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n+            removed);\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n      final int snapshot, final int prior, final N currentINode) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n\n    D removed;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n            removed);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "QuotaCounts",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,31 @@\n-  public final QuotaCounts deleteSnapshotDiff(\n-      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n-      final N currentINode) {\n+  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n+      final int snapshot, final int prior, final N currentINode) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    \n-    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n-    D removed \u003d null;\n+\n+    D removed;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n-            currentINode));\n+        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n-        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n-            currentINode, removed));\n+        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n+            removed);\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n-    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final void deleteSnapshotDiff(INode.ReclaimContext reclaimContext,\n      final int snapshot, final int prior, final N currentINode) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n\n    D removed;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        removed.destroyDiffAndCollectBlocks(reclaimContext, currentINode);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        previous.combinePosteriorAndCollectBlocks(reclaimContext, currentINode,\n            removed);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "4536399d47f6c061e149e2504600804a0f1e093d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
      "commitDate": "09/05/15 10:51 PM",
      "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,35 @@\n-  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n-      final int snapshot,\n-      final int prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+  public final QuotaCounts deleteSnapshotDiff(\n+      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n+      final N currentINode) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n-            collectedBlocks, removedINodes));\n+        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n+            currentINode));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n-        counts.add(previous.combinePosteriorAndCollectBlocks(\n-            bsps, currentINode, removed, collectedBlocks, removedINodes));\n+        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n+            currentINode, removed));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts deleteSnapshotDiff(\n      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n      final N currentINode) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n            currentINode));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n            currentINode, removed));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[reclaimContext-INode.ReclaimContext, snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8357. Consolidate parameters of INode.CleanSubtree() into a parameter objects. Contributed by Li Lu.\n",
          "commitDate": "09/05/15 10:51 PM",
          "commitName": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/05/15 11:04 PM",
          "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.99,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,35 @@\n-  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n-      final int snapshot,\n-      final int prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes) {\n+  public final QuotaCounts deleteSnapshotDiff(\n+      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n+      final N currentINode) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n-            collectedBlocks, removedINodes));\n+        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n+            currentINode));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n-        counts.add(previous.combinePosteriorAndCollectBlocks(\n-            bsps, currentINode, removed, collectedBlocks, removedINodes));\n+        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n+            currentINode, removed));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts deleteSnapshotDiff(\n      INode.ReclaimContext reclaimContext, final int snapshot, final int prior,\n      final N currentINode) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(reclaimContext,\n            currentINode));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(reclaimContext,\n            currentINode, removed));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n-  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n+  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n+        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n-            currentINode, removed, collectedBlocks, removedINodes));\n+            bsps, currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n      final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            bsps, currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[bsps-BlockStoragePolicySuite, snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n-  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n+  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n+        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n-            currentINode, removed, collectedBlocks, removedINodes));\n+            bsps, currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n      final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            bsps, currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "Quota.Counts",
            "newValue": "QuotaCounts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n-  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n+  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n+      final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n-    Quota.Counts counts \u003d Quota.Counts.newInstance();\n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n+        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n-            currentINode, removed, collectedBlocks, removedINodes));\n+            bsps, currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final QuotaCounts deleteSnapshotDiff(BlockStoragePolicySuite bsps,\n      final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(bsps, currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            bsps, currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
      "commitDate": "02/02/15 4:32 PM",
      "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 20.67,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,36 @@\n   public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          // the currentINode must be a descendant of a WithName node, which set\n-          // countDiffChange to false. In that case we should count in the diff\n-          // change when updating the quota usage in the current tree\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean]",
            "newValue": "[snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 20.67,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,36 @@\n   public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          // the currentINode must be a descendant of a WithName node, which set\n-          // countDiffChange to false. In that case we should count in the diff\n-          // change when updating the quota usage in the current tree\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6651. Deletion failure can leak inodes permanently. Contributed by Jing Zhao.\n",
          "commitDate": "02/02/15 4:32 PM",
          "commitName": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 20.67,
          "commitsBetweenForRepo": 149,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,36 @@\n   public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n       final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n-      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n-      throws QuotaExceededException {\n+      final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          // the currentINode must be a descendant of a WithName node, which set\n-          // countDiffChange to false. In that case we should count in the diff\n-          // change when updating the quota usage in the current tree\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (previous.getSnapshotId() !\u003d prior) {\n         diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        if (countDiffChange) {\n-          counts.add(Quota.NAMESPACE, 1);\n-        } else {\n-          currentINode.addSpaceConsumed(-1, 0, false);\n-        }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n-      Snapshot prior, final N currentINode,\n+  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n+      final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n       throws QuotaExceededException {\n-    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n+    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n-      if (prior !\u003d null) {\n+      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n-        diffs.get(snapshotIndex).setSnapshot(prior);\n-      } else {\n+        diffs.get(snapshotIndex).setSnapshotId(prior);\n+      } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           // the currentINode must be a descendant of a WithName node, which set\n           // countDiffChange to false. In that case we should count in the diff\n           // change when updating the quota usage in the current tree\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n-      if (!previous.getSnapshot().equals(prior)) {\n-        diffs.get(snapshotIndex).setSnapshot(prior);\n+      if (previous.getSnapshotId() !\u003d prior) {\n+        diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          // the currentINode must be a descendant of a WithName node, which set\n          // countDiffChange to false. In that case we should count in the diff\n          // change when updating the quota usage in the current tree\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean]",
            "newValue": "[snapshot-int(modifiers-final), prior-int(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/01/14 12:52 PM",
          "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "14/12/13 2:13 AM",
          "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 24.44,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,50 @@\n-  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n-      Snapshot prior, final N currentINode,\n+  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n+      final int prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n       throws QuotaExceededException {\n-    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n+    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n-      if (prior !\u003d null) {\n+      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n         // set the snapshot to latestBefore\n-        diffs.get(snapshotIndex).setSnapshot(prior);\n-      } else {\n+        diffs.get(snapshotIndex).setSnapshotId(prior);\n+      } else { // there is no snapshot before\n         removed \u003d diffs.remove(0);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           // the currentINode must be a descendant of a WithName node, which set\n           // countDiffChange to false. In that case we should count in the diff\n           // change when updating the quota usage in the current tree\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n-      if (!previous.getSnapshot().equals(prior)) {\n-        diffs.get(snapshotIndex).setSnapshot(prior);\n+      if (previous.getSnapshotId() !\u003d prior) {\n+        diffs.get(snapshotIndex).setSnapshotId(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         }\n \n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final int snapshot,\n      final int prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d Snapshot.NO_SNAPSHOT_ID) { // there is still snapshot before\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else { // there is no snapshot before\n        removed \u003d diffs.remove(0);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          // the currentINode must be a descendant of a WithName node, which set\n          // countDiffChange to false. In that case we should count in the diff\n          // change when updating the quota usage in the current tree\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (previous.getSnapshotId() !\u003d prior) {\n        diffs.get(snapshotIndex).setSnapshotId(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "c02953dbc344b39e0eb0d13fe2d899cdcdc46380": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4908. Reduce snapshot inode memory usage.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 10:10 PM",
      "commitName": "c02953dbc344b39e0eb0d13fe2d899cdcdc46380",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "06/06/13 1:15 PM",
      "commitNameOld": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 13.37,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks,\n       final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n       throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           // the currentINode must be a descendant of a WithName node, which set\n           // countDiffChange to false. In that case we should count in the diff\n           // change when updating the quota usage in the current tree\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n-      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         if (countDiffChange) {\n           counts.add(Quota.NAMESPACE, 1);\n         } else {\n           currentINode.addSpaceConsumed(-1, 0, false);\n         }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n-        } else if (removed.snapshotINode !\u003d null) {\n-          removed.snapshotINode.clear();\n         }\n+\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          // the currentINode must be a descendant of a WithName node, which set\n          // countDiffChange to false. In that case we should count in the diff\n          // change when updating the quota usage in the current tree\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, A, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "d46e1608626c64400d2b6c7693a4c035783c55b4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/13 1:15 PM",
      "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/05/13 3:10 PM",
          "commitNameOld": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 32.92,
          "commitsBetweenForRepo": 192,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,51 @@\n   public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n       throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n-        counts.add(Quota.NAMESPACE, 1);\n-        // We add 1 to the namespace quota usage since we delete a diff. \n-        // The quota change will be propagated to \n-        // 1) ancestors in the current tree, and \n-        // 2) src tree of any renamed ancestor.\n-        // Because for 2) we do not calculate the number of diff for quota \n-        // usage, we need to compensate this diff change for 2)\n-        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n+        if (countDiffChange) {\n+          counts.add(Quota.NAMESPACE, 1);\n+        } else {\n+          // the currentINode must be a descendant of a WithName node, which set\n+          // countDiffChange to false. In that case we should count in the diff\n+          // change when updating the quota usage in the current tree\n+          currentINode.addSpaceConsumed(-1, 0, false);\n+        }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        counts.add(Quota.NAMESPACE, 1);\n-        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n+        if (countDiffChange) {\n+          counts.add(Quota.NAMESPACE, 1);\n+        } else {\n+          currentINode.addSpaceConsumed(-1, 0, false);\n+        }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          // the currentINode must be a descendant of a WithName node, which set\n          // countDiffChange to false. In that case we should count in the diff\n          // change when updating the quota usage in the current tree\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final), countDiffChange-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4877. Snapshot: fix the scenario where a directory is renamed under its prior descendant. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490421 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/13 1:15 PM",
          "commitName": "d46e1608626c64400d2b6c7693a4c035783c55b4",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "04/05/13 3:10 PM",
          "commitNameOld": "72d783374c1e302492d7ce537222b563241038bb",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 32.92,
          "commitsBetweenForRepo": 192,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,51 @@\n   public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n+      final BlocksMapUpdateInfo collectedBlocks,\n+      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n       throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n-        counts.add(Quota.NAMESPACE, 1);\n-        // We add 1 to the namespace quota usage since we delete a diff. \n-        // The quota change will be propagated to \n-        // 1) ancestors in the current tree, and \n-        // 2) src tree of any renamed ancestor.\n-        // Because for 2) we do not calculate the number of diff for quota \n-        // usage, we need to compensate this diff change for 2)\n-        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n+        if (countDiffChange) {\n+          counts.add(Quota.NAMESPACE, 1);\n+        } else {\n+          // the currentINode must be a descendant of a WithName node, which set\n+          // countDiffChange to false. In that case we should count in the diff\n+          // change when updating the quota usage in the current tree\n+          currentINode.addSpaceConsumed(-1, 0, false);\n+        }\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        counts.add(Quota.NAMESPACE, 1);\n-        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n+        if (countDiffChange) {\n+          counts.add(Quota.NAMESPACE, 1);\n+        } else {\n+          currentINode.addSpaceConsumed(-1, 0, false);\n+        }\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks,\n      final List\u003cINode\u003e removedINodes, boolean countDiffChange) \n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          // the currentINode must be a descendant of a WithName node, which set\n          // countDiffChange to false. In that case we should count in the diff\n          // change when updating the quota usage in the current tree\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        if (countDiffChange) {\n          counts.add(Quota.NAMESPACE, 1);\n        } else {\n          currentINode.addSpaceConsumed(-1, 0, false);\n        }\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "72d783374c1e302492d7ce537222b563241038bb": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-4791. Update and fix deletion of reference inode.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1479198 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 3:10 PM",
      "commitName": "72d783374c1e302492d7ce537222b563241038bb",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/04/13 3:03 PM",
      "commitNameOld": "e097f8404b3ffbad5322e0f8381a0b9958c5b589",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.01,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n-  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n+  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n       throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n         // We add 1 to the namespace quota usage since we delete a diff. \n         // The quota change will be propagated to \n         // 1) ancestors in the current tree, and \n         // 2) src tree of any renamed ancestor.\n         // Because for 2) we do not calculate the number of diff for quota \n         // usage, we need to compensate this diff change for 2)\n         currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n         currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        // We add 1 to the namespace quota usage since we delete a diff. \n        // The quota change will be propagated to \n        // 1) ancestors in the current tree, and \n        // 2) src tree of any renamed ancestor.\n        // Because for 2) we do not calculate the number of diff for quota \n        // usage, we need to compensate this diff change for 2)\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {
        "oldValue": "[final]",
        "newValue": "[public, final]"
      }
    },
    "0fa5cad0b27780c27a284c23101b1099d4886506": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 1:31 PM",
      "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,47 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n+      throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n+        // We add 1 to the namespace quota usage since we delete a diff. \n+        // The quota change will be propagated to \n+        // 1) ancestors in the current tree, and \n+        // 2) src tree of any renamed ancestor.\n+        // Because for 2) we do not calculate the number of diff for quota \n+        // usage, we need to compensate this diff change for 2)\n+        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n+        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        // We add 1 to the namespace quota usage since we delete a diff. \n        // The quota change will be propagated to \n        // 1) ancestors in the current tree, and \n        // 2) src tree of any renamed ancestor.\n        // Because for 2) we do not calculate the number of diff for quota \n        // usage, we need to compensate this diff change for 2)\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[QuotaExceededException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,47 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n+      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n+      throws QuotaExceededException {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n+        // We add 1 to the namespace quota usage since we delete a diff. \n+        // The quota change will be propagated to \n+        // 1) ancestors in the current tree, and \n+        // 2) src tree of any renamed ancestor.\n+        // Because for 2) we do not calculate the number of diff for quota \n+        // usage, we need to compensate this diff change for 2)\n+        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n+        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes)\n      throws QuotaExceededException {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        // We add 1 to the namespace quota usage since we delete a diff. \n        // The quota change will be propagated to \n        // 1) ancestors in the current tree, and \n        // 2) src tree of any renamed ancestor.\n        // Because for 2) we do not calculate the number of diff for quota \n        // usage, we need to compensate this diff change for 2)\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        currentINode.addSpaceConsumedToRenameSrc(1, 0, false, snapshot.getId());\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "3a812e9f3ae66cfa525faceb5af9085a4cc37232": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4738. Changes AbstractINodeDiff to implement Comparable\u003cInteger\u003e, and fix javadoc and other warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471228 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 7:11 PM",
      "commitName": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/04/13 5:11 PM",
      "commitNameOld": "10a2d82b45353ed3dbaa19d87c7e887c0afa2c57",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n-    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n+    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot.getId());\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "92e0416ced279a910616985bf11fa3f8b1b1de9b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 5:00 PM",
      "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/04/13 3:03 PM",
          "commitNameOld": "6bda1f20ad396918edde211f709f5819a361b51e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks) {\n+      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n-            collectedBlocks));\n+            collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n-            currentINode, removed, collectedBlocks));\n+            currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final), removedINodes-List\u003cINode\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4727. Update inodeMap after deleting files/directories/snapshots.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/04/13 5:00 PM",
          "commitName": "92e0416ced279a910616985bf11fa3f8b1b1de9b",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "16/04/13 3:03 PM",
          "commitNameOld": "6bda1f20ad396918edde211f709f5819a361b51e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks) {\n+      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n-            collectedBlocks));\n+            collectedBlocks, removedINodes));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n-            currentINode, removed, collectedBlocks));\n+            currentINode, removed, collectedBlocks, removedINodes));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks, final List\u003cINode\u003e removedINodes) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks, removedINodes));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks, removedINodes));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/03/13 7:41 PM",
      "commitNameOld": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n       Snapshot prior, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n     Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n         counts.add(Quota.NAMESPACE, 1);\n         counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n             collectedBlocks));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n         counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n-          removed.snapshotINode.clearReferences();\n+          removed.snapshotINode.clear();\n         }\n         counts.add(previous.combinePosteriorAndCollectBlocks(\n             currentINode, removed, collectedBlocks));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clear();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "3b3ea5c4220e674064c7603a449f63904c10bac1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/03/13 7:41 PM",
      "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/13 7:41 PM",
          "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "07/03/13 2:34 PM",
          "commitNameOld": "8d95784bf1a7fcf473fd5a9fed0140521a92a968",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.17,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n-      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n+  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n+      Snapshot prior, final N currentINode,\n+      final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n-    int removedNum \u003d 0;\n+    Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n-        removedNum++; // removed a diff\n-        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n-            collectedBlocks);\n+        counts.add(Quota.NAMESPACE, 1);\n+        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n+            collectedBlocks));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        removedNum++;\n+        counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n-            removed, collectedBlocks);\n+        counts.add(previous.combinePosteriorAndCollectBlocks(\n+            currentINode, removed, collectedBlocks));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n-    return removedNum;\n+    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "Quota.Counts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/13 7:41 PM",
          "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "07/03/13 2:34 PM",
          "commitNameOld": "8d95784bf1a7fcf473fd5a9fed0140521a92a968",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 4.17,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n-      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n+  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n+      Snapshot prior, final N currentINode,\n+      final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     \n-    int removedNum \u003d 0;\n+    Quota.Counts counts \u003d Quota.Counts.newInstance();\n     D removed \u003d null;\n     if (snapshotIndex \u003d\u003d 0) {\n       if (prior !\u003d null) {\n         // set the snapshot to latestBefore\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         removed \u003d diffs.remove(0);\n-        removedNum++; // removed a diff\n-        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n-            collectedBlocks);\n+        counts.add(Quota.NAMESPACE, 1);\n+        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n+            collectedBlocks));\n       }\n     } else if (snapshotIndex \u003e 0) {\n       final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n       if (!previous.getSnapshot().equals(prior)) {\n         diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         removed \u003d diffs.remove(snapshotIndex);\n-        removedNum++;\n+        counts.add(Quota.NAMESPACE, 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n-            removed, collectedBlocks);\n+        counts.add(previous.combinePosteriorAndCollectBlocks(\n+            currentINode, removed, collectedBlocks));\n         previous.setPosterior(removed.getPosterior());\n         removed.setPosterior(null);\n       }\n     }\n-    return removedNum;\n+    return counts;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final Quota.Counts deleteSnapshotDiff(final Snapshot snapshot,\n      Snapshot prior, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    Quota.Counts counts \u003d Quota.Counts.newInstance();\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        counts.add(Quota.NAMESPACE, 1);\n        counts.add(removed.destroyDiffAndCollectBlocks(currentINode,\n            collectedBlocks));\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        counts.add(Quota.NAMESPACE, 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        counts.add(previous.combinePosteriorAndCollectBlocks(\n            currentINode, removed, collectedBlocks));\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return counts;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/13 7:27 PM",
      "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 7:27 PM",
          "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "20/02/13 12:02 PM",
          "commitNameOld": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,37 @@\n-  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks) {\n+  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n+      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003c 0) {\n-      return null;\n-    } else {\n-      final D removed \u003d diffs.remove(snapshotIndex);\n-      if (snapshotIndex \u003d\u003d 0) {\n-        if (removed.snapshotINode !\u003d null) {\n-          removed.snapshotINode.clearReferences();\n-        }\n+    \n+    int removedNum \u003d 0;\n+    D removed \u003d null;\n+    if (snapshotIndex \u003d\u003d 0) {\n+      if (prior !\u003d null) {\n+        // set the snapshot to latestBefore\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n+      } else {\n+        removed \u003d diffs.remove(0);\n+        removedNum++; // removed a diff\n+        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n+            collectedBlocks);\n+      }\n+    } else if (snapshotIndex \u003e 0) {\n+      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+      if (!previous.getSnapshot().equals(prior)) {\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n-        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        removed \u003d diffs.remove(snapshotIndex);\n+        removedNum++;\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n-            collectedBlocks);\n+        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n+            removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n+        removed.setPosterior(null);\n       }\n-      removed.setPosterior(null);\n-      return removed;\n     }\n+    return removedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    int removedNum \u003d 0;\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        removedNum++; // removed a diff\n        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n            collectedBlocks);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        removedNum++;\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n            removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return removedNum;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), prior-Snapshot, currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 7:27 PM",
          "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "20/02/13 12:02 PM",
          "commitNameOld": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,37 @@\n-  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks) {\n+  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n+      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003c 0) {\n-      return null;\n-    } else {\n-      final D removed \u003d diffs.remove(snapshotIndex);\n-      if (snapshotIndex \u003d\u003d 0) {\n-        if (removed.snapshotINode !\u003d null) {\n-          removed.snapshotINode.clearReferences();\n-        }\n+    \n+    int removedNum \u003d 0;\n+    D removed \u003d null;\n+    if (snapshotIndex \u003d\u003d 0) {\n+      if (prior !\u003d null) {\n+        // set the snapshot to latestBefore\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n+      } else {\n+        removed \u003d diffs.remove(0);\n+        removedNum++; // removed a diff\n+        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n+            collectedBlocks);\n+      }\n+    } else if (snapshotIndex \u003e 0) {\n+      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+      if (!previous.getSnapshot().equals(prior)) {\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n-        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        removed \u003d diffs.remove(snapshotIndex);\n+        removedNum++;\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n-            collectedBlocks);\n+        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n+            removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n+        removed.setPosterior(null);\n       }\n-      removed.setPosterior(null);\n-      return removed;\n     }\n+    return removedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    int removedNum \u003d 0;\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        removedNum++; // removed a diff\n        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n            collectedBlocks);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        removedNum++;\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n            removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return removedNum;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "D",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 7:27 PM",
          "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "20/02/13 12:02 PM",
          "commitNameOld": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,37 @@\n-  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n-      final BlocksMapUpdateInfo collectedBlocks) {\n+  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n+      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003c 0) {\n-      return null;\n-    } else {\n-      final D removed \u003d diffs.remove(snapshotIndex);\n-      if (snapshotIndex \u003d\u003d 0) {\n-        if (removed.snapshotINode !\u003d null) {\n-          removed.snapshotINode.clearReferences();\n-        }\n+    \n+    int removedNum \u003d 0;\n+    D removed \u003d null;\n+    if (snapshotIndex \u003d\u003d 0) {\n+      if (prior !\u003d null) {\n+        // set the snapshot to latestBefore\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n+      } else {\n+        removed \u003d diffs.remove(0);\n+        removedNum++; // removed a diff\n+        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n+            collectedBlocks);\n+      }\n+    } else if (snapshotIndex \u003e 0) {\n+      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+      if (!previous.getSnapshot().equals(prior)) {\n+        diffs.get(snapshotIndex).setSnapshot(prior);\n       } else {\n         // combine the to-be-removed diff with its previous diff\n-        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        removed \u003d diffs.remove(snapshotIndex);\n+        removedNum++;\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n-            collectedBlocks);\n+        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n+            removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n+        removed.setPosterior(null);\n       }\n-      removed.setPosterior(null);\n-      return removed;\n     }\n+    return removedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final int deleteSnapshotDiff(final Snapshot snapshot, Snapshot prior,\n      final N currentINode, final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    \n    int removedNum \u003d 0;\n    D removed \u003d null;\n    if (snapshotIndex \u003d\u003d 0) {\n      if (prior !\u003d null) {\n        // set the snapshot to latestBefore\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        removed \u003d diffs.remove(0);\n        removedNum++; // removed a diff\n        removedNum +\u003d removed.destroyAndCollectBlocks(currentINode,\n            collectedBlocks);\n      }\n    } else if (snapshotIndex \u003e 0) {\n      final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n      if (!previous.getSnapshot().equals(prior)) {\n        diffs.get(snapshotIndex).setSnapshot(prior);\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        removed \u003d diffs.remove(snapshotIndex);\n        removedNum++;\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        removedNum +\u003d previous.combinePosteriorAndCollectBlocks(currentINode,\n            removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n        removed.setPosterior(null);\n      }\n    }\n    return removedNum;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "02e6b72ae148fc8c2ba02ef624536b9e48997b31": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4481. Change fsimage to support snapshot file diffs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446000 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/13 4:43 PM",
      "commitName": "02e6b72ae148fc8c2ba02ef624536b9e48997b31",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4481. Change fsimage to support snapshot file diffs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446000 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/02/13 4:43 PM",
          "commitName": "02e6b72ae148fc8c2ba02ef624536b9e48997b31",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "07/02/13 6:18 PM",
          "commitNameOld": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.93,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  final D deleteSnapshotDiff(final Snapshot snapshot,\n+  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003d\u003d 0) {\n         if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(getCurrentINode(), removed, collectedBlocks);\n+        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n+            collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003d\u003d 0) {\n        if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n            collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), currentINode-N(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4481. Change fsimage to support snapshot file diffs.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446000 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/02/13 4:43 PM",
          "commitName": "02e6b72ae148fc8c2ba02ef624536b9e48997b31",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "07/02/13 6:18 PM",
          "commitNameOld": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.93,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,27 @@\n-  final D deleteSnapshotDiff(final Snapshot snapshot,\n+  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003d\u003d 0) {\n         if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n       } else {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n           previous.snapshotINode \u003d removed.snapshotINode;\n         } else if (removed.snapshotINode !\u003d null) {\n           removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(getCurrentINode(), removed, collectedBlocks);\n+        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n+            collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot, final N currentINode,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003d\u003d 0) {\n        if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        previous.combinePosteriorAndCollectBlocks(currentINode, removed,\n            collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4446. Support file snapshots with diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/13 6:18 PM",
      "commitName": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/02/13 12:39 PM",
      "commitNameOld": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 5.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,26 @@\n   final D deleteSnapshotDiff(final Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n-      if (snapshotIndex \u003e 0) {\n+      if (snapshotIndex \u003d\u003d 0) {\n+        if (removed.snapshotINode !\u003d null) {\n+          removed.snapshotINode.clearReferences();\n+        }\n+      } else {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n         if (previous.snapshotINode \u003d\u003d null) {\n-          // TODO: add a new testcase for this\n           previous.snapshotINode \u003d removed.snapshotINode;\n+        } else if (removed.snapshotINode !\u003d null) {\n+          removed.snapshotINode.clearReferences();\n         }\n-        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n+        previous.combinePosteriorAndCollectBlocks(getCurrentINode(), removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003d\u003d 0) {\n        if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n      } else {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          previous.snapshotINode \u003d removed.snapshotINode;\n        } else if (removed.snapshotINode !\u003d null) {\n          removed.snapshotINode.clearReferences();\n        }\n        previous.combinePosteriorAndCollectBlocks(getCurrentINode(), removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4414. Add support for getting snapshot diff from DistributedFileSystem. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/13 12:39 PM",
      "commitName": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/02/13 5:53 PM",
      "commitNameOld": "e7db60fbfcc222b32d610ffd912683494674ad2f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,21 @@\n   final D deleteSnapshotDiff(final Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        if (previous.snapshotINode \u003d\u003d null) {\n+          // TODO: add a new testcase for this\n+          previous.snapshotINode \u003d removed.snapshotINode;\n+        }\n         previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        if (previous.snapshotINode \u003d\u003d null) {\n          // TODO: add a new testcase for this\n          previous.snapshotINode \u003d removed.snapshotINode;\n        }\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
      "extendedDetails": {}
    },
    "e7db60fbfcc222b32d610ffd912683494674ad2f": {
      "type": "Ymultichange(Yreturntypechange,Yparametermetachange)",
      "commitMessage": "HDFS-4464. Combine collectSubtreeBlocksAndClear with deleteDiffsForSnapshot and rename it to destroySubtreeAndCollectBlocks.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441680 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/13 5:53 PM",
      "commitName": "e7db60fbfcc222b32d610ffd912683494674ad2f",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4464. Combine collectSubtreeBlocksAndClear with deleteDiffsForSnapshot and rename it to destroySubtreeAndCollectBlocks.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441680 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/02/13 5:53 PM",
          "commitName": "e7db60fbfcc222b32d610ffd912683494674ad2f",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 3:25 PM",
          "commitNameOld": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.1,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n+  final D deleteSnapshotDiff(final Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n         previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "AbstractINodeDiff\u003cN,D\u003e",
            "newValue": "D"
          }
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-4464. Combine collectSubtreeBlocksAndClear with deleteDiffsForSnapshot and rename it to destroySubtreeAndCollectBlocks.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441680 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/02/13 5:53 PM",
          "commitName": "e7db60fbfcc222b32d610ffd912683494674ad2f",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 3:25 PM",
          "commitNameOld": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.1,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n+  final D deleteSnapshotDiff(final Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n       final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n         previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n         previous.setPosterior(removed.getPosterior());\n       }\n       removed.setPosterior(null);\n       return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final D deleteSnapshotDiff(final Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]",
            "newValue": "[snapshot-Snapshot(modifiers-final), collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]"
          }
        }
      ]
    },
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 3:25 PM",
      "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 3:25 PM",
          "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 1:31 PM",
          "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n+  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003d\u003d -1) {\n+    if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n-      SnapshotDiff diffToRemove \u003d null;\n-      diffToRemove \u003d diffs.remove(snapshotIndex);\n+      final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n-        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePosterior(diffToRemove.diff,\n-            new Diff.Processor\u003cINode\u003e() {\n-          /** Collect blocks for deleted files. */\n-          @Override\n-          public void process(INode inode) {\n-            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n-              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n-          }\n-        });\n-\n-        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n-        diffToRemove.posteriorDiff \u003d null;\n+        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n+        previous.setPosterior(removed.getPosterior());\n       }\n-      return diffToRemove;\n+      removed.setPosterior(null);\n+      return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
            "oldMethodName": "deleteSnapshotDiff",
            "newMethodName": "deleteSnapshotDiff"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 3:25 PM",
          "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 1:31 PM",
          "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n+  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003d\u003d -1) {\n+    if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n-      SnapshotDiff diffToRemove \u003d null;\n-      diffToRemove \u003d diffs.remove(snapshotIndex);\n+      final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n-        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePosterior(diffToRemove.diff,\n-            new Diff.Processor\u003cINode\u003e() {\n-          /** Collect blocks for deleted files. */\n-          @Override\n-          public void process(INode inode) {\n-            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n-              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n-          }\n-        });\n-\n-        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n-        diffToRemove.posteriorDiff \u003d null;\n+        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n+        previous.setPosterior(removed.getPosterior());\n       }\n-      return diffToRemove;\n+      removed.setPosterior(null);\n+      return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "SnapshotDiff",
            "newValue": "AbstractINodeDiff\u003cN,D\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 3:25 PM",
          "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 1:31 PM",
          "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n+  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003d\u003d -1) {\n+    if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n-      SnapshotDiff diffToRemove \u003d null;\n-      diffToRemove \u003d diffs.remove(snapshotIndex);\n+      final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n-        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePosterior(diffToRemove.diff,\n-            new Diff.Processor\u003cINode\u003e() {\n-          /** Collect blocks for deleted files. */\n-          @Override\n-          public void process(INode inode) {\n-            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n-              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n-          }\n-        });\n-\n-        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n-        diffToRemove.posteriorDiff \u003d null;\n+        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n+        previous.setPosterior(removed.getPosterior());\n       }\n-      return diffToRemove;\n+      removed.setPosterior(null);\n+      return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[final]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 3:25 PM",
          "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "29/01/13 1:31 PM",
          "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n+  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n-    if (snapshotIndex \u003d\u003d -1) {\n+    if (snapshotIndex \u003c 0) {\n       return null;\n     } else {\n-      SnapshotDiff diffToRemove \u003d null;\n-      diffToRemove \u003d diffs.remove(snapshotIndex);\n+      final D removed \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n-        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePosterior(diffToRemove.diff,\n-            new Diff.Processor\u003cINode\u003e() {\n-          /** Collect blocks for deleted files. */\n-          @Override\n-          public void process(INode inode) {\n-            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n-              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n-          }\n-        });\n-\n-        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n-        diffToRemove.posteriorDiff \u003d null;\n+        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n+        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n+        previous.setPosterior(removed.getPosterior());\n       }\n-      return diffToRemove;\n+      removed.setPosterior(null);\n+      return removed;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  final AbstractINodeDiff\u003cN, D\u003e deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003c 0) {\n      return null;\n    } else {\n      final D removed \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        final AbstractINodeDiff\u003cN, D\u003e previous \u003d diffs.get(snapshotIndex - 1);\n        previous.combinePosteriorAndCollectBlocks(removed, collectedBlocks);\n        previous.setPosterior(removed.getPosterior());\n      }\n      removed.setPosterior(null);\n      return removed;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/AbstractINodeDiffList.java",
          "extendedDetails": {}
        }
      ]
    },
    "a3bf2083867db5d848ea14f145d120f02b820af2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/13 4:01 PM",
      "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/01/13 7:09 PM",
      "commitNameOld": "12e8ba804f9454d9bb07099e35ce7ef63c0d4e1e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003d\u003d -1) {\n       return null;\n     } else {\n       SnapshotDiff diffToRemove \u003d null;\n       diffToRemove \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n+        previousDiff.diff.combinePosterior(diffToRemove.diff,\n+            new Diff.Processor\u003cINode\u003e() {\n           /** Collect blocks for deleted files. */\n           @Override\n           public void process(INode inode) {\n             if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n               ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n             }\n           }\n         });\n \n         previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n         diffToRemove.posteriorDiff \u003d null;\n       }\n       return diffToRemove;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePosterior(diffToRemove.diff,\n            new Diff.Processor\u003cINode\u003e() {\n          /** Collect blocks for deleted files. */\n          @Override\n          public void process(INode inode) {\n            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n        });\n\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/13 1:33 PM",
      "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/01/13 6:48 PM",
      "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003d\u003d -1) {\n       return null;\n     } else {\n       SnapshotDiff diffToRemove \u003d null;\n       diffToRemove \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n         previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n           /** Collect blocks for deleted files. */\n           @Override\n           public void process(INode inode) {\n             if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n               ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n             }\n           }\n-        }, true);\n+        });\n \n         previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n         diffToRemove.posteriorDiff \u003d null;\n       }\n       return diffToRemove;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n          /** Collect blocks for deleted files. */\n          @Override\n          public void process(INode inode) {\n            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n        });\n\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:48 PM",
      "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/01/13 4:43 AM",
      "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.59,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n       final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003d\u003d -1) {\n       return null;\n     } else {\n       SnapshotDiff diffToRemove \u003d null;\n       diffToRemove \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n         previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n           /** Collect blocks for deleted files. */\n           @Override\n           public void process(INode inode) {\n             if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n               ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n             }\n           }\n-        });\n+        }, true);\n \n         previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n         diffToRemove.posteriorDiff \u003d null;\n       }\n       return diffToRemove;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n          /** Collect blocks for deleted files. */\n          @Override\n          public void process(INode inode) {\n            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n        }, true);\n\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/13 10:20 PM",
      "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/01/13 10:20 PM",
          "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "09/01/13 8:44 AM",
          "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.57,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,27 @@\n   SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n-      BlocksMapUpdateInfo collectedBlocks) {\n+      final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003d\u003d -1) {\n       return null;\n     } else {\n       SnapshotDiff diffToRemove \u003d null;\n       diffToRemove \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePostDiff(diffToRemove.diff, collectedBlocks);\n+        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n+          /** Collect blocks for deleted files. */\n+          @Override\n+          public void process(INode inode) {\n+            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n+              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n+            }\n+          }\n+        });\n+\n         previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n         diffToRemove.posteriorDiff \u003d null;\n       }\n       return diffToRemove;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n          /** Collect blocks for deleted files. */\n          @Override\n          public void process(INode inode) {\n            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n        });\n\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/01/13 10:20 PM",
          "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "09/01/13 8:44 AM",
          "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.57,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,27 @@\n   SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n-      BlocksMapUpdateInfo collectedBlocks) {\n+      final BlocksMapUpdateInfo collectedBlocks) {\n     int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n     if (snapshotIndex \u003d\u003d -1) {\n       return null;\n     } else {\n       SnapshotDiff diffToRemove \u003d null;\n       diffToRemove \u003d diffs.remove(snapshotIndex);\n       if (snapshotIndex \u003e 0) {\n         // combine the to-be-removed diff with its previous diff\n         SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n-        previousDiff.diff.combinePostDiff(diffToRemove.diff, collectedBlocks);\n+        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n+          /** Collect blocks for deleted files. */\n+          @Override\n+          public void process(INode inode) {\n+            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n+              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n+            }\n+          }\n+        });\n+\n         previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n         diffToRemove.posteriorDiff \u003d null;\n       }\n       return diffToRemove;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      final BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePostDiff(diffToRemove.diff, new Processor() {\n          /** Collect blocks for deleted files. */\n          @Override\n          public void process(INode inode) {\n            if (inode !\u003d null \u0026\u0026 inode instanceof INodeFile) {\n              ((INodeFile)inode).collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n        });\n\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[snapshot-Snapshot, collectedBlocks-BlocksMapUpdateInfo]",
            "newValue": "[snapshot-Snapshot, collectedBlocks-BlocksMapUpdateInfo(modifiers-final)]"
          }
        }
      ]
    },
    "2d4097840c29116e9b000c158ce841d27863ad6e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4244. Support snapshot deletion.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1430953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 8:44 AM",
      "commitName": "2d4097840c29116e9b000c158ce841d27863ad6e",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,18 @@\n+  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n+      BlocksMapUpdateInfo collectedBlocks) {\n+    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n+    if (snapshotIndex \u003d\u003d -1) {\n+      return null;\n+    } else {\n+      SnapshotDiff diffToRemove \u003d null;\n+      diffToRemove \u003d diffs.remove(snapshotIndex);\n+      if (snapshotIndex \u003e 0) {\n+        // combine the to-be-removed diff with its previous diff\n+        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n+        previousDiff.diff.combinePostDiff(diffToRemove.diff, collectedBlocks);\n+        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n+        diffToRemove.posteriorDiff \u003d null;\n+      }\n+      return diffToRemove;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  SnapshotDiff deleteSnapshotDiff(Snapshot snapshot,\n      BlocksMapUpdateInfo collectedBlocks) {\n    int snapshotIndex \u003d Collections.binarySearch(diffs, snapshot);\n    if (snapshotIndex \u003d\u003d -1) {\n      return null;\n    } else {\n      SnapshotDiff diffToRemove \u003d null;\n      diffToRemove \u003d diffs.remove(snapshotIndex);\n      if (snapshotIndex \u003e 0) {\n        // combine the to-be-removed diff with its previous diff\n        SnapshotDiff previousDiff \u003d diffs.get(snapshotIndex - 1);\n        previousDiff.diff.combinePostDiff(diffToRemove.diff, collectedBlocks);\n        previousDiff.posteriorDiff \u003d diffToRemove.posteriorDiff;\n        diffToRemove.posteriorDiff \u003d null;\n      }\n      return diffToRemove;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}