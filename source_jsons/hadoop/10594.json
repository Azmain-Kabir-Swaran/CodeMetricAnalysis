{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockRecoveryWorker.java",
  "functionName": "getSafeLength",
  "functionId": "getSafeLength___syncBlocks-Map__Long,BlockRecord__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockRecoveryWorker.java",
  "functionStartLine": 521,
  "functionEndLine": 531,
  "numCommitsSeen": 15,
  "timeTaken": 1782,
  "changeHistory": [
    "def754ec064c8502fbd736efae738bcbdc735f0a",
    "61ab0440f7eaff0f631cbae0378403912f88d7ad"
  ],
  "changeHistoryShort": {
    "def754ec064c8502fbd736efae738bcbdc735f0a": "Ybodychange",
    "61ab0440f7eaff0f631cbae0378403912f88d7ad": "Yintroduced"
  },
  "changeHistoryDetails": {
    "def754ec064c8502fbd736efae738bcbdc735f0a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9816. Erasure Coding: allow to use multiple EC policies in striping related tests [Part 3]. Contributed by Rui Li.\n\nChange-Id: I64b57bab4722cdc6e1e3148c3a3a401370249afe\n",
      "commitDate": "23/02/16 2:05 PM",
      "commitName": "def754ec064c8502fbd736efae738bcbdc735f0a",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/12/15 10:47 PM",
      "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 63.64,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,11 @@\n     long getSafeLength(Map\u003cLong, BlockRecord\u003e syncBlocks) {\n-      final int cellSize \u003d ecPolicy.getCellSize();\n       final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n       Preconditions.checkArgument(syncBlocks.size() \u003e\u003d dataBlkNum);\n-      final int stripeSize \u003d dataBlkNum * cellSize;\n       long[] blockLengths \u003d new long[syncBlocks.size()];\n       int i \u003d 0;\n       for (BlockRecord r : syncBlocks.values()) {\n         ReplicaRecoveryInfo rInfo \u003d r.getReplicaRecoveryInfo();\n         blockLengths[i++] \u003d rInfo.getNumBytes();\n       }\n-      Arrays.sort(blockLengths);\n-      // full stripe is a stripe has at least dataBlkNum full cells.\n-      // lastFullStripeIdx is the index of the last full stripe.\n-      int lastFullStripeIdx \u003d\n-          (int) (blockLengths[blockLengths.length - dataBlkNum] / cellSize);\n-      return lastFullStripeIdx * stripeSize; // return the safeLength\n-      // TODO: Include lastFullStripeIdx+1 stripe in safeLength, if there exists\n-      // such a stripe (and it must be partial).\n+      return StripedBlockUtil.getSafeLength(ecPolicy, blockLengths);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    long getSafeLength(Map\u003cLong, BlockRecord\u003e syncBlocks) {\n      final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n      Preconditions.checkArgument(syncBlocks.size() \u003e\u003d dataBlkNum);\n      long[] blockLengths \u003d new long[syncBlocks.size()];\n      int i \u003d 0;\n      for (BlockRecord r : syncBlocks.values()) {\n        ReplicaRecoveryInfo rInfo \u003d r.getReplicaRecoveryInfo();\n        blockLengths[i++] \u003d rInfo.getNumBytes();\n      }\n      return StripedBlockUtil.getSafeLength(ecPolicy, blockLengths);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockRecoveryWorker.java",
      "extendedDetails": {}
    },
    "61ab0440f7eaff0f631cbae0378403912f88d7ad": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9173. Erasure Coding: Lease recovery for striped file. Contributed by Walter Su and Jing Zhao.\n\nChange-Id: I51703a61c9d8454f883028f3f6acb5729fde1b15\n",
      "commitDate": "18/12/15 3:57 PM",
      "commitName": "61ab0440f7eaff0f631cbae0378403912f88d7ad",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,20 @@\n+    long getSafeLength(Map\u003cLong, BlockRecord\u003e syncBlocks) {\n+      final int cellSize \u003d ecPolicy.getCellSize();\n+      final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n+      Preconditions.checkArgument(syncBlocks.size() \u003e\u003d dataBlkNum);\n+      final int stripeSize \u003d dataBlkNum * cellSize;\n+      long[] blockLengths \u003d new long[syncBlocks.size()];\n+      int i \u003d 0;\n+      for (BlockRecord r : syncBlocks.values()) {\n+        ReplicaRecoveryInfo rInfo \u003d r.getReplicaRecoveryInfo();\n+        blockLengths[i++] \u003d rInfo.getNumBytes();\n+      }\n+      Arrays.sort(blockLengths);\n+      // full stripe is a stripe has at least dataBlkNum full cells.\n+      // lastFullStripeIdx is the index of the last full stripe.\n+      int lastFullStripeIdx \u003d\n+          (int) (blockLengths[blockLengths.length - dataBlkNum] / cellSize);\n+      return lastFullStripeIdx * stripeSize; // return the safeLength\n+      // TODO: Include lastFullStripeIdx+1 stripe in safeLength, if there exists\n+      // such a stripe (and it must be partial).\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    long getSafeLength(Map\u003cLong, BlockRecord\u003e syncBlocks) {\n      final int cellSize \u003d ecPolicy.getCellSize();\n      final int dataBlkNum \u003d ecPolicy.getNumDataUnits();\n      Preconditions.checkArgument(syncBlocks.size() \u003e\u003d dataBlkNum);\n      final int stripeSize \u003d dataBlkNum * cellSize;\n      long[] blockLengths \u003d new long[syncBlocks.size()];\n      int i \u003d 0;\n      for (BlockRecord r : syncBlocks.values()) {\n        ReplicaRecoveryInfo rInfo \u003d r.getReplicaRecoveryInfo();\n        blockLengths[i++] \u003d rInfo.getNumBytes();\n      }\n      Arrays.sort(blockLengths);\n      // full stripe is a stripe has at least dataBlkNum full cells.\n      // lastFullStripeIdx is the index of the last full stripe.\n      int lastFullStripeIdx \u003d\n          (int) (blockLengths[blockLengths.length - dataBlkNum] / cellSize);\n      return lastFullStripeIdx * stripeSize; // return the safeLength\n      // TODO: Include lastFullStripeIdx+1 stripe in safeLength, if there exists\n      // such a stripe (and it must be partial).\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockRecoveryWorker.java"
    }
  }
}