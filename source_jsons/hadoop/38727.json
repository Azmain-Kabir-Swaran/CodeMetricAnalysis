{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerNode.java",
  "functionName": "reserveResource",
  "functionId": "reserveResource___application-SchedulerApplicationAttempt__priority-SchedulerRequestKey__container-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
  "functionStartLine": 58,
  "functionEndLine": 100,
  "numCommitsSeen": 67,
  "timeTaken": 9758,
  "changeHistory": [
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Yparameterchange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ymultichange(Yparameterchange,Ybodychange)",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Yparameterchange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 82.08,
      "commitsBetweenForRepo": 671,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public synchronized void reserveResource(\n-      SchedulerApplicationAttempt application, Priority priority,\n+      SchedulerApplicationAttempt application, SchedulerRequestKey priority,\n       RMContainer container) {\n     // Check if it\u0027s already reserved\n     RMContainer reservedContainer \u003d getReservedContainer();\n     if (reservedContainer !\u003d null) {\n       // Sanity check\n       if (!container.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + container +\n             \" on node \" + container.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application attempt on a given node!\n       // Reservation is still against attempt.\n       if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n           .equals(container.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + container + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + reservedContainer +\n             \" on node \" + this);\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Updated reserved container \"\n             + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reserved container \"\n             + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     }\n     setReservedContainer(container);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, SchedulerRequestKey priority,\n      RMContainer container) {\n    // Check if it\u0027s already reserved\n    RMContainer reservedContainer \u003d getReservedContainer();\n    if (reservedContainer !\u003d null) {\n      // Sanity check\n      if (!container.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container +\n            \" on node \" + container.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application attempt on a given node!\n      // Reservation is still against attempt.\n      if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n          .equals(container.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + reservedContainer +\n            \" on node \" + this);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    }\n    setReservedContainer(container);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApplicationAttempt, priority-Priority, container-RMContainer]",
        "newValue": "[application-SchedulerApplicationAttempt, priority-SchedulerRequestKey, container-RMContainer]"
      }
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/05/14 10:32 PM",
          "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/04/14 1:37 PM",
          "commitNameOld": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 36.37,
          "commitsBetweenForRepo": 202,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public synchronized void reserveResource(\n-      SchedulerApplicationAttempt application, Priority priority, \n-      RMContainer reservedContainer) {\n+      SchedulerApplicationAttempt application, Priority priority,\n+      RMContainer container) {\n     // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n+    RMContainer reservedContainer \u003d getReservedContainer();\n+    if (reservedContainer !\u003d null) {\n       // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n+      if (!container.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n+            \" container \" + container +\n+            \" on node \" + container.getReservedNode() + \n+            \" when currently\" + \" reserved resource \" + reservedContainer +\n+            \" on node \" + reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application attempt on a given node!\n       // Reservation is still against attempt.\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n+      if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n+          .equals(container.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n+            \" container \" + container + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n+            \" reserved container \" + reservedContainer +\n             \" on node \" + this);\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Updated reserved container \"\n-            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reserved container \"\n-            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    setReservedContainer(container);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, Priority priority,\n      RMContainer container) {\n    // Check if it\u0027s already reserved\n    RMContainer reservedContainer \u003d getReservedContainer();\n    if (reservedContainer !\u003d null) {\n      // Sanity check\n      if (!container.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container +\n            \" on node \" + container.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application attempt on a given node!\n      // Reservation is still against attempt.\n      if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n          .equals(container.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + reservedContainer +\n            \" on node \" + this);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    }\n    setReservedContainer(container);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApplicationAttempt, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[application-SchedulerApplicationAttempt, priority-Priority, container-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/05/14 10:32 PM",
          "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/04/14 1:37 PM",
          "commitNameOld": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 36.37,
          "commitsBetweenForRepo": 202,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   public synchronized void reserveResource(\n-      SchedulerApplicationAttempt application, Priority priority, \n-      RMContainer reservedContainer) {\n+      SchedulerApplicationAttempt application, Priority priority,\n+      RMContainer container) {\n     // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n+    RMContainer reservedContainer \u003d getReservedContainer();\n+    if (reservedContainer !\u003d null) {\n       // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n+      if (!container.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n+            \" container \" + container +\n+            \" on node \" + container.getReservedNode() + \n+            \" when currently\" + \" reserved resource \" + reservedContainer +\n+            \" on node \" + reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application attempt on a given node!\n       // Reservation is still against attempt.\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n+      if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n+          .equals(container.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n+            \" container \" + container + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n+            \" reserved container \" + reservedContainer +\n             \" on node \" + this);\n       }\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Updated reserved container \"\n-            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reserved container \"\n-            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + container.getContainer().getId() + \" on node \" + this\n             + \" for application attempt \"\n             + application.getApplicationAttemptId());\n       }\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    setReservedContainer(container);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, Priority priority,\n      RMContainer container) {\n    // Check if it\u0027s already reserved\n    RMContainer reservedContainer \u003d getReservedContainer();\n    if (reservedContainer !\u003d null) {\n      // Sanity check\n      if (!container.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container +\n            \" on node \" + container.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application attempt on a given node!\n      // Reservation is still against attempt.\n      if (!reservedContainer.getContainer().getId().getApplicationAttemptId()\n          .equals(container.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + container + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + reservedContainer +\n            \" on node \" + this);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reserved container \"\n            + container.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    }\n    setReservedContainer(container);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1892. Improved some logs in the scheduler. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587717 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 1:37 PM",
      "commitName": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/01/14 7:04 AM",
      "commitNameOld": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 95.23,
      "commitsBetweenForRepo": 770,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,42 @@\n   public synchronized void reserveResource(\n       SchedulerApplicationAttempt application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application attempt on a given node!\n       // Reservation is still against attempt.\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Updated reserved container \"\n+            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + \" for application attempt \"\n+            + application.getApplicationAttemptId());\n+      }\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Reserved container \"\n+            + reservedContainer.getContainer().getId() + \" on node \" + this\n+            + \" for application attempt \"\n+            + application.getApplicationAttemptId());\n+      }\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application attempt on a given node!\n      // Reservation is still against attempt.\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated reserved container \"\n            + reservedContainer.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reserved container \"\n            + reservedContainer.getContainer().getId() + \" on node \" + this\n            + \" for application attempt \"\n            + application.getApplicationAttemptId());\n      }\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public synchronized void reserveResource(\n       SchedulerApplicationAttempt application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n-      // Cannot reserve more than one application on a given node!\n+      // Cannot reserve more than one application attempt on a given node!\n+      // Reservation is still against attempt.\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application attempt on a given node!\n      // Reservation is still against attempt.\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/11/13 1:23 PM",
      "commitNameOld": "6990355e577ad19371cb656c250fb665ed14062f",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 57.96,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n-      SchedulerApplication application, Priority priority, \n+      SchedulerApplicationAttempt application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n             \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplicationAttempt application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApplication, priority-Priority, reservedContainer-RMContainer]",
        "newValue": "[application-SchedulerApplicationAttempt, priority-Priority, reservedContainer-RMContainer]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplication application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n+      SchedulerApplication application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n+            \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplication application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
            "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
            "oldMethodName": "reserveResource",
            "newMethodName": "reserveResource"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n+      SchedulerApplication application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n+            \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplication application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n+      SchedulerApplication application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n       if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n           reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n+            \" for application \" + application.getApplicationAttemptId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void reserveResource(\n      SchedulerApplication application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationAttemptId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerNode.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[application-SchedulerApplication, priority-Priority, reservedContainer-RMContainer]"
          }
        }
      ]
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/08/11 4:27 PM",
      "commitNameOld": "fb6ecb9b27798a923ca290ba5d23368e3a820a6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n       SchedulerApp application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n-          reservedContainer.getContainer().getId().getAppAttemptId())) {\n+      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n+          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n             \" for application \" + application.getApplicationId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n          reservedContainer.getContainer().getId().getAppAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,34 @@\n+  public synchronized void reserveResource(\n+      SchedulerApp application, Priority priority, \n+      RMContainer reservedContainer) {\n+    // Check if it\u0027s already reserved\n+    if (this.reservedContainer !\u003d null) {\n+      // Sanity check\n+      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n+        throw new IllegalStateException(\"Trying to reserve\" +\n+            \" container \" + reservedContainer +\n+            \" on node \" + reservedContainer.getReservedNode() + \n+            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n+            \" on node \" + this.reservedContainer.getReservedNode());\n+      }\n+      \n+      // Cannot reserve more than one application on a given node!\n+      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n+          reservedContainer.getContainer().getId().getAppAttemptId())) {\n+        throw new IllegalStateException(\"Trying to reserve\" +\n+        \t\t\" container \" + reservedContainer + \n+            \" for application \" + application.getApplicationId() + \n+            \" when currently\" +\n+            \" reserved container \" + this.reservedContainer +\n+            \" on node \" + this);\n+      }\n+\n+      LOG.info(\"Updated reserved container \" + \n+          reservedContainer.getContainer().getId() + \" on node \" + \n+          this + \" for application \" + application);\n+    } else {\n+      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n+          \" on node \" + this + \" for application \" + application);\n+    }\n+    this.reservedContainer \u003d reservedContainer;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n          reservedContainer.getContainer().getId().getAppAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
    }
  }
}