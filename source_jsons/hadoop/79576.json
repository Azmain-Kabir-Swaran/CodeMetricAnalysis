{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalDirAllocator.java",
  "functionName": "getLocalPathForWrite",
  "functionId": "getLocalPathForWrite___pathStr-String__size-long__conf-Configuration__checkWrite-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
  "functionStartLine": 391,
  "functionEndLine": 464,
  "numCommitsSeen": 27,
  "timeTaken": 2491,
  "changeHistory": [
    "d36f6b9e93e4c30d24d0e837cb00bd24ffa8f274",
    "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b",
    "bbd6a3277678a60d472e76a207f25a916220946c",
    "288506022ff64e6413da682659459504adfbf1a8",
    "c2e1756d7a604b64a3fbeba955754a8f844af70a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "b12d765467fd9a4447c473d613d92883fb09c76b",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "d36f6b9e93e4c30d24d0e837cb00bd24ffa8f274": "Ybodychange",
    "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bbd6a3277678a60d472e76a207f25a916220946c": "Ybodychange",
    "288506022ff64e6413da682659459504adfbf1a8": "Ybodychange",
    "c2e1756d7a604b64a3fbeba955754a8f844af70a": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "b12d765467fd9a4447c473d613d92883fb09c76b": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d36f6b9e93e4c30d24d0e837cb00bd24ffa8f274": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15548: Randomize local dirs. Contributed by Jim Brennan.\n",
      "commitDate": "29/06/18 11:18 AM",
      "commitName": "d36f6b9e93e4c30d24d0e837cb00bd24ffa8f274",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 346.57,
      "commitsBetweenForRepo": 3156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,74 @@\n     public Path getLocalPathForWrite(String pathStr, long size,\n         Configuration conf, boolean checkWrite) throws IOException {\n       Context ctx \u003d confChanged(conf);\n       int numDirs \u003d ctx.localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n           availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         if (totalAvailable \u003d\u003d 0){\n           throw new DiskErrorException(\"No space available in any of the local directories.\");\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           ctx.dirNumLastAccessed.set(dir);\n           returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n-        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed();\n+        // Start linear search with random increment if possible\n+        int randomInc \u003d 1;\n+        if (numDirs \u003e 2) {\n+          randomInc +\u003d dirIndexRandomizer.nextInt(numDirs - 1);\n+        }\n+        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed(randomInc);\n         while (numDirsSearched \u003c numDirs) {\n           long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n           if (capacity \u003e size) {\n             returnPath \u003d\n                 createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n             if (returnPath !\u003d null) {\n               ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n               break;\n             }\n           }\n           dirNum++;\n           dirNum \u003d dirNum % numDirs;\n           numDirsSearched++;\n         }\n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Path getLocalPathForWrite(String pathStr, long size,\n        Configuration conf, boolean checkWrite) throws IOException {\n      Context ctx \u003d confChanged(conf);\n      int numDirs \u003d ctx.localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n          availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        if (totalAvailable \u003d\u003d 0){\n          throw new DiskErrorException(\"No space available in any of the local directories.\");\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          ctx.dirNumLastAccessed.set(dir);\n          returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        // Start linear search with random increment if possible\n        int randomInc \u003d 1;\n        if (numDirs \u003e 2) {\n          randomInc +\u003d dirIndexRandomizer.nextInt(numDirs - 1);\n        }\n        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed(randomInc);\n        while (numDirsSearched \u003c numDirs) {\n          long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d\n                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n            if (returnPath !\u003d null) {\n              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n              break;\n            }\n          }\n          dirNum++;\n          dirNum \u003d dirNum % numDirs;\n          numDirsSearched++;\n        }\n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {}
    },
    "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10048. LocalDirAllocator should avoid holding locks while accessing the filesystem. Contributed by Jason Lowe.\n",
      "commitDate": "07/06/16 9:18 AM",
      "commitName": "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10048. LocalDirAllocator should avoid holding locks while accessing the filesystem. Contributed by Jason Lowe.\n",
          "commitDate": "07/06/16 9:18 AM",
          "commitName": "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b",
          "commitAuthor": "Junping Du",
          "commitDateOld": "01/10/15 11:56 AM",
          "commitNameOld": "fd026f535cc09e99a7d4d5d2a8c13eabe8865315",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 249.89,
          "commitsBetweenForRepo": 1655,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,69 @@\n-    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n+    public Path getLocalPathForWrite(String pathStr, long size,\n         Configuration conf, boolean checkWrite) throws IOException {\n-      confChanged(conf);\n-      int numDirs \u003d localDirs.length;\n+      Context ctx \u003d confChanged(conf);\n+      int numDirs \u003d ctx.localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n-        long[] availableOnDisk \u003d new long[dirDF.length];\n+        long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n-        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n-          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n+        for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n+          availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         if (totalAvailable \u003d\u003d 0){\n           throw new DiskErrorException(\"No space available in any of the local directories.\");\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n-          dirNumLastAccessed \u003d dir;\n-          returnPath \u003d createPath(pathStr, checkWrite);\n+          ctx.dirNumLastAccessed.set(dir);\n+          returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n-        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n-          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n+        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed();\n+        while (numDirsSearched \u003c numDirs) {\n+          long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n           if (capacity \u003e size) {\n-            returnPath \u003d createPath(pathStr, checkWrite);\n+            returnPath \u003d\n+                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n+            if (returnPath !\u003d null) {\n+              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n+              break;\n+            }\n           }\n-          dirNumLastAccessed++;\n-          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n+          dirNum++;\n+          dirNum \u003d dirNum % numDirs;\n           numDirsSearched++;\n-        } \n+        }\n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public Path getLocalPathForWrite(String pathStr, long size,\n        Configuration conf, boolean checkWrite) throws IOException {\n      Context ctx \u003d confChanged(conf);\n      int numDirs \u003d ctx.localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n          availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        if (totalAvailable \u003d\u003d 0){\n          throw new DiskErrorException(\"No space available in any of the local directories.\");\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          ctx.dirNumLastAccessed.set(dir);\n          returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed();\n        while (numDirsSearched \u003c numDirs) {\n          long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d\n                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n            if (returnPath !\u003d null) {\n              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n              break;\n            }\n          }\n          dirNum++;\n          dirNum \u003d dirNum % numDirs;\n          numDirsSearched++;\n        }\n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10048. LocalDirAllocator should avoid holding locks while accessing the filesystem. Contributed by Jason Lowe.\n",
          "commitDate": "07/06/16 9:18 AM",
          "commitName": "c14c1b298e29e799f7c8f15ff24d7eba6e0cd39b",
          "commitAuthor": "Junping Du",
          "commitDateOld": "01/10/15 11:56 AM",
          "commitNameOld": "fd026f535cc09e99a7d4d5d2a8c13eabe8865315",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 249.89,
          "commitsBetweenForRepo": 1655,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,69 @@\n-    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n+    public Path getLocalPathForWrite(String pathStr, long size,\n         Configuration conf, boolean checkWrite) throws IOException {\n-      confChanged(conf);\n-      int numDirs \u003d localDirs.length;\n+      Context ctx \u003d confChanged(conf);\n+      int numDirs \u003d ctx.localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n-        long[] availableOnDisk \u003d new long[dirDF.length];\n+        long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n-        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n-          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n+        for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n+          availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         if (totalAvailable \u003d\u003d 0){\n           throw new DiskErrorException(\"No space available in any of the local directories.\");\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n-          dirNumLastAccessed \u003d dir;\n-          returnPath \u003d createPath(pathStr, checkWrite);\n+          ctx.dirNumLastAccessed.set(dir);\n+          returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n-        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n-          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n+        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed();\n+        while (numDirsSearched \u003c numDirs) {\n+          long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n           if (capacity \u003e size) {\n-            returnPath \u003d createPath(pathStr, checkWrite);\n+            returnPath \u003d\n+                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n+            if (returnPath !\u003d null) {\n+              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n+              break;\n+            }\n           }\n-          dirNumLastAccessed++;\n-          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n+          dirNum++;\n+          dirNum \u003d dirNum % numDirs;\n           numDirsSearched++;\n-        } \n+        }\n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public Path getLocalPathForWrite(String pathStr, long size,\n        Configuration conf, boolean checkWrite) throws IOException {\n      Context ctx \u003d confChanged(conf);\n      int numDirs \u003d ctx.localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[ctx.dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c ctx.dirDF.length; ++i) {\n          availableOnDisk[i] \u003d ctx.dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        if (totalAvailable \u003d\u003d 0){\n          throw new DiskErrorException(\"No space available in any of the local directories.\");\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          ctx.dirNumLastAccessed.set(dir);\n          returnPath \u003d createPath(ctx.localDirs[dir], pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        int dirNum \u003d ctx.getAndIncrDirNumLastAccessed();\n        while (numDirsSearched \u003c numDirs) {\n          long capacity \u003d ctx.dirDF[dirNum].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d\n                createPath(ctx.localDirs[dirNum], pathStr, checkWrite);\n            if (returnPath !\u003d null) {\n              ctx.getAndIncrDirNumLastAccessed(numDirsSearched);\n              break;\n            }\n          }\n          dirNum++;\n          dirNum \u003d dirNum % numDirs;\n          numDirsSearched++;\n        }\n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "bbd6a3277678a60d472e76a207f25a916220946c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10482. Fix various findbugs warnings in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "10/12/14 12:44 PM",
      "commitName": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "12/12/13 2:55 PM",
      "commitNameOld": "288506022ff64e6413da682659459504adfbf1a8",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 362.91,
      "commitsBetweenForRepo": 2852,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n     public synchronized Path getLocalPathForWrite(String pathStr, long size, \n         Configuration conf, boolean checkWrite) throws IOException {\n       confChanged(conf);\n       int numDirs \u003d localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c dirDF.length; ++i) {\n           availableOnDisk[i] \u003d dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         if (totalAvailable \u003d\u003d 0){\n           throw new DiskErrorException(\"No space available in any of the local directories.\");\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n-          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n+          long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           dirNumLastAccessed \u003d dir;\n           returnPath \u003d createPath(pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n           if (capacity \u003e size) {\n             returnPath \u003d createPath(pathStr, checkWrite);\n           }\n           dirNumLastAccessed++;\n           dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n           numDirsSearched++;\n         } \n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf, boolean checkWrite) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        if (totalAvailable \u003d\u003d 0){\n          throw new DiskErrorException(\"No space available in any of the local directories.\");\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d (r.nextLong() \u003e\u003e\u003e 1) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr, checkWrite);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {}
    },
    "288506022ff64e6413da682659459504adfbf1a8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8753. LocalDirAllocator throws ArithmeticException: divide by zero when there is no available space on configured local dir. Contributed by Benoy Antony.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550570 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 2:55 PM",
      "commitName": "288506022ff64e6413da682659459504adfbf1a8",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "26/11/12 10:47 AM",
      "commitNameOld": "68bc61ab5cb29a34cd98de69544c8f151c1dd232",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 381.17,
      "commitsBetweenForRepo": 2277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n     public synchronized Path getLocalPathForWrite(String pathStr, long size, \n         Configuration conf, boolean checkWrite) throws IOException {\n       confChanged(conf);\n       int numDirs \u003d localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c dirDF.length; ++i) {\n           availableOnDisk[i] \u003d dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n+        if (totalAvailable \u003d\u003d 0){\n+          throw new DiskErrorException(\"No space available in any of the local directories.\");\n+        }\n+\n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           dirNumLastAccessed \u003d dir;\n           returnPath \u003d createPath(pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n           if (capacity \u003e size) {\n             returnPath \u003d createPath(pathStr, checkWrite);\n           }\n           dirNumLastAccessed++;\n           dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n           numDirsSearched++;\n         } \n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf, boolean checkWrite) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        if (totalAvailable \u003d\u003d 0){\n          throw new DiskErrorException(\"No space available in any of the local directories.\");\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr, checkWrite);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {}
    },
    "c2e1756d7a604b64a3fbeba955754a8f844af70a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-7580. Add a version of getLocalPathForWrite to LocalDirAllocator which doesn\u0027t create dirs. Contributed by Chris Douglas \u0026 Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 6:36 PM",
      "commitName": "c2e1756d7a604b64a3fbeba955754a8f844af70a",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7580. Add a version of getLocalPathForWrite to LocalDirAllocator which doesn\u0027t create dirs. Contributed by Chris Douglas \u0026 Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/09/11 6:36 PM",
          "commitName": "c2e1756d7a604b64a3fbeba955754a8f844af70a",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 12.06,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n     public synchronized Path getLocalPathForWrite(String pathStr, long size, \n-        Configuration conf) throws IOException {\n+        Configuration conf, boolean checkWrite) throws IOException {\n       confChanged(conf);\n       int numDirs \u003d localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c dirDF.length; ++i) {\n           availableOnDisk[i] \u003d dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           dirNumLastAccessed \u003d dir;\n-          returnPath \u003d createPath(pathStr);\n+          returnPath \u003d createPath(pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n           if (capacity \u003e size) {\n-            returnPath \u003d createPath(pathStr);\n+            returnPath \u003d createPath(pathStr, checkWrite);\n           }\n           dirNumLastAccessed++;\n           dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n           numDirsSearched++;\n         } \n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf, boolean checkWrite) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr, checkWrite);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
          "extendedDetails": {
            "oldValue": "[pathStr-String, size-long, conf-Configuration]",
            "newValue": "[pathStr-String, size-long, conf-Configuration, checkWrite-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7580. Add a version of getLocalPathForWrite to LocalDirAllocator which doesn\u0027t create dirs. Contributed by Chris Douglas \u0026 Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165473 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/09/11 6:36 PM",
          "commitName": "c2e1756d7a604b64a3fbeba955754a8f844af70a",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 12.06,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n     public synchronized Path getLocalPathForWrite(String pathStr, long size, \n-        Configuration conf) throws IOException {\n+        Configuration conf, boolean checkWrite) throws IOException {\n       confChanged(conf);\n       int numDirs \u003d localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n       if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c dirDF.length; ++i) {\n           availableOnDisk[i] \u003d dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           dirNumLastAccessed \u003d dir;\n-          returnPath \u003d createPath(pathStr);\n+          returnPath \u003d createPath(pathStr, checkWrite);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n           if (capacity \u003e size) {\n-            returnPath \u003d createPath(pathStr);\n+            returnPath \u003d createPath(pathStr, checkWrite);\n           }\n           dirNumLastAccessed++;\n           dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n           numDirsSearched++;\n         } \n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf, boolean checkWrite) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr, checkWrite);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr, checkWrite);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/LocalDirAllocator.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/LocalDirAllocator.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/LocalDirAllocator.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/LocalDirAllocator.java"
      }
    },
    "b12d765467fd9a4447c473d613d92883fb09c76b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-4687. Merge -r 784663:785643 from trunk to branch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@785794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/09 1:55 PM",
      "commitName": "b12d765467fd9a4447c473d613d92883fb09c76b",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 29.69,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n     public synchronized Path getLocalPathForWrite(String pathStr, long size, \n         Configuration conf) throws IOException {\n       confChanged(conf);\n       int numDirs \u003d localDirs.length;\n       int numDirsSearched \u003d 0;\n       //remove the leading slash from the path (to make sure that the uri\n       //resolution results in a valid path on the dir being checked)\n       if (pathStr.startsWith(\"/\")) {\n         pathStr \u003d pathStr.substring(1);\n       }\n       Path returnPath \u003d null;\n       \n-      if(size \u003d\u003d -1) {  //do roulette selection: pick dir with probability \n+      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                     //proportional to available size\n         long[] availableOnDisk \u003d new long[dirDF.length];\n         long totalAvailable \u003d 0;\n         \n             //build the \"roulette wheel\"\n         for(int i \u003d0; i \u003c dirDF.length; ++i) {\n           availableOnDisk[i] \u003d dirDF[i].getAvailable();\n           totalAvailable +\u003d availableOnDisk[i];\n         }\n \n         // Keep rolling the wheel till we get a valid path\n         Random r \u003d new java.util.Random();\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n           int dir \u003d 0;\n           while (randomPosition \u003e availableOnDisk[dir]) {\n             randomPosition -\u003d availableOnDisk[dir];\n             dir++;\n           }\n           dirNumLastAccessed \u003d dir;\n           returnPath \u003d createPath(pathStr);\n           if (returnPath \u003d\u003d null) {\n             totalAvailable -\u003d availableOnDisk[dir];\n             availableOnDisk[dir] \u003d 0; // skip this disk\n             numDirsSearched++;\n           }\n         }\n       } else {\n         while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n           long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n           if (capacity \u003e size) {\n             returnPath \u003d createPath(pathStr);\n           }\n           dirNumLastAccessed++;\n           dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n           numDirsSearched++;\n         } \n       }\n       if (returnPath !\u003d null) {\n         return returnPath;\n       }\n       \n       //no path found\n       throw new DiskErrorException(\"Could not find any valid local \" +\n           \"directory for \" + pathStr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d SIZE_UNKNOWN) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "src/java/org/apache/hadoop/fs/LocalDirAllocator.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,59 @@\n+    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n+        Configuration conf) throws IOException {\n+      confChanged(conf);\n+      int numDirs \u003d localDirs.length;\n+      int numDirsSearched \u003d 0;\n+      //remove the leading slash from the path (to make sure that the uri\n+      //resolution results in a valid path on the dir being checked)\n+      if (pathStr.startsWith(\"/\")) {\n+        pathStr \u003d pathStr.substring(1);\n+      }\n+      Path returnPath \u003d null;\n+      \n+      if(size \u003d\u003d -1) {  //do roulette selection: pick dir with probability \n+                    //proportional to available size\n+        long[] availableOnDisk \u003d new long[dirDF.length];\n+        long totalAvailable \u003d 0;\n+        \n+            //build the \"roulette wheel\"\n+        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n+          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n+          totalAvailable +\u003d availableOnDisk[i];\n+        }\n+\n+        // Keep rolling the wheel till we get a valid path\n+        Random r \u003d new java.util.Random();\n+        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n+          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n+          int dir \u003d 0;\n+          while (randomPosition \u003e availableOnDisk[dir]) {\n+            randomPosition -\u003d availableOnDisk[dir];\n+            dir++;\n+          }\n+          dirNumLastAccessed \u003d dir;\n+          returnPath \u003d createPath(pathStr);\n+          if (returnPath \u003d\u003d null) {\n+            totalAvailable -\u003d availableOnDisk[dir];\n+            availableOnDisk[dir] \u003d 0; // skip this disk\n+            numDirsSearched++;\n+          }\n+        }\n+      } else {\n+        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n+          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n+          if (capacity \u003e size) {\n+            returnPath \u003d createPath(pathStr);\n+          }\n+          dirNumLastAccessed++;\n+          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n+          numDirsSearched++;\n+        } \n+      }\n+      if (returnPath !\u003d null) {\n+        return returnPath;\n+      }\n+      \n+      //no path found\n+      throw new DiskErrorException(\"Could not find any valid local \" +\n+          \"directory for \" + pathStr);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized Path getLocalPathForWrite(String pathStr, long size, \n        Configuration conf) throws IOException {\n      confChanged(conf);\n      int numDirs \u003d localDirs.length;\n      int numDirsSearched \u003d 0;\n      //remove the leading slash from the path (to make sure that the uri\n      //resolution results in a valid path on the dir being checked)\n      if (pathStr.startsWith(\"/\")) {\n        pathStr \u003d pathStr.substring(1);\n      }\n      Path returnPath \u003d null;\n      \n      if(size \u003d\u003d -1) {  //do roulette selection: pick dir with probability \n                    //proportional to available size\n        long[] availableOnDisk \u003d new long[dirDF.length];\n        long totalAvailable \u003d 0;\n        \n            //build the \"roulette wheel\"\n        for(int i \u003d0; i \u003c dirDF.length; ++i) {\n          availableOnDisk[i] \u003d dirDF[i].getAvailable();\n          totalAvailable +\u003d availableOnDisk[i];\n        }\n\n        // Keep rolling the wheel till we get a valid path\n        Random r \u003d new java.util.Random();\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long randomPosition \u003d Math.abs(r.nextLong()) % totalAvailable;\n          int dir \u003d 0;\n          while (randomPosition \u003e availableOnDisk[dir]) {\n            randomPosition -\u003d availableOnDisk[dir];\n            dir++;\n          }\n          dirNumLastAccessed \u003d dir;\n          returnPath \u003d createPath(pathStr);\n          if (returnPath \u003d\u003d null) {\n            totalAvailable -\u003d availableOnDisk[dir];\n            availableOnDisk[dir] \u003d 0; // skip this disk\n            numDirsSearched++;\n          }\n        }\n      } else {\n        while (numDirsSearched \u003c numDirs \u0026\u0026 returnPath \u003d\u003d null) {\n          long capacity \u003d dirDF[dirNumLastAccessed].getAvailable();\n          if (capacity \u003e size) {\n            returnPath \u003d createPath(pathStr);\n          }\n          dirNumLastAccessed++;\n          dirNumLastAccessed \u003d dirNumLastAccessed % numDirs; \n          numDirsSearched++;\n        } \n      }\n      if (returnPath !\u003d null) {\n        return returnPath;\n      }\n      \n      //no path found\n      throw new DiskErrorException(\"Could not find any valid local \" +\n          \"directory for \" + pathStr);\n    }",
      "path": "src/java/org/apache/hadoop/fs/LocalDirAllocator.java"
    }
  }
}