{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxServices.java",
  "functionName": "loadServices",
  "functionId": "loadServices___services-AuxServiceRecords__conf-Configuration__startServices-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
  "functionStartLine": 628,
  "functionEndLine": 674,
  "numCommitsSeen": 28,
  "timeTaken": 1561,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "2fa9389c2e1ca4853a61533686941c685c889dbe"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "2fa9389c2e1ca4853a61533686941c685c889dbe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/01/19 4:05 PM",
      "commitNameOld": "1ab69a9543df555b878951e66e3da13485e7f6d5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 48.97,
      "commitsBetweenForRepo": 401,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n   private synchronized void loadServices(AuxServiceRecords services,\n       Configuration conf, boolean startServices) throws IOException {\n     if (services \u003d\u003d null) {\n       // read did not occur or no changes detected\n       return;\n     }\n     Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n     boolean foundChanges \u003d false;\n     if (services.getServices() !\u003d null) {\n       for (AuxServiceRecord service : services.getServices()) {\n         AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n             .getName());\n         loadedAuxServices.add(service.getName());\n         if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n-          }\n+          LOG.debug(\"Auxiliary service already loaded: {}\", service.getName());\n           continue;\n         }\n         foundChanges \u003d true;\n         try {\n           // stop aux service\n           maybeRemoveAuxService(service.getName());\n           // init aux service\n           AuxiliaryService s \u003d initAuxService(service, conf, false);\n           if (startServices) {\n             // start aux service\n             startAuxService(service.getName(), s, service);\n           }\n           // add aux service to serviceMap\n           addService(service.getName(), s, service);\n         } catch (IOException e) {\n           LOG.error(\"Failed to load auxiliary service \" + service.getName());\n         }\n       }\n     }\n \n     // remove aux services that do not appear in the new list\n     Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n     servicesToRemove.removeAll(loadedAuxServices);\n     for (String sName : servicesToRemove) {\n       foundChanges \u003d true;\n       maybeRemoveAuxService(sName);\n     }\n \n     if (!foundChanges) {\n       LOG.info(\"No auxiliary services changes detected\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadServices(AuxServiceRecords services,\n      Configuration conf, boolean startServices) throws IOException {\n    if (services \u003d\u003d null) {\n      // read did not occur or no changes detected\n      return;\n    }\n    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n    boolean foundChanges \u003d false;\n    if (services.getServices() !\u003d null) {\n      for (AuxServiceRecord service : services.getServices()) {\n        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n            .getName());\n        loadedAuxServices.add(service.getName());\n        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n          LOG.debug(\"Auxiliary service already loaded: {}\", service.getName());\n          continue;\n        }\n        foundChanges \u003d true;\n        try {\n          // stop aux service\n          maybeRemoveAuxService(service.getName());\n          // init aux service\n          AuxiliaryService s \u003d initAuxService(service, conf, false);\n          if (startServices) {\n            // start aux service\n            startAuxService(service.getName(), s, service);\n          }\n          // add aux service to serviceMap\n          addService(service.getName(), s, service);\n        } catch (IOException e) {\n          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n        }\n      }\n    }\n\n    // remove aux services that do not appear in the new list\n    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n    servicesToRemove.removeAll(loadedAuxServices);\n    for (String sName : servicesToRemove) {\n      foundChanges \u003d true;\n      maybeRemoveAuxService(sName);\n    }\n\n    if (!foundChanges) {\n      LOG.info(\"No auxiliary services changes detected\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
      "extendedDetails": {}
    },
    "2fa9389c2e1ca4853a61533686941c685c889dbe": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9146.  Added REST API to configure auxiliary service.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "22/01/19 3:24 PM",
      "commitName": "2fa9389c2e1ca4853a61533686941c685c889dbe",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,49 @@\n+  private synchronized void loadServices(AuxServiceRecords services,\n+      Configuration conf, boolean startServices) throws IOException {\n+    if (services \u003d\u003d null) {\n+      // read did not occur or no changes detected\n+      return;\n+    }\n+    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n+    boolean foundChanges \u003d false;\n+    if (services.getServices() !\u003d null) {\n+      for (AuxServiceRecord service : services.getServices()) {\n+        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n+            .getName());\n+        loadedAuxServices.add(service.getName());\n+        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n+          }\n+          continue;\n+        }\n+        foundChanges \u003d true;\n+        try {\n+          // stop aux service\n+          maybeRemoveAuxService(service.getName());\n+          // init aux service\n+          AuxiliaryService s \u003d initAuxService(service, conf, false);\n+          if (startServices) {\n+            // start aux service\n+            startAuxService(service.getName(), s, service);\n+          }\n+          // add aux service to serviceMap\n+          addService(service.getName(), s, service);\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n+        }\n+      }\n+    }\n+\n+    // remove aux services that do not appear in the new list\n+    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n+    servicesToRemove.removeAll(loadedAuxServices);\n+    for (String sName : servicesToRemove) {\n+      foundChanges \u003d true;\n+      maybeRemoveAuxService(sName);\n+    }\n+\n+    if (!foundChanges) {\n+      LOG.info(\"No auxiliary services changes detected\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void loadServices(AuxServiceRecords services,\n      Configuration conf, boolean startServices) throws IOException {\n    if (services \u003d\u003d null) {\n      // read did not occur or no changes detected\n      return;\n    }\n    Set\u003cString\u003e loadedAuxServices \u003d new HashSet\u003c\u003e();\n    boolean foundChanges \u003d false;\n    if (services.getServices() !\u003d null) {\n      for (AuxServiceRecord service : services.getServices()) {\n        AuxServiceRecord existingService \u003d serviceRecordMap.get(service\n            .getName());\n        loadedAuxServices.add(service.getName());\n        if (existingService !\u003d null \u0026\u0026 existingService.equals(service)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Auxiliary service already loaded: \" + service.getName());\n          }\n          continue;\n        }\n        foundChanges \u003d true;\n        try {\n          // stop aux service\n          maybeRemoveAuxService(service.getName());\n          // init aux service\n          AuxiliaryService s \u003d initAuxService(service, conf, false);\n          if (startServices) {\n            // start aux service\n            startAuxService(service.getName(), s, service);\n          }\n          // add aux service to serviceMap\n          addService(service.getName(), s, service);\n        } catch (IOException e) {\n          LOG.error(\"Failed to load auxiliary service \" + service.getName());\n        }\n      }\n    }\n\n    // remove aux services that do not appear in the new list\n    Set\u003cString\u003e servicesToRemove \u003d new HashSet\u003c\u003e(serviceMap.keySet());\n    servicesToRemove.removeAll(loadedAuxServices);\n    for (String sName : servicesToRemove) {\n      foundChanges \u003d true;\n      maybeRemoveAuxService(sName);\n    }\n\n    if (!foundChanges) {\n      LOG.info(\"No auxiliary services changes detected\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java"
    }
  }
}