{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "stopContainerInternal",
  "functionId": "stopContainerInternal___containerID-ContainerId__remoteUser-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1420,
  "functionEndLine": 1446,
  "numCommitsSeen": 389,
  "timeTaken": 13505,
  "changeHistory": [
    "32fe351bb654e684f127f47ab808c497e0d3f258",
    "7114baddb627628a54cdab77f68504332a5a0e28",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d",
    "d284e187b8db43056236032ebc2114ee462c27f6",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b",
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "2692675fc3b5046d2ec88542c30203c87e135b70",
    "ca8024673178fa1c80224b390dfba932921693d9",
    "9eb53b9c841233538a51e4e854b261536c0b85d4",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "32fe351bb654e684f127f47ab808c497e0d3f258": "Ymultichange(Yparameterchange,Ybodychange)",
    "7114baddb627628a54cdab77f68504332a5a0e28": "Ybodychange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ybodychange",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "d284e187b8db43056236032ebc2114ee462c27f6": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd": "Ybodychange",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": "Ybodychange",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "2692675fc3b5046d2ec88542c30203c87e135b70": "Ybodychange",
    "ca8024673178fa1c80224b390dfba932921693d9": "Ybodychange",
    "9eb53b9c841233538a51e4e854b261536c0b85d4": "Yexceptionschange",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "32fe351bb654e684f127f47ab808c497e0d3f258": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
      "commitDate": "18/10/18 8:28 AM",
      "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
          "commitDate": "18/10/18 8:28 AM",
          "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 21.86,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  protected void stopContainerInternal(ContainerId containerID)\n+  protected void stopContainerInternal(ContainerId containerID,\n+      String remoteUser)\n       throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       if (container.isRecovering()) {\n         throw new NMNotYetReadyException(\"Container \" + containerIDStr\n             + \" is recovering, try later\");\n       }\n       context.getNMStateStore().storeContainerKilled(containerID);\n       container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n           \"Container killed by the ApplicationMaster.\");\n \n-      NMAuditLogger.logSuccess(container.getUser(),    \n-        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n-          .getApplicationAttemptId().getApplicationId(), containerID);\n+      NMAuditLogger.logSuccess(remoteUser, AuditConstants.STOP_CONTAINER,\n+          \"ContainerManageImpl\",\n+          containerID.getApplicationAttemptId().getApplicationId(),\n+          containerID);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void stopContainerInternal(ContainerId containerID,\n      String remoteUser)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      if (container.isRecovering()) {\n        throw new NMNotYetReadyException(\"Container \" + containerIDStr\n            + \" is recovering, try later\");\n      }\n      context.getNMStateStore().storeContainerKilled(containerID);\n      container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n          \"Container killed by the ApplicationMaster.\");\n\n      NMAuditLogger.logSuccess(remoteUser, AuditConstants.STOP_CONTAINER,\n          \"ContainerManageImpl\",\n          containerID.getApplicationAttemptId().getApplicationId(),\n          containerID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerID-ContainerId]",
            "newValue": "[containerID-ContainerId, remoteUser-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
          "commitDate": "18/10/18 8:28 AM",
          "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 21.86,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  protected void stopContainerInternal(ContainerId containerID)\n+  protected void stopContainerInternal(ContainerId containerID,\n+      String remoteUser)\n       throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       if (container.isRecovering()) {\n         throw new NMNotYetReadyException(\"Container \" + containerIDStr\n             + \" is recovering, try later\");\n       }\n       context.getNMStateStore().storeContainerKilled(containerID);\n       container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n           \"Container killed by the ApplicationMaster.\");\n \n-      NMAuditLogger.logSuccess(container.getUser(),    \n-        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n-          .getApplicationAttemptId().getApplicationId(), containerID);\n+      NMAuditLogger.logSuccess(remoteUser, AuditConstants.STOP_CONTAINER,\n+          \"ContainerManageImpl\",\n+          containerID.getApplicationAttemptId().getApplicationId(),\n+          containerID);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void stopContainerInternal(ContainerId containerID,\n      String remoteUser)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      if (container.isRecovering()) {\n        throw new NMNotYetReadyException(\"Container \" + containerIDStr\n            + \" is recovering, try later\");\n      }\n      context.getNMStateStore().storeContainerKilled(containerID);\n      container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n          \"Container killed by the ApplicationMaster.\");\n\n      NMAuditLogger.logSuccess(remoteUser, AuditConstants.STOP_CONTAINER,\n          \"ContainerManageImpl\",\n          containerID.getApplicationAttemptId().getApplicationId(),\n          containerID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7114baddb627628a54cdab77f68504332a5a0e28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4051. ContainerKillEvent lost when container is still recovering and application finishes. Contributed by sandflee\n",
      "commitDate": "16/03/17 7:30 AM",
      "commitName": "7114baddb627628a54cdab77f68504332a5a0e28",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/01/17 8:17 AM",
      "commitNameOld": "a33ce45e35ce77dbf297df618aec3106eafda68c",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 50.93,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   protected void stopContainerInternal(ContainerId containerID)\n       throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n+      if (container.isRecovering()) {\n+        throw new NMNotYetReadyException(\"Container \" + containerIDStr\n+            + \" is recovering, try later\");\n+      }\n       context.getNMStateStore().storeContainerKilled(containerID);\n       container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n           \"Container killed by the ApplicationMaster.\");\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void stopContainerInternal(ContainerId containerID)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      if (container.isRecovering()) {\n        throw new NMNotYetReadyException(\"Container \" + containerIDStr\n            + \" is recovering, try later\");\n      }\n      context.getNMStateStore().storeContainerKilled(containerID);\n      container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n          \"Container killed by the ApplicationMaster.\");\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/11/16 4:12 PM",
      "commitNameOld": "de3a5f8d08f64d0c2021a84b40e63e716da2321c",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 5.66,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   protected void stopContainerInternal(ContainerId containerID)\n       throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       context.getNMStateStore().storeContainerKilled(containerID);\n-      dispatcher.getEventHandler().handle(\n-        new ContainerKillEvent(containerID,\n-            ContainerExitStatus.KILLED_BY_APPMASTER,\n-            \"Container killed by the ApplicationMaster.\"));\n+      container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n+          \"Container killed by the ApplicationMaster.\");\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void stopContainerInternal(ContainerId containerID)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      container.sendKillEvent(ContainerExitStatus.KILLED_BY_APPMASTER,\n          \"Container killed by the ApplicationMaster.\");\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
          "commitDate": "20/04/16 9:55 AM",
          "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "14/04/16 12:17 PM",
          "commitNameOld": "3150ae8108a1fc40a67926be6254824c1e37cb38",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 5.9,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerId containerID) throws YarnException, IOException {\n+  protected void stopContainerInternal(ContainerId containerID)\n+      throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true,\n-      nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void stopContainerInternal(ContainerId containerID)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[nmTokenIdentifier-NMTokenIdentifier, containerID-ContainerId]",
            "newValue": "[containerID-ContainerId]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
          "commitDate": "20/04/16 9:55 AM",
          "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "14/04/16 12:17 PM",
          "commitNameOld": "3150ae8108a1fc40a67926be6254824c1e37cb38",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 5.9,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerId containerID) throws YarnException, IOException {\n+  protected void stopContainerInternal(ContainerId containerID)\n+      throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true,\n-      nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void stopContainerInternal(ContainerId containerID)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
          "commitDate": "20/04/16 9:55 AM",
          "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "14/04/16 12:17 PM",
          "commitNameOld": "3150ae8108a1fc40a67926be6254824c1e37cb38",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 5.9,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerId containerID) throws YarnException, IOException {\n+  protected void stopContainerInternal(ContainerId containerID)\n+      throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true,\n-      nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void stopContainerInternal(ContainerId containerID)\n      throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "d284e187b8db43056236032ebc2114ee462c27f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2046. Out of band heartbeats are sent only on container kill and possibly too early. Contributed by Ming Ma\n",
      "commitDate": "23/02/16 12:49 PM",
      "commitName": "d284e187b8db43056236032ebc2114ee462c27f6",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "01/02/16 7:55 PM",
      "commitNameOld": "1cd55e0c171f7c4dec6f843931285557d59cd5ea",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 21.7,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,25 @@\n   private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n       ContainerId containerID) throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n     authorizeGetAndStopContainerRequest(containerID, container, true,\n       nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n-\n-      // TODO: Move this code to appropriate place once kill_container is\n-      // implemented.\n-      nodeStatusUpdater.sendOutofBandHeartBeat();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/08/14 3:56 AM",
          "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthor": "Junping Du",
          "commitDateOld": "04/08/14 6:25 AM",
          "commitNameOld": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 7.9,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerId containerID) throws YarnException {\n+      ContainerId containerID) throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n     authorizeGetAndStopContainerRequest(containerID, container, true,\n       nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n+      context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n \n       // TODO: Move this code to appropriate place once kill_container is\n       // implemented.\n       nodeStatusUpdater.sendOutofBandHeartBeat();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n\n      // TODO: Move this code to appropriate place once kill_container is\n      // implemented.\n      nodeStatusUpdater.sendOutofBandHeartBeat();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[YarnException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/08/14 3:56 AM",
          "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthor": "Junping Du",
          "commitDateOld": "04/08/14 6:25 AM",
          "commitNameOld": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 7.9,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n-      ContainerId containerID) throws YarnException {\n+      ContainerId containerID) throws YarnException, IOException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n     authorizeGetAndStopContainerRequest(containerID, container, true,\n       nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n+      context.getNMStateStore().storeContainerKilled(containerID);\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             ContainerExitStatus.KILLED_BY_APPMASTER,\n             \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n \n       // TODO: Move this code to appropriate place once kill_container is\n       // implemented.\n       nodeStatusUpdater.sendOutofBandHeartBeat();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException, IOException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      context.getNMStateStore().storeContainerKilled(containerID);\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n\n      // TODO: Move this code to appropriate place once kill_container is\n      // implemented.\n      nodeStatusUpdater.sendOutofBandHeartBeat();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2091. Add more values to ContainerExitStatus and pass it from NM to RM and then to app masters (Tsuyoshi OZAWA via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 1:08 PM",
      "commitName": "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "30/05/14 8:37 AM",
      "commitNameOld": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 11.19,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n       ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n     authorizeGetAndStopContainerRequest(containerID, container, true,\n       nmTokenIdentifier);\n \n     if (container \u003d\u003d null) {\n       if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n         throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n           + \" is not handled by this NodeManager\");\n       }\n     } else {\n       dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n-          \"Container killed by the ApplicationMaster.\"));\n+            ContainerExitStatus.KILLED_BY_APPMASTER,\n+            \"Container killed by the ApplicationMaster.\"));\n \n       NMAuditLogger.logSuccess(container.getUser(),    \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n           .getApplicationAttemptId().getApplicationId(), containerID);\n \n       // TODO: Move this code to appropriate place once kill_container is\n       // implemented.\n       nodeStatusUpdater.sendOutofBandHeartBeat();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            ContainerExitStatus.KILLED_BY_APPMASTER,\n            \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n\n      // TODO: Move this code to appropriate place once kill_container is\n      // implemented.\n      nodeStatusUpdater.sendOutofBandHeartBeat();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-903. Changed ContainerManager to suppress unnecessary warnings when stopping already stopped containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/13 11:54 PM",
      "commitName": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/07/13 3:23 PM",
      "commitNameOld": "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,27 @@\n   private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n       ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n     LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n     authorizeGetAndStopContainerRequest(containerID, container, true,\n       nmTokenIdentifier);\n \n-    dispatcher.getEventHandler().handle(\n-      new ContainerKillEvent(containerID,\n-        \"Container killed by the ApplicationMaster.\"));\n+    if (container \u003d\u003d null) {\n+      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n+        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n+          + \" is not handled by this NodeManager\");\n+      }\n+    } else {\n+      dispatcher.getEventHandler().handle(\n+        new ContainerKillEvent(containerID,\n+          \"Container killed by the ApplicationMaster.\"));\n \n-    NMAuditLogger.logSuccess(container.getUser(),\n-      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n-        .getApplicationAttemptId().getApplicationId(), containerID);\n+      NMAuditLogger.logSuccess(container.getUser(),    \n+        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n+          .getApplicationAttemptId().getApplicationId(), containerID);\n \n-    // TODO: Move this code to appropriate place once kill_container is\n-    // implemented.\n-    nodeStatusUpdater.sendOutofBandHeartBeat();\n+      // TODO: Move this code to appropriate place once kill_container is\n+      // implemented.\n+      nodeStatusUpdater.sendOutofBandHeartBeat();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    if (container \u003d\u003d null) {\n      if (!nodeStatusUpdater.isContainerRecentlyStopped(containerID)) {\n        throw RPCUtil.getRemoteException(\"Container \" + containerIDStr\n          + \" is not handled by this NodeManager\");\n      }\n    } else {\n      dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n          \"Container killed by the ApplicationMaster.\"));\n\n      NMAuditLogger.logSuccess(container.getUser(),    \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n          .getApplicationAttemptId().getApplicationId(), containerID);\n\n      // TODO: Move this code to appropriate place once kill_container is\n      // implemented.\n      nodeStatusUpdater.sendOutofBandHeartBeat();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "stopContainer",
            "newValue": "stopContainerInternal"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[request-StopContainerRequest]",
            "newValue": "[nmTokenIdentifier-NMTokenIdentifier, containerID-ContainerId]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "StopContainerResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[YarnException, IOException]",
            "newValue": "[YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,20 @@\n-  public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnException, IOException {\n-\n-    ContainerId containerID \u003d request.getContainerId();\n+  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n+      ContainerId containerID) throws YarnException {\n     String containerIDStr \u003d containerID.toString();\n     Container container \u003d this.context.getContainers().get(containerID);\n-    LOG.info(\"Getting container-status for \" + containerIDStr);\n-    authorizeGetAndStopContainerRequest(containerID, container, true);\n-\n-    StopContainerResponse response \u003d\n-        recordFactory.newRecordInstance(StopContainerResponse.class);\n+    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true,\n+      nmTokenIdentifier);\n \n     dispatcher.getEventHandler().handle(\n       new ContainerKillEvent(containerID,\n         \"Container killed by the ApplicationMaster.\"));\n \n     NMAuditLogger.logSuccess(container.getUser(),\n       AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n         .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n-\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void stopContainerInternal(NMTokenIdentifier nmTokenIdentifier,\n      ContainerId containerID) throws YarnException {\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Stopping container with container Id: \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true,\n      nmTokenIdentifier);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 11:20 PM",
      "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,26 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnException, IOException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n-\n-    // TODO: Only the container\u0027s owner can kill containers today.\n-\n-    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     Container container \u003d this.context.getContainers().get(containerID);\n+    LOG.info(\"Getting container-status for \" + containerIDStr);\n+    authorizeGetAndStopContainerRequest(containerID, container, true);\n+\n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n-    if (container \u003d\u003d null) {\n-      LOG.warn(\"Trying to stop unknown container \" + containerID);\n-      NMAuditLogger.logFailure(\"UnknownUser\",\n-          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n-          \"Trying to stop unknown container!\",\n-          containerID.getApplicationAttemptId().getApplicationId(), \n-          containerID);\n-      return response; // Return immediately.\n-    }\n-    authorizeRequest(containerIDStr, null, remoteUgi,\n-      getContainerTokenIdentifier(remoteUgi, container.getContainerTokenIdentifier()));\n-\n     dispatcher.getEventHandler().handle(\n-        new ContainerKillEvent(containerID,\n-            \"Container killed by the ApplicationMaster.\"));\n- \n-    NMAuditLogger.logSuccess(container.getUser(), \n-        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n-        containerID.getApplicationAttemptId().getApplicationId(), \n-        containerID);\n+      new ContainerKillEvent(containerID,\n+        \"Container killed by the ApplicationMaster.\"));\n+\n+    NMAuditLogger.logSuccess(container.getUser(),\n+      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n+        .getApplicationAttemptId().getApplicationId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnException, IOException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n    Container container \u003d this.context.getContainers().get(containerID);\n    LOG.info(\"Getting container-status for \" + containerIDStr);\n    authorizeGetAndStopContainerRequest(containerID, container, true);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    dispatcher.getEventHandler().handle(\n      new ContainerKillEvent(containerID,\n        \"Container killed by the ApplicationMaster.\"));\n\n    NMAuditLogger.logSuccess(container.getUser(),\n      AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", containerID\n        .getApplicationAttemptId().getApplicationId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnRemoteException, IOException {\n+      throws YarnException, IOException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n \n     // TODO: Only the container\u0027s owner can kill containers today.\n \n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     Container container \u003d this.context.getContainers().get(containerID);\n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n     authorizeRequest(containerIDStr, null, remoteUgi,\n       getContainerTokenIdentifier(remoteUgi, container.getContainerTokenIdentifier()));\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnException, IOException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    Container container \u003d this.context.getContainers().get(containerID);\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n    authorizeRequest(containerIDStr, null, remoteUgi,\n      getContainerTokenIdentifier(remoteUgi, container.getContainerTokenIdentifier()));\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException, IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "2692675fc3b5046d2ec88542c30203c87e135b70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:13 PM",
      "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "29/05/13 9:59 PM",
      "commitNameOld": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException, IOException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n \n     // TODO: Only the container\u0027s owner can kill containers today.\n \n-    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n+    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     Container container \u003d this.context.getContainers().get(containerID);\n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n-    authorizeRequest(containerIDStr, null, null, remoteUgi,\n-      getContainerTokenIdentifier(remoteUgi, container.getContainer()));\n+    authorizeRequest(containerIDStr, null, remoteUgi,\n+      getContainerTokenIdentifier(remoteUgi, container.getContainerTokenIdentifier()));\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException, IOException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    Container container \u003d this.context.getContainers().get(containerID);\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n    authorizeRequest(containerIDStr, null, remoteUgi,\n      getContainerTokenIdentifier(remoteUgi, container.getContainerTokenIdentifier()));\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ca8024673178fa1c80224b390dfba932921693d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 11:36 PM",
      "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/05/13 9:11 PM",
      "commitNameOld": "1a119f87b4f0a78d56e1bb998b1cbc081484fbd1",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException, IOException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n \n     // TODO: Only the container\u0027s owner can kill containers today.\n \n     UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n-    authorizeRequest(containerIDStr, null, null, remoteUgi);\n-\n+    Container container \u003d this.context.getContainers().get(containerID);\n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n-    Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n+    authorizeRequest(containerIDStr, null, null, remoteUgi,\n+      getContainerTokenIdentifier(remoteUgi, container.getContainer()));\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException, IOException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n    Container container \u003d this.context.getContainers().get(containerID);\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n    authorizeRequest(containerIDStr, null, null, remoteUgi,\n      getContainerTokenIdentifier(remoteUgi, container.getContainer()));\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "9eb53b9c841233538a51e4e854b261536c0b85d4": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-632. Changed ContainerManager api to throw IOException and YarnRemoteException. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479740 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/13 5:42 PM",
      "commitName": "9eb53b9c841233538a51e4e854b261536c0b85d4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/05/13 12:04 PM",
      "commitNameOld": "92b7165a71656468f17ce8b760ce11e648932f0e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n-      throws YarnRemoteException {\n+      throws YarnRemoteException, IOException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n \n     // TODO: Only the container\u0027s owner can kill containers today.\n \n     UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n     authorizeRequest(containerIDStr, null, null, remoteUgi);\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException, IOException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n    authorizeRequest(containerIDStr, null, null, remoteUgi);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 12:28 PM",
      "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/12/12 4:12 AM",
      "commitNameOld": "235749a8ab5f303b5b3a2993da8c5bea1818183b",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 129.3,
      "commitsBetweenForRepo": 595,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n     ContainerId containerID \u003d request.getContainerId();\n     String containerIDStr \u003d containerID.toString();\n \n     // TODO: Only the container\u0027s owner can kill containers today.\n \n     UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n-    authorizeRequest(containerIDStr, null, remoteUgi);\n+    authorizeRequest(containerIDStr, null, null, remoteUgi);\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n    authorizeRequest(containerIDStr, null, null, remoteUgi);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n     ContainerId containerID \u003d request.getContainerId();\n+    String containerIDStr \u003d containerID.toString();\n+\n     // TODO: Only the container\u0027s owner can kill containers today.\n-    authorizeRequest(containerID, null);\n+\n+    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n+    authorizeRequest(containerIDStr, null, remoteUgi);\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n \n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n  \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    String containerIDStr \u003d containerID.toString();\n\n    // TODO: Only the container\u0027s owner can kill containers today.\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi(containerIDStr);\n    authorizeRequest(containerIDStr, null, remoteUgi);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    // TODO: Only the container\u0027s owner can kill containers today.\n    authorizeRequest(containerID, null);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 2:35 AM",
      "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/10/11 11:45 PM",
      "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,36 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n+    ContainerId containerID \u003d request.getContainerId();\n+    // TODO: Only the container\u0027s owner can kill containers today.\n+    authorizeRequest(containerID, null);\n+\n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n-    ContainerId containerID \u003d request.getContainerId();\n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n-      String userName;\n-      try {\n-        userName \u003d UserGroupInformation.getCurrentUser().getUserName();\n-      } catch (IOException e) {\n-        LOG.error(\"Error finding userName\", e);\n-        return response;\n-      }\n-      NMAuditLogger.logFailure(userName,\n+      NMAuditLogger.logFailure(\"UnknownUser\",\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getApplicationAttemptId().getApplicationId(), \n           containerID);\n       return response; // Return immediately.\n     }\n+\n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n-\n-    // user logged here not ideal since just getting user from container but\n-    // request doesn\u0027t have anything and should be coming from user of AM so \n-    // should be the same or should be rejected by auth before here. \n+ \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getApplicationAttemptId().getApplicationId(), \n         containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    ContainerId containerID \u003d request.getContainerId();\n    // TODO: Only the container\u0027s owner can kill containers today.\n    authorizeRequest(containerID, null);\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(\"UnknownUser\",\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 12:11 AM",
      "commitNameOld": "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     ContainerId containerID \u003d request.getContainerId();\n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n       String userName;\n       try {\n         userName \u003d UserGroupInformation.getCurrentUser().getUserName();\n       } catch (IOException e) {\n         LOG.error(\"Error finding userName\", e);\n         return response;\n       }\n       NMAuditLogger.logFailure(userName,\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n-          containerID.getAppId(), containerID);\n+          containerID.getApplicationAttemptId().getApplicationId(), \n+          containerID);\n       return response; // Return immediately.\n     }\n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n \n     // user logged here not ideal since just getting user from container but\n     // request doesn\u0027t have anything and should be coming from user of AM so \n     // should be the same or should be rejected by auth before here. \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n-        containerID.getAppId(), containerID);\n+        containerID.getApplicationAttemptId().getApplicationId(), \n+        containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    ContainerId containerID \u003d request.getContainerId();\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      String userName;\n      try {\n        userName \u003d UserGroupInformation.getCurrentUser().getUserName();\n      } catch (IOException e) {\n        LOG.error(\"Error finding userName\", e);\n        return response;\n      }\n      NMAuditLogger.logFailure(userName,\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getApplicationAttemptId().getApplicationId(), \n          containerID);\n      return response; // Return immediately.\n    }\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n\n    // user logged here not ideal since just getting user from container but\n    // request doesn\u0027t have anything and should be coming from user of AM so \n    // should be the same or should be rejected by auth before here. \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getApplicationAttemptId().getApplicationId(), \n        containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 6:24 PM",
      "commitNameOld": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     ContainerId containerID \u003d request.getContainerId();\n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n-      NMAuditLogger.logFailure(container.getUser(),\n+      String userName;\n+      try {\n+        userName \u003d UserGroupInformation.getCurrentUser().getUserName();\n+      } catch (IOException e) {\n+        LOG.error(\"Error finding userName\", e);\n+        return response;\n+      }\n+      NMAuditLogger.logFailure(userName,\n           AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n           \"Trying to stop unknown container!\",\n           containerID.getAppId(), containerID);\n       return response; // Return immediately.\n     }\n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n \n     // user logged here not ideal since just getting user from container but\n     // request doesn\u0027t have anything and should be coming from user of AM so \n     // should be the same or should be rejected by auth before here. \n     NMAuditLogger.logSuccess(container.getUser(), \n         AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n         containerID.getAppId(), containerID);\n \n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    ContainerId containerID \u003d request.getContainerId();\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      String userName;\n      try {\n        userName \u003d UserGroupInformation.getCurrentUser().getUserName();\n      } catch (IOException e) {\n        LOG.error(\"Error finding userName\", e);\n        return response;\n      }\n      NMAuditLogger.logFailure(userName,\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getAppId(), containerID);\n      return response; // Return immediately.\n    }\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n\n    // user logged here not ideal since just getting user from container but\n    // request doesn\u0027t have anything and should be coming from user of AM so \n    // should be the same or should be rejected by auth before here. \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getAppId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/08/11 4:38 AM",
      "commitNameOld": "ade0f0560f729e50382c6992f713f29e2dd5b270",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,33 @@\n   public StopContainerResponse stopContainer(StopContainerRequest request)\n       throws YarnRemoteException {\n \n     StopContainerResponse response \u003d\n         recordFactory.newRecordInstance(StopContainerResponse.class);\n \n     ContainerId containerID \u003d request.getContainerId();\n     Container container \u003d this.context.getContainers().get(containerID);\n     if (container \u003d\u003d null) {\n       LOG.warn(\"Trying to stop unknown container \" + containerID);\n+      NMAuditLogger.logFailure(container.getUser(),\n+          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n+          \"Trying to stop unknown container!\",\n+          containerID.getAppId(), containerID);\n       return response; // Return immediately.\n     }\n     dispatcher.getEventHandler().handle(\n         new ContainerKillEvent(containerID,\n             \"Container killed by the ApplicationMaster.\"));\n \n+    // user logged here not ideal since just getting user from container but\n+    // request doesn\u0027t have anything and should be coming from user of AM so \n+    // should be the same or should be rejected by auth before here. \n+    NMAuditLogger.logSuccess(container.getUser(), \n+        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n+        containerID.getAppId(), containerID);\n+\n     // TODO: Move this code to appropriate place once kill_container is\n     // implemented.\n     nodeStatusUpdater.sendOutofBandHeartBeat();\n \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    ContainerId containerID \u003d request.getContainerId();\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      NMAuditLogger.logFailure(container.getUser(),\n          AuditConstants.STOP_CONTAINER, \"ContainerManagerImpl\",\n          \"Trying to stop unknown container!\",\n          containerID.getAppId(), containerID);\n      return response; // Return immediately.\n    }\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n\n    // user logged here not ideal since just getting user from container but\n    // request doesn\u0027t have anything and should be coming from user of AM so \n    // should be the same or should be rejected by auth before here. \n    NMAuditLogger.logSuccess(container.getUser(), \n        AuditConstants.STOP_CONTAINER, \"ContainerManageImpl\", \n        containerID.getAppId(), containerID);\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    ContainerId containerID \u003d request.getContainerId();\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      return response; // Return immediately.\n    }\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  public StopContainerResponse stopContainer(StopContainerRequest request)\n+      throws YarnRemoteException {\n+\n+    StopContainerResponse response \u003d\n+        recordFactory.newRecordInstance(StopContainerResponse.class);\n+\n+    ContainerId containerID \u003d request.getContainerId();\n+    Container container \u003d this.context.getContainers().get(containerID);\n+    if (container \u003d\u003d null) {\n+      LOG.warn(\"Trying to stop unknown container \" + containerID);\n+      return response; // Return immediately.\n+    }\n+    dispatcher.getEventHandler().handle(\n+        new ContainerKillEvent(containerID,\n+            \"Container killed by the ApplicationMaster.\"));\n+\n+    // TODO: Move this code to appropriate place once kill_container is\n+    // implemented.\n+    nodeStatusUpdater.sendOutofBandHeartBeat();\n+\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public StopContainerResponse stopContainer(StopContainerRequest request)\n      throws YarnRemoteException {\n\n    StopContainerResponse response \u003d\n        recordFactory.newRecordInstance(StopContainerResponse.class);\n\n    ContainerId containerID \u003d request.getContainerId();\n    Container container \u003d this.context.getContainers().get(containerID);\n    if (container \u003d\u003d null) {\n      LOG.warn(\"Trying to stop unknown container \" + containerID);\n      return response; // Return immediately.\n    }\n    dispatcher.getEventHandler().handle(\n        new ContainerKillEvent(containerID,\n            \"Container killed by the ApplicationMaster.\"));\n\n    // TODO: Move this code to appropriate place once kill_container is\n    // implemented.\n    nodeStatusUpdater.sendOutofBandHeartBeat();\n\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}