{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterFsck.java",
  "functionName": "fsck",
  "functionId": "fsck",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterFsck.java",
  "functionStartLine": 71,
  "functionEndLine": 118,
  "numCommitsSeen": 2,
  "timeTaken": 952,
  "changeHistory": [
    "1695d8d59c4b441448c16c6cee5c83347c4cb87f",
    "0ddb5f0881dee26d9258b3d5f4e0ac3733727820"
  ],
  "changeHistoryShort": {
    "1695d8d59c4b441448c16c6cee5c83347c4cb87f": "Ybodychange",
    "0ddb5f0881dee26d9258b3d5f4e0ac3733727820": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1695d8d59c4b441448c16c6cee5c83347c4cb87f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15258. RBF: Mark Router FSCK unstable. (#1934)\n\n",
      "commitDate": "03/04/20 8:13 AM",
      "commitName": "1695d8d59c4b441448c16c6cee5c83347c4cb87f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/02/20 5:06 PM",
      "commitNameOld": "0ddb5f0881dee26d9258b3d5f4e0ac3733727820",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 50.59,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public void fsck() {\n     final long startTime \u003d Time.monotonicNow();\n     try {\n+      String warnMsg \u003d \"Now FSCK to DFSRouter is unstable feature. \" +\n+          \"There may be incompatible changes between releases.\";\n+      LOG.warn(warnMsg);\n+      out.println(warnMsg);\n       String msg \u003d \"Federated FSCK started by \" +\n           UserGroupInformation.getCurrentUser() + \" from \" + remoteAddress +\n           \" at \" + new Date();\n       LOG.info(msg);\n       out.println(msg);\n \n       // Check each Namenode in the federation\n       StateStoreService stateStore \u003d router.getStateStore();\n       MembershipStore membership \u003d\n           stateStore.getRegisteredRecordStore(MembershipStore.class);\n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance();\n       GetNamenodeRegistrationsResponse response \u003d\n           membership.getNamenodeRegistrations(request);\n       List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n       Collections.sort(memberships);\n       for (MembershipState nn : memberships) {\n         if (nn.getState() \u003d\u003d FederationNamenodeServiceState.ACTIVE) {\n           try {\n             String webAddress \u003d nn.getWebAddress();\n             out.write(\"Checking \" + nn + \" at \" + webAddress + \"\\n\");\n             remoteFsck(nn);\n           } catch (IOException ioe) {\n             out.println(\"Cannot query \" + nn + \": \" + ioe.getMessage() + \"\\n\");\n           }\n         }\n       }\n \n       out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n           + (Time.monotonicNow() - startTime + \" milliseconds\"));\n     } catch (Exception e) {\n       String errMsg \u003d \"Fsck \" + e.getMessage();\n       LOG.warn(errMsg, e);\n       out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n           + (Time.monotonicNow() - startTime + \" milliseconds\"));\n       out.println(e.getMessage());\n       out.print(\"\\n\\n\" + errMsg);\n     } finally {\n       out.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void fsck() {\n    final long startTime \u003d Time.monotonicNow();\n    try {\n      String warnMsg \u003d \"Now FSCK to DFSRouter is unstable feature. \" +\n          \"There may be incompatible changes between releases.\";\n      LOG.warn(warnMsg);\n      out.println(warnMsg);\n      String msg \u003d \"Federated FSCK started by \" +\n          UserGroupInformation.getCurrentUser() + \" from \" + remoteAddress +\n          \" at \" + new Date();\n      LOG.info(msg);\n      out.println(msg);\n\n      // Check each Namenode in the federation\n      StateStoreService stateStore \u003d router.getStateStore();\n      MembershipStore membership \u003d\n          stateStore.getRegisteredRecordStore(MembershipStore.class);\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membership.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n      Collections.sort(memberships);\n      for (MembershipState nn : memberships) {\n        if (nn.getState() \u003d\u003d FederationNamenodeServiceState.ACTIVE) {\n          try {\n            String webAddress \u003d nn.getWebAddress();\n            out.write(\"Checking \" + nn + \" at \" + webAddress + \"\\n\");\n            remoteFsck(nn);\n          } catch (IOException ioe) {\n            out.println(\"Cannot query \" + nn + \": \" + ioe.getMessage() + \"\\n\");\n          }\n        }\n      }\n\n      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n    } catch (Exception e) {\n      String errMsg \u003d \"Fsck \" + e.getMessage();\n      LOG.warn(errMsg, e);\n      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n      out.println(e.getMessage());\n      out.print(\"\\n\\n\" + errMsg);\n    } finally {\n      out.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterFsck.java",
      "extendedDetails": {}
    },
    "0ddb5f0881dee26d9258b3d5f4e0ac3733727820": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13989. RBF: Add FSCK to the Router (#1832)\n\n\r\nCo-authored-by: Inigo Goiri \u003cinigoiri@apache.org\u003e",
      "commitDate": "12/02/20 5:06 PM",
      "commitName": "0ddb5f0881dee26d9258b3d5f4e0ac3733727820",
      "commitAuthor": "Akira Ajisaka",
      "diff": "@@ -0,0 +1,44 @@\n+  public void fsck() {\n+    final long startTime \u003d Time.monotonicNow();\n+    try {\n+      String msg \u003d \"Federated FSCK started by \" +\n+          UserGroupInformation.getCurrentUser() + \" from \" + remoteAddress +\n+          \" at \" + new Date();\n+      LOG.info(msg);\n+      out.println(msg);\n+\n+      // Check each Namenode in the federation\n+      StateStoreService stateStore \u003d router.getStateStore();\n+      MembershipStore membership \u003d\n+          stateStore.getRegisteredRecordStore(MembershipStore.class);\n+      GetNamenodeRegistrationsRequest request \u003d\n+          GetNamenodeRegistrationsRequest.newInstance();\n+      GetNamenodeRegistrationsResponse response \u003d\n+          membership.getNamenodeRegistrations(request);\n+      List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n+      Collections.sort(memberships);\n+      for (MembershipState nn : memberships) {\n+        if (nn.getState() \u003d\u003d FederationNamenodeServiceState.ACTIVE) {\n+          try {\n+            String webAddress \u003d nn.getWebAddress();\n+            out.write(\"Checking \" + nn + \" at \" + webAddress + \"\\n\");\n+            remoteFsck(nn);\n+          } catch (IOException ioe) {\n+            out.println(\"Cannot query \" + nn + \": \" + ioe.getMessage() + \"\\n\");\n+          }\n+        }\n+      }\n+\n+      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n+          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n+    } catch (Exception e) {\n+      String errMsg \u003d \"Fsck \" + e.getMessage();\n+      LOG.warn(errMsg, e);\n+      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n+          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n+      out.println(e.getMessage());\n+      out.print(\"\\n\\n\" + errMsg);\n+    } finally {\n+      out.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void fsck() {\n    final long startTime \u003d Time.monotonicNow();\n    try {\n      String msg \u003d \"Federated FSCK started by \" +\n          UserGroupInformation.getCurrentUser() + \" from \" + remoteAddress +\n          \" at \" + new Date();\n      LOG.info(msg);\n      out.println(msg);\n\n      // Check each Namenode in the federation\n      StateStoreService stateStore \u003d router.getStateStore();\n      MembershipStore membership \u003d\n          stateStore.getRegisteredRecordStore(MembershipStore.class);\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membership.getNamenodeRegistrations(request);\n      List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n      Collections.sort(memberships);\n      for (MembershipState nn : memberships) {\n        if (nn.getState() \u003d\u003d FederationNamenodeServiceState.ACTIVE) {\n          try {\n            String webAddress \u003d nn.getWebAddress();\n            out.write(\"Checking \" + nn + \" at \" + webAddress + \"\\n\");\n            remoteFsck(nn);\n          } catch (IOException ioe) {\n            out.println(\"Cannot query \" + nn + \": \" + ioe.getMessage() + \"\\n\");\n          }\n        }\n      }\n\n      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n    } catch (Exception e) {\n      String errMsg \u003d \"Fsck \" + e.getMessage();\n      LOG.warn(errMsg, e);\n      out.println(\"Federated FSCK ended at \" + new Date() + \" in \"\n          + (Time.monotonicNow() - startTime + \" milliseconds\"));\n      out.println(e.getMessage());\n      out.print(\"\\n\\n\" + errMsg);\n    } finally {\n      out.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterFsck.java"
    }
  }
}