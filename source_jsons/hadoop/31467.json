{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ColumnRWHelper.java",
  "functionName": "readResults",
  "functionId": "readResults___result-Result__columnFamilyBytes-byte[]__columnPrefixBytes-byte[]__keyConverter-KeyConverter__K____valueConverter-ValueConverter",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
  "functionStartLine": 361,
  "functionEndLine": 412,
  "numCommitsSeen": 26,
  "timeTaken": 5627,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
    "92d90c3a243134177f192d1d473dd606c79a91fc"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9": "Ybodychange",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": "Ybodychange",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": "Ybodychange",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n+      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n       throws IOException {\n     Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n-      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n+      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             try {\n               converterColumnKey \u003d keyConverter.decode(columnKey);\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n             if (columnNameParts.length \u003e 0) {\n               byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n               // If this is the prefix that we want\n               if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                   \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                 try {\n                   converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                 } catch (IllegalArgumentException iae) {\n                   LOG.error(\"Illegal column found, skipping this column.\", iae);\n                   continue;\n                 }\n               }\n             }\n           } // if-else\n \n           // If the columnPrefix is null (we want all columns), or the actual\n           // prefix matches the given prefix we want this column\n           if (converterColumnKey !\u003d null) {\n-            Object value \u003d converter.decodeValue(entry.getValue());\n+            Object value \u003d valueConverter.decodeValue(entry.getValue());\n             // we return the columnQualifier in parts since we don\u0027t know\n             // which part is of which data type.\n             results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d valueConverter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
            "oldMethodName": "readResults",
            "newMethodName": "readResults"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n+      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n       throws IOException {\n     Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n-      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n+      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             try {\n               converterColumnKey \u003d keyConverter.decode(columnKey);\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n             if (columnNameParts.length \u003e 0) {\n               byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n               // If this is the prefix that we want\n               if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                   \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                 try {\n                   converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                 } catch (IllegalArgumentException iae) {\n                   LOG.error(\"Illegal column found, skipping this column.\", iae);\n                   continue;\n                 }\n               }\n             }\n           } // if-else\n \n           // If the columnPrefix is null (we want all columns), or the actual\n           // prefix matches the given prefix we want this column\n           if (converterColumnKey !\u003d null) {\n-            Object value \u003d converter.decodeValue(entry.getValue());\n+            Object value \u003d valueConverter.decodeValue(entry.getValue());\n             // we return the columnQualifier in parts since we don\u0027t know\n             // which part is of which data type.\n             results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d valueConverter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n+      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n       throws IOException {\n     Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n-      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n+      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             try {\n               converterColumnKey \u003d keyConverter.decode(columnKey);\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n             if (columnNameParts.length \u003e 0) {\n               byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n               // If this is the prefix that we want\n               if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                   \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                 try {\n                   converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                 } catch (IllegalArgumentException iae) {\n                   LOG.error(\"Illegal column found, skipping this column.\", iae);\n                   continue;\n                 }\n               }\n             }\n           } // if-else\n \n           // If the columnPrefix is null (we want all columns), or the actual\n           // prefix matches the given prefix we want this column\n           if (converterColumnKey !\u003d null) {\n-            Object value \u003d converter.decodeValue(entry.getValue());\n+            Object value \u003d valueConverter.decodeValue(entry.getValue());\n             // we return the columnQualifier in parts since we don\u0027t know\n             // which part is of which data type.\n             results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d valueConverter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,52 @@\n-  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n+      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n       throws IOException {\n     Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n-      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n+      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             try {\n               converterColumnKey \u003d keyConverter.decode(columnKey);\n             } catch (IllegalArgumentException iae) {\n               LOG.error(\"Illegal column found, skipping this column.\", iae);\n               continue;\n             }\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n             if (columnNameParts.length \u003e 0) {\n               byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n               // If this is the prefix that we want\n               if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                   \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                 try {\n                   converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                 } catch (IllegalArgumentException iae) {\n                   LOG.error(\"Illegal column found, skipping this column.\", iae);\n                   continue;\n                 }\n               }\n             }\n           } // if-else\n \n           // If the columnPrefix is null (we want all columns), or the actual\n           // prefix matches the given prefix we want this column\n           if (converterColumnKey !\u003d null) {\n-            Object value \u003d converter.decodeValue(entry.getValue());\n+            Object value \u003d valueConverter.decodeValue(entry.getValue());\n             // we return the columnQualifier in parts since we don\u0027t know\n             // which part is of which data type.\n             results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnFamilyBytes, byte[] columnPrefixBytes,\n      KeyConverter\u003cK\u003e keyConverter, ValueConverter valueConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Map.Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d valueConverter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnRWHelper.java",
          "extendedDetails": {
            "oldValue": "[result-Result, columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e]",
            "newValue": "[result-Result, columnFamilyBytes-byte[], columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e, valueConverter-ValueConverter]"
          }
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java"
      }
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,51 @@\n-  public Map\u003cString, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes) throws IOException {\n-    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n+  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+      throws IOException {\n+    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"null prefix was specified; returning all columns\");\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(columnKey);\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n-            byte[][] columnNameParts \u003d\n-                Separator.QUALIFIERS.split(columnKey, 2);\n-            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n-            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n-                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              // if the column name is a compound qualifier\n-              // with non string datatypes, the following decode will not\n-              // work correctly since it considers all components to be String\n-              // invoke the readResultsHavingCompoundColumnQualifiers function\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n+            if (columnNameParts.length \u003e 0) {\n+              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n+              // If this is the prefix that we want\n+              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n+                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n+                try {\n+                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+                } catch (IllegalArgumentException iae) {\n+                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                  continue;\n+                }\n+              }\n             }\n-          }\n+          } // if-else\n \n-          // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          // If the columnPrefix is null (we want all columns), or the actual\n+          // prefix matches the given prefix we want this column\n+          if (converterColumnKey !\u003d null) {\n             Object value \u003d converter.decodeValue(entry.getValue());\n-            results.put(columnName, value);\n+            // we return the columnQualifier in parts since we don\u0027t know\n+            // which part is of which data type.\n+            results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "[result-Result, columnPrefixBytes-byte[]]",
            "newValue": "[result-Result, columnPrefixBytes-byte[], keyConverter-KeyConverter\u003cK\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,51 @@\n-  public Map\u003cString, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes) throws IOException {\n-    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n+  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+      throws IOException {\n+    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"null prefix was specified; returning all columns\");\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(columnKey);\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n-            byte[][] columnNameParts \u003d\n-                Separator.QUALIFIERS.split(columnKey, 2);\n-            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n-            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n-                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              // if the column name is a compound qualifier\n-              // with non string datatypes, the following decode will not\n-              // work correctly since it considers all components to be String\n-              // invoke the readResultsHavingCompoundColumnQualifiers function\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n+            if (columnNameParts.length \u003e 0) {\n+              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n+              // If this is the prefix that we want\n+              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n+                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n+                try {\n+                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+                } catch (IllegalArgumentException iae) {\n+                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                  continue;\n+                }\n+              }\n             }\n-          }\n+          } // if-else\n \n-          // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          // If the columnPrefix is null (we want all columns), or the actual\n+          // prefix matches the given prefix we want this column\n+          if (converterColumnKey !\u003d null) {\n             Object value \u003d converter.decodeValue(entry.getValue());\n-            results.put(columnName, value);\n+            // we return the columnQualifier in parts since we don\u0027t know\n+            // which part is of which data type.\n+            results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {
            "oldValue": "Map\u003cString,Object\u003e",
            "newValue": "Map\u003cK,Object\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,51 @@\n-  public Map\u003cString, Object\u003e readResults(Result result,\n-      byte[] columnPrefixBytes) throws IOException {\n-    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n+  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n+      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n+      throws IOException {\n+    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n-          String columnName \u003d null;\n+          K converterColumnKey \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"null prefix was specified; returning all columns\");\n+            try {\n+              converterColumnKey \u003d keyConverter.decode(columnKey);\n+            } catch (IllegalArgumentException iae) {\n+              LOG.error(\"Illegal column found, skipping this column.\", iae);\n+              continue;\n             }\n-            // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n-            byte[][] columnNameParts \u003d\n-                Separator.QUALIFIERS.split(columnKey, 2);\n-            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n-            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n-                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n-              // This is the prefix that we want\n-              // if the column name is a compound qualifier\n-              // with non string datatypes, the following decode will not\n-              // work correctly since it considers all components to be String\n-              // invoke the readResultsHavingCompoundColumnQualifiers function\n-              columnName \u003d Separator.decode(columnNameParts[1]);\n+            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n+            if (columnNameParts.length \u003e 0) {\n+              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n+              // If this is the prefix that we want\n+              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n+                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n+                try {\n+                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n+                } catch (IllegalArgumentException iae) {\n+                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n+                  continue;\n+                }\n+              }\n             }\n-          }\n+          } // if-else\n \n-          // If this column has the prefix we want\n-          if (columnName !\u003d null) {\n+          // If the columnPrefix is null (we want all columns), or the actual\n+          // prefix matches the given prefix we want this column\n+          if (converterColumnKey !\u003d null) {\n             Object value \u003d converter.decodeValue(entry.getValue());\n-            results.put(columnName, value);\n+            // we return the columnQualifier in parts since we don\u0027t know\n+            // which part is of which data type.\n+            results.put(converterColumnKey, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cK\u003e Map\u003cK, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes, KeyConverter\u003cK\u003e keyConverter)\n      throws IOException {\n    Map\u003cK, Object\u003e results \u003d new HashMap\u003cK, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          K converterColumnKey \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            try {\n              converterColumnKey \u003d keyConverter.decode(columnKey);\n            } catch (IllegalArgumentException iae) {\n              LOG.error(\"Illegal column found, skipping this column.\", iae);\n              continue;\n            }\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d Separator.QUALIFIERS.split(columnKey, 2);\n            if (columnNameParts.length \u003e 0) {\n              byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n              // If this is the prefix that we want\n              if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                  \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n                try {\n                  converterColumnKey \u003d keyConverter.decode(columnNameParts[1]);\n                } catch (IllegalArgumentException iae) {\n                  LOG.error(\"Illegal column found, skipping this column.\", iae);\n                  continue;\n                }\n              }\n            }\n          } // if-else\n\n          // If the columnPrefix is null (we want all columns), or the actual\n          // prefix matches the given prefix we want this column\n          if (converterColumnKey !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            // we return the columnQualifier in parts since we don\u0027t know\n            // which part is of which data type.\n            results.put(converterColumnKey, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
          "extendedDetails": {}
        }
      ]
    },
    "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5096 addendum. Turned another logging statement to debug. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4a7011a45f5ede25d0e07ee3bde60d1b41ec24e9",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "bcdb3826006353b6926c4e8497eb5de80543f821",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public Map\u003cString, Object\u003e readResults(Result result,\n       byte[] columnPrefixBytes) throws IOException {\n     Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n-            LOG.info(\"null prefix was specified; returning all columns\");\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"null prefix was specified; returning all columns\");\n+            }\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(columnKey, 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               // if the column name is a compound qualifier\n               // with non string datatypes, the following decode will not\n               // work correctly since it considers all components to be String\n               // invoke the readResultsHavingCompoundColumnQualifiers function\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             Object value \u003d converter.decodeValue(entry.getValue());\n             results.put(columnName, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes) throws IOException {\n    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"null prefix was specified; returning all columns\");\n            }\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(columnKey, 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              // if the column name is a compound qualifier\n              // with non string datatypes, the following decode will not\n              // work correctly since it considers all components to be String\n              // invoke the readResultsHavingCompoundColumnQualifiers function\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            results.put(columnName, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public Map\u003cString, Object\u003e readResults(Result result,\n       byte[] columnPrefixBytes) throws IOException {\n     Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n         byte[] columnKey \u003d entry.getKey();\n         if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n             LOG.info(\"null prefix was specified; returning all columns\");\n             // Decode the spaces we encoded in the column name.\n             columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n                 Separator.QUALIFIERS.split(columnKey, 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n               // if the column name is a compound qualifier\n               // with non string datatypes, the following decode will not\n               // work correctly since it considers all components to be String\n               // invoke the readResultsHavingCompoundColumnQualifiers function\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n-            Object value \u003d GenericObjectMapper.read(entry.getValue());\n+            Object value \u003d converter.decodeValue(entry.getValue());\n             results.put(columnName, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes) throws IOException {\n    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.info(\"null prefix was specified; returning all columns\");\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(columnKey, 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              // if the column name is a compound qualifier\n              // with non string datatypes, the following decode will not\n              // work correctly since it considers all components to be String\n              // invoke the readResultsHavingCompoundColumnQualifiers function\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            Object value \u003d converter.decodeValue(entry.getValue());\n            results.put(columnName, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4025. Deal with byte representations of Longs in writer code. Contributed by Sangjin Lee and Vrushali C.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n-  public Map\u003cString, Object\u003e readResults(Result result, byte[] columnPrefixBytes)\n-      throws IOException {\n+  public Map\u003cString, Object\u003e readResults(Result result,\n+      byte[] columnPrefixBytes) throws IOException {\n     Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n \n     if (result !\u003d null) {\n       Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n       for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n-        if (entry.getKey() !\u003d null \u0026\u0026 entry.getKey().length \u003e 0) {\n+        byte[] columnKey \u003d entry.getKey();\n+        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n \n           String columnName \u003d null;\n           if (columnPrefixBytes \u003d\u003d null) {\n+            LOG.info(\"null prefix was specified; returning all columns\");\n             // Decode the spaces we encoded in the column name.\n-            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n           } else {\n             // A non-null prefix means columns are actually of the form\n             // prefix!columnNameRemainder\n             byte[][] columnNameParts \u003d\n-                Separator.QUALIFIERS.split(entry.getKey(), 2);\n+                Separator.QUALIFIERS.split(columnKey, 2);\n             byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n             if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                 \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n               // This is the prefix that we want\n+              // if the column name is a compound qualifier\n+              // with non string datatypes, the following decode will not\n+              // work correctly since it considers all components to be String\n+              // invoke the readResultsHavingCompoundColumnQualifiers function\n               columnName \u003d Separator.decode(columnNameParts[1]);\n             }\n           }\n \n           // If this column has the prefix we want\n           if (columnName !\u003d null) {\n             Object value \u003d GenericObjectMapper.read(entry.getValue());\n             results.put(columnName, value);\n           }\n         }\n       } // for entry\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, Object\u003e readResults(Result result,\n      byte[] columnPrefixBytes) throws IOException {\n    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        byte[] columnKey \u003d entry.getKey();\n        if (columnKey !\u003d null \u0026\u0026 columnKey.length \u003e 0) {\n\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            LOG.info(\"null prefix was specified; returning all columns\");\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(columnKey, Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(columnKey, 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              // if the column name is a compound qualifier\n              // with non string datatypes, the following decode will not\n              // work correctly since it considers all components to be String\n              // invoke the readResultsHavingCompoundColumnQualifiers function\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            Object value \u003d GenericObjectMapper.read(entry.getValue());\n            results.put(columnName, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java",
      "extendedDetails": {}
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,36 @@\n+  public Map\u003cString, Object\u003e readResults(Result result, byte[] columnPrefixBytes)\n+      throws IOException {\n+    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n+\n+    if (result !\u003d null) {\n+      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n+      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n+        if (entry.getKey() !\u003d null \u0026\u0026 entry.getKey().length \u003e 0) {\n+\n+          String columnName \u003d null;\n+          if (columnPrefixBytes \u003d\u003d null) {\n+            // Decode the spaces we encoded in the column name.\n+            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n+          } else {\n+            // A non-null prefix means columns are actually of the form\n+            // prefix!columnNameRemainder\n+            byte[][] columnNameParts \u003d\n+                Separator.QUALIFIERS.split(entry.getKey(), 2);\n+            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n+            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n+                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n+              // This is the prefix that we want\n+              columnName \u003d Separator.decode(columnNameParts[1]);\n+            }\n+          }\n+\n+          // If this column has the prefix we want\n+          if (columnName !\u003d null) {\n+            Object value \u003d GenericObjectMapper.read(entry.getValue());\n+            results.put(columnName, value);\n+          }\n+        }\n+      } // for entry\n+    }\n+    return results;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, Object\u003e readResults(Result result, byte[] columnPrefixBytes)\n      throws IOException {\n    Map\u003cString, Object\u003e results \u003d new HashMap\u003cString, Object\u003e();\n\n    if (result !\u003d null) {\n      Map\u003cbyte[], byte[]\u003e columns \u003d result.getFamilyMap(columnFamilyBytes);\n      for (Entry\u003cbyte[], byte[]\u003e entry : columns.entrySet()) {\n        if (entry.getKey() !\u003d null \u0026\u0026 entry.getKey().length \u003e 0) {\n\n          String columnName \u003d null;\n          if (columnPrefixBytes \u003d\u003d null) {\n            // Decode the spaces we encoded in the column name.\n            columnName \u003d Separator.decode(entry.getKey(), Separator.SPACE);\n          } else {\n            // A non-null prefix means columns are actually of the form\n            // prefix!columnNameRemainder\n            byte[][] columnNameParts \u003d\n                Separator.QUALIFIERS.split(entry.getKey(), 2);\n            byte[] actualColumnPrefixBytes \u003d columnNameParts[0];\n            if (Bytes.equals(columnPrefixBytes, actualColumnPrefixBytes)\n                \u0026\u0026 columnNameParts.length \u003d\u003d 2) {\n              // This is the prefix that we want\n              columnName \u003d Separator.decode(columnNameParts[1]);\n            }\n          }\n\n          // If this column has the prefix we want\n          if (columnName !\u003d null) {\n            Object value \u003d GenericObjectMapper.read(entry.getValue());\n            results.put(columnName, value);\n          }\n        }\n      } // for entry\n    }\n    return results;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/ColumnHelper.java"
    }
  }
}