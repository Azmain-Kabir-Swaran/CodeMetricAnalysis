{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncCallHandler.java",
  "functionName": "checkCalls",
  "functionId": "checkCalls",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/AsyncCallHandler.java",
  "functionStartLine": 120,
  "functionEndLine": 137,
  "numCommitsSeen": 4,
  "timeTaken": 1489,
  "changeHistory": [
    "d328e667067743f723e332d92154da8e84e65742",
    "35f255b03b1bb5c94063ec1818af1d253ceee991"
  ],
  "changeHistoryShort": {
    "d328e667067743f723e332d92154da8e84e65742": "Ymultichange(Yreturntypechange,Ybodychange)",
    "35f255b03b1bb5c94063ec1818af1d253ceee991": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d328e667067743f723e332d92154da8e84e65742": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
      "commitDate": "25/06/16 12:45 AM",
      "commitName": "d328e667067743f723e332d92154da8e84e65742",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
          "commitDate": "25/06/16 12:45 AM",
          "commitName": "d328e667067743f723e332d92154da8e84e65742",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "06/06/16 1:31 AM",
          "commitNameOld": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 18.97,
          "commitsBetweenForRepo": 164,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,18 @@\n-    void checkCalls() {\n-      final int size \u003d queue.size();\n-      for (int i \u003d 0; i \u003c size; i++) {\n-        final AsyncCall c \u003d queue.poll();\n-        if (!c.isDone()) {\n-          queue.offer(c); // the call is not done yet, add it back.\n+    long checkCalls() {\n+      final long startTime \u003d Time.monotonicNow();\n+      long minWaitTime \u003d Processor.MAX_WAIT_PERIOD;\n+\n+      for (final Iterator\u003cAsyncCall\u003e i \u003d queue.iterator(); i.hasNext();) {\n+        final AsyncCall c \u003d i.next();\n+        if (c.isDone()) {\n+          i.remove(); // the call is done, remove it from the queue.\n+          queue.checkEmpty();\n+        } else {\n+          final Long waitTime \u003d c.getWaitTime(startTime);\n+          if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0 \u0026\u0026 waitTime \u003c minWaitTime) {\n+            minWaitTime \u003d waitTime;\n+          }\n         }\n       }\n+      return minWaitTime;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    long checkCalls() {\n      final long startTime \u003d Time.monotonicNow();\n      long minWaitTime \u003d Processor.MAX_WAIT_PERIOD;\n\n      for (final Iterator\u003cAsyncCall\u003e i \u003d queue.iterator(); i.hasNext();) {\n        final AsyncCall c \u003d i.next();\n        if (c.isDone()) {\n          i.remove(); // the call is done, remove it from the queue.\n          queue.checkEmpty();\n        } else {\n          final Long waitTime \u003d c.getWaitTime(startTime);\n          if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0 \u0026\u0026 waitTime \u003c minWaitTime) {\n            minWaitTime \u003d waitTime;\n          }\n        }\n      }\n      return minWaitTime;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/AsyncCallHandler.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13227. AsyncCallHandler should use an event driven architecture to handle async calls.\n",
          "commitDate": "25/06/16 12:45 AM",
          "commitName": "d328e667067743f723e332d92154da8e84e65742",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "06/06/16 1:31 AM",
          "commitNameOld": "35f255b03b1bb5c94063ec1818af1d253ceee991",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 18.97,
          "commitsBetweenForRepo": 164,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,18 @@\n-    void checkCalls() {\n-      final int size \u003d queue.size();\n-      for (int i \u003d 0; i \u003c size; i++) {\n-        final AsyncCall c \u003d queue.poll();\n-        if (!c.isDone()) {\n-          queue.offer(c); // the call is not done yet, add it back.\n+    long checkCalls() {\n+      final long startTime \u003d Time.monotonicNow();\n+      long minWaitTime \u003d Processor.MAX_WAIT_PERIOD;\n+\n+      for (final Iterator\u003cAsyncCall\u003e i \u003d queue.iterator(); i.hasNext();) {\n+        final AsyncCall c \u003d i.next();\n+        if (c.isDone()) {\n+          i.remove(); // the call is done, remove it from the queue.\n+          queue.checkEmpty();\n+        } else {\n+          final Long waitTime \u003d c.getWaitTime(startTime);\n+          if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0 \u0026\u0026 waitTime \u003c minWaitTime) {\n+            minWaitTime \u003d waitTime;\n+          }\n         }\n       }\n+      return minWaitTime;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    long checkCalls() {\n      final long startTime \u003d Time.monotonicNow();\n      long minWaitTime \u003d Processor.MAX_WAIT_PERIOD;\n\n      for (final Iterator\u003cAsyncCall\u003e i \u003d queue.iterator(); i.hasNext();) {\n        final AsyncCall c \u003d i.next();\n        if (c.isDone()) {\n          i.remove(); // the call is done, remove it from the queue.\n          queue.checkEmpty();\n        } else {\n          final Long waitTime \u003d c.getWaitTime(startTime);\n          if (waitTime !\u003d null \u0026\u0026 waitTime \u003e 0 \u0026\u0026 waitTime \u003c minWaitTime) {\n            minWaitTime \u003d waitTime;\n          }\n        }\n      }\n      return minWaitTime;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/AsyncCallHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "35f255b03b1bb5c94063ec1818af1d253ceee991": {
      "type": "Yintroduced",
      "commitMessage": "Revert \"Revert \"HADOOP-13226 Support async call retry and failover.\"\"\n\nThis reverts commit 5360da8bd9f720384860f411bee081aef13b4bd4.\n",
      "commitDate": "06/06/16 1:31 AM",
      "commitName": "35f255b03b1bb5c94063ec1818af1d253ceee991",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,9 @@\n+    void checkCalls() {\n+      final int size \u003d queue.size();\n+      for (int i \u003d 0; i \u003c size; i++) {\n+        final AsyncCall c \u003d queue.poll();\n+        if (!c.isDone()) {\n+          queue.offer(c); // the call is not done yet, add it back.\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void checkCalls() {\n      final int size \u003d queue.size();\n      for (int i \u003d 0; i \u003c size; i++) {\n        final AsyncCall c \u003d queue.poll();\n        if (!c.isDone()) {\n          queue.offer(c); // the call is not done yet, add it back.\n        }\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/retry/AsyncCallHandler.java"
    }
  }
}