{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "listCacheDirectives",
  "functionId": "listCacheDirectives___startId-long__filter-CacheDirectiveInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 7505,
  "functionEndLine": 7528,
  "numCommitsSeen": 1424,
  "timeTaken": 43766,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "d27d7fc72e279614212c1eae52a84675073e89fb",
    "e227fb8fbcd414717faded9454b8ef813f7aafea",
    "1959afe1133eee3d099a012635082d82a077c8b3",
    "3b008baf35ad335827e704f61db31edfcbc1d141",
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
    "d85c017d0488930d806f267141057fc73e68c728",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
    "f79b3e6b17450e9d34c483046b7437b09dd72016"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "d27d7fc72e279614212c1eae52a84675073e89fb": "Ybodychange",
    "e227fb8fbcd414717faded9454b8ef813f7aafea": "Ybodychange",
    "1959afe1133eee3d099a012635082d82a077c8b3": "Ybodychange",
    "3b008baf35ad335827e704f61db31edfcbc1d141": "Ybodychange",
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36": "Ybodychange",
    "d85c017d0488930d806f267141057fc73e68c728": "Ybodychange",
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "f79b3e6b17450e9d34c483046b7437b09dd72016": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     final String operationName \u003d \"listCacheDirectives\";\n     checkOperation(OperationCategory.READ);\n     FSPermissionChecker.setOperationType(operationName);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n             filter);\n       } finally {\n-        readUnlock(operationName);\n+        readUnlock(operationName,\n+            getLockReportInfoSupplier(filter.toString()));\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, filter.toString());\n       throw ace;\n     }\n     logAuditEvent(true, operationName, filter.toString());\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    final String operationName \u003d \"listCacheDirectives\";\n    checkOperation(OperationCategory.READ);\n    FSPermissionChecker.setOperationType(operationName);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n            filter);\n      } finally {\n        readUnlock(operationName,\n            getLockReportInfoSupplier(filter.toString()));\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, filter.toString());\n      throw ace;\n    }\n    logAuditEvent(true, operationName, filter.toString());\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     final String operationName \u003d \"listCacheDirectives\";\n     checkOperation(OperationCategory.READ);\n+    FSPermissionChecker.setOperationType(operationName);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n             filter);\n       } finally {\n         readUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, filter.toString());\n       throw ace;\n     }\n     logAuditEvent(true, operationName, filter.toString());\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    final String operationName \u003d \"listCacheDirectives\";\n    checkOperation(OperationCategory.READ);\n    FSPermissionChecker.setOperationType(operationName);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n            filter);\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, filter.toString());\n      throw ace;\n    }\n    logAuditEvent(true, operationName, filter.toString());\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14810. Review FSNameSystem editlog sync. Contributed by Xiaoqiao He.\n",
      "commitDate": "17/10/19 9:26 AM",
      "commitName": "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "06/09/19 5:42 AM",
      "commitNameOld": "d98c54816d21d59c4d877ae4b1917b22268ffcef",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 41.16,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     final String operationName \u003d \"listCacheDirectives\";\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     try {\n       readLock();\n       try {\n         checkOperation(OperationCategory.READ);\n         results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n             filter);\n       } finally {\n         readUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(false, operationName, filter.toString(), null,\n-          null);\n+      logAuditEvent(false, operationName, filter.toString());\n       throw ace;\n     }\n-    logAuditEvent(true, operationName, filter.toString(), null,\n-        null);\n+    logAuditEvent(true, operationName, filter.toString());\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    final String operationName \u003d \"listCacheDirectives\";\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n            filter);\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, filter.toString());\n      throw ace;\n    }\n    logAuditEvent(true, operationName, filter.toString());\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     final String operationName \u003d \"listCacheDirectives\";\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n-    readLock();\n-    boolean success \u003d false;\n     try {\n-      checkOperation(OperationCategory.READ);\n-      results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n-          filter);\n-      success \u003d true;\n+      readLock();\n+      try {\n+        checkOperation(OperationCategory.READ);\n+        results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n+            filter);\n+      } finally {\n+        readUnlock(operationName);\n+      }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, operationName, filter.toString(), null,\n+      logAuditEvent(false, operationName, filter.toString(), null,\n           null);\n       throw ace;\n-    } finally {\n-      readUnlock(operationName);\n     }\n-    logAuditEvent(success, operationName, filter.toString(), null,\n+    logAuditEvent(true, operationName, filter.toString(), null,\n         null);\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    final String operationName \u003d \"listCacheDirectives\";\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    try {\n      readLock();\n      try {\n        checkOperation(OperationCategory.READ);\n        results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n            filter);\n      } finally {\n        readUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, filter.toString(), null,\n          null);\n      throw ace;\n    }\n    logAuditEvent(true, operationName, filter.toString(), null,\n        null);\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n+    final String operationName \u003d \"listCacheDirectives\";\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n           filter);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n+      logAuditEvent(success, operationName, filter.toString(), null,\n           null);\n       throw ace;\n     } finally {\n-      readUnlock();\n+      readUnlock(operationName);\n     }\n-    logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n+    logAuditEvent(success, operationName, filter.toString(), null,\n         null);\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    final String operationName \u003d \"listCacheDirectives\";\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n          filter);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, filter.toString(), null,\n          null);\n      throw ace;\n    } finally {\n      readUnlock(operationName);\n    }\n    logAuditEvent(success, operationName, filter.toString(), null,\n        null);\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d27d7fc72e279614212c1eae52a84675073e89fb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9395. Make HDFS audit logging consistant. Contributed by Kuhu Shukla.\n",
      "commitDate": "24/02/16 10:04 AM",
      "commitName": "d27d7fc72e279614212c1eae52a84675073e89fb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "21/02/16 7:51 PM",
      "commitNameOld": "f313516731d787f6be64c9406ca83d941d47ee99",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n           filter);\n       success \u003d true;\n-    } finally {\n-      readUnlock();\n+    } catch (AccessControlException ace) {\n       logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n           null);\n+      throw ace;\n+    } finally {\n+      readUnlock();\n     }\n+    logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n+        null);\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n          filter);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n          null);\n      throw ace;\n    } finally {\n      readUnlock();\n    }\n    logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n        null);\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "e227fb8fbcd414717faded9454b8ef813f7aafea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7459. Consolidate cache-related implementation in FSNamesystem into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "05/12/14 6:37 PM",
      "commitName": "e227fb8fbcd414717faded9454b8ef813f7aafea",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/12/14 2:17 PM",
      "commitNameOld": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,19 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n-    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n-        getPermissionChecker() : null;\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n-      results \u003d\n-          cacheManager.listCacheDirectives(startId, filter, pc);\n+      results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n+          filter);\n       success \u003d true;\n     } finally {\n       readUnlock();\n-      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n-            null);\n-      }\n+      logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n+          null);\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d FSNDNCacheOp.listCacheDirectives(this, cacheManager, startId,\n          filter);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n          null);\n    }\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1959afe1133eee3d099a012635082d82a077c8b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5683. Better audit log messages for caching operations. Contributed by Abhiraj Butala.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/14 2:29 PM",
      "commitName": "1959afe1133eee3d099a012635082d82a077c8b3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "13/05/14 6:15 PM",
      "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n           cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n            null);\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3b008baf35ad335827e704f61db31edfcbc1d141": {
      "type": "Ybodychange",
      "commitMessage": "Undo accidental FSNamesystem change introduced in HDFS-6224 commit.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 5:21 PM",
      "commitName": "3b008baf35ad335827e704f61db31edfcbc1d141",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "10/04/14 3:35 PM",
      "commitNameOld": "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n           cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n+        logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "fad8620a71e12bd291c5ee346d34d7d0a24d2f36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6224. Add a unit test to TestAuditLogger for file permissions passed to logAuditEvent. Contributed by Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586490 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 3:35 PM",
      "commitName": "fad8620a71e12bd291c5ee346d34d7d0a24d2f36",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/04/14 11:25 AM",
      "commitNameOld": "fe328621d4a84ae99efcb6394a910009b4e1761f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n           cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", filter.toString(), null,\n            null);\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d85c017d0488930d806f267141057fc73e68c728": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5651. Remove dfs.namenode.caching.enabled and improve CRM locking. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 6:45 PM",
      "commitName": "d85c017d0488930d806f267141057fc73e68c728",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "20/12/13 8:05 AM",
      "commitNameOld": "04d139e2a0e61a62471556255fc9a65792fa373c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 13.45,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n       long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n     BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n+    cacheManager.waitForRescanIfNeeded();\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n           cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n         logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    cacheManager.waitForRescanIfNeeded();\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f91a45a96c21db9e5d40097c7d3f5d005ae10dde": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 9:12 AM",
      "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      long startId, PathBasedCacheDirective filter) throws IOException {\n+  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n+    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n+          cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDirectives",
            "newValue": "listCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      long startId, PathBasedCacheDirective filter) throws IOException {\n+  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n+    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n+          cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[startId-long, filter-PathBasedCacheDirective]",
            "newValue": "[startId-long, filter-CacheDirectiveInfo]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      long startId, PathBasedCacheDirective filter) throws IOException {\n+  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n+    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n+          cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "BatchedListEntries\u003cPathBasedCacheDirective\u003e",
            "newValue": "BatchedListEntries\u003cCacheDirectiveEntry\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5473. Consistent naming of user-visible caching classes and methods (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544252 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 9:12 AM",
          "commitName": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "20/11/13 6:43 AM",
          "commitNameOld": "f26d2adbf98890cfe350c17241f5049b89a11e3c",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n-      long startId, PathBasedCacheDirective filter) throws IOException {\n+  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n+      long startId, CacheDirectiveInfo filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n+    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n+          cacheManager.listCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n+        logAuditEvent(success, \"listCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cCacheDirectiveEntry\u003e listCacheDirectives(\n      long startId, CacheDirectiveInfo filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cCacheDirectiveEntry\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f79b3e6b17450e9d34c483046b7437b09dd72016": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 2:07 PM",
      "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      long startId, String pool, String path) throws IOException {\n+  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      long startId, PathBasedCacheDirective filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDescriptor\u003e results;\n+    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDescriptors(startId, pool, path, pc);\n+          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDescriptors\", null, null,\n+        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      long startId, PathBasedCacheDirective filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "listPathBasedCacheDescriptors",
            "newValue": "listPathBasedCacheDirectives"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      long startId, String pool, String path) throws IOException {\n+  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      long startId, PathBasedCacheDirective filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDescriptor\u003e results;\n+    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDescriptors(startId, pool, path, pc);\n+          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDescriptors\", null, null,\n+        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      long startId, PathBasedCacheDirective filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[startId-long, pool-String, path-String]",
            "newValue": "[startId-long, filter-PathBasedCacheDirective]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      long startId, String pool, String path) throws IOException {\n+  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      long startId, PathBasedCacheDirective filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDescriptor\u003e results;\n+    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDescriptors(startId, pool, path, pc);\n+          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDescriptors\", null, null,\n+        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      long startId, PathBasedCacheDirective filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "BatchedListEntries\u003cPathBasedCacheDescriptor\u003e",
            "newValue": "BatchedListEntries\u003cPathBasedCacheDirective\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5326. add modifyDirective to cacheAdmin (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539839 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 2:07 PM",
          "commitName": "f79b3e6b17450e9d34c483046b7437b09dd72016",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/11/13 1:49 PM",
          "commitNameOld": "3b91b7dece84b563a4b7cf66c245b7c5ee094578",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.05,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cPathBasedCacheDescriptor\u003e listPathBasedCacheDescriptors(\n-      long startId, String pool, String path) throws IOException {\n+  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n+      long startId, PathBasedCacheDirective filter) throws IOException {\n     checkOperation(OperationCategory.READ);\n     final FSPermissionChecker pc \u003d isPermissionEnabled ?\n         getPermissionChecker() : null;\n-    BatchedListEntries\u003cPathBasedCacheDescriptor\u003e results;\n+    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n     readLock();\n     boolean success \u003d false;\n     try {\n       checkOperation(OperationCategory.READ);\n       results \u003d\n-          cacheManager.listPathBasedCacheDescriptors(startId, pool, path, pc);\n+          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n       success \u003d true;\n     } finally {\n       readUnlock();\n       if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n-        logAuditEvent(success, \"listPathBasedCacheDescriptors\", null, null,\n+        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n             null);\n       }\n     }\n     return results;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cPathBasedCacheDirective\u003e listPathBasedCacheDirectives(\n      long startId, PathBasedCacheDirective filter) throws IOException {\n    checkOperation(OperationCategory.READ);\n    final FSPermissionChecker pc \u003d isPermissionEnabled ?\n        getPermissionChecker() : null;\n    BatchedListEntries\u003cPathBasedCacheDirective\u003e results;\n    readLock();\n    boolean success \u003d false;\n    try {\n      checkOperation(OperationCategory.READ);\n      results \u003d\n          cacheManager.listPathBasedCacheDirectives(startId, filter, pc);\n      success \u003d true;\n    } finally {\n      readUnlock();\n      if (isAuditEnabled() \u0026\u0026 isExternalInvocation()) {\n        logAuditEvent(success, \"listPathBasedCacheDirectives\", null, null,\n            null);\n      }\n    }\n    return results;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}