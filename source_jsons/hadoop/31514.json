{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineEntityReader.java",
  "functionName": "readMetrics",
  "functionId": "readMetrics___entity-TimelineEntity__result-Result__columnPrefix-ColumnPrefix__?__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
  "functionStartLine": 354,
  "functionEndLine": 371,
  "numCommitsSeen": 26,
  "timeTaken": 5808,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ybodychange",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   protected void readMetrics(TimelineEntity entity, Result result,\n       ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n     NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n-        columnPrefix.readResultsWithTimestamps(\n-            result, stringKeyConverter);\n+        ColumnRWHelper.readResultsWithTimestamps(\n+            result, columnPrefix, stringKeyConverter);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n       metric.setType(metricType);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        ColumnRWHelper.readResultsWithTimestamps(\n            result, columnPrefix, stringKeyConverter);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n      metric.setType(metricType);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n   protected void readMetrics(TimelineEntity entity, Result result,\n       ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n     NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n-        columnPrefix.readResultsWithTimestamps(\n-            result, stringKeyConverter);\n+        ColumnRWHelper.readResultsWithTimestamps(\n+            result, columnPrefix, stringKeyConverter);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n       metric.setType(metricType);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        ColumnRWHelper.readResultsWithTimestamps(\n            result, columnPrefix, stringKeyConverter);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n      metric.setType(metricType);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(\n            result, stringKeyConverter);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n      metric.setType(metricType);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   protected void readMetrics(TimelineEntity entity, Result result,\n       ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n     NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n         columnPrefix.readResultsWithTimestamps(\n-            result, StringKeyConverter.getInstance());\n+            result, stringKeyConverter);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n       metric.setType(metricType);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(\n            result, stringKeyConverter);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n      metric.setType(metricType);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {}
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   protected void readMetrics(TimelineEntity entity, Result result,\n       ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n     NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n         columnPrefix.readResultsWithTimestamps(\n             result, StringKeyConverter.getInstance());\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n-      metric.setType(metricResult.getValue().size() \u003e 1 ?\n-          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n+      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n+          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n+      metric.setType(metricType);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(\n            result, StringKeyConverter.getInstance());\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      TimelineMetric.Type metricType \u003d metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE;\n      metric.setType(metricType);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {}
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   protected void readMetrics(TimelineEntity entity, Result result,\n       ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n     NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n-        columnPrefix.readResultsWithTimestamps(result);\n+        columnPrefix.readResultsWithTimestamps(\n+            result, StringKeyConverter.getInstance());\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(\n            result, StringKeyConverter.getInstance());\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {}
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/TimelineEntityReader.java"
      }
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-  private static void readMetrics(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n-    if (isApplication) {\n-      metricsResult \u003d\n-          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    } else {\n-      metricsResult \u003d\n-          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    }\n+  protected void readMetrics(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n+        columnPrefix.readResultsWithTimestamps(result);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
            "oldMethodName": "readMetrics",
            "newMethodName": "readMetrics"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-  private static void readMetrics(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n-    if (isApplication) {\n-      metricsResult \u003d\n-          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    } else {\n-      metricsResult \u003d\n-          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    }\n+  protected void readMetrics(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n+        columnPrefix.readResultsWithTimestamps(result);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-  private static void readMetrics(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n-    if (isApplication) {\n-      metricsResult \u003d\n-          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    } else {\n-      metricsResult \u003d\n-          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    }\n+  protected void readMetrics(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n+        columnPrefix.readResultsWithTimestamps(result);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
          "commitAuthor": "Vrushali",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,16 @@\n-  private static void readMetrics(TimelineEntity entity, Result result,\n-      boolean isApplication) throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n-    if (isApplication) {\n-      metricsResult \u003d\n-          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    } else {\n-      metricsResult \u003d\n-          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n-    }\n+  protected void readMetrics(TimelineEntity entity, Result result,\n+      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n+        columnPrefix.readResultsWithTimestamps(result);\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void readMetrics(TimelineEntity entity, Result result,\n      ColumnPrefix\u003c?\u003e columnPrefix) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        columnPrefix.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/TimelineEntityReader.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity, result-Result, isApplication-boolean]",
            "newValue": "[entity-TimelineEntity, result-Result, columnPrefix-ColumnPrefix\u003c?\u003e]"
          }
        }
      ]
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-  private static void readMetrics(TimelineEntity entity, Result result)\n-      throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n-        EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+  private static void readMetrics(TimelineEntity entity, Result result,\n+      boolean isApplication) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n+    if (isApplication) {\n+      metricsResult \u003d\n+          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+    } else {\n+      metricsResult \u003d\n+          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+    }\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void readMetrics(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n    if (isApplication) {\n      metricsResult \u003d\n          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n    } else {\n      metricsResult \u003d\n          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n    }\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity, result-Result]",
            "newValue": "[entity-TimelineEntity, result-Result, isApplication-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,22 @@\n-  private static void readMetrics(TimelineEntity entity, Result result)\n-      throws IOException {\n-    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n-        EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+  private static void readMetrics(TimelineEntity entity, Result result,\n+      boolean isApplication) throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n+    if (isApplication) {\n+      metricsResult \u003d\n+          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+    } else {\n+      metricsResult \u003d\n+          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+    }\n     for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n         metricsResult.entrySet()) {\n       TimelineMetric metric \u003d new TimelineMetric();\n       metric.setId(metricResult.getKey());\n       // Simply assume that if the value set contains more than 1 elements, the\n       // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n       metric.setType(metricResult.getValue().size() \u003e 1 ?\n           TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n       metric.addValues(metricResult.getValue());\n       entity.addMetric(metric);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void readMetrics(TimelineEntity entity, Result result,\n      boolean isApplication) throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult;\n    if (isApplication) {\n      metricsResult \u003d\n          ApplicationColumnPrefix.METRIC.readResultsWithTimestamps(result);\n    } else {\n      metricsResult \u003d\n          EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n    }\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3049. [Storage Implementation] Implement storage reader interface to fetch raw data from HBase backend (Zhijie Shen via sjlee)\n\n(cherry picked from commit 07433c2ad52df9e844dbd90020c277d3df844dcd)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,16 @@\n+  private static void readMetrics(TimelineEntity entity, Result result)\n+      throws IOException {\n+    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n+        EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n+    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n+        metricsResult.entrySet()) {\n+      TimelineMetric metric \u003d new TimelineMetric();\n+      metric.setId(metricResult.getKey());\n+      // Simply assume that if the value set contains more than 1 elements, the\n+      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n+      metric.setType(metricResult.getValue().size() \u003e 1 ?\n+          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n+      metric.addValues(metricResult.getValue());\n+      entity.addMetric(metric);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void readMetrics(TimelineEntity entity, Result result)\n      throws IOException {\n    NavigableMap\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricsResult \u003d\n        EntityColumnPrefix.METRIC.readResultsWithTimestamps(result);\n    for (Map.Entry\u003cString, NavigableMap\u003cLong, Number\u003e\u003e metricResult:\n        metricsResult.entrySet()) {\n      TimelineMetric metric \u003d new TimelineMetric();\n      metric.setId(metricResult.getKey());\n      // Simply assume that if the value set contains more than 1 elements, the\n      // metric is a TIME_SERIES metric, otherwise, it\u0027s a SINGLE_VALUE metric\n      metric.setType(metricResult.getValue().size() \u003e 1 ?\n          TimelineMetric.Type.TIME_SERIES : TimelineMetric.Type.SINGLE_VALUE);\n      metric.addValues(metricResult.getValue());\n      entity.addMetric(metric);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineReaderImpl.java"
    }
  }
}