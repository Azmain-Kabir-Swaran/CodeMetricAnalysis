{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheManager.java",
  "functionName": "computeNeeded",
  "functionId": "computeNeeded___path-String__replication-short",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
  "functionStartLine": 446,
  "functionEndLine": 480,
  "numCommitsSeen": 56,
  "timeTaken": 3075,
  "changeHistory": [
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "46f1602e896273b308fbd5df6c75f6c142828227",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "991c453ca3ac141a3f286f74af8401f83c38b230"
  ],
  "changeHistoryShort": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "46f1602e896273b308fbd5df6c75f6c142828227": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/10/16 9:27 AM",
      "commitNameOld": "744208431f7365bf054e6b773b86af2583001e1d",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.24,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private CacheDirectiveStats computeNeeded(String path, short replication) {\n     FSDirectory fsDir \u003d namesystem.getFSDirectory();\n     INode node;\n     long requestedBytes \u003d 0;\n     long requestedFiles \u003d 0;\n     CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n     try {\n-      node \u003d fsDir.getINode(path);\n-    } catch (UnresolvedLinkException e) {\n-      // We don\u0027t cache through symlinks\n+      node \u003d fsDir.getINode(path, DirOp.READ);\n+    } catch (IOException e) {\n+      // We don\u0027t cache through invalid paths\n       return builder.build();\n     }\n     if (node \u003d\u003d null) {\n       return builder.build();\n     }\n     if (node.isFile()) {\n       requestedFiles \u003d 1;\n       INodeFile file \u003d node.asFile();\n       requestedBytes \u003d file.computeFileSize();\n     } else if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       ReadOnlyList\u003cINode\u003e children \u003d dir\n           .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       requestedFiles \u003d children.size();\n       for (INode child : children) {\n         if (child.isFile()) {\n           requestedBytes +\u003d child.asFile().computeFileSize();\n         }\n       }\n     }\n     return new CacheDirectiveStats.Builder()\n         .setBytesNeeded(requestedBytes * replication)\n         .setFilesCached(requestedFiles)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CacheDirectiveStats computeNeeded(String path, short replication) {\n    FSDirectory fsDir \u003d namesystem.getFSDirectory();\n    INode node;\n    long requestedBytes \u003d 0;\n    long requestedFiles \u003d 0;\n    CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n    try {\n      node \u003d fsDir.getINode(path, DirOp.READ);\n    } catch (IOException e) {\n      // We don\u0027t cache through invalid paths\n      return builder.build();\n    }\n    if (node \u003d\u003d null) {\n      return builder.build();\n    }\n    if (node.isFile()) {\n      requestedFiles \u003d 1;\n      INodeFile file \u003d node.asFile();\n      requestedBytes \u003d file.computeFileSize();\n    } else if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      ReadOnlyList\u003cINode\u003e children \u003d dir\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      requestedFiles \u003d children.size();\n      for (INode child : children) {\n        if (child.isFile()) {\n          requestedBytes +\u003d child.asFile().computeFileSize();\n        }\n      }\n    }\n    return new CacheDirectiveStats.Builder()\n        .setBytesNeeded(requestedBytes * replication)\n        .setFilesCached(requestedFiles)\n        .build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "46f1602e896273b308fbd5df6c75f6c142828227": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10448. CacheManager#addInternal tracks bytesNeeded incorrectly when dealing with replication factors other than 1 (Yiqun Lin via cmccabe)\n",
      "commitDate": "20/06/16 6:25 PM",
      "commitName": "46f1602e896273b308fbd5df6c75f6c142828227",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "20/06/16 10:42 AM",
      "commitNameOld": "5f6b4157a40e974ccc6a56c39dbd35c54f393fbd",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private CacheDirectiveStats computeNeeded(String path, short replication) {\n     FSDirectory fsDir \u003d namesystem.getFSDirectory();\n     INode node;\n     long requestedBytes \u003d 0;\n     long requestedFiles \u003d 0;\n     CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n     try {\n       node \u003d fsDir.getINode(path);\n     } catch (UnresolvedLinkException e) {\n       // We don\u0027t cache through symlinks\n       return builder.build();\n     }\n     if (node \u003d\u003d null) {\n       return builder.build();\n     }\n     if (node.isFile()) {\n       requestedFiles \u003d 1;\n       INodeFile file \u003d node.asFile();\n       requestedBytes \u003d file.computeFileSize();\n     } else if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n       ReadOnlyList\u003cINode\u003e children \u003d dir\n           .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       requestedFiles \u003d children.size();\n       for (INode child : children) {\n         if (child.isFile()) {\n           requestedBytes +\u003d child.asFile().computeFileSize();\n         }\n       }\n     }\n     return new CacheDirectiveStats.Builder()\n-        .setBytesNeeded(requestedBytes)\n+        .setBytesNeeded(requestedBytes * replication)\n         .setFilesCached(requestedFiles)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CacheDirectiveStats computeNeeded(String path, short replication) {\n    FSDirectory fsDir \u003d namesystem.getFSDirectory();\n    INode node;\n    long requestedBytes \u003d 0;\n    long requestedFiles \u003d 0;\n    CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n    try {\n      node \u003d fsDir.getINode(path);\n    } catch (UnresolvedLinkException e) {\n      // We don\u0027t cache through symlinks\n      return builder.build();\n    }\n    if (node \u003d\u003d null) {\n      return builder.build();\n    }\n    if (node.isFile()) {\n      requestedFiles \u003d 1;\n      INodeFile file \u003d node.asFile();\n      requestedBytes \u003d file.computeFileSize();\n    } else if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      ReadOnlyList\u003cINode\u003e children \u003d dir\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      requestedFiles \u003d children.size();\n      for (INode child : children) {\n        if (child.isFile()) {\n          requestedBytes +\u003d child.asFile().computeFileSize();\n        }\n      }\n    }\n    return new CacheDirectiveStats.Builder()\n        .setBytesNeeded(requestedBytes * replication)\n        .setFilesCached(requestedFiles)\n        .build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/01/14 6:45 PM",
      "commitNameOld": "d85c017d0488930d806f267141057fc73e68c728",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.75,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   private CacheDirectiveStats computeNeeded(String path, short replication) {\n     FSDirectory fsDir \u003d namesystem.getFSDirectory();\n     INode node;\n     long requestedBytes \u003d 0;\n     long requestedFiles \u003d 0;\n     CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n     try {\n       node \u003d fsDir.getINode(path);\n     } catch (UnresolvedLinkException e) {\n       // We don\u0027t cache through symlinks\n       return builder.build();\n     }\n     if (node \u003d\u003d null) {\n       return builder.build();\n     }\n     if (node.isFile()) {\n       requestedFiles \u003d 1;\n       INodeFile file \u003d node.asFile();\n       requestedBytes \u003d file.computeFileSize();\n     } else if (node.isDirectory()) {\n       INodeDirectory dir \u003d node.asDirectory();\n-      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n+      ReadOnlyList\u003cINode\u003e children \u003d dir\n+          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       requestedFiles \u003d children.size();\n       for (INode child : children) {\n         if (child.isFile()) {\n           requestedBytes +\u003d child.asFile().computeFileSize();\n         }\n       }\n     }\n     return new CacheDirectiveStats.Builder()\n         .setBytesNeeded(requestedBytes)\n         .setFilesCached(requestedFiles)\n         .build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CacheDirectiveStats computeNeeded(String path, short replication) {\n    FSDirectory fsDir \u003d namesystem.getFSDirectory();\n    INode node;\n    long requestedBytes \u003d 0;\n    long requestedFiles \u003d 0;\n    CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n    try {\n      node \u003d fsDir.getINode(path);\n    } catch (UnresolvedLinkException e) {\n      // We don\u0027t cache through symlinks\n      return builder.build();\n    }\n    if (node \u003d\u003d null) {\n      return builder.build();\n    }\n    if (node.isFile()) {\n      requestedFiles \u003d 1;\n      INodeFile file \u003d node.asFile();\n      requestedBytes \u003d file.computeFileSize();\n    } else if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      ReadOnlyList\u003cINode\u003e children \u003d dir\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      requestedFiles \u003d children.size();\n      for (INode child : children) {\n        if (child.isFile()) {\n          requestedBytes +\u003d child.asFile().computeFileSize();\n        }\n      }\n    }\n    return new CacheDirectiveStats.Builder()\n        .setBytesNeeded(requestedBytes)\n        .setFilesCached(requestedFiles)\n        .build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,34 @@\n+  private CacheDirectiveStats computeNeeded(String path, short replication) {\n+    FSDirectory fsDir \u003d namesystem.getFSDirectory();\n+    INode node;\n+    long requestedBytes \u003d 0;\n+    long requestedFiles \u003d 0;\n+    CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n+    try {\n+      node \u003d fsDir.getINode(path);\n+    } catch (UnresolvedLinkException e) {\n+      // We don\u0027t cache through symlinks\n+      return builder.build();\n+    }\n+    if (node \u003d\u003d null) {\n+      return builder.build();\n+    }\n+    if (node.isFile()) {\n+      requestedFiles \u003d 1;\n+      INodeFile file \u003d node.asFile();\n+      requestedBytes \u003d file.computeFileSize();\n+    } else if (node.isDirectory()) {\n+      INodeDirectory dir \u003d node.asDirectory();\n+      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n+      requestedFiles \u003d children.size();\n+      for (INode child : children) {\n+        if (child.isFile()) {\n+          requestedBytes +\u003d child.asFile().computeFileSize();\n+        }\n+      }\n+    }\n+    return new CacheDirectiveStats.Builder()\n+        .setBytesNeeded(requestedBytes)\n+        .setFilesCached(requestedFiles)\n+        .build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CacheDirectiveStats computeNeeded(String path, short replication) {\n    FSDirectory fsDir \u003d namesystem.getFSDirectory();\n    INode node;\n    long requestedBytes \u003d 0;\n    long requestedFiles \u003d 0;\n    CacheDirectiveStats.Builder builder \u003d new CacheDirectiveStats.Builder();\n    try {\n      node \u003d fsDir.getINode(path);\n    } catch (UnresolvedLinkException e) {\n      // We don\u0027t cache through symlinks\n      return builder.build();\n    }\n    if (node \u003d\u003d null) {\n      return builder.build();\n    }\n    if (node.isFile()) {\n      requestedFiles \u003d 1;\n      INodeFile file \u003d node.asFile();\n      requestedBytes \u003d file.computeFileSize();\n    } else if (node.isDirectory()) {\n      INodeDirectory dir \u003d node.asDirectory();\n      ReadOnlyList\u003cINode\u003e children \u003d dir.getChildrenList(null);\n      requestedFiles \u003d children.size();\n      for (INode child : children) {\n        if (child.isFile()) {\n          requestedBytes +\u003d child.asFile().computeFileSize();\n        }\n      }\n    }\n    return new CacheDirectiveStats.Builder()\n        .setBytesNeeded(requestedBytes)\n        .setFilesCached(requestedFiles)\n        .build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java"
    }
  }
}