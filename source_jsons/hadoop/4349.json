{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LayoutVersion.java",
  "functionName": "updateMap",
  "functionId": "updateMap___map-Map__Integer,SortedSet__LayoutFeature______features-LayoutFeature[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LayoutVersion.java",
  "functionStartLine": 240,
  "functionEndLine": 276,
  "numCommitsSeen": 28,
  "timeTaken": 1019,
  "changeHistory": [
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5"
  ],
  "changeHistoryShort": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ybodychange"
  },
  "changeHistoryDetails": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "15/10/14 8:56 PM",
      "commitNameOld": "2894433332a242259af53dc73a156aa523e3e6c7",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 233.53,
      "commitsBetweenForRepo": 1983,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,37 @@\n   public static void updateMap(Map\u003cInteger, SortedSet\u003cLayoutFeature\u003e\u003e map,\n       LayoutFeature[] features) {\n     // Go through all the enum constants and build a map of\n     // LayoutVersion \u003c-\u003e Set of all supported features in that LayoutVersion\n+    SortedSet\u003cLayoutFeature\u003e existingFeatures \u003d new TreeSet\u003cLayoutFeature\u003e(\n+        new LayoutFeatureComparator());\n+    for (SortedSet\u003cLayoutFeature\u003e s : map.values()) {\n+      existingFeatures.addAll(s);\n+    }\n+    LayoutFeature prevF \u003d existingFeatures.isEmpty() ? null :\n+        existingFeatures.first();\n     for (LayoutFeature f : features) {\n       final FeatureInfo info \u003d f.getInfo();\n+      int minCompatLV \u003d info.getMinimumCompatibleLayoutVersion();\n+      if (prevF !\u003d null \u0026\u0026\n+          minCompatLV \u003e prevF.getInfo().getMinimumCompatibleLayoutVersion()) {\n+        throw new AssertionError(String.format(\n+            \"Features must be listed in order of minimum compatible layout \" +\n+            \"version.  Check features %s and %s.\", prevF, f));\n+      }\n+      prevF \u003d f;\n       SortedSet\u003cLayoutFeature\u003e ancestorSet \u003d map.get(info.getAncestorLayoutVersion());\n       if (ancestorSet \u003d\u003d null) {\n         // Empty set\n         ancestorSet \u003d new TreeSet\u003cLayoutFeature\u003e(new LayoutFeatureComparator());\n         map.put(info.getAncestorLayoutVersion(), ancestorSet);\n       }\n       SortedSet\u003cLayoutFeature\u003e featureSet \u003d new TreeSet\u003cLayoutFeature\u003e(ancestorSet);\n       if (info.getSpecialFeatures() !\u003d null) {\n         for (LayoutFeature specialFeature : info.getSpecialFeatures()) {\n           featureSet.add(specialFeature);\n         }\n       }\n       featureSet.add(f);\n       map.put(info.getLayoutVersion(), featureSet);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void updateMap(Map\u003cInteger, SortedSet\u003cLayoutFeature\u003e\u003e map,\n      LayoutFeature[] features) {\n    // Go through all the enum constants and build a map of\n    // LayoutVersion \u003c-\u003e Set of all supported features in that LayoutVersion\n    SortedSet\u003cLayoutFeature\u003e existingFeatures \u003d new TreeSet\u003cLayoutFeature\u003e(\n        new LayoutFeatureComparator());\n    for (SortedSet\u003cLayoutFeature\u003e s : map.values()) {\n      existingFeatures.addAll(s);\n    }\n    LayoutFeature prevF \u003d existingFeatures.isEmpty() ? null :\n        existingFeatures.first();\n    for (LayoutFeature f : features) {\n      final FeatureInfo info \u003d f.getInfo();\n      int minCompatLV \u003d info.getMinimumCompatibleLayoutVersion();\n      if (prevF !\u003d null \u0026\u0026\n          minCompatLV \u003e prevF.getInfo().getMinimumCompatibleLayoutVersion()) {\n        throw new AssertionError(String.format(\n            \"Features must be listed in order of minimum compatible layout \" +\n            \"version.  Check features %s and %s.\", prevF, f));\n      }\n      prevF \u003d f;\n      SortedSet\u003cLayoutFeature\u003e ancestorSet \u003d map.get(info.getAncestorLayoutVersion());\n      if (ancestorSet \u003d\u003d null) {\n        // Empty set\n        ancestorSet \u003d new TreeSet\u003cLayoutFeature\u003e(new LayoutFeatureComparator());\n        map.put(info.getAncestorLayoutVersion(), ancestorSet);\n      }\n      SortedSet\u003cLayoutFeature\u003e featureSet \u003d new TreeSet\u003cLayoutFeature\u003e(ancestorSet);\n      if (info.getSpecialFeatures() !\u003d null) {\n        for (LayoutFeature specialFeature : info.getSpecialFeatures()) {\n          featureSet.add(specialFeature);\n        }\n      }\n      featureSet.add(f);\n      map.put(info.getLayoutVersion(), featureSet);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/LayoutVersion.java",
      "extendedDetails": {}
    }
  }
}