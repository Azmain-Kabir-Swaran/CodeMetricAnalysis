{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxies.java",
  "functionName": "createNNProxyWithNamenodeProtocol",
  "functionId": "createNNProxyWithNamenodeProtocol___address-InetSocketAddress__conf-Configuration__ugi-UserGroupInformation__withRetries-boolean__alignmentContext-AlignmentContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
  "functionStartLine": 269,
  "functionEndLine": 289,
  "numCommitsSeen": 116,
  "timeTaken": 3607,
  "changeHistory": [
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
    "f4151bbf4f54dc33836c76e6860aa043a9626e48",
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
    "c69dfdd5e14af490790dff8227b11962ec816577"
  ],
  "changeHistoryShort": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": "Ymultichange(Yparameterchange,Ybodychange)",
    "f4151bbf4f54dc33836c76e6860aa043a9626e48": "Ybodychange",
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1": "Ybodychange",
    "c69dfdd5e14af490790dff8227b11962ec816577": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange)"
  },
  "changeHistoryDetails": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
      "commitDate": "14/02/19 11:22 AM",
      "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
          "commitDate": "14/02/19 11:22 AM",
          "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 160.9,
          "commitsBetweenForRepo": 1283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n   private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class, 0);\n+      boolean withRetries, AlignmentContext alignmentContext)\n+      throws IOException {\n+    NamenodeProtocolPB proxy \u003d createNameNodeProxy(\n+        address, conf, ugi, NamenodeProtocolPB.class, 0, alignmentContext);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n               TimeUnit.MILLISECONDS);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n            \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n       NamenodeProtocol translatorProxy \u003d\n           new NamenodeProtocolTranslatorPB(proxy);\n       return (NamenodeProtocol) RetryProxy.create(\n           NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n     } else {\n       return new NamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AlignmentContext alignmentContext)\n      throws IOException {\n    NamenodeProtocolPB proxy \u003d createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class, 0, alignmentContext);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n              TimeUnit.MILLISECONDS);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n           \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n      NamenodeProtocol translatorProxy \u003d\n          new NamenodeProtocolTranslatorPB(proxy);\n      return (NamenodeProtocol) RetryProxy.create(\n          NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n    } else {\n      return new NamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[address-InetSocketAddress, conf-Configuration, ugi-UserGroupInformation, withRetries-boolean]",
            "newValue": "[address-InetSocketAddress, conf-Configuration, ugi-UserGroupInformation, withRetries-boolean, alignmentContext-AlignmentContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
          "commitDate": "14/02/19 11:22 AM",
          "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "06/09/18 2:48 PM",
          "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 160.9,
          "commitsBetweenForRepo": 1283,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n   private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n-      boolean withRetries) throws IOException {\n-    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class, 0);\n+      boolean withRetries, AlignmentContext alignmentContext)\n+      throws IOException {\n+    NamenodeProtocolPB proxy \u003d createNameNodeProxy(\n+        address, conf, ugi, NamenodeProtocolPB.class, 0, alignmentContext);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n               TimeUnit.MILLISECONDS);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n            \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n       NamenodeProtocol translatorProxy \u003d\n           new NamenodeProtocolTranslatorPB(proxy);\n       return (NamenodeProtocol) RetryProxy.create(\n           NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n     } else {\n       return new NamenodeProtocolTranslatorPB(proxy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries, AlignmentContext alignmentContext)\n      throws IOException {\n    NamenodeProtocolPB proxy \u003d createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class, 0, alignmentContext);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n              TimeUnit.MILLISECONDS);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n           \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n      NamenodeProtocol translatorProxy \u003d\n          new NamenodeProtocolTranslatorPB(proxy);\n      return (NamenodeProtocol) RetryProxy.create(\n          NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n    } else {\n      return new NamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4151bbf4f54dc33836c76e6860aa043a9626e48": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6478. RemoteException can\u0027t be retried properly for non-HA scenario. Contributed by Ming Ma.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611410 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:37 AM",
      "commitName": "f4151bbf4f54dc33836c76e6860aa043a9626e48",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/06/14 10:16 PM",
      "commitNameOld": "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 24.51,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n   private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n         address, conf, ugi, NamenodeProtocolPB.class, 0);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n-          TimeUnit.MILLISECONDS);\n-      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n-                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n-          exceptionToPolicyMap);\n-      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n-                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n-      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n-      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n-      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n-          proxy, methodNameToPolicyMap);\n+              TimeUnit.MILLISECONDS);\n+      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n+           \u003d new HashMap\u003cString, RetryPolicy\u003e();\n+      methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n+      methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n+      NamenodeProtocol translatorProxy \u003d\n+          new NamenodeProtocolTranslatorPB(proxy);\n+      return (NamenodeProtocol) RetryProxy.create(\n+          NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n+    } else {\n+      return new NamenodeProtocolTranslatorPB(proxy);\n     }\n-    return new NamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class, 0);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n              TimeUnit.MILLISECONDS);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap\n           \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", timeoutPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", timeoutPolicy);\n      NamenodeProtocol translatorProxy \u003d\n          new NamenodeProtocolTranslatorPB(proxy);\n      return (NamenodeProtocol) RetryProxy.create(\n          NamenodeProtocol.class, translatorProxy, methodNameToPolicyMap);\n    } else {\n      return new NamenodeProtocolTranslatorPB(proxy);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3126. Journal stream from Namenode to BackupNode needs to have timeout. Contributed by Hari Mankude.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 5:55 PM",
      "commitName": "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/03/12 11:50 PM",
      "commitNameOld": "3573d504e40accd4b16dbb6d697ff5ea9019d62a",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n-        address, conf, ugi, NamenodeProtocolPB.class);\n+        address, conf, ugi, NamenodeProtocolPB.class, 0);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n           TimeUnit.MILLISECONDS);\n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                      \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n           exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                      \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n       proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n           proxy, methodNameToPolicyMap);\n     }\n     return new NamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class, 0);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n          TimeUnit.MILLISECONDS);\n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n          exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n          proxy, methodNameToPolicyMap);\n    }\n    return new NamenodeProtocolTranslatorPB(proxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "c69dfdd5e14af490790dff8227b11962ec816577": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange)",
      "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:09 PM",
      "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n         address, conf, ugi, NamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n           TimeUnit.MILLISECONDS);\n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                      \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n           exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                      \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n       proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n           proxy, methodNameToPolicyMap);\n     }\n     return new NamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n          TimeUnit.MILLISECONDS);\n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n          exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n          proxy, methodNameToPolicyMap);\n    }\n    return new NamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
            "oldMethodName": "createNNProxyWithNamenodeProtocol",
            "newMethodName": "createNNProxyWithNamenodeProtocol"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n         address, conf, ugi, NamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n           TimeUnit.MILLISECONDS);\n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                      \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n           exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                      \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n       proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n           proxy, methodNameToPolicyMap);\n     }\n     return new NamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n          TimeUnit.MILLISECONDS);\n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n          exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n          proxy, methodNameToPolicyMap);\n    }\n    return new NamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "NamenodeProtocolTranslatorPB",
            "newValue": "NamenodeProtocol"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  public static NamenodeProtocolTranslatorPB createNNProxyWithNamenodeProtocol(\n+  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n       InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n       boolean withRetries) throws IOException {\n     NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n         address, conf, ugi, NamenodeProtocolPB.class);\n     if (withRetries) { // create the proxy with retries\n       RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n           TimeUnit.MILLISECONDS);\n       Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                      \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n       RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n           exceptionToPolicyMap);\n       Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                      \u003d new HashMap\u003cString, RetryPolicy\u003e();\n       methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n       methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n       proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n           proxy, methodNameToPolicyMap);\n     }\n     return new NamenodeProtocolTranslatorPB(proxy);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static NamenodeProtocol createNNProxyWithNamenodeProtocol(\n      InetSocketAddress address, Configuration conf, UserGroupInformation ugi,\n      boolean withRetries) throws IOException {\n    NamenodeProtocolPB proxy \u003d (NamenodeProtocolPB) createNameNodeProxy(\n        address, conf, ugi, NamenodeProtocolPB.class);\n    if (withRetries) { // create the proxy with retries\n      RetryPolicy timeoutPolicy \u003d RetryPolicies.exponentialBackoffRetry(5, 200,\n          TimeUnit.MILLISECONDS);\n      Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \n                     \u003d new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n      RetryPolicy methodPolicy \u003d RetryPolicies.retryByException(timeoutPolicy,\n          exceptionToPolicyMap);\n      Map\u003cString, RetryPolicy\u003e methodNameToPolicyMap \n                     \u003d new HashMap\u003cString, RetryPolicy\u003e();\n      methodNameToPolicyMap.put(\"getBlocks\", methodPolicy);\n      methodNameToPolicyMap.put(\"getAccessKeys\", methodPolicy);\n      proxy \u003d (NamenodeProtocolPB) RetryProxy.create(NamenodeProtocolPB.class,\n          proxy, methodNameToPolicyMap);\n    }\n    return new NamenodeProtocolTranslatorPB(proxy);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        }
      ]
    }
  }
}