{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "handle",
  "functionId": "handle___event-SchedulerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1212,
  "functionEndLine": 1342,
  "numCommitsSeen": 228,
  "timeTaken": 9745,
  "changeHistory": [
    "cfec455c452d85229ef2f9d83e6f7fc827946b59",
    "5257f50abb71905ef3068fd45541d00ce9e8f355",
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
    "9b272ccae78918e7d756d84920a9322187d61eed",
    "dd4b387d96abc66ddebb569b3775b18b19aed027",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
    "5c14bc426b4be381383018ebc2236be83eef15cd",
    "5197f8c3c53f18701f041dd2301b454930a5025b",
    "bda23181bf1931c37d2590e03da9acdc6688ad34",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288",
    "171493215889a3b6bf2f6ba33212c4f06861a189",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "cfec455c452d85229ef2f9d83e6f7fc827946b59": "Ybodychange",
    "5257f50abb71905ef3068fd45541d00ce9e8f355": "Ybodychange",
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": "Ybodychange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ybodychange",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ybodychange",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ybodychange",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ybodychange",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ybodychange",
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4": "Ybodychange",
    "9b272ccae78918e7d756d84920a9322187d61eed": "Ybodychange",
    "dd4b387d96abc66ddebb569b3775b18b19aed027": "Ybodychange",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": "Ybodychange",
    "5c14bc426b4be381383018ebc2236be83eef15cd": "Ybodychange",
    "5197f8c3c53f18701f041dd2301b454930a5025b": "Ybodychange",
    "bda23181bf1931c37d2590e03da9acdc6688ad34": "Ybodychange",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Ybodychange",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": "Ybodychange",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": "Ybodychange",
    "171493215889a3b6bf2f6ba33212c4f06861a189": "Ybodychange",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": "Ybodychange",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cfec455c452d85229ef2f9d83e6f7fc827946b59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-999. In case of long running tasks, reduce node resource should balloon out resource quickly by calling preemption API and suspending running task. Contributed by Inigo Goiri.\n",
      "commitDate": "09/04/19 10:59 AM",
      "commitName": "cfec455c452d85229ef2f9d83e6f7fc827946b59",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "25/03/19 10:47 PM",
      "commitNameOld": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthorOld": "yufei",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,131 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering(),\n             appAddedEvent.getPlacementContext());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case RELEASE_CONTAINER:\n       if (!(event instanceof ReleaseContainerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n       completedContainer(container,\n           SchedulerUtils.createAbnormalContainerStatus(\n               container.getContainerId(),\n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n+    case MARK_CONTAINER_FOR_PREEMPTION:\n+      if (!(event instanceof ContainerPreemptEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerPreemptEvent preemptContainerEvent \u003d\n+          (ContainerPreemptEvent)event;\n+      ApplicationAttemptId appId \u003d preemptContainerEvent.getAppId();\n+      RMContainer preemptedContainer \u003d preemptContainerEvent.getContainer();\n+      FSAppAttempt app \u003d getApplicationAttempt(appId);\n+      app.trackContainerForPreemption(preemptedContainer);\n+      break;\n+    case MARK_CONTAINER_FOR_KILLABLE:\n+      if (!(event instanceof ContainerPreemptEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerPreemptEvent containerKillableEvent \u003d\n+          (ContainerPreemptEvent)event;\n+      RMContainer killableContainer \u003d containerKillableEvent.getContainer();\n+      completedContainer(killableContainer,\n+          SchedulerUtils.createPreemptedContainerStatus(\n+              killableContainer.getContainerId(),\n+              SchedulerUtils.PREEMPTED_CONTAINER),\n+          RMContainerEventType.KILL);\n+      break;\n     default:\n-      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n+      LOG.error(\"Unknown event arrived at FairScheduler: {}\", event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering(),\n            appAddedEvent.getPlacementContext());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case RELEASE_CONTAINER:\n      if (!(event instanceof ReleaseContainerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n      completedContainer(container,\n          SchedulerUtils.createAbnormalContainerStatus(\n              container.getContainerId(),\n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    case MARK_CONTAINER_FOR_PREEMPTION:\n      if (!(event instanceof ContainerPreemptEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerPreemptEvent preemptContainerEvent \u003d\n          (ContainerPreemptEvent)event;\n      ApplicationAttemptId appId \u003d preemptContainerEvent.getAppId();\n      RMContainer preemptedContainer \u003d preemptContainerEvent.getContainer();\n      FSAppAttempt app \u003d getApplicationAttempt(appId);\n      app.trackContainerForPreemption(preemptedContainer);\n      break;\n    case MARK_CONTAINER_FOR_KILLABLE:\n      if (!(event instanceof ContainerPreemptEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerPreemptEvent containerKillableEvent \u003d\n          (ContainerPreemptEvent)event;\n      RMContainer killableContainer \u003d containerKillableEvent.getContainer();\n      completedContainer(killableContainer,\n          SchedulerUtils.createPreemptedContainerStatus(\n              killableContainer.getContainerId(),\n              SchedulerUtils.PREEMPTED_CONTAINER),\n          RMContainerEventType.KILL);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: {}\", event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "5257f50abb71905ef3068fd45541d00ce9e8f355": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8967. Change FairScheduler to use PlacementRule interface. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "25/03/19 10:47 PM",
      "commitName": "5257f50abb71905ef3068fd45541d00ce9e8f355",
      "commitAuthor": "yufei",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 10.27,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,107 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n-            appAddedEvent.getIsAppRecovering());\n+            appAddedEvent.getIsAppRecovering(),\n+            appAddedEvent.getPlacementContext());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case RELEASE_CONTAINER:\n       if (!(event instanceof ReleaseContainerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n       completedContainer(container,\n           SchedulerUtils.createAbnormalContainerStatus(\n               container.getContainerId(),\n               SchedulerUtils.RELEASED_CONTAINER),\n           RMContainerEventType.RELEASED);\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering(),\n            appAddedEvent.getPlacementContext());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case RELEASE_CONTAINER:\n      if (!(event instanceof ReleaseContainerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n      completedContainer(container,\n          SchedulerUtils.createAbnormalContainerStatus(\n              container.getContainerId(),\n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6251. Do async container release to prevent deadlock during container updates. (Arun Suresh via wangda)\n\nChange-Id: I6c67d20c5dd4d22752830ebf0ed2340824976ecb\n",
      "commitDate": "23/08/17 9:56 AM",
      "commitName": "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/08/17 10:51 AM",
      "commitNameOld": "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,106 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n+    case RELEASE_CONTAINER:\n+      if (!(event instanceof ReleaseContainerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n+      completedContainer(container,\n+          SchedulerUtils.createAbnormalContainerStatus(\n+              container.getContainerId(),\n+              SchedulerUtils.RELEASED_CONTAINER),\n+          RMContainerEventType.RELEASED);\n+      break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case RELEASE_CONTAINER:\n      if (!(event instanceof ReleaseContainerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n      completedContainer(container,\n          SchedulerUtils.createAbnormalContainerStatus(\n              container.getContainerId(),\n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:27 PM",
      "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerId),\n+      super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n-    case CONTAINER_RESCHEDULED:\n-      if (!(event instanceof ContainerRescheduledEvent)) {\n-        throw new RuntimeException(\"Unexpected event type: \" + event);\n-      }\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,104 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n-      super.completedContainer(getRMContainer(containerId),\n+      completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n+    case CONTAINER_RESCHEDULED:\n+      if (!(event instanceof ContainerRescheduledEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    case CONTAINER_RESCHEDULED:\n      if (!(event instanceof ContainerRescheduledEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 12:50 AM",
      "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerId),\n+      super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n-    case CONTAINER_RESCHEDULED:\n-      if (!(event instanceof ContainerRescheduledEvent)) {\n-        throw new RuntimeException(\"Unexpected event type: \" + event);\n-      }\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/01/16 7:04 PM",
      "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,104 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n-      super.completedContainer(getRMContainer(containerId),\n+      completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n+    case CONTAINER_RESCHEDULED:\n+      if (!(event instanceof ContainerRescheduledEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    case CONTAINER_RESCHEDULED:\n      if (!(event instanceof ContainerRescheduledEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 34.34,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID(),\n               appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerId),\n+      super.completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n-    case CONTAINER_RESCHEDULED:\n-      if (!(event instanceof ContainerRescheduledEvent)) {\n-        throw new RuntimeException(\"Unexpected event type: \" + event);\n-      }\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3738. Add support for recovery of reserved apps running under dynamic queues (subru via asuresh)\n",
      "commitDate": "24/10/15 10:53 PM",
      "commitName": "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "19/10/15 8:00 PM",
      "commitNameOld": "7e2837f830382835838c82398db6fc9823d612a7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 5.12,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,104 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n-              appAddedEvent.getReservationID());\n+              appAddedEvent.getReservationID(),\n+              appAddedEvent.getIsAppRecovering());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     case CONTAINER_RESCHEDULED:\n       if (!(event instanceof ContainerRescheduledEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerRescheduledEvent containerRescheduledEvent \u003d\n           (ContainerRescheduledEvent) event;\n       RMContainer container \u003d containerRescheduledEvent.getContainer();\n       recoverResourceRequestForContainer(container);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID(),\n              appAddedEvent.getIsAppRecovering());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    case CONTAINER_RESCHEDULED:\n      if (!(event instanceof ContainerRescheduledEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "9b272ccae78918e7d756d84920a9322187d61eed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3535. Scheduler must re-request container resources when RMContainer transitions from ALLOCATED to KILLED (rohithsharma and peng.zhang via asuresh)\n",
      "commitDate": "17/07/15 4:31 AM",
      "commitName": "9b272ccae78918e7d756d84920a9322187d61eed",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/07/15 12:23 AM",
      "commitNameOld": "ac94ba3e185115b83351e35c610c2b8ff91b1ebc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,103 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n+    case CONTAINER_RESCHEDULED:\n+      if (!(event instanceof ContainerRescheduledEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    case CONTAINER_RESCHEDULED:\n      if (!(event instanceof ContainerRescheduledEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "dd4b387d96abc66ddebb569b3775b18b19aed027": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3790. usedResource from rootQueue metrics may get stale data for FS scheduler after recovering the container (Zhihai Xu via rohithsharmaks)\n",
      "commitDate": "24/06/15 10:30 AM",
      "commitName": "dd4b387d96abc66ddebb569b3775b18b19aed027",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "07/06/15 11:37 AM",
      "commitNameOld": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 16.95,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,94 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n-      addNode(nodeAddedEvent.getAddedRMNode());\n-      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n+      addNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queueName \u003d\n           resolveReservationQueueName(appAddedEvent.getQueue(),\n               appAddedEvent.getApplicationId(),\n               appAddedEvent.getReservationID());\n       if (queueName !\u003d null) {\n         addApplication(appAddedEvent.getApplicationId(),\n             queueName, appAddedEvent.getUser(),\n             appAddedEvent.getIsAppRecovering());\n       }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2881. [YARN-2574] Implement PlanFollower for FairScheduler. (Anubhav Dhoot via kasha)\n",
      "commitDate": "05/01/15 3:12 PM",
      "commitName": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/12/14 7:55 PM",
      "commitNameOld": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n-      addApplication(appAddedEvent.getApplicationId(),\n-        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n-        appAddedEvent.getIsAppRecovering());\n+      String queueName \u003d\n+          resolveReservationQueueName(appAddedEvent.getQueue(),\n+              appAddedEvent.getApplicationId(),\n+              appAddedEvent.getReservationID());\n+      if (queueName !\u003d null) {\n+        addApplication(appAddedEvent.getApplicationId(),\n+            queueName, appAddedEvent.getUser(),\n+            appAddedEvent.getIsAppRecovering());\n+      }\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case NODE_RESOURCE_UPDATE:\n       if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n             nodeResourceUpdatedEvent.getResourceOption());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queueName \u003d\n          resolveReservationQueueName(appAddedEvent.getQueue(),\n              appAddedEvent.getApplicationId(),\n              appAddedEvent.getReservationID());\n      if (queueName !\u003d null) {\n        addApplication(appAddedEvent.getApplicationId(),\n            queueName, appAddedEvent.getUser(),\n            appAddedEvent.getIsAppRecovering());\n      }\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "5c14bc426b4be381383018ebc2236be83eef15cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1506. Changed RMNode/SchedulerNode to update resource with event notification. Contributed by Junping Du\n",
      "commitDate": "29/08/14 11:05 PM",
      "commitName": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/08/14 8:44 AM",
      "commitNameOld": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.6,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,89 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n           nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n+    case NODE_RESOURCE_UPDATE:\n+      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n+          (NodeResourceUpdateSchedulerEvent)event;\n+      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n+            nodeResourceUpdatedEvent.getResourceOption());\n+      break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case NODE_RESOURCE_UPDATE:\n      if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n            nodeResourceUpdatedEvent.getResourceOption());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "5197f8c3c53f18701f041dd2301b454930a5025b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1370. Fair scheduler to re-populate container allocation state. (Anubhav Dhoot via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617645 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 6:38 PM",
      "commitName": "5197f8c3c53f18701f041dd2301b454930a5025b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "12/08/14 2:43 PM",
      "commitNameOld": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,80 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n+      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n+          nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n          nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "bda23181bf1931c37d2590e03da9acdc6688ad34": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 5:14 PM",
      "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/07/14 2:48 PM",
      "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
      "commitAuthorOld": "Mayank Bansal",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,78 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n-        appAddedEvent.getQueue(), appAddedEvent.getUser());\n+        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n+        appAddedEvent.getIsAppRecovering());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n-        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n+        appAttemptAddedEvent.getIsAttemptRecovering());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1365. Changed ApplicationMasterService to allow an app to re-register after RM restart. Contributed by Anubhav Dhoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605263 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 9:42 PM",
      "commitName": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/06/14 8:40 AM",
      "commitNameOld": "29c102cad01b8a91cbf5173ca49d2e1ed8a45eee",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,77 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n+        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n+        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,76 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n       break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n-      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n-        appAttemptRemovedEvent.getFinalAttemptState());\n+      removeApplicationAttempt(\n+          appAttemptRemovedEvent.getApplicationAttemptID(),\n+          appAttemptRemovedEvent.getFinalAttemptState(),\n+          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/12/13 5:44 PM",
      "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,73 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n+    case APP_ADDED:\n+      if (!(event instanceof AppAddedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n+      addApplication(appAddedEvent.getApplicationId(),\n+        appAddedEvent.getQueue(), appAddedEvent.getUser());\n+      break;\n+    case APP_REMOVED:\n+      if (!(event instanceof AppRemovedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      removeApplication(appRemovedEvent.getApplicationID(),\n+        appRemovedEvent.getFinalState());\n+      break;\n     case APP_ATTEMPT_ADDED:\n       if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n-      String queue \u003d appAttemptAddedEvent.getQueue();\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        queue, appAttemptAddedEvent.getUser());\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n       break;\n     case APP_ATTEMPT_REMOVED:\n       if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n         appAttemptRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n        appAttemptRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:45 PM",
      "commitNameOld": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n-    case APP_ADDED:\n-      if (!(event instanceof AppAddedSchedulerEvent)) {\n+    case APP_ATTEMPT_ADDED:\n+      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n-      String queue \u003d appAddedEvent.getQueue();\n-      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n-          appAddedEvent.getUser());\n+      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n+          (AppAttemptAddedSchedulerEvent) event;\n+      String queue \u003d appAttemptAddedEvent.getQueue();\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        queue, appAttemptAddedEvent.getUser());\n       break;\n-    case APP_REMOVED:\n-      if (!(event instanceof AppRemovedSchedulerEvent)) {\n+    case APP_ATTEMPT_REMOVED:\n+      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n-      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n-          appRemovedEvent.getFinalAttemptState());\n+      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n+          (AppAttemptRemovedSchedulerEvent) event;\n+      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n+        appAttemptRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      String queue \u003d appAttemptAddedEvent.getQueue();\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        queue, appAttemptAddedEvent.getUser());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n        appAttemptRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": {
      "type": "Ybodychange",
      "commitMessage": "Reverting YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550594 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:45 PM",
      "commitName": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:07 PM",
      "commitNameOld": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,57 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n-    case APP_ATTEMPT_ADDED:\n-      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n+    case APP_ADDED:\n+      if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n-          (AppAttemptAddedSchedulerEvent) event;\n-      String queue \u003d appAttemptAddedEvent.getQueue();\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        queue, appAttemptAddedEvent.getUser());\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n+      String queue \u003d appAddedEvent.getQueue();\n+      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n+          appAddedEvent.getUser());\n       break;\n-    case APP_ATTEMPT_REMOVED:\n-      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n+    case APP_REMOVED:\n+      if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n-          (AppAttemptRemovedSchedulerEvent) event;\n-      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n-        appAttemptRemovedEvent.getFinalAttemptState());\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n+          appRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n      String queue \u003d appAddedEvent.getQueue();\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:07 PM",
      "commitName": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n-    case APP_ADDED:\n-      if (!(event instanceof AppAddedSchedulerEvent)) {\n+    case APP_ATTEMPT_ADDED:\n+      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n-      String queue \u003d appAddedEvent.getQueue();\n-      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n-          appAddedEvent.getUser());\n+      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n+          (AppAttemptAddedSchedulerEvent) event;\n+      String queue \u003d appAttemptAddedEvent.getQueue();\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        queue, appAttemptAddedEvent.getUser());\n       break;\n-    case APP_REMOVED:\n-      if (!(event instanceof AppRemovedSchedulerEvent)) {\n+    case APP_ATTEMPT_REMOVED:\n+      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n-      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n-      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n-          appRemovedEvent.getFinalAttemptState());\n+      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n+          (AppAttemptRemovedSchedulerEvent) event;\n+      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n+        appAttemptRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ATTEMPT_ADDED:\n      if (!(event instanceof AppAttemptAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      String queue \u003d appAttemptAddedEvent.getQueue();\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        queue, appAttemptAddedEvent.getUser());\n      break;\n    case APP_ATTEMPT_REMOVED:\n      if (!(event instanceof AppAttemptRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      removeApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),\n        appAttemptRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "171493215889a3b6bf2f6ba33212c4f06861a189": {
      "type": "Ybodychange",
      "commitMessage": "YARN-333. Schedulers cannot control the queue-name of an application. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502374 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 2:39 PM",
      "commitName": "171493215889a3b6bf2f6ba33212c4f06861a189",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "28/06/13 11:59 AM",
      "commitNameOld": "c221204ccaadcf70992d9e858ef71c6f8864ff4e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 13.11,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,57 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n       String queue \u003d appAddedEvent.getQueue();\n-\n-      // Potentially set queue to username if configured to do so\n-      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n-      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n-        queue \u003d appAddedEvent.getUser();\n-      }\n-\n       addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n           appAddedEvent.getUser());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationAttemptID(),\n           appRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n      String queue \u003d appAddedEvent.getQueue();\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": {
      "type": "Ybodychange",
      "commitMessage": "YARN-365. Change NM heartbeat handling to not generate a scheduler event on each heartbeat. (Contributed by Xuan Gong)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450007 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 7:32 PM",
      "commitName": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "23/01/13 2:53 AM",
      "commitNameOld": "345bcee0664392323b4297c0797897a96fef8958",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 33.69,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,64 @@\n   public void handle(SchedulerEvent event) {\n     switch (event.getType()) {\n     case NODE_ADDED:\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       break;\n     case NODE_REMOVED:\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n       break;\n     case NODE_UPDATE:\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n-      nodeUpdate(nodeUpdatedEvent.getRMNode(),\n-          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n-          nodeUpdatedEvent.getCompletedContainers());\n+      nodeUpdate(nodeUpdatedEvent.getRMNode());\n       break;\n     case APP_ADDED:\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n       String queue \u003d appAddedEvent.getQueue();\n \n       // Potentially set queue to username if configured to do so\n       String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n       if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n         queue \u003d appAddedEvent.getUser();\n       }\n \n       addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n           appAddedEvent.getUser());\n       break;\n     case APP_REMOVED:\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       removeApplication(appRemovedEvent.getApplicationAttemptID(),\n           appRemovedEvent.getFinalAttemptState());\n       break;\n     case CONTAINER_EXPIRED:\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent)event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n       break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch (event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent)event;\n      String queue \u003d appAddedEvent.getQueue();\n\n      // Potentially set queue to username if configured to do so\n      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n        queue \u003d appAddedEvent.getUser();\n      }\n\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent)event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-183. Clean up fair scheduler code. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 4:38 AM",
      "commitName": "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
      "commitAuthor": "Thomas White",
      "commitDateOld": "26/10/12 1:55 PM",
      "commitNameOld": "b54e794fb059fa68b115c2ca5e58f11a0d7f3985",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 13.65,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,67 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n-    {\n       if (!(event instanceof NodeAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n-    }\n-    break;\n+      break;\n     case NODE_REMOVED:\n-    {\n       if (!(event instanceof NodeRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n-    }\n-    break;\n+      break;\n     case NODE_UPDATE:\n-    {\n       if (!(event instanceof NodeUpdateSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d\n       (NodeUpdateSchedulerEvent)event;\n-      this.nodeUpdate(nodeUpdatedEvent.getRMNode(),\n+      nodeUpdate(nodeUpdatedEvent.getRMNode(),\n           nodeUpdatedEvent.getNewlyLaunchedContainers(),\n           nodeUpdatedEvent.getCompletedContainers());\n-    }\n-    break;\n+      break;\n     case APP_ADDED:\n-    {\n       if (!(event instanceof AppAddedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       String queue \u003d appAddedEvent.getQueue();\n \n       // Potentially set queue to username if configured to do so\n       String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n       if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n         queue \u003d appAddedEvent.getUser();\n       }\n \n       addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n           appAddedEvent.getUser());\n-    }\n-    break;\n+      break;\n     case APP_REMOVED:\n-    {\n       if (!(event instanceof AppRemovedSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n-      this.removeApplication(appRemovedEvent.getApplicationAttemptID(),\n+      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n           appRemovedEvent.getFinalAttemptState());\n-    }\n-    break;\n+      break;\n     case CONTAINER_EXPIRED:\n-    {\n       if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n         throw new RuntimeException(\"Unexpected event type: \" + event);\n       }\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerId),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerId,\n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n-    }\n-    break;\n+      break;\n     default:\n       LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      break;\n    case NODE_REMOVED:\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n      break;\n    case NODE_UPDATE:\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d\n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(),\n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n      break;\n    case APP_ADDED:\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queue \u003d appAddedEvent.getQueue();\n\n      // Potentially set queue to username if configured to do so\n      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n        queue \u003d appAddedEvent.getUser();\n      }\n\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n      break;\n    case APP_REMOVED:\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n      break;\n    case CONTAINER_EXPIRED:\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n      break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d\n      (NodeUpdateSchedulerEvent)event;\n      this.nodeUpdate(nodeUpdatedEvent.getRMNode(),\n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queue \u003d appAddedEvent.getQueue();\n\n      // Potentially set queue to username if configured to do so\n      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n        queue \u003d appAddedEvent.getUser();\n      }\n\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      this.removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,79 @@\n+  public void handle(SchedulerEvent event) {\n+    switch(event.getType()) {\n+    case NODE_ADDED:\n+    {\n+      if (!(event instanceof NodeAddedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n+      addNode(nodeAddedEvent.getAddedRMNode());\n+    }\n+    break;\n+    case NODE_REMOVED:\n+    {\n+      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n+      removeNode(nodeRemovedEvent.getRemovedRMNode());\n+    }\n+    break;\n+    case NODE_UPDATE:\n+    {\n+      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d\n+      (NodeUpdateSchedulerEvent)event;\n+      this.nodeUpdate(nodeUpdatedEvent.getRMNode(),\n+          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n+          nodeUpdatedEvent.getCompletedContainers());\n+    }\n+    break;\n+    case APP_ADDED:\n+    {\n+      if (!(event instanceof AppAddedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n+      String queue \u003d appAddedEvent.getQueue();\n+\n+      // Potentially set queue to username if configured to do so\n+      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n+      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n+        queue \u003d appAddedEvent.getUser();\n+      }\n+\n+      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n+          appAddedEvent.getUser());\n+    }\n+    break;\n+    case APP_REMOVED:\n+    {\n+      if (!(event instanceof AppRemovedSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      this.removeApplication(appRemovedEvent.getApplicationAttemptID(),\n+          appRemovedEvent.getFinalAttemptState());\n+    }\n+    break;\n+    case CONTAINER_EXPIRED:\n+    {\n+      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n+          (ContainerExpiredSchedulerEvent) event;\n+      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n+      completedContainer(getRMContainer(containerId),\n+          SchedulerUtils.createAbnormalContainerStatus(\n+              containerId,\n+              SchedulerUtils.EXPIRED_CONTAINER),\n+          RMContainerEventType.EXPIRE);\n+    }\n+    break;\n+    default:\n+      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      if (!(event instanceof NodeAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      if (!(event instanceof NodeRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      if (!(event instanceof NodeUpdateSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d\n      (NodeUpdateSchedulerEvent)event;\n      this.nodeUpdate(nodeUpdatedEvent.getRMNode(),\n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      if (!(event instanceof AppAddedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      String queue \u003d appAddedEvent.getQueue();\n\n      // Potentially set queue to username if configured to do so\n      String def \u003d YarnConfiguration.DEFAULT_QUEUE_NAME;\n      if (queue.equals(def) \u0026\u0026 userAsDefaultQueue) {\n        queue \u003d appAddedEvent.getUser();\n      }\n\n      addApplication(appAddedEvent.getApplicationAttemptId(), queue,\n          appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      if (!(event instanceof AppRemovedSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      this.removeApplication(appRemovedEvent.getApplicationAttemptID(),\n          appRemovedEvent.getFinalAttemptState());\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      if (!(event instanceof ContainerExpiredSchedulerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d\n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerId \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerId),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerId,\n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Unknown event arrived at FairScheduler: \" + event.toString());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}