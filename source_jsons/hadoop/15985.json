{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java",
  "functionStartLine": 343,
  "functionEndLine": 387,
  "numCommitsSeen": 12,
  "timeTaken": 594,
  "changeHistory": [
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,45 @@\n+  public void init() throws ServerException {\n+    if (status !\u003d Status.UNDEF) {\n+      throw new IllegalStateException(\"Server already initialized\");\n+    }\n+    status \u003d Status.BOOTING;\n+    verifyDir(homeDir);\n+    verifyDir(tempDir);\n+    Properties serverInfo \u003d new Properties();\n+    try {\n+      InputStream is \u003d getResource(name + \".properties\");\n+      serverInfo.load(is);\n+      is.close();\n+    } catch (IOException ex) {\n+      throw new RuntimeException(\"Could not load server information file: \" + name + \".properties\");\n+    }\n+    initLog();\n+    log.info(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\n+    log.info(\"Server [{}] starting\", name);\n+    log.info(\"  Built information:\");\n+    log.info(\"    Version           : {}\", serverInfo.getProperty(name + \".version\", \"undef\"));\n+    log.info(\"    Source Repository : {}\", serverInfo.getProperty(name + \".source.repository\", \"undef\"));\n+    log.info(\"    Source Revision   : {}\", serverInfo.getProperty(name + \".source.revision\", \"undef\"));\n+    log.info(\"    Built by          : {}\", serverInfo.getProperty(name + \".build.username\", \"undef\"));\n+    log.info(\"    Built timestamp   : {}\", serverInfo.getProperty(name + \".build.timestamp\", \"undef\"));\n+    log.info(\"  Runtime information:\");\n+    log.info(\"    Home   dir: {}\", homeDir);\n+    log.info(\"    Config dir: {}\", (config \u003d\u003d null) ? configDir : \"-\");\n+    log.info(\"    Log    dir: {}\", logDir);\n+    log.info(\"    Temp   dir: {}\", tempDir);\n+    initConfig();\n+    log.debug(\"Loading services\");\n+    List\u003cService\u003e list \u003d loadServices();\n+    try {\n+      log.debug(\"Initializing services\");\n+      initServices(list);\n+      log.info(\"Services initialized\");\n+    } catch (ServerException ex) {\n+      log.error(\"Services initialization failure, destroying initialized services\");\n+      destroyServices();\n+      throw ex;\n+    }\n+    Status status \u003d Status.valueOf(getConfig().get(getPrefixedName(CONF_STARTUP_STATUS), Status.NORMAL.toString()));\n+    setStatus(status);\n+    log.info(\"Server [{}] started!, status [{}]\", name, status);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws ServerException {\n    if (status !\u003d Status.UNDEF) {\n      throw new IllegalStateException(\"Server already initialized\");\n    }\n    status \u003d Status.BOOTING;\n    verifyDir(homeDir);\n    verifyDir(tempDir);\n    Properties serverInfo \u003d new Properties();\n    try {\n      InputStream is \u003d getResource(name + \".properties\");\n      serverInfo.load(is);\n      is.close();\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not load server information file: \" + name + \".properties\");\n    }\n    initLog();\n    log.info(\"++++++++++++++++++++++++++++++++++++++++++++++++++++++\");\n    log.info(\"Server [{}] starting\", name);\n    log.info(\"  Built information:\");\n    log.info(\"    Version           : {}\", serverInfo.getProperty(name + \".version\", \"undef\"));\n    log.info(\"    Source Repository : {}\", serverInfo.getProperty(name + \".source.repository\", \"undef\"));\n    log.info(\"    Source Revision   : {}\", serverInfo.getProperty(name + \".source.revision\", \"undef\"));\n    log.info(\"    Built by          : {}\", serverInfo.getProperty(name + \".build.username\", \"undef\"));\n    log.info(\"    Built timestamp   : {}\", serverInfo.getProperty(name + \".build.timestamp\", \"undef\"));\n    log.info(\"  Runtime information:\");\n    log.info(\"    Home   dir: {}\", homeDir);\n    log.info(\"    Config dir: {}\", (config \u003d\u003d null) ? configDir : \"-\");\n    log.info(\"    Log    dir: {}\", logDir);\n    log.info(\"    Temp   dir: {}\", tempDir);\n    initConfig();\n    log.debug(\"Loading services\");\n    List\u003cService\u003e list \u003d loadServices();\n    try {\n      log.debug(\"Initializing services\");\n      initServices(list);\n      log.info(\"Services initialized\");\n    } catch (ServerException ex) {\n      log.error(\"Services initialization failure, destroying initialized services\");\n      destroyServices();\n      throw ex;\n    }\n    Status status \u003d Status.valueOf(getConfig().get(getPrefixedName(CONF_STARTUP_STATUS), Status.NORMAL.toString()));\n    setStatus(status);\n    log.info(\"Server [{}] started!, status [{}]\", name, status);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/server/Server.java"
    }
  }
}