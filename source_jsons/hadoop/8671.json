{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NNStorageRetentionManager.java",
  "functionName": "purgeOldLegacyOIVImages",
  "functionId": "purgeOldLegacyOIVImages___dir-String__txid-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorageRetentionManager.java",
  "functionStartLine": 254,
  "functionEndLine": 304,
  "numCommitsSeen": 18,
  "timeTaken": 3153,
  "changeHistory": [
    "2e43c28e01fe006210e71aab179527669f6412ed",
    "441378e7e4609d89b7181dacc8ba92b253a962df",
    "89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a",
    "97f58955a6045b373ab73653bf26ab5922b00cf3"
  ],
  "changeHistoryShort": {
    "2e43c28e01fe006210e71aab179527669f6412ed": "Ybodychange",
    "441378e7e4609d89b7181dacc8ba92b253a962df": "Ybodychange",
    "89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a": "Ybodychange",
    "97f58955a6045b373ab73653bf26ab5922b00cf3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e43c28e01fe006210e71aab179527669f6412ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11696. Fix warnings from Spotbugs in hadoop-hdfs. Contributed by Yiqun Lin.\n",
      "commitDate": "15/08/17 1:48 AM",
      "commitName": "2e43c28e01fe006210e71aab179527669f6412ed",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "29/06/17 1:54 PM",
      "commitNameOld": "441378e7e4609d89b7181dacc8ba92b253a962df",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 46.5,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   void purgeOldLegacyOIVImages(String dir, long txid) {\n     File oivImageDir \u003d new File(dir);\n     final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n     String filesInStorage[];\n \n     // Get the listing\n     filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n       @Override\n       public boolean accept(File dir, String name) {\n         return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n       }\n     });\n \n     // Check whether there is any work to do.\n-    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n+    if (filesInStorage !\u003d null\n+        \u0026\u0026 filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n       return;\n     }\n \n     // Create a sorted list of txids from the file names.\n     TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n-    for (String fName : filesInStorage) {\n-      // Extract the transaction id from the file name.\n-      long fTxId;\n-      try {\n-        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n-      } catch (NumberFormatException nfe) {\n-        // This should not happen since we have already filtered it.\n-        // Log and continue.\n-        LOG.warn(\"Invalid file name. Skipping \" + fName);\n-        continue;\n+    if (filesInStorage !\u003d null) {\n+      for (String fName : filesInStorage) {\n+        // Extract the transaction id from the file name.\n+        long fTxId;\n+        try {\n+          fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n+        } catch (NumberFormatException nfe) {\n+          // This should not happen since we have already filtered it.\n+          // Log and continue.\n+          LOG.warn(\"Invalid file name. Skipping \" + fName);\n+          continue;\n+        }\n+        sortedTxIds.add(Long.valueOf(fTxId));\n       }\n-      sortedTxIds.add(Long.valueOf(fTxId));\n     }\n \n     int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n     Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n     while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n       long txIdVal \u003d iter.next().longValue();\n       String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n       LOG.info(\"Deleting \" + fileName);\n       File fileToDelete \u003d new File(oivImageDir, fileName);\n       if (!fileToDelete.delete()) {\n         // deletion failed.\n         LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n       }\n       numFilesToDelete--;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void purgeOldLegacyOIVImages(String dir, long txid) {\n    File oivImageDir \u003d new File(dir);\n    final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n    String filesInStorage[];\n\n    // Get the listing\n    filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n      }\n    });\n\n    // Check whether there is any work to do.\n    if (filesInStorage !\u003d null\n        \u0026\u0026 filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n      return;\n    }\n\n    // Create a sorted list of txids from the file names.\n    TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n    if (filesInStorage !\u003d null) {\n      for (String fName : filesInStorage) {\n        // Extract the transaction id from the file name.\n        long fTxId;\n        try {\n          fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n        } catch (NumberFormatException nfe) {\n          // This should not happen since we have already filtered it.\n          // Log and continue.\n          LOG.warn(\"Invalid file name. Skipping \" + fName);\n          continue;\n        }\n        sortedTxIds.add(Long.valueOf(fTxId));\n      }\n    }\n\n    int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n    Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n    while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n      long txIdVal \u003d iter.next().longValue();\n      String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n      LOG.info(\"Deleting \" + fileName);\n      File fileToDelete \u003d new File(oivImageDir, fileName);\n      if (!fileToDelete.delete()) {\n        // deletion failed.\n        LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n      }\n      numFilesToDelete--;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorageRetentionManager.java",
      "extendedDetails": {}
    },
    "441378e7e4609d89b7181dacc8ba92b253a962df": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-11696. Fix warnings from Spotbugs in hadoop-hdfs. Contributed by Yiqun Lin.\"\n\nThis reverts commit 89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a.\n\n Conflicts:\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java\n",
      "commitDate": "29/06/17 1:54 PM",
      "commitName": "441378e7e4609d89b7181dacc8ba92b253a962df",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/05/17 9:41 AM",
      "commitNameOld": "89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 44.18,
      "commitsBetweenForRepo": 226,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,48 @@\n   void purgeOldLegacyOIVImages(String dir, long txid) {\n     File oivImageDir \u003d new File(dir);\n     final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n     String filesInStorage[];\n \n     // Get the listing\n     filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n       @Override\n       public boolean accept(File dir, String name) {\n         return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n       }\n     });\n \n     // Check whether there is any work to do.\n-    if (filesInStorage !\u003d null\n-        \u0026\u0026 filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n+    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n       return;\n     }\n \n     // Create a sorted list of txids from the file names.\n     TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n-    if (filesInStorage !\u003d null) {\n-      for (String fName : filesInStorage) {\n-        // Extract the transaction id from the file name.\n-        long fTxId;\n-        try {\n-          fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n-        } catch (NumberFormatException nfe) {\n-          // This should not happen since we have already filtered it.\n-          // Log and continue.\n-          LOG.warn(\"Invalid file name. Skipping \" + fName);\n-          continue;\n-        }\n-        sortedTxIds.add(Long.valueOf(fTxId));\n+    for (String fName : filesInStorage) {\n+      // Extract the transaction id from the file name.\n+      long fTxId;\n+      try {\n+        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n+      } catch (NumberFormatException nfe) {\n+        // This should not happen since we have already filtered it.\n+        // Log and continue.\n+        LOG.warn(\"Invalid file name. Skipping \" + fName);\n+        continue;\n       }\n+      sortedTxIds.add(Long.valueOf(fTxId));\n     }\n \n     int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n     Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n     while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n       long txIdVal \u003d iter.next().longValue();\n       String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n       LOG.info(\"Deleting \" + fileName);\n       File fileToDelete \u003d new File(oivImageDir, fileName);\n       if (!fileToDelete.delete()) {\n         // deletion failed.\n         LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n       }\n       numFilesToDelete--;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void purgeOldLegacyOIVImages(String dir, long txid) {\n    File oivImageDir \u003d new File(dir);\n    final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n    String filesInStorage[];\n\n    // Get the listing\n    filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n      }\n    });\n\n    // Check whether there is any work to do.\n    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n      return;\n    }\n\n    // Create a sorted list of txids from the file names.\n    TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n    for (String fName : filesInStorage) {\n      // Extract the transaction id from the file name.\n      long fTxId;\n      try {\n        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n      } catch (NumberFormatException nfe) {\n        // This should not happen since we have already filtered it.\n        // Log and continue.\n        LOG.warn(\"Invalid file name. Skipping \" + fName);\n        continue;\n      }\n      sortedTxIds.add(Long.valueOf(fTxId));\n    }\n\n    int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n    Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n    while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n      long txIdVal \u003d iter.next().longValue();\n      String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n      LOG.info(\"Deleting \" + fileName);\n      File fileToDelete \u003d new File(oivImageDir, fileName);\n      if (!fileToDelete.delete()) {\n        // deletion failed.\n        LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n      }\n      numFilesToDelete--;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorageRetentionManager.java",
      "extendedDetails": {}
    },
    "89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11696. Fix warnings from Spotbugs in hadoop-hdfs. Contributed by Yiqun Lin.\n",
      "commitDate": "16/05/17 9:41 AM",
      "commitName": "89a8edc0149e3f31a5ade9a0927c4b6332cf6b1a",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "27/07/16 5:55 PM",
      "commitNameOld": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 292.66,
      "commitsBetweenForRepo": 1810,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   void purgeOldLegacyOIVImages(String dir, long txid) {\n     File oivImageDir \u003d new File(dir);\n     final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n     String filesInStorage[];\n \n     // Get the listing\n     filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n       @Override\n       public boolean accept(File dir, String name) {\n         return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n       }\n     });\n \n     // Check whether there is any work to do.\n-    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n+    if (filesInStorage !\u003d null\n+        \u0026\u0026 filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n       return;\n     }\n \n     // Create a sorted list of txids from the file names.\n     TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n-    for (String fName : filesInStorage) {\n-      // Extract the transaction id from the file name.\n-      long fTxId;\n-      try {\n-        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n-      } catch (NumberFormatException nfe) {\n-        // This should not happen since we have already filtered it.\n-        // Log and continue.\n-        LOG.warn(\"Invalid file name. Skipping \" + fName);\n-        continue;\n+    if (filesInStorage !\u003d null) {\n+      for (String fName : filesInStorage) {\n+        // Extract the transaction id from the file name.\n+        long fTxId;\n+        try {\n+          fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n+        } catch (NumberFormatException nfe) {\n+          // This should not happen since we have already filtered it.\n+          // Log and continue.\n+          LOG.warn(\"Invalid file name. Skipping \" + fName);\n+          continue;\n+        }\n+        sortedTxIds.add(Long.valueOf(fTxId));\n       }\n-      sortedTxIds.add(Long.valueOf(fTxId));\n     }\n \n     int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n     Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n     while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n       long txIdVal \u003d iter.next().longValue();\n       String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n       LOG.info(\"Deleting \" + fileName);\n       File fileToDelete \u003d new File(oivImageDir, fileName);\n       if (!fileToDelete.delete()) {\n         // deletion failed.\n         LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n       }\n       numFilesToDelete--;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void purgeOldLegacyOIVImages(String dir, long txid) {\n    File oivImageDir \u003d new File(dir);\n    final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n    String filesInStorage[];\n\n    // Get the listing\n    filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n      }\n    });\n\n    // Check whether there is any work to do.\n    if (filesInStorage !\u003d null\n        \u0026\u0026 filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n      return;\n    }\n\n    // Create a sorted list of txids from the file names.\n    TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n    if (filesInStorage !\u003d null) {\n      for (String fName : filesInStorage) {\n        // Extract the transaction id from the file name.\n        long fTxId;\n        try {\n          fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n        } catch (NumberFormatException nfe) {\n          // This should not happen since we have already filtered it.\n          // Log and continue.\n          LOG.warn(\"Invalid file name. Skipping \" + fName);\n          continue;\n        }\n        sortedTxIds.add(Long.valueOf(fTxId));\n      }\n    }\n\n    int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n    Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n    while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n      long txIdVal \u003d iter.next().longValue();\n      String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n      LOG.info(\"Deleting \" + fileName);\n      File fileToDelete \u003d new File(oivImageDir, fileName);\n      if (!fileToDelete.delete()) {\n        // deletion failed.\n        LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n      }\n      numFilesToDelete--;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorageRetentionManager.java",
      "extendedDetails": {}
    },
    "97f58955a6045b373ab73653bf26ab5922b00cf3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6293. Issues with OIV processing PB-based fsimages. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 6:15 PM",
      "commitName": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,48 @@\n+  void purgeOldLegacyOIVImages(String dir, long txid) {\n+    File oivImageDir \u003d new File(dir);\n+    final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n+    String filesInStorage[];\n+\n+    // Get the listing\n+    filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n+      @Override\n+      public boolean accept(File dir, String name) {\n+        return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n+      }\n+    });\n+\n+    // Check whether there is any work to do.\n+    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n+      return;\n+    }\n+\n+    // Create a sorted list of txids from the file names.\n+    TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n+    for (String fName : filesInStorage) {\n+      // Extract the transaction id from the file name.\n+      long fTxId;\n+      try {\n+        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n+      } catch (NumberFormatException nfe) {\n+        // This should not happen since we have already filtered it.\n+        // Log and continue.\n+        LOG.warn(\"Invalid file name. Skipping \" + fName);\n+        continue;\n+      }\n+      sortedTxIds.add(Long.valueOf(fTxId));\n+    }\n+\n+    int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n+    Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n+    while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n+      long txIdVal \u003d iter.next().longValue();\n+      String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n+      LOG.info(\"Deleting \" + fileName);\n+      File fileToDelete \u003d new File(oivImageDir, fileName);\n+      if (!fileToDelete.delete()) {\n+        // deletion failed.\n+        LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n+      }\n+      numFilesToDelete--;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void purgeOldLegacyOIVImages(String dir, long txid) {\n    File oivImageDir \u003d new File(dir);\n    final String oivImagePrefix \u003d NameNodeFile.IMAGE_LEGACY_OIV.getName();\n    String filesInStorage[];\n\n    // Get the listing\n    filesInStorage \u003d oivImageDir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        return name.matches(oivImagePrefix + \"_(\\\\d+)\");\n      }\n    });\n\n    // Check whether there is any work to do.\n    if (filesInStorage.length \u003c\u003d numCheckpointsToRetain) {\n      return;\n    }\n\n    // Create a sorted list of txids from the file names.\n    TreeSet\u003cLong\u003e sortedTxIds \u003d new TreeSet\u003cLong\u003e();\n    for (String fName : filesInStorage) {\n      // Extract the transaction id from the file name.\n      long fTxId;\n      try {\n        fTxId \u003d Long.parseLong(fName.substring(oivImagePrefix.length() + 1));\n      } catch (NumberFormatException nfe) {\n        // This should not happen since we have already filtered it.\n        // Log and continue.\n        LOG.warn(\"Invalid file name. Skipping \" + fName);\n        continue;\n      }\n      sortedTxIds.add(Long.valueOf(fTxId));\n    }\n\n    int numFilesToDelete \u003d sortedTxIds.size() - numCheckpointsToRetain;\n    Iterator\u003cLong\u003e iter \u003d sortedTxIds.iterator();\n    while (numFilesToDelete \u003e 0 \u0026\u0026 iter.hasNext()) {\n      long txIdVal \u003d iter.next().longValue();\n      String fileName \u003d NNStorage.getLegacyOIVImageFileName(txIdVal);\n      LOG.info(\"Deleting \" + fileName);\n      File fileToDelete \u003d new File(oivImageDir, fileName);\n      if (!fileToDelete.delete()) {\n        // deletion failed.\n        LOG.warn(\"Failed to delete image file: \" + fileToDelete);\n      }\n      numFilesToDelete--;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorageRetentionManager.java"
    }
  }
}