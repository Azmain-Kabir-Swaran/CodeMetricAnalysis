{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "actionUpgrade",
  "functionId": "actionUpgrade___service-Service__compInstances-List__Container__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 516,
  "functionEndLine": 542,
  "numCommitsSeen": 77,
  "timeTaken": 2397,
  "changeHistory": [
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "27d60a16342fd39973d43b61008f54a8815a6237"
  ],
  "changeHistoryShort": {
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,27 @@\n-  public int actionUpgrade(Service service) throws YarnException, IOException {\n-    Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, service.getName());\n-    if (!StringUtils.isEmpty(persistedService.getId())) {\n-      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n-          ApplicationId.fromString(persistedService.getId()),\n-          persistedService.getKerberosPrincipal().getPrincipalName()));\n-    }\n+  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n+      throws IOException, YarnException {\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(service.getName()));\n \n-    if (persistedService.getVersion().equals(service.getVersion())) {\n-      String message \u003d\n-          service.getName() + \" is already at version \" + service.getVersion()\n-              + \". There is nothing to upgrade.\";\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d service.getName() + \" is at \" +\n+          appReport.getYarnApplicationState()\n+          + \" state, upgrade can only be invoked when service is running.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n-\n-    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n-\n-    ApplicationReport appReport \u003d\n-        yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n-      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n-    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n-        UpgradeServiceRequestProto.newBuilder();\n-    requestBuilder.setVersion(service.getVersion());\n-\n-    proxy.upgrade(requestBuilder.build());\n+    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n+    compInstances.forEach(compInst -\u003e\n+        containerIdsToUpgrade.add(compInst.getId()));\n+    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n+    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n+        CompInstancesUpgradeRequestProto.newBuilder();\n+    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n+    proxy.upgrade(upgradeRequestBuilder.build());\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n      throws IOException, YarnException {\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d service.getName() + \" is at \" +\n          appReport.getYarnApplicationState()\n          + \" state, upgrade can only be invoked when service is running.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n    compInstances.forEach(compInst -\u003e\n        containerIdsToUpgrade.add(compInst.getId()));\n    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n        CompInstancesUpgradeRequestProto.newBuilder();\n    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n    proxy.upgrade(upgradeRequestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[service-Service]",
            "newValue": "[service-Service, compInstances-List\u003cContainer\u003e]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,27 @@\n-  public int actionUpgrade(Service service) throws YarnException, IOException {\n-    Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, service.getName());\n-    if (!StringUtils.isEmpty(persistedService.getId())) {\n-      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n-          ApplicationId.fromString(persistedService.getId()),\n-          persistedService.getKerberosPrincipal().getPrincipalName()));\n-    }\n+  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n+      throws IOException, YarnException {\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(service.getName()));\n \n-    if (persistedService.getVersion().equals(service.getVersion())) {\n-      String message \u003d\n-          service.getName() + \" is already at version \" + service.getVersion()\n-              + \". There is nothing to upgrade.\";\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d service.getName() + \" is at \" +\n+          appReport.getYarnApplicationState()\n+          + \" state, upgrade can only be invoked when service is running.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n-\n-    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n-\n-    ApplicationReport appReport \u003d\n-        yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n-      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n-    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n-        UpgradeServiceRequestProto.newBuilder();\n-    requestBuilder.setVersion(service.getVersion());\n-\n-    proxy.upgrade(requestBuilder.build());\n+    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n+    compInstances.forEach(compInst -\u003e\n+        containerIdsToUpgrade.add(compInst.getId()));\n+    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n+    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n+        CompInstancesUpgradeRequestProto.newBuilder();\n+    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n+    proxy.upgrade(upgradeRequestBuilder.build());\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n      throws IOException, YarnException {\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d service.getName() + \" is at \" +\n          appReport.getYarnApplicationState()\n          + \" state, upgrade can only be invoked when service is running.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n    compInstances.forEach(compInst -\u003e\n        containerIdsToUpgrade.add(compInst.getId()));\n    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n        CompInstancesUpgradeRequestProto.newBuilder();\n    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n    proxy.upgrade(upgradeRequestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[YarnException, IOException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/04/18 1:54 PM",
          "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 9.29,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,27 @@\n-  public int actionUpgrade(Service service) throws YarnException, IOException {\n-    Service persistedService \u003d\n-        ServiceApiUtil.loadService(fs, service.getName());\n-    if (!StringUtils.isEmpty(persistedService.getId())) {\n-      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n-          ApplicationId.fromString(persistedService.getId()),\n-          persistedService.getKerberosPrincipal().getPrincipalName()));\n-    }\n+  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n+      throws IOException, YarnException {\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(service.getName()));\n \n-    if (persistedService.getVersion().equals(service.getVersion())) {\n-      String message \u003d\n-          service.getName() + \" is already at version \" + service.getVersion()\n-              + \". There is nothing to upgrade.\";\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d service.getName() + \" is at \" +\n+          appReport.getYarnApplicationState()\n+          + \" state, upgrade can only be invoked when service is running.\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n-\n-    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n-    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n-    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n-\n-    ApplicationReport appReport \u003d\n-        yarnClient.getApplicationReport(getAppId(service.getName()));\n     if (StringUtils.isEmpty(appReport.getHost())) {\n-      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n     }\n     ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n \n-    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n-        UpgradeServiceRequestProto.newBuilder();\n-    requestBuilder.setVersion(service.getVersion());\n-\n-    proxy.upgrade(requestBuilder.build());\n+    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n+    compInstances.forEach(compInst -\u003e\n+        containerIdsToUpgrade.add(compInst.getId()));\n+    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n+    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n+        CompInstancesUpgradeRequestProto.newBuilder();\n+    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n+    proxy.upgrade(upgradeRequestBuilder.build());\n     return EXIT_SUCCESS;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int actionUpgrade(Service service, List\u003cContainer\u003e compInstances)\n      throws IOException, YarnException {\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d service.getName() + \" is at \" +\n          appReport.getYarnApplicationState()\n          + \" state, upgrade can only be invoked when service is running.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty.\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    List\u003cString\u003e containerIdsToUpgrade \u003d new ArrayList\u003c\u003e();\n    compInstances.forEach(compInst -\u003e\n        containerIdsToUpgrade.add(compInst.getId()));\n    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\n    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder \u003d\n        CompInstancesUpgradeRequestProto.newBuilder();\n    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\n    proxy.upgrade(upgradeRequestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,35 @@\n+  public int actionUpgrade(Service service) throws YarnException, IOException {\n+    Service persistedService \u003d\n+        ServiceApiUtil.loadService(fs, service.getName());\n+    if (!StringUtils.isEmpty(persistedService.getId())) {\n+      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n+          ApplicationId.fromString(persistedService.getId()),\n+          persistedService.getKerberosPrincipal().getPrincipalName()));\n+    }\n+\n+    if (persistedService.getVersion().equals(service.getVersion())) {\n+      String message \u003d\n+          service.getName() + \" is already at version \" + service.getVersion()\n+              + \". There is nothing to upgrade.\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n+    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n+    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n+    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(service.getName()));\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(service.getName() + \" AM hostname is empty\");\n+    }\n+    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n+\n+    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n+        UpgradeServiceRequestProto.newBuilder();\n+    requestBuilder.setVersion(service.getVersion());\n+\n+    proxy.upgrade(requestBuilder.build());\n+    return EXIT_SUCCESS;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int actionUpgrade(Service service) throws YarnException, IOException {\n    Service persistedService \u003d\n        ServiceApiUtil.loadService(fs, service.getName());\n    if (!StringUtils.isEmpty(persistedService.getId())) {\n      cachedAppInfo.put(persistedService.getName(), new AppInfo(\n          ApplicationId.fromString(persistedService.getId()),\n          persistedService.getKerberosPrincipal().getPrincipalName()));\n    }\n\n    if (persistedService.getVersion().equals(service.getVersion())) {\n      String message \u003d\n          service.getName() + \" is already at version \" + service.getVersion()\n              + \". There is nothing to upgrade.\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Path serviceUpgradeDir \u003d checkAppNotExistOnHdfs(service, true);\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(service.getName()));\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(service.getName() + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d createAMProxy(service.getName(), appReport);\n\n    UpgradeServiceRequestProto.Builder requestBuilder \u003d\n        UpgradeServiceRequestProto.newBuilder();\n    requestBuilder.setVersion(service.getVersion());\n\n    proxy.upgrade(requestBuilder.build());\n    return EXIT_SUCCESS;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}