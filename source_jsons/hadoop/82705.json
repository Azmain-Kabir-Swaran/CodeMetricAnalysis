{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JvmMetrics.java",
  "functionName": "getGcUsage",
  "functionId": "getGcUsage___rb-MetricsRecordBuilder",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
  "functionStartLine": 183,
  "functionEndLine": 210,
  "numCommitsSeen": 18,
  "timeTaken": 2165,
  "changeHistory": [
    "d162252d7a7223631ff66ba0210953296407e55f",
    "3c6adda291745c592741b87cd613214ae11887e4",
    "5d00067ca7f1460bbda1330e7329205a7b1ce019",
    "af6c91a80c299f87af8c42fa685448b596b7615a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "8a2b40d0726215e48b53ab22382dd49379c36249"
  ],
  "changeHistoryShort": {
    "d162252d7a7223631ff66ba0210953296407e55f": "Ybodychange",
    "3c6adda291745c592741b87cd613214ae11887e4": "Ybodychange",
    "5d00067ca7f1460bbda1330e7329205a7b1ce019": "Ybodychange",
    "af6c91a80c299f87af8c42fa685448b596b7615a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "8a2b40d0726215e48b53ab22382dd49379c36249": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d162252d7a7223631ff66ba0210953296407e55f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15067. GC time percentage reported in JvmMetrics should be a gauge, not counter. Contributed by Misha Dmitriev.\n",
      "commitDate": "23/11/17 9:01 AM",
      "commitName": "d162252d7a7223631ff66ba0210953296407e55f",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "09/11/17 9:06 PM",
      "commitNameOld": "3c6adda291745c592741b87cd613214ae11887e4",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 13.5,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void getGcUsage(MetricsRecordBuilder rb) {\n     long count \u003d 0;\n     long timeMillis \u003d 0;\n     for (GarbageCollectorMXBean gcBean : gcBeans) {\n       long c \u003d gcBean.getCollectionCount();\n       long t \u003d gcBean.getCollectionTime();\n       MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n       rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n       count +\u003d c;\n       timeMillis +\u003d t;\n     }\n     rb.addCounter(GcCount, count)\n       .addCounter(GcTimeMillis, timeMillis);\n     \n     if (pauseMonitor !\u003d null) {\n       rb.addCounter(GcNumWarnThresholdExceeded,\n           pauseMonitor.getNumGcWarnThresholdExceeded());\n       rb.addCounter(GcNumInfoThresholdExceeded,\n           pauseMonitor.getNumGcInfoThresholdExceeded());\n       rb.addCounter(GcTotalExtraSleepTime,\n           pauseMonitor.getTotalGcExtraSleepTime());\n     }\n \n     if (gcTimeMonitor !\u003d null) {\n-      rb.addCounter(GcTimePercentage,\n+      rb.addGauge(GcTimePercentage,\n           gcTimeMonitor.getLatestGcData().getGcTimePercentage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n    \n    if (pauseMonitor !\u003d null) {\n      rb.addCounter(GcNumWarnThresholdExceeded,\n          pauseMonitor.getNumGcWarnThresholdExceeded());\n      rb.addCounter(GcNumInfoThresholdExceeded,\n          pauseMonitor.getNumGcInfoThresholdExceeded());\n      rb.addCounter(GcTotalExtraSleepTime,\n          pauseMonitor.getTotalGcExtraSleepTime());\n    }\n\n    if (gcTimeMonitor !\u003d null) {\n      rb.addGauge(GcTimePercentage,\n          gcTimeMonitor.getLatestGcData().getGcTimePercentage());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {}
    },
    "3c6adda291745c592741b87cd613214ae11887e4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14960. Add GC time percentage monitor/alerter. Contributed by Misha Dmitriev.\n",
      "commitDate": "09/11/17 9:06 PM",
      "commitName": "3c6adda291745c592741b87cd613214ae11887e4",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "17/10/17 7:06 PM",
      "commitNameOld": "86ee0c5e4e304d9551a24a3d8b9161ca1502b70e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 23.12,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   private void getGcUsage(MetricsRecordBuilder rb) {\n     long count \u003d 0;\n     long timeMillis \u003d 0;\n     for (GarbageCollectorMXBean gcBean : gcBeans) {\n       long c \u003d gcBean.getCollectionCount();\n       long t \u003d gcBean.getCollectionTime();\n       MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n       rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n       count +\u003d c;\n       timeMillis +\u003d t;\n     }\n     rb.addCounter(GcCount, count)\n       .addCounter(GcTimeMillis, timeMillis);\n     \n     if (pauseMonitor !\u003d null) {\n       rb.addCounter(GcNumWarnThresholdExceeded,\n           pauseMonitor.getNumGcWarnThresholdExceeded());\n       rb.addCounter(GcNumInfoThresholdExceeded,\n           pauseMonitor.getNumGcInfoThresholdExceeded());\n       rb.addCounter(GcTotalExtraSleepTime,\n           pauseMonitor.getTotalGcExtraSleepTime());\n     }\n+\n+    if (gcTimeMonitor !\u003d null) {\n+      rb.addCounter(GcTimePercentage,\n+          gcTimeMonitor.getLatestGcData().getGcTimePercentage());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n    \n    if (pauseMonitor !\u003d null) {\n      rb.addCounter(GcNumWarnThresholdExceeded,\n          pauseMonitor.getNumGcWarnThresholdExceeded());\n      rb.addCounter(GcNumInfoThresholdExceeded,\n          pauseMonitor.getNumGcInfoThresholdExceeded());\n      rb.addCounter(GcTotalExtraSleepTime,\n          pauseMonitor.getTotalGcExtraSleepTime());\n    }\n\n    if (gcTimeMonitor !\u003d null) {\n      rb.addCounter(GcTimePercentage,\n          gcTimeMonitor.getLatestGcData().getGcTimePercentage());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {}
    },
    "5d00067ca7f1460bbda1330e7329205a7b1ce019": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12771. Fix typo in JvmPauseMonitor#getNumGcWarnThreadholdExceeded. Contributed by Xiaobing Zhou.\n",
      "commitDate": "05/02/16 10:37 AM",
      "commitName": "5d00067ca7f1460bbda1330e7329205a7b1ce019",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "04/10/15 4:15 PM",
      "commitNameOld": "30e2f836a26490a24c7ddea754dd19f95b24bbc8",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 123.81,
      "commitsBetweenForRepo": 856,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void getGcUsage(MetricsRecordBuilder rb) {\n     long count \u003d 0;\n     long timeMillis \u003d 0;\n     for (GarbageCollectorMXBean gcBean : gcBeans) {\n       long c \u003d gcBean.getCollectionCount();\n       long t \u003d gcBean.getCollectionTime();\n       MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n       rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n       count +\u003d c;\n       timeMillis +\u003d t;\n     }\n     rb.addCounter(GcCount, count)\n       .addCounter(GcTimeMillis, timeMillis);\n     \n     if (pauseMonitor !\u003d null) {\n       rb.addCounter(GcNumWarnThresholdExceeded,\n-          pauseMonitor.getNumGcWarnThreadholdExceeded());\n+          pauseMonitor.getNumGcWarnThresholdExceeded());\n       rb.addCounter(GcNumInfoThresholdExceeded,\n           pauseMonitor.getNumGcInfoThresholdExceeded());\n       rb.addCounter(GcTotalExtraSleepTime,\n           pauseMonitor.getTotalGcExtraSleepTime());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n    \n    if (pauseMonitor !\u003d null) {\n      rb.addCounter(GcNumWarnThresholdExceeded,\n          pauseMonitor.getNumGcWarnThresholdExceeded());\n      rb.addCounter(GcNumInfoThresholdExceeded,\n          pauseMonitor.getNumGcInfoThresholdExceeded());\n      rb.addCounter(GcTotalExtraSleepTime,\n          pauseMonitor.getTotalGcExtraSleepTime());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {}
    },
    "af6c91a80c299f87af8c42fa685448b596b7615a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6403. Add metrics for log warnings reported by JVM pauses. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604074 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 7:38 PM",
      "commitName": "af6c91a80c299f87af8c42fa685448b596b7615a",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "20/12/13 2:06 PM",
      "commitNameOld": "71b4903ea41a17c9305b25d24be786aed5b6e82f",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 181.19,
      "commitsBetweenForRepo": 1217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,23 @@\n   private void getGcUsage(MetricsRecordBuilder rb) {\n     long count \u003d 0;\n     long timeMillis \u003d 0;\n     for (GarbageCollectorMXBean gcBean : gcBeans) {\n       long c \u003d gcBean.getCollectionCount();\n       long t \u003d gcBean.getCollectionTime();\n       MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n       rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n       count +\u003d c;\n       timeMillis +\u003d t;\n     }\n     rb.addCounter(GcCount, count)\n       .addCounter(GcTimeMillis, timeMillis);\n+    \n+    if (pauseMonitor !\u003d null) {\n+      rb.addCounter(GcNumWarnThresholdExceeded,\n+          pauseMonitor.getNumGcWarnThreadholdExceeded());\n+      rb.addCounter(GcNumInfoThresholdExceeded,\n+          pauseMonitor.getNumGcInfoThresholdExceeded());\n+      rb.addCounter(GcTotalExtraSleepTime,\n+          pauseMonitor.getTotalGcExtraSleepTime());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n    \n    if (pauseMonitor !\u003d null) {\n      rb.addCounter(GcNumWarnThresholdExceeded,\n          pauseMonitor.getNumGcWarnThreadholdExceeded());\n      rb.addCounter(GcNumInfoThresholdExceeded,\n          pauseMonitor.getNumGcInfoThresholdExceeded());\n      rb.addCounter(GcTotalExtraSleepTime,\n          pauseMonitor.getTotalGcExtraSleepTime());\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/source/JvmMetrics.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/source/JvmMetrics.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/source/JvmMetrics.java"
      }
    },
    "8a2b40d0726215e48b53ab22382dd49379c36249": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6920. Metrics instrumentation to move new metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1101682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/11 4:56 PM",
      "commitName": "8a2b40d0726215e48b53ab22382dd49379c36249",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,14 @@\n+  private void getGcUsage(MetricsRecordBuilder rb) {\n+    long count \u003d 0;\n+    long timeMillis \u003d 0;\n+    for (GarbageCollectorMXBean gcBean : gcBeans) {\n+      long c \u003d gcBean.getCollectionCount();\n+      long t \u003d gcBean.getCollectionTime();\n+      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n+      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n+      count +\u003d c;\n+      timeMillis +\u003d t;\n+    }\n+    rb.addCounter(GcCount, count)\n+      .addCounter(GcTimeMillis, timeMillis);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void getGcUsage(MetricsRecordBuilder rb) {\n    long count \u003d 0;\n    long timeMillis \u003d 0;\n    for (GarbageCollectorMXBean gcBean : gcBeans) {\n      long c \u003d gcBean.getCollectionCount();\n      long t \u003d gcBean.getCollectionTime();\n      MetricsInfo[] gcInfo \u003d getGcInfo(gcBean.getName());\n      rb.addCounter(gcInfo[0], c).addCounter(gcInfo[1], t);\n      count +\u003d c;\n      timeMillis +\u003d t;\n    }\n    rb.addCounter(GcCount, count)\n      .addCounter(GcTimeMillis, timeMillis);\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/source/JvmMetrics.java"
    }
  }
}