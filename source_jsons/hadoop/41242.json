{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSPreemptionThread.java",
  "functionName": "preemptContainers",
  "functionId": "preemptContainers___containers-List__RMContainer__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
  "functionStartLine": 233,
  "functionEndLine": 237,
  "numCommitsSeen": 50,
  "timeTaken": 4936,
  "changeHistory": [
    "2bde3aedf139368fc71f053d8dd6580b498ff46d",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": "Ybodychange",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ybodychange",
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7290. Method canContainerBePreempted can return true when it shouldn\u0027t. (Contributed by Steven Rand)\n",
      "commitDate": "24/11/17 11:32 PM",
      "commitName": "2bde3aedf139368fc71f053d8dd6580b498ff46d",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "27/07/17 11:19 PM",
      "commitNameOld": "9902be72cbf7a170caa5cb1f13c227d881a39064",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 120.05,
      "commitsBetweenForRepo": 1058,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,5 @@\n   private void preemptContainers(List\u003cRMContainer\u003e containers) {\n-    // Warn application about containers to be killed\n-    for (RMContainer container : containers) {\n-      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n-      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n-      LOG.info(\"Preempting container \" + container +\n-          \" from queue \" + app.getQueueName());\n-      app.trackContainerForPreemption(container);\n-    }\n-\n     // Schedule timer task to kill containers\n     preemptionTimer.schedule(\n         new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/01/17 12:17 PM",
      "commitNameOld": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 21.46,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,14 @@\n   private void preemptContainers(List\u003cRMContainer\u003e containers) {\n-    // Mark the containers as being considered for preemption on the node.\n-    // Make sure the containers are subsequently removed by calling\n-    // FSSchedulerNode#removeContainerForPreemption.\n-    if (containers.size() \u003e 0) {\n-      FSSchedulerNode node \u003d (FSSchedulerNode) scheduler.getNodeTracker()\n-          .getNode(containers.get(0).getNodeId());\n-      node.addContainersForPreemption(containers);\n-    }\n-\n     // Warn application about containers to be killed\n     for (RMContainer container : containers) {\n       ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n       FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n-      FSLeafQueue queue \u003d app.getQueue();\n       LOG.info(\"Preempting container \" + container +\n-          \" from queue \" + queue.getName());\n+          \" from queue \" + app.getQueueName());\n       app.trackContainerForPreemption(container);\n     }\n \n     // Schedule timer task to kill containers\n     preemptionTimer.schedule(\n         new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + app.getQueueName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "abedb8a9d86b4593a37fd3d2313fbcb057c7846a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5830. FairScheduler: Avoid preempting AM containers. (Yufei Gu via kasha)\n",
      "commitDate": "25/01/17 12:17 PM",
      "commitName": "abedb8a9d86b4593a37fd3d2313fbcb057c7846a",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 19.1,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,24 @@\n   private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Mark the containers as being considered for preemption on the node.\n+    // Make sure the containers are subsequently removed by calling\n+    // FSSchedulerNode#removeContainerForPreemption.\n+    if (containers.size() \u003e 0) {\n+      FSSchedulerNode node \u003d (FSSchedulerNode) scheduler.getNodeTracker()\n+          .getNode(containers.get(0).getNodeId());\n+      node.addContainersForPreemption(containers);\n+    }\n+\n     // Warn application about containers to be killed\n     for (RMContainer container : containers) {\n       ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n       FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n       FSLeafQueue queue \u003d app.getQueue();\n       LOG.info(\"Preempting container \" + container +\n           \" from queue \" + queue.getName());\n       app.trackContainerForPreemption(container);\n     }\n \n     // Schedule timer task to kill containers\n     preemptionTimer.schedule(\n         new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Mark the containers as being considered for preemption on the node.\n    // Make sure the containers are subsequently removed by calling\n    // FSSchedulerNode#removeContainerForPreemption.\n    if (containers.size() \u003e 0) {\n      FSSchedulerNode node \u003d (FSSchedulerNode) scheduler.getNodeTracker()\n          .getNode(containers.get(0).getNodeId());\n      node.addContainersForPreemption(containers);\n    }\n\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
            "oldMethodName": "preemptContainer",
            "newMethodName": "preemptContainers"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "RMContainer",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "preemptContainer",
            "newValue": "preemptContainers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
          "commitDate": "23/11/16 9:48 PM",
          "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "23/11/16 5:08 PM",
          "commitNameOld": "c7a5f2906fcfd073a402b6981b091bd6d9b80294",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public RMContainer preemptContainer() {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n-          \"container\");\n+  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n+    // Warn application about containers to be killed\n+    for (RMContainer container : containers) {\n+      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n+      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n+      FSLeafQueue queue \u003d app.getQueue();\n+      LOG.info(\"Preempting container \" + container +\n+          \" from queue \" + queue.getName());\n+      app.trackContainerForPreemption(container);\n     }\n \n-    RMContainer toBePreempted \u003d null;\n-    for (RMContainer container : getLiveContainers()) {\n-      if (!getPreemptionContainers().contains(container) \u0026\u0026\n-          (toBePreempted \u003d\u003d null ||\n-              comparator.compare(toBePreempted, container) \u003e 0)) {\n-        toBePreempted \u003d container;\n-      }\n-    }\n-    return toBePreempted;\n+    // Schedule timer task to kill containers\n+    preemptionTimer.schedule(\n+        new PreemptContainersTask(containers), warnTimeBeforeKill);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void preemptContainers(List\u003cRMContainer\u003e containers) {\n    // Warn application about containers to be killed\n    for (RMContainer container : containers) {\n      ApplicationAttemptId appAttemptId \u003d container.getApplicationAttemptId();\n      FSAppAttempt app \u003d scheduler.getSchedulerApp(appAttemptId);\n      FSLeafQueue queue \u003d app.getQueue();\n      LOG.info(\"Preempting container \" + container +\n          \" from queue \" + queue.getName());\n      app.trackContainerForPreemption(container);\n    }\n\n    // Schedule timer task to kill containers\n    preemptionTimer.schedule(\n        new PreemptContainersTask(containers), warnTimeBeforeKill);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[containers-List\u003cRMContainer\u003e]"
          }
        }
      ]
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,16 @@\n+  public RMContainer preemptContainer() {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n+          \"container\");\n+    }\n+\n+    RMContainer toBePreempted \u003d null;\n+    for (RMContainer container : getLiveContainers()) {\n+      if (!getPreemptionContainers().contains(container) \u0026\u0026\n+          (toBePreempted \u003d\u003d null ||\n+              comparator.compare(toBePreempted, container) \u003e 0)) {\n+        toBePreempted \u003d container;\n+      }\n+    }\n+    return toBePreempted;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer preemptContainer() {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"App \" + getName() + \" is going to preempt a running \" +\n          \"container\");\n    }\n\n    RMContainer toBePreempted \u003d null;\n    for (RMContainer container : getLiveContainers()) {\n      if (!getPreemptionContainers().contains(container) \u0026\u0026\n          (toBePreempted \u003d\u003d null ||\n              comparator.compare(toBePreempted, container) \u003e 0)) {\n        toBePreempted \u003d container;\n      }\n    }\n    return toBePreempted;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}