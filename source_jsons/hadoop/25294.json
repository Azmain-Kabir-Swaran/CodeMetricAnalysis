{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeCollectorOnlyHandler.java",
  "functionName": "onCall",
  "functionId": "onCall___command-Command__parameter-ReadWriteBuffer",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/handlers/NativeCollectorOnlyHandler.java",
  "functionStartLine": 140,
  "functionEndLine": 171,
  "numCommitsSeen": 4,
  "timeTaken": 653,
  "changeHistory": [
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139"
  ],
  "changeHistoryShort": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2551c06a09fb80a9e69adbc01c4c34b93ad0139": {
      "type": "Yintroduced",
      "commitMessage": "Import initial code for MAPREDUCE-2841 (native output collector)\n\nContributed by:\n  Binglin Chang\n  Yang Dong\n  Sean Zhong\n  Manu Zhang\n  Zhongliang Zhu\n  Vincent Wang\n  Yan Dong\n  Cheng Lian\n  Xusen Yin\n  Fangqin Dai\n  Jiang Weihua\n  Gansha Wu\n  Avik Dey\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/MR-2841@1611413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 10:44 AM",
      "commitName": "b2551c06a09fb80a9e69adbc01c4c34b93ad0139",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  public ReadWriteBuffer onCall(Command command, ReadWriteBuffer parameter) throws IOException {\n+    Path p \u003d null;\n+    if (null \u003d\u003d command) {\n+      return null;\n+    }\n+        \n+    if (command.equals(GET_OUTPUT_PATH)) {\n+      p \u003d output.getOutputFileForWrite(-1);\n+    } else if (command.equals(GET_OUTPUT_INDEX_PATH)) {\n+      p \u003d output.getOutputIndexFileForWrite(-1);\n+    } else if (command.equals(GET_SPILL_PATH)) {\n+      p \u003d output.getSpillFileForWrite(spillNumber++, -1);\n+      \n+    } else if (command.equals(GET_COMBINE_HANDLER)) {\n+      if (null \u003d\u003d combinerHandler) {\n+        return null;\n+      }\n+      final ReadWriteBuffer result \u003d new ReadWriteBuffer(8);\n+      \n+      result.writeLong(combinerHandler.getId());\n+      return result;\n+    } else {\n+      throw new IOException(\"Illegal command: \" + command.toString());\n+    }\n+    if (p !\u003d null) {\n+      final ReadWriteBuffer result \u003d new ReadWriteBuffer();\n+      result.writeString(p.toUri().getPath());\n+      return result;\n+    } else {\n+      throw new IOException(\"MapOutputFile can\u0027t allocate spill/output file\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReadWriteBuffer onCall(Command command, ReadWriteBuffer parameter) throws IOException {\n    Path p \u003d null;\n    if (null \u003d\u003d command) {\n      return null;\n    }\n        \n    if (command.equals(GET_OUTPUT_PATH)) {\n      p \u003d output.getOutputFileForWrite(-1);\n    } else if (command.equals(GET_OUTPUT_INDEX_PATH)) {\n      p \u003d output.getOutputIndexFileForWrite(-1);\n    } else if (command.equals(GET_SPILL_PATH)) {\n      p \u003d output.getSpillFileForWrite(spillNumber++, -1);\n      \n    } else if (command.equals(GET_COMBINE_HANDLER)) {\n      if (null \u003d\u003d combinerHandler) {\n        return null;\n      }\n      final ReadWriteBuffer result \u003d new ReadWriteBuffer(8);\n      \n      result.writeLong(combinerHandler.getId());\n      return result;\n    } else {\n      throw new IOException(\"Illegal command: \" + command.toString());\n    }\n    if (p !\u003d null) {\n      final ReadWriteBuffer result \u003d new ReadWriteBuffer();\n      result.writeString(p.toUri().getPath());\n      return result;\n    } else {\n      throw new IOException(\"MapOutputFile can\u0027t allocate spill/output file\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-nativetask/src/main/java/org/apache/hadoop/mapred/nativetask/handlers/NativeCollectorOnlyHandler.java"
    }
  }
}