{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerPlanFollower.java",
  "functionName": "init",
  "functionId": "init___clock-Clock__sched-ResourceScheduler__plans-Collection__Plan__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacitySchedulerPlanFollower.java",
  "functionStartLine": 64,
  "functionEndLine": 73,
  "numCommitsSeen": 7,
  "timeTaken": 857,
  "changeHistory": [
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe"
  ],
  "changeHistoryShort": {
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844": "Ybodychange",
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7257acd8a7adb74d81cd1d009d4a99f023ed844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2998. Abstract out scheduler independent PlanFollower components. (Anubhav Dhoot via kasha)\n",
      "commitDate": "30/12/14 7:55 PM",
      "commitName": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 76.1,
      "commitsBetweenForRepo": 583,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,10 @@\n   public void init(Clock clock, ResourceScheduler sched, Collection\u003cPlan\u003e plans) {\n+    super.init(clock, sched, plans);\n     LOG.info(\"Initializing Plan Follower Policy:\"\n         + this.getClass().getCanonicalName());\n     if (!(sched instanceof CapacityScheduler)) {\n       throw new YarnRuntimeException(\n           \"CapacitySchedulerPlanFollower can only work with CapacityScheduler\");\n     }\n-    this.clock \u003d clock;\n-    this.scheduler \u003d (CapacityScheduler) sched;\n-    this.plans.addAll(plans);\n+    this.cs \u003d (CapacityScheduler) sched;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Clock clock, ResourceScheduler sched, Collection\u003cPlan\u003e plans) {\n    super.init(clock, sched, plans);\n    LOG.info(\"Initializing Plan Follower Policy:\"\n        + this.getClass().getCanonicalName());\n    if (!(sched instanceof CapacityScheduler)) {\n      throw new YarnRuntimeException(\n          \"CapacitySchedulerPlanFollower can only work with CapacityScheduler\");\n    }\n    this.cs \u003d (CapacityScheduler) sched;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacitySchedulerPlanFollower.java",
      "extendedDetails": {}
    },
    "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1712. Plan follower that synchronizes the current state of reservation subsystem with the scheduler. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 169085319b8b76641f8b9f6840a3fef06d221e2b)\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "3418c56bcf4bbddaf483bdaa1a15a8bbc4039bfe",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,11 @@\n+  public void init(Clock clock, ResourceScheduler sched, Collection\u003cPlan\u003e plans) {\n+    LOG.info(\"Initializing Plan Follower Policy:\"\n+        + this.getClass().getCanonicalName());\n+    if (!(sched instanceof CapacityScheduler)) {\n+      throw new YarnRuntimeException(\n+          \"CapacitySchedulerPlanFollower can only work with CapacityScheduler\");\n+    }\n+    this.clock \u003d clock;\n+    this.scheduler \u003d (CapacityScheduler) sched;\n+    this.plans.addAll(plans);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Clock clock, ResourceScheduler sched, Collection\u003cPlan\u003e plans) {\n    LOG.info(\"Initializing Plan Follower Policy:\"\n        + this.getClass().getCanonicalName());\n    if (!(sched instanceof CapacityScheduler)) {\n      throw new YarnRuntimeException(\n          \"CapacitySchedulerPlanFollower can only work with CapacityScheduler\");\n    }\n    this.clock \u003d clock;\n    this.scheduler \u003d (CapacityScheduler) sched;\n    this.plans.addAll(plans);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/CapacitySchedulerPlanFollower.java"
    }
  }
}