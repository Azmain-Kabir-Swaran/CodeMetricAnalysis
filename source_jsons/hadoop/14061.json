{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenSecretManager.java",
  "functionName": "createCredentials",
  "functionId": "createCredentials___namenode-NameNode(modifiers-final)__ugi-UserGroupInformation(modifiers-final)__renewer-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java",
  "functionStartLine": 424,
  "functionEndLine": 437,
  "numCommitsSeen": 23,
  "timeTaken": 1323,
  "changeHistory": [
    "bbff44cb03d0150f990acc3b77170893241cc282",
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c"
  ],
  "changeHistoryShort": {
    "bbff44cb03d0150f990acc3b77170893241cc282": "Ybodychange",
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669": "Ybodychange",
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbff44cb03d0150f990acc3b77170893241cc282": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6776. Using distcp to copy data between insecure and secure cluster via webdhfs doesn\u0027t work. (yzhangal via tucu)\n",
      "commitDate": "09/09/14 10:16 PM",
      "commitName": "bbff44cb03d0150f990acc3b77170893241cc282",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/05/14 6:15 PM",
      "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 119.17,
      "commitsBetweenForRepo": 874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,14 @@\n   public static Credentials createCredentials(final NameNode namenode,\n       final UserGroupInformation ugi, final String renewer) throws IOException {\n     final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n         ).getDelegationToken(new Text(renewer));\n     if (token \u003d\u003d null) {\n-      throw new IOException(\"Failed to get the token for \" + renewer\n-          + \", user\u003d\" + ugi.getShortUserName());\n+      return null;\n     }\n \n     final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n     SecurityUtil.setTokenService(token, addr);\n     final Credentials c \u003d new Credentials();\n     c.addToken(new Text(ugi.getShortUserName()), token);\n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials createCredentials(final NameNode namenode,\n      final UserGroupInformation ugi, final String renewer) throws IOException {\n    final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n        ).getDelegationToken(new Text(renewer));\n    if (token \u003d\u003d null) {\n      return null;\n    }\n\n    final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n    SecurityUtil.setTokenService(token, addr);\n    final Credentials c \u003d new Credentials();\n    c.addToken(new Text(ugi.getShortUserName()), token);\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "9eb8f4d267ca38c16e3ba191a3b754de7d167669": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2784. Update hftp and hdfs for host-based token support. Contributed by Kihwal Lee.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239763 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/12 11:04 AM",
      "commitName": "9eb8f4d267ca38c16e3ba191a3b754de7d167669",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "16/09/11 8:02 AM",
      "commitNameOld": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 139.17,
      "commitsBetweenForRepo": 872,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n   public static Credentials createCredentials(final NameNode namenode,\n       final UserGroupInformation ugi, final String renewer) throws IOException {\n     final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n         ).getDelegationToken(new Text(renewer));\n     if (token \u003d\u003d null) {\n       throw new IOException(\"Failed to get the token for \" + renewer\n           + \", user\u003d\" + ugi.getShortUserName());\n     }\n \n     final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n-    final String s \u003d addr.getAddress().getHostAddress() + \":\" + addr.getPort();\n-    token.setService(new Text(s));\n+    SecurityUtil.setTokenService(token, addr);\n     final Credentials c \u003d new Credentials();\n     c.addToken(new Text(ugi.getShortUserName()), token);\n     return c;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials createCredentials(final NameNode namenode,\n      final UserGroupInformation ugi, final String renewer) throws IOException {\n    final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n        ).getDelegationToken(new Text(renewer));\n    if (token \u003d\u003d null) {\n      throw new IOException(\"Failed to get the token for \" + renewer\n          + \", user\u003d\" + ugi.getShortUserName());\n    }\n\n    final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n    SecurityUtil.setTokenService(token, addr);\n    final Credentials c \u003d new Credentials();\n    c.addToken(new Text(ugi.getShortUserName()), token);\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java",
      "extendedDetails": {}
    },
    "78e3821b819b441d1faf4bc66c659cdeddc6006c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2318. Provide authentication to webhdfs using SPNEGO and delegation tokens.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/11 8:02 AM",
      "commitName": "78e3821b819b441d1faf4bc66c659cdeddc6006c",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,16 @@\n+  public static Credentials createCredentials(final NameNode namenode,\n+      final UserGroupInformation ugi, final String renewer) throws IOException {\n+    final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n+        ).getDelegationToken(new Text(renewer));\n+    if (token \u003d\u003d null) {\n+      throw new IOException(\"Failed to get the token for \" + renewer\n+          + \", user\u003d\" + ugi.getShortUserName());\n+    }\n+\n+    final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n+    final String s \u003d addr.getAddress().getHostAddress() + \":\" + addr.getPort();\n+    token.setService(new Text(s));\n+    final Credentials c \u003d new Credentials();\n+    c.addToken(new Text(ugi.getShortUserName()), token);\n+    return c;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials createCredentials(final NameNode namenode,\n      final UserGroupInformation ugi, final String renewer) throws IOException {\n    final Token\u003cDelegationTokenIdentifier\u003e token \u003d namenode.getRpcServer(\n        ).getDelegationToken(new Text(renewer));\n    if (token \u003d\u003d null) {\n      throw new IOException(\"Failed to get the token for \" + renewer\n          + \", user\u003d\" + ugi.getShortUserName());\n    }\n\n    final InetSocketAddress addr \u003d namenode.getNameNodeAddress();\n    final String s \u003d addr.getAddress().getHostAddress() + \":\" + addr.getPort();\n    token.setService(new Text(s));\n    final Credentials c \u003d new Credentials();\n    c.addToken(new Text(ugi.getShortUserName()), token);\n    return c;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/security/token/delegation/DelegationTokenSecretManager.java"
    }
  }
}