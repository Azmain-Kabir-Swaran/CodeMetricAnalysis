{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMCollectorService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
  "functionStartLine": 67,
  "functionEndLine": 102,
  "numCommitsSeen": 14,
  "timeTaken": 3245,
  "changeHistory": [
    "84612788339392fcda1aef0e27c43f5c6b2a19e5",
    "32188d32954d94ec2efeec2b2fcc5b2abff4c1ea",
    "b664569586db39647f15340ce82ccc0f0869897e",
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "9b5636408005676ae580f8d929f8e912c27828e7"
  ],
  "changeHistoryShort": {
    "84612788339392fcda1aef0e27c43f5c6b2a19e5": "Ybodychange",
    "32188d32954d94ec2efeec2b2fcc5b2abff4c1ea": "Ybodychange",
    "b664569586db39647f15340ce82ccc0f0869897e": "Ybodychange",
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84612788339392fcda1aef0e27c43f5c6b2a19e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8544. [DS] AM registration fails when hadoop authorization is enabled. Contributed by Bibin A Chundatt.\n",
      "commitDate": "24/07/18 12:39 AM",
      "commitName": "84612788339392fcda1aef0e27c43f5c6b2a19e5",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "32188d32954d94ec2efeec2b2fcc5b2abff4c1ea",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 328.07,
      "commitsBetweenForRepo": 2957,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n \n     InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     // Kerberos based authentication to be used for CollectorNodemanager\n     // protocol if security is enabled.\n     server \u003d\n         rpc.getServer(CollectorNodemanagerProtocol.class, this,\n             collectorServerAddress, serverConf, null,\n             conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                 YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n-      server.refreshServiceAcl(conf, new NMPolicyProvider());\n+      server.refreshServiceAcl(conf, NMPolicyProvider.getInstance());\n     }\n \n     server.start();\n     collectorServerAddress \u003d conf.updateConnectAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         server.getListenerAddress());\n     // start remaining services\n     super.serviceStart();\n     LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    // Kerberos based authentication to be used for CollectorNodemanager\n    // protocol if security is enabled.\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf, null,\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      server.refreshServiceAcl(conf, NMPolicyProvider.getInstance());\n    }\n\n    server.start();\n    collectorServerAddress \u003d conf.updateConnectAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        server.getListenerAddress());\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "32188d32954d94ec2efeec2b2fcc5b2abff4c1ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7038. [Atsv2 Security] CollectorNodemanagerProtocol RPC interface doesn\u0027t work when service authorization is enabled. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "32188d32954d94ec2efeec2b2fcc5b2abff4c1ea",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "b664569586db39647f15340ce82ccc0f0869897e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,36 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n \n     InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     // Kerberos based authentication to be used for CollectorNodemanager\n     // protocol if security is enabled.\n     server \u003d\n         rpc.getServer(CollectorNodemanagerProtocol.class, this,\n             collectorServerAddress, serverConf, null,\n             conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                 YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n+      server.refreshServiceAcl(conf, new NMPolicyProvider());\n+    }\n+\n     server.start();\n     collectorServerAddress \u003d conf.updateConnectAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         server.getListenerAddress());\n     // start remaining services\n     super.serviceStart();\n     LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    // Kerberos based authentication to be used for CollectorNodemanager\n    // protocol if security is enabled.\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf, null,\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      server.refreshServiceAcl(conf, new NMPolicyProvider());\n    }\n\n    server.start();\n    collectorServerAddress \u003d conf.updateConnectAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        server.getListenerAddress());\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "b664569586db39647f15340ce82ccc0f0869897e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7006. [ATSv2 Security] Changes for authentication for CollectorNodemanagerProtocol. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b664569586db39647f15340ce82ccc0f0869897e",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "78b7e070d8009c78665a2baa64fe888788f53e69",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n \n     InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n-    // TODO Security settings.\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n+    // Kerberos based authentication to be used for CollectorNodemanager\n+    // protocol if security is enabled.\n     server \u003d\n         rpc.getServer(CollectorNodemanagerProtocol.class, this,\n-            collectorServerAddress, serverConf,\n-            this.context.getNMTokenSecretManager(),\n+            collectorServerAddress, serverConf, null,\n             conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                 YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n     server.start();\n     collectorServerAddress \u003d conf.updateConnectAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         server.getListenerAddress());\n     // start remaining services\n     super.serviceStart();\n     LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    // Kerberos based authentication to be used for CollectorNodemanager\n    // protocol if security is enabled.\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf, null,\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    server.start();\n    collectorServerAddress \u003d conf.updateConnectAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        server.getListenerAddress());\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "d275677e240cca469a4cec3dc7238e3f18b3f7e9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3634. TestMRTimelineEventHandling and TestApplication are broken. Contributed by Sangjin Lee.\n\n(cherry picked from commit b059dd4882fd759e4762cc11c019be4b68fb74c1)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d275677e240cca469a4cec3dc7238e3f18b3f7e9",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n \n     InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // TODO Security settings.\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n         rpc.getServer(CollectorNodemanagerProtocol.class, this,\n             collectorServerAddress, serverConf,\n             this.context.getNMTokenSecretManager(),\n             conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                 YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n     server.start();\n+    collectorServerAddress \u003d conf.updateConnectAddr(\n+        YarnConfiguration.NM_BIND_HOST,\n+        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n+        server.getListenerAddress());\n     // start remaining services\n     super.serviceStart();\n     LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // TODO Security settings.\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    server.start();\n    collectorServerAddress \u003d conf.updateConnectAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        server.getListenerAddress());\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n-    \n-    InetSocketAddress aggregatorServerAddress \u003d conf.getSocketAddr(\n+\n+    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n-        YarnConfiguration.NM_AGGREGATOR_SERVICE_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_PORT);\n+        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // TODO Security settings.\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n-        rpc.getServer(AggregatorNodemanagerProtocol.class, this, \n-            aggregatorServerAddress, serverConf,\n+        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n+            collectorServerAddress, serverConf,\n             this.context.getNMTokenSecretManager(),\n-            conf.getInt(YarnConfiguration.NM_AGGREGATOR_SERVICE_THREAD_COUNT, \n-                YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_THREAD_COUNT));\n+            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n+                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n     server.start();\n     // start remaining services\n     super.serviceStart();\n-    LOG.info(\"NMAggregatorService started at \" + aggregatorServerAddress);\n+    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // TODO Security settings.\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    server.start();\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/aggregatormanager/NMAggregatorService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
            "oldMethodName": "serviceStart",
            "newMethodName": "serviceStart"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n-    \n-    InetSocketAddress aggregatorServerAddress \u003d conf.getSocketAddr(\n+\n+    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n-        YarnConfiguration.NM_AGGREGATOR_SERVICE_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_PORT);\n+        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     // TODO Security settings.\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n \n     server \u003d\n-        rpc.getServer(AggregatorNodemanagerProtocol.class, this, \n-            aggregatorServerAddress, serverConf,\n+        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n+            collectorServerAddress, serverConf,\n             this.context.getNMTokenSecretManager(),\n-            conf.getInt(YarnConfiguration.NM_AGGREGATOR_SERVICE_THREAD_COUNT, \n-                YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_THREAD_COUNT));\n+            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n+                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n \n     server.start();\n     // start remaining services\n     super.serviceStart();\n-    LOG.info(\"NMAggregatorService started at \" + aggregatorServerAddress);\n+    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n\n    InetSocketAddress collectorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // TODO Security settings.\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(CollectorNodemanagerProtocol.class, this,\n            collectorServerAddress, serverConf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_COLLECTOR_SERVICE_THREAD_COUNT,\n                YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT));\n\n    server.start();\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMCollectorService started at \" + collectorServerAddress);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,26 @@\n+  protected void serviceStart() throws Exception {\n+    Configuration conf \u003d getConfig();\n+    \n+    InetSocketAddress aggregatorServerAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_BIND_HOST,\n+        YarnConfiguration.NM_AGGREGATOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_PORT);\n+\n+    Configuration serverConf \u003d new Configuration(conf);\n+\n+    // TODO Security settings.\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+\n+    server \u003d\n+        rpc.getServer(AggregatorNodemanagerProtocol.class, this, \n+            aggregatorServerAddress, serverConf,\n+            this.context.getNMTokenSecretManager(),\n+            conf.getInt(YarnConfiguration.NM_AGGREGATOR_SERVICE_THREAD_COUNT, \n+                YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_THREAD_COUNT));\n+\n+    server.start();\n+    // start remaining services\n+    super.serviceStart();\n+    LOG.info(\"NMAggregatorService started at \" + aggregatorServerAddress);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    \n    InetSocketAddress aggregatorServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_AGGREGATOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_PORT);\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    // TODO Security settings.\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n\n    server \u003d\n        rpc.getServer(AggregatorNodemanagerProtocol.class, this, \n            aggregatorServerAddress, serverConf,\n            this.context.getNMTokenSecretManager(),\n            conf.getInt(YarnConfiguration.NM_AGGREGATOR_SERVICE_THREAD_COUNT, \n                YarnConfiguration.DEFAULT_NM_AGGREGATOR_SERVICE_THREAD_COUNT));\n\n    server.start();\n    // start remaining services\n    super.serviceStart();\n    LOG.info(\"NMAggregatorService started at \" + aggregatorServerAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/aggregatormanager/NMAggregatorService.java"
    }
  }
}