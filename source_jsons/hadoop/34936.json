{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "signalContainer",
  "functionId": "signalContainer___ctx-ContainerSignalContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 733,
  "functionEndLine": 767,
  "numCommitsSeen": 117,
  "timeTaken": 9007,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ymultichange(Yparameterchange,Ybodychange)",
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": "Ybodychange",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public boolean signalContainer(ContainerSignalContext ctx)\n       throws IOException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     String pid \u003d ctx.getPid();\n     Signal signal \u003d ctx.getSignal();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n         .Builder(container)\n         .setExecutionAttribute(RUN_AS_USER, runAsUser)\n         .setExecutionAttribute(USER, user)\n         .setExecutionAttribute(PID, pid)\n         .setExecutionAttribute(SIGNAL, signal)\n         .build();\n \n     try {\n       linuxContainerRuntime.signalContainer(runtimeContext);\n     } catch (ContainerExecutionException e) {\n       int retCode \u003d e.getExitCode();\n       if (retCode \u003d\u003d PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID\n           .getValue()) {\n         return false;\n       }\n-      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n-          + \"; exit \u003d \" + retCode, e);\n+      LOG.warn(\"Error in signalling container {} with {}; exit \u003d {}\",\n+          pid, signal, retCode, e);\n       logOutput(e.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \"\n           + signal + \"; output: \" + e.getOutput() + \" and exitCode: \"\n           + retCode, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(ContainerSignalContext ctx)\n      throws IOException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    String pid \u003d ctx.getPid();\n    Signal signal \u003d ctx.getSignal();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n        .Builder(container)\n        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n        .setExecutionAttribute(USER, user)\n        .setExecutionAttribute(PID, pid)\n        .setExecutionAttribute(SIGNAL, signal)\n        .build();\n\n    try {\n      linuxContainerRuntime.signalContainer(runtimeContext);\n    } catch (ContainerExecutionException e) {\n      int retCode \u003d e.getExitCode();\n      if (retCode \u003d\u003d PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID\n          .getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container {} with {}; exit \u003d {}\",\n          pid, signal, retCode, e);\n      logOutput(e.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + e.getOutput() + \" and exitCode: \"\n          + retCode, e);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n   public boolean signalContainer(ContainerSignalContext ctx)\n       throws IOException {\n+    Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     String pid \u003d ctx.getPid();\n     Signal signal \u003d ctx.getSignal();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n-    String[] command \u003d\n-        new String[] { containerExecutorExe,\n-                   runAsUser,\n-                   user,\n-                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n-                   pid,\n-                   Integer.toString(signal.getValue()) };\n-    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n-    }\n+    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n+        .Builder(container)\n+        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n+        .setExecutionAttribute(USER, user)\n+        .setExecutionAttribute(PID, pid)\n+        .setExecutionAttribute(SIGNAL, signal)\n+        .build();\n+\n     try {\n-      shExec.execute();\n-    } catch (ExitCodeException e) {\n-      int ret_code \u003d shExec.getExitCode();\n-      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n+      linuxContainerRuntime.signalContainer(runtimeContext);\n+    } catch (ContainerExecutionException e) {\n+      int retCode \u003d e.getExitCode();\n+      if (retCode \u003d\u003d PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n       LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n-          + \"; exit \u003d \" + ret_code, e);\n-      logOutput(shExec.getOutput());\n+          + \"; exit \u003d \" + retCode, e);\n+      logOutput(e.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \"\n-          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n-          + ret_code, e);\n+          + signal + \"; output: \" + e.getOutput() + \" and exitCode: \"\n+          + retCode, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(ContainerSignalContext ctx)\n      throws IOException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    String pid \u003d ctx.getPid();\n    Signal signal \u003d ctx.getSignal();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n        .Builder(container)\n        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n        .setExecutionAttribute(USER, user)\n        .setExecutionAttribute(PID, pid)\n        .setExecutionAttribute(SIGNAL, signal)\n        .build();\n\n    try {\n      linuxContainerRuntime.signalContainer(runtimeContext);\n    } catch (ContainerExecutionException e) {\n      int retCode \u003d e.getExitCode();\n      if (retCode \u003d\u003d PrivilegedOperation.ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n          + \"; exit \u003d \" + retCode, e);\n      logOutput(e.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + e.getOutput() + \" and exitCode: \"\n          + retCode, e);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  public boolean signalContainer(String user, String pid, Signal signal)\n+  public boolean signalContainer(ContainerSignalContext ctx)\n       throws IOException {\n+    String user \u003d ctx.getUser();\n+    String pid \u003d ctx.getPid();\n+    Signal signal \u003d ctx.getSignal();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     String[] command \u003d\n         new String[] { containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                    pid,\n                    Integer.toString(signal.getValue()) };\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int ret_code \u003d shExec.getExitCode();\n       if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n       LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n           + \"; exit \u003d \" + ret_code, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \"\n           + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n           + ret_code, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean signalContainer(ContainerSignalContext ctx)\n      throws IOException {\n    String user \u003d ctx.getUser();\n    String pid \u003d ctx.getPid();\n    Signal signal \u003d ctx.getSignal();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   runAsUser,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n          + \"; exit \u003d \" + ret_code, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n          + ret_code, e);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[user-String, pid-String, signal-Signal]",
            "newValue": "[ctx-ContainerSignalContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/05/15 8:01 PM",
          "commitNameOld": "6471d18bc72bc6c83ce31a03b5c5f5737847bb6d",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 12.83,
          "commitsBetweenForRepo": 119,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  public boolean signalContainer(String user, String pid, Signal signal)\n+  public boolean signalContainer(ContainerSignalContext ctx)\n       throws IOException {\n+    String user \u003d ctx.getUser();\n+    String pid \u003d ctx.getPid();\n+    Signal signal \u003d ctx.getSignal();\n \n     verifyUsernamePattern(user);\n     String runAsUser \u003d getRunAsUser(user);\n \n     String[] command \u003d\n         new String[] { containerExecutorExe,\n                    runAsUser,\n                    user,\n                    Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                    pid,\n                    Integer.toString(signal.getValue()) };\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int ret_code \u003d shExec.getExitCode();\n       if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n       LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n           + \"; exit \u003d \" + ret_code, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \"\n           + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n           + ret_code, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean signalContainer(ContainerSignalContext ctx)\n      throws IOException {\n    String user \u003d ctx.getUser();\n    String pid \u003d ctx.getPid();\n    Signal signal \u003d ctx.getSignal();\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   runAsUser,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n          + \"; exit \u003d \" + ret_code, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n          + ret_code, e);\n    }\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1253. Changes to LinuxContainerExecutor to run containers as a single dedicated user in non-secure mode. (rvs via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529325 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 2:59 PM",
      "commitName": "80c5bffc4b6bd2aa54ed8d49a32fd2c2cb77bfcc",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/07/13 5:28 PM",
      "commitNameOld": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.9,
      "commitsBetweenForRepo": 467,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public boolean signalContainer(String user, String pid, Signal signal)\n       throws IOException {\n \n+    verifyUsernamePattern(user);\n+    String runAsUser \u003d getRunAsUser(user);\n+\n     String[] command \u003d\n         new String[] { containerExecutorExe,\n+                   runAsUser,\n                    user,\n                    Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                    pid,\n                    Integer.toString(signal.getValue()) };\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int ret_code \u003d shExec.getExitCode();\n       if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n       LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n           + \"; exit \u003d \" + ret_code, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \"\n           + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n           + ret_code, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    verifyUsernamePattern(user);\n    String runAsUser \u003d getRunAsUser(user);\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   runAsUser,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n          + \"; exit \u003d \" + ret_code, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n          + ret_code, e);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-814. Improving diagnostics when containers fail during launch due to various reasons like invalid env etc. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:28 PM",
      "commitName": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 48.84,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   public boolean signalContainer(String user, String pid, Signal signal)\n       throws IOException {\n \n     String[] command \u003d\n         new String[] { containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                    pid,\n                    Integer.toString(signal.getValue()) };\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int ret_code \u003d shExec.getExitCode();\n       if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n+      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n+          + \"; exit \u003d \" + ret_code, e);\n       logOutput(shExec.getOutput());\n-      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n-                            signal + \"; exit \u003d \" + ret_code);\n+      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n+          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n+          + ret_code, e);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      LOG.warn(\"Error in signalling container \" + pid + \" with \" + signal\n          + \"; exit \u003d \" + ret_code, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \"\n          + signal + \"; output: \" + shExec.getOutput() + \" and exitCode: \"\n          + ret_code, e);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n                            signal + \"; exit \u003d \" + ret_code);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2747. Cleaned up LinuxContainerExecutor binary sources and changed the configuration to use yarn names. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188236 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 10:09 AM",
      "commitName": "7ce1c4ab352bca4b59ecbafdf237e5817cf833e5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/10/11 2:18 AM",
      "commitNameOld": "a8190ce5c520fcb69399485231ef7c0b7fdc3df7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.33,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public boolean signalContainer(String user, String pid, Signal signal)\n       throws IOException {\n \n     String[] command \u003d\n         new String[] { containerExecutorExe,\n                    user,\n                    Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                    pid,\n                    Integer.toString(signal.getValue()) };\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int ret_code \u003d shExec.getExitCode();\n-      if (ret_code \u003d\u003d ResultCode.INVALID_TASK_PID.getValue()) {\n+      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n         return false;\n       }\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n                             signal + \"; exit \u003d \" + ret_code);\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_CONTAINER_PID.getValue()) {\n        return false;\n      }\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n                            signal + \"; exit \u003d \" + ret_code);\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_TASK_PID.getValue()) {\n        return false;\n      }\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n                            signal + \"; exit \u003d \" + ret_code);\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,26 @@\n+  public boolean signalContainer(String user, String pid, Signal signal)\n+      throws IOException {\n+\n+    String[] command \u003d\n+        new String[] { containerExecutorExe,\n+                   user,\n+                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n+                   pid,\n+                   Integer.toString(signal.getValue()) };\n+    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n+    }\n+    try {\n+      shExec.execute();\n+    } catch (ExitCodeException e) {\n+      int ret_code \u003d shExec.getExitCode();\n+      if (ret_code \u003d\u003d ResultCode.INVALID_TASK_PID.getValue()) {\n+        return false;\n+      }\n+      logOutput(shExec.getOutput());\n+      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n+                            signal + \"; exit \u003d \" + ret_code);\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean signalContainer(String user, String pid, Signal signal)\n      throws IOException {\n\n    String[] command \u003d\n        new String[] { containerExecutorExe,\n                   user,\n                   Integer.toString(Commands.SIGNAL_CONTAINER.getValue()),\n                   pid,\n                   Integer.toString(signal.getValue()) };\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(command);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"signalContainer: \" + Arrays.toString(command));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int ret_code \u003d shExec.getExitCode();\n      if (ret_code \u003d\u003d ResultCode.INVALID_TASK_PID.getValue()) {\n        return false;\n      }\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Problem signalling container \" + pid + \" with \" +\n                            signal + \"; exit \u003d \" + ret_code);\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}