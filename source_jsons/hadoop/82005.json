{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericOptionsParser.java",
  "functionName": "processGeneralOptions",
  "functionId": "processGeneralOptions___line-CommandLine",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
  "functionStartLine": 285,
  "functionEndLine": 358,
  "numCommitsSeen": 51,
  "timeTaken": 2890,
  "changeHistory": [
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "0ad48aa2c8f41196743305c711ea19cc48f186da",
    "0bf333911c950f22ec0f784bf465306e20b0d507",
    "b100949404843ed245ef4e118291f55b3fdc81b8",
    "6d4ab86412dbe763e53368e267bc068e6cde075b",
    "7e615c7f7519de412588734aacde2d5445bb8135",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
    "978e2d662a33b8f43ad4d55f6fceaf7e96afdfeb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
    "3cb2e3112b3c21b1a87c38dbefca8ac859170c5a",
    "a5427fc7eb4155437261cbcf55144f6f82675809",
    "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c",
    "ac670cc47f06b0eb880dcb5522a5aba187b5c67d",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "0ad48aa2c8f41196743305c711ea19cc48f186da": "Ymultichange(Yparameterchange,Ybodychange)",
    "0bf333911c950f22ec0f784bf465306e20b0d507": "Ybodychange",
    "b100949404843ed245ef4e118291f55b3fdc81b8": "Ybodychange",
    "6d4ab86412dbe763e53368e267bc068e6cde075b": "Ybodychange",
    "7e615c7f7519de412588734aacde2d5445bb8135": "Ybodychange",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": "Ybodychange",
    "978e2d662a33b8f43ad4d55f6fceaf7e96afdfeb": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": "Ybodychange",
    "3cb2e3112b3c21b1a87c38dbefca8ac859170c5a": "Ybodychange",
    "a5427fc7eb4155437261cbcf55144f6f82675809": "Ymultichange(Yexceptionschange,Ybodychange)",
    "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c": "Ybodychange",
    "ac670cc47f06b0eb880dcb5522a5aba187b5c67d": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "08/11/16 3:40 PM",
      "commitNameOld": "2a65eb121e23243fcb642d28b3f74241536485d8",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,74 @@\n   private void processGeneralOptions(CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n \n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n \n     if (line.hasOption(\"libjars\")) {\n       // for libjars, we allow expansion of wildcards\n       conf.set(\"tmpjars\",\n                validateFiles(line.getOptionValue(\"libjars\"), true),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\")),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\")),\n                 \"from -archives command line option\");\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d localFs.makeQualified(new Path(fileName));\n-      if (!localFs.exists(p)) {\n-          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n-      }\n+      localFs.getFileStatus(p);\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       UserGroupInformation.getCurrentUser().addCredentials(\n           Credentials.readTokenStorageFile(p, conf));\n       conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n                \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n\n    if (line.hasOption(\"libjars\")) {\n      // for libjars, we allow expansion of wildcards\n      conf.set(\"tmpjars\",\n               validateFiles(line.getOptionValue(\"libjars\"), true),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\")),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\")),\n                \"from -archives command line option\");\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      localFs.getFileStatus(p);\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "0ad48aa2c8f41196743305c711ea19cc48f186da": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
      "commitDate": "08/08/16 5:34 PM",
      "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
          "commitDate": "08/08/16 5:34 PM",
          "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "14/06/16 3:31 AM",
          "commitNameOld": "8e8cb4c6ca7e803674b160946ac92274bac0f96d",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 55.59,
          "commitsBetweenForRepo": 500,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,76 @@\n-  private void processGeneralOptions(Configuration conf,\n-      CommandLine line) throws IOException {\n+  private void processGeneralOptions(CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n \n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n \n     if (line.hasOption(\"libjars\")) {\n-      conf.set(\"tmpjars\", \n-               validateFiles(line.getOptionValue(\"libjars\"), conf),\n+      // for libjars, we allow expansion of wildcards\n+      conf.set(\"tmpjars\",\n+               validateFiles(line.getOptionValue(\"libjars\"), true),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n-               validateFiles(line.getOptionValue(\"files\"), conf),\n+               validateFiles(line.getOptionValue(\"files\")),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n-                validateFiles(line.getOptionValue(\"archives\"), conf),\n+                validateFiles(line.getOptionValue(\"archives\")),\n                 \"from -archives command line option\");\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d localFs.makeQualified(new Path(fileName));\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       UserGroupInformation.getCurrentUser().addCredentials(\n           Credentials.readTokenStorageFile(p, conf));\n       conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n                \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processGeneralOptions(CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n\n    if (line.hasOption(\"libjars\")) {\n      // for libjars, we allow expansion of wildcards\n      conf.set(\"tmpjars\",\n               validateFiles(line.getOptionValue(\"libjars\"), true),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\")),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\")),\n                \"from -archives command line option\");\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, line-CommandLine]",
            "newValue": "[line-CommandLine]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
          "commitDate": "08/08/16 5:34 PM",
          "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "14/06/16 3:31 AM",
          "commitNameOld": "8e8cb4c6ca7e803674b160946ac92274bac0f96d",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 55.59,
          "commitsBetweenForRepo": 500,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,76 +1,76 @@\n-  private void processGeneralOptions(Configuration conf,\n-      CommandLine line) throws IOException {\n+  private void processGeneralOptions(CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n \n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n \n     if (line.hasOption(\"libjars\")) {\n-      conf.set(\"tmpjars\", \n-               validateFiles(line.getOptionValue(\"libjars\"), conf),\n+      // for libjars, we allow expansion of wildcards\n+      conf.set(\"tmpjars\",\n+               validateFiles(line.getOptionValue(\"libjars\"), true),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n-               validateFiles(line.getOptionValue(\"files\"), conf),\n+               validateFiles(line.getOptionValue(\"files\")),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n-                validateFiles(line.getOptionValue(\"archives\"), conf),\n+                validateFiles(line.getOptionValue(\"archives\")),\n                 \"from -archives command line option\");\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d localFs.makeQualified(new Path(fileName));\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       UserGroupInformation.getCurrentUser().addCredentials(\n           Credentials.readTokenStorageFile(p, conf));\n       conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n                \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processGeneralOptions(CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n\n    if (line.hasOption(\"libjars\")) {\n      // for libjars, we allow expansion of wildcards\n      conf.set(\"tmpjars\",\n               validateFiles(line.getOptionValue(\"libjars\"), true),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\")),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\")),\n                \"from -archives command line option\");\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "0bf333911c950f22ec0f784bf465306e20b0d507": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11509. Change parsing sequence in GenericOptionsParser to parse\n-D parameters before -files. Contributed by Xuan Gong\n",
      "commitDate": "26/01/15 3:35 PM",
      "commitName": "0bf333911c950f22ec0f784bf465306e20b0d507",
      "commitAuthor": "Xuan",
      "commitDateOld": "26/09/14 2:25 PM",
      "commitNameOld": "c7c8e388a953b904b24d3343e5b069b0984244e0",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 122.09,
      "commitsBetweenForRepo": 907,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,76 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n+\n+    if (line.hasOption(\u0027D\u0027)) {\n+      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n+      for(String prop : property) {\n+        String[] keyval \u003d prop.split(\"\u003d\", 2);\n+        if (keyval.length \u003d\u003d 2) {\n+          conf.set(keyval[0], keyval[1], \"from command line\");\n+        }\n+      }\n+    }\n+\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf),\n                 \"from -archives command line option\");\n     }\n-    if (line.hasOption(\u0027D\u0027)) {\n-      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n-      for(String prop : property) {\n-        String[] keyval \u003d prop.split(\"\u003d\", 2);\n-        if (keyval.length \u003d\u003d 2) {\n-          conf.set(keyval[0], keyval[1], \"from command line\");\n-        }\n-      }\n-    }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d localFs.makeQualified(new Path(fileName));\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       UserGroupInformation.getCurrentUser().addCredentials(\n           Credentials.readTokenStorageFile(p, conf));\n       conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n                \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf),\n                \"from -archives command line option\");\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "b100949404843ed245ef4e118291f55b3fdc81b8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9989. Bug introduced in HADOOP-9374, which parses the -tokenCacheFile as binary file but set it to the configuration as JSON file. (zxu via tucu)\n",
      "commitDate": "09/09/14 10:19 PM",
      "commitName": "b100949404843ed245ef4e118291f55b3fdc81b8",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "12/08/14 10:46 AM",
      "commitNameOld": "0a2ee2fd53b4759e9041af8620717127a7e81fc3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 28.48,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf),\n                 \"from -archives command line option\");\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d localFs.makeQualified(new Path(fileName));\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       UserGroupInformation.getCurrentUser().addCredentials(\n           Credentials.readTokenStorageFile(p, conf));\n-      conf.set(\"mapreduce.job.credentials.json\", p.toString(),\n+      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n                \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf),\n                \"from -archives command line option\");\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.binary\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "6d4ab86412dbe763e53368e267bc068e6cde075b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9374. Add tokens from -tokenCacheFile into UGI (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454019 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/13 11:22 AM",
      "commitName": "6d4ab86412dbe763e53368e267bc068e6cde075b",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "12/02/13 12:16 PM",
      "commitNameOld": "7e615c7f7519de412588734aacde2d5445bb8135",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 22.96,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       String optionValue \u003d line.getOptionValue(\"jt\");\n       if (optionValue.equalsIgnoreCase(\"local\")) {\n         conf.set(\"mapreduce.framework.name\", optionValue);\n       }\n \n       conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf),\n                 \"from -archives command line option\");\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n-      Path p \u003d new Path(fileName);\n+      Path p \u003d localFs.makeQualified(new Path(fileName));\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n-      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n-          .toString(), \"from -tokenCacheFile command line option\");\n+      UserGroupInformation.getCurrentUser().addCredentials(\n+          Credentials.readTokenStorageFile(p, conf));\n+      conf.set(\"mapreduce.job.credentials.json\", p.toString(),\n+               \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf),\n                \"from -archives command line option\");\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d localFs.makeQualified(new Path(fileName));\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      UserGroupInformation.getCurrentUser().addCredentials(\n          Credentials.readTokenStorageFile(p, conf));\n      conf.set(\"mapreduce.job.credentials.json\", p.toString(),\n               \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "7e615c7f7519de412588734aacde2d5445bb8135": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4994. -jt generic command line option does not work. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1445330 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/13 12:16 PM",
      "commitName": "7e615c7f7519de412588734aacde2d5445bb8135",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "10/07/12 9:49 AM",
      "commitNameOld": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 217.14,
      "commitsBetweenForRepo": 1153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,72 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n-      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"), \n+      String optionValue \u003d line.getOptionValue(\"jt\");\n+      if (optionValue.equalsIgnoreCase(\"local\")) {\n+        conf.set(\"mapreduce.framework.name\", optionValue);\n+      }\n+\n+      conf.set(\"yarn.resourcemanager.address\", optionValue, \n           \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf),\n                \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf),\n                \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf),\n                 \"from -archives command line option\");\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d new Path(fileName);\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n           .toString(), \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      String optionValue \u003d line.getOptionValue(\"jt\");\n      if (optionValue.equalsIgnoreCase(\"local\")) {\n        conf.set(\"mapreduce.framework.name\", optionValue);\n      }\n\n      conf.set(\"yarn.resourcemanager.address\", optionValue, \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf),\n                \"from -archives command line option\");\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString(), \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8525. Provide Improved Traceability for Configuration (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 9:49 AM",
      "commitName": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "19/03/12 12:06 PM",
      "commitNameOld": "978e2d662a33b8f43ad4d55f6fceaf7e96afdfeb",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 112.9,
      "commitsBetweenForRepo": 696,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,67 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n-      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n+      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"), \n+          \"from -jt command line option\");\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n-               validateFiles(line.getOptionValue(\"libjars\"), conf));\n+               validateFiles(line.getOptionValue(\"libjars\"), conf),\n+               \"from -libjars command line option\");\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n-               validateFiles(line.getOptionValue(\"files\"), conf));\n+               validateFiles(line.getOptionValue(\"files\"), conf),\n+               \"from -files command line option\");\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n-                validateFiles(line.getOptionValue(\"archives\"), conf));\n+                validateFiles(line.getOptionValue(\"archives\"), conf),\n+                \"from -archives command line option\");\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n-          conf.set(keyval[0], keyval[1]);\n+          conf.set(keyval[0], keyval[1], \"from command line\");\n         }\n       }\n     }\n     conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d new Path(fileName);\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n-          .toString());\n+          .toString(), \"from -tokenCacheFile command line option\");\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"), \n          \"from -jt command line option\");\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf),\n               \"from -libjars command line option\");\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf),\n               \"from -files command line option\");\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf),\n                \"from -archives command line option\");\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1], \"from command line\");\n        }\n      }\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString(), \"from -tokenCacheFile command line option\");\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "978e2d662a33b8f43ad4d55f6fceaf7e96afdfeb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8183. Stop using mapred.used.genericoptions.parser (harsh)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/12 12:06 PM",
      "commitName": "978e2d662a33b8f43ad4d55f6fceaf7e96afdfeb",
      "commitAuthor": "Harsh J",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 207.79,
      "commitsBetweenForRepo": 1468,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf));\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf));\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n-    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n+    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d new Path(fileName);\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"setting conf tokensFile: \" + fileName);\n       }\n       conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n           .toString());\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapreduce.client.genericoptionsparser.used\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/08/10 3:50 PM",
      "commitNameOld": "0acb205a4bc111bc008a04c1403730a596029c44",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 10.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,63 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf));\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf));\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d new Path(fileName);\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n-      LOG.debug(\"setting conf tokensFile: \" + fileName);\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"setting conf tokensFile: \" + fileName);\n+      }\n       conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n           .toString());\n \n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"setting conf tokensFile: \" + fileName);\n      }\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "eb10b152fe69fb0c769e6dbbd08f435033c19c7a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6861. Adds new non-static methods in Credentials to read and write token storage file. Contributed by Jitendra Pandey \u0026 Owen O\u0027Malley.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@966911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/10 5:05 PM",
      "commitName": "eb10b152fe69fb0c769e6dbbd08f435033c19c7a",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 41.1,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,61 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf));\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf));\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n     \n     // tokensFile\n     if(line.hasOption(\"tokenCacheFile\")) {\n       String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n       // check if the local file exists\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       Path p \u003d new Path(fileName);\n       if (!localFs.exists(p)) {\n           throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n       }\n       LOG.debug(\"setting conf tokensFile: \" + fileName);\n-      conf.set(\"tokenCacheFile\", localFs.makeQualified(p).toString());\n+      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n+          .toString());\n+\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      LOG.debug(\"setting conf tokensFile: \" + fileName);\n      conf.set(\"mapreduce.job.credentials.json\", localFs.makeQualified(p)\n          .toString());\n\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "3cb2e3112b3c21b1a87c38dbefca8ac859170c5a": {
      "type": "Ybodychange",
      "commitMessage": "   HADOOP-6472. add tokenCache option to GenericOptionsParser for passing\n    file with secret keys to a map reduce job. (boryas)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@895801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/10 2:14 PM",
      "commitName": "3cb2e3112b3c21b1a87c38dbefca8ac859170c5a",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "30/10/09 11:21 AM",
      "commitNameOld": "a5427fc7eb4155437261cbcf55144f6f82675809",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 66.16,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,59 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     if (line.hasOption(\"libjars\")) {\n       conf.set(\"tmpjars\", \n                validateFiles(line.getOptionValue(\"libjars\"), conf));\n       //setting libjars in client classpath\n       URL[] libjars \u003d getLibJars(conf);\n       if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n         conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n         Thread.currentThread().setContextClassLoader(\n             new URLClassLoader(libjars, \n                 Thread.currentThread().getContextClassLoader()));\n       }\n     }\n     if (line.hasOption(\"files\")) {\n       conf.set(\"tmpfiles\", \n                validateFiles(line.getOptionValue(\"files\"), conf));\n     }\n     if (line.hasOption(\"archives\")) {\n       conf.set(\"tmparchives\", \n                 validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n+    \n+    // tokensFile\n+    if(line.hasOption(\"tokenCacheFile\")) {\n+      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n+      // check if the local file exists\n+      FileSystem localFs \u003d FileSystem.getLocal(conf);\n+      Path p \u003d new Path(fileName);\n+      if (!localFs.exists(p)) {\n+          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n+      }\n+      LOG.debug(\"setting conf tokensFile: \" + fileName);\n+      conf.set(\"tokenCacheFile\", localFs.makeQualified(p).toString());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n    \n    // tokensFile\n    if(line.hasOption(\"tokenCacheFile\")) {\n      String fileName \u003d line.getOptionValue(\"tokenCacheFile\");\n      // check if the local file exists\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      Path p \u003d new Path(fileName);\n      if (!localFs.exists(p)) {\n          throw new FileNotFoundException(\"File \"+fileName+\" does not exist.\");\n      }\n      LOG.debug(\"setting conf tokensFile: \" + fileName);\n      conf.set(\"tokenCacheFile\", localFs.makeQualified(p).toString());\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "a5427fc7eb4155437261cbcf55144f6f82675809": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 11:21 AM",
      "commitName": "a5427fc7eb4155437261cbcf55144f6f82675809",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 11:21 AM",
          "commitName": "a5427fc7eb4155437261cbcf55144f6f82675809",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "27/08/09 6:55 AM",
          "commitNameOld": "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c",
          "commitAuthorOld": "Sharad Agarwal",
          "daysBetweenCommits": 64.18,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,46 @@\n   private void processGeneralOptions(Configuration conf,\n-      CommandLine line) {\n+      CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n-    try {\n-      if (line.hasOption(\"libjars\")) {\n-        conf.set(\"tmpjars\", \n-                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n-        //setting libjars in client classpath\n-        URL[] libjars \u003d getLibJars(conf);\n-        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n-          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n-          Thread.currentThread().setContextClassLoader(\n-              new URLClassLoader(libjars, \n-                  Thread.currentThread().getContextClassLoader()));\n-        }\n+    if (line.hasOption(\"libjars\")) {\n+      conf.set(\"tmpjars\", \n+               validateFiles(line.getOptionValue(\"libjars\"), conf));\n+      //setting libjars in client classpath\n+      URL[] libjars \u003d getLibJars(conf);\n+      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n+        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n+        Thread.currentThread().setContextClassLoader(\n+            new URLClassLoader(libjars, \n+                Thread.currentThread().getContextClassLoader()));\n       }\n-      if (line.hasOption(\"files\")) {\n-        conf.set(\"tmpfiles\", \n-                 validateFiles(line.getOptionValue(\"files\"), conf));\n-      }\n-      if (line.hasOption(\"archives\")) {\n-        conf.set(\"tmparchives\", \n-                  validateFiles(line.getOptionValue(\"archives\"), conf));\n-      }\n-    } catch (IOException ioe) {\n-      System.err.println(StringUtils.stringifyException(ioe));\n+    }\n+    if (line.hasOption(\"files\")) {\n+      conf.set(\"tmpfiles\", \n+               validateFiles(line.getOptionValue(\"files\"), conf));\n+    }\n+    if (line.hasOption(\"archives\")) {\n+      conf.set(\"tmparchives\", \n+                validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n  }",
          "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/10/09 11:21 AM",
          "commitName": "a5427fc7eb4155437261cbcf55144f6f82675809",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "27/08/09 6:55 AM",
          "commitNameOld": "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c",
          "commitAuthorOld": "Sharad Agarwal",
          "daysBetweenCommits": 64.18,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,46 @@\n   private void processGeneralOptions(Configuration conf,\n-      CommandLine line) {\n+      CommandLine line) throws IOException {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n-    try {\n-      if (line.hasOption(\"libjars\")) {\n-        conf.set(\"tmpjars\", \n-                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n-        //setting libjars in client classpath\n-        URL[] libjars \u003d getLibJars(conf);\n-        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n-          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n-          Thread.currentThread().setContextClassLoader(\n-              new URLClassLoader(libjars, \n-                  Thread.currentThread().getContextClassLoader()));\n-        }\n+    if (line.hasOption(\"libjars\")) {\n+      conf.set(\"tmpjars\", \n+               validateFiles(line.getOptionValue(\"libjars\"), conf));\n+      //setting libjars in client classpath\n+      URL[] libjars \u003d getLibJars(conf);\n+      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n+        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n+        Thread.currentThread().setContextClassLoader(\n+            new URLClassLoader(libjars, \n+                Thread.currentThread().getContextClassLoader()));\n       }\n-      if (line.hasOption(\"files\")) {\n-        conf.set(\"tmpfiles\", \n-                 validateFiles(line.getOptionValue(\"files\"), conf));\n-      }\n-      if (line.hasOption(\"archives\")) {\n-        conf.set(\"tmparchives\", \n-                  validateFiles(line.getOptionValue(\"archives\"), conf));\n-      }\n-    } catch (IOException ioe) {\n-      System.err.println(StringUtils.stringifyException(ioe));\n+    }\n+    if (line.hasOption(\"files\")) {\n+      conf.set(\"tmpfiles\", \n+               validateFiles(line.getOptionValue(\"files\"), conf));\n+    }\n+    if (line.hasOption(\"archives\")) {\n+      conf.set(\"tmparchives\", \n+                validateFiles(line.getOptionValue(\"archives\"), conf));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n         String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) throws IOException {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    if (line.hasOption(\"libjars\")) {\n      conf.set(\"tmpjars\", \n               validateFiles(line.getOptionValue(\"libjars\"), conf));\n      //setting libjars in client classpath\n      URL[] libjars \u003d getLibJars(conf);\n      if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n        conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n        Thread.currentThread().setContextClassLoader(\n            new URLClassLoader(libjars, \n                Thread.currentThread().getContextClassLoader()));\n      }\n    }\n    if (line.hasOption(\"files\")) {\n      conf.set(\"tmpfiles\", \n               validateFiles(line.getOptionValue(\"files\"), conf));\n    }\n    if (line.hasOption(\"archives\")) {\n      conf.set(\"tmparchives\", \n                validateFiles(line.getOptionValue(\"archives\"), conf));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n  }",
          "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6215. fix GenericOptionParser to deal with -D with \u0027\u003d\u0027 in the value. Contributed by Amar Kamat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@808415 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/08/09 6:55 AM",
      "commitName": "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c",
      "commitAuthor": "Sharad Agarwal",
      "commitDateOld": "26/05/09 11:27 AM",
      "commitNameOld": "ac670cc47f06b0eb880dcb5522a5aba187b5c67d",
      "commitAuthorOld": "Giridharan Kesavan",
      "daysBetweenCommits": 92.81,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     try {\n       if (line.hasOption(\"libjars\")) {\n         conf.set(\"tmpjars\", \n                  validateFiles(line.getOptionValue(\"libjars\"), conf));\n         //setting libjars in client classpath\n         URL[] libjars \u003d getLibJars(conf);\n         if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n           conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n           Thread.currentThread().setContextClassLoader(\n               new URLClassLoader(libjars, \n                   Thread.currentThread().getContextClassLoader()));\n         }\n       }\n       if (line.hasOption(\"files\")) {\n         conf.set(\"tmpfiles\", \n                  validateFiles(line.getOptionValue(\"files\"), conf));\n       }\n       if (line.hasOption(\"archives\")) {\n         conf.set(\"tmparchives\", \n                   validateFiles(line.getOptionValue(\"archives\"), conf));\n       }\n     } catch (IOException ioe) {\n       System.err.println(StringUtils.stringifyException(ioe));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n       for(String prop : property) {\n-        String[] keyval \u003d prop.split(\"\u003d\");\n+        String[] keyval \u003d prop.split(\"\u003d\", 2);\n         if (keyval.length \u003d\u003d 2) {\n           conf.set(keyval[0], keyval[1]);\n         }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    try {\n      if (line.hasOption(\"libjars\")) {\n        conf.set(\"tmpjars\", \n                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n        //setting libjars in client classpath\n        URL[] libjars \u003d getLibJars(conf);\n        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n          Thread.currentThread().setContextClassLoader(\n              new URLClassLoader(libjars, \n                  Thread.currentThread().getContextClassLoader()));\n        }\n      }\n      if (line.hasOption(\"files\")) {\n        conf.set(\"tmpfiles\", \n                 validateFiles(line.getOptionValue(\"files\"), conf));\n      }\n      if (line.hasOption(\"archives\")) {\n        conf.set(\"tmparchives\", \n                  validateFiles(line.getOptionValue(\"archives\"), conf));\n      }\n    } catch (IOException ioe) {\n      System.err.println(StringUtils.stringifyException(ioe));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\", 2);\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "ac670cc47f06b0eb880dcb5522a5aba187b5c67d": {
      "type": "Ybodychange",
      "commitMessage": "Fixed basic hadoop core targets\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@778829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/05/09 11:27 AM",
      "commitName": "ac670cc47f06b0eb880dcb5522a5aba187b5c67d",
      "commitAuthor": "Giridharan Kesavan",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 7.59,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   private void processGeneralOptions(Configuration conf,\n       CommandLine line) {\n     if (line.hasOption(\"fs\")) {\n       FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n     }\n \n     if (line.hasOption(\"jt\")) {\n       conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n     }\n     if (line.hasOption(\"conf\")) {\n       String[] values \u003d line.getOptionValues(\"conf\");\n       for(String value : values) {\n         conf.addResource(new Path(value));\n       }\n     }\n     try {\n       if (line.hasOption(\"libjars\")) {\n         conf.set(\"tmpjars\", \n                  validateFiles(line.getOptionValue(\"libjars\"), conf));\n         //setting libjars in client classpath\n         URL[] libjars \u003d getLibJars(conf);\n         if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n           conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n           Thread.currentThread().setContextClassLoader(\n               new URLClassLoader(libjars, \n                   Thread.currentThread().getContextClassLoader()));\n         }\n       }\n       if (line.hasOption(\"files\")) {\n         conf.set(\"tmpfiles\", \n                  validateFiles(line.getOptionValue(\"files\"), conf));\n       }\n       if (line.hasOption(\"archives\")) {\n         conf.set(\"tmparchives\", \n                   validateFiles(line.getOptionValue(\"archives\"), conf));\n       }\n     } catch (IOException ioe) {\n       System.err.println(StringUtils.stringifyException(ioe));\n     }\n     if (line.hasOption(\u0027D\u0027)) {\n       String[] property \u003d line.getOptionValues(\u0027D\u0027);\n-      for(int i\u003d0; i\u003cproperty.length-1; i\u003di+2) {\n-        if (property[i]!\u003dnull)\n-          conf.set(property[i], property[i+1]);\n+      for(String prop : property) {\n+        String[] keyval \u003d prop.split(\"\u003d\");\n+        if (keyval.length \u003d\u003d 2) {\n+          conf.set(keyval[0], keyval[1]);\n+        }\n       }\n     }\n     conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    try {\n      if (line.hasOption(\"libjars\")) {\n        conf.set(\"tmpjars\", \n                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n        //setting libjars in client classpath\n        URL[] libjars \u003d getLibJars(conf);\n        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n          Thread.currentThread().setContextClassLoader(\n              new URLClassLoader(libjars, \n                  Thread.currentThread().getContextClassLoader()));\n        }\n      }\n      if (line.hasOption(\"files\")) {\n        conf.set(\"tmpfiles\", \n                 validateFiles(line.getOptionValue(\"files\"), conf));\n      }\n      if (line.hasOption(\"archives\")) {\n        conf.set(\"tmparchives\", \n                  validateFiles(line.getOptionValue(\"archives\"), conf));\n      }\n    } catch (IOException ioe) {\n      System.err.println(StringUtils.stringifyException(ioe));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(String prop : property) {\n        String[] keyval \u003d prop.split(\"\u003d\");\n        if (keyval.length \u003d\u003d 2) {\n          conf.set(keyval[0], keyval[1]);\n        }\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,48 @@\n+  private void processGeneralOptions(Configuration conf,\n+      CommandLine line) {\n+    if (line.hasOption(\"fs\")) {\n+      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n+    }\n+\n+    if (line.hasOption(\"jt\")) {\n+      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n+    }\n+    if (line.hasOption(\"conf\")) {\n+      String[] values \u003d line.getOptionValues(\"conf\");\n+      for(String value : values) {\n+        conf.addResource(new Path(value));\n+      }\n+    }\n+    try {\n+      if (line.hasOption(\"libjars\")) {\n+        conf.set(\"tmpjars\", \n+                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n+        //setting libjars in client classpath\n+        URL[] libjars \u003d getLibJars(conf);\n+        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n+          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n+          Thread.currentThread().setContextClassLoader(\n+              new URLClassLoader(libjars, \n+                  Thread.currentThread().getContextClassLoader()));\n+        }\n+      }\n+      if (line.hasOption(\"files\")) {\n+        conf.set(\"tmpfiles\", \n+                 validateFiles(line.getOptionValue(\"files\"), conf));\n+      }\n+      if (line.hasOption(\"archives\")) {\n+        conf.set(\"tmparchives\", \n+                  validateFiles(line.getOptionValue(\"archives\"), conf));\n+      }\n+    } catch (IOException ioe) {\n+      System.err.println(StringUtils.stringifyException(ioe));\n+    }\n+    if (line.hasOption(\u0027D\u0027)) {\n+      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n+      for(int i\u003d0; i\u003cproperty.length-1; i\u003di+2) {\n+        if (property[i]!\u003dnull)\n+          conf.set(property[i], property[i+1]);\n+      }\n+    }\n+    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processGeneralOptions(Configuration conf,\n      CommandLine line) {\n    if (line.hasOption(\"fs\")) {\n      FileSystem.setDefaultUri(conf, line.getOptionValue(\"fs\"));\n    }\n\n    if (line.hasOption(\"jt\")) {\n      conf.set(\"mapred.job.tracker\", line.getOptionValue(\"jt\"));\n    }\n    if (line.hasOption(\"conf\")) {\n      String[] values \u003d line.getOptionValues(\"conf\");\n      for(String value : values) {\n        conf.addResource(new Path(value));\n      }\n    }\n    try {\n      if (line.hasOption(\"libjars\")) {\n        conf.set(\"tmpjars\", \n                 validateFiles(line.getOptionValue(\"libjars\"), conf));\n        //setting libjars in client classpath\n        URL[] libjars \u003d getLibJars(conf);\n        if(libjars!\u003dnull \u0026\u0026 libjars.length\u003e0) {\n          conf.setClassLoader(new URLClassLoader(libjars, conf.getClassLoader()));\n          Thread.currentThread().setContextClassLoader(\n              new URLClassLoader(libjars, \n                  Thread.currentThread().getContextClassLoader()));\n        }\n      }\n      if (line.hasOption(\"files\")) {\n        conf.set(\"tmpfiles\", \n                 validateFiles(line.getOptionValue(\"files\"), conf));\n      }\n      if (line.hasOption(\"archives\")) {\n        conf.set(\"tmparchives\", \n                  validateFiles(line.getOptionValue(\"archives\"), conf));\n      }\n    } catch (IOException ioe) {\n      System.err.println(StringUtils.stringifyException(ioe));\n    }\n    if (line.hasOption(\u0027D\u0027)) {\n      String[] property \u003d line.getOptionValues(\u0027D\u0027);\n      for(int i\u003d0; i\u003cproperty.length-1; i\u003di+2) {\n        if (property[i]!\u003dnull)\n          conf.set(property[i], property[i+1]);\n      }\n    }\n    conf.setBoolean(\"mapred.used.genericoptionsparser\", true);\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java"
    }
  }
}