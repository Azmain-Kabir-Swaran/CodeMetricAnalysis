{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyAuthorizationKeyProvider.java",
  "functionName": "checkAccess",
  "functionId": "checkAccess___aclName-String__ugi-UserGroupInformation__opType-KeyOpType",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
  "functionStartLine": 139,
  "functionEndLine": 152,
  "numCommitsSeen": 10,
  "timeTaken": 896,
  "changeHistory": [
    "61a2510b55317867c8539a4df295f5afb85da5d4",
    "b02a4b40610e93eef6559db09a11d287e859446d"
  ],
  "changeHistoryShort": {
    "61a2510b55317867c8539a4df295f5afb85da5d4": "Ybodychange",
    "b02a4b40610e93eef6559db09a11d287e859446d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61a2510b55317867c8539a4df295f5afb85da5d4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11322. key based ACL check in KMS always check KeyOpType.MANAGEMENT even actual KeyOpType is not MANAGEMENT. (Dian Fu via yliu)\n",
      "commitDate": "24/11/14 9:08 AM",
      "commitName": "61a2510b55317867c8539a4df295f5afb85da5d4",
      "commitAuthor": "yliu",
      "commitDateOld": "16/09/14 11:20 PM",
      "commitNameOld": "e14e71d5feff961b681d828b00e6f12cb197ebf5",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 68.45,
      "commitsBetweenForRepo": 670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   private void checkAccess(String aclName, UserGroupInformation ugi,\n       KeyOpType opType) throws AuthorizationException {\n     Preconditions.checkNotNull(aclName, \"Key ACL name cannot be null\");\n     Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n-    if (acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) \u0026\u0026\n+    if (acls.isACLPresent(aclName, opType) \u0026\u0026\n         (acls.hasAccessToKey(aclName, ugi, opType)\n             || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL))) {\n       return;\n     } else {\n       throw new AuthorizationException(String.format(\"User [%s] is not\"\n           + \" authorized to perform [%s] on key with ACL name [%s]!!\",\n           ugi.getShortUserName(), opType, aclName));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkAccess(String aclName, UserGroupInformation ugi,\n      KeyOpType opType) throws AuthorizationException {\n    Preconditions.checkNotNull(aclName, \"Key ACL name cannot be null\");\n    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n    if (acls.isACLPresent(aclName, opType) \u0026\u0026\n        (acls.hasAccessToKey(aclName, ugi, opType)\n            || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL))) {\n      return;\n    } else {\n      throw new AuthorizationException(String.format(\"User [%s] is not\"\n          + \" authorized to perform [%s] on key with ACL name [%s]!!\",\n          ugi.getShortUserName(), opType, aclName));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
      "extendedDetails": {}
    },
    "b02a4b40610e93eef6559db09a11d287e859446d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10758. KMS: add ACLs on per key basis. (tucu)\n",
      "commitDate": "10/09/14 2:26 PM",
      "commitName": "b02a4b40610e93eef6559db09a11d287e859446d",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,14 @@\n+  private void checkAccess(String aclName, UserGroupInformation ugi,\n+      KeyOpType opType) throws AuthorizationException {\n+    Preconditions.checkNotNull(aclName, \"Key ACL name cannot be null\");\n+    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n+    if (acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) \u0026\u0026\n+        (acls.hasAccessToKey(aclName, ugi, opType)\n+            || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL))) {\n+      return;\n+    } else {\n+      throw new AuthorizationException(String.format(\"User [%s] is not\"\n+          + \" authorized to perform [%s] on key with ACL name [%s]!!\",\n+          ugi.getShortUserName(), opType, aclName));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkAccess(String aclName, UserGroupInformation ugi,\n      KeyOpType opType) throws AuthorizationException {\n    Preconditions.checkNotNull(aclName, \"Key ACL name cannot be null\");\n    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n    if (acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) \u0026\u0026\n        (acls.hasAccessToKey(aclName, ugi, opType)\n            || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL))) {\n      return;\n    } else {\n      throw new AuthorizationException(String.format(\"User [%s] is not\"\n          + \" authorized to perform [%s] on key with ACL name [%s]!!\",\n          ugi.getShortUserName(), opType, aclName));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java"
    }
  }
}