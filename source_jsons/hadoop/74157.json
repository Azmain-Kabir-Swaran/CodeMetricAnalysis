{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceAuthorizationManager.java",
  "functionName": "refresh",
  "functionId": "refresh___conf-Configuration__provider-PolicyProvider",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
  "functionStartLine": 143,
  "functionEndLine": 153,
  "numCommitsSeen": 33,
  "timeTaken": 1998,
  "changeHistory": [
    "44ac7437addedcd1f67a8992194ee29168d342cc",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "b812af964d100c50d065cdd9007cef31ea2642a8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "642ed17a4808e36f1458546cc66d52e212cc5acf",
    "47d4ebebaca1d023342a93bc87dedbb00a60b2fa",
    "0fd49b35370e3c0c72abaf2007d34d4207347693",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "44ac7437addedcd1f67a8992194ee29168d342cc": "Ymodifierchange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "b812af964d100c50d065cdd9007cef31ea2642a8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "642ed17a4808e36f1458546cc66d52e212cc5acf": "Ymodifierchange",
    "47d4ebebaca1d023342a93bc87dedbb00a60b2fa": "Ymodifierchange",
    "0fd49b35370e3c0c72abaf2007d34d4207347693": "Ymodifierchange",
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44ac7437addedcd1f67a8992194ee29168d342cc": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-10590. ServiceAuthorizationManager is not threadsafe. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/14 10:29 PM",
      "commitName": "44ac7437addedcd1f67a8992194ee29168d342cc",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "10/02/14 2:50 PM",
      "commitNameOld": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 127.28,
      "commitsBetweenForRepo": 893,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n-  public synchronized void refresh(Configuration conf,\n+  public void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     refreshWithLoadedConfiguration(policyConf, provider);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    refreshWithLoadedConfiguration(policyConf, provider);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   public synchronized void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n-    refreshWithConfiguration(policyConf, provider);\n+    refreshWithLoadedConfiguration(policyConf, provider);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    refreshWithLoadedConfiguration(policyConf, provider);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {}
    },
    "b812af964d100c50d065cdd9007cef31ea2642a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1669. Modified RM HA handling of protocol level service-ACLS to be available across RM failover by making using of a remote configuration-provider. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 2:46 PM",
      "commitName": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 502.78,
      "commitsBetweenForRepo": 2952,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,11 @@\n   public synchronized void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n-    \n-    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n-      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n-\n-    // Parse the config file\n-    Service[] services \u003d provider.getServices();\n-    if (services !\u003d null) {\n-      for (Service service : services) {\n-        AccessControlList acl \u003d \n-          new AccessControlList(\n-              policyConf.get(service.getServiceKey(), \n-                             AccessControlList.WILDCARD_ACL_VALUE)\n-              );\n-        newAcls.put(service.getProtocol(), acl);\n-      }\n-    }\n-\n-    // Flip to the newly parsed permissions\n-    protocolToAcl \u003d newAcls;\n+    refreshWithConfiguration(policyConf, provider);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    refreshWithConfiguration(policyConf, provider);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "common/src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
        "newPath": "common/src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java"
      }
    },
    "642ed17a4808e36f1458546cc66d52e212cc5acf": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-6951.  Distinct minicluster services (e.g. NN and JT) overwrite each other\u0027s service policies.  Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1002896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/10 4:49 PM",
      "commitName": "642ed17a4808e36f1458546cc66d52e212cc5acf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "24/09/10 7:41 PM",
      "commitNameOld": "47d4ebebaca1d023342a93bc87dedbb00a60b2fa",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 4.88,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-  public static synchronized void refresh(Configuration conf,\n+  public synchronized void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n       new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "[public, static, synchronized]",
        "newValue": "[public, synchronized]"
      }
    },
    "47d4ebebaca1d023342a93bc87dedbb00a60b2fa": {
      "type": "Ymodifierchange",
      "commitMessage": "Reverting commit 1001067 while related HDFS and MR JIRAs are tested (HADOOP-6951).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1001127 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/10 7:41 PM",
      "commitName": "47d4ebebaca1d023342a93bc87dedbb00a60b2fa",
      "commitAuthor": "Thomas White",
      "commitDateOld": "24/09/10 1:48 PM",
      "commitNameOld": "0fd49b35370e3c0c72abaf2007d34d4207347693",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-  public synchronized void refresh(Configuration conf,\n+  public static synchronized void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n       new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public, static, synchronized]"
      }
    },
    "0fd49b35370e3c0c72abaf2007d34d4207347693": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-6951. Distinct minicluster services (e.g. NN and JT) overwrite each other\u0027s service policies. Contributed by Aaron T. Myers\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1001067 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/10 1:48 PM",
      "commitName": "0fd49b35370e3c0c72abaf2007d34d4207347693",
      "commitAuthor": "Thomas White",
      "commitDateOld": "28/08/10 3:44 PM",
      "commitNameOld": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 26.92,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-  public static synchronized void refresh(Configuration conf,\n+  public synchronized void refresh(Configuration conf,\n                                           PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n     final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n       new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n     Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n         newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n     protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
      "extendedDetails": {
        "oldValue": "[public, static, synchronized]",
        "newValue": "[public, synchronized]"
      }
    },
    "0c5734e4aca873f405fbf994e5fe7061e31731c8": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/10 12:08 AM",
      "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthor": "Owen O\u0027Malley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/10 12:08 AM",
          "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "26/01/10 2:55 PM",
          "commitNameOld": "34d1b39c7525898b43e44a7c5cbd86768714baf0",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,29 @@\n-  public void refresh() {\n+  public static synchronized void refresh(Configuration conf,\n+                                          PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n-    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n-      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n-    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n+    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n-    Service[] services \u003d policyProvider.getServices();\n+    Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n-        \n-        if (acl.allAllowed()) {\n-          newAllowPermissions.add(service.getPermission());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n-          }\n-        } else {\n-          for (String user : acl.getUsers()) {\n-            addPermission(newPermissions, new User(user), service.getPermission());\n-          }\n-\n-          for (String group : acl.getGroups()) {\n-            addPermission(newPermissions, new Group(group), service.getPermission());\n-          }\n-        }\n+        newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n-    allowedPermissions \u003d newAllowPermissions;\n-    permissions \u003d newPermissions;\n+    protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/security/authorize/ConfiguredPolicy.java",
            "newPath": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
            "oldMethodName": "refresh",
            "newMethodName": "refresh"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/10 12:08 AM",
          "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "26/01/10 2:55 PM",
          "commitNameOld": "34d1b39c7525898b43e44a7c5cbd86768714baf0",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,29 @@\n-  public void refresh() {\n+  public static synchronized void refresh(Configuration conf,\n+                                          PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n-    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n-      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n-    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n+    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n-    Service[] services \u003d policyProvider.getServices();\n+    Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n-        \n-        if (acl.allAllowed()) {\n-          newAllowPermissions.add(service.getPermission());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n-          }\n-        } else {\n-          for (String user : acl.getUsers()) {\n-            addPermission(newPermissions, new User(user), service.getPermission());\n-          }\n-\n-          for (String group : acl.getGroups()) {\n-            addPermission(newPermissions, new Group(group), service.getPermission());\n-          }\n-        }\n+        newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n-    allowedPermissions \u003d newAllowPermissions;\n-    permissions \u003d newPermissions;\n+    protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/10 12:08 AM",
          "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "26/01/10 2:55 PM",
          "commitNameOld": "34d1b39c7525898b43e44a7c5cbd86768714baf0",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,29 @@\n-  public void refresh() {\n+  public static synchronized void refresh(Configuration conf,\n+                                          PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n-    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n-      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n-    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n+    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n-    Service[] services \u003d policyProvider.getServices();\n+    Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n-        \n-        if (acl.allAllowed()) {\n-          newAllowPermissions.add(service.getPermission());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n-          }\n-        } else {\n-          for (String user : acl.getUsers()) {\n-            addPermission(newPermissions, new User(user), service.getPermission());\n-          }\n-\n-          for (String group : acl.getGroups()) {\n-            addPermission(newPermissions, new Group(group), service.getPermission());\n-          }\n-        }\n+        newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n-    allowedPermissions \u003d newAllowPermissions;\n-    permissions \u003d newPermissions;\n+    protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6299. Reimplement the UserGroupInformation to use the OS\nspecific and Kerberos JAAS login. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@903560 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/01/10 12:08 AM",
          "commitName": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
          "commitAuthor": "Owen O\u0027Malley",
          "commitDateOld": "26/01/10 2:55 PM",
          "commitNameOld": "34d1b39c7525898b43e44a7c5cbd86768714baf0",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,29 @@\n-  public void refresh() {\n+  public static synchronized void refresh(Configuration conf,\n+                                          PolicyProvider provider) {\n     // Get the system property \u0027hadoop.policy.file\u0027\n     String policyFile \u003d \n       System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n     \n     // Make a copy of the original config, and load the policy file\n     Configuration policyConf \u003d new Configuration(conf);\n     policyConf.addResource(policyFile);\n     \n-    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n-      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n-    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n+    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n+      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n \n     // Parse the config file\n-    Service[] services \u003d policyProvider.getServices();\n+    Service[] services \u003d provider.getServices();\n     if (services !\u003d null) {\n       for (Service service : services) {\n         AccessControlList acl \u003d \n           new AccessControlList(\n               policyConf.get(service.getServiceKey(), \n                              AccessControlList.WILDCARD_ACL_VALUE)\n               );\n-        \n-        if (acl.allAllowed()) {\n-          newAllowPermissions.add(service.getPermission());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n-          }\n-        } else {\n-          for (String user : acl.getUsers()) {\n-            addPermission(newPermissions, new User(user), service.getPermission());\n-          }\n-\n-          for (String group : acl.getGroups()) {\n-            addPermission(newPermissions, new Group(group), service.getPermission());\n-          }\n-        }\n+        newAcls.put(service.getProtocol(), acl);\n       }\n     }\n \n     // Flip to the newly parsed permissions\n-    allowedPermissions \u003d newAllowPermissions;\n-    permissions \u003d newPermissions;\n+    protocolToAcl \u003d newAcls;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void refresh(Configuration conf,\n                                          PolicyProvider provider) {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    final Map\u003cClass\u003c?\u003e, AccessControlList\u003e newAcls \u003d\n      new IdentityHashMap\u003cClass\u003c?\u003e, AccessControlList\u003e();\n\n    // Parse the config file\n    Service[] services \u003d provider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        newAcls.put(service.getProtocol(), acl);\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    protocolToAcl \u003d newAcls;\n  }",
          "path": "src/java/org/apache/hadoop/security/authorize/ServiceAuthorizationManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[conf-Configuration, provider-PolicyProvider]"
          }
        }
      ]
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,44 @@\n+  public void refresh() {\n+    // Get the system property \u0027hadoop.policy.file\u0027\n+    String policyFile \u003d \n+      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n+    \n+    // Make a copy of the original config, and load the policy file\n+    Configuration policyConf \u003d new Configuration(conf);\n+    policyConf.addResource(policyFile);\n+    \n+    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n+      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n+    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n+\n+    // Parse the config file\n+    Service[] services \u003d policyProvider.getServices();\n+    if (services !\u003d null) {\n+      for (Service service : services) {\n+        AccessControlList acl \u003d \n+          new AccessControlList(\n+              policyConf.get(service.getServiceKey(), \n+                             AccessControlList.WILDCARD_ACL_VALUE)\n+              );\n+        \n+        if (acl.allAllowed()) {\n+          newAllowPermissions.add(service.getPermission());\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n+          }\n+        } else {\n+          for (String user : acl.getUsers()) {\n+            addPermission(newPermissions, new User(user), service.getPermission());\n+          }\n+\n+          for (String group : acl.getGroups()) {\n+            addPermission(newPermissions, new Group(group), service.getPermission());\n+          }\n+        }\n+      }\n+    }\n+\n+    // Flip to the newly parsed permissions\n+    allowedPermissions \u003d newAllowPermissions;\n+    permissions \u003d newPermissions;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void refresh() {\n    // Get the system property \u0027hadoop.policy.file\u0027\n    String policyFile \u003d \n      System.getProperty(\"hadoop.policy.file\", HADOOP_POLICY_FILE);\n    \n    // Make a copy of the original config, and load the policy file\n    Configuration policyConf \u003d new Configuration(conf);\n    policyConf.addResource(policyFile);\n    \n    Map\u003cPrincipal, Set\u003cPermission\u003e\u003e newPermissions \u003d \n      new HashMap\u003cPrincipal, Set\u003cPermission\u003e\u003e();\n    Set\u003cPermission\u003e newAllowPermissions \u003d new HashSet\u003cPermission\u003e();\n\n    // Parse the config file\n    Service[] services \u003d policyProvider.getServices();\n    if (services !\u003d null) {\n      for (Service service : services) {\n        AccessControlList acl \u003d \n          new AccessControlList(\n              policyConf.get(service.getServiceKey(), \n                             AccessControlList.WILDCARD_ACL_VALUE)\n              );\n        \n        if (acl.allAllowed()) {\n          newAllowPermissions.add(service.getPermission());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Policy - \" + service.getPermission() + \" * \");\n          }\n        } else {\n          for (String user : acl.getUsers()) {\n            addPermission(newPermissions, new User(user), service.getPermission());\n          }\n\n          for (String group : acl.getGroups()) {\n            addPermission(newPermissions, new Group(group), service.getPermission());\n          }\n        }\n      }\n    }\n\n    // Flip to the newly parsed permissions\n    allowedPermissions \u003d newAllowPermissions;\n    permissions \u003d newPermissions;\n  }",
      "path": "src/java/org/apache/hadoop/security/authorize/ConfiguredPolicy.java"
    }
  }
}