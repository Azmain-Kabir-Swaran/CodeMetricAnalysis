{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebAppFilter.java",
  "functionName": "ahsRedirectPath",
  "functionId": "ahsRedirectPath___uri-String__rmWebApp-RMWebApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
  "functionStartLine": 183,
  "functionEndLine": 241,
  "numCommitsSeen": 13,
  "timeTaken": 1963,
  "changeHistory": [
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36"
  ],
  "changeHistoryShort": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/03/16 7:34 PM",
      "commitNameOld": "19b645c93801a53d4486f9a7639186525e51f723",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 82.81,
      "commitsBetweenForRepo": 535,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private String ahsRedirectPath(String uri, RMWebApp rmWebApp) {\n     // TODO: Commonize URL parsing code. Will be done in YARN-4642.\n     String redirectPath \u003d null;\n     if(uri.contains(\"/cluster/\")) {\n       String[] parts \u003d uri.split(\"/\");\n       if(parts.length \u003e 3) {\n         RMContext context \u003d rmWebApp.getRMContext();\n         String type \u003d parts[2];\n         ApplicationId appId \u003d null;\n         ApplicationAttemptId appAttemptId \u003d null;\n         ContainerId containerId \u003d null;\n         switch(type){\n         case \"app\":\n           try {\n             appId \u003d Apps.toAppID(parts[3]);\n           } catch (YarnRuntimeException | NumberFormatException e) {\n             LOG.debug(\"Error parsing {} as an ApplicationId\",\n                 parts[3], e);\n             return redirectPath;\n           }\n           if(!context.getRMApps().containsKey(appId)) {\n             redirectPath \u003d pjoin(ahsPageURLPrefix, \"app\", appId);\n           }\n           break;\n         case \"appattempt\":\n           try{\n-            appAttemptId \u003d ConverterUtils.toApplicationAttemptId(parts[3]);\n+            appAttemptId \u003d ApplicationAttemptId.fromString(parts[3]);\n           } catch (IllegalArgumentException e) {\n             LOG.debug(\"Error parsing {} as an ApplicationAttemptId\",\n                 parts[3], e);\n             return redirectPath;\n           }\n           if(!context.getRMApps().containsKey(\n               appAttemptId.getApplicationId())) {\n             redirectPath \u003d pjoin(ahsPageURLPrefix,\n                 \"appattempt\", appAttemptId);\n           }\n           break;\n         case \"container\":\n           try {\n             containerId \u003d ContainerId.fromString(parts[3]);\n           } catch (IllegalArgumentException e) {\n             LOG.debug(\"Error parsing {} as an ContainerId\",\n                 parts[3], e);\n             return redirectPath;\n           }\n           if(!context.getRMApps().containsKey(\n               containerId.getApplicationAttemptId().getApplicationId())) {\n             redirectPath \u003d pjoin(ahsPageURLPrefix,\n                 \"container\", containerId);\n           }\n           break;\n         default:\n           break;\n         }\n       }\n     }\n     return redirectPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String ahsRedirectPath(String uri, RMWebApp rmWebApp) {\n    // TODO: Commonize URL parsing code. Will be done in YARN-4642.\n    String redirectPath \u003d null;\n    if(uri.contains(\"/cluster/\")) {\n      String[] parts \u003d uri.split(\"/\");\n      if(parts.length \u003e 3) {\n        RMContext context \u003d rmWebApp.getRMContext();\n        String type \u003d parts[2];\n        ApplicationId appId \u003d null;\n        ApplicationAttemptId appAttemptId \u003d null;\n        ContainerId containerId \u003d null;\n        switch(type){\n        case \"app\":\n          try {\n            appId \u003d Apps.toAppID(parts[3]);\n          } catch (YarnRuntimeException | NumberFormatException e) {\n            LOG.debug(\"Error parsing {} as an ApplicationId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(appId)) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix, \"app\", appId);\n          }\n          break;\n        case \"appattempt\":\n          try{\n            appAttemptId \u003d ApplicationAttemptId.fromString(parts[3]);\n          } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error parsing {} as an ApplicationAttemptId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(\n              appAttemptId.getApplicationId())) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix,\n                \"appattempt\", appAttemptId);\n          }\n          break;\n        case \"container\":\n          try {\n            containerId \u003d ContainerId.fromString(parts[3]);\n          } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error parsing {} as an ContainerId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(\n              containerId.getApplicationAttemptId().getApplicationId())) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix,\n                \"container\", containerId);\n          }\n          break;\n        default:\n          break;\n        }\n      }\n    }\n    return redirectPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java",
      "extendedDetails": {}
    },
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4428. Redirect RM page to AHS page when AHS turned on and RM page is not available. Contributed by Chang Li\n",
      "commitDate": "29/01/16 1:48 PM",
      "commitName": "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,59 @@\n+  private String ahsRedirectPath(String uri, RMWebApp rmWebApp) {\n+    // TODO: Commonize URL parsing code. Will be done in YARN-4642.\n+    String redirectPath \u003d null;\n+    if(uri.contains(\"/cluster/\")) {\n+      String[] parts \u003d uri.split(\"/\");\n+      if(parts.length \u003e 3) {\n+        RMContext context \u003d rmWebApp.getRMContext();\n+        String type \u003d parts[2];\n+        ApplicationId appId \u003d null;\n+        ApplicationAttemptId appAttemptId \u003d null;\n+        ContainerId containerId \u003d null;\n+        switch(type){\n+        case \"app\":\n+          try {\n+            appId \u003d Apps.toAppID(parts[3]);\n+          } catch (YarnRuntimeException | NumberFormatException e) {\n+            LOG.debug(\"Error parsing {} as an ApplicationId\",\n+                parts[3], e);\n+            return redirectPath;\n+          }\n+          if(!context.getRMApps().containsKey(appId)) {\n+            redirectPath \u003d pjoin(ahsPageURLPrefix, \"app\", appId);\n+          }\n+          break;\n+        case \"appattempt\":\n+          try{\n+            appAttemptId \u003d ConverterUtils.toApplicationAttemptId(parts[3]);\n+          } catch (IllegalArgumentException e) {\n+            LOG.debug(\"Error parsing {} as an ApplicationAttemptId\",\n+                parts[3], e);\n+            return redirectPath;\n+          }\n+          if(!context.getRMApps().containsKey(\n+              appAttemptId.getApplicationId())) {\n+            redirectPath \u003d pjoin(ahsPageURLPrefix,\n+                \"appattempt\", appAttemptId);\n+          }\n+          break;\n+        case \"container\":\n+          try {\n+            containerId \u003d ContainerId.fromString(parts[3]);\n+          } catch (IllegalArgumentException e) {\n+            LOG.debug(\"Error parsing {} as an ContainerId\",\n+                parts[3], e);\n+            return redirectPath;\n+          }\n+          if(!context.getRMApps().containsKey(\n+              containerId.getApplicationAttemptId().getApplicationId())) {\n+            redirectPath \u003d pjoin(ahsPageURLPrefix,\n+                \"container\", containerId);\n+          }\n+          break;\n+        default:\n+          break;\n+        }\n+      }\n+    }\n+    return redirectPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String ahsRedirectPath(String uri, RMWebApp rmWebApp) {\n    // TODO: Commonize URL parsing code. Will be done in YARN-4642.\n    String redirectPath \u003d null;\n    if(uri.contains(\"/cluster/\")) {\n      String[] parts \u003d uri.split(\"/\");\n      if(parts.length \u003e 3) {\n        RMContext context \u003d rmWebApp.getRMContext();\n        String type \u003d parts[2];\n        ApplicationId appId \u003d null;\n        ApplicationAttemptId appAttemptId \u003d null;\n        ContainerId containerId \u003d null;\n        switch(type){\n        case \"app\":\n          try {\n            appId \u003d Apps.toAppID(parts[3]);\n          } catch (YarnRuntimeException | NumberFormatException e) {\n            LOG.debug(\"Error parsing {} as an ApplicationId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(appId)) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix, \"app\", appId);\n          }\n          break;\n        case \"appattempt\":\n          try{\n            appAttemptId \u003d ConverterUtils.toApplicationAttemptId(parts[3]);\n          } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error parsing {} as an ApplicationAttemptId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(\n              appAttemptId.getApplicationId())) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix,\n                \"appattempt\", appAttemptId);\n          }\n          break;\n        case \"container\":\n          try {\n            containerId \u003d ContainerId.fromString(parts[3]);\n          } catch (IllegalArgumentException e) {\n            LOG.debug(\"Error parsing {} as an ContainerId\",\n                parts[3], e);\n            return redirectPath;\n          }\n          if(!context.getRMApps().containsKey(\n              containerId.getApplicationAttemptId().getApplicationId())) {\n            redirectPath \u003d pjoin(ahsPageURLPrefix,\n                \"container\", containerId);\n          }\n          break;\n        default:\n          break;\n        }\n      }\n    }\n    return redirectPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebAppFilter.java"
    }
  }
}