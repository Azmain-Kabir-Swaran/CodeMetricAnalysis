{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "moveApplication",
  "functionId": "moveApplication___appId-ApplicationId__queueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1739,
  "functionEndLine": 1791,
  "numCommitsSeen": 226,
  "timeTaken": 6711,
  "changeHistory": [
    "2bba329c141dea17a1a9f7112f7155e11264ccfd",
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
    "9f5d2c4fff6d31acc8b422b52462ef4927c4eea1",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
    "24ee9e3431d27811530ffa01d8d241133fd643fe",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "e60f5b6c40cbed867dc838d2e3a5a291e49b7047",
    "e6eccf20defcaf84a9566482371c7be196779c0d"
  ],
  "changeHistoryShort": {
    "2bba329c141dea17a1a9f7112f7155e11264ccfd": "Ybodychange",
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": "Ybodychange",
    "9f5d2c4fff6d31acc8b422b52462ef4927c4eea1": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": "Ybodychange",
    "24ee9e3431d27811530ffa01d8d241133fd643fe": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "e60f5b6c40cbed867dc838d2e3a5a291e49b7047": "Ybodychange",
    "e6eccf20defcaf84a9566482371c7be196779c0d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2bba329c141dea17a1a9f7112f7155e11264ccfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8994. Fix race condition between move app and queue cleanup in Fair Scheduler. (Contributed by Wilfred Spiegelenburg)\n",
      "commitDate": "05/12/18 2:38 PM",
      "commitName": "2bba329c141dea17a1a9f7112f7155e11264ccfd",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "08/11/18 4:02 PM",
      "commitNameOld": "524a7523c427b55273133078898ae3535897bada",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 26.94,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,53 @@\n   public String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n     writeLock.lock();\n     try {\n+      // app could have finished between pre check and now\n       SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n       if (app \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n-      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n-      // To serialize with FairScheduler#allocate, synchronize on app attempt\n+      FSLeafQueue targetQueue \u003d null;\n \n+      // To serialize with FairScheduler#allocate, synchronize on app attempt\n+      FSAppAttempt attempt \u003d app.getCurrentAppAttempt();\n       attempt.getWriteLock().lock();\n       try {\n         FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n         // Check if the attempt is already stopped: don\u0027t move stopped app\n         // attempt. The attempt has already been removed from all queues.\n         if (attempt.isStopped()) {\n           LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n           throw new YarnException(\"Application \" + appId\n               + \" is stopped and can\u0027t be moved!\");\n         }\n         String destQueueName \u003d handleMoveToPlanQueue(queueName);\n-        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n+        // Prevent removal of the queue while the move is in progress by\n+        // registering the app as submitted to the queue.\n+        targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false, appId);\n         if (targetQueue \u003d\u003d null) {\n           throw new YarnException(\"Target queue \" + queueName\n               + \" not found or is not a leaf queue.\");\n         }\n         if (targetQueue \u003d\u003d oldQueue) {\n           return oldQueue.getQueueName();\n         }\n \n         if (oldQueue.isRunnableApp(attempt)) {\n           verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n         }\n \n+        // The move itself will clean up the app submit registration.\n         executeMove(app, attempt, oldQueue, targetQueue);\n         return targetQueue.getQueueName();\n       } finally {\n+        // Cleanup the submit registration in case of move failure.\n+        if (targetQueue !\u003d null) {\n+          targetQueue.removeAssignedApp(appId);\n+        }\n         attempt.getWriteLock().unlock();\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    writeLock.lock();\n    try {\n      // app could have finished between pre check and now\n      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n      if (app \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      FSLeafQueue targetQueue \u003d null;\n\n      // To serialize with FairScheduler#allocate, synchronize on app attempt\n      FSAppAttempt attempt \u003d app.getCurrentAppAttempt();\n      attempt.getWriteLock().lock();\n      try {\n        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n        // Check if the attempt is already stopped: don\u0027t move stopped app\n        // attempt. The attempt has already been removed from all queues.\n        if (attempt.isStopped()) {\n          LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n          throw new YarnException(\"Application \" + appId\n              + \" is stopped and can\u0027t be moved!\");\n        }\n        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n        // Prevent removal of the queue while the move is in progress by\n        // registering the app as submitted to the queue.\n        targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false, appId);\n        if (targetQueue \u003d\u003d null) {\n          throw new YarnException(\"Target queue \" + queueName\n              + \" not found or is not a leaf queue.\");\n        }\n        if (targetQueue \u003d\u003d oldQueue) {\n          return oldQueue.getQueueName();\n        }\n\n        if (oldQueue.isRunnableApp(attempt)) {\n          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n        }\n\n        // The move itself will clean up the app submit registration.\n        executeMove(app, attempt, oldQueue, targetQueue);\n        return targetQueue.getQueueName();\n      } finally {\n        // Cleanup the submit registration in case of move failure.\n        if (targetQueue !\u003d null) {\n          targetQueue.removeAssignedApp(appId);\n        }\n        attempt.getWriteLock().unlock();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7133. Clean up lock-try order in fair scheduler. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "24/07/18 12:46 PM",
      "commitName": "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/06/18 11:12 AM",
      "commitNameOld": "c190ac2be88e574b3322cdc73a7c0af0cef708b2",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 43.07,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n       if (app \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n       FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n       // To serialize with FairScheduler#allocate, synchronize on app attempt\n \n+      attempt.getWriteLock().lock();\n       try {\n-        attempt.getWriteLock().lock();\n         FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n         // Check if the attempt is already stopped: don\u0027t move stopped app\n         // attempt. The attempt has already been removed from all queues.\n         if (attempt.isStopped()) {\n           LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n           throw new YarnException(\"Application \" + appId\n               + \" is stopped and can\u0027t be moved!\");\n         }\n         String destQueueName \u003d handleMoveToPlanQueue(queueName);\n         FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n         if (targetQueue \u003d\u003d null) {\n           throw new YarnException(\"Target queue \" + queueName\n               + \" not found or is not a leaf queue.\");\n         }\n         if (targetQueue \u003d\u003d oldQueue) {\n           return oldQueue.getQueueName();\n         }\n \n         if (oldQueue.isRunnableApp(attempt)) {\n           verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n         }\n \n         executeMove(app, attempt, oldQueue, targetQueue);\n         return targetQueue.getQueueName();\n       } finally {\n         attempt.getWriteLock().unlock();\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n      if (app \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n      // To serialize with FairScheduler#allocate, synchronize on app attempt\n\n      attempt.getWriteLock().lock();\n      try {\n        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n        // Check if the attempt is already stopped: don\u0027t move stopped app\n        // attempt. The attempt has already been removed from all queues.\n        if (attempt.isStopped()) {\n          LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n          throw new YarnException(\"Application \" + appId\n              + \" is stopped and can\u0027t be moved!\");\n        }\n        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n        if (targetQueue \u003d\u003d null) {\n          throw new YarnException(\"Target queue \" + queueName\n              + \" not found or is not a leaf queue.\");\n        }\n        if (targetQueue \u003d\u003d oldQueue) {\n          return oldQueue.getQueueName();\n        }\n\n        if (oldQueue.isRunnableApp(attempt)) {\n          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n        }\n\n        executeMove(app, attempt, oldQueue, targetQueue);\n        return targetQueue.getQueueName();\n      } finally {\n        attempt.getWriteLock().unlock();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "9f5d2c4fff6d31acc8b422b52462ef4927c4eea1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5136. Error in handling event type APP_ATTEMPT_REMOVED to the scheduler\n(Contributed by Wilfred Spiegelenburg via Daniel Templeton)\n",
      "commitDate": "07/12/16 11:12 AM",
      "commitName": "9f5d2c4fff6d31acc8b422b52462ef4927c4eea1",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "06/12/16 9:09 PM",
      "commitNameOld": "563480dccd0136d82730f4228f1df44449ed5822",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,44 @@\n   public String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n     try {\n       writeLock.lock();\n       SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n       if (app \u003d\u003d null) {\n         throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n       FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n       // To serialize with FairScheduler#allocate, synchronize on app attempt\n \n       try {\n         attempt.getWriteLock().lock();\n         FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n+        // Check if the attempt is already stopped: don\u0027t move stopped app\n+        // attempt. The attempt has already been removed from all queues.\n+        if (attempt.isStopped()) {\n+          LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n+          throw new YarnException(\"Application \" + appId\n+              + \" is stopped and can\u0027t be moved!\");\n+        }\n         String destQueueName \u003d handleMoveToPlanQueue(queueName);\n         FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n         if (targetQueue \u003d\u003d null) {\n           throw new YarnException(\"Target queue \" + queueName\n               + \" not found or is not a leaf queue.\");\n         }\n         if (targetQueue \u003d\u003d oldQueue) {\n           return oldQueue.getQueueName();\n         }\n \n         if (oldQueue.isRunnableApp(attempt)) {\n           verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n         }\n \n         executeMove(app, attempt, oldQueue, targetQueue);\n         return targetQueue.getQueueName();\n       } finally {\n         attempt.getWriteLock().unlock();\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n      if (app \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n      // To serialize with FairScheduler#allocate, synchronize on app attempt\n\n      try {\n        attempt.getWriteLock().lock();\n        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n        // Check if the attempt is already stopped: don\u0027t move stopped app\n        // attempt. The attempt has already been removed from all queues.\n        if (attempt.isStopped()) {\n          LOG.info(\"Application \" + appId + \" is stopped and can\u0027t be moved!\");\n          throw new YarnException(\"Application \" + appId\n              + \" is stopped and can\u0027t be moved!\");\n        }\n        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n        if (targetQueue \u003d\u003d null) {\n          throw new YarnException(\"Target queue \" + queueName\n              + \" not found or is not a leaf queue.\");\n        }\n        if (targetQueue \u003d\u003d oldQueue) {\n          return oldQueue.getQueueName();\n        }\n\n        if (oldQueue.isRunnableApp(attempt)) {\n          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n        }\n\n        executeMove(app, attempt, oldQueue, targetQueue);\n        return targetQueue.getQueueName();\n      } finally {\n        attempt.getWriteLock().unlock();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,37 @@\n-  public synchronized String moveApplication(ApplicationId appId,\n+  public String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n-    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n-    if (app \u003d\u003d null) {\n-      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n-    }\n-    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n-    // To serialize with FairScheduler#allocate, synchronize on app attempt\n-    synchronized (attempt) {\n-      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n-      String destQueueName \u003d handleMoveToPlanQueue(queueName);\n-      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n-      if (targetQueue \u003d\u003d null) {\n-        throw new YarnException(\"Target queue \" + queueName\n-            + \" not found or is not a leaf queue.\");\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n+      if (app \u003d\u003d null) {\n+        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n-      if (targetQueue \u003d\u003d oldQueue) {\n-        return oldQueue.getQueueName();\n+      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n+      // To serialize with FairScheduler#allocate, synchronize on app attempt\n+\n+      try {\n+        attempt.getWriteLock().lock();\n+        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n+        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n+        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n+        if (targetQueue \u003d\u003d null) {\n+          throw new YarnException(\"Target queue \" + queueName\n+              + \" not found or is not a leaf queue.\");\n+        }\n+        if (targetQueue \u003d\u003d oldQueue) {\n+          return oldQueue.getQueueName();\n+        }\n+\n+        if (oldQueue.isRunnableApp(attempt)) {\n+          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n+        }\n+\n+        executeMove(app, attempt, oldQueue, targetQueue);\n+        return targetQueue.getQueueName();\n+      } finally {\n+        attempt.getWriteLock().unlock();\n       }\n-      \n-      if (oldQueue.isRunnableApp(attempt)) {\n-        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n-      }\n-      \n-      executeMove(app, attempt, oldQueue, targetQueue);\n-      return targetQueue.getQueueName();\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n      if (app \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n      // To serialize with FairScheduler#allocate, synchronize on app attempt\n\n      try {\n        attempt.getWriteLock().lock();\n        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n        if (targetQueue \u003d\u003d null) {\n          throw new YarnException(\"Target queue \" + queueName\n              + \" not found or is not a leaf queue.\");\n        }\n        if (targetQueue \u003d\u003d oldQueue) {\n          return oldQueue.getQueueName();\n        }\n\n        if (oldQueue.isRunnableApp(attempt)) {\n          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n        }\n\n        executeMove(app, attempt, oldQueue, targetQueue);\n        return targetQueue.getQueueName();\n      } finally {\n        attempt.getWriteLock().unlock();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,37 @@\n-  public synchronized String moveApplication(ApplicationId appId,\n+  public String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n-    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n-    if (app \u003d\u003d null) {\n-      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n-    }\n-    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n-    // To serialize with FairScheduler#allocate, synchronize on app attempt\n-    synchronized (attempt) {\n-      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n-      String destQueueName \u003d handleMoveToPlanQueue(queueName);\n-      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n-      if (targetQueue \u003d\u003d null) {\n-        throw new YarnException(\"Target queue \" + queueName\n-            + \" not found or is not a leaf queue.\");\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n+      if (app \u003d\u003d null) {\n+        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n       }\n-      if (targetQueue \u003d\u003d oldQueue) {\n-        return oldQueue.getQueueName();\n+      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n+      // To serialize with FairScheduler#allocate, synchronize on app attempt\n+\n+      try {\n+        attempt.getWriteLock().lock();\n+        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n+        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n+        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n+        if (targetQueue \u003d\u003d null) {\n+          throw new YarnException(\"Target queue \" + queueName\n+              + \" not found or is not a leaf queue.\");\n+        }\n+        if (targetQueue \u003d\u003d oldQueue) {\n+          return oldQueue.getQueueName();\n+        }\n+\n+        if (oldQueue.isRunnableApp(attempt)) {\n+          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n+        }\n+\n+        executeMove(app, attempt, oldQueue, targetQueue);\n+        return targetQueue.getQueueName();\n+      } finally {\n+        attempt.getWriteLock().unlock();\n       }\n-      \n-      if (oldQueue.isRunnableApp(attempt)) {\n-        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n-      }\n-      \n-      executeMove(app, attempt, oldQueue, targetQueue);\n-      return targetQueue.getQueueName();\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n      if (app \u003d\u003d null) {\n        throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n      }\n      FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n      // To serialize with FairScheduler#allocate, synchronize on app attempt\n\n      try {\n        attempt.getWriteLock().lock();\n        FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n        String destQueueName \u003d handleMoveToPlanQueue(queueName);\n        FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n        if (targetQueue \u003d\u003d null) {\n          throw new YarnException(\"Target queue \" + queueName\n              + \" not found or is not a leaf queue.\");\n        }\n        if (targetQueue \u003d\u003d oldQueue) {\n          return oldQueue.getQueueName();\n        }\n\n        if (oldQueue.isRunnableApp(attempt)) {\n          verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n        }\n\n        executeMove(app, attempt, oldQueue, targetQueue);\n        return targetQueue.getQueueName();\n      } finally {\n        attempt.getWriteLock().unlock();\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2881. [YARN-2574] Implement PlanFollower for FairScheduler. (Anubhav Dhoot via kasha)\n",
      "commitDate": "05/01/15 3:12 PM",
      "commitName": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/12/14 7:55 PM",
      "commitNameOld": "e7257acd8a7adb74d81cd1d009d4a99f023ed844",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n     SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n     }\n     FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n     // To serialize with FairScheduler#allocate, synchronize on app attempt\n     synchronized (attempt) {\n       FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n-      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n+      String destQueueName \u003d handleMoveToPlanQueue(queueName);\n+      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n       if (targetQueue \u003d\u003d null) {\n         throw new YarnException(\"Target queue \" + queueName\n             + \" not found or is not a leaf queue.\");\n       }\n       if (targetQueue \u003d\u003d oldQueue) {\n         return oldQueue.getQueueName();\n       }\n       \n       if (oldQueue.isRunnableApp(attempt)) {\n         verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n       }\n       \n       executeMove(app, attempt, oldQueue, targetQueue);\n       return targetQueue.getQueueName();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n    // To serialize with FairScheduler#allocate, synchronize on app attempt\n    synchronized (attempt) {\n      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n      String destQueueName \u003d handleMoveToPlanQueue(queueName);\n      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(destQueueName, false);\n      if (targetQueue \u003d\u003d null) {\n        throw new YarnException(\"Target queue \" + queueName\n            + \" not found or is not a leaf queue.\");\n      }\n      if (targetQueue \u003d\u003d oldQueue) {\n        return oldQueue.getQueueName();\n      }\n      \n      if (oldQueue.isRunnableApp(attempt)) {\n        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n      }\n      \n      executeMove(app, attempt, oldQueue, targetQueue);\n      return targetQueue.getQueueName();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "24ee9e3431d27811530ffa01d8d241133fd643fe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2975. FSLeafQueue app lists are accessed without required locks. (kasha)\n",
      "commitDate": "20/12/14 12:17 PM",
      "commitName": "24ee9e3431d27811530ffa01d8d241133fd643fe",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "19/12/14 3:37 PM",
      "commitNameOld": "a22ffc318801698e86cd0e316b4824015f2486ac",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n     SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n     }\n     FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n     // To serialize with FairScheduler#allocate, synchronize on app attempt\n     synchronized (attempt) {\n       FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n       FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n       if (targetQueue \u003d\u003d null) {\n         throw new YarnException(\"Target queue \" + queueName\n             + \" not found or is not a leaf queue.\");\n       }\n       if (targetQueue \u003d\u003d oldQueue) {\n         return oldQueue.getQueueName();\n       }\n       \n-      if (oldQueue.getRunnableAppSchedulables().contains(attempt)) {\n+      if (oldQueue.isRunnableApp(attempt)) {\n         verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n       }\n       \n       executeMove(app, attempt, oldQueue, targetQueue);\n       return targetQueue.getQueueName();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n    // To serialize with FairScheduler#allocate, synchronize on app attempt\n    synchronized (attempt) {\n      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n      if (targetQueue \u003d\u003d null) {\n        throw new YarnException(\"Target queue \" + queueName\n            + \" not found or is not a leaf queue.\");\n      }\n      if (targetQueue \u003d\u003d oldQueue) {\n        return oldQueue.getQueueName();\n      }\n      \n      if (oldQueue.isRunnableApp(attempt)) {\n        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n      }\n      \n      executeMove(app, attempt, oldQueue, targetQueue);\n      return targetQueue.getQueueName();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "08/08/14 7:17 AM",
      "commitNameOld": "14864e9c7c879c15b5fa2d1776614ec83152918f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n-    SchedulerApplication\u003cFSSchedulerApp\u003e app \u003d applications.get(appId);\n+    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n     }\n-    FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n+    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n     // To serialize with FairScheduler#allocate, synchronize on app attempt\n     synchronized (attempt) {\n       FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n       FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n       if (targetQueue \u003d\u003d null) {\n         throw new YarnException(\"Target queue \" + queueName\n             + \" not found or is not a leaf queue.\");\n       }\n       if (targetQueue \u003d\u003d oldQueue) {\n         return oldQueue.getQueueName();\n       }\n       \n-      if (oldQueue.getRunnableAppSchedulables().contains(\n-          attempt.getAppSchedulable())) {\n+      if (oldQueue.getRunnableAppSchedulables().contains(attempt)) {\n         verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n       }\n       \n       executeMove(app, attempt, oldQueue, targetQueue);\n       return targetQueue.getQueueName();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication\u003cFSAppAttempt\u003e app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSAppAttempt attempt \u003d (FSAppAttempt) app.getCurrentAppAttempt();\n    // To serialize with FairScheduler#allocate, synchronize on app attempt\n    synchronized (attempt) {\n      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n      if (targetQueue \u003d\u003d null) {\n        throw new YarnException(\"Target queue \" + queueName\n            + \" not found or is not a leaf queue.\");\n      }\n      if (targetQueue \u003d\u003d oldQueue) {\n        return oldQueue.getQueueName();\n      }\n      \n      if (oldQueue.getRunnableAppSchedulables().contains(attempt)) {\n        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n      }\n      \n      executeMove(app, attempt, oldQueue, targetQueue);\n      return targetQueue.getQueueName();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/03/14 4:40 PM",
      "commitNameOld": "7bd62b8da03642612fae8349e967b9c0aa290843",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 51.24,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n-    SchedulerApplication app \u003d applications.get(appId);\n+    SchedulerApplication\u003cFSSchedulerApp\u003e app \u003d applications.get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n     }\n     FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n     // To serialize with FairScheduler#allocate, synchronize on app attempt\n     synchronized (attempt) {\n       FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n       FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n       if (targetQueue \u003d\u003d null) {\n         throw new YarnException(\"Target queue \" + queueName\n             + \" not found or is not a leaf queue.\");\n       }\n       if (targetQueue \u003d\u003d oldQueue) {\n         return oldQueue.getQueueName();\n       }\n       \n       if (oldQueue.getRunnableAppSchedulables().contains(\n           attempt.getAppSchedulable())) {\n         verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n       }\n       \n       executeMove(app, attempt, oldQueue, targetQueue);\n       return targetQueue.getQueueName();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication\u003cFSSchedulerApp\u003e app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n    // To serialize with FairScheduler#allocate, synchronize on app attempt\n    synchronized (attempt) {\n      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n      if (targetQueue \u003d\u003d null) {\n        throw new YarnException(\"Target queue \" + queueName\n            + \" not found or is not a leaf queue.\");\n      }\n      if (targetQueue \u003d\u003d oldQueue) {\n        return oldQueue.getQueueName();\n      }\n      \n      if (oldQueue.getRunnableAppSchedulables().contains(\n          attempt.getAppSchedulable())) {\n        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n      }\n      \n      executeMove(app, attempt, oldQueue, targetQueue);\n      return targetQueue.getQueueName();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e60f5b6c40cbed867dc838d2e3a5a291e49b7047": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1721. When moving app between queues in Fair Scheduler, grab lock on FSSchedulerApp (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569443 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/02/14 9:51 AM",
      "commitName": "e60f5b6c40cbed867dc838d2e3a5a291e49b7047",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "05/02/14 10:09 AM",
      "commitNameOld": "e6eccf20defcaf84a9566482371c7be196779c0d",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 12.99,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public synchronized String moveApplication(ApplicationId appId,\n       String queueName) throws YarnException {\n     SchedulerApplication app \u003d applications.get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n     }\n     FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n-    \n-    FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n-    FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n-    if (targetQueue \u003d\u003d null) {\n-      throw new YarnException(\"Target queue \" + queueName\n-          + \" not found or is not a leaf queue.\");\n+    // To serialize with FairScheduler#allocate, synchronize on app attempt\n+    synchronized (attempt) {\n+      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n+      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n+      if (targetQueue \u003d\u003d null) {\n+        throw new YarnException(\"Target queue \" + queueName\n+            + \" not found or is not a leaf queue.\");\n+      }\n+      if (targetQueue \u003d\u003d oldQueue) {\n+        return oldQueue.getQueueName();\n+      }\n+      \n+      if (oldQueue.getRunnableAppSchedulables().contains(\n+          attempt.getAppSchedulable())) {\n+        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n+      }\n+      \n+      executeMove(app, attempt, oldQueue, targetQueue);\n+      return targetQueue.getQueueName();\n     }\n-    if (targetQueue \u003d\u003d oldQueue) {\n-      return oldQueue.getQueueName();\n-    }\n-    \n-    if (oldQueue.getRunnableAppSchedulables().contains(\n-        attempt.getAppSchedulable())) {\n-      verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n-    }\n-    \n-    executeMove(app, attempt, oldQueue, targetQueue);\n-    return targetQueue.getQueueName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n    // To serialize with FairScheduler#allocate, synchronize on app attempt\n    synchronized (attempt) {\n      FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n      FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n      if (targetQueue \u003d\u003d null) {\n        throw new YarnException(\"Target queue \" + queueName\n            + \" not found or is not a leaf queue.\");\n      }\n      if (targetQueue \u003d\u003d oldQueue) {\n        return oldQueue.getQueueName();\n      }\n      \n      if (oldQueue.getRunnableAppSchedulables().contains(\n          attempt.getAppSchedulable())) {\n        verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n      }\n      \n      executeMove(app, attempt, oldQueue, targetQueue);\n      return targetQueue.getQueueName();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e6eccf20defcaf84a9566482371c7be196779c0d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1499. Fair Scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 10:09 AM",
      "commitName": "e6eccf20defcaf84a9566482371c7be196779c0d",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,26 @@\n+  public synchronized String moveApplication(ApplicationId appId,\n+      String queueName) throws YarnException {\n+    SchedulerApplication app \u003d applications.get(appId);\n+    if (app \u003d\u003d null) {\n+      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n+    }\n+    FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n+    \n+    FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n+    FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n+    if (targetQueue \u003d\u003d null) {\n+      throw new YarnException(\"Target queue \" + queueName\n+          + \" not found or is not a leaf queue.\");\n+    }\n+    if (targetQueue \u003d\u003d oldQueue) {\n+      return oldQueue.getQueueName();\n+    }\n+    \n+    if (oldQueue.getRunnableAppSchedulables().contains(\n+        attempt.getAppSchedulable())) {\n+      verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n+    }\n+    \n+    executeMove(app, attempt, oldQueue, targetQueue);\n+    return targetQueue.getQueueName();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized String moveApplication(ApplicationId appId,\n      String queueName) throws YarnException {\n    SchedulerApplication app \u003d applications.get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnException(\"App to be moved \" + appId + \" not found.\");\n    }\n    FSSchedulerApp attempt \u003d (FSSchedulerApp) app.getCurrentAppAttempt();\n    \n    FSLeafQueue oldQueue \u003d (FSLeafQueue) app.getQueue();\n    FSLeafQueue targetQueue \u003d queueMgr.getLeafQueue(queueName, false);\n    if (targetQueue \u003d\u003d null) {\n      throw new YarnException(\"Target queue \" + queueName\n          + \" not found or is not a leaf queue.\");\n    }\n    if (targetQueue \u003d\u003d oldQueue) {\n      return oldQueue.getQueueName();\n    }\n    \n    if (oldQueue.getRunnableAppSchedulables().contains(\n        attempt.getAppSchedulable())) {\n      verifyMoveDoesNotViolateConstraints(attempt, oldQueue, targetQueue);\n    }\n    \n    executeMove(app, attempt, oldQueue, targetQueue);\n    return targetQueue.getQueueName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}