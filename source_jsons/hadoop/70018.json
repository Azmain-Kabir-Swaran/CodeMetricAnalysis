{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystemStore.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___path-Path(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
  "functionStartLine": 611,
  "functionEndLine": 678,
  "numCommitsSeen": 49,
  "timeTaken": 8194,
  "changeHistory": [
    "8f78aeb2500011e568929b585ed5b0987355f88d",
    "b214bbd2d92a0c02b71d352dba85f3b87317933c",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5",
    "e0260417ade5568ae37dcc3753aea0d1e0fd701b",
    "3988e75ca385aec31ca1fc49d6cffce1ea935825",
    "1f1655028eede24197705a594b6ef19e6737db35",
    "668817a6cefa6025ddfe082ed71d7d317d811381",
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
    "a8302e398c2ca4b0deff062c0e921053351b688e",
    "a383ac47cabe22e563725fae9de73e5e69e51f3e",
    "9c1e4e81399913f180131f4faa95604087c6d962",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "8f78aeb2500011e568929b585ed5b0987355f88d": "Ybodychange",
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": "Ybodychange",
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": "Ybodychange",
    "e0260417ade5568ae37dcc3753aea0d1e0fd701b": "Ybodychange",
    "3988e75ca385aec31ca1fc49d6cffce1ea935825": "Ybodychange",
    "1f1655028eede24197705a594b6ef19e6737db35": "Ybodychange",
    "668817a6cefa6025ddfe082ed71d7d317d811381": "Ybodychange",
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d": "Ybodychange",
    "a8302e398c2ca4b0deff062c0e921053351b688e": "Ybodychange",
    "a383ac47cabe22e563725fae9de73e5e69e51f3e": "Ybodychange",
    "9c1e4e81399913f180131f4faa95604087c6d962": "Ybodychange",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange,Yparameterchange)",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f78aeb2500011e568929b585ed5b0987355f88d": {
      "type": "Ybodychange",
      "commitMessage": "Hadoop-17015. ABFS: Handling Rename and Delete idempotency \n\nContributed by Sneha Vijayarajan.",
      "commitDate": "19/05/20 12:30 PM",
      "commitName": "8f78aeb2500011e568929b585ed5b0987355f88d",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "12/05/20 11:35 AM",
      "commitNameOld": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 7.04,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n       boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n       LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n               client.getFileSystem(),\n               path,\n               isNamespaceEnabled);\n \n       final AbfsRestOperation op;\n       if (path.isRoot()) {\n         if (isNamespaceEnabled) {\n           perfInfo.registerCallee(\"getAclStatus\");\n           op \u003d client.getAclStatus(getRelativePath(path));\n         } else {\n           perfInfo.registerCallee(\"getFilesystemProperties\");\n           op \u003d client.getFilesystemProperties();\n         }\n       } else {\n         perfInfo.registerCallee(\"getPathStatus\");\n         op \u003d client.getPathStatus(getRelativePath(path), false);\n       }\n \n       perfInfo.registerResult(op.getResult());\n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final AbfsHttpOperation result \u003d op.getResult();\n \n       final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n       final long contentLength;\n       final boolean resourceIsDir;\n \n       if (path.isRoot()) {\n         contentLength \u003d 0;\n         resourceIsDir \u003d true;\n       } else {\n         contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n         resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n       }\n \n       final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n               true,\n               userName);\n \n       final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n               false,\n               primaryUserGroup);\n \n       perfInfo.registerSuccess(true);\n \n       return new VersionedFileStatus(\n               transformedOwner,\n               transformedGroup,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               contentLength,\n               resourceIsDir,\n               1,\n               blockSize,\n-              parseLastModifiedTime(lastModified),\n+              DateTimeUtils.parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n      boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n      LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n              client.getFileSystem(),\n              path,\n              isNamespaceEnabled);\n\n      final AbfsRestOperation op;\n      if (path.isRoot()) {\n        if (isNamespaceEnabled) {\n          perfInfo.registerCallee(\"getAclStatus\");\n          op \u003d client.getAclStatus(getRelativePath(path));\n        } else {\n          perfInfo.registerCallee(\"getFilesystemProperties\");\n          op \u003d client.getFilesystemProperties();\n        }\n      } else {\n        perfInfo.registerCallee(\"getPathStatus\");\n        op \u003d client.getPathStatus(getRelativePath(path), false);\n      }\n\n      perfInfo.registerResult(op.getResult());\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n      final long contentLength;\n      final boolean resourceIsDir;\n\n      if (path.isRoot()) {\n        contentLength \u003d 0;\n        resourceIsDir \u003d true;\n      } else {\n        contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n        resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n      }\n\n      final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              true,\n              userName);\n\n      final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              false,\n              primaryUserGroup);\n\n      perfInfo.registerSuccess(true);\n\n      return new VersionedFileStatus(\n              transformedOwner,\n              transformedGroup,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              contentLength,\n              resourceIsDir,\n              1,\n              blockSize,\n              DateTimeUtils.parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "b214bbd2d92a0c02b71d352dba85f3b87317933c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16916: ABFS: Delegation SAS generator for integration with Ranger\n\nContributed by Thomas Marquardt.\n\nDETAILS:\n\nPreviously we had a SASGenerator class which generated Service SAS, but we need to add DelegationSASGenerator.\nI separated SASGenerator into a base class and two subclasses ServiceSASGenerator and DelegationSASGenreator.  The\ncode in ServiceSASGenerator is copied from SASGenerator but the DelegationSASGenrator code is new.  The\nDelegationSASGenerator code demonstrates how to use Delegation SAS with minimal permissions, as would be used\nby an authorization service such as Apache Ranger.  Adding this to the tests helps us lock in this behavior.\n\nAdded a MockDelegationSASTokenProvider for testing User Delegation SAS.\n\nFixed the ITestAzureBlobFileSystemCheckAccess tests to assume oauth client ID so that they are ignored when that\nis not configured.\n\nTo improve performance, AbfsInputStream/AbfsOutputStream re-use SAS tokens until the expiry is within 120 seconds.\nAfter this a new SAS will be requested.  The default period of 120 seconds can be changed using the configuration\nsetting \"fs.azure.sas.token.renew.period.for.streams\".\n\nThe SASTokenProvider operation names were updated to correspond better with the ADLS Gen2 REST API, since these\noperations must be provided tokens with appropriate SAS parameters to succeed.\n\nSupport for the version 2.0 AAD authentication endpoint was added to AzureADAuthenticator.\n\nThe getFileStatus method was mistakenly calling the ADLS Gen2 Get Properties API which requires read permission\nwhile the getFileStatus call only requires execute permission.  ADLS Gen2 Get Status API is supposed to be used\nfor this purpose, so the underlying AbfsClient.getPathStatus API was updated with a includeProperties\nparameter which is set to false for getFileStatus and true for getXAttr.\n\nAdded SASTokenProvider support for delete recursive.\n\nFixed bugs in AzureBlobFileSystem where public methods were not validating the Path by calling makeQualified.  This is\nnecessary to avoid passing null paths and to convert relative paths into absolute paths.\n\nCanonicalized the path used for root path internally so that root path can be used with SAS tokens, which requires\nthat the path in the URL and the path in the SAS token match.  Internally the code was using\n\"//\" instead of \"/\" for the root path, sometimes.  Also related to this, the AzureBlobFileSystemStore.getRelativePath\nAPI was updated so that we no longer remove and then add back a preceding forward / to paths.\n\nTo run ITestAzureBlobFileSystemDelegationSAS tests follow the instructions in testing_azure.md under the heading\n\"To run Delegation SAS test cases\".  You also need to set \"fs.azure.enable.check.access\" to true.\n\nTEST RESULTS:\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 41\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dfalse\nauth.type\u003dSharedKey\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 244\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dSharedKey\nsas.token.provider.type\u003dMockDelegationSASTokenProvider\nenable.check.access\u003dtrue\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 0, Skipped: 33\nTests run: 206, Failures: 0, Errors: 0, Skipped: 24\n\nnamespace.enabled\u003dtrue\nauth.type\u003dOAuth\n-------------------\n$mvn -T 1C -Dparallel-tests\u003dabfs -Dscale -DtestsThreadCount\u003d8 clean verify\nTests run: 63, Failures: 0, Errors: 0, Skipped: 0\nTests run: 432, Failures: 0, Errors: 1, Skipped: 74\nTests run: 206, Failures: 0, Errors: 0, Skipped: 140\n",
      "commitDate": "12/05/20 11:35 AM",
      "commitName": "b214bbd2d92a0c02b71d352dba85f3b87317933c",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "23/04/20 5:46 PM",
      "commitNameOld": "30ef8d0f1a1463931fe581a46c739dad4c8260e4",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 18.74,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n       boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n       LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n               client.getFileSystem(),\n               path,\n               isNamespaceEnabled);\n \n       final AbfsRestOperation op;\n       if (path.isRoot()) {\n         if (isNamespaceEnabled) {\n           perfInfo.registerCallee(\"getAclStatus\");\n-          op \u003d client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);\n+          op \u003d client.getAclStatus(getRelativePath(path));\n         } else {\n           perfInfo.registerCallee(\"getFilesystemProperties\");\n           op \u003d client.getFilesystemProperties();\n         }\n       } else {\n         perfInfo.registerCallee(\"getPathStatus\");\n-        op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n+        op \u003d client.getPathStatus(getRelativePath(path), false);\n       }\n \n       perfInfo.registerResult(op.getResult());\n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final AbfsHttpOperation result \u003d op.getResult();\n \n       final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n       final long contentLength;\n       final boolean resourceIsDir;\n \n       if (path.isRoot()) {\n         contentLength \u003d 0;\n         resourceIsDir \u003d true;\n       } else {\n         contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n         resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n       }\n \n       final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n               true,\n               userName);\n \n       final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n               false,\n               primaryUserGroup);\n \n       perfInfo.registerSuccess(true);\n \n       return new VersionedFileStatus(\n               transformedOwner,\n               transformedGroup,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               contentLength,\n               resourceIsDir,\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n      boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n      LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n              client.getFileSystem(),\n              path,\n              isNamespaceEnabled);\n\n      final AbfsRestOperation op;\n      if (path.isRoot()) {\n        if (isNamespaceEnabled) {\n          perfInfo.registerCallee(\"getAclStatus\");\n          op \u003d client.getAclStatus(getRelativePath(path));\n        } else {\n          perfInfo.registerCallee(\"getFilesystemProperties\");\n          op \u003d client.getFilesystemProperties();\n        }\n      } else {\n        perfInfo.registerCallee(\"getPathStatus\");\n        op \u003d client.getPathStatus(getRelativePath(path), false);\n      }\n\n      perfInfo.registerResult(op.getResult());\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n      final long contentLength;\n      final boolean resourceIsDir;\n\n      if (path.isRoot()) {\n        contentLength \u003d 0;\n        resourceIsDir \u003d true;\n      } else {\n        contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n        resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n      }\n\n      final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              true,\n              userName);\n\n      final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              false,\n              primaryUserGroup);\n\n      perfInfo.registerSuccess(true);\n\n      return new VersionedFileStatus(\n              transformedOwner,\n              transformedGroup,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              contentLength,\n              resourceIsDir,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "b033c681e4fc3ee1a38caa807e130aee481d99d5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16612. Track Azure Blob File System client-perceived latency\n\nContributed by Jeetesh Mangwani.\n\nThis add the ability to track the end-to-end performance of ADLS Gen 2 REST APIs by measuring latency in the Hadoop ABFS driver.\nThe latency information is sent back to the ADLS Gen 2 REST API endpoints in the subsequent requests.\n",
      "commitDate": "19/11/19 9:00 AM",
      "commitName": "b033c681e4fc3ee1a38caa807e130aee481d99d5",
      "commitAuthor": "Jeetesh Mangwani",
      "commitDateOld": "28/09/19 8:39 PM",
      "commitNameOld": "c0edc848a8e71b5e2a1586a589bbf2ac8685040d",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 51.56,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,68 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n-    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n-    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n-            client.getFileSystem(),\n-            path,\n-            isNamespaceEnabled);\n+    try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n+      boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n+      LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n+              client.getFileSystem(),\n+              path,\n+              isNamespaceEnabled);\n \n-    final AbfsRestOperation op;\n-    if (path.isRoot()) {\n-      op \u003d isNamespaceEnabled\n-              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n-              : client.getFilesystemProperties();\n-    } else {\n-      op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n-    }\n+      final AbfsRestOperation op;\n+      if (path.isRoot()) {\n+        if (isNamespaceEnabled) {\n+          perfInfo.registerCallee(\"getAclStatus\");\n+          op \u003d client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);\n+        } else {\n+          perfInfo.registerCallee(\"getFilesystemProperties\");\n+          op \u003d client.getFilesystemProperties();\n+        }\n+      } else {\n+        perfInfo.registerCallee(\"getPathStatus\");\n+        op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n+      }\n \n-    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-    final AbfsHttpOperation result \u003d op.getResult();\n+      perfInfo.registerResult(op.getResult());\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+      final AbfsHttpOperation result \u003d op.getResult();\n \n-    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n-    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n-    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-    final long contentLength;\n-    final boolean resourceIsDir;\n+      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n+      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+      final long contentLength;\n+      final boolean resourceIsDir;\n \n-    if (path.isRoot()) {\n-      contentLength \u003d 0;\n-      resourceIsDir \u003d true;\n-    } else {\n-      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n-      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n-    }\n+      if (path.isRoot()) {\n+        contentLength \u003d 0;\n+        resourceIsDir \u003d true;\n+      } else {\n+        contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n+        resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n+      }\n \n-    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n+      final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n               true,\n               userName);\n \n-    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n+      final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n               false,\n               primaryUserGroup);\n \n-    return new VersionedFileStatus(\n-            transformedOwner,\n-            transformedGroup,\n-            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                    : AbfsPermission.valueOf(permissions),\n-            hasAcl,\n-            contentLength,\n-            resourceIsDir,\n-            1,\n-            blockSize,\n-            parseLastModifiedTime(lastModified),\n-            path,\n-            eTag);\n+      perfInfo.registerSuccess(true);\n+\n+      return new VersionedFileStatus(\n+              transformedOwner,\n+              transformedGroup,\n+              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                      : AbfsPermission.valueOf(permissions),\n+              hasAcl,\n+              contentLength,\n+              resourceIsDir,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified),\n+              path,\n+              eTag);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    try (AbfsPerfInfo perfInfo \u003d startTracking(\"getFileStatus\", \"undetermined\")) {\n      boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n      LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n              client.getFileSystem(),\n              path,\n              isNamespaceEnabled);\n\n      final AbfsRestOperation op;\n      if (path.isRoot()) {\n        if (isNamespaceEnabled) {\n          perfInfo.registerCallee(\"getAclStatus\");\n          op \u003d client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH);\n        } else {\n          perfInfo.registerCallee(\"getFilesystemProperties\");\n          op \u003d client.getFilesystemProperties();\n        }\n      } else {\n        perfInfo.registerCallee(\"getPathStatus\");\n        op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n      }\n\n      perfInfo.registerResult(op.getResult());\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n      final long contentLength;\n      final boolean resourceIsDir;\n\n      if (path.isRoot()) {\n        contentLength \u003d 0;\n        resourceIsDir \u003d true;\n      } else {\n        contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n        resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n      }\n\n      final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              true,\n              userName);\n\n      final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              false,\n              primaryUserGroup);\n\n      perfInfo.registerSuccess(true);\n\n      return new VersionedFileStatus(\n              transformedOwner,\n              transformedGroup,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              contentLength,\n              resourceIsDir,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "e0260417ade5568ae37dcc3753aea0d1e0fd701b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16169. ABFS: Bug fix for getPathProperties.\n\nAuthor:    Da Zhou \u003cda.zhou@microsoft.com\u003e\n",
      "commitDate": "08/03/19 5:53 AM",
      "commitName": "e0260417ade5568ae37dcc3753aea0d1e0fd701b",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "28/02/19 6:22 AM",
      "commitNameOld": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 7.98,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n     final AbfsRestOperation op;\n     if (path.isRoot()) {\n       op \u003d isNamespaceEnabled\n               ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n               : client.getFilesystemProperties();\n     } else {\n-      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n+      op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n     }\n \n     final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n     final AbfsHttpOperation result \u003d op.getResult();\n \n     final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n     final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n     final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n     final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n     final long contentLength;\n     final boolean resourceIsDir;\n \n     if (path.isRoot()) {\n       contentLength \u003d 0;\n       resourceIsDir \u003d true;\n     } else {\n       contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n       resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n     }\n \n     final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n               true,\n               userName);\n \n     final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n               false,\n               primaryUserGroup);\n \n     return new VersionedFileStatus(\n             transformedOwner,\n             transformedGroup,\n             permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                     : AbfsPermission.valueOf(permissions),\n             hasAcl,\n             contentLength,\n             resourceIsDir,\n             1,\n             blockSize,\n             parseLastModifiedTime(lastModified),\n             path,\n             eTag);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    final AbfsRestOperation op;\n    if (path.isRoot()) {\n      op \u003d isNamespaceEnabled\n              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n              : client.getFilesystemProperties();\n    } else {\n      op \u003d client.getPathStatus(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n    }\n\n    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n    final AbfsHttpOperation result \u003d op.getResult();\n\n    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n    final long contentLength;\n    final boolean resourceIsDir;\n\n    if (path.isRoot()) {\n      contentLength \u003d 0;\n      resourceIsDir \u003d true;\n    } else {\n      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n    }\n\n    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              true,\n              userName);\n\n    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              false,\n              primaryUserGroup);\n\n    return new VersionedFileStatus(\n            transformedOwner,\n            transformedGroup,\n            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                    : AbfsPermission.valueOf(permissions),\n            hasAcl,\n            contentLength,\n            resourceIsDir,\n            1,\n            blockSize,\n            parseLastModifiedTime(lastModified),\n            path,\n            eTag);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "3988e75ca385aec31ca1fc49d6cffce1ea935825": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16136. ABFS: Should only transform username to short name\n\nContributed by Da Zhou.\n",
      "commitDate": "26/02/19 7:37 AM",
      "commitName": "3988e75ca385aec31ca1fc49d6cffce1ea935825",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "07/02/19 1:58 PM",
      "commitNameOld": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 18.74,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,58 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n     final AbfsRestOperation op;\n     if (path.isRoot()) {\n       op \u003d isNamespaceEnabled\n               ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n               : client.getFilesystemProperties();\n     } else {\n       op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n     }\n \n     final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n     final AbfsHttpOperation result \u003d op.getResult();\n \n     final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n     final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n     final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n     final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n     final long contentLength;\n     final boolean resourceIsDir;\n \n     if (path.isRoot()) {\n       contentLength \u003d 0;\n       resourceIsDir \u003d true;\n     } else {\n       contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n       resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n     }\n \n     final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n+              true,\n               userName);\n \n     final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n               result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n+              false,\n               primaryUserGroup);\n \n     return new VersionedFileStatus(\n             transformedOwner,\n             transformedGroup,\n             permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                     : AbfsPermission.valueOf(permissions),\n             hasAcl,\n             contentLength,\n             resourceIsDir,\n             1,\n             blockSize,\n             parseLastModifiedTime(lastModified),\n             path,\n             eTag);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    final AbfsRestOperation op;\n    if (path.isRoot()) {\n      op \u003d isNamespaceEnabled\n              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n              : client.getFilesystemProperties();\n    } else {\n      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n    }\n\n    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n    final AbfsHttpOperation result \u003d op.getResult();\n\n    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n    final long contentLength;\n    final boolean resourceIsDir;\n\n    if (path.isRoot()) {\n      contentLength \u003d 0;\n      resourceIsDir \u003d true;\n    } else {\n      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n    }\n\n    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              true,\n              userName);\n\n    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              false,\n              primaryUserGroup);\n\n    return new VersionedFileStatus(\n            transformedOwner,\n            transformedGroup,\n            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                    : AbfsPermission.valueOf(permissions),\n            hasAcl,\n            contentLength,\n            resourceIsDir,\n            1,\n            blockSize,\n            parseLastModifiedTime(lastModified),\n            path,\n            eTag);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "1f1655028eede24197705a594b6ef19e6737db35": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "07/02/19 1:58 PM",
      "commitName": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "07/02/19 1:57 PM",
      "commitNameOld": "668817a6cefa6025ddfe082ed71d7d317d811381",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,56 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n+    final AbfsRestOperation op;\n     if (path.isRoot()) {\n-      final AbfsRestOperation op \u003d isNamespaceEnabled\n-          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n-          : client.getFilesystemProperties();\n-\n-      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n-      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n-      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n-      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n-      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-\n-      return new VersionedFileStatus(\n-              isSuperUserOrEmpty(owner) ? userName : owner,\n-              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n-              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                      : AbfsPermission.valueOf(permissions),\n-              hasAcl,\n-              0,\n-              true,\n-              1,\n-              blockSize,\n-              parseLastModifiedTime(lastModified),\n-              path,\n-              eTag);\n+      op \u003d isNamespaceEnabled\n+              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n+              : client.getFilesystemProperties();\n     } else {\n-      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n-\n-      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-      final AbfsHttpOperation result \u003d op.getResult();\n-      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n-      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n-      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n-      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n-      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n-      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n-      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-\n-      return new VersionedFileStatus(\n-              isSuperUserOrEmpty(owner) ? userName : owner,\n-              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n-              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                      : AbfsPermission.valueOf(permissions),\n-              hasAcl,\n-              parseContentLength(contentLength),\n-              parseIsDirectory(resourceType),\n-              1,\n-              blockSize,\n-              parseLastModifiedTime(lastModified),\n-              path,\n-              eTag);\n+      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n     }\n+\n+    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+    final AbfsHttpOperation result \u003d op.getResult();\n+\n+    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n+    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n+    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+    final long contentLength;\n+    final boolean resourceIsDir;\n+\n+    if (path.isRoot()) {\n+      contentLength \u003d 0;\n+      resourceIsDir \u003d true;\n+    } else {\n+      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n+      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n+    }\n+\n+    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n+              userName);\n+\n+    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n+              primaryUserGroup);\n+\n+    return new VersionedFileStatus(\n+            transformedOwner,\n+            transformedGroup,\n+            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                    : AbfsPermission.valueOf(permissions),\n+            hasAcl,\n+            contentLength,\n+            resourceIsDir,\n+            1,\n+            blockSize,\n+            parseLastModifiedTime(lastModified),\n+            path,\n+            eTag);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    final AbfsRestOperation op;\n    if (path.isRoot()) {\n      op \u003d isNamespaceEnabled\n              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n              : client.getFilesystemProperties();\n    } else {\n      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n    }\n\n    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n    final AbfsHttpOperation result \u003d op.getResult();\n\n    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n    final long contentLength;\n    final boolean resourceIsDir;\n\n    if (path.isRoot()) {\n      contentLength \u003d 0;\n      resourceIsDir \u003d true;\n    } else {\n      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n    }\n\n    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              userName);\n\n    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              primaryUserGroup);\n\n    return new VersionedFileStatus(\n            transformedOwner,\n            transformedGroup,\n            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                    : AbfsPermission.valueOf(permissions),\n            hasAcl,\n            contentLength,\n            resourceIsDir,\n            1,\n            blockSize,\n            parseLastModifiedTime(lastModified),\n            path,\n            eTag);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "668817a6cefa6025ddfe082ed71d7d317d811381": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\"\n\n(accidentally mixed in two patches)\n\nThis reverts commit fa8cd1bf28f5b81849ba351a2d7225fbc580350d.\n",
      "commitDate": "07/02/19 1:57 PM",
      "commitName": "668817a6cefa6025ddfe082ed71d7d317d811381",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/02/19 11:23 AM",
      "commitNameOld": "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,62 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n-    final AbfsRestOperation op;\n     if (path.isRoot()) {\n-      op \u003d isNamespaceEnabled\n-              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n-              : client.getFilesystemProperties();\n+      final AbfsRestOperation op \u003d isNamespaceEnabled\n+          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n+          : client.getFilesystemProperties();\n+\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n+      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n+      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n+      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+\n+      return new VersionedFileStatus(\n+              isSuperUserOrEmpty(owner) ? userName : owner,\n+              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n+              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                      : AbfsPermission.valueOf(permissions),\n+              hasAcl,\n+              0,\n+              true,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified),\n+              path,\n+              eTag);\n     } else {\n-      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n+      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n+\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+      final AbfsHttpOperation result \u003d op.getResult();\n+      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n+      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n+      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n+      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n+      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n+      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+\n+      return new VersionedFileStatus(\n+              isSuperUserOrEmpty(owner) ? userName : owner,\n+              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n+              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                      : AbfsPermission.valueOf(permissions),\n+              hasAcl,\n+              parseContentLength(contentLength),\n+              parseIsDirectory(resourceType),\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified),\n+              path,\n+              eTag);\n     }\n-\n-    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-    final AbfsHttpOperation result \u003d op.getResult();\n-\n-    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n-    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n-    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-    final long contentLength;\n-    final boolean resourceIsDir;\n-\n-    if (path.isRoot()) {\n-      contentLength \u003d 0;\n-      resourceIsDir \u003d true;\n-    } else {\n-      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n-      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n-    }\n-\n-    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n-              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n-              userName);\n-\n-    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n-              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n-              primaryUserGroup);\n-\n-    return new VersionedFileStatus(\n-            transformedOwner,\n-            transformedGroup,\n-            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                    : AbfsPermission.valueOf(permissions),\n-            hasAcl,\n-            contentLength,\n-            resourceIsDir,\n-            1,\n-            blockSize,\n-            parseLastModifiedTime(lastModified),\n-            path,\n-            eTag);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    if (path.isRoot()) {\n      final AbfsRestOperation op \u003d isNamespaceEnabled\n          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n          : client.getFilesystemProperties();\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              isSuperUserOrEmpty(owner) ? userName : owner,\n              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              isSuperUserOrEmpty(owner) ? userName : owner,\n              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "05/02/19 11:23 AM",
      "commitName": "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "22/01/19 8:40 AM",
      "commitNameOld": "00ad9e23e88d1e1b1f887b6c9473a7a924a95a97",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 14.11,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,56 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n+    final AbfsRestOperation op;\n     if (path.isRoot()) {\n-      final AbfsRestOperation op \u003d isNamespaceEnabled\n-          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n-          : client.getFilesystemProperties();\n-\n-      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n-      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n-      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n-      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n-      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-\n-      return new VersionedFileStatus(\n-              isSuperUserOrEmpty(owner) ? userName : owner,\n-              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n-              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                      : AbfsPermission.valueOf(permissions),\n-              hasAcl,\n-              0,\n-              true,\n-              1,\n-              blockSize,\n-              parseLastModifiedTime(lastModified),\n-              path,\n-              eTag);\n+      op \u003d isNamespaceEnabled\n+              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n+              : client.getFilesystemProperties();\n     } else {\n-      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n-\n-      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-      final AbfsHttpOperation result \u003d op.getResult();\n-      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n-      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n-      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n-      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n-      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n-      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n-      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n-\n-      return new VersionedFileStatus(\n-              isSuperUserOrEmpty(owner) ? userName : owner,\n-              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n-              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n-                      : AbfsPermission.valueOf(permissions),\n-              hasAcl,\n-              parseContentLength(contentLength),\n-              parseIsDirectory(resourceType),\n-              1,\n-              blockSize,\n-              parseLastModifiedTime(lastModified),\n-              path,\n-              eTag);\n+      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n     }\n+\n+    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+    final AbfsHttpOperation result \u003d op.getResult();\n+\n+    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n+    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n+    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+    final long contentLength;\n+    final boolean resourceIsDir;\n+\n+    if (path.isRoot()) {\n+      contentLength \u003d 0;\n+      resourceIsDir \u003d true;\n+    } else {\n+      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n+      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n+    }\n+\n+    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n+              userName);\n+\n+    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n+              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n+              primaryUserGroup);\n+\n+    return new VersionedFileStatus(\n+            transformedOwner,\n+            transformedGroup,\n+            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                    : AbfsPermission.valueOf(permissions),\n+            hasAcl,\n+            contentLength,\n+            resourceIsDir,\n+            1,\n+            blockSize,\n+            parseLastModifiedTime(lastModified),\n+            path,\n+            eTag);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    final AbfsRestOperation op;\n    if (path.isRoot()) {\n      op \u003d isNamespaceEnabled\n              ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n              : client.getFilesystemProperties();\n    } else {\n      op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n    }\n\n    final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n    final AbfsHttpOperation result \u003d op.getResult();\n\n    final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n    final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n    final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n    final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n    final long contentLength;\n    final boolean resourceIsDir;\n\n    if (path.isRoot()) {\n      contentLength \u003d 0;\n      resourceIsDir \u003d true;\n    } else {\n      contentLength \u003d parseContentLength(result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH));\n      resourceIsDir \u003d parseIsDirectory(result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE));\n    }\n\n    final String transformedOwner \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER),\n              userName);\n\n    final String transformedGroup \u003d identityTransformer.transformIdentityForGetRequest(\n              result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP),\n              primaryUserGroup);\n\n    return new VersionedFileStatus(\n            transformedOwner,\n            transformedGroup,\n            permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                    : AbfsPermission.valueOf(permissions),\n            hasAcl,\n            contentLength,\n            resourceIsDir,\n            1,\n            blockSize,\n            parseLastModifiedTime(lastModified),\n            path,\n            eTag);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a8302e398c2ca4b0deff062c0e921053351b688e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15872. ABFS: Update to target 2018-11-09 REST version for ADLS Gen 2.\n\nContributed by Junhua Gu and Da Zhou.\n",
      "commitDate": "23/11/18 6:17 AM",
      "commitName": "a8302e398c2ca4b0deff062c0e921053351b688e",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "13/11/18 1:46 PM",
      "commitNameOld": "a13be203b7877ba56ef63aac4a2e65d4e1a4adbc",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n     if (path.isRoot()) {\n       final AbfsRestOperation op \u003d isNamespaceEnabled\n           ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n           : client.getFilesystemProperties();\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n       final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n       final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n \n       return new VersionedFileStatus(\n-              owner \u003d\u003d null ? userName : owner,\n-              group \u003d\u003d null ? primaryUserGroup : group,\n+              isSuperUserOrEmpty(owner) ? userName : owner,\n+              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               0,\n               true,\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     } else {\n-      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n+      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final AbfsHttpOperation result \u003d op.getResult();\n       final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n       final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n       final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n       final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n \n       return new VersionedFileStatus(\n-              owner \u003d\u003d null ? userName : owner,\n-              group \u003d\u003d null ? primaryUserGroup : group,\n+              isSuperUserOrEmpty(owner) ? userName : owner,\n+              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               parseContentLength(contentLength),\n               parseIsDirectory(resourceType),\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    if (path.isRoot()) {\n      final AbfsRestOperation op \u003d isNamespaceEnabled\n          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n          : client.getFilesystemProperties();\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              isSuperUserOrEmpty(owner) ? userName : owner,\n              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path), isNamespaceEnabled);\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              isSuperUserOrEmpty(owner) ? userName : owner,\n              isSuperUserOrEmpty(group) ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a383ac47cabe22e563725fae9de73e5e69e51f3e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15801. ABFS: Fixing skipUserGroupMetadata in AzureBlobFileSystemStore.\nContributed by Da Zhou\n",
      "commitDate": "02/10/18 3:42 AM",
      "commitName": "a383ac47cabe22e563725fae9de73e5e69e51f3e",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/09/18 4:20 AM",
      "commitNameOld": "df2166a6435b4b62011a363ea24dfcc9bc44181c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.97,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n     boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n     LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n             path,\n             isNamespaceEnabled);\n \n     if (path.isRoot()) {\n       final AbfsRestOperation op \u003d isNamespaceEnabled\n           ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n           : client.getFilesystemProperties();\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n       final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n       final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n \n       return new VersionedFileStatus(\n-              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n-              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n+              owner \u003d\u003d null ? userName : owner,\n+              group \u003d\u003d null ? primaryUserGroup : group,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               0,\n               true,\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final AbfsHttpOperation result \u003d op.getResult();\n       final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n       final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n       final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n       final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n       final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n \n       return new VersionedFileStatus(\n-              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n-              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n+              owner \u003d\u003d null ? userName : owner,\n+              group \u003d\u003d null ? primaryUserGroup : group,\n               permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                       : AbfsPermission.valueOf(permissions),\n               hasAcl,\n               parseContentLength(contentLength),\n               parseIsDirectory(resourceType),\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    if (path.isRoot()) {\n      final AbfsRestOperation op \u003d isNamespaceEnabled\n          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n          : client.getFilesystemProperties();\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              owner \u003d\u003d null ? userName : owner,\n              group \u003d\u003d null ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              owner \u003d\u003d null ? userName : owner,\n              group \u003d\u003d null ? primaryUserGroup : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "9c1e4e81399913f180131f4faa95604087c6d962": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15661. ABFS: Add support for ACL.\nContributed by Junhua Gu and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,62 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n-\n-    LOG.debug(\"getFileStatus filesystem: {} path: {}\",\n+    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n+    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n             client.getFileSystem(),\n-           path);\n+            path,\n+            isNamespaceEnabled);\n \n     if (path.isRoot()) {\n-      AbfsRestOperation op \u003d client.getFilesystemProperties();\n+      final AbfsRestOperation op \u003d isNamespaceEnabled\n+          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n+          : client.getFilesystemProperties();\n+\n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n+      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n+      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n+      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n+\n       return new VersionedFileStatus(\n-              userGroupInformation.getUserName(),\n-              userGroupInformation.getPrimaryGroupName(),\n+              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n+              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n+              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                      : AbfsPermission.valueOf(permissions),\n+              hasAcl,\n               0,\n               true,\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n-      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n-      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n-      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n-      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n+      final AbfsHttpOperation result \u003d op.getResult();\n+      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n+      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n+      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n+      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n+      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n+      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n \n       return new VersionedFileStatus(\n-              userGroupInformation.getUserName(),\n-              userGroupInformation.getPrimaryGroupName(),\n+              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n+              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n+              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n+                      : AbfsPermission.valueOf(permissions),\n+              hasAcl,\n               parseContentLength(contentLength),\n               parseIsDirectory(resourceType),\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n    boolean isNamespaceEnabled \u003d getIsNamespaceEnabled();\n    LOG.debug(\"getFileStatus filesystem: {} path: {} isNamespaceEnabled: {}\",\n            client.getFileSystem(),\n            path,\n            isNamespaceEnabled);\n\n    if (path.isRoot()) {\n      final AbfsRestOperation op \u003d isNamespaceEnabled\n          ? client.getAclStatus(AbfsHttpConstants.FORWARD_SLASH + AbfsHttpConstants.ROOT_PATH)\n          : client.getFilesystemProperties();\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String owner \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS);\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final AbfsHttpOperation result \u003d op.getResult();\n      final String eTag \u003d result.getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d result.getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d result.getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n      final String owner \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_OWNER);\n      final String group \u003d result.getResponseHeader(HttpHeaderConfigurations.X_MS_GROUP);\n      final String permissions \u003d result.getResponseHeader((HttpHeaderConfigurations.X_MS_PERMISSIONS));\n      final boolean hasAcl \u003d AbfsPermission.isExtendedAcl(permissions);\n\n      return new VersionedFileStatus(\n              owner \u003d\u003d null ? userGroupInformation.getUserName() : owner,\n              group \u003d\u003d null ? userGroupInformation.getPrimaryGroupName() : group,\n              permissions \u003d\u003d null ? new AbfsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL)\n                      : AbfsPermission.valueOf(permissions),\n              hasAcl,\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n \n     LOG.debug(\"getFileStatus filesystem: {} path: {}\",\n             client.getFileSystem(),\n            path);\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n               userGroupInformation.getUserName(),\n               userGroupInformation.getPrimaryGroupName(),\n               0,\n               true,\n               1,\n               blockSize,\n-              parseLastModifiedTime(lastModified).getMillis(),\n+              parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n               userGroupInformation.getUserName(),\n               userGroupInformation.getPrimaryGroupName(),\n               parseContentLength(contentLength),\n               parseIsDirectory(resourceType),\n               1,\n               blockSize,\n-              parseLastModifiedTime(lastModified).getMillis(),\n+              parseLastModifiedTime(lastModified),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    LOG.debug(\"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n           path);\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   public FileStatus getFileStatus(final Path path) throws IOException {\n \n-    this.LOG.debug(\n-            \"getFileStatus filesystem: {} path: {}\",\n+    LOG.debug(\"getFileStatus filesystem: {} path: {}\",\n             client.getFileSystem(),\n-            path.toString());\n+           path);\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n               userGroupInformation.getUserName(),\n               userGroupInformation.getPrimaryGroupName(),\n               0,\n               true,\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified).getMillis(),\n               path,\n               eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n       final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n               userGroupInformation.getUserName(),\n               userGroupInformation.getPrimaryGroupName(),\n               parseContentLength(contentLength),\n               parseIsDirectory(resourceType),\n               1,\n               blockSize,\n               parseLastModifiedTime(lastModified).getMillis(),\n               path,\n               eTag);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    LOG.debug(\"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n           path);\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,43 @@\n-  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n-    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n+  public FileStatus getFileStatus(final Path path) throws IOException {\n \n     this.LOG.debug(\n-        \"getFileStatus filesystem: {} path: {}\",\n-        client.getFileSystem(),\n-        path.toString());\n+            \"getFileStatus filesystem: {} path: {}\",\n+            client.getFileSystem(),\n+            path.toString());\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          0,\n-          true,\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              0,\n+              true,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          parseContentLength(contentLength),\n-          parseIsDirectory(resourceType),\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              parseContentLength(contentLength),\n+              parseIsDirectory(resourceType),\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    this.LOG.debug(\n            \"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n            path.toString());\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java",
            "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,43 @@\n-  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n-    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n+  public FileStatus getFileStatus(final Path path) throws IOException {\n \n     this.LOG.debug(\n-        \"getFileStatus filesystem: {} path: {}\",\n-        client.getFileSystem(),\n-        path.toString());\n+            \"getFileStatus filesystem: {} path: {}\",\n+            client.getFileSystem(),\n+            path.toString());\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          0,\n-          true,\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              0,\n+              true,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          parseContentLength(contentLength),\n-          parseIsDirectory(resourceType),\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              parseContentLength(contentLength),\n+              parseIsDirectory(resourceType),\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    this.LOG.debug(\n            \"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n            path.toString());\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[AzureBlobFileSystemException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,43 @@\n-  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n-    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n+  public FileStatus getFileStatus(final Path path) throws IOException {\n \n     this.LOG.debug(\n-        \"getFileStatus filesystem: {} path: {}\",\n-        client.getFileSystem(),\n-        path.toString());\n+            \"getFileStatus filesystem: {} path: {}\",\n+            client.getFileSystem(),\n+            path.toString());\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          0,\n-          true,\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              0,\n+              true,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          parseContentLength(contentLength),\n-          parseIsDirectory(resourceType),\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              parseContentLength(contentLength),\n+              parseIsDirectory(resourceType),\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    this.LOG.debug(\n            \"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n            path.toString());\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
          "commitDate": "17/09/18 12:54 PM",
          "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "17/09/18 12:54 PM",
          "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,43 @@\n-  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n-    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n+  public FileStatus getFileStatus(final Path path) throws IOException {\n \n     this.LOG.debug(\n-        \"getFileStatus filesystem: {} path: {}\",\n-        client.getFileSystem(),\n-        path.toString());\n+            \"getFileStatus filesystem: {} path: {}\",\n+            client.getFileSystem(),\n+            path.toString());\n \n     if (path.isRoot()) {\n       AbfsRestOperation op \u003d client.getFilesystemProperties();\n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          0,\n-          true,\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              0,\n+              true,\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     } else {\n       AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n \n-      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n       final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n       final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n       final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n       final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n \n       return new VersionedFileStatus(\n-          azureBlobFileSystem.getOwnerUser(),\n-          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n-          parseContentLength(contentLength),\n-          parseIsDirectory(resourceType),\n-          1,\n-          blockSize,\n-          parseLastModifiedTime(lastModified).getMillis(),\n-          path,\n-          eTag);\n+              userGroupInformation.getUserName(),\n+              userGroupInformation.getPrimaryGroupName(),\n+              parseContentLength(contentLength),\n+              parseIsDirectory(resourceType),\n+              1,\n+              blockSize,\n+              parseLastModifiedTime(lastModified).getMillis(),\n+              path,\n+              eTag);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public FileStatus getFileStatus(final Path path) throws IOException {\n\n    this.LOG.debug(\n            \"getFileStatus filesystem: {} path: {}\",\n            client.getFileSystem(),\n            path.toString());\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              0,\n              true,\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d abfsConfiguration.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n              userGroupInformation.getUserName(),\n              userGroupInformation.getPrimaryGroupName(),\n              parseContentLength(contentLength),\n              parseIsDirectory(resourceType),\n              1,\n              blockSize,\n              parseLastModifiedTime(lastModified).getMillis(),\n              path,\n              eTag);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[azureBlobFileSystem-AzureBlobFileSystem(modifiers-final), path-Path(modifiers-final)]",
            "newValue": "[path-Path(modifiers-final)]"
          }
        }
      ]
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,44 @@\n+  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n+    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n+\n+    this.LOG.debug(\n+        \"getFileStatus filesystem: {} path: {}\",\n+        client.getFileSystem(),\n+        path.toString());\n+\n+    if (path.isRoot()) {\n+      AbfsRestOperation op \u003d client.getFilesystemProperties();\n+      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      return new VersionedFileStatus(\n+          azureBlobFileSystem.getOwnerUser(),\n+          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n+          0,\n+          true,\n+          1,\n+          blockSize,\n+          parseLastModifiedTime(lastModified).getMillis(),\n+          path,\n+          eTag);\n+    } else {\n+      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n+\n+      final long blockSize \u003d configurationService.getAzureBlockSize();\n+      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n+      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n+      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n+      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n+\n+      return new VersionedFileStatus(\n+          azureBlobFileSystem.getOwnerUser(),\n+          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n+          parseContentLength(contentLength),\n+          parseIsDirectory(resourceType),\n+          1,\n+          blockSize,\n+          parseLastModifiedTime(lastModified).getMillis(),\n+          path,\n+          eTag);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(final AzureBlobFileSystem azureBlobFileSystem, final Path path) throws AzureBlobFileSystemException {\n    final AbfsClient client \u003d this.getOrCreateClient(azureBlobFileSystem);\n\n    this.LOG.debug(\n        \"getFileStatus filesystem: {} path: {}\",\n        client.getFileSystem(),\n        path.toString());\n\n    if (path.isRoot()) {\n      AbfsRestOperation op \u003d client.getFilesystemProperties();\n      final long blockSize \u003d configurationService.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      return new VersionedFileStatus(\n          azureBlobFileSystem.getOwnerUser(),\n          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n          0,\n          true,\n          1,\n          blockSize,\n          parseLastModifiedTime(lastModified).getMillis(),\n          path,\n          eTag);\n    } else {\n      AbfsRestOperation op \u003d client.getPathProperties(AbfsHttpConstants.FORWARD_SLASH + getRelativePath(path));\n\n      final long blockSize \u003d configurationService.getAzureBlockSize();\n      final String eTag \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.ETAG);\n      final String lastModified \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.LAST_MODIFIED);\n      final String contentLength \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.CONTENT_LENGTH);\n      final String resourceType \u003d op.getResult().getResponseHeader(HttpHeaderConfigurations.X_MS_RESOURCE_TYPE);\n\n      return new VersionedFileStatus(\n          azureBlobFileSystem.getOwnerUser(),\n          azureBlobFileSystem.getOwnerUserPrimaryGroup(),\n          parseContentLength(contentLength),\n          parseIsDirectory(resourceType),\n          1,\n          blockSize,\n          parseLastModifiedTime(lastModified).getMillis(),\n          path,\n          eTag);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java"
    }
  }
}