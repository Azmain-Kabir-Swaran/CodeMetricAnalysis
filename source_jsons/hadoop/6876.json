{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeDirectory.java",
  "functionName": "computeQuotaUsage",
  "functionId": "computeQuotaUsage___bsps-BlockStoragePolicySuite__blockStoragePolicyId-byte__useCache-boolean__lastSnapshotId-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
  "functionStartLine": 626,
  "functionEndLine": 656,
  "numCommitsSeen": 538,
  "timeTaken": 5697,
  "changeHistory": [
    "b2c85db86c9a62b0a03ee87547265077f664970a",
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
    "0fa5cad0b27780c27a284c23101b1099d4886506"
  ],
  "changeHistoryShort": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": "Ymultichange(Yparameterchange,Ybodychange)",
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f": "Ymultichange(Yparameterchange,Ybodychange)",
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": "Ybodychange",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ybodychange",
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": "Ybodychange",
    "0fa5cad0b27780c27a284c23101b1099d4886506": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "b2c85db86c9a62b0a03ee87547265077f664970a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
      "commitDate": "13/05/15 9:50 PM",
      "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n-      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n-      int lastSnapshotId) {\n+      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n \n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n-        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n-            lastSnapshotId);\n+        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(\n+            blockStoragePolicyId);\n+        counts.add(child.computeQuotaUsage(bsps, childPolicyId, useCache,\n+            lastSnapshotId));\n       }\n       counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.AddCurrentSpaceUsage(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n       return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n           useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(\n            blockStoragePolicyId);\n        counts.add(child.computeQuotaUsage(bsps, childPolicyId, useCache,\n            lastSnapshotId));\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.AddCurrentSpaceUsage(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n          useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7728. Avoid updating quota usage while loading edits. Contributed by Jing Zhao.\n",
          "commitDate": "13/05/15 9:50 PM",
          "commitName": "b2c85db86c9a62b0a03ee87547265077f664970a",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "09/05/15 10:51 PM",
          "commitNameOld": "4536399d47f6c061e149e2504600804a0f1e093d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.96,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n   public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n-      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n-      int lastSnapshotId) {\n+      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n \n+    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n-        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n-            lastSnapshotId);\n+        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(\n+            blockStoragePolicyId);\n+        counts.add(child.computeQuotaUsage(bsps, childPolicyId, useCache,\n+            lastSnapshotId));\n       }\n       counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.AddCurrentSpaceUsage(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n       return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n           useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, boolean useCache, int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(\n            blockStoragePolicyId);\n        counts.add(child.computeQuotaUsage(bsps, childPolicyId, useCache,\n            lastSnapshotId));\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.AddCurrentSpaceUsage(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n          useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "72f6bd4893dcf10d6dad24753f9be99505a87a1f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
      "commitDate": "02/04/15 9:20 PM",
      "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
          "commitDate": "02/04/15 9:20 PM",
          "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/03/15 10:24 AM",
          "commitNameOld": "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,30 @@\n-  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n+      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n-    \n+\n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n+        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n+        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n+            lastSnapshotId);\n       }\n       counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.AddCurrentSpaceUsage(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n-      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n+      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n+          useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n\n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n            lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.AddCurrentSpaceUsage(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n          useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[bsps-BlockStoragePolicySuite, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, blockStoragePolicyId-byte, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7811. Avoid recursive call getStoragePolicyID in INodeFile#computeQuotaUsage. Contributed by Xiaoyu Yao and Jing Zhao.\n",
          "commitDate": "02/04/15 9:20 PM",
          "commitName": "72f6bd4893dcf10d6dad24753f9be99505a87a1f",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/03/15 10:24 AM",
          "commitNameOld": "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 70,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,30 @@\n-  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n+  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n+      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n-    \n+\n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n+        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n+        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n+            lastSnapshotId);\n       }\n       counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.AddCurrentSpaceUsage(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n-      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n+      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n+          useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps,\n      byte blockStoragePolicyId, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n\n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        final byte childPolicyId \u003d child.getStoragePolicyIDForQuota(blockStoragePolicyId);\n        child.computeQuotaUsage(bsps, childPolicyId, counts, useCache,\n            lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.AddCurrentSpaceUsage(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, blockStoragePolicyId, counts,\n          useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2231cebcddc80f0b753c4a7cb45ee4040846951": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7775. Use consistent naming for NN-internal quota related types and functions. (Contributed bu Xiaoyu Yao)\n",
      "commitDate": "13/02/15 9:01 PM",
      "commitName": "f2231cebcddc80f0b753c4a7cb45ee4040846951",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "11/02/15 10:41 AM",
      "commitNameOld": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n     \n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n         child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n       }\n       counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n-      return q.addNamespaceDiskspace(counts);\n+      return q.AddCurrentSpaceUsage(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n       return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.AddCurrentSpaceUsage(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n+  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n     \n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n+        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n       }\n-      counts.add(Quota.NAMESPACE, 1);\n+      counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.addNamespaceDiskspace(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n-      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n+      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.addNamespaceDiskspace(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[counts-Quota.Counts, useCache-boolean, lastSnapshotId-int]",
            "newValue": "[bsps-BlockStoragePolicySuite, counts-QuotaCounts, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n+  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n     \n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n+        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n       }\n-      counts.add(Quota.NAMESPACE, 1);\n+      counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.addNamespaceDiskspace(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n-      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n+      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.addNamespaceDiskspace(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "Quota.Counts",
            "newValue": "QuotaCounts"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
          "commitDate": "11/02/15 10:41 AM",
          "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "02/02/15 4:32 PM",
          "commitNameOld": "8cb473124c1cf1c6f68ead7bde06558ebf7ce47e",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 8.76,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n+  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n     \n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n     if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n       ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n-        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n+        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n       }\n-      counts.add(Quota.NAMESPACE, 1);\n+      counts.addNameSpace(1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.addNamespaceDiskspace(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n-      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n+      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public QuotaCounts computeQuotaUsage(BlockStoragePolicySuite bsps, QuotaCounts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n      }\n      counts.addNameSpace(1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.addNamespaceDiskspace(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(bsps, counts, useCache, lastSnapshotId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n       int lastSnapshotId) {\n     final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n     \n     // we are computing the quota usage for a specific snapshot here, i.e., the\n     // computation only includes files/directories that exist at the time of the\n     // given snapshot\n-    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.INVALID_ID\n+    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n         \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n-      Snapshot lastSnapshot \u003d sf.getDiffs().getSnapshotById(lastSnapshotId);\n-      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshot);\n+      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n       for (INode child : childrenList) {\n         child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n       }\n       counts.add(Quota.NAMESPACE, 1);\n       return counts;\n     }\n     \n     // compute the quota usage in the scope of the current directory tree\n     final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n     if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n       return q.addNamespaceDiskspace(counts);\n     } else {\n       useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n       return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.CURRENT_STATE_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshotId);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n      }\n      counts.add(Quota.NAMESPACE, 1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.addNamespaceDiskspace(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "12/12/13 10:26 AM",
      "commitNameOld": "5fd7230671bb3d90081d4138c364c3f65b35cdbc",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,27 @@\n   public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n       int lastSnapshotId) {\n-    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n-    if (q !\u003d null) {\n-      if (useCache \u0026\u0026 isQuotaSet()) {\n-        q.addNamespaceDiskspace(counts);\n-      } else {\n-        computeDirectoryQuotaUsage(counts, false, lastSnapshotId);\n+    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n+    \n+    // we are computing the quota usage for a specific snapshot here, i.e., the\n+    // computation only includes files/directories that exist at the time of the\n+    // given snapshot\n+    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.INVALID_ID\n+        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n+      Snapshot lastSnapshot \u003d sf.getDiffs().getSnapshotById(lastSnapshotId);\n+      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshot);\n+      for (INode child : childrenList) {\n+        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n       }\n+      counts.add(Quota.NAMESPACE, 1);\n       return counts;\n+    }\n+    \n+    // compute the quota usage in the scope of the current directory tree\n+    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n+    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n+      return q.addNamespaceDiskspace(counts);\n     } else {\n+      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n       return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithSnapshotFeature sf \u003d getDirectoryWithSnapshotFeature();\n    \n    // we are computing the quota usage for a specific snapshot here, i.e., the\n    // computation only includes files/directories that exist at the time of the\n    // given snapshot\n    if (sf !\u003d null \u0026\u0026 lastSnapshotId !\u003d Snapshot.INVALID_ID\n        \u0026\u0026 !(useCache \u0026\u0026 isQuotaSet())) {\n      Snapshot lastSnapshot \u003d sf.getDiffs().getSnapshotById(lastSnapshotId);\n      ReadOnlyList\u003cINode\u003e childrenList \u003d getChildrenList(lastSnapshot);\n      for (INode child : childrenList) {\n        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n      }\n      counts.add(Quota.NAMESPACE, 1);\n      return counts;\n    }\n    \n    // compute the quota usage in the scope of the current directory tree\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (useCache \u0026\u0026 q !\u003d null \u0026\u0026 q.isQuotaSet()) { // use the cached quota\n      return q.addNamespaceDiskspace(counts);\n    } else {\n      useCache \u003d q !\u003d null \u0026\u0026 !q.isQuotaSet() ? false : useCache;\n      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5286. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithQuota with DirectoryWithQuotaFeature.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/13 10:33 AM",
      "commitName": "82ff2d3f2e569879500d851f4d67dfa2d02b5c9b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/11/13 5:39 PM",
      "commitNameOld": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.7,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,14 @@\n   public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n       int lastSnapshotId) {\n-    if (children !\u003d null) {\n-      for (INode child : children) {\n-        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n+    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n+    if (q !\u003d null) {\n+      if (useCache \u0026\u0026 isQuotaSet()) {\n+        q.addNamespaceDiskspace(counts);\n+      } else {\n+        computeDirectoryQuotaUsage(counts, false, lastSnapshotId);\n       }\n+      return counts;\n+    } else {\n+      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n     }\n-    return computeQuotaUsage4CurrentDirectory(counts);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n      int lastSnapshotId) {\n    final DirectoryWithQuotaFeature q \u003d getDirectoryWithQuotaFeature();\n    if (q !\u003d null) {\n      if (useCache \u0026\u0026 isQuotaSet()) {\n        q.addNamespaceDiskspace(counts);\n      } else {\n        computeDirectoryQuotaUsage(counts, false, lastSnapshotId);\n      }\n      return counts;\n    } else {\n      return computeDirectoryQuotaUsage(counts, useCache, lastSnapshotId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
      "extendedDetails": {}
    },
    "0fa5cad0b27780c27a284c23101b1099d4886506": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/13 1:31 PM",
      "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache) {\n+  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n+      int lastSnapshotId) {\n     if (children !\u003d null) {\n       for (INode child : children) {\n-        child.computeQuotaUsage(counts, useCache);\n+        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n       }\n     }\n-\n-    return computeQuotaUsage4CurrentDirectory(counts);    \n+    return computeQuotaUsage4CurrentDirectory(counts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n      int lastSnapshotId) {\n    if (children !\u003d null) {\n      for (INode child : children) {\n        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n      }\n    }\n    return computeQuotaUsage4CurrentDirectory(counts);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {
            "oldValue": "[counts-Quota.Counts, useCache-boolean]",
            "newValue": "[counts-Quota.Counts, useCache-boolean, lastSnapshotId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4686. Update quota computation for rename and INodeReference.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471647 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/04/13 1:31 PM",
          "commitName": "0fa5cad0b27780c27a284c23101b1099d4886506",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "23/04/13 7:11 PM",
          "commitNameOld": "3a812e9f3ae66cfa525faceb5af9085a4cc37232",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.76,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,9 @@\n-  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache) {\n+  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n+      int lastSnapshotId) {\n     if (children !\u003d null) {\n       for (INode child : children) {\n-        child.computeQuotaUsage(counts, useCache);\n+        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n       }\n     }\n-\n-    return computeQuotaUsage4CurrentDirectory(counts);    \n+    return computeQuotaUsage4CurrentDirectory(counts);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Quota.Counts computeQuotaUsage(Quota.Counts counts, boolean useCache,\n      int lastSnapshotId) {\n    if (children !\u003d null) {\n      for (INode child : children) {\n        child.computeQuotaUsage(counts, useCache, lastSnapshotId);\n      }\n    }\n    return computeQuotaUsage4CurrentDirectory(counts);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeDirectory.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}