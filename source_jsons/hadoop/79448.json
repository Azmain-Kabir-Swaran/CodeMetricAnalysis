{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DF.java",
  "functionName": "parseOutput",
  "functionId": "parseOutput",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
  "functionStartLine": 158,
  "functionEndLine": 197,
  "numCommitsSeen": 8,
  "timeTaken": 784,
  "changeHistory": [
    "cc15fff2631948343ada0ff8177b40388a96e32c",
    "9397260411009a5688ef0600a8b96b963536ebdb"
  ],
  "changeHistoryShort": {
    "cc15fff2631948343ada0ff8177b40388a96e32c": "Ybodychange",
    "9397260411009a5688ef0600a8b96b963536ebdb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc15fff2631948343ada0ff8177b40388a96e32c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9337. org.apache.hadoop.fs.DF.getMount() does not work on Mac OS. Contributed by Ivan A. Veselovsky.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 5:30 PM",
      "commitName": "cc15fff2631948343ada0ff8177b40388a96e32c",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "25/02/13 5:37 PM",
      "commitNameOld": "9397260411009a5688ef0600a8b96b963536ebdb",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,40 @@\n   protected void parseOutput() throws IOException {\n     if (output.size() \u003c 2) {\n       StringBuffer sb \u003d new StringBuffer(\"Fewer lines of output than expected\");\n       if (output.size() \u003e 0) {\n         sb.append(\": \" + output.get(0));\n       }\n       throw new IOException(sb.toString());\n     }\n     \n     String line \u003d output.get(1);\n     StringTokenizer tokens \u003d\n       new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n     \n     try {\n       this.filesystem \u003d tokens.nextToken();\n     } catch (NoSuchElementException e) {\n       throw new IOException(\"Unexpected empty line\");\n     }\n     if (!tokens.hasMoreTokens()) {            // for long filesystem name\n       if (output.size() \u003e 2) {\n         line \u003d output.get(2);\n       } else {\n         throw new IOException(\"Expecting additional output after line: \"\n             + line);\n       }\n       tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n     }\n \n     try {\n-      switch(getOSType()) {\n-        case OS_TYPE_AIX:\n-          Long.parseLong(tokens.nextToken()); // capacity\n-          Long.parseLong(tokens.nextToken()); // available\n-          Integer.parseInt(tokens.nextToken()); // pct used\n-          tokens.nextToken();\n-          tokens.nextToken();\n-          this.mount \u003d tokens.nextToken();\n-          break;\n-\n-        case OS_TYPE_WIN:\n-        case OS_TYPE_SOLARIS:\n-        case OS_TYPE_MAC:\n-        case OS_TYPE_UNIX:\n-        default:\n-          Long.parseLong(tokens.nextToken()); // capacity\n-          Long.parseLong(tokens.nextToken()); // used\n-          Long.parseLong(tokens.nextToken()); // available\n-          Integer.parseInt(tokens.nextToken()); // pct used\n-          this.mount \u003d tokens.nextToken();\n-          break;\n-     }\n+      Long.parseLong(tokens.nextToken()); // capacity\n+      Long.parseLong(tokens.nextToken()); // used\n+      Long.parseLong(tokens.nextToken()); // available\n+      Integer.parseInt(tokens.nextToken()); // pct used\n+      this.mount \u003d tokens.nextToken();\n     } catch (NoSuchElementException e) {\n       throw new IOException(\"Could not parse line: \" + line);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Could not parse line: \" + line);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseOutput() throws IOException {\n    if (output.size() \u003c 2) {\n      StringBuffer sb \u003d new StringBuffer(\"Fewer lines of output than expected\");\n      if (output.size() \u003e 0) {\n        sb.append(\": \" + output.get(0));\n      }\n      throw new IOException(sb.toString());\n    }\n    \n    String line \u003d output.get(1);\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    try {\n      this.filesystem \u003d tokens.nextToken();\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Unexpected empty line\");\n    }\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      if (output.size() \u003e 2) {\n        line \u003d output.get(2);\n      } else {\n        throw new IOException(\"Expecting additional output after line: \"\n            + line);\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    try {\n      Long.parseLong(tokens.nextToken()); // capacity\n      Long.parseLong(tokens.nextToken()); // used\n      Long.parseLong(tokens.nextToken()); // available\n      Integer.parseInt(tokens.nextToken()); // pct used\n      this.mount \u003d tokens.nextToken();\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Could not parse line: \" + line);\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Could not parse line: \" + line);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java",
      "extendedDetails": {}
    },
    "9397260411009a5688ef0600a8b96b963536ebdb": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7487. DF should throw a more reasonable exception when mount cannot be determined. Contributed by Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1449992 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 5:37 PM",
      "commitName": "9397260411009a5688ef0600a8b96b963536ebdb",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,57 @@\n+  protected void parseOutput() throws IOException {\n+    if (output.size() \u003c 2) {\n+      StringBuffer sb \u003d new StringBuffer(\"Fewer lines of output than expected\");\n+      if (output.size() \u003e 0) {\n+        sb.append(\": \" + output.get(0));\n+      }\n+      throw new IOException(sb.toString());\n+    }\n+    \n+    String line \u003d output.get(1);\n+    StringTokenizer tokens \u003d\n+      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n+    \n+    try {\n+      this.filesystem \u003d tokens.nextToken();\n+    } catch (NoSuchElementException e) {\n+      throw new IOException(\"Unexpected empty line\");\n+    }\n+    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n+      if (output.size() \u003e 2) {\n+        line \u003d output.get(2);\n+      } else {\n+        throw new IOException(\"Expecting additional output after line: \"\n+            + line);\n+      }\n+      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n+    }\n+\n+    try {\n+      switch(getOSType()) {\n+        case OS_TYPE_AIX:\n+          Long.parseLong(tokens.nextToken()); // capacity\n+          Long.parseLong(tokens.nextToken()); // available\n+          Integer.parseInt(tokens.nextToken()); // pct used\n+          tokens.nextToken();\n+          tokens.nextToken();\n+          this.mount \u003d tokens.nextToken();\n+          break;\n+\n+        case OS_TYPE_WIN:\n+        case OS_TYPE_SOLARIS:\n+        case OS_TYPE_MAC:\n+        case OS_TYPE_UNIX:\n+        default:\n+          Long.parseLong(tokens.nextToken()); // capacity\n+          Long.parseLong(tokens.nextToken()); // used\n+          Long.parseLong(tokens.nextToken()); // available\n+          Integer.parseInt(tokens.nextToken()); // pct used\n+          this.mount \u003d tokens.nextToken();\n+          break;\n+     }\n+    } catch (NoSuchElementException e) {\n+      throw new IOException(\"Could not parse line: \" + line);\n+    } catch (NumberFormatException e) {\n+      throw new IOException(\"Could not parse line: \" + line);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseOutput() throws IOException {\n    if (output.size() \u003c 2) {\n      StringBuffer sb \u003d new StringBuffer(\"Fewer lines of output than expected\");\n      if (output.size() \u003e 0) {\n        sb.append(\": \" + output.get(0));\n      }\n      throw new IOException(sb.toString());\n    }\n    \n    String line \u003d output.get(1);\n    StringTokenizer tokens \u003d\n      new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    \n    try {\n      this.filesystem \u003d tokens.nextToken();\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Unexpected empty line\");\n    }\n    if (!tokens.hasMoreTokens()) {            // for long filesystem name\n      if (output.size() \u003e 2) {\n        line \u003d output.get(2);\n      } else {\n        throw new IOException(\"Expecting additional output after line: \"\n            + line);\n      }\n      tokens \u003d new StringTokenizer(line, \" \\t\\n\\r\\f%\");\n    }\n\n    try {\n      switch(getOSType()) {\n        case OS_TYPE_AIX:\n          Long.parseLong(tokens.nextToken()); // capacity\n          Long.parseLong(tokens.nextToken()); // available\n          Integer.parseInt(tokens.nextToken()); // pct used\n          tokens.nextToken();\n          tokens.nextToken();\n          this.mount \u003d tokens.nextToken();\n          break;\n\n        case OS_TYPE_WIN:\n        case OS_TYPE_SOLARIS:\n        case OS_TYPE_MAC:\n        case OS_TYPE_UNIX:\n        default:\n          Long.parseLong(tokens.nextToken()); // capacity\n          Long.parseLong(tokens.nextToken()); // used\n          Long.parseLong(tokens.nextToken()); // available\n          Integer.parseInt(tokens.nextToken()); // pct used\n          this.mount \u003d tokens.nextToken();\n          break;\n     }\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Could not parse line: \" + line);\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Could not parse line: \" + line);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/DF.java"
    }
  }
}