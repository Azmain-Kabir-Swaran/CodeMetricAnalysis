{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConnectionPool.java",
  "functionName": "newProtoClient",
  "functionId": "newProtoClient___proto-Class__T____classes-ProtoImpl__proxy-Object",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
  "functionStartLine": 408,
  "functionEndLine": 423,
  "numCommitsSeen": 21,
  "timeTaken": 5390,
  "changeHistory": [
    "719d57bf46765121550831189591fd420d2b078d",
    "2be64eb201134502a92f7239bef8aa780771ca0b",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "719d57bf46765121550831189591fd420d2b078d": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "2be64eb201134502a92f7239bef8aa780771ca0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "719d57bf46765121550831189591fd420d2b078d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "719d57bf46765121550831189591fd420d2b078d",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "newConnection",
            "newValue": "newProtoClient"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, nnAddress-String, ugi-UserGroupInformation, proto-Class\u003c?\u003e]",
            "newValue": "[proto-Class\u003cT\u003e, classes-ProtoImpl, proxy-Object]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "ConnectionContext",
            "newValue": "T"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "[protected, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14545. RBF: Router should support GetUserMappingsProtocol. Contributed by Ayush Saxena.\n",
          "commitDate": "24/06/19 9:33 AM",
          "commitName": "719d57bf46765121550831189591fd420d2b078d",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/06/19 9:33 AM",
          "commitNameOld": "94a8dec168842cc17787526ee9a662f427a5dcea",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 62,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n-          throws IOException {\n-    ConnectionContext ret;\n-    if (proto \u003d\u003d ClientProtocol.class) {\n-      ret \u003d newClientConnection(conf, nnAddress, ugi);\n-    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n-      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n-    } else {\n-      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n-          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n-      LOG.error(msg);\n-      throw new IllegalStateException(msg);\n+  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n+      Object proxy) {\n+    try {\n+      Constructor\u003c?\u003e constructor \u003d\n+          classes.protoClientPb.getConstructor(classes.protoPb);\n+      Object o \u003d constructor.newInstance(new Object[] {proxy});\n+      if (proto.isAssignableFrom(o.getClass())) {\n+        @SuppressWarnings(\"unchecked\")\n+        T client \u003d (T) o;\n+        return client;\n+      }\n+    } catch (Exception e) {\n+      LOG.error(e.getMessage());\n     }\n-    return ret;\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static \u003cT\u003e T newProtoClient(Class\u003cT\u003e proto, ProtoImpl classes,\n      Object proxy) {\n    try {\n      Constructor\u003c?\u003e constructor \u003d\n          classes.protoClientPb.getConstructor(classes.protoPb);\n      Object o \u003d constructor.newInstance(new Object[] {proxy});\n      if (proto.isAssignableFrom(o.getClass())) {\n        @SuppressWarnings(\"unchecked\")\n        T client \u003d (T) o;\n        return client;\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage());\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {}
        }
      ]
    },
    "2be64eb201134502a92f7239bef8aa780771ca0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
      "commitDate": "03/04/18 12:08 AM",
      "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 14.08,
          "commitsBetweenForRepo": 215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,16 @@\n   protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi)\n+      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n           throws IOException {\n-    RPC.setProtocolEngine(\n-        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n-\n-    final RetryPolicy defaultPolicy \u003d RetryUtils.getDefaultRetryPolicy(\n-        conf,\n-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n-        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);\n-\n-    SocketFactory factory \u003d SocketFactory.getDefault();\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      SaslRpcServer.init(conf);\n+    ConnectionContext ret;\n+    if (proto \u003d\u003d ClientProtocol.class) {\n+      ret \u003d newClientConnection(conf, nnAddress, ugi);\n+    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n+      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n+    } else {\n+      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n+          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n+      LOG.error(msg);\n+      throw new IllegalStateException(msg);\n     }\n-    InetSocketAddress socket \u003d NetUtils.createSocketAddr(nnAddress);\n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,\n-        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();\n-    ClientProtocol client \u003d new ClientNamenodeProtocolTranslatorPB(proxy);\n-    Text dtService \u003d SecurityUtil.buildTokenService(socket);\n-\n-    ProxyAndInfo\u003cClientProtocol\u003e clientProxy \u003d\n-        new ProxyAndInfo\u003cClientProtocol\u003e(client, dtService, socket);\n-    ConnectionContext connection \u003d new ConnectionContext(clientProxy);\n-    return connection;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static ConnectionContext newConnection(Configuration conf,\n      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n          throws IOException {\n    ConnectionContext ret;\n    if (proto \u003d\u003d ClientProtocol.class) {\n      ret \u003d newClientConnection(conf, nnAddress, ugi);\n    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n    } else {\n      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n      LOG.error(msg);\n      throw new IllegalStateException(msg);\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, nnAddress-String, ugi-UserGroupInformation]",
            "newValue": "[conf-Configuration, nnAddress-String, ugi-UserGroupInformation, proto-Class\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
          "commitDate": "03/04/18 12:08 AM",
          "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 14.08,
          "commitsBetweenForRepo": 215,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,16 @@\n   protected static ConnectionContext newConnection(Configuration conf,\n-      String nnAddress, UserGroupInformation ugi)\n+      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n           throws IOException {\n-    RPC.setProtocolEngine(\n-        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n-\n-    final RetryPolicy defaultPolicy \u003d RetryUtils.getDefaultRetryPolicy(\n-        conf,\n-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n-        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n-        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n-        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n-        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);\n-\n-    SocketFactory factory \u003d SocketFactory.getDefault();\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      SaslRpcServer.init(conf);\n+    ConnectionContext ret;\n+    if (proto \u003d\u003d ClientProtocol.class) {\n+      ret \u003d newClientConnection(conf, nnAddress, ugi);\n+    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n+      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n+    } else {\n+      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n+          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n+      LOG.error(msg);\n+      throw new IllegalStateException(msg);\n     }\n-    InetSocketAddress socket \u003d NetUtils.createSocketAddr(nnAddress);\n-    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n-    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n-        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,\n-        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();\n-    ClientProtocol client \u003d new ClientNamenodeProtocolTranslatorPB(proxy);\n-    Text dtService \u003d SecurityUtil.buildTokenService(socket);\n-\n-    ProxyAndInfo\u003cClientProtocol\u003e clientProxy \u003d\n-        new ProxyAndInfo\u003cClientProtocol\u003e(client, dtService, socket);\n-    ConnectionContext connection \u003d new ConnectionContext(clientProxy);\n-    return connection;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static ConnectionContext newConnection(Configuration conf,\n      String nnAddress, UserGroupInformation ugi, Class\u003c?\u003e proto)\n          throws IOException {\n    ConnectionContext ret;\n    if (proto \u003d\u003d ClientProtocol.class) {\n      ret \u003d newClientConnection(conf, nnAddress, ugi);\n    } else if (proto \u003d\u003d NamenodeProtocol.class) {\n      ret \u003d newNamenodeConnection(conf, nnAddress, ugi);\n    } else {\n      String msg \u003d \"Unsupported protocol for connection to NameNode: \" +\n          ((proto !\u003d null) ? proto.getClass().getName() : \"null\");\n      LOG.error(msg);\n      throw new IllegalStateException(msg);\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static ConnectionContext newConnection(Configuration conf,\n      String nnAddress, UserGroupInformation ugi)\n          throws IOException {\n    RPC.setProtocolEngine(\n        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d RetryUtils.getDefaultRetryPolicy(\n        conf,\n        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);\n\n    SocketFactory factory \u003d SocketFactory.getDefault();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      SaslRpcServer.init(conf);\n    }\n    InetSocketAddress socket \u003d NetUtils.createSocketAddr(nnAddress);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,\n        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();\n    ClientProtocol client \u003d new ClientNamenodeProtocolTranslatorPB(proxy);\n    Text dtService \u003d SecurityUtil.buildTokenService(socket);\n\n    ProxyAndInfo\u003cClientProtocol\u003e clientProxy \u003d\n        new ProxyAndInfo\u003cClientProtocol\u003e(client, dtService, socket);\n    ConnectionContext connection \u003d new ConnectionContext(clientProxy);\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java"
      }
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,31 @@\n+  protected static ConnectionContext newConnection(Configuration conf,\n+      String nnAddress, UserGroupInformation ugi)\n+          throws IOException {\n+    RPC.setProtocolEngine(\n+        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n+\n+    final RetryPolicy defaultPolicy \u003d RetryUtils.getDefaultRetryPolicy(\n+        conf,\n+        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n+        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n+        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n+        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n+        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);\n+\n+    SocketFactory factory \u003d SocketFactory.getDefault();\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      SaslRpcServer.init(conf);\n+    }\n+    InetSocketAddress socket \u003d NetUtils.createSocketAddr(nnAddress);\n+    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n+    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n+        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,\n+        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();\n+    ClientProtocol client \u003d new ClientNamenodeProtocolTranslatorPB(proxy);\n+    Text dtService \u003d SecurityUtil.buildTokenService(socket);\n+\n+    ProxyAndInfo\u003cClientProtocol\u003e clientProxy \u003d\n+        new ProxyAndInfo\u003cClientProtocol\u003e(client, dtService, socket);\n+    ConnectionContext connection \u003d new ConnectionContext(clientProxy);\n+    return connection;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static ConnectionContext newConnection(Configuration conf,\n      String nnAddress, UserGroupInformation ugi)\n          throws IOException {\n    RPC.setProtocolEngine(\n        conf, ClientNamenodeProtocolPB.class, ProtobufRpcEngine.class);\n\n    final RetryPolicy defaultPolicy \u003d RetryUtils.getDefaultRetryPolicy(\n        conf,\n        HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,\n        HdfsClientConfigKeys.Retry.POLICY_ENABLED_DEFAULT,\n        HdfsClientConfigKeys.Retry.POLICY_SPEC_KEY,\n        HdfsClientConfigKeys.Retry.POLICY_SPEC_DEFAULT,\n        HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);\n\n    SocketFactory factory \u003d SocketFactory.getDefault();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      SaslRpcServer.init(conf);\n    }\n    InetSocketAddress socket \u003d NetUtils.createSocketAddr(nnAddress);\n    final long version \u003d RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);\n    ClientNamenodeProtocolPB proxy \u003d RPC.getProtocolProxy(\n        ClientNamenodeProtocolPB.class, version, socket, ugi, conf,\n        factory, RPC.getRpcTimeout(conf), defaultPolicy, null).getProxy();\n    ClientProtocol client \u003d new ClientNamenodeProtocolTranslatorPB(proxy);\n    Text dtService \u003d SecurityUtil.buildTokenService(socket);\n\n    ProxyAndInfo\u003cClientProtocol\u003e clientProxy \u003d\n        new ProxyAndInfo\u003cClientProtocol\u003e(client, dtService, socket);\n    ConnectionContext connection \u003d new ConnectionContext(clientProxy);\n    return connection;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ConnectionPool.java"
    }
  }
}