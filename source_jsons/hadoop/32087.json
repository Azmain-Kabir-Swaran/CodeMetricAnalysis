{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeHealthScriptRunner.java",
  "functionName": "newInstance",
  "functionId": "newInstance___scriptName-String__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/health/NodeHealthScriptRunner.java",
  "functionStartLine": 70,
  "functionEndLine": 117,
  "numCommitsSeen": 1,
  "timeTaken": 1439,
  "changeHistory": [
    "631dbbc6f2f7c1c9c61f036e96a5ece6608ed7fa"
  ],
  "changeHistoryShort": {
    "631dbbc6f2f7c1c9c61f036e96a5ece6608ed7fa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "631dbbc6f2f7c1c9c61f036e96a5ece6608ed7fa": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9923. Introduce HealthReporter interface to support multiple health checker files. Contributed by Adam Antal\n",
      "commitDate": "15/12/19 8:28 AM",
      "commitName": "631dbbc6f2f7c1c9c61f036e96a5ece6608ed7fa",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,48 @@\n+  public static NodeHealthScriptRunner newInstance(String scriptName,\n+      Configuration conf) {\n+    String nodeHealthScriptsConfig \u003d String.format(\n+        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE, scriptName);\n+    String nodeHealthScript \u003d conf.get(nodeHealthScriptsConfig);\n+    if (!shouldRun(scriptName, nodeHealthScript)) {\n+      return null;\n+    }\n+\n+    // Determine check interval ms\n+    String checkIntervalMsConfig \u003d String.format(\n+        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE,\n+        scriptName);\n+    long checkIntervalMs \u003d conf.getLong(checkIntervalMsConfig, 0L);\n+    if (checkIntervalMs \u003d\u003d 0L) {\n+      checkIntervalMs \u003d conf.getLong(\n+          YarnConfiguration.NM_HEALTH_CHECK_INTERVAL_MS,\n+          YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS);\n+    }\n+    if (checkIntervalMs \u003c 0) {\n+      throw new IllegalArgumentException(\"The node health-checker\u0027s \" +\n+          \"interval-ms can not be set to a negative number.\");\n+    }\n+\n+    // Determine time out\n+    String scriptTimeoutConfig \u003d String.format(\n+        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE,\n+        scriptName);\n+    long scriptTimeout \u003d conf.getLong(scriptTimeoutConfig, 0L);\n+    if (scriptTimeout \u003d\u003d 0L) {\n+      scriptTimeout \u003d conf.getLong(\n+          YarnConfiguration.NM_HEALTH_CHECK_TIMEOUT_MS,\n+          YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_TIMEOUT_MS);\n+    }\n+    if (scriptTimeout \u003c\u003d 0) {\n+      throw new IllegalArgumentException(\"The node health-checker\u0027s \" +\n+          \"timeout can only be set to a positive number.\");\n+    }\n+\n+    // Determine script arguments\n+    String scriptArgsConfig \u003d String.format(\n+        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_OPTS_TEMPLATE,\n+        scriptName);\n+    String[] scriptArgs \u003d conf.getStrings(scriptArgsConfig, new String[]{});\n+\n+    return new NodeHealthScriptRunner(nodeHealthScript,\n+        checkIntervalMs, scriptTimeout, scriptArgs);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static NodeHealthScriptRunner newInstance(String scriptName,\n      Configuration conf) {\n    String nodeHealthScriptsConfig \u003d String.format(\n        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_PATH_TEMPLATE, scriptName);\n    String nodeHealthScript \u003d conf.get(nodeHealthScriptsConfig);\n    if (!shouldRun(scriptName, nodeHealthScript)) {\n      return null;\n    }\n\n    // Determine check interval ms\n    String checkIntervalMsConfig \u003d String.format(\n        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_INTERVAL_MS_TEMPLATE,\n        scriptName);\n    long checkIntervalMs \u003d conf.getLong(checkIntervalMsConfig, 0L);\n    if (checkIntervalMs \u003d\u003d 0L) {\n      checkIntervalMs \u003d conf.getLong(\n          YarnConfiguration.NM_HEALTH_CHECK_INTERVAL_MS,\n          YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS);\n    }\n    if (checkIntervalMs \u003c 0) {\n      throw new IllegalArgumentException(\"The node health-checker\u0027s \" +\n          \"interval-ms can not be set to a negative number.\");\n    }\n\n    // Determine time out\n    String scriptTimeoutConfig \u003d String.format(\n        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS_TEMPLATE,\n        scriptName);\n    long scriptTimeout \u003d conf.getLong(scriptTimeoutConfig, 0L);\n    if (scriptTimeout \u003d\u003d 0L) {\n      scriptTimeout \u003d conf.getLong(\n          YarnConfiguration.NM_HEALTH_CHECK_TIMEOUT_MS,\n          YarnConfiguration.DEFAULT_NM_HEALTH_CHECK_TIMEOUT_MS);\n    }\n    if (scriptTimeout \u003c\u003d 0) {\n      throw new IllegalArgumentException(\"The node health-checker\u0027s \" +\n          \"timeout can only be set to a positive number.\");\n    }\n\n    // Determine script arguments\n    String scriptArgsConfig \u003d String.format(\n        YarnConfiguration.NM_HEALTH_CHECK_SCRIPT_OPTS_TEMPLATE,\n        scriptName);\n    String[] scriptArgs \u003d conf.getStrings(scriptArgsConfig, new String[]{});\n\n    return new NodeHealthScriptRunner(nodeHealthScript,\n        checkIntervalMs, scriptTimeout, scriptArgs);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/health/NodeHealthScriptRunner.java"
    }
  }
}