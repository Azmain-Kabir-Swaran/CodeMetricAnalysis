{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "refreshMaximumAllocation",
  "functionId": "refreshMaximumAllocation___newMaxAlloc-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 887,
  "functionEndLine": 889,
  "numCommitsSeen": 115,
  "timeTaken": 2806,
  "changeHistory": [
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628"
  ],
  "changeHistoryShort": {
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/02/16 6:06 PM",
      "commitNameOld": "d16b17b4d299b4d58f879a2a15708bacd0938685",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 32.8,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,3 @@\n   protected void refreshMaximumAllocation(Resource newMaxAlloc) {\n-    maxAllocWriteLock.lock();\n-    try {\n-      configuredMaximumAllocation \u003d Resources.clone(newMaxAlloc);\n-      int maxMemory \u003d newMaxAlloc.getMemory();\n-      if (maxNodeMemory !\u003d -1) {\n-        maxMemory \u003d Math.min(maxMemory, maxNodeMemory);\n-      }\n-      int maxVcores \u003d newMaxAlloc.getVirtualCores();\n-      if (maxNodeVCores !\u003d -1) {\n-        maxVcores \u003d Math.min(maxVcores, maxNodeVCores);\n-      }\n-      maximumAllocation \u003d Resources.createResource(maxMemory, maxVcores);\n-    } finally {\n-      maxAllocWriteLock.unlock();\n-    }\n+    nodeTracker.setConfiguredMaxAllocation(newMaxAlloc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void refreshMaximumAllocation(Resource newMaxAlloc) {\n    nodeTracker.setConfiguredMaxAllocation(newMaxAlloc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1582. Capacity Scheduler: add a maximum-allocation-mb setting per queue. Contributed by Thomas Graves\n",
      "commitDate": "05/02/15 11:28 AM",
      "commitName": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,17 @@\n+  protected void refreshMaximumAllocation(Resource newMaxAlloc) {\n+    maxAllocWriteLock.lock();\n+    try {\n+      configuredMaximumAllocation \u003d Resources.clone(newMaxAlloc);\n+      int maxMemory \u003d newMaxAlloc.getMemory();\n+      if (maxNodeMemory !\u003d -1) {\n+        maxMemory \u003d Math.min(maxMemory, maxNodeMemory);\n+      }\n+      int maxVcores \u003d newMaxAlloc.getVirtualCores();\n+      if (maxNodeVCores !\u003d -1) {\n+        maxVcores \u003d Math.min(maxVcores, maxNodeVCores);\n+      }\n+      maximumAllocation \u003d Resources.createResource(maxMemory, maxVcores);\n+    } finally {\n+      maxAllocWriteLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void refreshMaximumAllocation(Resource newMaxAlloc) {\n    maxAllocWriteLock.lock();\n    try {\n      configuredMaximumAllocation \u003d Resources.clone(newMaxAlloc);\n      int maxMemory \u003d newMaxAlloc.getMemory();\n      if (maxNodeMemory !\u003d -1) {\n        maxMemory \u003d Math.min(maxMemory, maxNodeMemory);\n      }\n      int maxVcores \u003d newMaxAlloc.getVirtualCores();\n      if (maxNodeVCores !\u003d -1) {\n        maxVcores \u003d Math.min(maxVcores, maxNodeVCores);\n      }\n      maximumAllocation \u003d Resources.createResource(maxMemory, maxVcores);\n    } finally {\n      maxAllocWriteLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}