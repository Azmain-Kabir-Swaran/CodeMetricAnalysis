{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystem.java",
  "functionName": "listStatus",
  "functionId": "listStatus___path-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
  "functionStartLine": 406,
  "functionEndLine": 474,
  "numCommitsSeen": 22,
  "timeTaken": 2198,
  "changeHistory": [
    "5ff0cf86a940fd83f1425794921cc075b19f1108",
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
    "01be4503c3b053d2cff0b179774dabfd267877db",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": "Ybodychange",
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": "Ybodychange",
    "01be4503c3b053d2cff0b179774dabfd267877db": "Ybodychange",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
      "commitDate": "22/11/18 9:56 PM",
      "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/11/18 10:00 PM",
      "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   public FileStatus[] listStatus(Path path) throws IOException {\n     String key \u003d pathToKey(path);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"List status for path: \" + path);\n     }\n \n     final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     if (fileStatus.isDirectory()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n       }\n \n       ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n       while (true) {\n         for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n           String objKey \u003d objectSummary.getKey();\n           if (objKey.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + objKey);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(objectSummary.getKey())\n                 .makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: fi: \" + keyPath);\n             }\n-            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n+            result.add(new OSSFileStatus(objectSummary.getSize(), false, 1,\n                 getDefaultBlockSize(keyPath),\n-                objectSummary.getLastModified().getTime(), keyPath));\n+                objectSummary.getLastModified().getTime(), keyPath, username));\n           }\n         }\n \n         for (String prefix : objects.getCommonPrefixes()) {\n           if (prefix.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + prefix);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: rd: \" + keyPath);\n             }\n             result.add(getFileStatus(keyPath));\n           }\n         }\n \n         if (objects.isTruncated()) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"listStatus: list truncated - getting next batch\");\n           }\n           String nextMarker \u003d objects.getNextMarker();\n           objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n         } else {\n           break;\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Adding: rd (not a dir): \" + path);\n       }\n       result.add(fileStatus);\n     }\n \n     return result.toArray(new FileStatus[result.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n      while (true) {\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          String objKey \u003d objectSummary.getKey();\n          if (objKey.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + objKey);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(objectSummary.getKey())\n                .makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new OSSFileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath, username));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          if (prefix.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + prefix);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(getFileStatus(keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          String nextMarker \u003d objects.getNextMarker();\n          objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15917. AliyunOSS: fix incorrect ReadOps and WriteOps in statistics. Contributed by Jinhu Wu.\n",
      "commitDate": "13/11/18 8:58 PM",
      "commitName": "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 138.97,
      "commitsBetweenForRepo": 1172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,69 @@\n   public FileStatus[] listStatus(Path path) throws IOException {\n     String key \u003d pathToKey(path);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"List status for path: \" + path);\n     }\n \n     final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     if (fileStatus.isDirectory()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n       }\n \n       ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n       while (true) {\n-        statistics.incrementReadOps(1);\n         for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n           String objKey \u003d objectSummary.getKey();\n           if (objKey.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + objKey);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(objectSummary.getKey())\n                 .makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: fi: \" + keyPath);\n             }\n             result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                 getDefaultBlockSize(keyPath),\n                 objectSummary.getLastModified().getTime(), keyPath));\n           }\n         }\n \n         for (String prefix : objects.getCommonPrefixes()) {\n           if (prefix.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + prefix);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: rd: \" + keyPath);\n             }\n             result.add(getFileStatus(keyPath));\n           }\n         }\n \n         if (objects.isTruncated()) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"listStatus: list truncated - getting next batch\");\n           }\n           String nextMarker \u003d objects.getNextMarker();\n           objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n-          statistics.incrementReadOps(1);\n         } else {\n           break;\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Adding: rd (not a dir): \" + path);\n       }\n       result.add(fileStatus);\n     }\n \n     return result.toArray(new FileStatus[result.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n      while (true) {\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          String objKey \u003d objectSummary.getKey();\n          if (objKey.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + objKey);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(objectSummary.getKey())\n                .makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          if (prefix.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + prefix);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(getFileStatus(keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          String nextMarker \u003d objects.getNextMarker();\n          objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "01be4503c3b053d2cff0b179774dabfd267877db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14069. AliyunOSS: listStatus returns wrong file info. Contributed by Fei Hui\n",
      "commitDate": "12/02/17 9:18 PM",
      "commitName": "01be4503c3b053d2cff0b179774dabfd267877db",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "09/02/17 2:00 AM",
      "commitNameOld": "a8a594b4c89319bef294534755f0e4ed6198ec88",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public FileStatus[] listStatus(Path path) throws IOException {\n     String key \u003d pathToKey(path);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"List status for path: \" + path);\n     }\n \n     final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     if (fileStatus.isDirectory()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n       }\n \n       ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n       while (true) {\n         statistics.incrementReadOps(1);\n         for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n           String objKey \u003d objectSummary.getKey();\n           if (objKey.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + objKey);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(objectSummary.getKey())\n                 .makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: fi: \" + keyPath);\n             }\n             result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                 getDefaultBlockSize(keyPath),\n                 objectSummary.getLastModified().getTime(), keyPath));\n           }\n         }\n \n         for (String prefix : objects.getCommonPrefixes()) {\n           if (prefix.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + prefix);\n             }\n             continue;\n           } else {\n             Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: rd: \" + keyPath);\n             }\n-            result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n+            result.add(getFileStatus(keyPath));\n           }\n         }\n \n         if (objects.isTruncated()) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"listStatus: list truncated - getting next batch\");\n           }\n           String nextMarker \u003d objects.getNextMarker();\n           objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n           statistics.incrementReadOps(1);\n         } else {\n           break;\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Adding: rd (not a dir): \" + path);\n       }\n       result.add(fileStatus);\n     }\n \n     return result.toArray(new FileStatus[result.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n      while (true) {\n        statistics.incrementReadOps(1);\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          String objKey \u003d objectSummary.getKey();\n          if (objKey.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + objKey);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(objectSummary.getKey())\n                .makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          if (prefix.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + prefix);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(getFileStatus(keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          String nextMarker \u003d objects.getNextMarker();\n          objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n          statistics.incrementReadOps(1);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
      "commitDate": "20/09/16 12:12 AM",
      "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "19/09/16 8:39 PM",
      "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public FileStatus[] listStatus(Path path) throws IOException {\n     String key \u003d pathToKey(path);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"List status for path: \" + path);\n     }\n \n     final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     if (fileStatus.isDirectory()) {\n-      if (!key.endsWith(\"/\")) {\n-        key \u003d key + \"/\";\n-      }\n-\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n       }\n \n-      ObjectListing objects \u003d store.listObjects(key, maxKeys, \"/\", null);\n+      ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n       while (true) {\n         statistics.incrementReadOps(1);\n         for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n-          Path keyPath \u003d keyToPath(objectSummary.getKey())\n-              .makeQualified(uri, workingDir);\n-          if (keyPath.equals(path)) {\n+          String objKey \u003d objectSummary.getKey();\n+          if (objKey.equals(key + \"/\")) {\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Ignoring: \" + keyPath);\n+              LOG.debug(\"Ignoring: \" + objKey);\n             }\n             continue;\n           } else {\n+            Path keyPath \u003d keyToPath(objectSummary.getKey())\n+                .makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: fi: \" + keyPath);\n             }\n             result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                 getDefaultBlockSize(keyPath),\n                 objectSummary.getLastModified().getTime(), keyPath));\n           }\n         }\n \n         for (String prefix : objects.getCommonPrefixes()) {\n-          Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n-          if (keyPath.equals(path)) {\n+          if (prefix.equals(key + \"/\")) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Ignoring: \" + prefix);\n+            }\n             continue;\n           } else {\n+            Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: rd: \" + keyPath);\n             }\n             result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n           }\n         }\n \n         if (objects.isTruncated()) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"listStatus: list truncated - getting next batch\");\n           }\n-          objects \u003d store.listObjects(key, maxKeys, \"/\",\n-              objects.getNextMarker());\n+          String nextMarker \u003d objects.getNextMarker();\n+          objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n           statistics.incrementReadOps(1);\n         } else {\n           break;\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Adding: rd (not a dir): \" + path);\n       }\n       result.add(fileStatus);\n     }\n \n     return result.toArray(new FileStatus[result.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      ObjectListing objects \u003d store.listObjects(key, maxKeys, null, false);\n      while (true) {\n        statistics.incrementReadOps(1);\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          String objKey \u003d objectSummary.getKey();\n          if (objKey.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + objKey);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(objectSummary.getKey())\n                .makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          if (prefix.equals(key + \"/\")) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + prefix);\n            }\n            continue;\n          } else {\n            Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          String nextMarker \u003d objects.getNextMarker();\n          objects \u003d store.listObjects(key, maxKeys, nextMarker, false);\n          statistics.incrementReadOps(1);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,71 @@\n   public FileStatus[] listStatus(Path path) throws IOException {\n     String key \u003d pathToKey(path);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"List status for path: \" + path);\n     }\n \n     final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n     final FileStatus fileStatus \u003d getFileStatus(path);\n \n     if (fileStatus.isDirectory()) {\n       if (!key.endsWith(\"/\")) {\n         key \u003d key + \"/\";\n       }\n \n-      ListObjectsRequest listObjectsRequest \u003d\n-          new ListObjectsRequest(bucketName);\n-      listObjectsRequest.setPrefix(key);\n-      listObjectsRequest.setDelimiter(\"/\");\n-      listObjectsRequest.setMaxKeys(maxKeys);\n-\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n       }\n \n+      ObjectListing objects \u003d store.listObjects(key, maxKeys, \"/\", null);\n       while (true) {\n-        ObjectListing objects \u003d ossClient.listObjects(listObjectsRequest);\n         statistics.incrementReadOps(1);\n         for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n           Path keyPath \u003d keyToPath(objectSummary.getKey())\n               .makeQualified(uri, workingDir);\n           if (keyPath.equals(path)) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Ignoring: \" + keyPath);\n             }\n             continue;\n           } else {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: fi: \" + keyPath);\n             }\n             result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                 getDefaultBlockSize(keyPath),\n                 objectSummary.getLastModified().getTime(), keyPath));\n           }\n         }\n \n         for (String prefix : objects.getCommonPrefixes()) {\n           Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n           if (keyPath.equals(path)) {\n             continue;\n           } else {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding: rd: \" + keyPath);\n             }\n             result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n           }\n         }\n \n         if (objects.isTruncated()) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"listStatus: list truncated - getting next batch\");\n           }\n-          listObjectsRequest.setMarker(objects.getNextMarker());\n+          objects \u003d store.listObjects(key, maxKeys, \"/\",\n+              objects.getNextMarker());\n           statistics.incrementReadOps(1);\n         } else {\n           break;\n         }\n       }\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Adding: rd (not a dir): \" + path);\n       }\n       result.add(fileStatus);\n     }\n \n     return result.toArray(new FileStatus[result.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (!key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      ObjectListing objects \u003d store.listObjects(key, maxKeys, \"/\", null);\n      while (true) {\n        statistics.incrementReadOps(1);\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          Path keyPath \u003d keyToPath(objectSummary.getKey())\n              .makeQualified(uri, workingDir);\n          if (keyPath.equals(path)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + keyPath);\n            }\n            continue;\n          } else {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n          if (keyPath.equals(path)) {\n            continue;\n          } else {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          objects \u003d store.listObjects(key, maxKeys, \"/\",\n              objects.getNextMarker());\n          statistics.incrementReadOps(1);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,76 @@\n+  public FileStatus[] listStatus(Path path) throws IOException {\n+    String key \u003d pathToKey(path);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"List status for path: \" + path);\n+    }\n+\n+    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n+    final FileStatus fileStatus \u003d getFileStatus(path);\n+\n+    if (fileStatus.isDirectory()) {\n+      if (!key.endsWith(\"/\")) {\n+        key \u003d key + \"/\";\n+      }\n+\n+      ListObjectsRequest listObjectsRequest \u003d\n+          new ListObjectsRequest(bucketName);\n+      listObjectsRequest.setPrefix(key);\n+      listObjectsRequest.setDelimiter(\"/\");\n+      listObjectsRequest.setMaxKeys(maxKeys);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n+      }\n+\n+      while (true) {\n+        ObjectListing objects \u003d ossClient.listObjects(listObjectsRequest);\n+        statistics.incrementReadOps(1);\n+        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n+          Path keyPath \u003d keyToPath(objectSummary.getKey())\n+              .makeQualified(uri, workingDir);\n+          if (keyPath.equals(path)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Ignoring: \" + keyPath);\n+            }\n+            continue;\n+          } else {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Adding: fi: \" + keyPath);\n+            }\n+            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n+                getDefaultBlockSize(keyPath),\n+                objectSummary.getLastModified().getTime(), keyPath));\n+          }\n+        }\n+\n+        for (String prefix : objects.getCommonPrefixes()) {\n+          Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n+          if (keyPath.equals(path)) {\n+            continue;\n+          } else {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Adding: rd: \" + keyPath);\n+            }\n+            result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n+          }\n+        }\n+\n+        if (objects.isTruncated()) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"listStatus: list truncated - getting next batch\");\n+          }\n+          listObjectsRequest.setMarker(objects.getNextMarker());\n+          statistics.incrementReadOps(1);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Adding: rd (not a dir): \" + path);\n+      }\n+      result.add(fileStatus);\n+    }\n+\n+    return result.toArray(new FileStatus[result.size()]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path path) throws IOException {\n    String key \u003d pathToKey(path);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"List status for path: \" + path);\n    }\n\n    final List\u003cFileStatus\u003e result \u003d new ArrayList\u003cFileStatus\u003e();\n    final FileStatus fileStatus \u003d getFileStatus(path);\n\n    if (fileStatus.isDirectory()) {\n      if (!key.endsWith(\"/\")) {\n        key \u003d key + \"/\";\n      }\n\n      ListObjectsRequest listObjectsRequest \u003d\n          new ListObjectsRequest(bucketName);\n      listObjectsRequest.setPrefix(key);\n      listObjectsRequest.setDelimiter(\"/\");\n      listObjectsRequest.setMaxKeys(maxKeys);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"listStatus: doing listObjects for directory \" + key);\n      }\n\n      while (true) {\n        ObjectListing objects \u003d ossClient.listObjects(listObjectsRequest);\n        statistics.incrementReadOps(1);\n        for (OSSObjectSummary objectSummary : objects.getObjectSummaries()) {\n          Path keyPath \u003d keyToPath(objectSummary.getKey())\n              .makeQualified(uri, workingDir);\n          if (keyPath.equals(path)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Ignoring: \" + keyPath);\n            }\n            continue;\n          } else {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: fi: \" + keyPath);\n            }\n            result.add(new FileStatus(objectSummary.getSize(), false, 1,\n                getDefaultBlockSize(keyPath),\n                objectSummary.getLastModified().getTime(), keyPath));\n          }\n        }\n\n        for (String prefix : objects.getCommonPrefixes()) {\n          Path keyPath \u003d keyToPath(prefix).makeQualified(uri, workingDir);\n          if (keyPath.equals(path)) {\n            continue;\n          } else {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding: rd: \" + keyPath);\n            }\n            result.add(new FileStatus(0, true, 1, 0, 0, keyPath));\n          }\n        }\n\n        if (objects.isTruncated()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"listStatus: list truncated - getting next batch\");\n          }\n          listObjectsRequest.setMarker(objects.getNextMarker());\n          statistics.incrementReadOps(1);\n        } else {\n          break;\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Adding: rd (not a dir): \" + path);\n      }\n      result.add(fileStatus);\n    }\n\n    return result.toArray(new FileStatus[result.size()]);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}