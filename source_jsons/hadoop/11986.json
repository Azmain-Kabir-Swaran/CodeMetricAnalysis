{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "recoverCheck",
  "functionId": "recoverCheck___b-ExtendedBlock__newGS-long__expectedBlockLen-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 1322,
  "functionEndLine": 1368,
  "numCommitsSeen": 230,
  "timeTaken": 12180,
  "changeHistory": [
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
    "7723b139d55fc2c3954939559cb4914046a0f81c",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ybodychange",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7723b139d55fc2c3954939559cb4914046a0f81c": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/09/16 6:22 PM",
      "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n       long expectedBlockLen) throws IOException, MustStopExistingWriter {\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check state\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n         replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n     }\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n           + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // stop the previous writer before check a replica\u0027s length\n     long replicaLen \u003d replicaInfo.getNumBytes();\n     if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n-      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+      ReplicaInPipeline rbw \u003d (ReplicaInPipeline) replicaInfo;\n       if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n         throw new MustStopExistingWriter(rbw);\n       }\n       // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n       if (replicaLen !\u003d rbw.getBytesOnDisk() \n           || replicaLen !\u003d rbw.getBytesAcked()) {\n         throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n             \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n             rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n             \") are not the same.\");\n       }\n     }\n     \n     // check block length\n     if (replicaLen !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaLen + \n           \" expected length is \" + expectedBlockLen);\n     }\n     \n     return replicaInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException, MustStopExistingWriter {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaInPipeline rbw \u003d (ReplicaInPipeline) replicaInfo;\n      if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n        throw new MustStopExistingWriter(rbw);\n      }\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
      "commitDate": "04/04/16 6:02 PM",
      "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
          "commitDate": "04/04/16 6:02 PM",
          "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "18/03/16 8:24 AM",
          "commitNameOld": "63c966a3fbeb675959fc4101e65de9f57aecd17d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 17.4,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n-      long expectedBlockLen) throws IOException {\n+      long expectedBlockLen) throws IOException, MustStopExistingWriter {\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check state\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n         replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n     }\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n           + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // stop the previous writer before check a replica\u0027s length\n     long replicaLen \u003d replicaInfo.getNumBytes();\n     if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n       ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n-      // kill the previous writer\n-      rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n-      rbw.setWriter(Thread.currentThread());\n+      if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n+        throw new MustStopExistingWriter(rbw);\n+      }\n       // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n       if (replicaLen !\u003d rbw.getBytesOnDisk() \n           || replicaLen !\u003d rbw.getBytesAcked()) {\n         throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n             \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n             rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n             \") are not the same.\");\n       }\n     }\n     \n     // check block length\n     if (replicaLen !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaLen + \n           \" expected length is \" + expectedBlockLen);\n     }\n     \n     return replicaInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException, MustStopExistingWriter {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n        throw new MustStopExistingWriter(rbw);\n      }\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, MustStopExistingWriter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
          "commitDate": "04/04/16 6:02 PM",
          "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "18/03/16 8:24 AM",
          "commitNameOld": "63c966a3fbeb675959fc4101e65de9f57aecd17d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 17.4,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n-      long expectedBlockLen) throws IOException {\n+      long expectedBlockLen) throws IOException, MustStopExistingWriter {\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check state\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n         replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n     }\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n           + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // stop the previous writer before check a replica\u0027s length\n     long replicaLen \u003d replicaInfo.getNumBytes();\n     if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n       ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n-      // kill the previous writer\n-      rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n-      rbw.setWriter(Thread.currentThread());\n+      if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n+        throw new MustStopExistingWriter(rbw);\n+      }\n       // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n       if (replicaLen !\u003d rbw.getBytesOnDisk() \n           || replicaLen !\u003d rbw.getBytesAcked()) {\n         throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n             \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n             rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n             \") are not the same.\");\n       }\n     }\n     \n     // check block length\n     if (replicaLen !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaLen + \n           \" expected length is \" + expectedBlockLen);\n     }\n     \n     return replicaInfo;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException, MustStopExistingWriter {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n        throw new MustStopExistingWriter(rbw);\n      }\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7723b139d55fc2c3954939559cb4914046a0f81c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5016. Deadlock in pipeline recovery causes Datanode to be marked dead. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/13 9:42 PM",
      "commitName": "7723b139d55fc2c3954939559cb4914046a0f81c",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/05/13 6:42 AM",
      "commitNameOld": "98a692fd6361365db4afb9523a5d83ee32774112",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 65.63,
      "commitsBetweenForRepo": 415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n       long expectedBlockLen) throws IOException {\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check state\n     if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n         replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n     }\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n           + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // stop the previous writer before check a replica\u0027s length\n     long replicaLen \u003d replicaInfo.getNumBytes();\n     if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n       ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n       // kill the previous writer\n-      rbw.stopWriter();\n+      rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n       rbw.setWriter(Thread.currentThread());\n       // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n       if (replicaLen !\u003d rbw.getBytesOnDisk() \n           || replicaLen !\u003d rbw.getBytesAcked()) {\n         throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n             \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n             rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n             \") are not the same.\");\n       }\n     }\n     \n     // check block length\n     if (replicaLen !\u003d expectedBlockLen) {\n       throw new IOException(\"Corrupted replica \" + replicaInfo + \n           \" with a length of \" + replicaLen + \n           \" expected length is \" + expectedBlockLen);\n     }\n     \n     return replicaInfo;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      // kill the previous writer\n      rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n      rbw.setWriter(Thread.currentThread());\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/12 8:48 PM",
      "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      // kill the previous writer\n      rbw.stopWriter();\n      rbw.setWriter(Thread.currentThread());\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
        "oldMethodName": "recoverCheck",
        "newMethodName": "recoverCheck"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      // kill the previous writer\n      rbw.stopWriter();\n      rbw.setWriter(Thread.currentThread());\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      // kill the previous writer\n      rbw.stopWriter();\n      rbw.setWriter(Thread.currentThread());\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,47 @@\n+  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n+      long expectedBlockLen) throws IOException {\n+    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n+    \n+    // check state\n+    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n+        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n+    }\n+\n+    // check generation stamp\n+    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n+    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n+        replicaGenerationStamp \u003e newGS) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n+          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n+          newGS + \"].\");\n+    }\n+    \n+    // stop the previous writer before check a replica\u0027s length\n+    long replicaLen \u003d replicaInfo.getNumBytes();\n+    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n+      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+      // kill the previous writer\n+      rbw.stopWriter();\n+      rbw.setWriter(Thread.currentThread());\n+      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n+      if (replicaLen !\u003d rbw.getBytesOnDisk() \n+          || replicaLen !\u003d rbw.getBytesAcked()) {\n+        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n+            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n+            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n+            \") are not the same.\");\n+      }\n+    }\n+    \n+    // check block length\n+    if (replicaLen !\u003d expectedBlockLen) {\n+      throw new IOException(\"Corrupted replica \" + replicaInfo + \n+          \" with a length of \" + replicaLen + \n+          \" expected length is \" + expectedBlockLen);\n+    }\n+    \n+    return replicaInfo;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ReplicaInfo recoverCheck(ExtendedBlock b, long newGS, \n      long expectedBlockLen) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check state\n    if (replicaInfo.getState() !\u003d ReplicaState.FINALIZED \u0026\u0026\n        replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA + replicaInfo);\n    }\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d replicaInfo.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + replicaGenerationStamp\n          + \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // stop the previous writer before check a replica\u0027s length\n    long replicaLen \u003d replicaInfo.getNumBytes();\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.RBW) {\n      ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n      // kill the previous writer\n      rbw.stopWriter();\n      rbw.setWriter(Thread.currentThread());\n      // check length: bytesRcvd, bytesOnDisk, and bytesAcked should be the same\n      if (replicaLen !\u003d rbw.getBytesOnDisk() \n          || replicaLen !\u003d rbw.getBytesAcked()) {\n        throw new ReplicaAlreadyExistsException(\"RBW replica \" + replicaInfo + \n            \"bytesRcvd(\" + rbw.getNumBytes() + \"), bytesOnDisk(\" + \n            rbw.getBytesOnDisk() + \"), and bytesAcked(\" + rbw.getBytesAcked() +\n            \") are not the same.\");\n      }\n    }\n    \n    // check block length\n    if (replicaLen !\u003d expectedBlockLen) {\n      throw new IOException(\"Corrupted replica \" + replicaInfo + \n          \" with a length of \" + replicaLen + \n          \" expected length is \" + expectedBlockLen);\n    }\n    \n    return replicaInfo;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}