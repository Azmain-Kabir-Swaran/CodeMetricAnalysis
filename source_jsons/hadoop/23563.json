{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryClientService.java",
  "functionName": "renewDelegationToken",
  "functionId": "renewDelegationToken___request-RenewDelegationTokenRequest",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
  "functionStartLine": 396,
  "functionEndLine": 416,
  "numCommitsSeen": 37,
  "timeTaken": 1677,
  "changeHistory": [
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "7359dc32d3781d5318efee4cf6185616c7c00c18",
    "e17cecf5505dddb92e2212147505c7c900184431"
  ],
  "changeHistoryShort": {
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Ybodychange",
    "7359dc32d3781d5318efee4cf6185616c7c00c18": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e17cecf5505dddb92e2212147505c7c900184431": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Ybodychange",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/05/13 8:34 PM",
      "commitNameOld": "7359dc32d3781d5318efee4cf6185616c7c00c18",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.76,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public RenewDelegationTokenResponse renewDelegationToken(\n         RenewDelegationTokenRequest request) throws IOException {\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be renewed only with kerberos authentication\");\n         }\n \n-        DelegationToken protoToken \u003d request.getDelegationToken();\n+        org.apache.hadoop.yarn.api.records.Token protoToken \u003d request.getDelegationToken();\n         Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n             new Token\u003cMRDelegationTokenIdentifier\u003e(\n                 protoToken.getIdentifier().array(), protoToken.getPassword()\n                     .array(), new Text(protoToken.getKind()), new Text(\n                     protoToken.getService()));\n \n         String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n         long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n         RenewDelegationTokenResponse renewResponse \u003d Records\n             .newRecord(RenewDelegationTokenResponse.class);\n         renewResponse.setNextExpirationTime(nextExpTime);\n         return renewResponse;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RenewDelegationTokenResponse renewDelegationToken(\n        RenewDelegationTokenRequest request) throws IOException {\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be renewed only with kerberos authentication\");\n        }\n\n        org.apache.hadoop.yarn.api.records.Token protoToken \u003d request.getDelegationToken();\n        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n            new Token\u003cMRDelegationTokenIdentifier\u003e(\n                protoToken.getIdentifier().array(), protoToken.getPassword()\n                    .array(), new Text(protoToken.getKind()), new Text(\n                    protoToken.getService()));\n\n        String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n        long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse \u003d Records\n            .newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
      "extendedDetails": {}
    },
    "7359dc32d3781d5318efee4cf6185616c7c00c18": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/05/13 8:34 PM",
      "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/01/13 12:15 PM",
          "commitNameOld": "e17cecf5505dddb92e2212147505c7c900184431",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 128.3,
          "commitsBetweenForRepo": 767,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,21 @@\n     public RenewDelegationTokenResponse renewDelegationToken(\n-        RenewDelegationTokenRequest request) throws YarnRemoteException {\n-      try {\n+        RenewDelegationTokenRequest request) throws IOException {\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be renewed only with kerberos authentication\");\n         }\n \n         DelegationToken protoToken \u003d request.getDelegationToken();\n-        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d new Token\u003cMRDelegationTokenIdentifier\u003e(\n-            protoToken.getIdentifier().array(), protoToken.getPassword()\n-                .array(), new Text(protoToken.getKind()), new Text(\n-                protoToken.getService()));\n+        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n+            new Token\u003cMRDelegationTokenIdentifier\u003e(\n+                protoToken.getIdentifier().array(), protoToken.getPassword()\n+                    .array(), new Text(protoToken.getKind()), new Text(\n+                    protoToken.getService()));\n \n         String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n         long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n         RenewDelegationTokenResponse renewResponse \u003d Records\n             .newRecord(RenewDelegationTokenResponse.class);\n         renewResponse.setNextExpirationTime(nextExpTime);\n         return renewResponse;\n-      } catch (IOException e) {\n-        throw RPCUtil.getRemoteException(e);\n-      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public RenewDelegationTokenResponse renewDelegationToken(\n        RenewDelegationTokenRequest request) throws IOException {\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be renewed only with kerberos authentication\");\n        }\n\n        DelegationToken protoToken \u003d request.getDelegationToken();\n        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n            new Token\u003cMRDelegationTokenIdentifier\u003e(\n                protoToken.getIdentifier().array(), protoToken.getPassword()\n                    .array(), new Text(protoToken.getKind()), new Text(\n                    protoToken.getService()));\n\n        String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n        long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse \u003d Records\n            .newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4067. Changed MRClientProtocol api to throw IOException only (Xuan Gong via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481695 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/05/13 8:34 PM",
          "commitName": "7359dc32d3781d5318efee4cf6185616c7c00c18",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/01/13 12:15 PM",
          "commitNameOld": "e17cecf5505dddb92e2212147505c7c900184431",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 128.3,
          "commitsBetweenForRepo": 767,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,21 @@\n     public RenewDelegationTokenResponse renewDelegationToken(\n-        RenewDelegationTokenRequest request) throws YarnRemoteException {\n-      try {\n+        RenewDelegationTokenRequest request) throws IOException {\n         if (!isAllowedDelegationTokenOp()) {\n           throw new IOException(\n               \"Delegation Token can be renewed only with kerberos authentication\");\n         }\n \n         DelegationToken protoToken \u003d request.getDelegationToken();\n-        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d new Token\u003cMRDelegationTokenIdentifier\u003e(\n-            protoToken.getIdentifier().array(), protoToken.getPassword()\n-                .array(), new Text(protoToken.getKind()), new Text(\n-                protoToken.getService()));\n+        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n+            new Token\u003cMRDelegationTokenIdentifier\u003e(\n+                protoToken.getIdentifier().array(), protoToken.getPassword()\n+                    .array(), new Text(protoToken.getKind()), new Text(\n+                    protoToken.getService()));\n \n         String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n         long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n         RenewDelegationTokenResponse renewResponse \u003d Records\n             .newRecord(RenewDelegationTokenResponse.class);\n         renewResponse.setNextExpirationTime(nextExpTime);\n         return renewResponse;\n-      } catch (IOException e) {\n-        throw RPCUtil.getRemoteException(e);\n-      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public RenewDelegationTokenResponse renewDelegationToken(\n        RenewDelegationTokenRequest request) throws IOException {\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be renewed only with kerberos authentication\");\n        }\n\n        DelegationToken protoToken \u003d request.getDelegationToken();\n        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d\n            new Token\u003cMRDelegationTokenIdentifier\u003e(\n                protoToken.getIdentifier().array(), protoToken.getPassword()\n                    .array(), new Text(protoToken.getKind()), new Text(\n                    protoToken.getService()));\n\n        String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n        long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse \u003d Records\n            .newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e17cecf5505dddb92e2212147505c7c900184431": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4894. Renewal / cancellation of JobHistory tokens (Siddharth Seth via tgraves\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429086 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:15 PM",
      "commitName": "e17cecf5505dddb92e2212147505c7c900184431",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,24 @@\n+    public RenewDelegationTokenResponse renewDelegationToken(\n+        RenewDelegationTokenRequest request) throws YarnRemoteException {\n+      try {\n+        if (!isAllowedDelegationTokenOp()) {\n+          throw new IOException(\n+              \"Delegation Token can be renewed only with kerberos authentication\");\n+        }\n+\n+        DelegationToken protoToken \u003d request.getDelegationToken();\n+        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d new Token\u003cMRDelegationTokenIdentifier\u003e(\n+            protoToken.getIdentifier().array(), protoToken.getPassword()\n+                .array(), new Text(protoToken.getKind()), new Text(\n+                protoToken.getService()));\n+\n+        String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+        long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n+        RenewDelegationTokenResponse renewResponse \u003d Records\n+            .newRecord(RenewDelegationTokenResponse.class);\n+        renewResponse.setNextExpirationTime(nextExpTime);\n+        return renewResponse;\n+      } catch (IOException e) {\n+        throw RPCUtil.getRemoteException(e);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public RenewDelegationTokenResponse renewDelegationToken(\n        RenewDelegationTokenRequest request) throws YarnRemoteException {\n      try {\n        if (!isAllowedDelegationTokenOp()) {\n          throw new IOException(\n              \"Delegation Token can be renewed only with kerberos authentication\");\n        }\n\n        DelegationToken protoToken \u003d request.getDelegationToken();\n        Token\u003cMRDelegationTokenIdentifier\u003e token \u003d new Token\u003cMRDelegationTokenIdentifier\u003e(\n            protoToken.getIdentifier().array(), protoToken.getPassword()\n                .array(), new Text(protoToken.getKind()), new Text(\n                protoToken.getService()));\n\n        String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n        long nextExpTime \u003d jhsDTSecretManager.renewToken(token, user);\n        RenewDelegationTokenResponse renewResponse \u003d Records\n            .newRecord(RenewDelegationTokenResponse.class);\n        renewResponse.setNextExpirationTime(nextExpTime);\n        return renewResponse;\n      } catch (IOException e) {\n        throw RPCUtil.getRemoteException(e);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryClientService.java"
    }
  }
}