{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InstrumentedLock.java",
  "functionName": "check",
  "functionId": "check___acquireTime-long__releaseTime-long__checkLockHeld-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java",
  "functionStartLine": 189,
  "functionEndLine": 225,
  "numCommitsSeen": 10,
  "timeTaken": 4253,
  "changeHistory": [
    "0cfff16ac040bd5fb6783333d0d027369c68dead",
    "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb",
    "fe9ebe20ab113567f0777c11cb48ce0d3ce587a8",
    "c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5",
    "011f3b24d4bfda505a90ab5b5576916a41f869c5"
  ],
  "changeHistoryShort": {
    "0cfff16ac040bd5fb6783333d0d027369c68dead": "Ymultichange(Yparameterchange,Ybodychange)",
    "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb": "Ymultichange(Yfilerename,Ymodifierchange)",
    "fe9ebe20ab113567f0777c11cb48ce0d3ce587a8": "Yfilerename",
    "c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5": "Yfilerename",
    "011f3b24d4bfda505a90ab5b5576916a41f869c5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0cfff16ac040bd5fb6783333d0d027369c68dead": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16833. InstrumentedLock should log lock queue time. Contributed by Stephen O\u0027Donnell.\n\nChange-Id: Idddff05051b6f642b88e51694b40c5bb1bef0026\n",
      "commitDate": "18/02/20 9:50 AM",
      "commitName": "0cfff16ac040bd5fb6783333d0d027369c68dead",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16833. InstrumentedLock should log lock queue time. Contributed by Stephen O\u0027Donnell.\n\nChange-Id: Idddff05051b6f642b88e51694b40c5bb1bef0026\n",
          "commitDate": "18/02/20 9:50 AM",
          "commitName": "0cfff16ac040bd5fb6783333d0d027369c68dead",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "20/06/17 7:19 PM",
          "commitNameOld": "1a598479a9faec787706bcf924dfbd88a80e1b82",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 972.65,
          "commitsBetweenForRepo": 7410,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,37 @@\n-  protected void check(long acquireTime, long releaseTime) {\n+  protected void check(long acquireTime, long releaseTime,\n+       boolean checkLockHeld) {\n     if (!logger.isWarnEnabled()) {\n       return;\n     }\n \n     final long lockHeldTime \u003d releaseTime - acquireTime;\n     if (lockWarningThreshold - lockHeldTime \u003c 0) {\n+      AtomicLong lastLogTime;\n+      SuppressedStats stats;\n+      if (checkLockHeld) {\n+        lastLogTime \u003d lastHoldLogTimestamp;\n+        stats \u003d holdStats;\n+      } else {\n+        lastLogTime \u003d lastWaitLogTimestamp;\n+        stats \u003d waitStats;\n+      }\n       long now;\n       long localLastLogTs;\n       do {\n         now \u003d clock.monotonicNow();\n-        localLastLogTs \u003d lastLogTimestamp.get();\n+        localLastLogTs \u003d lastLogTime.get();\n         long deltaSinceLastLog \u003d now - localLastLogTs;\n         // check should print log or not\n         if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n-          warningsSuppressed.incrementAndGet();\n+          stats.incrementSuppressed(lockHeldTime);\n           return;\n         }\n-      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n-      long suppressed \u003d warningsSuppressed.getAndSet(0);\n-      logWarning(lockHeldTime, suppressed);\n+      } while (!lastLogTime.compareAndSet(localLastLogTs, now));\n+      SuppressedSnapshot statsSnapshot \u003d stats.snapshot();\n+      if (checkLockHeld) {\n+        logWarning(lockHeldTime, statsSnapshot);\n+      } else {\n+        logWaitWarning(lockHeldTime, statsSnapshot);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void check(long acquireTime, long releaseTime,\n       boolean checkLockHeld) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      AtomicLong lastLogTime;\n      SuppressedStats stats;\n      if (checkLockHeld) {\n        lastLogTime \u003d lastHoldLogTimestamp;\n        stats \u003d holdStats;\n      } else {\n        lastLogTime \u003d lastWaitLogTimestamp;\n        stats \u003d waitStats;\n      }\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTime.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          stats.incrementSuppressed(lockHeldTime);\n          return;\n        }\n      } while (!lastLogTime.compareAndSet(localLastLogTs, now));\n      SuppressedSnapshot statsSnapshot \u003d stats.snapshot();\n      if (checkLockHeld) {\n        logWarning(lockHeldTime, statsSnapshot);\n      } else {\n        logWaitWarning(lockHeldTime, statsSnapshot);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java",
          "extendedDetails": {
            "oldValue": "[acquireTime-long, releaseTime-long]",
            "newValue": "[acquireTime-long, releaseTime-long, checkLockHeld-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16833. InstrumentedLock should log lock queue time. Contributed by Stephen O\u0027Donnell.\n\nChange-Id: Idddff05051b6f642b88e51694b40c5bb1bef0026\n",
          "commitDate": "18/02/20 9:50 AM",
          "commitName": "0cfff16ac040bd5fb6783333d0d027369c68dead",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "20/06/17 7:19 PM",
          "commitNameOld": "1a598479a9faec787706bcf924dfbd88a80e1b82",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 972.65,
          "commitsBetweenForRepo": 7410,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,37 @@\n-  protected void check(long acquireTime, long releaseTime) {\n+  protected void check(long acquireTime, long releaseTime,\n+       boolean checkLockHeld) {\n     if (!logger.isWarnEnabled()) {\n       return;\n     }\n \n     final long lockHeldTime \u003d releaseTime - acquireTime;\n     if (lockWarningThreshold - lockHeldTime \u003c 0) {\n+      AtomicLong lastLogTime;\n+      SuppressedStats stats;\n+      if (checkLockHeld) {\n+        lastLogTime \u003d lastHoldLogTimestamp;\n+        stats \u003d holdStats;\n+      } else {\n+        lastLogTime \u003d lastWaitLogTimestamp;\n+        stats \u003d waitStats;\n+      }\n       long now;\n       long localLastLogTs;\n       do {\n         now \u003d clock.monotonicNow();\n-        localLastLogTs \u003d lastLogTimestamp.get();\n+        localLastLogTs \u003d lastLogTime.get();\n         long deltaSinceLastLog \u003d now - localLastLogTs;\n         // check should print log or not\n         if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n-          warningsSuppressed.incrementAndGet();\n+          stats.incrementSuppressed(lockHeldTime);\n           return;\n         }\n-      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n-      long suppressed \u003d warningsSuppressed.getAndSet(0);\n-      logWarning(lockHeldTime, suppressed);\n+      } while (!lastLogTime.compareAndSet(localLastLogTs, now));\n+      SuppressedSnapshot statsSnapshot \u003d stats.snapshot();\n+      if (checkLockHeld) {\n+        logWarning(lockHeldTime, statsSnapshot);\n+      } else {\n+        logWaitWarning(lockHeldTime, statsSnapshot);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void check(long acquireTime, long releaseTime,\n       boolean checkLockHeld) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      AtomicLong lastLogTime;\n      SuppressedStats stats;\n      if (checkLockHeld) {\n        lastLogTime \u003d lastHoldLogTimestamp;\n        stats \u003d holdStats;\n      } else {\n        lastLogTime \u003d lastWaitLogTimestamp;\n        stats \u003d waitStats;\n      }\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTime.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          stats.incrementSuppressed(lockHeldTime);\n          return;\n        }\n      } while (!lastLogTime.compareAndSet(localLastLogTs, now));\n      SuppressedSnapshot statsSnapshot \u003d stats.snapshot();\n      if (checkLockHeld) {\n        logWarning(lockHeldTime, statsSnapshot);\n      } else {\n        logWaitWarning(lockHeldTime, statsSnapshot);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HADOOP-13702. Add instrumented ReadWriteLock. Contributed by Jingcheng Du\n",
      "commitDate": "21/10/16 12:59 PM",
      "commitName": "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb",
      "commitAuthor": "Chris Douglas",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-13702. Add instrumented ReadWriteLock. Contributed by Jingcheng Du\n",
          "commitDate": "21/10/16 12:59 PM",
          "commitName": "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "21/10/16 12:44 PM",
          "commitNameOld": "44eb2bd7ae39cca77fc8c7ad493b52ea1bb43530",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private void check(long acquireTime, long releaseTime) {\n+  protected void check(long acquireTime, long releaseTime) {\n     if (!logger.isWarnEnabled()) {\n       return;\n     }\n \n     final long lockHeldTime \u003d releaseTime - acquireTime;\n     if (lockWarningThreshold - lockHeldTime \u003c 0) {\n       long now;\n       long localLastLogTs;\n       do {\n         now \u003d clock.monotonicNow();\n         localLastLogTs \u003d lastLogTimestamp.get();\n         long deltaSinceLastLog \u003d now - localLastLogTs;\n         // check should print log or not\n         if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n           warningsSuppressed.incrementAndGet();\n           return;\n         }\n       } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n       long suppressed \u003d warningsSuppressed.getAndSet(0);\n       logWarning(lockHeldTime, suppressed);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void check(long acquireTime, long releaseTime) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTimestamp.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          warningsSuppressed.incrementAndGet();\n          return;\n        }\n      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n      long suppressed \u003d warningsSuppressed.getAndSet(0);\n      logWarning(lockHeldTime, suppressed);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedLock.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13702. Add instrumented ReadWriteLock. Contributed by Jingcheng Du\n",
          "commitDate": "21/10/16 12:59 PM",
          "commitName": "ae8bccd5090d8b42dae9a8e0c13a9766a7c42ecb",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "21/10/16 12:44 PM",
          "commitNameOld": "44eb2bd7ae39cca77fc8c7ad493b52ea1bb43530",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  private void check(long acquireTime, long releaseTime) {\n+  protected void check(long acquireTime, long releaseTime) {\n     if (!logger.isWarnEnabled()) {\n       return;\n     }\n \n     final long lockHeldTime \u003d releaseTime - acquireTime;\n     if (lockWarningThreshold - lockHeldTime \u003c 0) {\n       long now;\n       long localLastLogTs;\n       do {\n         now \u003d clock.monotonicNow();\n         localLastLogTs \u003d lastLogTimestamp.get();\n         long deltaSinceLastLog \u003d now - localLastLogTs;\n         // check should print log or not\n         if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n           warningsSuppressed.incrementAndGet();\n           return;\n         }\n       } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n       long suppressed \u003d warningsSuppressed.getAndSet(0);\n       logWarning(lockHeldTime, suppressed);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void check(long acquireTime, long releaseTime) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTimestamp.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          warningsSuppressed.incrementAndGet();\n          return;\n        }\n      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n      long suppressed \u003d warningsSuppressed.getAndSet(0);\n      logWarning(lockHeldTime, suppressed);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/InstrumentedLock.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "fe9ebe20ab113567f0777c11cb48ce0d3ce587a8": {
      "type": "Yfilerename",
      "commitMessage": "Revert \"HDFS-10923. Make InstrumentedLock require ReentrantLock.\"\n\nThis reverts commit c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5.\n",
      "commitDate": "30/09/16 11:11 PM",
      "commitName": "fe9ebe20ab113567f0777c11cb48ce0d3ce587a8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "30/09/16 11:00 PM",
      "commitNameOld": "c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void check(long acquireTime, long releaseTime) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTimestamp.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          warningsSuppressed.incrementAndGet();\n          return;\n        }\n      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n      long suppressed \u003d warningsSuppressed.getAndSet(0);\n      logWarning(lockHeldTime, suppressed);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedLock.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedReentrantLock.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedLock.java"
      }
    },
    "c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-10923. Make InstrumentedLock require ReentrantLock.\n",
      "commitDate": "30/09/16 11:00 PM",
      "commitName": "c7ce6fdc20fe053f0bb3bcf900ffc0e1db6feee5",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "30/09/16 7:41 PM",
      "commitNameOld": "3a3697deab3e3397082222deb66fb613d86ff9ae",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void check(long acquireTime, long releaseTime) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTimestamp.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          warningsSuppressed.incrementAndGet();\n          return;\n        }\n      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n      long suppressed \u003d warningsSuppressed.getAndSet(0);\n      logWarning(lockHeldTime, suppressed);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedReentrantLock.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedLock.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedReentrantLock.java"
      }
    },
    "011f3b24d4bfda505a90ab5b5576916a41f869c5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10742. Measure lock time in FsDatasetImpl. Contributed by Chen Liang\n",
      "commitDate": "08/09/16 5:53 PM",
      "commitName": "011f3b24d4bfda505a90ab5b5576916a41f869c5",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,23 @@\n+  private void check(long acquireTime, long releaseTime) {\n+    if (!logger.isWarnEnabled()) {\n+      return;\n+    }\n+\n+    final long lockHeldTime \u003d releaseTime - acquireTime;\n+    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n+      long now;\n+      long localLastLogTs;\n+      do {\n+        now \u003d clock.monotonicNow();\n+        localLastLogTs \u003d lastLogTimestamp.get();\n+        long deltaSinceLastLog \u003d now - localLastLogTs;\n+        // check should print log or not\n+        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n+          warningsSuppressed.incrementAndGet();\n+          return;\n+        }\n+      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n+      long suppressed \u003d warningsSuppressed.getAndSet(0);\n+      logWarning(lockHeldTime, suppressed);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void check(long acquireTime, long releaseTime) {\n    if (!logger.isWarnEnabled()) {\n      return;\n    }\n\n    final long lockHeldTime \u003d releaseTime - acquireTime;\n    if (lockWarningThreshold - lockHeldTime \u003c 0) {\n      long now;\n      long localLastLogTs;\n      do {\n        now \u003d clock.monotonicNow();\n        localLastLogTs \u003d lastLogTimestamp.get();\n        long deltaSinceLastLog \u003d now - localLastLogTs;\n        // check should print log or not\n        if (deltaSinceLastLog - minLoggingGap \u003c 0) {\n          warningsSuppressed.incrementAndGet();\n          return;\n        }\n      } while (!lastLogTimestamp.compareAndSet(localLastLogTs, now));\n      long suppressed \u003d warningsSuppressed.getAndSet(0);\n      logWarning(lockHeldTime, suppressed);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/InstrumentedLock.java"
    }
  }
}