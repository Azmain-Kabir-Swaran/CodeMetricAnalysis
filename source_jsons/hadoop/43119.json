{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "getService",
  "functionId": "getService___request-HttpServletRequest(annotations-@Context)__appName-String(annotations-@PathParam(SERVICE_NAME))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 184,
  "functionEndLine": 215,
  "numCommitsSeen": 40,
  "timeTaken": 2339,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "7fe3214d4bb810c0da18dd936875b4e2588ba518",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "40ab068eabe50875449d601471619a4e82fff86d"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "7fe3214d4bb810c0da18dd936875b4e2588ba518": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Ybodychange)",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response getService(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if (appName \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Service name cannot be null.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n      Service app \u003d getServiceFromClient(ugi, appName);\n      return Response.ok(app).build();\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (FileNotFoundException e) {\n      serviceStatus.setDiagnostics(\"Service \" + appName + \" not found\");\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (IOException | InterruptedException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "7fe3214d4bb810c0da18dd936875b4e2588ba518": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7961. Improve status message for YARN service.\n           Contributed by Gour Saha\n",
      "commitDate": "03/05/18 10:27 AM",
      "commitName": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "598483e496a0e0253310817d8d1bd3511318bc8b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public Response getService(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String appName) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       if (appName \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"Service name can not be null.\");\n+        throw new IllegalArgumentException(\"Service name cannot be null.\");\n       }\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n       Service app \u003d getServiceFromClient(ugi, appName);\n       return Response.ok(app).build();\n     } catch (AccessControlException e) {\n       return formatResponse(Status.FORBIDDEN, e.getMessage());\n-    } catch (IllegalArgumentException |\n-        FileNotFoundException e) {\n+    } catch (IllegalArgumentException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n       return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n           .build();\n+    } catch (FileNotFoundException e) {\n+      serviceStatus.setDiagnostics(\"Service \" + appName + \" not found\");\n+      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n+      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n+          .build();\n     } catch (IOException | InterruptedException e) {\n       LOG.error(\"Get service failed: {}\", e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       LOG.error(\"Get service failed: {}\", e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getService(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if (appName \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Service name cannot be null.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n      Service app \u003d getServiceFromClient(ugi, appName);\n      return Response.ok(app).build();\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (FileNotFoundException e) {\n      serviceStatus.setDiagnostics(\"Service \" + appName + \" not found\");\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (IOException | InterruptedException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "10/04/18 2:40 PM",
      "commitNameOld": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 15.97,
      "commitsBetweenForRepo": 622,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,28 @@\n   public Response getService(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String appName) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       if (appName \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Service name can not be null.\");\n       }\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n-      Service app \u003d ugi.doAs(new PrivilegedExceptionAction\u003cService\u003e() {\n-        @Override\n-        public Service run() throws IOException, YarnException {\n-          ServiceClient sc \u003d getServiceClient();\n-          sc.init(YARN_CONFIG);\n-          sc.start();\n-          Service app \u003d sc.getStatus(appName);\n-          sc.close();\n-          return app;\n-        }\n-      });\n+      Service app \u003d getServiceFromClient(ugi, appName);\n       return Response.ok(app).build();\n     } catch (AccessControlException e) {\n       return formatResponse(Status.FORBIDDEN, e.getMessage());\n     } catch (IllegalArgumentException |\n         FileNotFoundException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n       return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n           .build();\n     } catch (IOException | InterruptedException e) {\n       LOG.error(\"Get service failed: {}\", e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       LOG.error(\"Get service failed: {}\", e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getService(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if (appName \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Service name can not be null.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n      Service app \u003d getServiceFromClient(ugi, appName);\n      return Response.ok(app).build();\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (IllegalArgumentException |\n        FileNotFoundException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (IOException | InterruptedException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,38 @@\n-  public Response getService(@PathParam(SERVICE_NAME) String appName) {\n-    LOG.info(\"GET: getService for appName \u003d {}\", appName);\n+  public Response getService(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String appName) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      Service app \u003d SERVICE_CLIENT.getStatus(appName);\n+      if (appName \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Service name can not be null.\");\n+      }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n+      Service app \u003d ugi.doAs(new PrivilegedExceptionAction\u003cService\u003e() {\n+        @Override\n+        public Service run() throws IOException, YarnException {\n+          ServiceClient sc \u003d getServiceClient();\n+          sc.init(YARN_CONFIG);\n+          sc.start();\n+          Service app \u003d sc.getStatus(appName);\n+          sc.close();\n+          return app;\n+        }\n+      });\n       return Response.ok(app).build();\n-    } catch (IllegalArgumentException e) {\n+    } catch (AccessControlException e) {\n+      return formatResponse(Status.FORBIDDEN, e.getMessage());\n+    } catch (IllegalArgumentException |\n+        FileNotFoundException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n       return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n           .build();\n-    } catch (Exception e) {\n-      LOG.error(\"Get service failed\", e);\n-      serviceStatus\n-          .setDiagnostics(\"Failed to retrieve service: \" + e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+    } catch (IOException | InterruptedException e) {\n+      LOG.error(\"Get service failed: {}\", e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      LOG.error(\"Get service failed: {}\", e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getService(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if (appName \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Service name can not be null.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n      Service app \u003d ugi.doAs(new PrivilegedExceptionAction\u003cService\u003e() {\n        @Override\n        public Service run() throws IOException, YarnException {\n          ServiceClient sc \u003d getServiceClient();\n          sc.init(YARN_CONFIG);\n          sc.start();\n          Service app \u003d sc.getStatus(appName);\n          sc.close();\n          return app;\n        }\n      });\n      return Response.ok(app).build();\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (IllegalArgumentException |\n        FileNotFoundException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (IOException | InterruptedException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[appName-String(annotations-@PathParam(SERVICE_NAME))]",
            "newValue": "[request-HttpServletRequest(annotations-@Context), appName-String(annotations-@PathParam(SERVICE_NAME))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,38 @@\n-  public Response getService(@PathParam(SERVICE_NAME) String appName) {\n-    LOG.info(\"GET: getService for appName \u003d {}\", appName);\n+  public Response getService(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String appName) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      Service app \u003d SERVICE_CLIENT.getStatus(appName);\n+      if (appName \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Service name can not be null.\");\n+      }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n+      Service app \u003d ugi.doAs(new PrivilegedExceptionAction\u003cService\u003e() {\n+        @Override\n+        public Service run() throws IOException, YarnException {\n+          ServiceClient sc \u003d getServiceClient();\n+          sc.init(YARN_CONFIG);\n+          sc.start();\n+          Service app \u003d sc.getStatus(appName);\n+          sc.close();\n+          return app;\n+        }\n+      });\n       return Response.ok(app).build();\n-    } catch (IllegalArgumentException e) {\n+    } catch (AccessControlException e) {\n+      return formatResponse(Status.FORBIDDEN, e.getMessage());\n+    } catch (IllegalArgumentException |\n+        FileNotFoundException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n       return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n           .build();\n-    } catch (Exception e) {\n-      LOG.error(\"Get service failed\", e);\n-      serviceStatus\n-          .setDiagnostics(\"Failed to retrieve service: \" + e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+    } catch (IOException | InterruptedException e) {\n+      LOG.error(\"Get service failed: {}\", e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      LOG.error(\"Get service failed: {}\", e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getService(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String appName) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if (appName \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Service name can not be null.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"GET: getService for appName \u003d {} user \u003d {}\", appName, ugi);\n      Service app \u003d ugi.doAs(new PrivilegedExceptionAction\u003cService\u003e() {\n        @Override\n        public Service run() throws IOException, YarnException {\n          ServiceClient sc \u003d getServiceClient();\n          sc.init(YARN_CONFIG);\n          sc.start();\n          Service app \u003d sc.getStatus(appName);\n          sc.close();\n          return app;\n        }\n      });\n      return Response.ok(app).build();\n    } catch (AccessControlException e) {\n      return formatResponse(Status.FORBIDDEN, e.getMessage());\n    } catch (IllegalArgumentException |\n        FileNotFoundException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (IOException | InterruptedException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      LOG.error(\"Get service failed: {}\", e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,19 @@\n+  public Response getService(@PathParam(SERVICE_NAME) String appName) {\n+    LOG.info(\"GET: getService for appName \u003d {}\", appName);\n+    ServiceStatus serviceStatus \u003d new ServiceStatus();\n+    try {\n+      Service app \u003d SERVICE_CLIENT.getStatus(appName);\n+      return Response.ok(app).build();\n+    } catch (IllegalArgumentException e) {\n+      serviceStatus.setDiagnostics(e.getMessage());\n+      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n+      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n+          .build();\n+    } catch (Exception e) {\n+      LOG.error(\"Get service failed\", e);\n+      serviceStatus\n+          .setDiagnostics(\"Failed to retrieve service: \" + e.getMessage());\n+      return Response.status(Status.INTERNAL_SERVER_ERROR)\n+          .entity(serviceStatus).build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getService(@PathParam(SERVICE_NAME) String appName) {\n    LOG.info(\"GET: getService for appName \u003d {}\", appName);\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      Service app \u003d SERVICE_CLIENT.getStatus(appName);\n      return Response.ok(app).build();\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      serviceStatus.setCode(ERROR_CODE_APP_NAME_INVALID);\n      return Response.status(Status.NOT_FOUND).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      LOG.error(\"Get service failed\", e);\n      serviceStatus\n          .setDiagnostics(\"Failed to retrieve service: \" + e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}