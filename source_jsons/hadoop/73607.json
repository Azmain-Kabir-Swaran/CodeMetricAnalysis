{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CallQueueManager.java",
  "functionName": "swapQueue",
  "functionId": "swapQueue___schedulerClass-Class__? extends RpcScheduler____queueClassToUse-Class__? extends BlockingQueue__E______maxSize-int__ns-String__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
  "functionStartLine": 395,
  "functionEndLine": 423,
  "numCommitsSeen": 23,
  "timeTaken": 2782,
  "changeHistory": [
    "4202750040f91f8dcc218ecc7d3ccf81a8e68b2a",
    "4ea2778acb78f31b470e318d2b65ea43db76909b",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
    "37cb314f79f515421cfc2c3605382bf1534dc266",
    "d61d1c120d5cecc97514e2f8d79dacdbd4e610a3"
  ],
  "changeHistoryShort": {
    "4202750040f91f8dcc218ecc7d3ccf81a8e68b2a": "Ybodychange",
    "4ea2778acb78f31b470e318d2b65ea43db76909b": "Ybodychange",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Ymultichange(Yparameterchange,Ybodychange)",
    "37cb314f79f515421cfc2c3605382bf1534dc266": "Yparameterchange",
    "d61d1c120d5cecc97514e2f8d79dacdbd4e610a3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4202750040f91f8dcc218ecc7d3ccf81a8e68b2a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17010. Add queue capacity support for FairCallQueue (#1977)\n\n",
      "commitDate": "28/04/20 4:14 PM",
      "commitName": "4202750040f91f8dcc218ecc7d3ccf81a8e68b2a",
      "commitAuthor": "lfengnan",
      "commitDateOld": "04/09/19 8:22 AM",
      "commitNameOld": "337e9b794d3401748a86aa03a55ac61b0305d231",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 237.33,
      "commitsBetweenForRepo": 996,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public synchronized void swapQueue(\n       Class\u003c? extends RpcScheduler\u003e schedulerClass,\n       Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n       String ns, Configuration conf) {\n     int priorityLevels \u003d parseNumLevels(ns, conf);\n     this.scheduler.stop();\n     RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n         ns, conf);\n+    int[] capacityWeights \u003d parseCapacityWeights(priorityLevels, ns, conf);\n     BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n-        priorityLevels, maxSize, ns, conf);\n+        priorityLevels, maxSize, ns, capacityWeights, conf);\n \n     // Our current queue becomes the old queue\n     BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n \n     // Swap putRef first: allow blocked puts() to be unblocked\n     putRef.set(newQ);\n \n     // Wait for handlers to drain the oldQ\n     while (!queueIsReallyEmpty(oldQ)) {}\n \n     // Swap takeRef to handle new calls\n     takeRef.set(newQ);\n \n     this.scheduler \u003d newScheduler;\n \n     LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n       \"Replacement: \" + stringRepr(newQ));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void swapQueue(\n      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n      String ns, Configuration conf) {\n    int priorityLevels \u003d parseNumLevels(ns, conf);\n    this.scheduler.stop();\n    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n        ns, conf);\n    int[] capacityWeights \u003d parseCapacityWeights(priorityLevels, ns, conf);\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n        priorityLevels, maxSize, ns, capacityWeights, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    this.scheduler \u003d newScheduler;\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
      "extendedDetails": {}
    },
    "4ea2778acb78f31b470e318d2b65ea43db76909b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14207. \"dfsadmin -refreshCallQueue\" fails with DecayRpcScheduler. Contributed by Surendra Singh Lihore.\n",
      "commitDate": "25/04/17 6:45 PM",
      "commitName": "4ea2778acb78f31b470e318d2b65ea43db76909b",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "16/06/16 6:20 PM",
      "commitNameOld": "a2a5cb60b09491cb672978ba9442f02373392c67",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 313.02,
      "commitsBetweenForRepo": 2084,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public synchronized void swapQueue(\n       Class\u003c? extends RpcScheduler\u003e schedulerClass,\n       Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n       String ns, Configuration conf) {\n     int priorityLevels \u003d parseNumLevels(ns, conf);\n+    this.scheduler.stop();\n     RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n         ns, conf);\n     BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n         priorityLevels, maxSize, ns, conf);\n \n     // Our current queue becomes the old queue\n     BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n \n     // Swap putRef first: allow blocked puts() to be unblocked\n     putRef.set(newQ);\n \n     // Wait for handlers to drain the oldQ\n     while (!queueIsReallyEmpty(oldQ)) {}\n \n     // Swap takeRef to handle new calls\n     takeRef.set(newQ);\n \n     this.scheduler \u003d newScheduler;\n \n     LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n       \"Replacement: \" + stringRepr(newQ));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void swapQueue(\n      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n      String ns, Configuration conf) {\n    int priorityLevels \u003d parseNumLevels(ns, conf);\n    this.scheduler.stop();\n    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n        ns, conf);\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n        priorityLevels, maxSize, ns, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    this.scheduler \u003d newScheduler;\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
      "extendedDetails": {}
    },
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
          "commitDate": "31/03/16 8:42 AM",
          "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "29/03/16 12:08 PM",
          "commitNameOld": "46a5245db95f2aad199100d2886381398070124f",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,27 @@\n   public synchronized void swapQueue(\n+      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n       Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n       String ns, Configuration conf) {\n-    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n-      ns, conf);\n+    int priorityLevels \u003d parseNumLevels(ns, conf);\n+    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n+        ns, conf);\n+    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n+        priorityLevels, maxSize, ns, conf);\n \n     // Our current queue becomes the old queue\n     BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n \n     // Swap putRef first: allow blocked puts() to be unblocked\n     putRef.set(newQ);\n \n     // Wait for handlers to drain the oldQ\n     while (!queueIsReallyEmpty(oldQ)) {}\n \n     // Swap takeRef to handle new calls\n     takeRef.set(newQ);\n \n+    this.scheduler \u003d newScheduler;\n+\n     LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n       \"Replacement: \" + stringRepr(newQ));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void swapQueue(\n      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n      String ns, Configuration conf) {\n    int priorityLevels \u003d parseNumLevels(ns, conf);\n    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n        ns, conf);\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n        priorityLevels, maxSize, ns, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    this.scheduler \u003d newScheduler;\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
          "extendedDetails": {
            "oldValue": "[queueClassToUse-Class\u003c? extends BlockingQueue\u003cE\u003e\u003e, maxSize-int, ns-String, conf-Configuration]",
            "newValue": "[schedulerClass-Class\u003c? extends RpcScheduler\u003e, queueClassToUse-Class\u003c? extends BlockingQueue\u003cE\u003e\u003e, maxSize-int, ns-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
          "commitDate": "31/03/16 8:42 AM",
          "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "29/03/16 12:08 PM",
          "commitNameOld": "46a5245db95f2aad199100d2886381398070124f",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,27 @@\n   public synchronized void swapQueue(\n+      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n       Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n       String ns, Configuration conf) {\n-    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n-      ns, conf);\n+    int priorityLevels \u003d parseNumLevels(ns, conf);\n+    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n+        ns, conf);\n+    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n+        priorityLevels, maxSize, ns, conf);\n \n     // Our current queue becomes the old queue\n     BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n \n     // Swap putRef first: allow blocked puts() to be unblocked\n     putRef.set(newQ);\n \n     // Wait for handlers to drain the oldQ\n     while (!queueIsReallyEmpty(oldQ)) {}\n \n     // Swap takeRef to handle new calls\n     takeRef.set(newQ);\n \n+    this.scheduler \u003d newScheduler;\n+\n     LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n       \"Replacement: \" + stringRepr(newQ));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void swapQueue(\n      Class\u003c? extends RpcScheduler\u003e schedulerClass,\n      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n      String ns, Configuration conf) {\n    int priorityLevels \u003d parseNumLevels(ns, conf);\n    RpcScheduler newScheduler \u003d createScheduler(schedulerClass, priorityLevels,\n        ns, conf);\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse,\n        priorityLevels, maxSize, ns, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    this.scheduler \u003d newScheduler;\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "37cb314f79f515421cfc2c3605382bf1534dc266": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-10407. Fix the javac warnings in org.apache.hadoop.ipc package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577710 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 2:12 PM",
      "commitName": "37cb314f79f515421cfc2c3605382bf1534dc266",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "21/02/14 12:53 PM",
      "commitNameOld": "d61d1c120d5cecc97514e2f8d79dacdbd4e610a3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n-  public synchronized void swapQueue(Class queueClassToUse, int maxSize,\n-    String ns, Configuration conf) {\n+  public synchronized void swapQueue(\n+      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n+      String ns, Configuration conf) {\n     BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n       ns, conf);\n \n     // Our current queue becomes the old queue\n     BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n \n     // Swap putRef first: allow blocked puts() to be unblocked\n     putRef.set(newQ);\n \n     // Wait for handlers to drain the oldQ\n     while (!queueIsReallyEmpty(oldQ)) {}\n \n     // Swap takeRef to handle new calls\n     takeRef.set(newQ);\n \n     LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n       \"Replacement: \" + stringRepr(newQ));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void swapQueue(\n      Class\u003c? extends BlockingQueue\u003cE\u003e\u003e queueClassToUse, int maxSize,\n      String ns, Configuration conf) {\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n      ns, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java",
      "extendedDetails": {
        "oldValue": "[queueClassToUse-Class, maxSize-int, ns-String, conf-Configuration]",
        "newValue": "[queueClassToUse-Class\u003c? extends BlockingQueue\u003cE\u003e\u003e, maxSize-int, ns-String, conf-Configuration]"
      }
    },
    "d61d1c120d5cecc97514e2f8d79dacdbd4e610a3": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10278. Refactor to make CallQueue pluggable. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570703 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/02/14 12:53 PM",
      "commitName": "d61d1c120d5cecc97514e2f8d79dacdbd4e610a3",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,20 @@\n+  public synchronized void swapQueue(Class queueClassToUse, int maxSize,\n+    String ns, Configuration conf) {\n+    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n+      ns, conf);\n+\n+    // Our current queue becomes the old queue\n+    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n+\n+    // Swap putRef first: allow blocked puts() to be unblocked\n+    putRef.set(newQ);\n+\n+    // Wait for handlers to drain the oldQ\n+    while (!queueIsReallyEmpty(oldQ)) {}\n+\n+    // Swap takeRef to handle new calls\n+    takeRef.set(newQ);\n+\n+    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n+      \"Replacement: \" + stringRepr(newQ));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void swapQueue(Class queueClassToUse, int maxSize,\n    String ns, Configuration conf) {\n    BlockingQueue\u003cE\u003e newQ \u003d createCallQueueInstance(queueClassToUse, maxSize,\n      ns, conf);\n\n    // Our current queue becomes the old queue\n    BlockingQueue\u003cE\u003e oldQ \u003d putRef.get();\n\n    // Swap putRef first: allow blocked puts() to be unblocked\n    putRef.set(newQ);\n\n    // Wait for handlers to drain the oldQ\n    while (!queueIsReallyEmpty(oldQ)) {}\n\n    // Swap takeRef to handle new calls\n    takeRef.set(newQ);\n\n    LOG.info(\"Old Queue: \" + stringRepr(oldQ) + \", \" +\n      \"Replacement: \" + stringRepr(newQ));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallQueueManager.java"
    }
  }
}