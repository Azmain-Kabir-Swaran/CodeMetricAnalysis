{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionName": "create",
  "functionId": "create___controller-RpcController__req-CreateRequestProto",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
  "functionStartLine": 487,
  "functionEndLine": 510,
  "numCommitsSeen": 141,
  "timeTaken": 5044,
  "changeHistory": [
    "0d7a5ac5f526801367a9ec963e6d72783b637d55",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b",
    "991c453ca3ac141a3f286f74af8401f83c38b230",
    "4525c4a25ba90163c9543116e2bd54239e0dd097",
    "d8dfcdcbc2e2df3aa1d7b309f263434739475e7e",
    "48da033901d3471ef176a94104158546152353e9"
  ],
  "changeHistoryShort": {
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": "Ybodychange",
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": "Ybodychange",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ybodychange",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b": "Ybodychange",
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Ybodychange",
    "4525c4a25ba90163c9543116e2bd54239e0dd097": "Ybodychange",
    "d8dfcdcbc2e2df3aa1d7b309f263434739475e7e": "Ybodychange",
    "48da033901d3471ef176a94104158546152353e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
      "commitDate": "14/02/19 8:43 AM",
      "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "652b257478f723a9e119e5e9181f3c7450ac92b5",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 51.96,
      "commitsBetweenForRepo": 332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       FsPermission masked \u003d req.hasUnmasked() ?\n           FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n               PBHelperClient.convert(req.getUnmasked())) :\n           PBHelperClient.convert(req.getMasked());\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n           masked, req.getClientName(),\n           PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n           (short) req.getReplication(), req.getBlockSize(),\n           PBHelperClient.convertCryptoProtocolVersions(\n               req.getCryptoProtocolVersionList()),\n-          req.getEcPolicyName());\n+          req.getEcPolicyName(), req.getStoragePolicy());\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      FsPermission masked \u003d req.hasUnmasked() ?\n          FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n              PBHelperClient.convert(req.getUnmasked())) :\n          PBHelperClient.convert(req.getMasked());\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          masked, req.getClientName(),\n          PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(),\n          PBHelperClient.convertCryptoProtocolVersions(\n              req.getCryptoProtocolVersionList()),\n          req.getEcPolicyName(), req.getStoragePolicy());\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "a7312715a66dec5173c3a0a78dff4e0333e7f0b1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10996. Ability to specify per-file EC policy at create time. Contributed by SammiChen.\n",
      "commitDate": "12/04/17 12:27 PM",
      "commitName": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "01/03/17 2:36 AM",
      "commitNameOld": "82ef9accafe7318278efb169678e17065e082c8e",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 42.37,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       FsPermission masked \u003d req.hasUnmasked() ?\n           FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n               PBHelperClient.convert(req.getUnmasked())) :\n           PBHelperClient.convert(req.getMasked());\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n           masked, req.getClientName(),\n           PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n           (short) req.getReplication(), req.getBlockSize(),\n           PBHelperClient.convertCryptoProtocolVersions(\n-              req.getCryptoProtocolVersionList()));\n+              req.getCryptoProtocolVersionList()),\n+          req.getEcPolicyName());\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      FsPermission masked \u003d req.hasUnmasked() ?\n          FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n              PBHelperClient.convert(req.getUnmasked())) :\n          PBHelperClient.convert(req.getMasked());\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          masked, req.getClientName(),\n          PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(),\n          PBHelperClient.convertCryptoProtocolVersions(\n              req.getCryptoProtocolVersionList()),\n          req.getEcPolicyName());\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "22/08/16 6:29 PM",
      "commitNameOld": "c49333becfa7652460976a61eb86522010bcfeed",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.69,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n+      FsPermission masked \u003d req.hasUnmasked() ?\n+          FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n+              PBHelperClient.convert(req.getUnmasked())) :\n+          PBHelperClient.convert(req.getMasked());\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n-          PBHelperClient.convert(req.getMasked()), req.getClientName(),\n+          masked, req.getClientName(),\n           PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n           (short) req.getReplication(), req.getBlockSize(),\n           PBHelperClient.convertCryptoProtocolVersions(\n               req.getCryptoProtocolVersionList()));\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      FsPermission masked \u003d req.hasUnmasked() ?\n          FsCreateModes.create(PBHelperClient.convert(req.getMasked()),\n              PBHelperClient.convert(req.getUnmasked())) :\n          PBHelperClient.convert(req.getMasked());\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          masked, req.getClientName(),\n          PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(),\n          PBHelperClient.convertCryptoProtocolVersions(\n              req.getCryptoProtocolVersionList()));\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.18,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n-          PBHelper.convert(req.getMasked()), req.getClientName(),\n-          PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n+          PBHelperClient.convert(req.getMasked()), req.getClientName(),\n+          PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n           (short) req.getReplication(), req.getBlockSize(),\n-          PBHelper.convertCryptoProtocolVersions(\n+          PBHelperClient.convertCryptoProtocolVersions(\n               req.getCryptoProtocolVersionList()));\n \n       if (result !\u003d null) {\n-        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n+        return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          PBHelperClient.convert(req.getMasked()), req.getClientName(),\n          PBHelperClient.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(),\n          PBHelperClient.convertCryptoProtocolVersions(\n              req.getCryptoProtocolVersionList()));\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelperClient.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 7:11 PM",
      "commitNameOld": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n           PBHelper.convert(req.getMasked()), req.getClientName(),\n           PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n-          (short) req.getReplication(), req.getBlockSize(), \n-          PBHelper.convertCipherSuiteProtos(req.getCipherSuitesList()));\n+          (short) req.getReplication(), req.getBlockSize(),\n+          PBHelper.convertCryptoProtocolVersions(\n+              req.getCryptoProtocolVersionList()));\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          PBHelper.convert(req.getMasked()), req.getClientName(),\n          PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(),\n          PBHelper.convertCryptoProtocolVersions(\n              req.getCryptoProtocolVersionList()));\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "51b97a1396a4cb32aaa08b451985a6af236c0c4b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6605.Client server negotiation of cipher suite. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607499 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/14 4:08 PM",
      "commitName": "51b97a1396a4cb32aaa08b451985a6af236c0c4b",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/06/14 11:13 AM",
      "commitNameOld": "c5b7236d9c3240f6cefc1782bc7926a678d104f4",
      "commitAuthorOld": "",
      "daysBetweenCommits": 16.2,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n           PBHelper.convert(req.getMasked()), req.getClientName(),\n           PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n-          (short) req.getReplication(), req.getBlockSize());\n+          (short) req.getReplication(), req.getBlockSize(), \n+          PBHelper.convertCipherSuiteProtos(req.getCipherSuitesList()));\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          PBHelper.convert(req.getMasked()), req.getClientName(),\n          PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize(), \n          PBHelper.convertCipherSuiteProtos(req.getCipherSuitesList()));\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "05/12/13 3:41 PM",
      "commitNameOld": "00718c2ffaa11cbdabac6f5ef4b2de5dcf9d6859",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.8,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       HdfsFileStatus result \u003d server.create(req.getSrc(),\n           PBHelper.convert(req.getMasked()), req.getClientName(),\n-          PBHelper.convert(req.getCreateFlag()), req.getCreateParent(),\n+          PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n           (short) req.getReplication(), req.getBlockSize());\n \n       if (result !\u003d null) {\n         return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n             .build();\n       }\n       return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          PBHelper.convert(req.getMasked()), req.getClientName(),\n          PBHelper.convertCreateFlag(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize());\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "4525c4a25ba90163c9543116e2bd54239e0dd097": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4340. Update addBlock() to inculde inode id as additional argument. Contributed Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1443169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/13 11:52 AM",
      "commitName": "4525c4a25ba90163c9543116e2bd54239e0dd097",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "17/01/13 10:21 AM",
      "commitNameOld": "8f70a25b1c5df498c441a9b3475a8ada5a92111f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 20.06,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,17 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n-      server.create(req.getSrc(), PBHelper.convert(req.getMasked()),\n-          req.getClientName(), PBHelper.convert(req.getCreateFlag()),\n-          req.getCreateParent(), (short) req.getReplication(),\n-          req.getBlockSize());\n+      HdfsFileStatus result \u003d server.create(req.getSrc(),\n+          PBHelper.convert(req.getMasked()), req.getClientName(),\n+          PBHelper.convert(req.getCreateFlag()), req.getCreateParent(),\n+          (short) req.getReplication(), req.getBlockSize());\n+\n+      if (result !\u003d null) {\n+        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n+            .build();\n+      }\n+      return VOID_CREATE_RESPONSE;\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n-    return VOID_CREATE_RESPONSE;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      HdfsFileStatus result \u003d server.create(req.getSrc(),\n          PBHelper.convert(req.getMasked()), req.getClientName(),\n          PBHelper.convert(req.getCreateFlag()), req.getCreateParent(),\n          (short) req.getReplication(), req.getBlockSize());\n\n      if (result !\u003d null) {\n        return CreateResponseProto.newBuilder().setFs(PBHelper.convert(result))\n            .build();\n      }\n      return VOID_CREATE_RESPONSE;\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "d8dfcdcbc2e2df3aa1d7b309f263434739475e7e": {
      "type": "Ybodychange",
      "commitMessage": "    HDFS-2669 Enable protobuf rpc for ClientNamenodeProtocol\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214128 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/11 1:27 AM",
      "commitName": "d8dfcdcbc2e2df3aa1d7b309f263434739475e7e",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "13/12/11 3:31 PM",
      "commitNameOld": "3954a2fb1cbc7a8a0d1ad5859e7f5c9415530f4c",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,12 @@\n   public CreateResponseProto create(RpcController controller,\n       CreateRequestProto req) throws ServiceException {\n     try {\n       server.create(req.getSrc(), PBHelper.convert(req.getMasked()),\n           req.getClientName(), PBHelper.convert(req.getCreateFlag()),\n           req.getCreateParent(), (short) req.getReplication(),\n           req.getBlockSize());\n     } catch (IOException e) {\n       throw new ServiceException(e);\n     }\n-    return CreateResponseProto.newBuilder().build();\n-\n+    return VOID_CREATE_RESPONSE;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      server.create(req.getSrc(), PBHelper.convert(req.getMasked()),\n          req.getClientName(), PBHelper.convert(req.getCreateFlag()),\n          req.getCreateParent(), (short) req.getReplication(),\n          req.getBlockSize());\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n    return VOID_CREATE_RESPONSE;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java",
      "extendedDetails": {}
    },
    "48da033901d3471ef176a94104158546152353e9": {
      "type": "Yintroduced",
      "commitMessage": "    HDFS-2651 ClientNameNodeProtocol Translators for Protocol Buffers (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/11 9:36 PM",
      "commitName": "48da033901d3471ef176a94104158546152353e9",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,13 @@\n+  public CreateResponseProto create(RpcController controller,\n+      CreateRequestProto req) throws ServiceException {\n+    try {\n+      server.create(req.getSrc(), PBHelper.convert(req.getMasked()),\n+          req.getClientName(), PBHelper.convert(req.getCreateFlag()),\n+          req.getCreateParent(), (short) req.getReplication(),\n+          req.getBlockSize());\n+    } catch (IOException e) {\n+      throw new ServiceException(e);\n+    }\n+    return CreateResponseProto.newBuilder().build();\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CreateResponseProto create(RpcController controller,\n      CreateRequestProto req) throws ServiceException {\n    try {\n      server.create(req.getSrc(), PBHelper.convert(req.getMasked()),\n          req.getClientName(), PBHelper.convert(req.getCreateFlag()),\n          req.getCreateParent(), (short) req.getReplication(),\n          req.getBlockSize());\n    } catch (IOException e) {\n      throw new ServiceException(e);\n    }\n    return CreateResponseProto.newBuilder().build();\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java"
    }
  }
}