{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecayRpcScheduler.java",
  "functionName": "parseBackOffResponseTimeThreshold",
  "functionId": "parseBackOffResponseTimeThreshold___ns-String__conf-Configuration__numLevels-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
  "functionStartLine": 379,
  "functionEndLine": 402,
  "numCommitsSeen": 19,
  "timeTaken": 1267,
  "changeHistory": [
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc"
  ],
  "changeHistoryShort": {
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,24 @@\n+  private static long[] parseBackOffResponseTimeThreshold(String ns,\n+      Configuration conf, int numLevels) {\n+    long[] responseTimeThresholds \u003d conf.getTimeDurations(ns + \".\" +\n+            IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_THRESHOLDS_KEY,\n+        TimeUnit.MILLISECONDS);\n+    // backoff thresholds not specified\n+    if (responseTimeThresholds.length \u003d\u003d 0) {\n+      return getDefaultBackOffResponseTimeThresholds(numLevels);\n+    }\n+    // backoff thresholds specified but not match with the levels\n+    if (responseTimeThresholds.length !\u003d numLevels) {\n+      throw new IllegalArgumentException(\n+          \"responseTimeThresholds must match with the number of priority \" +\n+          \"levels\");\n+    }\n+    // invalid thresholds\n+    for (long responseTimeThreshold: responseTimeThresholds) {\n+      if (responseTimeThreshold \u003c\u003d 0) {\n+        throw new IllegalArgumentException(\n+            \"responseTimeThreshold millis must be \u003e\u003d 0\");\n+      }\n+    }\n+    return responseTimeThresholds;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static long[] parseBackOffResponseTimeThreshold(String ns,\n      Configuration conf, int numLevels) {\n    long[] responseTimeThresholds \u003d conf.getTimeDurations(ns + \".\" +\n            IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_THRESHOLDS_KEY,\n        TimeUnit.MILLISECONDS);\n    // backoff thresholds not specified\n    if (responseTimeThresholds.length \u003d\u003d 0) {\n      return getDefaultBackOffResponseTimeThresholds(numLevels);\n    }\n    // backoff thresholds specified but not match with the levels\n    if (responseTimeThresholds.length !\u003d numLevels) {\n      throw new IllegalArgumentException(\n          \"responseTimeThresholds must match with the number of priority \" +\n          \"levels\");\n    }\n    // invalid thresholds\n    for (long responseTimeThreshold: responseTimeThresholds) {\n      if (responseTimeThreshold \u003c\u003d 0) {\n        throw new IllegalArgumentException(\n            \"responseTimeThreshold millis must be \u003e\u003d 0\");\n      }\n    }\n    return responseTimeThresholds;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java"
    }
  }
}