{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "validateStoragePolicySatisfy",
  "functionId": "validateStoragePolicySatisfy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 2459,
  "functionEndLine": 2473,
  "numCommitsSeen": 873,
  "timeTaken": 8231,
  "changeHistory": [
    "a700803a18fb957d2799001a2ce1dcb70f75c080",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308"
  ],
  "changeHistoryShort": {
    "a700803a18fb957d2799001a2ce1dcb70f75c080": "Ybodychange",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": "Ybodychange",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": "Ybodychange",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": "Ybodychange",
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a700803a18fb957d2799001a2ce1dcb70f75c080": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15154. Allow only hdfs superusers the ability to assign HDFS storage policies. Contributed by Siddharth Wagle.\n\nChange-Id: I32d6dd2837945b8fc026a759aa367c55daefe348\n",
      "commitDate": "25/03/20 10:28 AM",
      "commitName": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/03/20 10:26 AM",
      "commitNameOld": "ea87d6049340d1df040047aa08ce7784c03dd69e",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,15 @@\n   private void validateStoragePolicySatisfy()\n       throws UnsupportedActionException, IOException {\n-    // make sure storage policy is enabled, otherwise\n-    // there is no need to satisfy storage policy.\n-    if (!dir.isStoragePolicyEnabled()) {\n-      throw new IOException(String.format(\n-          \"Failed to satisfy storage policy since %s is set to false.\",\n-          DFS_STORAGE_POLICY_ENABLED_KEY));\n-    }\n     // checks sps status\n     boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n     if (disabled) {\n       throw new UnsupportedActionException(\n           \"Cannot request to satisfy storage policy \"\n               + \"when storage policy satisfier feature has been disabled\"\n               + \" by admin. Seek for an admin help to enable it \"\n               + \"or use Mover tool.\");\n     }\n     // checks SPS Q has many outstanding requests. It will throw IOException if\n     // the limit exceeds.\n     blockManager.getSPSManager().verifyOutstandingPathQLimit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateStoragePolicySatisfy()\n      throws UnsupportedActionException, IOException {\n    // checks sps status\n    boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n    if (disabled) {\n      throw new UnsupportedActionException(\n          \"Cannot request to satisfy storage policy \"\n              + \"when storage policy satisfier feature has been disabled\"\n              + \" by admin. Seek for an admin help to enable it \"\n              + \"or use Mover tool.\");\n    }\n    // checks SPS Q has many outstanding requests. It will throw IOException if\n    // the limit exceeds.\n    blockManager.getSPSManager().verifyOutstandingPathQLimit();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   private void validateStoragePolicySatisfy()\n       throws UnsupportedActionException, IOException {\n     // make sure storage policy is enabled, otherwise\n     // there is no need to satisfy storage policy.\n     if (!dir.isStoragePolicyEnabled()) {\n       throw new IOException(String.format(\n           \"Failed to satisfy storage policy since %s is set to false.\",\n           DFS_STORAGE_POLICY_ENABLED_KEY));\n     }\n     // checks sps status\n     boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n-    if (disabled || (blockManager\n-        .getSPSManager().getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n-        \u0026\u0026 !blockManager.getSPSManager().isInternalSatisfierRunning())) {\n+    if (disabled) {\n       throw new UnsupportedActionException(\n           \"Cannot request to satisfy storage policy \"\n               + \"when storage policy satisfier feature has been disabled\"\n               + \" by admin. Seek for an admin help to enable it \"\n               + \"or use Mover tool.\");\n     }\n     // checks SPS Q has many outstanding requests. It will throw IOException if\n     // the limit exceeds.\n     blockManager.getSPSManager().verifyOutstandingPathQLimit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateStoragePolicySatisfy()\n      throws UnsupportedActionException, IOException {\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    if (!dir.isStoragePolicyEnabled()) {\n      throw new IOException(String.format(\n          \"Failed to satisfy storage policy since %s is set to false.\",\n          DFS_STORAGE_POLICY_ENABLED_KEY));\n    }\n    // checks sps status\n    boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n    if (disabled) {\n      throw new UnsupportedActionException(\n          \"Cannot request to satisfy storage policy \"\n              + \"when storage policy satisfier feature has been disabled\"\n              + \" by admin. Seek for an admin help to enable it \"\n              + \"or use Mover tool.\");\n    }\n    // checks SPS Q has many outstanding requests. It will throw IOException if\n    // the limit exceeds.\n    blockManager.getSPSManager().verifyOutstandingPathQLimit();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private void validateStoragePolicySatisfy()\n       throws UnsupportedActionException, IOException {\n     // make sure storage policy is enabled, otherwise\n     // there is no need to satisfy storage policy.\n     if (!dir.isStoragePolicyEnabled()) {\n       throw new IOException(String.format(\n           \"Failed to satisfy storage policy since %s is set to false.\",\n           DFS_STORAGE_POLICY_ENABLED_KEY));\n     }\n     // checks sps status\n-    if (!blockManager.getSPSManager().isEnabled() || (blockManager\n+    boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n+    if (disabled || (blockManager\n         .getSPSManager().getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n         \u0026\u0026 !blockManager.getSPSManager().isInternalSatisfierRunning())) {\n       throw new UnsupportedActionException(\n           \"Cannot request to satisfy storage policy \"\n               + \"when storage policy satisfier feature has been disabled\"\n               + \" by admin. Seek for an admin help to enable it \"\n               + \"or use Mover tool.\");\n     }\n     // checks SPS Q has many outstanding requests. It will throw IOException if\n     // the limit exceeds.\n     blockManager.getSPSManager().verifyOutstandingPathQLimit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateStoragePolicySatisfy()\n      throws UnsupportedActionException, IOException {\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    if (!dir.isStoragePolicyEnabled()) {\n      throw new IOException(String.format(\n          \"Failed to satisfy storage policy since %s is set to false.\",\n          DFS_STORAGE_POLICY_ENABLED_KEY));\n    }\n    // checks sps status\n    boolean disabled \u003d (blockManager.getSPSManager() \u003d\u003d null);\n    if (disabled || (blockManager\n        .getSPSManager().getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n        \u0026\u0026 !blockManager.getSPSManager().isInternalSatisfierRunning())) {\n      throw new UnsupportedActionException(\n          \"Cannot request to satisfy storage policy \"\n              + \"when storage policy satisfier feature has been disabled\"\n              + \" by admin. Seek for an admin help to enable it \"\n              + \"or use Mover tool.\");\n    }\n    // checks SPS Q has many outstanding requests. It will throw IOException if\n    // the limit exceeds.\n    blockManager.getSPSManager().verifyOutstandingPathQLimit();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private void validateStoragePolicySatisfy()\n       throws UnsupportedActionException, IOException {\n     // make sure storage policy is enabled, otherwise\n     // there is no need to satisfy storage policy.\n     if (!dir.isStoragePolicyEnabled()) {\n       throw new IOException(String.format(\n           \"Failed to satisfy storage policy since %s is set to false.\",\n           DFS_STORAGE_POLICY_ENABLED_KEY));\n     }\n     // checks sps status\n-    if (!blockManager.isSPSEnabled()\n-        || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n-            \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n+    if (!blockManager.getSPSManager().isEnabled() || (blockManager\n+        .getSPSManager().getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n+        \u0026\u0026 !blockManager.getSPSManager().isInternalSatisfierRunning())) {\n       throw new UnsupportedActionException(\n           \"Cannot request to satisfy storage policy \"\n               + \"when storage policy satisfier feature has been disabled\"\n               + \" by admin. Seek for an admin help to enable it \"\n               + \"or use Mover tool.\");\n     }\n-    // checks SPS Q has many outstanding requests.\n-    blockManager.verifyOutstandingSPSPathQLimit();\n+    // checks SPS Q has many outstanding requests. It will throw IOException if\n+    // the limit exceeds.\n+    blockManager.getSPSManager().verifyOutstandingPathQLimit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateStoragePolicySatisfy()\n      throws UnsupportedActionException, IOException {\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    if (!dir.isStoragePolicyEnabled()) {\n      throw new IOException(String.format(\n          \"Failed to satisfy storage policy since %s is set to false.\",\n          DFS_STORAGE_POLICY_ENABLED_KEY));\n    }\n    // checks sps status\n    if (!blockManager.getSPSManager().isEnabled() || (blockManager\n        .getSPSManager().getMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n        \u0026\u0026 !blockManager.getSPSManager().isInternalSatisfierRunning())) {\n      throw new UnsupportedActionException(\n          \"Cannot request to satisfy storage policy \"\n              + \"when storage policy satisfier feature has been disabled\"\n              + \" by admin. Seek for an admin help to enable it \"\n              + \"or use Mover tool.\");\n    }\n    // checks SPS Q has many outstanding requests. It will throw IOException if\n    // the limit exceeds.\n    blockManager.getSPSManager().verifyOutstandingPathQLimit();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13077. [SPS]: Fix review comments of external storage policy satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "d3de4fb2a084cbadab8ef91f11aa7732d3b0f308",
      "commitAuthor": "Surendra Singh Lilhore",
      "diff": "@@ -0,0 +1,22 @@\n+  private void validateStoragePolicySatisfy()\n+      throws UnsupportedActionException, IOException {\n+    // make sure storage policy is enabled, otherwise\n+    // there is no need to satisfy storage policy.\n+    if (!dir.isStoragePolicyEnabled()) {\n+      throw new IOException(String.format(\n+          \"Failed to satisfy storage policy since %s is set to false.\",\n+          DFS_STORAGE_POLICY_ENABLED_KEY));\n+    }\n+    // checks sps status\n+    if (!blockManager.isSPSEnabled()\n+        || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n+            \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n+      throw new UnsupportedActionException(\n+          \"Cannot request to satisfy storage policy \"\n+              + \"when storage policy satisfier feature has been disabled\"\n+              + \" by admin. Seek for an admin help to enable it \"\n+              + \"or use Mover tool.\");\n+    }\n+    // checks SPS Q has many outstanding requests.\n+    blockManager.verifyOutstandingSPSPathQLimit();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateStoragePolicySatisfy()\n      throws UnsupportedActionException, IOException {\n    // make sure storage policy is enabled, otherwise\n    // there is no need to satisfy storage policy.\n    if (!dir.isStoragePolicyEnabled()) {\n      throw new IOException(String.format(\n          \"Failed to satisfy storage policy since %s is set to false.\",\n          DFS_STORAGE_POLICY_ENABLED_KEY));\n    }\n    // checks sps status\n    if (!blockManager.isSPSEnabled()\n        || (blockManager.getSPSMode() \u003d\u003d StoragePolicySatisfierMode.INTERNAL\n            \u0026\u0026 !blockManager.getStoragePolicySatisfier().isRunning())) {\n      throw new UnsupportedActionException(\n          \"Cannot request to satisfy storage policy \"\n              + \"when storage policy satisfier feature has been disabled\"\n              + \" by admin. Seek for an admin help to enable it \"\n              + \"or use Mover tool.\");\n    }\n    // checks SPS Q has many outstanding requests.\n    blockManager.verifyOutstandingSPSPathQLimit();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}