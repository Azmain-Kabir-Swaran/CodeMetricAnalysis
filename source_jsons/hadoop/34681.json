{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "authorizeGetAndStopContainerRequest",
  "functionId": "authorizeGetAndStopContainerRequest___containerId-ContainerId__container-Container__stopRequest-boolean__identifier-NMTokenIdentifier__remoteUser-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1532,
  "functionEndLine": 1567,
  "numCommitsSeen": 296,
  "timeTaken": 5613,
  "changeHistory": [
    "32fe351bb654e684f127f47ab808c497e0d3f258",
    "59bfcbf3579e45ddf96db3aafccf669c8e03648f",
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa",
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "243bcd367ff3130d74676280233041f88aca62a5"
  ],
  "changeHistoryShort": {
    "32fe351bb654e684f127f47ab808c497e0d3f258": "Ymultichange(Yparameterchange,Ybodychange)",
    "59bfcbf3579e45ddf96db3aafccf669c8e03648f": "Ybodychange",
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa": "Ybodychange",
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f": "Ybodychange",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": "Ybodychange",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ymultichange(Yparameterchange,Ybodychange)",
    "243bcd367ff3130d74676280233041f88aca62a5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "32fe351bb654e684f127f47ab808c497e0d3f258": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
      "commitDate": "18/10/18 8:28 AM",
      "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
          "commitDate": "18/10/18 8:28 AM",
          "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 21.86,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n-      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n+      Container container, boolean stopRequest, NMTokenIdentifier identifier,\n+      String remoteUser)\n       throws YarnException {\n     if (identifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n     ApplicationId nmTokenAppId \u003d\n         identifier.getApplicationAttemptId().getApplicationId();\n     \n     if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n         || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n             .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n       String msg;\n       if (stopRequest) {\n         msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + containerId;\n-        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n+        NMAuditLogger.logFailure(remoteUser, AuditConstants.STOP_CONTAINER,\n             \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n             nmTokenAppId, containerId);\n       } else {\n         msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to get status for non-application container : \"\n             + containerId;\n       }\n       LOG.warn(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier,\n      String remoteUser)\n      throws YarnException {\n    if (identifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n    ApplicationId nmTokenAppId \u003d\n        identifier.getApplicationAttemptId().getApplicationId();\n    \n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n            .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n      String msg;\n      if (stopRequest) {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + containerId;\n        NMAuditLogger.logFailure(remoteUser, AuditConstants.STOP_CONTAINER,\n            \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n            nmTokenAppId, containerId);\n      } else {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + containerId;\n      }\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, container-Container, stopRequest-boolean, identifier-NMTokenIdentifier]",
            "newValue": "[containerId-ContainerId, container-Container, stopRequest-boolean, identifier-NMTokenIdentifier, remoteUser-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8864. NM incorrectly logs container user as the user who sent a start/stop container request in its audit log. (Contributed by Wilfred Spiegelenburg)\n",
          "commitDate": "18/10/18 8:28 AM",
          "commitName": "32fe351bb654e684f127f47ab808c497e0d3f258",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 21.86,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n-      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n+      Container container, boolean stopRequest, NMTokenIdentifier identifier,\n+      String remoteUser)\n       throws YarnException {\n     if (identifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n     ApplicationId nmTokenAppId \u003d\n         identifier.getApplicationAttemptId().getApplicationId();\n     \n     if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n         || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n             .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n       String msg;\n       if (stopRequest) {\n         msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + containerId;\n-        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n+        NMAuditLogger.logFailure(remoteUser, AuditConstants.STOP_CONTAINER,\n             \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n             nmTokenAppId, containerId);\n       } else {\n         msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to get status for non-application container : \"\n             + containerId;\n       }\n       LOG.warn(msg);\n       throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier,\n      String remoteUser)\n      throws YarnException {\n    if (identifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n    ApplicationId nmTokenAppId \u003d\n        identifier.getApplicationAttemptId().getApplicationId();\n    \n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n            .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n      String msg;\n      if (stopRequest) {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + containerId;\n        NMAuditLogger.logFailure(remoteUser, AuditConstants.STOP_CONTAINER,\n            \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n            nmTokenAppId, containerId);\n      } else {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + containerId;\n      }\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "59bfcbf3579e45ddf96db3aafccf669c8e03648f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5836. Malicious AM can kill containers of other apps running in any node its containers are running. Contributed by Botong Huang\n",
      "commitDate": "16/11/16 2:21 PM",
      "commitName": "59bfcbf3579e45ddf96db3aafccf669c8e03648f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/11/16 7:56 AM",
      "commitNameOld": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n       Container container, boolean stopRequest, NMTokenIdentifier identifier)\n       throws YarnException {\n     if (identifier \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n     }\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n     ApplicationId nmTokenAppId \u003d\n         identifier.getApplicationAttemptId().getApplicationId();\n     \n     if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n         || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n             .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n+      String msg;\n       if (stopRequest) {\n-        LOG.warn(identifier.getApplicationAttemptId()\n+        msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n-            + container.getContainerId());\n+            + containerId;\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n-          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n-          nmTokenAppId, container.getContainerId());\n+            \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n+            nmTokenAppId, containerId);\n       } else {\n-        LOG.warn(identifier.getApplicationAttemptId()\n+        msg \u003d identifier.getApplicationAttemptId()\n             + \" attempted to get status for non-application container : \"\n-            + container.getContainerId());\n+            + containerId;\n       }\n+      LOG.warn(msg);\n+      throw RPCUtil.getRemoteException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    if (identifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n    ApplicationId nmTokenAppId \u003d\n        identifier.getApplicationAttemptId().getApplicationId();\n    \n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n            .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n      String msg;\n      if (stopRequest) {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + containerId;\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n            \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n            nmTokenAppId, containerId);\n      } else {\n        msg \u003d identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + containerId;\n      }\n      LOG.warn(msg);\n      throw RPCUtil.getRemoteException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "bcf2890502fbd11dd394048fe30d67c92aeec4fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-644: Basic null check is not performed on passed in arguments before using them in ContainerManagerImpl.startContainer\n",
      "commitDate": "08/05/15 9:11 AM",
      "commitName": "bcf2890502fbd11dd394048fe30d67c92aeec4fa",
      "commitAuthor": "Robert (Bobby) Evans",
      "commitDateOld": "12/02/15 11:46 AM",
      "commitNameOld": "04f5ef18f7877ce30b12b1a3c1e851c420531b72",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 84.85,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n       Container container, boolean stopRequest, NMTokenIdentifier identifier)\n       throws YarnException {\n+    if (identifier \u003d\u003d null) {\n+      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n+    }\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n     ApplicationId nmTokenAppId \u003d\n         identifier.getApplicationAttemptId().getApplicationId();\n     \n     if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n         || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n             .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n       if (stopRequest) {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + container.getContainerId());\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n           \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n           nmTokenAppId, container.getContainerId());\n       } else {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to get status for non-application container : \"\n             + container.getContainerId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    if (identifier \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);\n    }\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n    ApplicationId nmTokenAppId \u003d\n        identifier.getApplicationAttemptId().getApplicationId();\n    \n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n            .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          nmTokenAppId, container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + container.getContainerId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2065 AM cannot create new containers after restart\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607441 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/14 11:35 AM",
      "commitName": "d1f54f4f4bed6c5f8e27bc80c3e33081f5c5d63f",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/06/14 1:08 PM",
      "commitNameOld": "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 21.94,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n       Container container, boolean stopRequest, NMTokenIdentifier identifier)\n       throws YarnException {\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n-\n-    if ((!identifier.getApplicationAttemptId().equals(\n-      containerId.getApplicationAttemptId()))\n-        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n-          container.getContainerId().getApplicationAttemptId()))) {\n+    ApplicationId nmTokenAppId \u003d\n+        identifier.getApplicationAttemptId().getApplicationId();\n+    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n+        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n+          .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n       if (stopRequest) {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n-            + container.getContainerId().toString());\n+            + container.getContainerId());\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n           \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n-          identifier.getApplicationAttemptId().getApplicationId(),\n-          container.getContainerId());\n+          nmTokenAppId, container.getContainerId());\n       } else {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to get status for non-application container : \"\n-            + container.getContainerId().toString());\n+            + container.getContainerId());\n       }\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n    ApplicationId nmTokenAppId \u003d\n        identifier.getApplicationAttemptId().getApplicationId();\n    if ((!nmTokenAppId.equals(containerId.getApplicationAttemptId().getApplicationId()))\n        || (container !\u003d null \u0026\u0026 !nmTokenAppId.equals(container\n          .getContainerId().getApplicationAttemptId().getApplicationId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          nmTokenAppId, container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + container.getContainerId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-903. Changed ContainerManager to suppress unnecessary warnings when stopping already stopped containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/13 11:54 PM",
      "commitName": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/07/13 3:23 PM",
      "commitNameOld": "c23cf3cddff9d4d52c2e892b26ba20e5640501e0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,30 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n       Container container, boolean stopRequest, NMTokenIdentifier identifier)\n       throws YarnException {\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n \n     if ((!identifier.getApplicationAttemptId().equals(\n       containerId.getApplicationAttemptId()))\n         || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n           container.getContainerId().getApplicationAttemptId()))) {\n       if (stopRequest) {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + container.getContainerId().toString());\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n           \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n           identifier.getApplicationAttemptId().getApplicationId(),\n           container.getContainerId());\n       } else {\n         LOG.warn(identifier.getApplicationAttemptId()\n-            + \" attempted to get get status for non-application container : \"\n+            + \" attempted to get status for non-application container : \"\n             + container.getContainerId().toString());\n       }\n-      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-          + \" is not started by this application attempt.\");\n     }\n \n-    if (container \u003d\u003d null) {\n-      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n-          + \" is not handled by this NodeManager\");\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n\n    if ((!identifier.getApplicationAttemptId().equals(\n      containerId.getApplicationAttemptId()))\n        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n          container.getContainerId().getApplicationAttemptId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId().toString());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          identifier.getApplicationAttemptId().getApplicationId(),\n          container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get status for non-application container : \"\n            + container.getContainerId().toString());\n      }\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n-      Container container, boolean stopRequest) throws YarnException {\n-\n-    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n-    NMTokenIdentifier identifier \u003d selectNMTokenIdentifier(remoteUgi);\n-\n+      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n+      throws YarnException {\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n \n     if ((!identifier.getApplicationAttemptId().equals(\n       containerId.getApplicationAttemptId()))\n         || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n           container.getContainerId().getApplicationAttemptId()))) {\n       if (stopRequest) {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + container.getContainerId().toString());\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n           \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n           identifier.getApplicationAttemptId().getApplicationId(),\n           container.getContainerId());\n       } else {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to get get status for non-application container : \"\n             + container.getContainerId().toString());\n       }\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is not started by this application attempt.\");\n     }\n \n     if (container \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is not handled by this NodeManager\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n\n    if ((!identifier.getApplicationAttemptId().equals(\n      containerId.getApplicationAttemptId()))\n        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n          container.getContainerId().getApplicationAttemptId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId().toString());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          identifier.getApplicationAttemptId().getApplicationId(),\n          container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get get status for non-application container : \"\n            + container.getContainerId().toString());\n      }\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not started by this application attempt.\");\n    }\n\n    if (container \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not handled by this NodeManager\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, container-Container, stopRequest-boolean]",
            "newValue": "[containerId-ContainerId, container-Container, stopRequest-boolean, identifier-NMTokenIdentifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/13 8:41 PM",
          "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/07/13 12:31 AM",
          "commitNameOld": "c6facfb10db3f7791e35dd02d11990924a89711f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 6.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n   protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n-      Container container, boolean stopRequest) throws YarnException {\n-\n-    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n-    NMTokenIdentifier identifier \u003d selectNMTokenIdentifier(remoteUgi);\n-\n+      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n+      throws YarnException {\n     /*\n      * For get/stop container status; we need to verify that 1) User (NMToken)\n      * application attempt only has started container. 2) Requested containerId\n      * belongs to the same application attempt (NMToken) which was used. (Note:-\n      * This will prevent user in knowing another application\u0027s containers).\n      */\n \n     if ((!identifier.getApplicationAttemptId().equals(\n       containerId.getApplicationAttemptId()))\n         || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n           container.getContainerId().getApplicationAttemptId()))) {\n       if (stopRequest) {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to stop non-application container : \"\n             + container.getContainerId().toString());\n         NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n           \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n           identifier.getApplicationAttemptId().getApplicationId(),\n           container.getContainerId());\n       } else {\n         LOG.warn(identifier.getApplicationAttemptId()\n             + \" attempted to get get status for non-application container : \"\n             + container.getContainerId().toString());\n       }\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is not started by this application attempt.\");\n     }\n \n     if (container \u003d\u003d null) {\n       throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n           + \" is not handled by this NodeManager\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest, NMTokenIdentifier identifier)\n      throws YarnException {\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n\n    if ((!identifier.getApplicationAttemptId().equals(\n      containerId.getApplicationAttemptId()))\n        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n          container.getContainerId().getApplicationAttemptId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId().toString());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          identifier.getApplicationAttemptId().getApplicationId(),\n          container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get get status for non-application container : \"\n            + container.getContainerId().toString());\n      }\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not started by this application attempt.\");\n    }\n\n    if (container \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not handled by this NodeManager\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n+      Container container, boolean stopRequest) throws YarnException {\n+\n+    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n+    NMTokenIdentifier identifier \u003d selectNMTokenIdentifier(remoteUgi);\n+\n+    /*\n+     * For get/stop container status; we need to verify that 1) User (NMToken)\n+     * application attempt only has started container. 2) Requested containerId\n+     * belongs to the same application attempt (NMToken) which was used. (Note:-\n+     * This will prevent user in knowing another application\u0027s containers).\n+     */\n+\n+    if ((!identifier.getApplicationAttemptId().equals(\n+      containerId.getApplicationAttemptId()))\n+        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n+          container.getContainerId().getApplicationAttemptId()))) {\n+      if (stopRequest) {\n+        LOG.warn(identifier.getApplicationAttemptId()\n+            + \" attempted to stop non-application container : \"\n+            + container.getContainerId().toString());\n+        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n+          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n+          identifier.getApplicationAttemptId().getApplicationId(),\n+          container.getContainerId());\n+      } else {\n+        LOG.warn(identifier.getApplicationAttemptId()\n+            + \" attempted to get get status for non-application container : \"\n+            + container.getContainerId().toString());\n+      }\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" is not started by this application attempt.\");\n+    }\n+\n+    if (container \u003d\u003d null) {\n+      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n+          + \" is not handled by this NodeManager\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void authorizeGetAndStopContainerRequest(ContainerId containerId,\n      Container container, boolean stopRequest) throws YarnException {\n\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier identifier \u003d selectNMTokenIdentifier(remoteUgi);\n\n    /*\n     * For get/stop container status; we need to verify that 1) User (NMToken)\n     * application attempt only has started container. 2) Requested containerId\n     * belongs to the same application attempt (NMToken) which was used. (Note:-\n     * This will prevent user in knowing another application\u0027s containers).\n     */\n\n    if ((!identifier.getApplicationAttemptId().equals(\n      containerId.getApplicationAttemptId()))\n        || (container !\u003d null \u0026\u0026 !identifier.getApplicationAttemptId().equals(\n          container.getContainerId().getApplicationAttemptId()))) {\n      if (stopRequest) {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to stop non-application container : \"\n            + container.getContainerId().toString());\n        NMAuditLogger.logFailure(\"UnknownUser\", AuditConstants.STOP_CONTAINER,\n          \"ContainerManagerImpl\", \"Trying to stop unknown container!\",\n          identifier.getApplicationAttemptId().getApplicationId(),\n          container.getContainerId());\n      } else {\n        LOG.warn(identifier.getApplicationAttemptId()\n            + \" attempted to get get status for non-application container : \"\n            + container.getContainerId().toString());\n      }\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not started by this application attempt.\");\n    }\n\n    if (container \u003d\u003d null) {\n      throw RPCUtil.getRemoteException(\"Container \" + containerId.toString()\n          + \" is not handled by this NodeManager\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}