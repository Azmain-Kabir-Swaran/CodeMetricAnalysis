{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptListenerImpl.java",
  "functionName": "reportDiagnosticInfo",
  "functionId": "reportDiagnosticInfo___taskAttemptID-TaskAttemptID__diagnosticInfo-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java",
  "functionStartLine": 355,
  "functionEndLine": 373,
  "numCommitsSeen": 39,
  "timeTaken": 7157,
  "changeHistory": [
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02",
    "bb74427da27ab90ade868c4fd89ed8ac3310aea2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02": "Ybodychange",
    "bb74427da27ab90ade868c4fd89ed8ac3310aea2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4752. Reduce MR AM memory usage through String Interning (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1404177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/12 7:57 AM",
      "commitName": "aac5c149c7ca500b8eb810b7d4b561ff1e38ea02",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "19/10/12 1:18 PM",
      "commitNameOld": "1195f844a9a74de6709ba7d8aaf70c21f27cd2b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.78,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n  throws IOException {\n+    diagnosticInfo \u003d StringInterner.weakIntern(diagnosticInfo);\n     LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n         + diagnosticInfo);\n \n     org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n       TypeConverter.toYarn(taskAttemptID);\n     taskHeartbeatHandler.progressing(attemptID);\n \n     // This is mainly used for cases where we want to propagate exception traces\n     // of tasks that fail.\n \n     // This call exists as a hadoop mapreduce legacy wherein all changes in\n     // counters/progress/phase/output-size are reported through statusUpdate()\n     // call but not diagnosticInformation.\n     context.getEventHandler().handle(\n         new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n throws IOException {\n    diagnosticInfo \u003d StringInterner.weakIntern(diagnosticInfo);\n    LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n        + diagnosticInfo);\n\n    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n      TypeConverter.toYarn(taskAttemptID);\n    taskHeartbeatHandler.progressing(attemptID);\n\n    // This is mainly used for cases where we want to propagate exception traces\n    // of tasks that fail.\n\n    // This call exists as a hadoop mapreduce legacy wherein all changes in\n    // counters/progress/phase/output-size are reported through statusUpdate()\n    // call but not diagnosticInformation.\n    context.getEventHandler().handle(\n        new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java",
      "extendedDetails": {}
    },
    "bb74427da27ab90ade868c4fd89ed8ac3310aea2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4089. Hung Tasks never time out. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308531 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 1:20 PM",
      "commitName": "bb74427da27ab90ade868c4fd89ed8ac3310aea2",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "13/01/12 1:31 PM",
      "commitNameOld": "0c278b0f636a01c81aba9e46fe7658fcdfb0f33c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 79.95,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n  throws IOException {\n     LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n         + diagnosticInfo);\n \n     org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n       TypeConverter.toYarn(taskAttemptID);\n-    taskHeartbeatHandler.receivedPing(attemptID);\n+    taskHeartbeatHandler.progressing(attemptID);\n \n     // This is mainly used for cases where we want to propagate exception traces\n     // of tasks that fail.\n \n     // This call exists as a hadoop mapreduce legacy wherein all changes in\n     // counters/progress/phase/output-size are reported through statusUpdate()\n     // call but not diagnosticInformation.\n     context.getEventHandler().handle(\n         new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n throws IOException {\n    LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n        + diagnosticInfo);\n\n    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n      TypeConverter.toYarn(taskAttemptID);\n    taskHeartbeatHandler.progressing(attemptID);\n\n    // This is mainly used for cases where we want to propagate exception traces\n    // of tasks that fail.\n\n    // This call exists as a hadoop mapreduce legacy wherein all changes in\n    // counters/progress/phase/output-size are reported through statusUpdate()\n    // call but not diagnosticInformation.\n    context.getEventHandler().handle(\n        new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n throws IOException {\n    LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n        + diagnosticInfo);\n\n    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n      TypeConverter.toYarn(taskAttemptID);\n    taskHeartbeatHandler.receivedPing(attemptID);\n\n    // This is mainly used for cases where we want to propagate exception traces\n    // of tasks that fail.\n\n    // This call exists as a hadoop mapreduce legacy wherein all changes in\n    // counters/progress/phase/output-size are reported through statusUpdate()\n    // call but not diagnosticInformation.\n    context.getEventHandler().handle(\n        new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n+ throws IOException {\n+    LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n+        + diagnosticInfo);\n+\n+    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n+      TypeConverter.toYarn(taskAttemptID);\n+    taskHeartbeatHandler.receivedPing(attemptID);\n+\n+    // This is mainly used for cases where we want to propagate exception traces\n+    // of tasks that fail.\n+\n+    // This call exists as a hadoop mapreduce legacy wherein all changes in\n+    // counters/progress/phase/output-size are reported through statusUpdate()\n+    // call but not diagnosticInformation.\n+    context.getEventHandler().handle(\n+        new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportDiagnosticInfo(TaskAttemptID taskAttemptID, String diagnosticInfo)\n throws IOException {\n    LOG.info(\"Diagnostics report from \" + taskAttemptID.toString() + \": \"\n        + diagnosticInfo);\n\n    org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId attemptID \u003d\n      TypeConverter.toYarn(taskAttemptID);\n    taskHeartbeatHandler.receivedPing(attemptID);\n\n    // This is mainly used for cases where we want to propagate exception traces\n    // of tasks that fail.\n\n    // This call exists as a hadoop mapreduce legacy wherein all changes in\n    // counters/progress/phase/output-size are reported through statusUpdate()\n    // call but not diagnosticInformation.\n    context.getEventHandler().handle(\n        new TaskAttemptDiagnosticsUpdateEvent(attemptID, diagnosticInfo));\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/TaskAttemptListenerImpl.java"
    }
  }
}