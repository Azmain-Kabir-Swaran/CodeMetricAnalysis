{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PriorityUtilizationQueueOrderingPolicy.java",
  "functionName": "compare",
  "functionId": "compare___relativeAssigned1-double__relativeAssigned2-double__priority1-int__priority2-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/policy/PriorityUtilizationQueueOrderingPolicy.java",
  "functionStartLine": 79,
  "functionEndLine": 99,
  "numCommitsSeen": 4,
  "timeTaken": 1658,
  "changeHistory": [
    "ce832059db077fa95922198b066a737ed4f609fe"
  ],
  "changeHistoryShort": {
    "ce832059db077fa95922198b066a737ed4f609fe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce832059db077fa95922198b066a737ed4f609fe": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
      "commitDate": "23/01/17 10:52 AM",
      "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,21 @@\n+  public static int compare(double relativeAssigned1, double relativeAssigned2,\n+      int priority1, int priority2) {\n+    if (priority1 \u003d\u003d priority2) {\n+      // The queue with less relative used-capacity goes first\n+      return Double.compare(relativeAssigned1, relativeAssigned2);\n+    } else {\n+      // When priority is different:\n+      if ((relativeAssigned1 \u003c 1.0f \u0026\u0026 relativeAssigned2 \u003c 1.0f) || (\n+          relativeAssigned1 \u003e\u003d 1.0f \u0026\u0026 relativeAssigned2 \u003e\u003d 1.0f)) {\n+        // When both the queues are under their guaranteed capacities,\n+        // Or both the queues are over or meeting their guaranteed capacities\n+        // queue with higher used-capacity goes first\n+        return Integer.compare(priority2, priority1);\n+      } else {\n+        // Otherwise, when one of the queues is over or meeting their\n+        // guaranteed capacities and the other is under: The queue that is\n+        // under its capacity guarantee gets the resources.\n+        return Double.compare(relativeAssigned1, relativeAssigned2);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int compare(double relativeAssigned1, double relativeAssigned2,\n      int priority1, int priority2) {\n    if (priority1 \u003d\u003d priority2) {\n      // The queue with less relative used-capacity goes first\n      return Double.compare(relativeAssigned1, relativeAssigned2);\n    } else {\n      // When priority is different:\n      if ((relativeAssigned1 \u003c 1.0f \u0026\u0026 relativeAssigned2 \u003c 1.0f) || (\n          relativeAssigned1 \u003e\u003d 1.0f \u0026\u0026 relativeAssigned2 \u003e\u003d 1.0f)) {\n        // When both the queues are under their guaranteed capacities,\n        // Or both the queues are over or meeting their guaranteed capacities\n        // queue with higher used-capacity goes first\n        return Integer.compare(priority2, priority1);\n      } else {\n        // Otherwise, when one of the queues is over or meeting their\n        // guaranteed capacities and the other is under: The queue that is\n        // under its capacity guarantee gets the resources.\n        return Double.compare(relativeAssigned1, relativeAssigned2);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/policy/PriorityUtilizationQueueOrderingPolicy.java"
    }
  }
}