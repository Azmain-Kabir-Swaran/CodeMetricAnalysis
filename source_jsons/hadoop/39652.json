{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "removeApplicationAttempt",
  "functionId": "removeApplicationAttempt___application-FiCaSchedulerApp__userName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 944,
  "functionEndLine": 985,
  "numCommitsSeen": 408,
  "timeTaken": 16966,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "091dd19e8636b8bd5668dbb3bcd8bbce7c952274",
    "8aed374182f22c31e886a9a602fb907bbccc4309",
    "59557e85a40fb91c7106e8ff3bfe958ffa244b29",
    "f4a57d4a531e793373fe3118d644871a3b9ae0b1",
    "109e528ef5d8df07443373751266b4417acc981a",
    "56e4f6237ae8b1852e82b186e08db3934f79a9db",
    "cf9d3c925608e8bc650d43975382ed3014081057",
    "bdd90110e6904b59746812d9a093924a65e72280",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
    "86358221fc85a7743052a0b4c1647353508bf308",
    "c53420f58364b11fbda1dace7679d45534533382",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "70bc14f2344f31ec75f512256e8c8c3d36af5e78",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
    "6b608aad7d52b524fa94955a538e8b3524d42d93",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "091dd19e8636b8bd5668dbb3bcd8bbce7c952274": "Ybodychange",
    "8aed374182f22c31e886a9a602fb907bbccc4309": "Ybodychange",
    "59557e85a40fb91c7106e8ff3bfe958ffa244b29": "Ybodychange",
    "f4a57d4a531e793373fe3118d644871a3b9ae0b1": "Ybodychange",
    "109e528ef5d8df07443373751266b4417acc981a": "Ybodychange",
    "56e4f6237ae8b1852e82b186e08db3934f79a9db": "Ybodychange",
    "cf9d3c925608e8bc650d43975382ed3014081057": "Ybodychange",
    "bdd90110e6904b59746812d9a093924a65e72280": "Ybodychange",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": "Ybodychange",
    "86358221fc85a7743052a0b4c1647353508bf308": "Ybodychange",
    "c53420f58364b11fbda1dace7679d45534533382": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymultichange(Yrename,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "70bc14f2344f31ec75f512256e8c8c3d36af5e78": "Ybodychange",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": "Ybodychange",
    "6b608aad7d52b524fa94955a538e8b3524d42d93": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void removeApplicationAttempt(\n       FiCaSchedulerApp application, String userName) {\n \n     writeLock.lock();\n     try {\n       // TODO, should use getUser, use this method just to avoid UT failure\n       // which is caused by wrong invoking order, will fix UT separately\n       User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n \n       String partitionName \u003d application.getAppAMNodePartitionName();\n       boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n       if (!wasActive) {\n         pendingOrderingPolicy.removeSchedulableEntity(application);\n       } else{\n         queueUsage.decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         user.getResourceUsage().decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         metrics.decAMUsed(partitionName, application.getUser(),\n             application.getAMResource(partitionName));\n       }\n       applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n       user.finishApplication(wasActive);\n       if (user.getTotalApplications() \u003d\u003d 0) {\n         usersManager.removeUser(application.getUser());\n       }\n \n       // Check if we can activate more applications\n       activateApplications();\n \n       LOG.info(\n           \"Application removed -\" + \" appId: \" + application.getApplicationId()\n-              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n+              + \" user: \" + application.getUser() + \" queue: \" + getQueuePath()\n               + \" #user-pending-applications: \" + user.getPendingApplications()\n               + \" #user-active-applications: \" + user.getActiveApplications()\n               + \" #queue-pending-applications: \" + getNumPendingApplications()\n               + \" #queue-active-applications: \" + getNumActiveApplications());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n\n    writeLock.lock();\n    try {\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(partitionName, application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        usersManager.removeUser(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueuePath()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void removeApplicationAttempt(\n       FiCaSchedulerApp application, String userName) {\n-    try {\n-      writeLock.lock();\n \n+    writeLock.lock();\n+    try {\n       // TODO, should use getUser, use this method just to avoid UT failure\n       // which is caused by wrong invoking order, will fix UT separately\n       User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n \n       String partitionName \u003d application.getAppAMNodePartitionName();\n       boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n       if (!wasActive) {\n         pendingOrderingPolicy.removeSchedulableEntity(application);\n       } else{\n         queueUsage.decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         user.getResourceUsage().decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         metrics.decAMUsed(partitionName, application.getUser(),\n             application.getAMResource(partitionName));\n       }\n       applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n       user.finishApplication(wasActive);\n       if (user.getTotalApplications() \u003d\u003d 0) {\n         usersManager.removeUser(application.getUser());\n       }\n \n       // Check if we can activate more applications\n       activateApplications();\n \n       LOG.info(\n           \"Application removed -\" + \" appId: \" + application.getApplicationId()\n               + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n               + \" #user-pending-applications: \" + user.getPendingApplications()\n               + \" #user-active-applications: \" + user.getActiveApplications()\n               + \" #queue-pending-applications: \" + getNumPendingApplications()\n               + \" #queue-active-applications: \" + getNumActiveApplications());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n\n    writeLock.lock();\n    try {\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(partitionName, application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        usersManager.removeUser(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "22/05/17 2:26 PM",
      "commitNameOld": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 27.77,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void removeApplicationAttempt(\n       FiCaSchedulerApp application, String userName) {\n     try {\n       writeLock.lock();\n \n       // TODO, should use getUser, use this method just to avoid UT failure\n       // which is caused by wrong invoking order, will fix UT separately\n       User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n \n       String partitionName \u003d application.getAppAMNodePartitionName();\n       boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n       if (!wasActive) {\n         pendingOrderingPolicy.removeSchedulableEntity(application);\n       } else{\n         queueUsage.decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         user.getResourceUsage().decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n-        metrics.decAMUsed(application.getUser(),\n+        metrics.decAMUsed(partitionName, application.getUser(),\n             application.getAMResource(partitionName));\n       }\n       applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n       user.finishApplication(wasActive);\n       if (user.getTotalApplications() \u003d\u003d 0) {\n         usersManager.removeUser(application.getUser());\n       }\n \n       // Check if we can activate more applications\n       activateApplications();\n \n       LOG.info(\n           \"Application removed -\" + \" appId: \" + application.getApplicationId()\n               + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n               + \" #user-pending-applications: \" + user.getPendingApplications()\n               + \" #user-active-applications: \" + user.getActiveApplications()\n               + \" #queue-pending-applications: \" + getNumPendingApplications()\n               + \" #queue-active-applications: \" + getNumActiveApplications());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n    try {\n      writeLock.lock();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(partitionName, application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        usersManager.removeUser(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private void removeApplicationAttempt(\n       FiCaSchedulerApp application, String userName) {\n     try {\n       writeLock.lock();\n \n       // TODO, should use getUser, use this method just to avoid UT failure\n       // which is caused by wrong invoking order, will fix UT separately\n-      User user \u003d getUserAndAddIfAbsent(userName);\n+      User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n \n       String partitionName \u003d application.getAppAMNodePartitionName();\n       boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n       if (!wasActive) {\n         pendingOrderingPolicy.removeSchedulableEntity(application);\n       } else{\n         queueUsage.decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         user.getResourceUsage().decAMUsed(partitionName,\n             application.getAMResource(partitionName));\n         metrics.decAMUsed(application.getUser(),\n             application.getAMResource(partitionName));\n       }\n       applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n       user.finishApplication(wasActive);\n       if (user.getTotalApplications() \u003d\u003d 0) {\n-        users.remove(application.getUser());\n+        usersManager.removeUser(application.getUser());\n       }\n \n       // Check if we can activate more applications\n       activateApplications();\n \n       LOG.info(\n           \"Application removed -\" + \" appId: \" + application.getApplicationId()\n               + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n               + \" #user-pending-applications: \" + user.getPendingApplications()\n               + \" #user-active-applications: \" + user.getActiveApplications()\n               + \" #queue-pending-applications: \" + getNumPendingApplications()\n               + \" #queue-active-applications: \" + getNumActiveApplications());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n    try {\n      writeLock.lock();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d usersManager.getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        usersManager.removeUser(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,42 @@\n-  public synchronized void removeApplicationAttempt(\n-      FiCaSchedulerApp application, User user) {\n-    String partitionName \u003d application.getAppAMNodePartitionName();\n-    boolean wasActive \u003d\n-      orderingPolicy.removeSchedulableEntity(application);\n-    if (!wasActive) {\n-      pendingOrderingPolicy.removeSchedulableEntity(application);\n-    } else {\n-      queueUsage.decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      user.getResourceUsage().decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(),\n-          application.getAMResource(partitionName));\n+  private void removeApplicationAttempt(\n+      FiCaSchedulerApp application, String userName) {\n+    try {\n+      writeLock.lock();\n+\n+      // TODO, should use getUser, use this method just to avoid UT failure\n+      // which is caused by wrong invoking order, will fix UT separately\n+      User user \u003d getUserAndAddIfAbsent(userName);\n+\n+      String partitionName \u003d application.getAppAMNodePartitionName();\n+      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n+      if (!wasActive) {\n+        pendingOrderingPolicy.removeSchedulableEntity(application);\n+      } else{\n+        queueUsage.decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        user.getResourceUsage().decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        metrics.decAMUsed(application.getUser(),\n+            application.getAMResource(partitionName));\n+      }\n+      applicationAttemptMap.remove(application.getApplicationAttemptId());\n+\n+      user.finishApplication(wasActive);\n+      if (user.getTotalApplications() \u003d\u003d 0) {\n+        users.remove(application.getUser());\n+      }\n+\n+      // Check if we can activate more applications\n+      activateApplications();\n+\n+      LOG.info(\n+          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n+              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n+              + \" #user-pending-applications: \" + user.getPendingApplications()\n+              + \" #user-active-applications: \" + user.getActiveApplications()\n+              + \" #queue-pending-applications: \" + getNumPendingApplications()\n+              + \" #queue-active-applications: \" + getNumActiveApplications());\n+    } finally {\n+      writeLock.unlock();\n     }\n-    applicationAttemptMap.remove(application.getApplicationAttemptId());\n-\n-    user.finishApplication(wasActive);\n-    if (user.getTotalApplications() \u003d\u003d 0) {\n-      users.remove(application.getUser());\n-    }\n-\n-    // Check if we can activate more applications\n-    activateApplications();\n-\n-    LOG.info(\"Application removed -\" +\n-        \" appId: \" + application.getApplicationId() +\n-        \" user: \" + application.getUser() +\n-        \" queue: \" + getQueueName() +\n-        \" #user-pending-applications: \" + user.getPendingApplications() +\n-        \" #user-active-applications: \" + user.getActiveApplications() +\n-        \" #queue-pending-applications: \" + getNumPendingApplications() +\n-        \" #queue-active-applications: \" + getNumActiveApplications()\n-    );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n    try {\n      writeLock.lock();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        users.remove(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[application-FiCaSchedulerApp, user-User]",
            "newValue": "[application-FiCaSchedulerApp, userName-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,42 @@\n-  public synchronized void removeApplicationAttempt(\n-      FiCaSchedulerApp application, User user) {\n-    String partitionName \u003d application.getAppAMNodePartitionName();\n-    boolean wasActive \u003d\n-      orderingPolicy.removeSchedulableEntity(application);\n-    if (!wasActive) {\n-      pendingOrderingPolicy.removeSchedulableEntity(application);\n-    } else {\n-      queueUsage.decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      user.getResourceUsage().decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(),\n-          application.getAMResource(partitionName));\n+  private void removeApplicationAttempt(\n+      FiCaSchedulerApp application, String userName) {\n+    try {\n+      writeLock.lock();\n+\n+      // TODO, should use getUser, use this method just to avoid UT failure\n+      // which is caused by wrong invoking order, will fix UT separately\n+      User user \u003d getUserAndAddIfAbsent(userName);\n+\n+      String partitionName \u003d application.getAppAMNodePartitionName();\n+      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n+      if (!wasActive) {\n+        pendingOrderingPolicy.removeSchedulableEntity(application);\n+      } else{\n+        queueUsage.decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        user.getResourceUsage().decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        metrics.decAMUsed(application.getUser(),\n+            application.getAMResource(partitionName));\n+      }\n+      applicationAttemptMap.remove(application.getApplicationAttemptId());\n+\n+      user.finishApplication(wasActive);\n+      if (user.getTotalApplications() \u003d\u003d 0) {\n+        users.remove(application.getUser());\n+      }\n+\n+      // Check if we can activate more applications\n+      activateApplications();\n+\n+      LOG.info(\n+          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n+              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n+              + \" #user-pending-applications: \" + user.getPendingApplications()\n+              + \" #user-active-applications: \" + user.getActiveApplications()\n+              + \" #queue-pending-applications: \" + getNumPendingApplications()\n+              + \" #queue-active-applications: \" + getNumActiveApplications());\n+    } finally {\n+      writeLock.unlock();\n     }\n-    applicationAttemptMap.remove(application.getApplicationAttemptId());\n-\n-    user.finishApplication(wasActive);\n-    if (user.getTotalApplications() \u003d\u003d 0) {\n-      users.remove(application.getUser());\n-    }\n-\n-    // Check if we can activate more applications\n-    activateApplications();\n-\n-    LOG.info(\"Application removed -\" +\n-        \" appId: \" + application.getApplicationId() +\n-        \" user: \" + application.getUser() +\n-        \" queue: \" + getQueueName() +\n-        \" #user-pending-applications: \" + user.getPendingApplications() +\n-        \" #user-active-applications: \" + user.getActiveApplications() +\n-        \" #queue-pending-applications: \" + getNumPendingApplications() +\n-        \" #queue-active-applications: \" + getNumActiveApplications()\n-    );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n    try {\n      writeLock.lock();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        users.remove(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,42 @@\n-  public synchronized void removeApplicationAttempt(\n-      FiCaSchedulerApp application, User user) {\n-    String partitionName \u003d application.getAppAMNodePartitionName();\n-    boolean wasActive \u003d\n-      orderingPolicy.removeSchedulableEntity(application);\n-    if (!wasActive) {\n-      pendingOrderingPolicy.removeSchedulableEntity(application);\n-    } else {\n-      queueUsage.decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      user.getResourceUsage().decAMUsed(partitionName,\n-          application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(),\n-          application.getAMResource(partitionName));\n+  private void removeApplicationAttempt(\n+      FiCaSchedulerApp application, String userName) {\n+    try {\n+      writeLock.lock();\n+\n+      // TODO, should use getUser, use this method just to avoid UT failure\n+      // which is caused by wrong invoking order, will fix UT separately\n+      User user \u003d getUserAndAddIfAbsent(userName);\n+\n+      String partitionName \u003d application.getAppAMNodePartitionName();\n+      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n+      if (!wasActive) {\n+        pendingOrderingPolicy.removeSchedulableEntity(application);\n+      } else{\n+        queueUsage.decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        user.getResourceUsage().decAMUsed(partitionName,\n+            application.getAMResource(partitionName));\n+        metrics.decAMUsed(application.getUser(),\n+            application.getAMResource(partitionName));\n+      }\n+      applicationAttemptMap.remove(application.getApplicationAttemptId());\n+\n+      user.finishApplication(wasActive);\n+      if (user.getTotalApplications() \u003d\u003d 0) {\n+        users.remove(application.getUser());\n+      }\n+\n+      // Check if we can activate more applications\n+      activateApplications();\n+\n+      LOG.info(\n+          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n+              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n+              + \" #user-pending-applications: \" + user.getPendingApplications()\n+              + \" #user-active-applications: \" + user.getActiveApplications()\n+              + \" #queue-pending-applications: \" + getNumPendingApplications()\n+              + \" #queue-active-applications: \" + getNumActiveApplications());\n+    } finally {\n+      writeLock.unlock();\n     }\n-    applicationAttemptMap.remove(application.getApplicationAttemptId());\n-\n-    user.finishApplication(wasActive);\n-    if (user.getTotalApplications() \u003d\u003d 0) {\n-      users.remove(application.getUser());\n-    }\n-\n-    // Check if we can activate more applications\n-    activateApplications();\n-\n-    LOG.info(\"Application removed -\" +\n-        \" appId: \" + application.getApplicationId() +\n-        \" user: \" + application.getUser() +\n-        \" queue: \" + getQueueName() +\n-        \" #user-pending-applications: \" + user.getPendingApplications() +\n-        \" #user-active-applications: \" + user.getActiveApplications() +\n-        \" #queue-pending-applications: \" + getNumPendingApplications() +\n-        \" #queue-active-applications: \" + getNumActiveApplications()\n-    );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeApplicationAttempt(\n      FiCaSchedulerApp application, String userName) {\n    try {\n      writeLock.lock();\n\n      // TODO, should use getUser, use this method just to avoid UT failure\n      // which is caused by wrong invoking order, will fix UT separately\n      User user \u003d getUserAndAddIfAbsent(userName);\n\n      String partitionName \u003d application.getAppAMNodePartitionName();\n      boolean wasActive \u003d orderingPolicy.removeSchedulableEntity(application);\n      if (!wasActive) {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      } else{\n        queueUsage.decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        user.getResourceUsage().decAMUsed(partitionName,\n            application.getAMResource(partitionName));\n        metrics.decAMUsed(application.getUser(),\n            application.getAMResource(partitionName));\n      }\n      applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n      user.finishApplication(wasActive);\n      if (user.getTotalApplications() \u003d\u003d 0) {\n        users.remove(application.getUser());\n      }\n\n      // Check if we can activate more applications\n      activateApplications();\n\n      LOG.info(\n          \"Application removed -\" + \" appId: \" + application.getApplicationId()\n              + \" user: \" + application.getUser() + \" queue: \" + getQueueName()\n              + \" #user-pending-applications: \" + user.getPendingApplications()\n              + \" #user-active-applications: \" + user.getActiveApplications()\n              + \" #queue-pending-applications: \" + getNumPendingApplications()\n              + \" #queue-active-applications: \" + getNumActiveApplications());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "091dd19e8636b8bd5668dbb3bcd8bbce7c952274": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5533. JMX AM Used metrics for queue wrong when app submited to nodelabel partition (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "19/08/16 5:00 AM",
      "commitName": "091dd19e8636b8bd5668dbb3bcd8bbce7c952274",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "19/08/16 3:44 AM",
      "commitNameOld": "8aed374182f22c31e886a9a602fb907bbccc4309",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n       queueUsage.decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       user.getResourceUsage().decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(), application.getAMResource());\n+      metrics.decAMUsed(application.getUser(),\n+          application.getAMResource(partitionName));\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(),\n          application.getAMResource(partitionName));\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "8aed374182f22c31e886a9a602fb907bbccc4309": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-5533. JMX AM Used metrics for queue wrong when app submited to nodelabel partition (Bibin A Chundatt via Varun Saxena)\"\n\nThis reverts commit 59557e85a40fb91c7106e8ff3bfe958ffa244b29.\n",
      "commitDate": "19/08/16 3:44 AM",
      "commitName": "8aed374182f22c31e886a9a602fb907bbccc4309",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "19/08/16 2:31 AM",
      "commitNameOld": "59557e85a40fb91c7106e8ff3bfe958ffa244b29",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n       queueUsage.decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       user.getResourceUsage().decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(),\n-          application.getAMResource(partitionName));\n+      metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "59557e85a40fb91c7106e8ff3bfe958ffa244b29": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5533. JMX AM Used metrics for queue wrong when app submited to nodelabel partition (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "19/08/16 2:31 AM",
      "commitName": "59557e85a40fb91c7106e8ff3bfe958ffa244b29",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "05/08/16 10:27 AM",
      "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.67,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n       queueUsage.decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       user.getResourceUsage().decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n-      metrics.decAMUsed(application.getUser(), application.getAMResource());\n+      metrics.decAMUsed(application.getUser(),\n+          application.getAMResource(partitionName));\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(),\n          application.getAMResource(partitionName));\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "f4a57d4a531e793373fe3118d644871a3b9ae0b1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4617. LeafQueue#pendingOrderingPolicy should always use fixed ordering policy instead of using same as active applications ordering policy. Contributed by Rohith Sharma K S\n",
      "commitDate": "29/01/16 12:22 PM",
      "commitName": "f4a57d4a531e793373fe3118d644871a3b9ae0b1",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/01/16 2:51 PM",
      "commitNameOld": "7f46636495e23693d588b0915f464fa7afd9102e",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,34 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n-      if (application.isAttemptRecovering()) {\n-        pendingOPForRecoveredApps.removeSchedulableEntity(application);\n-      } else {\n-        pendingOrderingPolicy.removeSchedulableEntity(application);\n-      }\n+      pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n       queueUsage.decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       user.getResourceUsage().decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "109e528ef5d8df07443373751266b4417acc981a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4479. Change CS LeafQueue pendingOrderingPolicy to hornor recovered apps. Contributed by Rohith Sharma K S\n",
      "commitDate": "08/01/16 3:51 PM",
      "commitName": "109e528ef5d8df07443373751266b4417acc981a",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/12/15 3:30 PM",
      "commitNameOld": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.01,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n-      pendingOrderingPolicy.removeSchedulableEntity(application);\n+      if (application.isAttemptRecovering()) {\n+        pendingOPForRecoveredApps.removeSchedulableEntity(application);\n+      } else {\n+        pendingOrderingPolicy.removeSchedulableEntity(application);\n+      }\n     } else {\n       queueUsage.decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       user.getResourceUsage().decAMUsed(partitionName,\n           application.getAMResource(partitionName));\n       metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      if (application.isAttemptRecovering()) {\n        pendingOPForRecoveredApps.removeSchedulableEntity(application);\n      } else {\n        pendingOrderingPolicy.removeSchedulableEntity(application);\n      }\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "56e4f6237ae8b1852e82b186e08db3934f79a9db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3216. Max-AM-Resource-Percentage should respect node labels. (Sunil G via wangda)\n",
      "commitDate": "26/10/15 4:44 PM",
      "commitName": "56e4f6237ae8b1852e82b186e08db3934f79a9db",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/10/15 1:07 PM",
      "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n+    String partitionName \u003d application.getAppAMNodePartitionName();\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n-      queueUsage.decAMUsed(application.getAMResource());\n-      user.getResourceUsage().decAMUsed(application.getAMResource());\n+      queueUsage.decAMUsed(partitionName,\n+          application.getAMResource(partitionName));\n+      user.getResourceUsage().decAMUsed(partitionName,\n+          application.getAMResource(partitionName));\n       metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    String partitionName \u003d application.getAppAMNodePartitionName();\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      user.getResourceUsage().decAMUsed(partitionName,\n          application.getAMResource(partitionName));\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cf9d3c925608e8bc650d43975382ed3014081057": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3873. PendingApplications in LeafQueue should also use OrderingPolicy. (Sunil G via wangda)\n",
      "commitDate": "10/08/15 2:54 PM",
      "commitName": "cf9d3c925608e8bc650d43975382ed3014081057",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/08/15 9:46 AM",
      "commitNameOld": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n-      pendingApplications.remove(application);\n+      pendingOrderingPolicy.removeSchedulableEntity(application);\n     } else {\n       queueUsage.decAMUsed(application.getAMResource());\n       user.getResourceUsage().decAMUsed(application.getAMResource());\n       metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() +\n         \" user: \" + application.getUser() +\n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n     );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingOrderingPolicy.removeSchedulableEntity(application);\n    } else {\n      queueUsage.decAMUsed(application.getAMResource());\n      user.getResourceUsage().decAMUsed(application.getAMResource());\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() +\n        \" user: \" + application.getUser() +\n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n    );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "bdd90110e6904b59746812d9a093924a65e72280": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3494. Expose AM resource limit and usage in CS QueueMetrics. Contributed by Rohith Sharmaks\n",
      "commitDate": "21/04/15 8:06 PM",
      "commitName": "bdd90110e6904b59746812d9a093924a65e72280",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/04/15 5:12 PM",
      "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d\n       orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     } else {\n       queueUsage.decAMUsed(application.getAMResource());\n       user.getResourceUsage().decAMUsed(application.getAMResource());\n+      metrics.decAMUsed(application.getUser(), application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    } else {\n      queueUsage.decAMUsed(application.getAMResource());\n      user.getResourceUsage().decAMUsed(application.getAMResource());\n      metrics.decAMUsed(application.getUser(), application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3463. Integrate OrderingPolicy Framework with CapacityScheduler. (Craig Welch via wangda)\n",
      "commitDate": "20/04/15 5:12 PM",
      "commitName": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n-    boolean wasActive \u003d activeApplications.remove(application);\n+    boolean wasActive \u003d\n+      orderingPolicy.removeSchedulableEntity(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     } else {\n       queueUsage.decAMUsed(application.getAMResource());\n       user.getResourceUsage().decAMUsed(application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d\n      orderingPolicy.removeSchedulableEntity(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    } else {\n      queueUsage.decAMUsed(application.getAMResource());\n      user.getResourceUsage().decAMUsed(application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "86358221fc85a7743052a0b4c1647353508bf308": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3099. Capacity Scheduler LeafQueue/ParentQueue should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "30/01/15 3:15 PM",
      "commitName": "86358221fc85a7743052a0b4c1647353508bf308",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/01/15 3:36 PM",
      "commitNameOld": "18741adf97f4fda5f8743318b59c440928e51297",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.99,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d activeApplications.remove(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     } else {\n-      Resources.subtractFrom(usedAMResources, application.getAMResource());\n-      Resources.subtractFrom(user.getConsumedAMResources(),\n-        application.getAMResource());\n+      queueUsage.decAMUsed(application.getAMResource());\n+      user.getResourceUsage().decAMUsed(application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    } else {\n      queueUsage.decAMUsed(application.getAMResource());\n      user.getResourceUsage().decAMUsed(application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "c53420f58364b11fbda1dace7679d45534533382": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2637. Fixed max-am-resource-percent calculation in CapacityScheduler when activating applications. Contributed by Craig Welch\n",
      "commitDate": "13/01/15 5:32 PM",
      "commitName": "c53420f58364b11fbda1dace7679d45534533382",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/01/15 2:15 PM",
      "commitNameOld": "dd57c2047bfd21910acc38c98153eedf1db75169",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.14,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n   public synchronized void removeApplicationAttempt(\n       FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d activeApplications.remove(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n+    } else {\n+      Resources.subtractFrom(usedAMResources, application.getAMResource());\n+      Resources.subtractFrom(user.getConsumedAMResources(),\n+        application.getAMResource());\n     }\n     applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplicationAttempt(\n      FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    } else {\n      Resources.subtractFrom(usedAMResources, application.getAMResource());\n      Resources.subtractFrom(user.getConsumedAMResources(),\n        application.getAMResource());\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/12/13 7:09 PM",
          "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,25 @@\n-  public synchronized void removeApplication(FiCaSchedulerApp application, User user) {\n+  public synchronized void removeApplicationAttempt(FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d activeApplications.remove(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     }\n-    applicationsMap.remove(application.getApplicationAttemptId());\n+    applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n-    \n-    // Inform the activeUsersManager\n-    synchronized (application) {\n-      activeUsersManager.deactivateApplication(\n-          application.getUser(), application.getApplicationId());\n-    }\n-    \n+\n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeApplicationAttempt(FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "removeApplication",
            "newValue": "removeApplicationAttempt"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/12/13 7:09 PM",
          "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 25.72,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,25 @@\n-  public synchronized void removeApplication(FiCaSchedulerApp application, User user) {\n+  public synchronized void removeApplicationAttempt(FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d activeApplications.remove(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     }\n-    applicationsMap.remove(application.getApplicationAttemptId());\n+    applicationAttemptMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n-    \n-    // Inform the activeUsersManager\n-    synchronized (application) {\n-      activeUsersManager.deactivateApplication(\n-          application.getUser(), application.getApplicationId());\n-    }\n-    \n+\n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void removeApplicationAttempt(FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    }\n    applicationAttemptMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void removeApplication(FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    }\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n    \n    // Inform the activeUsersManager\n    synchronized (application) {\n      activeUsersManager.deactivateApplication(\n          application.getUser(), application.getApplicationId());\n    }\n    \n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n-  public synchronized void removeApplication(SchedulerApp application, User user) {\n+  public synchronized void removeApplication(FiCaSchedulerApp application, User user) {\n     boolean wasActive \u003d activeApplications.remove(application);\n     if (!wasActive) {\n       pendingApplications.remove(application);\n     }\n     applicationsMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n     \n     // Inform the activeUsersManager\n     synchronized (application) {\n       activeUsersManager.deactivateApplication(\n           application.getUser(), application.getApplicationId());\n     }\n     \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplication(FiCaSchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    }\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n    \n    // Inform the activeUsersManager\n    synchronized (application) {\n      activeUsersManager.deactivateApplication(\n          application.getUser(), application.getApplicationId());\n    }\n    \n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApp, user-User]",
        "newValue": "[application-FiCaSchedulerApp, user-User]"
      }
    },
    "70bc14f2344f31ec75f512256e8c8c3d36af5e78": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3780. Fixed a bug where applications killed before getting activated were not getting cleaned up properly. Contributed by Hitesh Shah. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1239443 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/12 6:31 PM",
      "commitName": "70bc14f2344f31ec75f512256e8c8c3d36af5e78",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "01/02/12 4:41 PM",
      "commitNameOld": "ef1a619a4df3a612eb293a6e8e1e952eaef18eba",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public synchronized void removeApplication(SchedulerApp application, User user) {\n-    activeApplications.remove(application);\n+    boolean wasActive \u003d activeApplications.remove(application);\n+    if (!wasActive) {\n+      pendingApplications.remove(application);\n+    }\n     applicationsMap.remove(application.getApplicationAttemptId());\n \n-    user.finishApplication();\n+    user.finishApplication(wasActive);\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n     \n     // Inform the activeUsersManager\n     synchronized (application) {\n       activeUsersManager.deactivateApplication(\n           application.getUser(), application.getApplicationId());\n     }\n     \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplication(SchedulerApp application, User user) {\n    boolean wasActive \u003d activeApplications.remove(application);\n    if (!wasActive) {\n      pendingApplications.remove(application);\n    }\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication(wasActive);\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n    \n    // Inform the activeUsersManager\n    synchronized (application) {\n      activeUsersManager.deactivateApplication(\n          application.getUser(), application.getApplicationId());\n    }\n    \n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3732. Modified CapacityScheduler to use only users with pending requests for computing user-limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 5:32 PM",
      "commitName": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/12 3:31 PM",
      "commitNameOld": "21c9116309d8482e7e28522cd7386e65415b15e9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,28 @@\n   public synchronized void removeApplication(SchedulerApp application, User user) {\n     activeApplications.remove(application);\n     applicationsMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication();\n     if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n     // Check if we can activate more applications\n     activateApplications();\n     \n+    // Inform the activeUsersManager\n+    synchronized (application) {\n+      activeUsersManager.deactivateApplication(\n+          application.getUser(), application.getApplicationId());\n+    }\n+    \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n         \" #user-pending-applications: \" + user.getPendingApplications() +\n         \" #user-active-applications: \" + user.getActiveApplications() +\n         \" #queue-pending-applications: \" + getNumPendingApplications() +\n         \" #queue-active-applications: \" + getNumActiveApplications()\n         );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplication(SchedulerApp application, User user) {\n    activeApplications.remove(application);\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication();\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n    \n    // Inform the activeUsersManager\n    synchronized (application) {\n      activeUsersManager.deactivateApplication(\n          application.getUser(), application.getApplicationId());\n    }\n    \n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "6b608aad7d52b524fa94955a538e8b3524d42d93": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2697. Enhance CapacityScheduler to cap concurrently running applications per-queue \u0026 per-user.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 12:49 PM",
      "commitName": "6b608aad7d52b524fa94955a538e8b3524d42d93",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/08/11 12:52 PM",
      "commitNameOld": "b9a5fd51904a074a7a33f38266378f0f6f97b531",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,22 @@\n   public synchronized void removeApplication(SchedulerApp application, User user) {\n-    applications.remove(application);\n+    activeApplications.remove(application);\n     applicationsMap.remove(application.getApplicationAttemptId());\n \n     user.finishApplication();\n-    if (user.getApplications() \u003d\u003d 0) {\n+    if (user.getTotalApplications() \u003d\u003d 0) {\n       users.remove(application.getUser());\n     }\n \n+    // Check if we can activate more applications\n+    activateApplications();\n+    \n     LOG.info(\"Application removed -\" +\n         \" appId: \" + application.getApplicationId() + \n         \" user: \" + application.getUser() + \n         \" queue: \" + getQueueName() +\n-        \" #user-applications: \" + user.getApplications() + \n-        \" #queue-applications: \" + getNumApplications());\n+        \" #user-pending-applications: \" + user.getPendingApplications() +\n+        \" #user-active-applications: \" + user.getActiveApplications() +\n+        \" #queue-pending-applications: \" + getNumPendingApplications() +\n+        \" #queue-active-applications: \" + getNumActiveApplications()\n+        );\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplication(SchedulerApp application, User user) {\n    activeApplications.remove(application);\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication();\n    if (user.getTotalApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    // Check if we can activate more applications\n    activateApplications();\n    \n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-pending-applications: \" + user.getPendingApplications() +\n        \" #user-active-applications: \" + user.getActiveApplications() +\n        \" #queue-pending-applications: \" + getNumPendingApplications() +\n        \" #queue-active-applications: \" + getNumActiveApplications()\n        );\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void removeApplication(SchedulerApp application, User user) {\n    applications.remove(application);\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication();\n    if (user.getApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-applications: \" + user.getApplications() + \n        \" #queue-applications: \" + getNumApplications());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  public synchronized void removeApplication(SchedulerApp application, User user) {\n+    applications.remove(application);\n+    applicationsMap.remove(application.getApplicationAttemptId());\n+\n+    user.finishApplication();\n+    if (user.getApplications() \u003d\u003d 0) {\n+      users.remove(application.getUser());\n+    }\n+\n+    LOG.info(\"Application removed -\" +\n+        \" appId: \" + application.getApplicationId() + \n+        \" user: \" + application.getUser() + \n+        \" queue: \" + getQueueName() +\n+        \" #user-applications: \" + user.getApplications() + \n+        \" #queue-applications: \" + getNumApplications());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void removeApplication(SchedulerApp application, User user) {\n    applications.remove(application);\n    applicationsMap.remove(application.getApplicationAttemptId());\n\n    user.finishApplication();\n    if (user.getApplications() \u003d\u003d 0) {\n      users.remove(application.getUser());\n    }\n\n    LOG.info(\"Application removed -\" +\n        \" appId: \" + application.getApplicationId() + \n        \" user: \" + application.getUser() + \n        \" queue: \" + getQueueName() +\n        \" #user-applications: \" + user.getApplications() + \n        \" #queue-applications: \" + getNumApplications());\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}