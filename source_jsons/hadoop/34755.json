{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMProxyService.java",
  "functionName": "processApplicationStartRequest",
  "functionId": "processApplicationStartRequest___request-StartContainerRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
  "functionStartLine": 388,
  "functionEndLine": 431,
  "numCommitsSeen": 17,
  "timeTaken": 2176,
  "changeHistory": [
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02"
  ],
  "changeHistoryShort": {
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": "Ybodychange",
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6924. Metrics for Federation AMRMProxy. Contributed by Young Chen\n",
      "commitDate": "06/03/20 8:04 PM",
      "commitName": "3859fa76d0b5202abaf6e02fc9743684f5ab1cb2",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 357.2,
      "commitsBetweenForRepo": 2130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,44 @@\n   public void processApplicationStartRequest(StartContainerRequest request)\n       throws IOException, YarnException {\n-    LOG.info(\"Callback received for initializing request \"\n-        + \"processing pipeline for an AM\");\n-    ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n-        BuilderUtils.newContainerTokenIdentifier(request\n-            .getContainerToken());\n-    ApplicationAttemptId appAttemptId \u003d\n-        containerTokenIdentifierForKey.getContainerID()\n-            .getApplicationAttemptId();\n-    Credentials credentials \u003d\n-        YarnServerSecurityUtils.parseCredentials(request\n-            .getContainerLaunchContext());\n+    long startTime \u003d clock.getTime();\n+    try {\n+      LOG.info(\"Callback received for initializing request \"\n+          + \"processing pipeline for an AM\");\n+      ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n+          BuilderUtils.newContainerTokenIdentifier(request.getContainerToken());\n+      ApplicationAttemptId appAttemptId \u003d\n+          containerTokenIdentifierForKey.getContainerID()\n+              .getApplicationAttemptId();\n+      Credentials credentials \u003d YarnServerSecurityUtils\n+          .parseCredentials(request.getContainerLaunchContext());\n \n-    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n-        getFirstAMRMToken(credentials.getAllTokens());\n-    if (amrmToken \u003d\u003d null) {\n-      throw new YarnRuntimeException(\n-          \"AMRMToken not found in the start container request for application:\"\n-              + appAttemptId.toString());\n+      Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n+          getFirstAMRMToken(credentials.getAllTokens());\n+      if (amrmToken \u003d\u003d null) {\n+        throw new YarnRuntimeException(\n+            \"AMRMToken not found in the start container request for \"\n+                + \"application:\" + appAttemptId.toString());\n+      }\n+\n+      // Substitute the existing AMRM Token with a local one. Keep the rest of\n+      // the tokens in the credentials intact.\n+      Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n+          this.secretManager.createAndGetAMRMToken(appAttemptId);\n+      credentials.addToken(localToken.getService(), localToken);\n+\n+      DataOutputBuffer dob \u003d new DataOutputBuffer();\n+      credentials.writeTokenStorageToStream(dob);\n+      request.getContainerLaunchContext()\n+          .setTokens(ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n+\n+      initializePipeline(appAttemptId,\n+          containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n+          localToken, null, false, credentials);\n+\n+      long endTime \u003d clock.getTime();\n+      this.metrics.succeededAppStartRequests(endTime - startTime);\n+    } catch (Throwable t) {\n+      this.metrics.incrFailedAppStartRequests();\n+      throw t;\n     }\n-\n-    // Substitute the existing AMRM Token with a local one. Keep the rest of the\n-    // tokens in the credentials intact.\n-    Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n-        this.secretManager.createAndGetAMRMToken(appAttemptId);\n-    credentials.addToken(localToken.getService(), localToken);\n-\n-    DataOutputBuffer dob \u003d new DataOutputBuffer();\n-    credentials.writeTokenStorageToStream(dob);\n-    request.getContainerLaunchContext().setTokens(\n-        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n-\n-    initializePipeline(appAttemptId,\n-        containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n-        localToken, null, false, credentials);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processApplicationStartRequest(StartContainerRequest request)\n      throws IOException, YarnException {\n    long startTime \u003d clock.getTime();\n    try {\n      LOG.info(\"Callback received for initializing request \"\n          + \"processing pipeline for an AM\");\n      ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n          BuilderUtils.newContainerTokenIdentifier(request.getContainerToken());\n      ApplicationAttemptId appAttemptId \u003d\n          containerTokenIdentifierForKey.getContainerID()\n              .getApplicationAttemptId();\n      Credentials credentials \u003d YarnServerSecurityUtils\n          .parseCredentials(request.getContainerLaunchContext());\n\n      Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n          getFirstAMRMToken(credentials.getAllTokens());\n      if (amrmToken \u003d\u003d null) {\n        throw new YarnRuntimeException(\n            \"AMRMToken not found in the start container request for \"\n                + \"application:\" + appAttemptId.toString());\n      }\n\n      // Substitute the existing AMRM Token with a local one. Keep the rest of\n      // the tokens in the credentials intact.\n      Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n          this.secretManager.createAndGetAMRMToken(appAttemptId);\n      credentials.addToken(localToken.getService(), localToken);\n\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      credentials.writeTokenStorageToStream(dob);\n      request.getContainerLaunchContext()\n          .setTokens(ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n\n      initializePipeline(appAttemptId,\n          containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n          localToken, null, false, credentials);\n\n      long endTime \u003d clock.getTime();\n      this.metrics.succeededAppStartRequests(endTime - startTime);\n    } catch (Throwable t) {\n      this.metrics.incrFailedAppStartRequests();\n      throw t;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "22/06/17 11:27 AM",
      "commitNameOld": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 148.3,
      "commitsBetweenForRepo": 1203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void processApplicationStartRequest(StartContainerRequest request)\n       throws IOException, YarnException {\n     LOG.info(\"Callback received for initializing request \"\n         + \"processing pipeline for an AM\");\n     ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n         BuilderUtils.newContainerTokenIdentifier(request\n             .getContainerToken());\n     ApplicationAttemptId appAttemptId \u003d\n         containerTokenIdentifierForKey.getContainerID()\n             .getApplicationAttemptId();\n     Credentials credentials \u003d\n         YarnServerSecurityUtils.parseCredentials(request\n             .getContainerLaunchContext());\n \n     Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n         getFirstAMRMToken(credentials.getAllTokens());\n     if (amrmToken \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"AMRMToken not found in the start container request for application:\"\n               + appAttemptId.toString());\n     }\n \n     // Substitute the existing AMRM Token with a local one. Keep the rest of the\n     // tokens in the credentials intact.\n     Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n         this.secretManager.createAndGetAMRMToken(appAttemptId);\n     credentials.addToken(localToken.getService(), localToken);\n \n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     request.getContainerLaunchContext().setTokens(\n         ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n \n     initializePipeline(appAttemptId,\n         containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n-        localToken, null, false);\n+        localToken, null, false, credentials);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processApplicationStartRequest(StartContainerRequest request)\n      throws IOException, YarnException {\n    LOG.info(\"Callback received for initializing request \"\n        + \"processing pipeline for an AM\");\n    ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n        BuilderUtils.newContainerTokenIdentifier(request\n            .getContainerToken());\n    ApplicationAttemptId appAttemptId \u003d\n        containerTokenIdentifierForKey.getContainerID()\n            .getApplicationAttemptId();\n    Credentials credentials \u003d\n        YarnServerSecurityUtils.parseCredentials(request\n            .getContainerLaunchContext());\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n        getFirstAMRMToken(credentials.getAllTokens());\n    if (amrmToken \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"AMRMToken not found in the start container request for application:\"\n              + appAttemptId.toString());\n    }\n\n    // Substitute the existing AMRM Token with a local one. Keep the rest of the\n    // tokens in the credentials intact.\n    Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n        this.secretManager.createAndGetAMRMToken(appAttemptId);\n    credentials.addToken(localToken.getService(), localToken);\n\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    request.getContainerLaunchContext().setTokens(\n        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n\n    initializePipeline(appAttemptId,\n        containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n        localToken, null, false, credentials);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "49aa60e50d20f8c18ed6f00fa8966244536fe7da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6127. Add support for work preserving NM restart when AMRMProxy is enabled. (Botong Huang via asuresh).\n",
      "commitDate": "22/06/17 11:27 AM",
      "commitName": "49aa60e50d20f8c18ed6f00fa8966244536fe7da",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "08/05/17 4:55 PM",
      "commitNameOld": "749e5c09b9990590c282ea944e24735b795351fc",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 44.77,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   public void processApplicationStartRequest(StartContainerRequest request)\n       throws IOException, YarnException {\n     LOG.info(\"Callback received for initializing request \"\n         + \"processing pipeline for an AM\");\n     ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n         BuilderUtils.newContainerTokenIdentifier(request\n             .getContainerToken());\n     ApplicationAttemptId appAttemptId \u003d\n         containerTokenIdentifierForKey.getContainerID()\n             .getApplicationAttemptId();\n     Credentials credentials \u003d\n         YarnServerSecurityUtils.parseCredentials(request\n             .getContainerLaunchContext());\n \n     Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n         getFirstAMRMToken(credentials.getAllTokens());\n     if (amrmToken \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"AMRMToken not found in the start container request for application:\"\n               + appAttemptId.toString());\n     }\n \n     // Substitute the existing AMRM Token with a local one. Keep the rest of the\n     // tokens in the credentials intact.\n     Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n         this.secretManager.createAndGetAMRMToken(appAttemptId);\n     credentials.addToken(localToken.getService(), localToken);\n \n     DataOutputBuffer dob \u003d new DataOutputBuffer();\n     credentials.writeTokenStorageToStream(dob);\n     request.getContainerLaunchContext().setTokens(\n         ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n \n-    initializePipeline(containerTokenIdentifierForKey.getContainerID()\n-        .getApplicationAttemptId(),\n-        containerTokenIdentifierForKey.getApplicationSubmitter(),\n-        amrmToken, localToken);\n+    initializePipeline(appAttemptId,\n+        containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n+        localToken, null, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void processApplicationStartRequest(StartContainerRequest request)\n      throws IOException, YarnException {\n    LOG.info(\"Callback received for initializing request \"\n        + \"processing pipeline for an AM\");\n    ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n        BuilderUtils.newContainerTokenIdentifier(request\n            .getContainerToken());\n    ApplicationAttemptId appAttemptId \u003d\n        containerTokenIdentifierForKey.getContainerID()\n            .getApplicationAttemptId();\n    Credentials credentials \u003d\n        YarnServerSecurityUtils.parseCredentials(request\n            .getContainerLaunchContext());\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n        getFirstAMRMToken(credentials.getAllTokens());\n    if (amrmToken \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"AMRMToken not found in the start container request for application:\"\n              + appAttemptId.toString());\n    }\n\n    // Substitute the existing AMRM Token with a local one. Keep the rest of the\n    // tokens in the credentials intact.\n    Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n        this.secretManager.createAndGetAMRMToken(appAttemptId);\n    credentials.addToken(localToken.getService(), localToken);\n\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    request.getContainerLaunchContext().setTokens(\n        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n\n    initializePipeline(appAttemptId,\n        containerTokenIdentifierForKey.getApplicationSubmitter(), amrmToken,\n        localToken, null, false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java",
      "extendedDetails": {}
    },
    "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2884. Added a proxy service in NM to proxy the the communication between AM and RM. Contributed by Kishore Chaliparambil\n",
      "commitDate": "07/09/15 6:35 PM",
      "commitName": "6f72f1e6003ab11679bebeb96f27f1f62b3b3e02",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,38 @@\n+  public void processApplicationStartRequest(StartContainerRequest request)\n+      throws IOException, YarnException {\n+    LOG.info(\"Callback received for initializing request \"\n+        + \"processing pipeline for an AM\");\n+    ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n+        BuilderUtils.newContainerTokenIdentifier(request\n+            .getContainerToken());\n+    ApplicationAttemptId appAttemptId \u003d\n+        containerTokenIdentifierForKey.getContainerID()\n+            .getApplicationAttemptId();\n+    Credentials credentials \u003d\n+        YarnServerSecurityUtils.parseCredentials(request\n+            .getContainerLaunchContext());\n+\n+    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n+        getFirstAMRMToken(credentials.getAllTokens());\n+    if (amrmToken \u003d\u003d null) {\n+      throw new YarnRuntimeException(\n+          \"AMRMToken not found in the start container request for application:\"\n+              + appAttemptId.toString());\n+    }\n+\n+    // Substitute the existing AMRM Token with a local one. Keep the rest of the\n+    // tokens in the credentials intact.\n+    Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n+        this.secretManager.createAndGetAMRMToken(appAttemptId);\n+    credentials.addToken(localToken.getService(), localToken);\n+\n+    DataOutputBuffer dob \u003d new DataOutputBuffer();\n+    credentials.writeTokenStorageToStream(dob);\n+    request.getContainerLaunchContext().setTokens(\n+        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n+\n+    initializePipeline(containerTokenIdentifierForKey.getContainerID()\n+        .getApplicationAttemptId(),\n+        containerTokenIdentifierForKey.getApplicationSubmitter(),\n+        amrmToken, localToken);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void processApplicationStartRequest(StartContainerRequest request)\n      throws IOException, YarnException {\n    LOG.info(\"Callback received for initializing request \"\n        + \"processing pipeline for an AM\");\n    ContainerTokenIdentifier containerTokenIdentifierForKey \u003d\n        BuilderUtils.newContainerTokenIdentifier(request\n            .getContainerToken());\n    ApplicationAttemptId appAttemptId \u003d\n        containerTokenIdentifierForKey.getContainerID()\n            .getApplicationAttemptId();\n    Credentials credentials \u003d\n        YarnServerSecurityUtils.parseCredentials(request\n            .getContainerLaunchContext());\n\n    Token\u003cAMRMTokenIdentifier\u003e amrmToken \u003d\n        getFirstAMRMToken(credentials.getAllTokens());\n    if (amrmToken \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"AMRMToken not found in the start container request for application:\"\n              + appAttemptId.toString());\n    }\n\n    // Substitute the existing AMRM Token with a local one. Keep the rest of the\n    // tokens in the credentials intact.\n    Token\u003cAMRMTokenIdentifier\u003e localToken \u003d\n        this.secretManager.createAndGetAMRMToken(appAttemptId);\n    credentials.addToken(localToken.getService(), localToken);\n\n    DataOutputBuffer dob \u003d new DataOutputBuffer();\n    credentials.writeTokenStorageToStream(dob);\n    request.getContainerLaunchContext().setTokens(\n        ByteBuffer.wrap(dob.getData(), 0, dob.getLength()));\n\n    initializePipeline(containerTokenIdentifierForKey.getContainerID()\n        .getApplicationAttemptId(),\n        containerTokenIdentifierForKey.getApplicationSubmitter(),\n        amrmToken, localToken);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/AMRMProxyService.java"
    }
  }
}