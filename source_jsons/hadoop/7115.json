{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySatisfier.java",
  "functionName": "findTargetsForExpectedStorageTypes",
  "functionId": "findTargetsForExpectedStorageTypes___expected-List__StorageType____liveDns-DatanodeMap",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
  "functionStartLine": 837,
  "functionEndLine": 864,
  "numCommitsSeen": 59,
  "timeTaken": 6019,
  "changeHistory": [
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54",
    "1438da494424193e330f24edef823bbd60dc37d2"
  ],
  "changeHistoryShort": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d": "Ymultichange(Yparameterchange,Ybodychange)",
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": "Yfilerename",
    "1438da494424193e330f24edef823bbd60dc37d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75ccc1396b677777cdc0d4992a4af3911f9f88c2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,28 @@\n-  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n-      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n-    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n-    for (DatanodeStorageReport dn : liveDns) {\n-      StorageReport[] storageReports \u003d dn.getStorageReports();\n-      for (StorageReport storageReport : storageReports) {\n-        StorageType t \u003d storageReport.getStorage().getStorageType();\n-        if (expected.contains(t)) {\n-          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n-          if (maxRemaining \u003e 0L) {\n-            targetMap.add(t, dn.getDatanodeInfo());\n-          }\n+      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n+        DatanodeMap liveDns) {\n+    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n+        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n+        StorageType.class);\n+\n+    for (StorageType storageType : expected) {\n+      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n+      if (nodes \u003d\u003d null) {\n+        return targetsMap;\n+      }\n+      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n+          .get(storageType);\n+      if (listNodes \u003d\u003d null) {\n+        listNodes \u003d new ArrayList\u003c\u003e();\n+        targetsMap.put(storageType, listNodes);\n+      }\n+\n+      for (DatanodeWithStorage n : nodes) {\n+        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n+            storageType);\n+        if (node !\u003d null) {\n+          listNodes.add(node);\n         }\n       }\n     }\n-    return targetMap;\n+    return targetsMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n        DatanodeMap liveDns) {\n    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n        StorageType.class);\n\n    for (StorageType storageType : expected) {\n      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n      if (nodes \u003d\u003d null) {\n        return targetsMap;\n      }\n      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n          .get(storageType);\n      if (listNodes \u003d\u003d null) {\n        listNodes \u003d new ArrayList\u003c\u003e();\n        targetsMap.put(storageType, listNodes);\n      }\n\n      for (DatanodeWithStorage n : nodes) {\n        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n            storageType);\n        if (node !\u003d null) {\n          listNodes.add(node);\n        }\n      }\n    }\n    return targetsMap;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "[expected-List\u003cStorageType\u003e, liveDns-DatanodeStorageReport[]]",
            "newValue": "[expected-List\u003cStorageType\u003e, liveDns-DatanodeMap]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,28 @@\n-  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n-      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n-    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n-    for (DatanodeStorageReport dn : liveDns) {\n-      StorageReport[] storageReports \u003d dn.getStorageReports();\n-      for (StorageReport storageReport : storageReports) {\n-        StorageType t \u003d storageReport.getStorage().getStorageType();\n-        if (expected.contains(t)) {\n-          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n-          if (maxRemaining \u003e 0L) {\n-            targetMap.add(t, dn.getDatanodeInfo());\n-          }\n+      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n+        DatanodeMap liveDns) {\n+    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n+        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n+        StorageType.class);\n+\n+    for (StorageType storageType : expected) {\n+      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n+      if (nodes \u003d\u003d null) {\n+        return targetsMap;\n+      }\n+      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n+          .get(storageType);\n+      if (listNodes \u003d\u003d null) {\n+        listNodes \u003d new ArrayList\u003c\u003e();\n+        targetsMap.put(storageType, listNodes);\n+      }\n+\n+      for (DatanodeWithStorage n : nodes) {\n+        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n+            storageType);\n+        if (node !\u003d null) {\n+          listNodes.add(node);\n         }\n       }\n     }\n-    return targetMap;\n+    return targetsMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n        DatanodeMap liveDns) {\n    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n        StorageType.class);\n\n    for (StorageType storageType : expected) {\n      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n      if (nodes \u003d\u003d null) {\n        return targetsMap;\n      }\n      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n          .get(storageType);\n      if (listNodes \u003d\u003d null) {\n        listNodes \u003d new ArrayList\u003c\u003e();\n        targetsMap.put(storageType, listNodes);\n      }\n\n      for (DatanodeWithStorage n : nodes) {\n        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n            storageType);\n        if (node !\u003d null) {\n          listNodes.add(node);\n        }\n      }\n    }\n    return targetsMap;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "StorageTypeNodeMap",
            "newValue": "EnumMap\u003cStorageType,List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13166: [SPS]: Implement caching mechanism to keep LIVE datanodes to minimize costly getLiveDatanodeStorageReport() calls. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "75ccc1396b677777cdc0d4992a4af3911f9f88c2",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,28 @@\n-  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n-      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n-    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n-    for (DatanodeStorageReport dn : liveDns) {\n-      StorageReport[] storageReports \u003d dn.getStorageReports();\n-      for (StorageReport storageReport : storageReports) {\n-        StorageType t \u003d storageReport.getStorage().getStorageType();\n-        if (expected.contains(t)) {\n-          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n-          if (maxRemaining \u003e 0L) {\n-            targetMap.add(t, dn.getDatanodeInfo());\n-          }\n+      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n+        DatanodeMap liveDns) {\n+    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n+        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n+        StorageType.class);\n+\n+    for (StorageType storageType : expected) {\n+      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n+      if (nodes \u003d\u003d null) {\n+        return targetsMap;\n+      }\n+      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n+          .get(storageType);\n+      if (listNodes \u003d\u003d null) {\n+        listNodes \u003d new ArrayList\u003c\u003e();\n+        targetsMap.put(storageType, listNodes);\n+      }\n+\n+      for (DatanodeWithStorage n : nodes) {\n+        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n+            storageType);\n+        if (node !\u003d null) {\n+          listNodes.add(node);\n         }\n       }\n     }\n-    return targetMap;\n+    return targetsMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      findTargetsForExpectedStorageTypes(List\u003cStorageType\u003e expected,\n        DatanodeMap liveDns) {\n    EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e targetsMap \u003d\n        new EnumMap\u003cStorageType, List\u003cDatanodeWithStorage.StorageDetails\u003e\u003e(\n        StorageType.class);\n\n    for (StorageType storageType : expected) {\n      List\u003cDatanodeWithStorage\u003e nodes \u003d liveDns.getTarget(storageType);\n      if (nodes \u003d\u003d null) {\n        return targetsMap;\n      }\n      List\u003cDatanodeWithStorage.StorageDetails\u003e listNodes \u003d targetsMap\n          .get(storageType);\n      if (listNodes \u003d\u003d null) {\n        listNodes \u003d new ArrayList\u003c\u003e();\n        targetsMap.put(storageType, listNodes);\n      }\n\n      for (DatanodeWithStorage n : nodes) {\n        final DatanodeWithStorage.StorageDetails node \u003d getMaxRemaining(n,\n            storageType);\n        if (node !\u003d null) {\n          listNodes.add(node);\n        }\n      }\n    }\n    return targetsMap;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {}
        }
      ]
    },
    "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n   private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n-      List\u003cStorageType\u003e expected) {\n+      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n     StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n-    List\u003cDatanodeDescriptor\u003e reports \u003d blockManager.getDatanodeManager()\n-        .getDatanodeListForReport(DatanodeReportType.LIVE);\n-    for (DatanodeDescriptor dn : reports) {\n+    for (DatanodeStorageReport dn : liveDns) {\n       StorageReport[] storageReports \u003d dn.getStorageReports();\n       for (StorageReport storageReport : storageReports) {\n         StorageType t \u003d storageReport.getStorage().getStorageType();\n         if (expected.contains(t)) {\n           final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n           if (maxRemaining \u003e 0L) {\n-            targetMap.add(t, dn);\n+            targetMap.add(t, dn.getDatanodeInfo());\n           }\n         }\n       }\n     }\n     return targetMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n    for (DatanodeStorageReport dn : liveDns) {\n      StorageReport[] storageReports \u003d dn.getStorageReports();\n      for (StorageReport storageReport : storageReports) {\n        StorageType t \u003d storageReport.getStorage().getStorageType();\n        if (expected.contains(t)) {\n          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n          if (maxRemaining \u003e 0L) {\n            targetMap.add(t, dn.getDatanodeInfo());\n          }\n        }\n      }\n    }\n    return targetMap;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {
            "oldValue": "[expected-List\u003cStorageType\u003e]",
            "newValue": "[expected-List\u003cStorageType\u003e, liveDns-DatanodeStorageReport[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12982 : [SPS]: Reduce the locking and cleanup the Namesystem access. Contributed by Rakesh R.\n",
          "commitDate": "12/08/18 3:06 AM",
          "commitName": "05d4daf6ba3e5bd40f46e8003ee12fc7c613453d",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "12/08/18 3:06 AM",
          "commitNameOld": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n   private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n-      List\u003cStorageType\u003e expected) {\n+      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n     StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n-    List\u003cDatanodeDescriptor\u003e reports \u003d blockManager.getDatanodeManager()\n-        .getDatanodeListForReport(DatanodeReportType.LIVE);\n-    for (DatanodeDescriptor dn : reports) {\n+    for (DatanodeStorageReport dn : liveDns) {\n       StorageReport[] storageReports \u003d dn.getStorageReports();\n       for (StorageReport storageReport : storageReports) {\n         StorageType t \u003d storageReport.getStorage().getStorageType();\n         if (expected.contains(t)) {\n           final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n           if (maxRemaining \u003e 0L) {\n-            targetMap.add(t, dn);\n+            targetMap.add(t, dn.getDatanodeInfo());\n           }\n         }\n       }\n     }\n     return targetMap;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n      List\u003cStorageType\u003e expected, DatanodeStorageReport[] liveDns) {\n    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n    for (DatanodeStorageReport dn : liveDns) {\n      StorageReport[] storageReports \u003d dn.getStorageReports();\n      for (StorageReport storageReport : storageReports) {\n        StorageType t \u003d storageReport.getStorage().getStorageType();\n        if (expected.contains(t)) {\n          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n          if (maxRemaining \u003e 0L) {\n            targetMap.add(t, dn.getDatanodeInfo());\n          }\n        }\n      }\n    }\n    return targetMap;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
          "extendedDetails": {}
        }
      ]
    },
    "78420719eb1f138c6f10558befb7bc8ebcc28a54": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-12955: [SPS]: Move SPS classes to a separate package. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "78420719eb1f138c6f10558befb7bc8ebcc28a54",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "c561cb316e365ef674784cd6cf0b12c0fbc271a3",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n      List\u003cStorageType\u003e expected) {\n    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n    List\u003cDatanodeDescriptor\u003e reports \u003d blockManager.getDatanodeManager()\n        .getDatanodeListForReport(DatanodeReportType.LIVE);\n    for (DatanodeDescriptor dn : reports) {\n      StorageReport[] storageReports \u003d dn.getStorageReports();\n      for (StorageReport storageReport : storageReports) {\n        StorageType t \u003d storageReport.getStorage().getStorageType();\n        if (expected.contains(t)) {\n          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n          if (maxRemaining \u003e 0L) {\n            targetMap.add(t, dn);\n          }\n        }\n      }\n    }\n    return targetMap;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java"
      }
    },
    "1438da494424193e330f24edef823bbd60dc37d2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10800: [SPS]: Daemon thread in Namenode to find blocks placed in other storage than what the policy specifies. Contributed by Uma Maheswara Rao G\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "1438da494424193e330f24edef823bbd60dc37d2",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,19 @@\n+  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n+      List\u003cStorageType\u003e expected) {\n+    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n+    List\u003cDatanodeDescriptor\u003e reports \u003d blockManager.getDatanodeManager()\n+        .getDatanodeListForReport(DatanodeReportType.LIVE);\n+    for (DatanodeDescriptor dn : reports) {\n+      StorageReport[] storageReports \u003d dn.getStorageReports();\n+      for (StorageReport storageReport : storageReports) {\n+        StorageType t \u003d storageReport.getStorage().getStorageType();\n+        if (expected.contains(t)) {\n+          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n+          if (maxRemaining \u003e 0L) {\n+            targetMap.add(t, dn);\n+          }\n+        }\n+      }\n+    }\n+    return targetMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private StorageTypeNodeMap findTargetsForExpectedStorageTypes(\n      List\u003cStorageType\u003e expected) {\n    StorageTypeNodeMap targetMap \u003d new StorageTypeNodeMap();\n    List\u003cDatanodeDescriptor\u003e reports \u003d blockManager.getDatanodeManager()\n        .getDatanodeListForReport(DatanodeReportType.LIVE);\n    for (DatanodeDescriptor dn : reports) {\n      StorageReport[] storageReports \u003d dn.getStorageReports();\n      for (StorageReport storageReport : storageReports) {\n        StorageType t \u003d storageReport.getStorage().getStorageType();\n        if (expected.contains(t)) {\n          final long maxRemaining \u003d getMaxRemaining(dn.getStorageReports(), t);\n          if (maxRemaining \u003e 0L) {\n            targetMap.add(t, dn);\n          }\n        }\n      }\n    }\n    return targetMap;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StoragePolicySatisfier.java"
    }
  }
}