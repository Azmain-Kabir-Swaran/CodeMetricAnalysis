{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SampleContainerLogAggregationPolicy.java",
  "functionName": "parseParameters",
  "functionId": "parseParameters___parameters-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/SampleContainerLogAggregationPolicy.java",
  "functionStartLine": 65,
  "functionEndLine": 102,
  "numCommitsSeen": 2,
  "timeTaken": 978,
  "changeHistory": [
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c"
  ],
  "changeHistoryShort": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "37e1c3d82a96d781e1c9982988b7de4aa5242d0c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-221. NM should provide a way for AM to tell it not to aggregate\nlogs. Contributed by Ming Ma\n",
      "commitDate": "22/08/15 4:25 PM",
      "commitName": "37e1c3d82a96d781e1c9982988b7de4aa5242d0c",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,38 @@\n+  public void parseParameters(String parameters) {\n+    Collection\u003cString\u003e params \u003d StringUtils.getStringCollection(parameters);\n+    for(String param : params) {\n+      // The first element is the property name.\n+      // The second element is the property value.\n+      String[] property \u003d StringUtils.getStrings(param, \":\");\n+      if (property \u003d\u003d null || property.length !\u003d 2) {\n+        continue;\n+      }\n+      if (property[0].equals(SAMPLE_RATE)) {\n+        try {\n+          float sampleRate \u003d Float.parseFloat(property[1]);\n+          if (sampleRate \u003e\u003d 0.0 \u0026\u0026 sampleRate \u003c\u003d 1.0) {\n+            this.sampleRate \u003d sampleRate;\n+          } else {\n+            LOG.warn(\"The format isn\u0027t valid. Sample rate falls back to the \" +\n+                \"default value \" + DEFAULT_SAMPLE_RATE);\n+          }\n+        } catch (NumberFormatException nfe) {\n+          LOG.warn(\"The format isn\u0027t valid. Sample rate falls back to the \" +\n+              \"default value \" + DEFAULT_SAMPLE_RATE);\n+        }\n+      } else if (property[0].equals(MIN_THRESHOLD)) {\n+        try {\n+          int minThreshold \u003d Integer.parseInt(property[1]);\n+          if (minThreshold \u003e\u003d 0) {\n+            this.minThreshold \u003d minThreshold;\n+          } else {\n+            LOG.warn(\"The format isn\u0027t valid. Min threshold falls back to \" +\n+                \"the default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\n+          }\n+        } catch (NumberFormatException nfe) {\n+          LOG.warn(\"The format isn\u0027t valid. Min threshold falls back to the \" +\n+              \"default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void parseParameters(String parameters) {\n    Collection\u003cString\u003e params \u003d StringUtils.getStringCollection(parameters);\n    for(String param : params) {\n      // The first element is the property name.\n      // The second element is the property value.\n      String[] property \u003d StringUtils.getStrings(param, \":\");\n      if (property \u003d\u003d null || property.length !\u003d 2) {\n        continue;\n      }\n      if (property[0].equals(SAMPLE_RATE)) {\n        try {\n          float sampleRate \u003d Float.parseFloat(property[1]);\n          if (sampleRate \u003e\u003d 0.0 \u0026\u0026 sampleRate \u003c\u003d 1.0) {\n            this.sampleRate \u003d sampleRate;\n          } else {\n            LOG.warn(\"The format isn\u0027t valid. Sample rate falls back to the \" +\n                \"default value \" + DEFAULT_SAMPLE_RATE);\n          }\n        } catch (NumberFormatException nfe) {\n          LOG.warn(\"The format isn\u0027t valid. Sample rate falls back to the \" +\n              \"default value \" + DEFAULT_SAMPLE_RATE);\n        }\n      } else if (property[0].equals(MIN_THRESHOLD)) {\n        try {\n          int minThreshold \u003d Integer.parseInt(property[1]);\n          if (minThreshold \u003e\u003d 0) {\n            this.minThreshold \u003d minThreshold;\n          } else {\n            LOG.warn(\"The format isn\u0027t valid. Min threshold falls back to \" +\n                \"the default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\n          }\n        } catch (NumberFormatException nfe) {\n          LOG.warn(\"The format isn\u0027t valid. Min threshold falls back to the \" +\n              \"default value \" + DEFAULT_SAMPLE_MIN_THRESHOLD);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/SampleContainerLogAggregationPolicy.java"
    }
  }
}