{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "addJarResource",
  "functionId": "addJarResource___serviceName-String__localResources-Map__String,LocalResource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1288,
  "functionEndLine": 1317,
  "numCommitsSeen": 56,
  "timeTaken": 5137,
  "changeHistory": [
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83": "Ybodychange",
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24eeea8b18749e02ea05b03eb18e3cf0455077c5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "01/05/18 1:46 PM",
      "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "01/05/18 1:46 PM",
          "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/04/18 9:24 AM",
          "commitNameOld": "14b47990af39de71b0a09d995208f45ea3b79c23",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n-      throws IOException, SliderException {\n+      throws IOException, YarnException {\n     Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n-    if (fs.isFile(dependencyLibTarGzip)) {\n+    if (actionDependency(null, false) \u003d\u003d EXIT_SUCCESS) {\n       LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n       fs.submitTarGzipAndUpdate(localResources);\n     } else {\n       if (dependencyLibTarGzip !\u003d null) {\n         LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n             YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n       }\n       String[] libs \u003d ServiceUtils.getLibDirs();\n       LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n           + \" apps, set config property {} to the dependency tarball location.\"\n           + \" Dependency tarball can be uploaded to any HDFS path directly\"\n           + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n           YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n           ApplicationCLI.ENABLE_FAST_LAUNCH);\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, YarnException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (actionDependency(null, false) \u003d\u003d EXIT_SUCCESS) {\n      LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n      fs.submitTarGzipAndUpdate(localResources);\n    } else {\n      if (dependencyLibTarGzip !\u003d null) {\n        LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n            YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n      }\n      String[] libs \u003d ServiceUtils.getLibDirs();\n      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n          + \" apps, set config property {} to the dependency tarball location.\"\n          + \" Dependency tarball can be uploaded to any HDFS path directly\"\n          + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n          YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n          ApplicationCLI.ENABLE_FAST_LAUNCH);\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[IOException, SliderException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7799. Improved YARN service jar file handling.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "01/05/18 1:46 PM",
          "commitName": "24eeea8b18749e02ea05b03eb18e3cf0455077c5",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "27/04/18 9:24 AM",
          "commitNameOld": "14b47990af39de71b0a09d995208f45ea3b79c23",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n-      throws IOException, SliderException {\n+      throws IOException, YarnException {\n     Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n-    if (fs.isFile(dependencyLibTarGzip)) {\n+    if (actionDependency(null, false) \u003d\u003d EXIT_SUCCESS) {\n       LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n       fs.submitTarGzipAndUpdate(localResources);\n     } else {\n       if (dependencyLibTarGzip !\u003d null) {\n         LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n             YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n       }\n       String[] libs \u003d ServiceUtils.getLibDirs();\n       LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n           + \" apps, set config property {} to the dependency tarball location.\"\n           + \" Dependency tarball can be uploaded to any HDFS path directly\"\n           + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n           YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n           ApplicationCLI.ENABLE_FAST_LAUNCH);\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, YarnException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (actionDependency(null, false) \u003d\u003d EXIT_SUCCESS) {\n      LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n      fs.submitTarGzipAndUpdate(localResources);\n    } else {\n      if (dependencyLibTarGzip !\u003d null) {\n        LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n            YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n      }\n      String[] libs \u003d ServiceUtils.getLibDirs();\n      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n          + \" apps, set config property {} to the dependency tarball location.\"\n          + \" Dependency tarball can be uploaded to any HDFS path directly\"\n          + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n          YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n          ApplicationCLI.ENABLE_FAST_LAUNCH);\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7766. Introduce a new config property for YARN Service dependency tarball location. Contributed by Gour Saha\n",
      "commitDate": "23/01/18 10:53 AM",
      "commitName": "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/01/18 12:11 PM",
      "commitNameOld": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,30 @@\n   protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n     Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n-      LOG.debug(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n-          + dependencyLibTarGzip);\n+      LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n       fs.submitTarGzipAndUpdate(localResources);\n     } else {\n+      if (dependencyLibTarGzip !\u003d null) {\n+        LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n+            YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n+      }\n       String[] libs \u003d ServiceUtils.getLibDirs();\n-      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\" +\n-          \" apps, pre-upload dependency jars to HDFS \"\n-          + \"using command: yarn app -enableFastLaunch\");\n+      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n+          + \" apps, set config property {} to the dependency tarball location.\"\n+          + \" Dependency tarball can be uploaded to any HDFS path directly\"\n+          + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n+          YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n+          ApplicationCLI.ENABLE_FAST_LAUNCH);\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\n      fs.submitTarGzipAndUpdate(localResources);\n    } else {\n      if (dependencyLibTarGzip !\u003d null) {\n        LOG.warn(\"Property {} has a value {}, but is not a valid file\",\n            YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\n      }\n      String[] libs \u003d ServiceUtils.getLibDirs();\n      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\"\n          + \" apps, set config property {} to the dependency tarball location.\"\n          + \" Dependency tarball can be uploaded to any HDFS path directly\"\n          + \" or by using command: yarn app -{} [\u003cDestination Folder\u003e]\",\n          YarnServiceConf.DEPENDENCY_TARBALL_PATH,\n          ApplicationCLI.ENABLE_FAST_LAUNCH);\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n   protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n     Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n-      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n+      LOG.debug(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n           + dependencyLibTarGzip);\n-      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n+      fs.submitTarGzipAndUpdate(localResources);\n     } else {\n-      String[] libs \u003d SliderUtils.getLibDirs();\n+      String[] libs \u003d ServiceUtils.getLibDirs();\n+      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\" +\n+          \" apps, pre-upload dependency jars to HDFS \"\n+          + \"using command: yarn app -enableFastLaunch\");\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.debug(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n          + dependencyLibTarGzip);\n      fs.submitTarGzipAndUpdate(localResources);\n    } else {\n      String[] libs \u003d ServiceUtils.getLibDirs();\n      LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\" +\n          \" apps, pre-upload dependency jars to HDFS \"\n          + \"using command: yarn app -enableFastLaunch\");\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected Path addJarResource(String appName,\n+  protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n-    Path libPath \u003d fs.buildClusterDirPath(appName);\n+    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n       LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n           + dependencyLibTarGzip);\n       SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n     } else {\n       String[] libs \u003d SliderUtils.getLibDirs();\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n          + dependencyLibTarGzip);\n      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n    } else {\n      String[] libs \u003d SliderUtils.getLibDirs();\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected Path addJarResource(String appName,\n+  protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n-    Path libPath \u003d fs.buildClusterDirPath(appName);\n+    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n       LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n           + dependencyLibTarGzip);\n       SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n     } else {\n       String[] libs \u003d SliderUtils.getLibDirs();\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n          + dependencyLibTarGzip);\n      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n    } else {\n      String[] libs \u003d SliderUtils.getLibDirs();\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected Path addJarResource(String appName,\n+  protected Path addJarResource(String serviceName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n-    Path libPath \u003d fs.buildClusterDirPath(appName);\n+    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n     ProviderUtils\n         .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n       LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n           + dependencyLibTarGzip);\n       SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n     } else {\n       String[] libs \u003d SliderUtils.getLibDirs();\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Path addJarResource(String serviceName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(serviceName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n          + dependencyLibTarGzip);\n      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n    } else {\n      String[] libs \u003d SliderUtils.getLibDirs();\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String, localResources-Map\u003cString,LocalResource\u003e]",
            "newValue": "[serviceName-String, localResources-Map\u003cString,LocalResource\u003e]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected Path addJarResource(String appName,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, SliderException {\n     Path libPath \u003d fs.buildClusterDirPath(appName);\n     ProviderUtils\n-        .addProviderJar(localResources, ServiceMaster.class, SLIDER_JAR, fs,\n+        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n             libPath, \"lib\", false);\n     Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n     if (fs.isFile(dependencyLibTarGzip)) {\n-      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \": \"\n+      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n           + dependencyLibTarGzip);\n       SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n     } else {\n       String[] libs \u003d SliderUtils.getLibDirs();\n       for (String libDirProp : libs) {\n         ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n             libDirProp);\n       }\n     }\n     return libPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path addJarResource(String appName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(appName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \":/\"\n          + dependencyLibTarGzip);\n      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n    } else {\n      String[] libs \u003d SliderUtils.getLibDirs();\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,21 @@\n+  protected Path addJarResource(String appName,\n+      Map\u003cString, LocalResource\u003e localResources)\n+      throws IOException, SliderException {\n+    Path libPath \u003d fs.buildClusterDirPath(appName);\n+    ProviderUtils\n+        .addProviderJar(localResources, ServiceMaster.class, SLIDER_JAR, fs,\n+            libPath, \"lib\", false);\n+    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n+    if (fs.isFile(dependencyLibTarGzip)) {\n+      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \": \"\n+          + dependencyLibTarGzip);\n+      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n+    } else {\n+      String[] libs \u003d SliderUtils.getLibDirs();\n+      for (String libDirProp : libs) {\n+        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n+            libDirProp);\n+      }\n+    }\n+    return libPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Path addJarResource(String appName,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, SliderException {\n    Path libPath \u003d fs.buildClusterDirPath(appName);\n    ProviderUtils\n        .addProviderJar(localResources, ServiceMaster.class, SLIDER_JAR, fs,\n            libPath, \"lib\", false);\n    Path dependencyLibTarGzip \u003d fs.getDependencyTarGzip();\n    if (fs.isFile(dependencyLibTarGzip)) {\n      LOG.info(\"Loading lib tar from \" + fs.getFileSystem().getScheme() + \": \"\n          + dependencyLibTarGzip);\n      SliderUtils.putAmTarGzipAndUpdate(localResources, fs);\n    } else {\n      String[] libs \u003d SliderUtils.getLibDirs();\n      for (String libDirProp : libs) {\n        ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\",\n            libDirProp);\n      }\n    }\n    return libPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}