{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SetReplication.java",
  "functionName": "waitForReplication",
  "functionId": "waitForReplication",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java",
  "functionStartLine": 108,
  "functionEndLine": 141,
  "numCommitsSeen": 45,
  "timeTaken": 1946,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
    "6e74a3592cbfa976f758dbf50654a1d00d23c270",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "6e74a3592cbfa976f758dbf50654a1d00d23c270": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/SetReplication.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/SetReplication.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/SetReplication.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/SetReplication.java"
      }
    },
    "b9599b26dc92634674e9c609b6df9b8d2c408e6e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/11 3:48 PM",
      "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 3:48 PM",
          "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/05/11 2:34 PM",
          "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n-  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n-    for(Path f : waitList) {\n-      System.out.print(\"Waiting for \" + f + \" ...\");\n-      System.out.flush();\n+  private void waitForReplication() throws IOException {\n+    for (PathData item : waitList) {\n+      out.print(\"Waiting for \" + item + \" ...\");\n+      out.flush();\n \n-      boolean printWarning \u003d false;\n-      FileSystem pFS \u003d f.getFileSystem(getConf());\n-      FileStatus status \u003d pFS.getFileStatus(f);\n-      long len \u003d status.getLen();\n+      boolean printedWarning \u003d false;\n+      boolean done \u003d false;\n+      while (!done) {\n+        item.refreshStatus();    \n+        BlockLocation[] locations \u003d\n+          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n \n-      for(boolean done \u003d false; !done; ) {\n-        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n         int i \u003d 0;\n-        for(; i \u003c locations.length \u0026\u0026 \n-          locations[i].getHosts().length \u003d\u003d rep; i++)\n-          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n-            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n-                + \"DECREASING the number of replication.\");\n-            printWarning \u003d true;\n+        for(; i \u003c locations.length; i++) {\n+          int currentRep \u003d locations[i].getHosts().length;\n+          if (currentRep !\u003d newRep) {\n+            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n+              out.println(\"\\nWARNING: the waiting time may be long for \"\n+                  + \"DECREASING the number of replications.\");\n+              printedWarning \u003d true;\n+            }\n+            break;\n           }\n-        done \u003d i \u003d\u003d locations.length;\n-\n-        if (!done) {\n-          System.out.print(\".\");\n-          System.out.flush();\n-          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n         }\n+        done \u003d i \u003d\u003d locations.length;\n+        if (done) break;\n+        \n+        out.print(\".\");\n+        out.flush();\n+        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n       }\n-\n-      System.out.println(\" done\");\n+      out.println(\" done\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/fs/FsShell.java",
            "newPath": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
            "oldMethodName": "waitForReplication",
            "newMethodName": "waitForReplication"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 3:48 PM",
          "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/05/11 2:34 PM",
          "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n-  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n-    for(Path f : waitList) {\n-      System.out.print(\"Waiting for \" + f + \" ...\");\n-      System.out.flush();\n+  private void waitForReplication() throws IOException {\n+    for (PathData item : waitList) {\n+      out.print(\"Waiting for \" + item + \" ...\");\n+      out.flush();\n \n-      boolean printWarning \u003d false;\n-      FileSystem pFS \u003d f.getFileSystem(getConf());\n-      FileStatus status \u003d pFS.getFileStatus(f);\n-      long len \u003d status.getLen();\n+      boolean printedWarning \u003d false;\n+      boolean done \u003d false;\n+      while (!done) {\n+        item.refreshStatus();    \n+        BlockLocation[] locations \u003d\n+          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n \n-      for(boolean done \u003d false; !done; ) {\n-        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n         int i \u003d 0;\n-        for(; i \u003c locations.length \u0026\u0026 \n-          locations[i].getHosts().length \u003d\u003d rep; i++)\n-          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n-            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n-                + \"DECREASING the number of replication.\");\n-            printWarning \u003d true;\n+        for(; i \u003c locations.length; i++) {\n+          int currentRep \u003d locations[i].getHosts().length;\n+          if (currentRep !\u003d newRep) {\n+            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n+              out.println(\"\\nWARNING: the waiting time may be long for \"\n+                  + \"DECREASING the number of replications.\");\n+              printedWarning \u003d true;\n+            }\n+            break;\n           }\n-        done \u003d i \u003d\u003d locations.length;\n-\n-        if (!done) {\n-          System.out.print(\".\");\n-          System.out.flush();\n-          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n         }\n+        done \u003d i \u003d\u003d locations.length;\n+        if (done) break;\n+        \n+        out.print(\".\");\n+        out.flush();\n+        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n       }\n-\n-      System.out.println(\" done\");\n+      out.println(\" done\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 3:48 PM",
          "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/05/11 2:34 PM",
          "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n-  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n-    for(Path f : waitList) {\n-      System.out.print(\"Waiting for \" + f + \" ...\");\n-      System.out.flush();\n+  private void waitForReplication() throws IOException {\n+    for (PathData item : waitList) {\n+      out.print(\"Waiting for \" + item + \" ...\");\n+      out.flush();\n \n-      boolean printWarning \u003d false;\n-      FileSystem pFS \u003d f.getFileSystem(getConf());\n-      FileStatus status \u003d pFS.getFileStatus(f);\n-      long len \u003d status.getLen();\n+      boolean printedWarning \u003d false;\n+      boolean done \u003d false;\n+      while (!done) {\n+        item.refreshStatus();    \n+        BlockLocation[] locations \u003d\n+          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n \n-      for(boolean done \u003d false; !done; ) {\n-        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n         int i \u003d 0;\n-        for(; i \u003c locations.length \u0026\u0026 \n-          locations[i].getHosts().length \u003d\u003d rep; i++)\n-          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n-            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n-                + \"DECREASING the number of replication.\");\n-            printWarning \u003d true;\n+        for(; i \u003c locations.length; i++) {\n+          int currentRep \u003d locations[i].getHosts().length;\n+          if (currentRep !\u003d newRep) {\n+            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n+              out.println(\"\\nWARNING: the waiting time may be long for \"\n+                  + \"DECREASING the number of replications.\");\n+              printedWarning \u003d true;\n+            }\n+            break;\n           }\n-        done \u003d i \u003d\u003d locations.length;\n-\n-        if (!done) {\n-          System.out.print(\".\");\n-          System.out.flush();\n-          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n         }\n+        done \u003d i \u003d\u003d locations.length;\n+        if (done) break;\n+        \n+        out.print(\".\");\n+        out.flush();\n+        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n       }\n-\n-      System.out.println(\" done\");\n+      out.println(\" done\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7250. Refactor the setrep command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1099633 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/11 3:48 PM",
          "commitName": "b9599b26dc92634674e9c609b6df9b8d2c408e6e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "04/05/11 2:34 PM",
          "commitNameOld": "369a20391555f9c0ca9bd5384435be12770942aa",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,34 @@\n-  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n-    for(Path f : waitList) {\n-      System.out.print(\"Waiting for \" + f + \" ...\");\n-      System.out.flush();\n+  private void waitForReplication() throws IOException {\n+    for (PathData item : waitList) {\n+      out.print(\"Waiting for \" + item + \" ...\");\n+      out.flush();\n \n-      boolean printWarning \u003d false;\n-      FileSystem pFS \u003d f.getFileSystem(getConf());\n-      FileStatus status \u003d pFS.getFileStatus(f);\n-      long len \u003d status.getLen();\n+      boolean printedWarning \u003d false;\n+      boolean done \u003d false;\n+      while (!done) {\n+        item.refreshStatus();    \n+        BlockLocation[] locations \u003d\n+          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n \n-      for(boolean done \u003d false; !done; ) {\n-        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n         int i \u003d 0;\n-        for(; i \u003c locations.length \u0026\u0026 \n-          locations[i].getHosts().length \u003d\u003d rep; i++)\n-          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n-            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n-                + \"DECREASING the number of replication.\");\n-            printWarning \u003d true;\n+        for(; i \u003c locations.length; i++) {\n+          int currentRep \u003d locations[i].getHosts().length;\n+          if (currentRep !\u003d newRep) {\n+            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n+              out.println(\"\\nWARNING: the waiting time may be long for \"\n+                  + \"DECREASING the number of replications.\");\n+              printedWarning \u003d true;\n+            }\n+            break;\n           }\n-        done \u003d i \u003d\u003d locations.length;\n-\n-        if (!done) {\n-          System.out.print(\".\");\n-          System.out.flush();\n-          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n         }\n+        done \u003d i \u003d\u003d locations.length;\n+        if (done) break;\n+        \n+        out.print(\".\");\n+        out.flush();\n+        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n       }\n-\n-      System.out.println(\" done\");\n+      out.println(\" done\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void waitForReplication() throws IOException {\n    for (PathData item : waitList) {\n      out.print(\"Waiting for \" + item + \" ...\");\n      out.flush();\n\n      boolean printedWarning \u003d false;\n      boolean done \u003d false;\n      while (!done) {\n        item.refreshStatus();    \n        BlockLocation[] locations \u003d\n          item.fs.getFileBlockLocations(item.stat, 0, item.stat.getLen());\n\n        int i \u003d 0;\n        for(; i \u003c locations.length; i++) {\n          int currentRep \u003d locations[i].getHosts().length;\n          if (currentRep !\u003d newRep) {\n            if (!printedWarning \u0026\u0026 currentRep \u003e newRep) {\n              out.println(\"\\nWARNING: the waiting time may be long for \"\n                  + \"DECREASING the number of replications.\");\n              printedWarning \u003d true;\n            }\n            break;\n          }\n        }\n        done \u003d i \u003d\u003d locations.length;\n        if (done) break;\n        \n        out.print(\".\");\n        out.flush();\n        try {Thread.sleep(10000);} catch (InterruptedException e) {}\n      }\n      out.println(\" done\");\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/shell/SetReplication.java",
          "extendedDetails": {
            "oldValue": "[waitList-List\u003cPath\u003e, rep-int]",
            "newValue": "[]"
          }
        }
      ]
    },
    "6e74a3592cbfa976f758dbf50654a1d00d23c270": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7207. fs member of FSShell is not really needed\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1092519 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/04/11 2:24 PM",
      "commitName": "6e74a3592cbfa976f758dbf50654a1d00d23c270",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "13/04/11 1:23 PM",
      "commitNameOld": "d358eb75b79b17f85ae9fd831a0bd065b87bf924",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n     for(Path f : waitList) {\n       System.out.print(\"Waiting for \" + f + \" ...\");\n       System.out.flush();\n \n       boolean printWarning \u003d false;\n-      FileStatus status \u003d fs.getFileStatus(f);\n+      FileSystem pFS \u003d f.getFileSystem(getConf());\n+      FileStatus status \u003d pFS.getFileStatus(f);\n       long len \u003d status.getLen();\n \n       for(boolean done \u003d false; !done; ) {\n-        BlockLocation[] locations \u003d fs.getFileBlockLocations(status, 0, len);\n+        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n         int i \u003d 0;\n         for(; i \u003c locations.length \u0026\u0026 \n           locations[i].getHosts().length \u003d\u003d rep; i++)\n           if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n             System.out.println(\"\\nWARNING: the waiting time may be long for \"\n                 + \"DECREASING the number of replication.\");\n             printWarning \u003d true;\n           }\n         done \u003d i \u003d\u003d locations.length;\n \n         if (!done) {\n           System.out.print(\".\");\n           System.out.flush();\n           try {Thread.sleep(10000);} catch (InterruptedException e) {}\n         }\n       }\n \n       System.out.println(\" done\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n    for(Path f : waitList) {\n      System.out.print(\"Waiting for \" + f + \" ...\");\n      System.out.flush();\n\n      boolean printWarning \u003d false;\n      FileSystem pFS \u003d f.getFileSystem(getConf());\n      FileStatus status \u003d pFS.getFileStatus(f);\n      long len \u003d status.getLen();\n\n      for(boolean done \u003d false; !done; ) {\n        BlockLocation[] locations \u003d pFS.getFileBlockLocations(status, 0, len);\n        int i \u003d 0;\n        for(; i \u003c locations.length \u0026\u0026 \n          locations[i].getHosts().length \u003d\u003d rep; i++)\n          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n                + \"DECREASING the number of replication.\");\n            printWarning \u003d true;\n          }\n        done \u003d i \u003d\u003d locations.length;\n\n        if (!done) {\n          System.out.print(\".\");\n          System.out.flush();\n          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n        }\n      }\n\n      System.out.println(\" done\");\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,31 @@\n+  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n+    for(Path f : waitList) {\n+      System.out.print(\"Waiting for \" + f + \" ...\");\n+      System.out.flush();\n+\n+      boolean printWarning \u003d false;\n+      FileStatus status \u003d fs.getFileStatus(f);\n+      long len \u003d status.getLen();\n+\n+      for(boolean done \u003d false; !done; ) {\n+        BlockLocation[] locations \u003d fs.getFileBlockLocations(status, 0, len);\n+        int i \u003d 0;\n+        for(; i \u003c locations.length \u0026\u0026 \n+          locations[i].getHosts().length \u003d\u003d rep; i++)\n+          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n+            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n+                + \"DECREASING the number of replication.\");\n+            printWarning \u003d true;\n+          }\n+        done \u003d i \u003d\u003d locations.length;\n+\n+        if (!done) {\n+          System.out.print(\".\");\n+          System.out.flush();\n+          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n+        }\n+      }\n+\n+      System.out.println(\" done\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void waitForReplication(List\u003cPath\u003e waitList, int rep) throws IOException {\n    for(Path f : waitList) {\n      System.out.print(\"Waiting for \" + f + \" ...\");\n      System.out.flush();\n\n      boolean printWarning \u003d false;\n      FileStatus status \u003d fs.getFileStatus(f);\n      long len \u003d status.getLen();\n\n      for(boolean done \u003d false; !done; ) {\n        BlockLocation[] locations \u003d fs.getFileBlockLocations(status, 0, len);\n        int i \u003d 0;\n        for(; i \u003c locations.length \u0026\u0026 \n          locations[i].getHosts().length \u003d\u003d rep; i++)\n          if (!printWarning \u0026\u0026 locations[i].getHosts().length \u003e rep) {\n            System.out.println(\"\\nWARNING: the waiting time may be long for \"\n                + \"DECREASING the number of replication.\");\n            printWarning \u003d true;\n          }\n        done \u003d i \u003d\u003d locations.length;\n\n        if (!done) {\n          System.out.print(\".\");\n          System.out.flush();\n          try {Thread.sleep(10000);} catch (InterruptedException e) {}\n        }\n      }\n\n      System.out.println(\" done\");\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FsShell.java"
    }
  }
}