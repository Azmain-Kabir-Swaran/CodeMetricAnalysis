{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComponentInstance.java",
  "functionName": "initializeStatusRetriever",
  "functionId": "initializeStatusRetriever___event-ComponentInstanceEvent__initialDelay-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
  "functionStartLine": 679,
  "functionEndLine": 696,
  "numCommitsSeen": 57,
  "timeTaken": 1499,
  "changeHistory": [
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989"
  ],
  "changeHistoryShort": {
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31": "Ymultichange(Yparameterchange,Ybodychange)",
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccdd982e51f4413bc2e98d03e0a05b1133042a31": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9084.  Reset container state and defer readiness check for upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/12/18 3:02 PM",
      "commitName": "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9084.  Reset container state and defer readiness check for upgrade.\n            Contributed by Chandni Singh\n",
          "commitDate": "18/12/18 3:02 PM",
          "commitName": "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "05/12/18 2:00 PM",
          "commitNameOld": "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 13.04,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void initializeStatusRetriever(ComponentInstanceEvent event) {\n+  private void initializeStatusRetriever(ComponentInstanceEvent event,\n+      long initialDelay) {\n     boolean cancelOnSuccess \u003d true;\n     if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n         getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n       // A docker container might get a different IP if the container is\n       // relaunched by the NM, so we need to keep checking the status.\n       // This is a temporary fix until the NM provides a callback for\n       // container relaunch (see YARN-8265).\n       cancelOnSuccess \u003d false;\n     }\n+    LOG.info(\"{} retrieve status after {}\", compInstanceId, initialDelay);\n     containerStatusFuture \u003d\n         scheduler.executorService.scheduleAtFixedRate(\n             new ContainerStatusRetriever(scheduler, event.getContainerId(),\n-                this, cancelOnSuccess), 0, 1,\n+                this, cancelOnSuccess), initialDelay, 1,\n             TimeUnit.SECONDS);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStatusRetriever(ComponentInstanceEvent event,\n      long initialDelay) {\n    boolean cancelOnSuccess \u003d true;\n    if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n        getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n      // A docker container might get a different IP if the container is\n      // relaunched by the NM, so we need to keep checking the status.\n      // This is a temporary fix until the NM provides a callback for\n      // container relaunch (see YARN-8265).\n      cancelOnSuccess \u003d false;\n    }\n    LOG.info(\"{} retrieve status after {}\", compInstanceId, initialDelay);\n    containerStatusFuture \u003d\n        scheduler.executorService.scheduleAtFixedRate(\n            new ContainerStatusRetriever(scheduler, event.getContainerId(),\n                this, cancelOnSuccess), initialDelay, 1,\n            TimeUnit.SECONDS);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[event-ComponentInstanceEvent]",
            "newValue": "[event-ComponentInstanceEvent, initialDelay-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9084.  Reset container state and defer readiness check for upgrade.\n            Contributed by Chandni Singh\n",
          "commitDate": "18/12/18 3:02 PM",
          "commitName": "ccdd982e51f4413bc2e98d03e0a05b1133042a31",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "05/12/18 2:00 PM",
          "commitNameOld": "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 13.04,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void initializeStatusRetriever(ComponentInstanceEvent event) {\n+  private void initializeStatusRetriever(ComponentInstanceEvent event,\n+      long initialDelay) {\n     boolean cancelOnSuccess \u003d true;\n     if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n         getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n       // A docker container might get a different IP if the container is\n       // relaunched by the NM, so we need to keep checking the status.\n       // This is a temporary fix until the NM provides a callback for\n       // container relaunch (see YARN-8265).\n       cancelOnSuccess \u003d false;\n     }\n+    LOG.info(\"{} retrieve status after {}\", compInstanceId, initialDelay);\n     containerStatusFuture \u003d\n         scheduler.executorService.scheduleAtFixedRate(\n             new ContainerStatusRetriever(scheduler, event.getContainerId(),\n-                this, cancelOnSuccess), 0, 1,\n+                this, cancelOnSuccess), initialDelay, 1,\n             TimeUnit.SECONDS);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStatusRetriever(ComponentInstanceEvent event,\n      long initialDelay) {\n    boolean cancelOnSuccess \u003d true;\n    if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n        getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n      // A docker container might get a different IP if the container is\n      // relaunched by the NM, so we need to keep checking the status.\n      // This is a temporary fix until the NM provides a callback for\n      // container relaunch (see YARN-8265).\n      cancelOnSuccess \u003d false;\n    }\n    LOG.info(\"{} retrieve status after {}\", compInstanceId, initialDelay);\n    containerStatusFuture \u003d\n        scheduler.executorService.scheduleAtFixedRate(\n            new ContainerStatusRetriever(scheduler, event.getContainerId(),\n                this, cancelOnSuccess), initialDelay, 1,\n            TimeUnit.SECONDS);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
          "extendedDetails": {}
        }
      ]
    },
    "1b790f4dd1f682423d5dbb8e70c6225cbddce989": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9071.  Improved status update for reinitialized containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "05/12/18 2:00 PM",
      "commitName": "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,16 @@\n+  private void initializeStatusRetriever(ComponentInstanceEvent event) {\n+    boolean cancelOnSuccess \u003d true;\n+    if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n+        getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n+      // A docker container might get a different IP if the container is\n+      // relaunched by the NM, so we need to keep checking the status.\n+      // This is a temporary fix until the NM provides a callback for\n+      // container relaunch (see YARN-8265).\n+      cancelOnSuccess \u003d false;\n+    }\n+    containerStatusFuture \u003d\n+        scheduler.executorService.scheduleAtFixedRate(\n+            new ContainerStatusRetriever(scheduler, event.getContainerId(),\n+                this, cancelOnSuccess), 0, 1,\n+            TimeUnit.SECONDS);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStatusRetriever(ComponentInstanceEvent event) {\n    boolean cancelOnSuccess \u003d true;\n    if (getCompSpec().getArtifact() !\u003d null \u0026\u0026\n        getCompSpec().getArtifact().getType() \u003d\u003d Artifact.TypeEnum.DOCKER) {\n      // A docker container might get a different IP if the container is\n      // relaunched by the NM, so we need to keep checking the status.\n      // This is a temporary fix until the NM provides a callback for\n      // container relaunch (see YARN-8265).\n      cancelOnSuccess \u003d false;\n    }\n    containerStatusFuture \u003d\n        scheduler.executorService.scheduleAtFixedRate(\n            new ContainerStatusRetriever(scheduler, event.getContainerId(),\n                this, cancelOnSuccess), 0, 1,\n            TimeUnit.SECONDS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java"
    }
  }
}