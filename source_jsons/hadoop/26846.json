{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ByteBufferWrapper.java",
  "functionName": "close",
  "functionId": "close",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/ByteBufferWrapper.java",
  "functionStartLine": 72,
  "functionEndLine": 102,
  "numCommitsSeen": 1,
  "timeTaken": 297,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,31 @@\n+  void close() throws IOException {\n+    if (null !\u003d this.byteBuffer) {\n+      this.byteBuffer.clear();\n+    }\n+\n+    IOException exception \u003d null;\n+    // catch all exceptions, and try to free up resources that can be freed.\n+    try {\n+      if (null !\u003d randomAccessFile) {\n+        this.randomAccessFile.close();\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Close the random access file occurs an exception.\", e);\n+      exception \u003d e;\n+    }\n+\n+    if (this.byteBuffer instanceof MappedByteBuffer) {\n+      munmap((MappedByteBuffer) this.byteBuffer);\n+    }\n+\n+    if (null !\u003d this.file \u0026\u0026 this.file.exists()) {\n+      if (!this.file.delete()) {\n+        LOG.warn(\"Delete the tmp file: [{}] failed.\",\n+            this.file.getAbsolutePath());\n+      }\n+    }\n+\n+    if (null !\u003d exception) {\n+      throw exception;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void close() throws IOException {\n    if (null !\u003d this.byteBuffer) {\n      this.byteBuffer.clear();\n    }\n\n    IOException exception \u003d null;\n    // catch all exceptions, and try to free up resources that can be freed.\n    try {\n      if (null !\u003d randomAccessFile) {\n        this.randomAccessFile.close();\n      }\n    } catch (IOException e) {\n      LOG.error(\"Close the random access file occurs an exception.\", e);\n      exception \u003d e;\n    }\n\n    if (this.byteBuffer instanceof MappedByteBuffer) {\n      munmap((MappedByteBuffer) this.byteBuffer);\n    }\n\n    if (null !\u003d this.file \u0026\u0026 this.file.exists()) {\n      if (!this.file.delete()) {\n        LOG.warn(\"Delete the tmp file: [{}] failed.\",\n            this.file.getAbsolutePath());\n      }\n    }\n\n    if (null !\u003d exception) {\n      throw exception;\n    }\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/ByteBufferWrapper.java"
    }
  }
}