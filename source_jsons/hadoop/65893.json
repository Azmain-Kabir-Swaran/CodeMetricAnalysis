{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStoreTableManager.java",
  "functionName": "createTable",
  "functionId": "createTable___capacity-ProvisionedThroughput",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
  "functionStartLine": 304,
  "functionEndLine": 334,
  "numCommitsSeen": 38,
  "timeTaken": 4137,
  "changeHistory": [
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db",
    "4a700c20d553dc5336ee881719bcf189fc46bfbf",
    "4e38dafde4dce8cd8c368783a291e830f06e1def",
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db": "Ybodychange",
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": "Ymultichange(Ymovefromfile,Ybodychange)",
    "4e38dafde4dce8cd8c368783a291e830f06e1def": "Ybodychange",
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16732. S3Guard to support encrypted DynamoDB table (#1752). Contributed by Mingliang Liu.\n\n",
      "commitDate": "23/01/20 5:21 AM",
      "commitName": "6c1fa24ac02b82b5e267dc966e34fb7d4f9556db",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "28/10/19 3:22 AM",
      "commitNameOld": "d5e9971e6d98b50de64acbf46154f82208919930",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 87.12,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private void createTable(ProvisionedThroughput capacity) throws IOException {\n     try {\n       String mode;\n       CreateTableRequest request \u003d new CreateTableRequest()\n           .withTableName(tableName)\n           .withKeySchema(keySchema())\n           .withAttributeDefinitions(attributeDefinitions())\n+          .withSSESpecification(getSseSpecFromConfig())\n           .withTags(getTableTagsFromConfig());\n       if (capacity !\u003d null) {\n         mode \u003d String.format(\"with provisioned read capacity %d and\"\n                 + \" write capacity %s\",\n             capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n         request.withProvisionedThroughput(capacity);\n       } else {\n         mode \u003d \"with pay-per-request billing\";\n         request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n       }\n       LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n           tableName, region, mode);\n       table \u003d dynamoDB.createTable(request);\n       LOG.debug(\"Awaiting table becoming active\");\n     } catch (ResourceInUseException e) {\n       LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n               + \"in region {}.  This may indicate that the table was \"\n               + \"created by another concurrent thread or process.\",\n           tableName, region);\n     }\n     waitForTableActive(table);\n     putVersionMarkerItemToTable();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      String mode;\n      CreateTableRequest request \u003d new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions())\n          .withSSESpecification(getSseSpecFromConfig())\n          .withTags(getTableTagsFromConfig());\n      if (capacity !\u003d null) {\n        mode \u003d String.format(\"with provisioned read capacity %d and\"\n                + \" write capacity %s\",\n            capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n        request.withProvisionedThroughput(capacity);\n      } else {\n        mode \u003d \"with pay-per-request billing\";\n        request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n      }\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n          tableName, region, mode);\n      table \u003d dynamoDB.createTable(request);\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    putVersionMarkerItemToTable();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
      "extendedDetails": {}
    },
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
      "commitDate": "11/10/19 3:08 AM",
      "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,30 @@\n   private void createTable(ProvisionedThroughput capacity) throws IOException {\n     try {\n       String mode;\n       CreateTableRequest request \u003d new CreateTableRequest()\n           .withTableName(tableName)\n           .withKeySchema(keySchema())\n-          .withAttributeDefinitions(attributeDefinitions());\n+          .withAttributeDefinitions(attributeDefinitions())\n+          .withTags(getTableTagsFromConfig());\n       if (capacity !\u003d null) {\n         mode \u003d String.format(\"with provisioned read capacity %d and\"\n                 + \" write capacity %s\",\n             capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n         request.withProvisionedThroughput(capacity);\n       } else {\n         mode \u003d \"with pay-per-request billing\";\n         request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n       }\n       LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n           tableName, region, mode);\n       table \u003d dynamoDB.createTable(request);\n       LOG.debug(\"Awaiting table becoming active\");\n     } catch (ResourceInUseException e) {\n       LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n               + \"in region {}.  This may indicate that the table was \"\n               + \"created by another concurrent thread or process.\",\n           tableName, region);\n     }\n     waitForTableActive(table);\n-    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n-        System.currentTimeMillis());\n-    putItem(marker);\n-    tagTable();\n+    putVersionMarkerItemToTable();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      String mode;\n      CreateTableRequest request \u003d new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions())\n          .withTags(getTableTagsFromConfig());\n      if (capacity !\u003d null) {\n        mode \u003d String.format(\"with provisioned read capacity %d and\"\n                + \" write capacity %s\",\n            capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n        request.withProvisionedThroughput(capacity);\n      } else {\n        mode \u003d \"with pay-per-request billing\";\n        request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n      }\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n          tableName, region, mode);\n      table \u003d dynamoDB.createTable(request);\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    putVersionMarkerItemToTable();\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
            "oldMethodName": "createTable",
            "newMethodName": "createTable"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,30 @@\n   private void createTable(ProvisionedThroughput capacity) throws IOException {\n     try {\n       String mode;\n       CreateTableRequest request \u003d new CreateTableRequest()\n           .withTableName(tableName)\n           .withKeySchema(keySchema())\n-          .withAttributeDefinitions(attributeDefinitions());\n+          .withAttributeDefinitions(attributeDefinitions())\n+          .withTags(getTableTagsFromConfig());\n       if (capacity !\u003d null) {\n         mode \u003d String.format(\"with provisioned read capacity %d and\"\n                 + \" write capacity %s\",\n             capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n         request.withProvisionedThroughput(capacity);\n       } else {\n         mode \u003d \"with pay-per-request billing\";\n         request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n       }\n       LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n           tableName, region, mode);\n       table \u003d dynamoDB.createTable(request);\n       LOG.debug(\"Awaiting table becoming active\");\n     } catch (ResourceInUseException e) {\n       LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n               + \"in region {}.  This may indicate that the table was \"\n               + \"created by another concurrent thread or process.\",\n           tableName, region);\n     }\n     waitForTableActive(table);\n-    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n-        System.currentTimeMillis());\n-    putItem(marker);\n-    tagTable();\n+    putVersionMarkerItemToTable();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      String mode;\n      CreateTableRequest request \u003d new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions())\n          .withTags(getTableTagsFromConfig());\n      if (capacity !\u003d null) {\n        mode \u003d String.format(\"with provisioned read capacity %d and\"\n                + \" write capacity %s\",\n            capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n        request.withProvisionedThroughput(capacity);\n      } else {\n        mode \u003d \"with pay-per-request billing\";\n        request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n      }\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n          tableName, region, mode);\n      table \u003d dynamoDB.createTable(request);\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    putVersionMarkerItemToTable();\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e38dafde4dce8cd8c368783a291e830f06e1def": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15563. S3Guard to support creating on-demand DDB tables.\n\nContributed by Steve Loughran\n\nChange-Id: I2262b5b9f52e42ded8ed6f50fd39756f96e77087\n",
      "commitDate": "07/06/19 10:26 AM",
      "commitName": "4e38dafde4dce8cd8c368783a291e830f06e1def",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "19/05/19 2:29 PM",
      "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 18.83,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n   private void createTable(ProvisionedThroughput capacity) throws IOException {\n     try {\n-      LOG.info(\"Creating non-existent DynamoDB table {} in region {}\",\n-          tableName, region);\n-      table \u003d dynamoDB.createTable(new CreateTableRequest()\n+      String mode;\n+      CreateTableRequest request \u003d new CreateTableRequest()\n           .withTableName(tableName)\n           .withKeySchema(keySchema())\n-          .withAttributeDefinitions(attributeDefinitions())\n-          .withProvisionedThroughput(capacity));\n+          .withAttributeDefinitions(attributeDefinitions());\n+      if (capacity !\u003d null) {\n+        mode \u003d String.format(\"with provisioned read capacity %d and\"\n+                + \" write capacity %s\",\n+            capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n+        request.withProvisionedThroughput(capacity);\n+      } else {\n+        mode \u003d \"with pay-per-request billing\";\n+        request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n+      }\n+      LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n+          tableName, region, mode);\n+      table \u003d dynamoDB.createTable(request);\n       LOG.debug(\"Awaiting table becoming active\");\n     } catch (ResourceInUseException e) {\n       LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n               + \"in region {}.  This may indicate that the table was \"\n               + \"created by another concurrent thread or process.\",\n           tableName, region);\n     }\n     waitForTableActive(table);\n     final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n         System.currentTimeMillis());\n     putItem(marker);\n     tagTable();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      String mode;\n      CreateTableRequest request \u003d new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions());\n      if (capacity !\u003d null) {\n        mode \u003d String.format(\"with provisioned read capacity %d and\"\n                + \" write capacity %s\",\n            capacity.getReadCapacityUnits(), capacity.getWriteCapacityUnits());\n        request.withProvisionedThroughput(capacity);\n      } else {\n        mode \u003d \"with pay-per-request billing\";\n        request.withBillingMode(BillingMode.PAY_PER_REQUEST);\n      }\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {} {}\",\n          tableName, region, mode);\n      table \u003d dynamoDB.createTable(request);\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n        System.currentTimeMillis());\n    putItem(marker);\n    tagTable();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "d32a8d5d582725eb724b78f27310ad1efd33ed2a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14734 add option to tag DDB table(s) created. (Contributed by Gabor Bota and Abe Fine)\n",
      "commitDate": "12/09/18 4:36 PM",
      "commitName": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "17/08/18 10:15 AM",
      "commitNameOld": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 26.26,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private void createTable(ProvisionedThroughput capacity) throws IOException {\n     try {\n       LOG.info(\"Creating non-existent DynamoDB table {} in region {}\",\n           tableName, region);\n       table \u003d dynamoDB.createTable(new CreateTableRequest()\n           .withTableName(tableName)\n           .withKeySchema(keySchema())\n           .withAttributeDefinitions(attributeDefinitions())\n           .withProvisionedThroughput(capacity));\n       LOG.debug(\"Awaiting table becoming active\");\n     } catch (ResourceInUseException e) {\n       LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n               + \"in region {}.  This may indicate that the table was \"\n               + \"created by another concurrent thread or process.\",\n           tableName, region);\n     }\n     waitForTableActive(table);\n     final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n         System.currentTimeMillis());\n     putItem(marker);\n+    tagTable();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {}\",\n          tableName, region);\n      table \u003d dynamoDB.createTable(new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions())\n          .withProvisionedThroughput(capacity));\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n        System.currentTimeMillis());\n    putItem(marker);\n    tagTable();\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,21 @@\n+  private void createTable(ProvisionedThroughput capacity) throws IOException {\n+    try {\n+      LOG.info(\"Creating non-existent DynamoDB table {} in region {}\",\n+          tableName, region);\n+      table \u003d dynamoDB.createTable(new CreateTableRequest()\n+          .withTableName(tableName)\n+          .withKeySchema(keySchema())\n+          .withAttributeDefinitions(attributeDefinitions())\n+          .withProvisionedThroughput(capacity));\n+      LOG.debug(\"Awaiting table becoming active\");\n+    } catch (ResourceInUseException e) {\n+      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n+              + \"in region {}.  This may indicate that the table was \"\n+              + \"created by another concurrent thread or process.\",\n+          tableName, region);\n+    }\n+    waitForTableActive(table);\n+    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n+        System.currentTimeMillis());\n+    putItem(marker);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createTable(ProvisionedThroughput capacity) throws IOException {\n    try {\n      LOG.info(\"Creating non-existent DynamoDB table {} in region {}\",\n          tableName, region);\n      table \u003d dynamoDB.createTable(new CreateTableRequest()\n          .withTableName(tableName)\n          .withKeySchema(keySchema())\n          .withAttributeDefinitions(attributeDefinitions())\n          .withProvisionedThroughput(capacity));\n      LOG.debug(\"Awaiting table becoming active\");\n    } catch (ResourceInUseException e) {\n      LOG.warn(\"ResourceInUseException while creating DynamoDB table {} \"\n              + \"in region {}.  This may indicate that the table was \"\n              + \"created by another concurrent thread or process.\",\n          tableName, region);\n    }\n    waitForTableActive(table);\n    final Item marker \u003d createVersionMarker(VERSION_MARKER, VERSION,\n        System.currentTimeMillis());\n    putItem(marker);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}