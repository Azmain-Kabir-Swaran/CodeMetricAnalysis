{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 248,
  "functionEndLine": 297,
  "numCommitsSeen": 123,
  "timeTaken": 11751,
  "changeHistory": [
    "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36",
    "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
    "7146359bfd436a76585fb1f3ea93716795308cec",
    "aea3e65749333b97d8c45280077f03d4ebddb5a8",
    "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d",
    "b72507810aece08e17ab4b5aae1f7eae1fe98609",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
    "29f520052e2b02f44979980e446acc0dccd96d54",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "66598697a6e777615334ebde5ba7738135da83ae",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92",
    "02c0317eff8ebb78c1bbb41d87dddbd63246432c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "4186121c08cb3d86f775d333c637459a4fb19d1b",
    "47e04d3124dd03fb918aabc68542c71eccd0a8e9",
    "8fb67650b146573c20ae010e28b1eca6e16433b3",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36": "Ybodychange",
    "e9ac61cc0e55d1a0b132c795047e959c761dc3be": "Ybodychange",
    "7146359bfd436a76585fb1f3ea93716795308cec": "Ybodychange",
    "aea3e65749333b97d8c45280077f03d4ebddb5a8": "Ybodychange",
    "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d": "Ybodychange",
    "b72507810aece08e17ab4b5aae1f7eae1fe98609": "Ybodychange",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": "Ybodychange",
    "29f520052e2b02f44979980e446acc0dccd96d54": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": "Ybodychange",
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92": "Ybodychange",
    "02c0317eff8ebb78c1bbb41d87dddbd63246432c": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "4186121c08cb3d86f775d333c637459a4fb19d1b": "Ybodychange",
    "47e04d3124dd03fb918aabc68542c71eccd0a8e9": "Ybodychange",
    "8fb67650b146573c20ae010e28b1eca6e16433b3": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8184. Too many metrics if containerLocalizer/ResourceLocalizationService uses ReadWriteDiskValidator. Contributed by Yufei Gu\n",
      "commitDate": "22/06/18 2:03 PM",
      "commitName": "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "18/04/18 4:35 PM",
      "commitNameOld": "e4c39f3247da77d03c6015de4f18be75924fcb22",
      "commitAuthorOld": "Shashikant Banerjee",
      "daysBetweenCommits": 64.89,
      "commitsBetweenForRepo": 985,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,50 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore, dirsHandler);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n         cleanupLogDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n     diskValidator \u003d DiskValidatorFactory.getInstance(\n-        conf.get(YarnConfiguration.DISK_VALIDATOR,\n-            YarnConfiguration.DEFAULT_DISK_VALIDATOR));\n-    LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n-        \" is loaded.\");\n+        YarnConfiguration.DEFAULT_DISK_VALIDATOR);\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     localDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         checkAndInitializeLocalDirs();\n       }\n     };\n     logDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         initializeLogDirs(lfs);\n       }\n     };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore, dirsHandler);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        cleanupLogDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    diskValidator \u003d DiskValidatorFactory.getInstance(\n        YarnConfiguration.DEFAULT_DISK_VALIDATOR);\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e9ac61cc0e55d1a0b132c795047e959c761dc3be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6372. Add default value for NM disk validator (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "10/04/17 2:56 PM",
      "commitName": "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "06/04/17 4:54 PM",
      "commitNameOld": "0116c3c95769e204ab2600510f0efd6baafb43e0",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 3.92,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore, dirsHandler);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n         cleanupLogDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n     diskValidator \u003d DiskValidatorFactory.getInstance(\n-        conf.get(YarnConfiguration.DISK_VALIDATOR));\n+        conf.get(YarnConfiguration.DISK_VALIDATOR,\n+            YarnConfiguration.DEFAULT_DISK_VALIDATOR));\n     LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n         \" is loaded.\");\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     localDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         checkAndInitializeLocalDirs();\n       }\n     };\n     logDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         initializeLogDirs(lfs);\n       }\n     };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore, dirsHandler);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        cleanupLogDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    diskValidator \u003d DiskValidatorFactory.getInstance(\n        conf.get(YarnConfiguration.DISK_VALIDATOR,\n            YarnConfiguration.DEFAULT_DISK_VALIDATOR));\n    LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n        \" is loaded.\");\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "7146359bfd436a76585fb1f3ea93716795308cec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5027. NM should clean up app log dirs after NM restart. Contributed by sandflee\n",
      "commitDate": "28/10/16 8:48 AM",
      "commitName": "7146359bfd436a76585fb1f3ea93716795308cec",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/09/16 7:15 AM",
      "commitNameOld": "40b5a59b726733df456330a26f03d5174cc0bc1c",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 43.07,
      "commitsBetweenForRepo": 347,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore, dirsHandler);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n+        cleanupLogDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n     diskValidator \u003d DiskValidatorFactory.getInstance(\n         conf.get(YarnConfiguration.DISK_VALIDATOR));\n     LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n         \" is loaded.\");\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     localDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         checkAndInitializeLocalDirs();\n       }\n     };\n     logDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         initializeLogDirs(lfs);\n       }\n     };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore, dirsHandler);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        cleanupLogDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    diskValidator \u003d DiskValidatorFactory.getInstance(\n        conf.get(YarnConfiguration.DISK_VALIDATOR));\n    LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n        \" is loaded.\");\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "aea3e65749333b97d8c45280077f03d4ebddb5a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5137. Make DiskChecker pluggable in NodeManager. (Yufei Gu via rchiang)\n",
      "commitDate": "10/08/16 7:23 PM",
      "commitName": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthor": "Ray Chiang",
      "commitDateOld": "08/08/16 9:42 AM",
      "commitNameOld": "37d939a453d1052878a2a1aab7588cbac48a824d",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore, dirsHandler);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n+    diskValidator \u003d DiskValidatorFactory.getInstance(\n+        conf.get(YarnConfiguration.DISK_VALIDATOR));\n+    LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n+        \" is loaded.\");\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     localDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         checkAndInitializeLocalDirs();\n       }\n     };\n     logDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         initializeLogDirs(lfs);\n       }\n     };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore, dirsHandler);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    diskValidator \u003d DiskValidatorFactory.getInstance(\n        conf.get(YarnConfiguration.DISK_VALIDATOR));\n    LOG.info(\"Disk Validator: \" + YarnConfiguration.DISK_VALIDATOR +\n        \" is loaded.\");\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3591. Resource localization on a bad disk causes subsequent containers failure. Contributed by Lavkesh Lahngir.\n",
      "commitDate": "06/09/15 11:02 PM",
      "commitName": "1dbd8e34a7d97c4d8586da79c980d8f2e0aad61d",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "24/06/15 9:37 AM",
      "commitNameOld": "8d58512d6e6d9fe93784a9de2af0056bcc316d96",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 74.56,
      "commitsBetweenForRepo": 431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n-        true, conf, stateStore);\n+        true, conf, stateStore, dirsHandler);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     localDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         checkAndInitializeLocalDirs();\n       }\n     };\n     logDirsChangeListener \u003d new DirsChangeListener() {\n       @Override\n       public void onDirsChanged() {\n         initializeLogDirs(lfs);\n       }\n     };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore, dirsHandler);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "b72507810aece08e17ab4b5aae1f7eae1fe98609": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3491. PublicLocalizer#addResource is too slow. (zxu via rkanter)\n",
      "commitDate": "06/05/15 2:19 PM",
      "commitName": "b72507810aece08e17ab4b5aae1f7eae1fe98609",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "05/05/15 10:18 AM",
      "commitNameOld": "38102420621308f5ba91cdeb6a18a63aa5acf640",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,47 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n         cleanUpLocalDirs(lfs, delService);\n         initializeLocalDirs(lfs);\n         initializeLogDirs(lfs);\n       }\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n         \"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n+    localDirsChangeListener \u003d new DirsChangeListener() {\n+      @Override\n+      public void onDirsChanged() {\n+        checkAndInitializeLocalDirs();\n+      }\n+    };\n+    logDirsChangeListener \u003d new DirsChangeListener() {\n+      @Override\n+      public void onDirsChanged() {\n+        initializeLogDirs(lfs);\n+      }\n+    };\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    localDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        checkAndInitializeLocalDirs();\n      }\n    };\n    logDirsChangeListener \u003d new DirsChangeListener() {\n      @Override\n      public void onDirsChanged() {\n        initializeLogDirs(lfs);\n      }\n    };\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": {
      "type": "Ybodychange",
      "commitMessage": "YARN-90. NodeManager should identify failed disks becoming good again. Contributed by Varun Vasudev\n",
      "commitDate": "21/10/14 10:31 AM",
      "commitName": "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/10/14 11:31 AM",
      "commitNameOld": "a56ea0100215ecf2e1471a18812b668658197239",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 7.96,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,35 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n-      FileContext lfs \u003d getLocalFileContext(conf);\n-      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n+      lfs \u003d getLocalFileContext(conf);\n+      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n \n-      if (!stateStore.canRecover() || stateStore.isNewlyCreated()) {\n-        cleanUpLocalDir(lfs,delService);\n+      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n+        cleanUpLocalDirs(lfs, delService);\n+        initializeLocalDirs(lfs);\n+        initializeLogDirs(lfs);\n       }\n-\n-      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n-      for (String localDir : localDirs) {\n-        // $local/usercache\n-        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n-        lfs.mkdir(userDir, null, true);\n-        // $local/filecache\n-        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n-        lfs.mkdir(fileDir, null, true);\n-        // $local/nmPrivate\n-        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n-        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n-      }\n-\n-      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n-      for (String logDir : logDirs) {\n-        lfs.mkdir(new Path(logDir), null, true);\n-      }\n-    } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n+    } catch (Exception e) {\n+      throw new YarnRuntimeException(\n+        \"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short) FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()|| stateStore.isNewlyCreated()) {\n        cleanUpLocalDirs(lfs, delService);\n        initializeLocalDirs(lfs);\n        initializeLogDirs(lfs);\n      }\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n        \"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "29f520052e2b02f44979980e446acc0dccd96d54": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2624. Resource Localization fails on a cluster due to existing cache directories. Contributed by Anubhav Dhoot\n",
      "commitDate": "02/10/14 10:39 AM",
      "commitName": "29f520052e2b02f44979980e446acc0dccd96d54",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "29/08/14 11:16 AM",
      "commitNameOld": "3de66011c2e80d7c458a67f80042af986fcc677d",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 33.97,
      "commitsBetweenForRepo": 381,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n-      if (!stateStore.canRecover()) {\n+      if (!stateStore.canRecover() || stateStore.isNewlyCreated()) {\n         cleanUpLocalDir(lfs,delService);\n       }\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover() || stateStore.isNewlyCreated()) {\n        cleanUpLocalDir(lfs,delService);\n      }\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "30/05/14 8:37 AM",
      "commitNameOld": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 62.19,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n         true, conf, stateStore);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       if (!stateStore.canRecover()) {\n         cleanUpLocalDir(lfs,delService);\n       }\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_BIND_HOST,\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()) {\n        cleanUpLocalDir(lfs,delService);\n      }\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_BIND_HOST,\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/03/14 5:30 PM",
      "commitNameOld": "53790d33000cb5804779a56ac3891d0e0e5a904d",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 77.63,
      "commitsBetweenForRepo": 478,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n-    this.publicRsrc \u003d\n-        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n+    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n+        true, conf, stateStore);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n-      cleanUpLocalDir(lfs,delService);\n+      if (!stateStore.canRecover()) {\n+        cleanUpLocalDir(lfs,delService);\n+      }\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d new LocalResourcesTrackerImpl(null, null, dispatcher,\n        true, conf, stateStore);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      if (!stateStore.canRecover()) {\n        cleanUpLocalDir(lfs,delService);\n      }\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-  public void init(Configuration conf) {\n+  public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d\n         new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       cleanUpLocalDir(lfs,delService);\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d\n        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-  public void init(Configuration conf) {\n+  public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d\n         new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       cleanUpLocalDir(lfs,delService);\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d\n        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n-  public void init(Configuration conf) {\n+  public void serviceInit(Configuration conf) throws Exception {\n     this.validateConf(conf);\n     this.publicRsrc \u003d\n         new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       cleanUpLocalDir(lfs,delService);\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceInit(Configuration conf) throws Exception {\n    this.validateConf(conf);\n    this.publicRsrc \u003d\n        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public void init(Configuration conf) {\n     this.validateConf(conf);\n     this.publicRsrc \u003d\n         new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       cleanUpLocalDir(lfs,delService);\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n-      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n+      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n \n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.validateConf(conf);\n    this.publicRsrc \u003d\n        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/13 10:00 PM",
      "commitName": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/03/13 11:23 AM",
      "commitNameOld": "6a482a88b8f56a4c5590e71ce6713d7f63830e92",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 8.44,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,47 @@\n   public void init(Configuration conf) {\n+    this.validateConf(conf);\n+    this.publicRsrc \u003d\n+        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n \n       cleanUpLocalDir(lfs,delService);\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n+\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.validateConf(conf);\n    this.publicRsrc \u003d\n        new LocalResourcesTrackerImpl(null, dispatcher, true, conf);\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "6a482a88b8f56a4c5590e71ce6713d7f63830e92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-71. Fix the NodeManager to clean up local-dirs on restart. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 11:23 AM",
      "commitName": "6a482a88b8f56a4c5590e71ce6713d7f63830e92",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "27/02/13 7:30 AM",
      "commitNameOld": "0057600a82cb6dc6bb8858a033003e8f9769b023",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 26.12,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n-      // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n+\n+      cleanUpLocalDir(lfs,delService);\n+\n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n\n      cleanUpLocalDir(lfs,delService);\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "02c0317eff8ebb78c1bbb41d87dddbd63246432c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-87. NM ResourceLocalizationService does not set permissions of local cache directories (Jason Lowe via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381459 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 7:08 PM",
      "commitName": "02c0317eff8ebb78c1bbb41d87dddbd63246432c",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 28.87,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n+      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 140.81,
      "commitsBetweenForRepo": 1034,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n \n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       for (String localDir : localDirs) {\n         // $local/usercache\n         Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userDir, null, true);\n         // $local/filecache\n         Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n         Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n \n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       for (String logDir : logDirs) {\n         lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n \n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n-    localizationServerAddress \u003d NetUtils.createSocketAddr(\n-      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS),\n-      YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT,\n-      YarnConfiguration.NM_LOCALIZER_ADDRESS);\n+    localizationServerAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "31/10/11 8:16 PM",
      "commitNameOld": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 28.83,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,40 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n+\n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n-      String[] sLocalDirs \u003d\n-        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n-\n-      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n-      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n-      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n-      for (String sLocaldir : sLocalDirs) {\n-        Path localdir \u003d new Path(sLocaldir);\n-        localDirs.add(localdir);\n+      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+      for (String localDir : localDirs) {\n         // $local/usercache\n-        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n-        lfs.mkdir(userdir, null, true);\n+        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n+        lfs.mkdir(userDir, null, true);\n         // $local/filecache\n-        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n-        lfs.mkdir(filedir, null, true);\n+        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n+        lfs.mkdir(fileDir, null, true);\n         // $local/nmPrivate\n-        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n-        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n-        sysDirs.add(sysdir);\n+        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n+        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n       }\n-      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n-      for (String sLogdir : sLogdirs) {\n-        Path logdir \u003d new Path(sLogdir);\n-        logDirs.add(logdir);\n-        lfs.mkdir(logdir, null, true);\n+\n+      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+      for (String logDir : logDirs) {\n+        lfs.mkdir(new Path(logDir), null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n-    localDirs \u003d Collections.unmodifiableList(localDirs);\n-    logDirs \u003d Collections.unmodifiableList(logDirs);\n-    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n+\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d NetUtils.createSocketAddr(\n       conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS),\n       YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT,\n       YarnConfiguration.NM_LOCALIZER_ADDRESS);\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      for (String localDir : localDirs) {\n        // $local/usercache\n        Path userDir \u003d new Path(localDir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userDir, null, true);\n        // $local/filecache\n        Path fileDir \u003d new Path(localDir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(fileDir, null, true);\n        // $local/nmPrivate\n        Path sysDir \u003d new Path(localDir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysDir, NM_PRIVATE_PERM, true);\n      }\n\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      for (String logDir : logDirs) {\n        lfs.mkdir(new Path(logDir), null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS),\n      YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT,\n      YarnConfiguration.NM_LOCALIZER_ADDRESS);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "4186121c08cb3d86f775d333c637459a4fb19d1b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3239. Use new createSocketAddr API in MRv2 to give better error messages on misconfig (Todd Lipcon via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187556 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/10/11 2:36 PM",
      "commitName": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 5.09,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       String[] sLocalDirs \u003d\n         conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n \n       localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       for (String sLocaldir : sLocalDirs) {\n         Path localdir \u003d new Path(sLocaldir);\n         localDirs.add(localdir);\n         // $local/usercache\n         Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userdir, null, true);\n         // $local/filecache\n         Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(filedir, null, true);\n         // $local/nmPrivate\n         Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n         sysDirs.add(sysdir);\n       }\n       String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n       for (String sLogdir : sLogdirs) {\n         Path logdir \u003d new Path(sLogdir);\n         logDirs.add(logdir);\n         lfs.mkdir(logdir, null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n     localDirs \u003d Collections.unmodifiableList(localDirs);\n     logDirs \u003d Collections.unmodifiableList(logDirs);\n     sysDirs \u003d Collections.unmodifiableList(sysDirs);\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d NetUtils.createSocketAddr(\n-      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n+      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS),\n+      YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT,\n+      YarnConfiguration.NM_LOCALIZER_ADDRESS);\n     localizerTracker \u003d createLocalizerTracker(conf);\n     addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS),\n      YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT,\n      YarnConfiguration.NM_LOCALIZER_ADDRESS);\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "47e04d3124dd03fb918aabc68542c71eccd0a8e9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2949. Fixed NodeManager to shut-down correctly if a service startup fails. Contributed by Ravi Teja Ch N V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170689 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 8:35 AM",
      "commitName": "47e04d3124dd03fb918aabc68542c71eccd0a8e9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.65,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       String[] sLocalDirs \u003d\n         conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n \n       localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       for (String sLocaldir : sLocalDirs) {\n         Path localdir \u003d new Path(sLocaldir);\n         localDirs.add(localdir);\n         // $local/usercache\n         Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userdir, null, true);\n         // $local/filecache\n         Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(filedir, null, true);\n         // $local/nmPrivate\n         Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n         sysDirs.add(sysdir);\n       }\n       String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n       for (String sLogdir : sLogdirs) {\n         Path logdir \u003d new Path(sLogdir);\n         logDirs.add(logdir);\n         lfs.mkdir(logdir, null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n     localDirs \u003d Collections.unmodifiableList(localDirs);\n     logDirs \u003d Collections.unmodifiableList(logDirs);\n     sysDirs \u003d Collections.unmodifiableList(sysDirs);\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d NetUtils.createSocketAddr(\n       conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n     localizerTracker \u003d createLocalizerTracker(conf);\n+    addService(localizerTracker);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n-    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n-        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n    localizerTracker \u003d createLocalizerTracker(conf);\n    addService(localizerTracker);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "8fb67650b146573c20ae010e28b1eca6e16433b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 11:21 PM",
      "commitName": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       String[] sLocalDirs \u003d\n         conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n \n       localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       for (String sLocaldir : sLocalDirs) {\n         Path localdir \u003d new Path(sLocaldir);\n         localDirs.add(localdir);\n         // $local/usercache\n         Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userdir, null, true);\n         // $local/filecache\n         Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(filedir, null, true);\n         // $local/nmPrivate\n         Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n         sysDirs.add(sysdir);\n       }\n       String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n       for (String sLogdir : sLogdirs) {\n         Path logdir \u003d new Path(sLogdir);\n         logDirs.add(logdir);\n         lfs.mkdir(logdir, null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n     localDirs \u003d Collections.unmodifiableList(localDirs);\n     logDirs \u003d Collections.unmodifiableList(logDirs);\n     sysDirs \u003d Collections.unmodifiableList(sysDirs);\n     cacheTargetSize \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n       conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d NetUtils.createSocketAddr(\n       conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n-    localizerTracker \u003d new LocalizerTracker(conf);\n+    localizerTracker \u003d createLocalizerTracker(conf);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n         cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n    localizerTracker \u003d createLocalizerTracker(conf);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public void init(Configuration conf) {\n     this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n     try {\n       // TODO queue deletions here, rather than NM init?\n       FileContext lfs \u003d getLocalFileContext(conf);\n       String[] sLocalDirs \u003d\n-        conf.getStrings(NM_LOCAL_DIR, DEFAULT_NM_LOCAL_DIR);\n+        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n \n       localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n       for (String sLocaldir : sLocalDirs) {\n         Path localdir \u003d new Path(sLocaldir);\n         localDirs.add(localdir);\n         // $local/usercache\n         Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n         lfs.mkdir(userdir, null, true);\n         // $local/filecache\n         Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n         lfs.mkdir(filedir, null, true);\n         // $local/nmPrivate\n         Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n         lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n         sysDirs.add(sysdir);\n       }\n-      String[] sLogdirs \u003d conf.getStrings(NM_LOG_DIR, DEFAULT_NM_LOG_DIR);\n+      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n       for (String sLogdir : sLogdirs) {\n         Path logdir \u003d new Path(sLogdir);\n         logDirs.add(logdir);\n         lfs.mkdir(logdir, null, true);\n       }\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to initialize LocalizationService\", e);\n     }\n     localDirs \u003d Collections.unmodifiableList(localDirs);\n     logDirs \u003d Collections.unmodifiableList(logDirs);\n     sysDirs \u003d Collections.unmodifiableList(sysDirs);\n     cacheTargetSize \u003d\n-      conf.getLong(NM_TARGET_CACHE_MB, DEFAULT_NM_TARGET_CACHE_MB) \u003c\u003c 20;\n+      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n     cacheCleanupPeriod \u003d\n-      conf.getLong(NM_CACHE_CLEANUP_MS, DEFAULT_NM_CACHE_CLEANUP_MS);\n+      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n     localizationServerAddress \u003d NetUtils.createSocketAddr(\n-      conf.get(NM_LOCALIZER_BIND_ADDRESS, DEFAULT_NM_LOCALIZER_BIND_ADDRESS));\n+      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n     localizerTracker \u003d new LocalizerTracker(conf);\n     dispatcher.register(LocalizerEventType.class, localizerTracker);\n     cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n         cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(YarnConfiguration.NM_LOCAL_DIRS, YarnConfiguration.DEFAULT_NM_LOCAL_DIRS);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS, YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(YarnConfiguration.NM_LOCALIZER_ADDRESS, YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS));\n    localizerTracker \u003d new LocalizerTracker(conf);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(NM_LOCAL_DIR, DEFAULT_NM_LOCAL_DIR);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(NM_LOG_DIR, DEFAULT_NM_LOG_DIR);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(NM_TARGET_CACHE_MB, DEFAULT_NM_TARGET_CACHE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(NM_CACHE_CLEANUP_MS, DEFAULT_NM_CACHE_CLEANUP_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(NM_LOCALIZER_BIND_ADDRESS, DEFAULT_NM_LOCALIZER_BIND_ADDRESS));\n    localizerTracker \u003d new LocalizerTracker(conf);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,49 @@\n+  public void init(Configuration conf) {\n+    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n+    try {\n+      // TODO queue deletions here, rather than NM init?\n+      FileContext lfs \u003d getLocalFileContext(conf);\n+      String[] sLocalDirs \u003d\n+        conf.getStrings(NM_LOCAL_DIR, DEFAULT_NM_LOCAL_DIR);\n+\n+      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n+      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n+      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n+      for (String sLocaldir : sLocalDirs) {\n+        Path localdir \u003d new Path(sLocaldir);\n+        localDirs.add(localdir);\n+        // $local/usercache\n+        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n+        lfs.mkdir(userdir, null, true);\n+        // $local/filecache\n+        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n+        lfs.mkdir(filedir, null, true);\n+        // $local/nmPrivate\n+        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n+        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n+        sysDirs.add(sysdir);\n+      }\n+      String[] sLogdirs \u003d conf.getStrings(NM_LOG_DIR, DEFAULT_NM_LOG_DIR);\n+      for (String sLogdir : sLogdirs) {\n+        Path logdir \u003d new Path(sLogdir);\n+        logDirs.add(logdir);\n+        lfs.mkdir(logdir, null, true);\n+      }\n+    } catch (IOException e) {\n+      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n+    }\n+    localDirs \u003d Collections.unmodifiableList(localDirs);\n+    logDirs \u003d Collections.unmodifiableList(logDirs);\n+    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n+    cacheTargetSize \u003d\n+      conf.getLong(NM_TARGET_CACHE_MB, DEFAULT_NM_TARGET_CACHE_MB) \u003c\u003c 20;\n+    cacheCleanupPeriod \u003d\n+      conf.getLong(NM_CACHE_CLEANUP_MS, DEFAULT_NM_CACHE_CLEANUP_MS);\n+    localizationServerAddress \u003d NetUtils.createSocketAddr(\n+      conf.get(NM_LOCALIZER_BIND_ADDRESS, DEFAULT_NM_LOCALIZER_BIND_ADDRESS));\n+    localizerTracker \u003d new LocalizerTracker(conf);\n+    dispatcher.register(LocalizerEventType.class, localizerTracker);\n+    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n+        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.recordFactory \u003d RecordFactoryProvider.getRecordFactory(conf);\n    try {\n      // TODO queue deletions here, rather than NM init?\n      FileContext lfs \u003d getLocalFileContext(conf);\n      String[] sLocalDirs \u003d\n        conf.getStrings(NM_LOCAL_DIR, DEFAULT_NM_LOCAL_DIR);\n\n      localDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      logDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      sysDirs \u003d new ArrayList\u003cPath\u003e(sLocalDirs.length);\n      for (String sLocaldir : sLocalDirs) {\n        Path localdir \u003d new Path(sLocaldir);\n        localDirs.add(localdir);\n        // $local/usercache\n        Path userdir \u003d new Path(localdir, ContainerLocalizer.USERCACHE);\n        lfs.mkdir(userdir, null, true);\n        // $local/filecache\n        Path filedir \u003d new Path(localdir, ContainerLocalizer.FILECACHE);\n        lfs.mkdir(filedir, null, true);\n        // $local/nmPrivate\n        Path sysdir \u003d new Path(localdir, NM_PRIVATE_DIR);\n        lfs.mkdir(sysdir, NM_PRIVATE_PERM, true);\n        sysDirs.add(sysdir);\n      }\n      String[] sLogdirs \u003d conf.getStrings(NM_LOG_DIR, DEFAULT_NM_LOG_DIR);\n      for (String sLogdir : sLogdirs) {\n        Path logdir \u003d new Path(sLogdir);\n        logDirs.add(logdir);\n        lfs.mkdir(logdir, null, true);\n      }\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to initialize LocalizationService\", e);\n    }\n    localDirs \u003d Collections.unmodifiableList(localDirs);\n    logDirs \u003d Collections.unmodifiableList(logDirs);\n    sysDirs \u003d Collections.unmodifiableList(sysDirs);\n    cacheTargetSize \u003d\n      conf.getLong(NM_TARGET_CACHE_MB, DEFAULT_NM_TARGET_CACHE_MB) \u003c\u003c 20;\n    cacheCleanupPeriod \u003d\n      conf.getLong(NM_CACHE_CLEANUP_MS, DEFAULT_NM_CACHE_CLEANUP_MS);\n    localizationServerAddress \u003d NetUtils.createSocketAddr(\n      conf.get(NM_LOCALIZER_BIND_ADDRESS, DEFAULT_NM_LOCALIZER_BIND_ADDRESS));\n    localizerTracker \u003d new LocalizerTracker(conf);\n    dispatcher.register(LocalizerEventType.class, localizerTracker);\n    cacheCleanup.scheduleWithFixedDelay(new CacheCleanup(dispatcher),\n        cacheCleanupPeriod, cacheCleanupPeriod, TimeUnit.MILLISECONDS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}