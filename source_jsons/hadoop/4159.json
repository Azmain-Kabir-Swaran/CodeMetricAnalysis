{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ECPolicyLoader.java",
  "functionName": "loadECPolicies",
  "functionId": "loadECPolicies___policyFile-File",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java",
  "functionStartLine": 84,
  "functionEndLine": 126,
  "numCommitsSeen": 3,
  "timeTaken": 465,
  "changeHistory": [
    "b0803388fc5ec03b774aa003f52232deb8db6f69"
  ],
  "changeHistoryShort": {
    "b0803388fc5ec03b774aa003f52232deb8db6f69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0803388fc5ec03b774aa003f52232deb8db6f69": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11604. Define and parse erasure code policies. Contributed by Lin Zeng\n",
      "commitDate": "20/04/17 10:33 PM",
      "commitName": "b0803388fc5ec03b774aa003f52232deb8db6f69",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,43 @@\n+  private List\u003cErasureCodingPolicy\u003e loadECPolicies(File policyFile)\n+      throws ParserConfigurationException, IOException, SAXException {\n+\n+    LOG.info(\"Loading EC policy file \" + policyFile);\n+\n+    // Read and parse the EC policy file.\n+    DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n+    dbf.setIgnoringComments(true);\n+    DocumentBuilder builder \u003d dbf.newDocumentBuilder();\n+    Document doc \u003d builder.parse(policyFile);\n+    Element root \u003d doc.getDocumentElement();\n+\n+    if (!\"configuration\".equals(root.getTagName())) {\n+      throw new RuntimeException(\"Bad EC policy configuration file: \"\n+          + \"top-level element not \u003cconfiguration\u003e\");\n+    }\n+\n+    List\u003cErasureCodingPolicy\u003e policies;\n+    if (root.getElementsByTagName(\"layoutversion\").getLength() \u003e 0) {\n+      if (loadLayoutVersion(root) \u003d\u003d LAYOUT_VERSION) {\n+        if (root.getElementsByTagName(\"schemas\").getLength() \u003e 0) {\n+          Map\u003cString, ECSchema\u003e schemas \u003d loadSchemas(root);\n+          if (root.getElementsByTagName(\"policies\").getLength() \u003e 0) {\n+            policies \u003d loadPolicies(root, schemas);\n+          } else {\n+            throw new RuntimeException(\"Bad EC policy configuration file: \"\n+                + \"no \u003cpolicies\u003e element\");\n+          }\n+        } else {\n+          throw new RuntimeException(\"Bad EC policy configuration file: \"\n+              + \"no \u003cschemas\u003e element\");\n+        }\n+      } else {\n+        throw new RuntimeException(\"The parse failed because of \"\n+            + \"bad layoutversion value\");\n+      }\n+    } else {\n+      throw new RuntimeException(\"Bad EC policy configuration file: \"\n+          + \"no \u003clayoutVersion\u003e element\");\n+    }\n+\n+    return policies;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cErasureCodingPolicy\u003e loadECPolicies(File policyFile)\n      throws ParserConfigurationException, IOException, SAXException {\n\n    LOG.info(\"Loading EC policy file \" + policyFile);\n\n    // Read and parse the EC policy file.\n    DocumentBuilderFactory dbf \u003d DocumentBuilderFactory.newInstance();\n    dbf.setIgnoringComments(true);\n    DocumentBuilder builder \u003d dbf.newDocumentBuilder();\n    Document doc \u003d builder.parse(policyFile);\n    Element root \u003d doc.getDocumentElement();\n\n    if (!\"configuration\".equals(root.getTagName())) {\n      throw new RuntimeException(\"Bad EC policy configuration file: \"\n          + \"top-level element not \u003cconfiguration\u003e\");\n    }\n\n    List\u003cErasureCodingPolicy\u003e policies;\n    if (root.getElementsByTagName(\"layoutversion\").getLength() \u003e 0) {\n      if (loadLayoutVersion(root) \u003d\u003d LAYOUT_VERSION) {\n        if (root.getElementsByTagName(\"schemas\").getLength() \u003e 0) {\n          Map\u003cString, ECSchema\u003e schemas \u003d loadSchemas(root);\n          if (root.getElementsByTagName(\"policies\").getLength() \u003e 0) {\n            policies \u003d loadPolicies(root, schemas);\n          } else {\n            throw new RuntimeException(\"Bad EC policy configuration file: \"\n                + \"no \u003cpolicies\u003e element\");\n          }\n        } else {\n          throw new RuntimeException(\"Bad EC policy configuration file: \"\n              + \"no \u003cschemas\u003e element\");\n        }\n      } else {\n        throw new RuntimeException(\"The parse failed because of \"\n            + \"bad layoutversion value\");\n      }\n    } else {\n      throw new RuntimeException(\"Bad EC policy configuration file: \"\n          + \"no \u003clayoutVersion\u003e element\");\n    }\n\n    return policies;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java"
    }
  }
}