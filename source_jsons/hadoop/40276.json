{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "assignContainersOnNode",
  "functionId": "assignContainersOnNode___clusterResource-Resource__node-FiCaSchedulerNode__schedulerKey-SchedulerRequestKey__reservedContainer-RMContainer__schedulingMode-SchedulingMode__currentResoureLimits-ResourceLimits",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 420,
  "functionEndLine": 506,
  "numCommitsSeen": 483,
  "timeTaken": 18450,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "cbf20264838f536382a9d8c4cd2144faf6875c3a",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "e5003be907acef87c2770e3f2914953f62017b0e",
    "ba2313d6145a1234777938a747187373f4cd58d9",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "189a63a719c63b67a1783a280bfc2f72dcb55277",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15",
    "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
    "4a14264ddb28d4cfd06ec4f70b42e3174a1d888c",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ybodychange",
    "cbf20264838f536382a9d8c4cd2144faf6875c3a": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Ybodychange",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "189a63a719c63b67a1783a280bfc2f72dcb55277": "Ymultichange(Yparameterchange,Ybodychange)",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": "Ybodychange",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": "Ymultichange(Yparameterchange,Ybodychange)",
    "e17e5ba9d7e2bd45ba6884f59f8045817594b284": "Ybodychange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": "Ybodychange",
    "4a14264ddb28d4cfd06ec4f70b42e3174a1d888c": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/06/19 6:59 AM",
      "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 83.84,
      "commitsBetweenForRepo": 744,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,87 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n     ContainerAllocation allocation;\n     NodeType requestLocalityType \u003d null;\n \n     // Data-local\n     PendingAsk nodeLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getNodeName());\n     if (nodeLocalAsk.getCount() \u003e 0) {\n       requestLocalityType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     PendingAsk rackLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getRackName());\n     if (rackLocalAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, schedulerKey,\n-            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n+            ActivityDiagnosticConstant.NODE_SKIPPED_BECAUSE_OF_RELAX_LOCALITY,\n+            ActivityLevel.NODE);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.RACK_LOCAL :\n           requestLocalityType;\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     PendingAsk offSwitchAsk \u003d\n         application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, schedulerKey,\n-            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n+            ActivityDiagnosticConstant.NODE_SKIPPED_BECAUSE_OF_RELAX_LOCALITY,\n+            ActivityLevel.NODE);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.OFF_SWITCH :\n           requestLocalityType;\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation \u003d ContainerAllocation.APP_SKIPPED;\n       }\n       allocation.requestLocalityType \u003d requestLocalityType;\n \n       return allocation;\n     }\n     ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n         activitiesManager, node, application, schedulerKey,\n-        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n+        ActivityDiagnosticConstant.\n+            NODE_SKIPPED_BECAUSE_OF_NO_OFF_SWITCH_AND_LOCALITY_VIOLATION,\n+        ActivityLevel.NODE);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    ContainerAllocation allocation;\n    NodeType requestLocalityType \u003d null;\n\n    // Data-local\n    PendingAsk nodeLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getNodeName());\n    if (nodeLocalAsk.getCount() \u003e 0) {\n      requestLocalityType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    PendingAsk rackLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getRackName());\n    if (rackLocalAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, schedulerKey,\n            ActivityDiagnosticConstant.NODE_SKIPPED_BECAUSE_OF_RELAX_LOCALITY,\n            ActivityLevel.NODE);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.RACK_LOCAL :\n          requestLocalityType;\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    PendingAsk offSwitchAsk \u003d\n        application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, schedulerKey,\n            ActivityDiagnosticConstant.NODE_SKIPPED_BECAUSE_OF_RELAX_LOCALITY,\n            ActivityLevel.NODE);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.OFF_SWITCH :\n          requestLocalityType;\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n\n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation \u003d ContainerAllocation.APP_SKIPPED;\n      }\n      allocation.requestLocalityType \u003d requestLocalityType;\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, schedulerKey,\n        ActivityDiagnosticConstant.\n            NODE_SKIPPED_BECAUSE_OF_NO_OFF_SWITCH_AND_LOCALITY_VIOLATION,\n        ActivityLevel.NODE);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,83 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n-    Priority priority \u003d schedulerKey.getPriority();\n-\n     ContainerAllocation allocation;\n     NodeType requestLocalityType \u003d null;\n \n     // Data-local\n     PendingAsk nodeLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getNodeName());\n     if (nodeLocalAsk.getCount() \u003e 0) {\n       requestLocalityType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     PendingAsk rackLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getRackName());\n     if (rackLocalAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n-            activitiesManager, node, application, priority,\n+            activitiesManager, node, application, schedulerKey,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.RACK_LOCAL :\n           requestLocalityType;\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     PendingAsk offSwitchAsk \u003d\n         application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n-            activitiesManager, node, application, priority,\n+            activitiesManager, node, application, schedulerKey,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.OFF_SWITCH :\n           requestLocalityType;\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation \u003d ContainerAllocation.APP_SKIPPED;\n       }\n       allocation.requestLocalityType \u003d requestLocalityType;\n \n       return allocation;\n     }\n     ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n-        activitiesManager, node, application, priority,\n+        activitiesManager, node, application, schedulerKey,\n         ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    ContainerAllocation allocation;\n    NodeType requestLocalityType \u003d null;\n\n    // Data-local\n    PendingAsk nodeLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getNodeName());\n    if (nodeLocalAsk.getCount() \u003e 0) {\n      requestLocalityType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    PendingAsk rackLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getRackName());\n    if (rackLocalAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, schedulerKey,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.RACK_LOCAL :\n          requestLocalityType;\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    PendingAsk offSwitchAsk \u003d\n        application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, schedulerKey,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.OFF_SWITCH :\n          requestLocalityType;\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n\n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation \u003d ContainerAllocation.APP_SKIPPED;\n      }\n      allocation.requestLocalityType \u003d requestLocalityType;\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, schedulerKey,\n        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "cbf20264838f536382a9d8c4cd2144faf6875c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8528. Final states in ContainerAllocation might be modified externally causing unexpected allocation results. Contributed by Xintong Song.\n",
      "commitDate": "20/07/18 7:34 AM",
      "commitName": "cbf20264838f536382a9d8c4cd2144faf6875c3a",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 37.96,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n     Priority priority \u003d schedulerKey.getPriority();\n \n     ContainerAllocation allocation;\n     NodeType requestLocalityType \u003d null;\n \n     // Data-local\n     PendingAsk nodeLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getNodeName());\n     if (nodeLocalAsk.getCount() \u003e 0) {\n       requestLocalityType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     PendingAsk rackLocalAsk \u003d\n         application.getPendingAsk(schedulerKey, node.getRackName());\n     if (rackLocalAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.RACK_LOCAL :\n           requestLocalityType;\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     PendingAsk offSwitchAsk \u003d\n         application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchAsk.getCount() \u003e 0) {\n       if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.OFF_SWITCH :\n           requestLocalityType;\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n-      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n-        allocation.state \u003d AllocationState.APP_SKIPPED;\n+      if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n+        allocation \u003d ContainerAllocation.APP_SKIPPED;\n       }\n       allocation.requestLocalityType \u003d requestLocalityType;\n \n       return allocation;\n     }\n     ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n         activitiesManager, node, application, priority,\n         ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    Priority priority \u003d schedulerKey.getPriority();\n\n    ContainerAllocation allocation;\n    NodeType requestLocalityType \u003d null;\n\n    // Data-local\n    PendingAsk nodeLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getNodeName());\n    if (nodeLocalAsk.getCount() \u003e 0) {\n      requestLocalityType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    PendingAsk rackLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getRackName());\n    if (rackLocalAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.RACK_LOCAL :\n          requestLocalityType;\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    PendingAsk offSwitchAsk \u003d\n        application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.OFF_SWITCH :\n          requestLocalityType;\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n\n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.getAllocationState() \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation \u003d ContainerAllocation.APP_SKIPPED;\n      }\n      allocation.requestLocalityType \u003d requestLocalityType;\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, priority,\n        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n     Priority priority \u003d schedulerKey.getPriority();\n \n     ContainerAllocation allocation;\n     NodeType requestLocalityType \u003d null;\n \n     // Data-local\n-    ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(schedulerKey, node.getNodeName());\n-    if (nodeLocalResourceRequest !\u003d null) {\n+    PendingAsk nodeLocalAsk \u003d\n+        application.getPendingAsk(schedulerKey, node.getNodeName());\n+    if (nodeLocalAsk.getCount() \u003e 0) {\n       requestLocalityType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n-          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n+          assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n-    ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(schedulerKey, node.getRackName());\n-    if (rackLocalResourceRequest !\u003d null) {\n-      if (!rackLocalResourceRequest.getRelaxLocality()) {\n+    PendingAsk rackLocalAsk \u003d\n+        application.getPendingAsk(schedulerKey, node.getRackName());\n+    if (rackLocalAsk.getCount() \u003e 0) {\n+      if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.RACK_LOCAL :\n           requestLocalityType;\n \n       allocation \u003d\n-          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n+          assignRackLocalContainers(clusterResource, rackLocalAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n-    ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n-    if (offSwitchResourceRequest !\u003d null) {\n-      if (!offSwitchResourceRequest.getRelaxLocality()) {\n+    PendingAsk offSwitchAsk \u003d\n+        application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n+    if (offSwitchAsk.getCount() \u003e 0) {\n+      if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n           NodeType.OFF_SWITCH :\n           requestLocalityType;\n \n       allocation \u003d\n-          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n+          assignOffSwitchContainers(clusterResource, offSwitchAsk,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation.state \u003d AllocationState.APP_SKIPPED;\n       }\n       allocation.requestLocalityType \u003d requestLocalityType;\n \n       return allocation;\n     }\n     ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n         activitiesManager, node, application, priority,\n         ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    Priority priority \u003d schedulerKey.getPriority();\n\n    ContainerAllocation allocation;\n    NodeType requestLocalityType \u003d null;\n\n    // Data-local\n    PendingAsk nodeLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getNodeName());\n    if (nodeLocalAsk.getCount() \u003e 0) {\n      requestLocalityType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    PendingAsk rackLocalAsk \u003d\n        application.getPendingAsk(schedulerKey, node.getRackName());\n    if (rackLocalAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, node.getRackName())) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.RACK_LOCAL :\n          requestLocalityType;\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    PendingAsk offSwitchAsk \u003d\n        application.getPendingAsk(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchAsk.getCount() \u003e 0) {\n      if (!appInfo.canDelayTo(schedulerKey, ResourceRequest.ANY)) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.OFF_SWITCH :\n          requestLocalityType;\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchAsk,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n\n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n      allocation.requestLocalityType \u003d requestLocalityType;\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, priority,\n        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/09/16 2:08 AM",
      "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 49.38,
      "commitsBetweenForRepo": 429,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n     Priority priority \u003d schedulerKey.getPriority();\n \n     ContainerAllocation allocation;\n+    NodeType requestLocalityType \u003d null;\n \n-    NodeType requestType \u003d null;\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n-      requestType \u003d NodeType.NODE_LOCAL;\n+      requestLocalityType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n-        allocation.requestNodeType \u003d requestType;\n+        allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n-      if (requestType !\u003d NodeType.NODE_LOCAL) {\n-        requestType \u003d NodeType.RACK_LOCAL;\n-      }\n+      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n+          NodeType.RACK_LOCAL :\n+          requestLocalityType;\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n-        allocation.requestNodeType \u003d requestType;\n+        allocation.requestLocalityType \u003d requestLocalityType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, priority,\n             ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n-      if (requestType !\u003d NodeType.NODE_LOCAL\n-          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n-        requestType \u003d NodeType.OFF_SWITCH;\n-      }\n+\n+      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n+          NodeType.OFF_SWITCH :\n+          requestLocalityType;\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n-      allocation.requestNodeType \u003d requestType;\n-      \n+\n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation.state \u003d AllocationState.APP_SKIPPED;\n       }\n+      allocation.requestLocalityType \u003d requestLocalityType;\n \n       return allocation;\n     }\n     ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n         activitiesManager, node, application, priority,\n         ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    Priority priority \u003d schedulerKey.getPriority();\n\n    ContainerAllocation allocation;\n    NodeType requestLocalityType \u003d null;\n\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestLocalityType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.RACK_LOCAL :\n          requestLocalityType;\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestLocalityType \u003d requestLocalityType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      requestLocalityType \u003d requestLocalityType \u003d\u003d null ?\n          NodeType.OFF_SWITCH :\n          requestLocalityType;\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n\n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n      allocation.requestLocalityType \u003d requestLocalityType;\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, priority,\n        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 6:14 PM",
      "commitNameOld": "49969b16cdba0f251b9f8bf3d8df9906e38b5c61",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,85 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n+    Priority priority \u003d schedulerKey.getPriority();\n \n     ContainerAllocation allocation;\n \n     NodeType requestType \u003d null;\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n+        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+            activitiesManager, node, application, priority,\n+            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n+        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+            activitiesManager, node, application, priority,\n+            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n               node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       allocation.requestNodeType \u003d requestType;\n       \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation.state \u003d AllocationState.APP_SKIPPED;\n       }\n \n       return allocation;\n     }\n-\n+    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+        activitiesManager, node, application, priority,\n+        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n    Priority priority \u003d schedulerKey.getPriority();\n\n    ContainerAllocation allocation;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, priority,\n            ActivityDiagnosticConstant.SKIP_PRIORITY_BECAUSE_OF_RELAX_LOCALITY);\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      allocation.requestNodeType \u003d requestType;\n      \n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n\n      return allocation;\n    }\n    ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n        activitiesManager, node, application, priority,\n        ActivityDiagnosticConstant.PRIORITY_SKIPPED);\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n-      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n+      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n+      RMContainer reservedContainer, SchedulingMode schedulingMode,\n+      ResourceLimits currentResoureLimits) {\n \n     ContainerAllocation allocation;\n \n     NodeType requestType \u003d null;\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getNodeName());\n+        application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getRackName());\n+        application.getResourceRequest(schedulerKey, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(priority, ResourceRequest.ANY);\n+        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       allocation.requestNodeType \u003d requestType;\n       \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation.state \u003d AllocationState.APP_SKIPPED;\n       }\n \n       return allocation;\n     }\n \n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation allocation;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      allocation.requestNodeType \u003d requestType;\n      \n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n\n      return allocation;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode, currentResoureLimits-ResourceLimits]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer, schedulingMode-SchedulingMode, currentResoureLimits-ResourceLimits]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,76 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n-      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n+      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n+      RMContainer reservedContainer, SchedulingMode schedulingMode,\n+      ResourceLimits currentResoureLimits) {\n \n     ContainerAllocation allocation;\n \n     NodeType requestType \u003d null;\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getNodeName());\n+        application.getResourceRequest(schedulerKey, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getRackName());\n+        application.getResourceRequest(schedulerKey, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n           allocation.getResourceToBeAllocated(), Resources.none())) {\n         allocation.requestNodeType \u003d requestType;\n         return allocation;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(priority, ResourceRequest.ANY);\n+        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-              node, priority, reservedContainer, schedulingMode,\n+              node, schedulerKey, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       allocation.requestNodeType \u003d requestType;\n       \n       // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n       // off-switch request now, we will skip this app w.r.t priorities \n       if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n         allocation.state \u003d AllocationState.APP_SKIPPED;\n       }\n \n       return allocation;\n     }\n \n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation allocation;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(schedulerKey, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, schedulerKey, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      allocation.requestNodeType \u003d requestType;\n      \n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n\n      return allocation;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,75 @@\n   private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n       SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n \n-    ContainerAllocation assigned;\n+    ContainerAllocation allocation;\n \n     NodeType requestType \u003d null;\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n-      assigned \u003d\n+      allocation \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n               node, priority, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-          assigned.getResourceToBeAllocated(), Resources.none())) {\n-        assigned.requestNodeType \u003d requestType;\n-        return assigned;\n+          allocation.getResourceToBeAllocated(), Resources.none())) {\n+        allocation.requestNodeType \u003d requestType;\n+        return allocation;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n-      assigned \u003d\n+      allocation \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n               node, priority, reservedContainer, schedulingMode,\n               currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-          assigned.getResourceToBeAllocated(), Resources.none())) {\n-        assigned.requestNodeType \u003d requestType;\n-        return assigned;\n+          allocation.getResourceToBeAllocated(), Resources.none())) {\n+        allocation.requestNodeType \u003d requestType;\n+        return allocation;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n-      assigned \u003d\n+      allocation \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n               node, priority, reservedContainer, schedulingMode,\n               currentResoureLimits);\n-      assigned.requestNodeType \u003d requestType;\n+      allocation.requestNodeType \u003d requestType;\n+      \n+      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n+      // off-switch request now, we will skip this app w.r.t priorities \n+      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n+        allocation.state \u003d AllocationState.APP_SKIPPED;\n+      }\n \n-      return assigned;\n+      return allocation;\n     }\n \n     return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation allocation;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      allocation \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      allocation \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          allocation.getResourceToBeAllocated(), Resources.none())) {\n        allocation.requestNodeType \u003d requestType;\n        return allocation;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      allocation \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      allocation.requestNodeType \u003d requestType;\n      \n      // When a returned allocation is LOCALITY_SKIPPED, since we\u0027re in\n      // off-switch request now, we will skip this app w.r.t priorities \n      if (allocation.state \u003d\u003d AllocationState.LOCALITY_SKIPPED) {\n        allocation.state \u003d AllocationState.APP_SKIPPED;\n      }\n\n      return allocation;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,69 @@\n-  private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority,\n-      RMContainer reservedContainer, SchedulingMode schedulingMode,\n-      ResourceLimits currentResoureLimits) {\n+  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n+      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n \n-    CSAssignment assigned;\n+    ContainerAllocation assigned;\n \n     NodeType requestType \u003d null;\n-    MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getNodeName());\n+        application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.NODE_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getRackName());\n+        application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.RACK_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        getResourceRequest(priority, ResourceRequest.ANY);\n+        application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n+      assigned.requestNodeType \u003d requestType;\n \n-      // update locality statistics\n-      if (allocatedContainer.getValue() !\u003d null) {\n-        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n-      }\n-      assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n \n-    return SKIP_ASSIGNMENT;\n+    return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation assigned;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      assigned.requestNodeType \u003d requestType;\n\n      return assigned;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
            "oldMethodName": "assignContainersOnNode",
            "newMethodName": "assignContainersOnNode"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,69 @@\n-  private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority,\n-      RMContainer reservedContainer, SchedulingMode schedulingMode,\n-      ResourceLimits currentResoureLimits) {\n+  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n+      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n \n-    CSAssignment assigned;\n+    ContainerAllocation assigned;\n \n     NodeType requestType \u003d null;\n-    MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getNodeName());\n+        application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.NODE_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getRackName());\n+        application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.RACK_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        getResourceRequest(priority, ResourceRequest.ANY);\n+        application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n+      assigned.requestNodeType \u003d requestType;\n \n-      // update locality statistics\n-      if (allocatedContainer.getValue() !\u003d null) {\n-        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n-      }\n-      assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n \n-    return SKIP_ASSIGNMENT;\n+    return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation assigned;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      assigned.requestNodeType \u003d requestType;\n\n      return assigned;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "CSAssignment",
            "newValue": "ContainerAllocation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,69 @@\n-  private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, Priority priority,\n-      RMContainer reservedContainer, SchedulingMode schedulingMode,\n-      ResourceLimits currentResoureLimits) {\n+  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n+      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n+      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n \n-    CSAssignment assigned;\n+    ContainerAllocation assigned;\n \n     NodeType requestType \u003d null;\n-    MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getNodeName());\n+        application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.NODE_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        getResourceRequest(priority, node.getRackName());\n+        application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d\n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n       if (Resources.greaterThan(rc, clusterResource,\n-        assigned.getResource(), Resources.none())) {\n-\n-        //update locality statistics\n-        if (allocatedContainer.getValue() !\u003d null) {\n-          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n-            requestType);\n-        }\n-        assigned.setType(NodeType.RACK_LOCAL);\n+          assigned.getResourceToBeAllocated(), Resources.none())) {\n+        assigned.requestNodeType \u003d requestType;\n         return assigned;\n       }\n     }\n \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        getResourceRequest(priority, ResourceRequest.ANY);\n+        application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n-        return SKIP_ASSIGNMENT;\n+        return ContainerAllocation.PRIORITY_SKIPPED;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, priority, reservedContainer,\n-            allocatedContainer, schedulingMode, currentResoureLimits);\n+              node, priority, reservedContainer, schedulingMode,\n+              currentResoureLimits);\n+      assigned.requestNodeType \u003d requestType;\n \n-      // update locality statistics\n-      if (allocatedContainer.getValue() !\u003d null) {\n-        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n-      }\n-      assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n \n-    return SKIP_ASSIGNMENT;\n+    return ContainerAllocation.PRIORITY_SKIPPED;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer,\n      SchedulingMode schedulingMode, ResourceLimits currentResoureLimits) {\n\n    ContainerAllocation assigned;\n\n    NodeType requestType \u003d null;\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n          assigned.getResourceToBeAllocated(), Resources.none())) {\n        assigned.requestNodeType \u003d requestType;\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return ContainerAllocation.PRIORITY_SKIPPED;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, priority, reservedContainer, schedulingMode,\n              currentResoureLimits);\n      assigned.requestNodeType \u003d requestType;\n\n      return assigned;\n    }\n\n    return ContainerAllocation.PRIORITY_SKIPPED;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,87 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+      FiCaSchedulerNode node, Priority priority,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getNodeName());\n+        getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n-          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n+          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getRackName());\n+        getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n-      assigned \u003d \n-          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+      assigned \u003d\n+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n+          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n-    \n+\n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(priority, ResourceRequest.ANY);\n+        getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, application, priority, reservedContainer,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n-        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n+        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n-    \n+\n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n\n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "oldMethodName": "assignContainersOnNode",
            "newMethodName": "assignContainersOnNode"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,87 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+      FiCaSchedulerNode node, Priority priority,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getNodeName());\n+        getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n-          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n+          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getRackName());\n+        getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n-      assigned \u003d \n-          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+      assigned \u003d\n+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n+          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n-    \n+\n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(priority, ResourceRequest.ANY);\n+        getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, application, priority, reservedContainer,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n-        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n+        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n-    \n+\n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n\n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,87 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n-      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n+      FiCaSchedulerNode node, Priority priority,\n       RMContainer reservedContainer, SchedulingMode schedulingMode,\n       ResourceLimits currentResoureLimits) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getNodeName());\n+        getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n-          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n+          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getRackName());\n+        getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n-      assigned \u003d \n-          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-            node, application, priority, reservedContainer,\n+      assigned \u003d\n+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource,\n+      if (Resources.greaterThan(rc, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n-          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n+          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n-    \n+\n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n-        application.getResourceRequest(priority, ResourceRequest.ANY);\n+        getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, application, priority, reservedContainer,\n+            node, priority, reservedContainer,\n             allocatedContainer, schedulingMode, currentResoureLimits);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n-        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n+        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n-    \n+\n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d\n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(rc, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n\n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode, currentResoureLimits-ResourceLimits]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode, currentResoureLimits-ResourceLimits]"
          }
        }
      ]
    },
    "189a63a719c63b67a1783a280bfc2f72dcb55277": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
      "commitDate": "23/04/15 7:39 AM",
      "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
      "commitAuthor": "tgraves",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
          "commitDate": "23/04/15 7:39 AM",
          "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthor": "tgraves",
          "commitDateOld": "21/04/15 8:06 PM",
          "commitNameOld": "bdd90110e6904b59746812d9a093924a65e72280",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.48,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,87 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n+      RMContainer reservedContainer, SchedulingMode schedulingMode,\n+      ResourceLimits currentResoureLimits) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode, currentResoureLimits-ResourceLimits]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3434. Interaction between reservations and userlimit can result in significant ULF violation\n",
          "commitDate": "23/04/15 7:39 AM",
          "commitName": "189a63a719c63b67a1783a280bfc2f72dcb55277",
          "commitAuthor": "tgraves",
          "commitDateOld": "21/04/15 8:06 PM",
          "commitNameOld": "bdd90110e6904b59746812d9a093924a65e72280",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.48,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,87 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n+      RMContainer reservedContainer, SchedulingMode schedulingMode,\n+      ResourceLimits currentResoureLimits) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n             node, application, priority, reservedContainer,\n-            allocatedContainer, schedulingMode);\n+            allocatedContainer, schedulingMode, currentResoureLimits);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode,\n      ResourceLimits currentResoureLimits) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode, currentResoureLimits);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
          "commitDate": "14/04/15 11:45 AM",
          "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/04/15 11:38 PM",
          "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 4.51,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer) {\n+      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, schedulingMode-SchedulingMode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
          "commitDate": "14/04/15 11:45 AM",
          "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/04/15 11:38 PM",
          "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 4.51,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,86 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer) {\n+      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n \n     CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.NODE_LOCAL);\n         return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n         assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         assigned.setType(NodeType.RACK_LOCAL);\n         return assigned;\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n             node, application, priority, reservedContainer,\n-            allocatedContainer);\n+            allocatedContainer, schedulingMode);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       assigned.setType(NodeType.OFF_SWITCH);\n       return assigned;\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer, SchedulingMode schedulingMode) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer, schedulingMode);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "afa5d4715a3aea2a6e93380b014c7bb8f0880383": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3293. Track and display capacity scheduler health metrics in web\nUI. Contributed by Varun Vasudev\n",
      "commitDate": "09/04/15 11:38 PM",
      "commitName": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/03/15 1:54 PM",
      "commitNameOld": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.41,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,86 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n       RMContainer reservedContainer) {\n-    Resource assigned \u003d Resources.none();\n+\n+    CSAssignment assigned;\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n             node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n-          assigned, Resources.none())) {\n+        assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n-        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n+        assigned.setType(NodeType.NODE_LOCAL);\n+        return assigned;\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n             node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n-          assigned, Resources.none())) {\n+        assigned.getResource(), Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n-        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n+        assigned.setType(NodeType.RACK_LOCAL);\n+        return assigned;\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n             node, application, priority, reservedContainer,\n             allocatedContainer);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n-      return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n+      assigned.setType(NodeType.OFF_SWITCH);\n+      return assigned;\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer) {\n\n    CSAssignment assigned;\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.NODE_LOCAL);\n        return assigned;\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n        assigned.getResource(), Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        assigned.setType(NodeType.RACK_LOCAL);\n        return assigned;\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      assigned.setType(NodeType.OFF_SWITCH);\n      return assigned;\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/15 10:24 AM",
      "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
          "commitDate": "17/03/15 10:24 AM",
          "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/03/15 11:49 AM",
          "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 13.9,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,82 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer, boolean needToUnreserve) {\n+      RMContainer reservedContainer) {\n     Resource assigned \u003d Resources.none();\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer) {\n    Resource assigned \u003d Resources.none();\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, needToUnreserve-boolean]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
          "commitDate": "17/03/15 10:24 AM",
          "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/03/15 11:49 AM",
          "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 13.9,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,82 +1,82 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n-      RMContainer reservedContainer, boolean needToUnreserve) {\n+      RMContainer reservedContainer) {\n     Resource assigned \u003d Resources.none();\n \n     NodeType requestType \u003d null;\n     MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       requestType \u003d NodeType.NODE_LOCAL;\n       assigned \u003d\n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n             requestType);\n         }\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       if (requestType !\u003d NodeType.NODE_LOCAL) {\n         requestType \u003d NodeType.RACK_LOCAL;\n       }\n \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n \n         //update locality statistics\n         if (allocatedContainer.getValue() !\u003d null) {\n           application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n             requestType);\n         }\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       if (requestType !\u003d NodeType.NODE_LOCAL\n           \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n         requestType \u003d NodeType.OFF_SWITCH;\n       }\n \n       assigned \u003d\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-            node, application, priority, reservedContainer, needToUnreserve,\n+            node, application, priority, reservedContainer,\n             allocatedContainer);\n \n       // update locality statistics\n       if (allocatedContainer.getValue() !\u003d null) {\n         application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n       }\n       return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer) {\n    Resource assigned \u003d Resources.none();\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer,\n            allocatedContainer);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e17e5ba9d7e2bd45ba6884f59f8045817594b284": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3272. Surface container locality info in RM web UI (Jian He via wangda)\n",
      "commitDate": "03/03/15 11:49 AM",
      "commitName": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/03/15 5:52 PM",
      "commitNameOld": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,82 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource,\n       FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n       RMContainer reservedContainer, boolean needToUnreserve) {\n     Resource assigned \u003d Resources.none();\n \n+    NodeType requestType \u003d null;\n+    MutableObject allocatedContainer \u003d new MutableObject();\n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n-      assigned \u003d \n-          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest,\n-              node, application, priority, reservedContainer, needToUnreserve); \n-      if (Resources.greaterThan(resourceCalculator, clusterResource, \n+      requestType \u003d NodeType.NODE_LOCAL;\n+      assigned \u003d\n+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n+            node, application, priority, reservedContainer, needToUnreserve,\n+            allocatedContainer);\n+      if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n+\n+        //update locality statistics\n+        if (allocatedContainer.getValue() !\u003d null) {\n+          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n+            requestType);\n+        }\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n-      \n-      assigned \u003d\n-          assignRackLocalContainers(clusterResource, rackLocalResourceRequest,\n-              node, application, priority, reservedContainer, needToUnreserve);\n-      if (Resources.greaterThan(resourceCalculator, clusterResource, \n+\n+      if (requestType !\u003d NodeType.NODE_LOCAL) {\n+        requestType \u003d NodeType.RACK_LOCAL;\n+      }\n+\n+      assigned \u003d \n+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n+            node, application, priority, reservedContainer, needToUnreserve,\n+            allocatedContainer);\n+      if (Resources.greaterThan(resourceCalculator, clusterResource,\n           assigned, Resources.none())) {\n+\n+        //update locality statistics\n+        if (allocatedContainer.getValue() !\u003d null) {\n+          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n+            requestType);\n+        }\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n+      if (requestType !\u003d NodeType.NODE_LOCAL\n+          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n+        requestType \u003d NodeType.OFF_SWITCH;\n+      }\n \n-      return new CSAssignment(assignOffSwitchContainers(clusterResource,\n-          offSwitchResourceRequest, node, application, priority,\n-          reservedContainer, needToUnreserve),\n-          NodeType.OFF_SWITCH);\n+      assigned \u003d\n+          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n+            node, application, priority, reservedContainer, needToUnreserve,\n+            allocatedContainer);\n+\n+      // update locality statistics\n+      if (allocatedContainer.getValue() !\u003d null) {\n+        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n+      }\n+      return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource,\n      FiCaSchedulerNode node, FiCaSchedulerApp application, Priority priority,\n      RMContainer reservedContainer, boolean needToUnreserve) {\n    Resource assigned \u003d Resources.none();\n\n    NodeType requestType \u003d null;\n    MutableObject allocatedContainer \u003d new MutableObject();\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      requestType \u003d NodeType.NODE_LOCAL;\n      assigned \u003d\n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n            node, application, priority, reservedContainer, needToUnreserve,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.NODE_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      if (requestType !\u003d NodeType.NODE_LOCAL) {\n        requestType \u003d NodeType.RACK_LOCAL;\n      }\n\n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n            node, application, priority, reservedContainer, needToUnreserve,\n            allocatedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource,\n          assigned, Resources.none())) {\n\n        //update locality statistics\n        if (allocatedContainer.getValue() !\u003d null) {\n          application.incNumAllocatedContainers(NodeType.RACK_LOCAL,\n            requestType);\n        }\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      if (requestType !\u003d NodeType.NODE_LOCAL\n          \u0026\u0026 requestType !\u003d NodeType.RACK_LOCAL) {\n        requestType \u003d NodeType.OFF_SWITCH;\n      }\n\n      assigned \u003d\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n            node, application, priority, reservedContainer, needToUnreserve,\n            allocatedContainer);\n\n      // update locality statistics\n      if (allocatedContainer.getValue() !\u003d null) {\n        application.incNumAllocatedContainers(NodeType.OFF_SWITCH, requestType);\n      }\n      return new CSAssignment(assigned, NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n       FiCaSchedulerNode node, FiCaSchedulerApp application, \n-      Priority priority, RMContainer reservedContainer) {\n+      Priority priority, RMContainer reservedContainer, boolean needToUnreserve) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       assigned \u003d \n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-              node, application, priority, reservedContainer); \n+              node, application, priority, reservedContainer, needToUnreserve); \n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-              node, application, priority, reservedContainer);\n+              node, application, priority, reservedContainer, needToUnreserve);\n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       return new CSAssignment(\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-              node, application, priority, reservedContainer), \n+              node, application, priority, reservedContainer, needToUnreserve), \n               NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer, boolean needToUnreserve) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      assigned \u003d \n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n              node, application, priority, reservedContainer, needToUnreserve); \n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      \n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n              node, application, priority, reservedContainer, needToUnreserve);\n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      return new CSAssignment(\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, application, priority, reservedContainer, needToUnreserve), \n              NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer, needToUnreserve-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n       FiCaSchedulerNode node, FiCaSchedulerApp application, \n-      Priority priority, RMContainer reservedContainer) {\n+      Priority priority, RMContainer reservedContainer, boolean needToUnreserve) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       assigned \u003d \n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n-              node, application, priority, reservedContainer); \n+              node, application, priority, reservedContainer, needToUnreserve); \n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n-              node, application, priority, reservedContainer);\n+              node, application, priority, reservedContainer, needToUnreserve);\n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       return new CSAssignment(\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n-              node, application, priority, reservedContainer), \n+              node, application, priority, reservedContainer, needToUnreserve), \n               NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer, boolean needToUnreserve) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      assigned \u003d \n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n              node, application, priority, reservedContainer, needToUnreserve); \n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      \n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n              node, application, priority, reservedContainer, needToUnreserve);\n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      return new CSAssignment(\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, application, priority, reservedContainer, needToUnreserve), \n              NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "942e2ebaa54306ffc5b0ffb403e552764a40d58c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1008. MiniYARNCluster with multiple nodemanagers, all nodes have same key for allocations. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 8:39 AM",
      "commitName": "942e2ebaa54306ffc5b0ffb403e552764a40d58c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "22/07/13 4:49 PM",
      "commitNameOld": "5b3bb05fbeb7ed4671f4d3a59677788f7fda43d0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 34.66,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n       FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     ResourceRequest nodeLocalResourceRequest \u003d\n-        application.getResourceRequest(priority, node.getHostName());\n+        application.getResourceRequest(priority, node.getNodeName());\n     if (nodeLocalResourceRequest !\u003d null) {\n       assigned \u003d \n           assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n               node, application, priority, reservedContainer); \n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n       }\n     }\n \n     // Rack-local\n     ResourceRequest rackLocalResourceRequest \u003d\n         application.getResourceRequest(priority, node.getRackName());\n     if (rackLocalResourceRequest !\u003d null) {\n       if (!rackLocalResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n       \n       assigned \u003d \n           assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n               node, application, priority, reservedContainer);\n       if (Resources.greaterThan(resourceCalculator, clusterResource, \n           assigned, Resources.none())) {\n         return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n       }\n     }\n     \n     // Off-switch\n     ResourceRequest offSwitchResourceRequest \u003d\n         application.getResourceRequest(priority, ResourceRequest.ANY);\n     if (offSwitchResourceRequest !\u003d null) {\n       if (!offSwitchResourceRequest.getRelaxLocality()) {\n         return SKIP_ASSIGNMENT;\n       }\n \n       return new CSAssignment(\n           assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n               node, application, priority, reservedContainer), \n               NodeType.OFF_SWITCH);\n     }\n     \n     return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getNodeName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      assigned \u003d \n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n              node, application, priority, reservedContainer); \n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      \n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n              node, application, priority, reservedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      return new CSAssignment(\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, application, priority, reservedContainer), \n              NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "4a14264ddb28d4cfd06ec4f70b42e3174a1d888c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-398. Make it possible to specify hard locality constraints in resource requests for CapacityScheduler. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 11:13 AM",
      "commitName": "4a14264ddb28d4cfd06ec4f70b42e3174a1d888c",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "01/06/13 2:43 PM",
      "commitNameOld": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,52 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n       FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n-    assigned \u003d \n-        assignNodeLocalContainers(clusterResource, node, application, priority,\n-            reservedContainer); \n-    if (Resources.greaterThan(resourceCalculator, clusterResource, \n-            assigned, Resources.none())) {\n-      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n+    ResourceRequest nodeLocalResourceRequest \u003d\n+        application.getResourceRequest(priority, node.getHostName());\n+    if (nodeLocalResourceRequest !\u003d null) {\n+      assigned \u003d \n+          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n+              node, application, priority, reservedContainer); \n+      if (Resources.greaterThan(resourceCalculator, clusterResource, \n+          assigned, Resources.none())) {\n+        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n+      }\n     }\n \n     // Rack-local\n-    assigned \u003d \n-        assignRackLocalContainers(clusterResource, node, application, priority, \n-            reservedContainer);\n-    if (Resources.greaterThan(resourceCalculator, clusterResource, \n-            assigned, Resources.none())) {\n-      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n+    ResourceRequest rackLocalResourceRequest \u003d\n+        application.getResourceRequest(priority, node.getRackName());\n+    if (rackLocalResourceRequest !\u003d null) {\n+      if (!rackLocalResourceRequest.getRelaxLocality()) {\n+        return SKIP_ASSIGNMENT;\n+      }\n+      \n+      assigned \u003d \n+          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n+              node, application, priority, reservedContainer);\n+      if (Resources.greaterThan(resourceCalculator, clusterResource, \n+          assigned, Resources.none())) {\n+        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n+      }\n     }\n     \n     // Off-switch\n-    return new CSAssignment(\n-        assignOffSwitchContainers(clusterResource, node, application, \n-            priority, reservedContainer), \n-        NodeType.OFF_SWITCH);\n+    ResourceRequest offSwitchResourceRequest \u003d\n+        application.getResourceRequest(priority, ResourceRequest.ANY);\n+    if (offSwitchResourceRequest !\u003d null) {\n+      if (!offSwitchResourceRequest.getRelaxLocality()) {\n+        return SKIP_ASSIGNMENT;\n+      }\n+\n+      return new CSAssignment(\n+          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n+              node, application, priority, reservedContainer), \n+              NodeType.OFF_SWITCH);\n+    }\n+    \n+    return SKIP_ASSIGNMENT;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    ResourceRequest nodeLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getHostName());\n    if (nodeLocalResourceRequest !\u003d null) {\n      assigned \u003d \n          assignNodeLocalContainers(clusterResource, nodeLocalResourceRequest, \n              node, application, priority, reservedContainer); \n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n      }\n    }\n\n    // Rack-local\n    ResourceRequest rackLocalResourceRequest \u003d\n        application.getResourceRequest(priority, node.getRackName());\n    if (rackLocalResourceRequest !\u003d null) {\n      if (!rackLocalResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n      \n      assigned \u003d \n          assignRackLocalContainers(clusterResource, rackLocalResourceRequest, \n              node, application, priority, reservedContainer);\n      if (Resources.greaterThan(resourceCalculator, clusterResource, \n          assigned, Resources.none())) {\n        return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n      }\n    }\n    \n    // Off-switch\n    ResourceRequest offSwitchResourceRequest \u003d\n        application.getResourceRequest(priority, ResourceRequest.ANY);\n    if (offSwitchResourceRequest !\u003d null) {\n      if (!offSwitchResourceRequest.getRelaxLocality()) {\n        return SKIP_ASSIGNMENT;\n      }\n\n      return new CSAssignment(\n          assignOffSwitchContainers(clusterResource, offSwitchResourceRequest,\n              node, application, priority, reservedContainer), \n              NodeType.OFF_SWITCH);\n    }\n    \n    return SKIP_ASSIGNMENT;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/11/12 1:56 PM",
      "commitNameOld": "fb5b96dfc324f999e8b3698288c110a1c3b71c30",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 62.3,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n       FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     assigned \u003d \n         assignNodeLocalContainers(clusterResource, node, application, priority,\n             reservedContainer); \n-    if (Resources.greaterThan(assigned, Resources.none())) {\n+    if (Resources.greaterThan(resourceCalculator, clusterResource, \n+            assigned, Resources.none())) {\n       return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n     }\n \n     // Rack-local\n     assigned \u003d \n         assignRackLocalContainers(clusterResource, node, application, priority, \n             reservedContainer);\n-    if (Resources.greaterThan(assigned, Resources.none())) {\n+    if (Resources.greaterThan(resourceCalculator, clusterResource, \n+            assigned, Resources.none())) {\n       return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n     }\n     \n     // Off-switch\n     return new CSAssignment(\n         assignOffSwitchContainers(clusterResource, node, application, \n             priority, reservedContainer), \n         NodeType.OFF_SWITCH);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(resourceCalculator, clusterResource, \n            assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(resourceCalculator, clusterResource, \n            assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n    }\n    \n    // Off-switch\n    return new CSAssignment(\n        assignOffSwitchContainers(clusterResource, node, application, \n            priority, reservedContainer), \n        NodeType.OFF_SWITCH);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n    }\n    \n    // Off-switch\n    return new CSAssignment(\n        assignOffSwitchContainers(clusterResource, node, application, \n            priority, reservedContainer), \n        NodeType.OFF_SWITCH);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private CSAssignment assignContainersOnNode(Resource clusterResource, \n-      SchedulerNode node, SchedulerApp application, \n+      FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     assigned \u003d \n         assignNodeLocalContainers(clusterResource, node, application, priority,\n             reservedContainer); \n     if (Resources.greaterThan(assigned, Resources.none())) {\n       return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n     }\n \n     // Rack-local\n     assigned \u003d \n         assignRackLocalContainers(clusterResource, node, application, priority, \n             reservedContainer);\n     if (Resources.greaterThan(assigned, Resources.none())) {\n       return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n     }\n     \n     // Off-switch\n     return new CSAssignment(\n         assignOffSwitchContainers(clusterResource, node, application, \n             priority, reservedContainer), \n         NodeType.OFF_SWITCH);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n    }\n    \n    // Off-switch\n    return new CSAssignment(\n        assignOffSwitchContainers(clusterResource, node, application, \n            priority, reservedContainer), \n        NodeType.OFF_SWITCH);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[clusterResource-Resource, node-SchedulerNode, application-SchedulerApp, priority-Priority, reservedContainer-RMContainer]",
        "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, reservedContainer-RMContainer]"
      }
    },
    "4a343c9d4ab4c993b545f0c1062c6b5449b065f0": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3641. Making CapacityScheduler more conservative so as to assign only one off-switch container in a single scheduling iteration. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1232182 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/12 1:56 PM",
      "commitName": "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-3641. Making CapacityScheduler more conservative so as to assign only one off-switch container in a single scheduling iteration. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1232182 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/01/12 1:56 PM",
          "commitName": "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/11 4:20 PM",
          "commitNameOld": "e52291ea8871e2de421692fdfd6fbaabeca60eb4",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 34.9,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  private Resource assignContainersOnNode(Resource clusterResource, \n+  private CSAssignment assignContainersOnNode(Resource clusterResource, \n       SchedulerNode node, SchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     assigned \u003d \n         assignNodeLocalContainers(clusterResource, node, application, priority,\n             reservedContainer); \n     if (Resources.greaterThan(assigned, Resources.none())) {\n-      return assigned;\n+      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n     }\n \n     // Rack-local\n     assigned \u003d \n         assignRackLocalContainers(clusterResource, node, application, priority, \n             reservedContainer);\n     if (Resources.greaterThan(assigned, Resources.none())) {\n-      return assigned;\n+      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n     }\n     \n     // Off-switch\n-    return assignOffSwitchContainers(clusterResource, node, application, \n-        priority, reservedContainer);\n+    return new CSAssignment(\n+        assignOffSwitchContainers(clusterResource, node, application, \n+            priority, reservedContainer), \n+        NodeType.OFF_SWITCH);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      SchedulerNode node, SchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n    }\n    \n    // Off-switch\n    return new CSAssignment(\n        assignOffSwitchContainers(clusterResource, node, application, \n            priority, reservedContainer), \n        NodeType.OFF_SWITCH);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "Resource",
            "newValue": "CSAssignment"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3641. Making CapacityScheduler more conservative so as to assign only one off-switch container in a single scheduling iteration. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1232182 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/01/12 1:56 PM",
          "commitName": "4a343c9d4ab4c993b545f0c1062c6b5449b065f0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/11 4:20 PM",
          "commitNameOld": "e52291ea8871e2de421692fdfd6fbaabeca60eb4",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 34.9,
          "commitsBetweenForRepo": 165,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  private Resource assignContainersOnNode(Resource clusterResource, \n+  private CSAssignment assignContainersOnNode(Resource clusterResource, \n       SchedulerNode node, SchedulerApp application, \n       Priority priority, RMContainer reservedContainer) {\n \n     Resource assigned \u003d Resources.none();\n \n     // Data-local\n     assigned \u003d \n         assignNodeLocalContainers(clusterResource, node, application, priority,\n             reservedContainer); \n     if (Resources.greaterThan(assigned, Resources.none())) {\n-      return assigned;\n+      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n     }\n \n     // Rack-local\n     assigned \u003d \n         assignRackLocalContainers(clusterResource, node, application, priority, \n             reservedContainer);\n     if (Resources.greaterThan(assigned, Resources.none())) {\n-      return assigned;\n+      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n     }\n     \n     // Off-switch\n-    return assignOffSwitchContainers(clusterResource, node, application, \n-        priority, reservedContainer);\n+    return new CSAssignment(\n+        assignOffSwitchContainers(clusterResource, node, application, \n+            priority, reservedContainer), \n+        NodeType.OFF_SWITCH);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private CSAssignment assignContainersOnNode(Resource clusterResource, \n      SchedulerNode node, SchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.NODE_LOCAL);\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return new CSAssignment(assigned, NodeType.RACK_LOCAL);\n    }\n    \n    // Off-switch\n    return new CSAssignment(\n        assignOffSwitchContainers(clusterResource, node, application, \n            priority, reservedContainer), \n        NodeType.OFF_SWITCH);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Resource assignContainersOnNode(Resource clusterResource, \n      SchedulerNode node, SchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return assigned;\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return assigned;\n    }\n    \n    // Off-switch\n    return assignOffSwitchContainers(clusterResource, node, application, \n        priority, reservedContainer);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,26 @@\n+  private Resource assignContainersOnNode(Resource clusterResource, \n+      SchedulerNode node, SchedulerApp application, \n+      Priority priority, RMContainer reservedContainer) {\n+\n+    Resource assigned \u003d Resources.none();\n+\n+    // Data-local\n+    assigned \u003d \n+        assignNodeLocalContainers(clusterResource, node, application, priority,\n+            reservedContainer); \n+    if (Resources.greaterThan(assigned, Resources.none())) {\n+      return assigned;\n+    }\n+\n+    // Rack-local\n+    assigned \u003d \n+        assignRackLocalContainers(clusterResource, node, application, priority, \n+            reservedContainer);\n+    if (Resources.greaterThan(assigned, Resources.none())) {\n+      return assigned;\n+    }\n+    \n+    // Off-switch\n+    return assignOffSwitchContainers(clusterResource, node, application, \n+        priority, reservedContainer);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource assignContainersOnNode(Resource clusterResource, \n      SchedulerNode node, SchedulerApp application, \n      Priority priority, RMContainer reservedContainer) {\n\n    Resource assigned \u003d Resources.none();\n\n    // Data-local\n    assigned \u003d \n        assignNodeLocalContainers(clusterResource, node, application, priority,\n            reservedContainer); \n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return assigned;\n    }\n\n    // Rack-local\n    assigned \u003d \n        assignRackLocalContainers(clusterResource, node, application, priority, \n            reservedContainer);\n    if (Resources.greaterThan(assigned, Resources.none())) {\n      return assigned;\n    }\n    \n    // Off-switch\n    return assignOffSwitchContainers(clusterResource, node, application, \n        priority, reservedContainer);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}