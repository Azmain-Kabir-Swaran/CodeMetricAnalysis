{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "main",
  "functionId": "main___argv-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 1034,
  "functionEndLine": 1037,
  "numCommitsSeen": 50,
  "timeTaken": 2232,
  "changeHistory": [
    "101852ca11ed4a9c4d4664c6c797fa7173dc59ae",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "101852ca11ed4a9c4d4664c6c797fa7173dc59ae": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ymultichange(Yparameterchange,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "101852ca11ed4a9c4d4664c6c797fa7173dc59ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6535. Program needs to exit when SLS finishes. (yufeigu via rkanter)\n",
      "commitDate": "16/05/17 5:52 PM",
      "commitName": "101852ca11ed4a9c4d4664c6c797fa7173dc59ae",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "10/05/17 3:57 AM",
      "commitNameOld": "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.58,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,4 @@\n   public static void main(String[] argv) throws Exception {\n+    exitAtTheFinish \u003d true;\n     ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Exception {\n    exitAtTheFinish \u003d true;\n    ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,3 @@\n-  public static void main(String args[]) throws Exception {\n-    Options options \u003d new Options();\n-    options.addOption(\"inputrumen\", true, \"input rumen files\");\n-    options.addOption(\"inputsls\", true, \"input sls files\");\n-    options.addOption(\"nodes\", true, \"input topology\");\n-    options.addOption(\"output\", true, \"output directory\");\n-    options.addOption(\"trackjobs\", true,\n-            \"jobs to be tracked during simulating\");\n-    options.addOption(\"printsimulation\", false,\n-            \"print out simulation information\");\n-    \n-    CommandLineParser parser \u003d new GnuParser();\n-    CommandLine cmd \u003d parser.parse(options, args);\n-\n-    String inputRumen \u003d cmd.getOptionValue(\"inputrumen\");\n-    String inputSLS \u003d cmd.getOptionValue(\"inputsls\");\n-    String output \u003d cmd.getOptionValue(\"output\");\n-    \n-    if ((inputRumen \u003d\u003d null \u0026\u0026 inputSLS \u003d\u003d null) || output \u003d\u003d null) {\n-      System.err.println();\n-      System.err.println(\"ERROR: Missing input or output file\");\n-      System.err.println();\n-      System.err.println(\"Options: -inputrumen|-inputsls FILE,FILE... \" +\n-              \"-output FILE [-nodes FILE] [-trackjobs JobId,JobId...] \" +\n-              \"[-printsimulation]\");\n-      System.err.println();\n-      System.exit(1);\n-    }\n-    \n-    File outputFile \u003d new File(output);\n-    if (! outputFile.exists()\n-            \u0026\u0026 ! outputFile.mkdirs()) {\n-      System.err.println(\"ERROR: Cannot create output directory \"\n-              + outputFile.getAbsolutePath());\n-      System.exit(1);\n-    }\n-    \n-    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n-    if (cmd.hasOption(\"trackjobs\")) {\n-      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n-      String jobIds[] \u003d trackjobs.split(\",\");\n-      trackedJobSet.addAll(Arrays.asList(jobIds));\n-    }\n-    \n-    String nodeFile \u003d cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n-\n-    boolean isSLS \u003d inputSLS !\u003d null;\n-    String inputFiles[] \u003d isSLS ? inputSLS.split(\",\") : inputRumen.split(\",\");\n-    SLSRunner sls \u003d new SLSRunner(isSLS, inputFiles, nodeFile, output,\n-        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n-    sls.start();\n+  public static void main(String[] argv) throws Exception {\n+    ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Exception {\n    ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {
            "oldValue": "[args-String[]]",
            "newValue": "[argv-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
          "commitDate": "20/04/17 9:54 PM",
          "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "29/03/17 4:18 PM",
          "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 22.23,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,3 @@\n-  public static void main(String args[]) throws Exception {\n-    Options options \u003d new Options();\n-    options.addOption(\"inputrumen\", true, \"input rumen files\");\n-    options.addOption(\"inputsls\", true, \"input sls files\");\n-    options.addOption(\"nodes\", true, \"input topology\");\n-    options.addOption(\"output\", true, \"output directory\");\n-    options.addOption(\"trackjobs\", true,\n-            \"jobs to be tracked during simulating\");\n-    options.addOption(\"printsimulation\", false,\n-            \"print out simulation information\");\n-    \n-    CommandLineParser parser \u003d new GnuParser();\n-    CommandLine cmd \u003d parser.parse(options, args);\n-\n-    String inputRumen \u003d cmd.getOptionValue(\"inputrumen\");\n-    String inputSLS \u003d cmd.getOptionValue(\"inputsls\");\n-    String output \u003d cmd.getOptionValue(\"output\");\n-    \n-    if ((inputRumen \u003d\u003d null \u0026\u0026 inputSLS \u003d\u003d null) || output \u003d\u003d null) {\n-      System.err.println();\n-      System.err.println(\"ERROR: Missing input or output file\");\n-      System.err.println();\n-      System.err.println(\"Options: -inputrumen|-inputsls FILE,FILE... \" +\n-              \"-output FILE [-nodes FILE] [-trackjobs JobId,JobId...] \" +\n-              \"[-printsimulation]\");\n-      System.err.println();\n-      System.exit(1);\n-    }\n-    \n-    File outputFile \u003d new File(output);\n-    if (! outputFile.exists()\n-            \u0026\u0026 ! outputFile.mkdirs()) {\n-      System.err.println(\"ERROR: Cannot create output directory \"\n-              + outputFile.getAbsolutePath());\n-      System.exit(1);\n-    }\n-    \n-    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n-    if (cmd.hasOption(\"trackjobs\")) {\n-      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n-      String jobIds[] \u003d trackjobs.split(\",\");\n-      trackedJobSet.addAll(Arrays.asList(jobIds));\n-    }\n-    \n-    String nodeFile \u003d cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n-\n-    boolean isSLS \u003d inputSLS !\u003d null;\n-    String inputFiles[] \u003d isSLS ? inputSLS.split(\",\") : inputRumen.split(\",\");\n-    SLSRunner sls \u003d new SLSRunner(isSLS, inputFiles, nodeFile, output,\n-        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n-    sls.start();\n+  public static void main(String[] argv) throws Exception {\n+    ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Exception {\n    ToolRunner.run(new Configuration(), new SLSRunner(), argv);\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,52 @@\n+  public static void main(String args[]) throws Exception {\n+    Options options \u003d new Options();\n+    options.addOption(\"inputrumen\", true, \"input rumen files\");\n+    options.addOption(\"inputsls\", true, \"input sls files\");\n+    options.addOption(\"nodes\", true, \"input topology\");\n+    options.addOption(\"output\", true, \"output directory\");\n+    options.addOption(\"trackjobs\", true,\n+            \"jobs to be tracked during simulating\");\n+    options.addOption(\"printsimulation\", false,\n+            \"print out simulation information\");\n+    \n+    CommandLineParser parser \u003d new GnuParser();\n+    CommandLine cmd \u003d parser.parse(options, args);\n+\n+    String inputRumen \u003d cmd.getOptionValue(\"inputrumen\");\n+    String inputSLS \u003d cmd.getOptionValue(\"inputsls\");\n+    String output \u003d cmd.getOptionValue(\"output\");\n+    \n+    if ((inputRumen \u003d\u003d null \u0026\u0026 inputSLS \u003d\u003d null) || output \u003d\u003d null) {\n+      System.err.println();\n+      System.err.println(\"ERROR: Missing input or output file\");\n+      System.err.println();\n+      System.err.println(\"Options: -inputrumen|-inputsls FILE,FILE... \" +\n+              \"-output FILE [-nodes FILE] [-trackjobs JobId,JobId...] \" +\n+              \"[-printsimulation]\");\n+      System.err.println();\n+      System.exit(1);\n+    }\n+    \n+    File outputFile \u003d new File(output);\n+    if (! outputFile.exists()\n+            \u0026\u0026 ! outputFile.mkdirs()) {\n+      System.err.println(\"ERROR: Cannot create output directory \"\n+              + outputFile.getAbsolutePath());\n+      System.exit(1);\n+    }\n+    \n+    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n+    if (cmd.hasOption(\"trackjobs\")) {\n+      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n+      String jobIds[] \u003d trackjobs.split(\",\");\n+      trackedJobSet.addAll(Arrays.asList(jobIds));\n+    }\n+    \n+    String nodeFile \u003d cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n+\n+    boolean isSLS \u003d inputSLS !\u003d null;\n+    String inputFiles[] \u003d isSLS ? inputSLS.split(\",\") : inputRumen.split(\",\");\n+    SLSRunner sls \u003d new SLSRunner(isSLS, inputFiles, nodeFile, output,\n+        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n+    sls.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String args[]) throws Exception {\n    Options options \u003d new Options();\n    options.addOption(\"inputrumen\", true, \"input rumen files\");\n    options.addOption(\"inputsls\", true, \"input sls files\");\n    options.addOption(\"nodes\", true, \"input topology\");\n    options.addOption(\"output\", true, \"output directory\");\n    options.addOption(\"trackjobs\", true,\n            \"jobs to be tracked during simulating\");\n    options.addOption(\"printsimulation\", false,\n            \"print out simulation information\");\n    \n    CommandLineParser parser \u003d new GnuParser();\n    CommandLine cmd \u003d parser.parse(options, args);\n\n    String inputRumen \u003d cmd.getOptionValue(\"inputrumen\");\n    String inputSLS \u003d cmd.getOptionValue(\"inputsls\");\n    String output \u003d cmd.getOptionValue(\"output\");\n    \n    if ((inputRumen \u003d\u003d null \u0026\u0026 inputSLS \u003d\u003d null) || output \u003d\u003d null) {\n      System.err.println();\n      System.err.println(\"ERROR: Missing input or output file\");\n      System.err.println();\n      System.err.println(\"Options: -inputrumen|-inputsls FILE,FILE... \" +\n              \"-output FILE [-nodes FILE] [-trackjobs JobId,JobId...] \" +\n              \"[-printsimulation]\");\n      System.err.println();\n      System.exit(1);\n    }\n    \n    File outputFile \u003d new File(output);\n    if (! outputFile.exists()\n            \u0026\u0026 ! outputFile.mkdirs()) {\n      System.err.println(\"ERROR: Cannot create output directory \"\n              + outputFile.getAbsolutePath());\n      System.exit(1);\n    }\n    \n    Set\u003cString\u003e trackedJobSet \u003d new HashSet\u003cString\u003e();\n    if (cmd.hasOption(\"trackjobs\")) {\n      String trackjobs \u003d cmd.getOptionValue(\"trackjobs\");\n      String jobIds[] \u003d trackjobs.split(\",\");\n      trackedJobSet.addAll(Arrays.asList(jobIds));\n    }\n    \n    String nodeFile \u003d cmd.hasOption(\"nodes\") ? cmd.getOptionValue(\"nodes\") : \"\";\n\n    boolean isSLS \u003d inputSLS !\u003d null;\n    String inputFiles[] \u003d isSLS ? inputSLS.split(\",\") : inputRumen.split(\",\");\n    SLSRunner sls \u003d new SLSRunner(isSLS, inputFiles, nodeFile, output,\n        trackedJobSet, cmd.hasOption(\"printsimulation\"));\n    sls.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}