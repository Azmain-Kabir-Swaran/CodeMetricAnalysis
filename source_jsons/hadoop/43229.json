{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "serviceStop",
  "functionId": "serviceStop",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 327,
  "functionEndLine": 373,
  "numCommitsSeen": 34,
  "timeTaken": 4489,
  "changeHistory": [
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20",
    "31009034bd16085b4634bfd861d32cdb9abab92a",
    "c05b84703b7754b6c2fbcec39f22b5d7802563ec",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": "Ybodychange",
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20": "Ybodychange",
    "31009034bd16085b4634bfd861d32cdb9abab92a": "Ybodychange",
    "c05b84703b7754b6c2fbcec39f22b5d7802563ec": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd089caf69cf608a91564c9c3d20cbf84e7fd60c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8488.  Added SUCCEEDED/FAILED states to YARN service.\n            Contributed by Suma Shivaprasad\n",
      "commitDate": "28/08/18 10:55 AM",
      "commitName": "fd089caf69cf608a91564c9c3d20cbf84e7fd60c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/08/18 4:49 PM",
      "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.75,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,47 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n \n     // only stop the entire service when a graceful stop has been initiated\n     // (e.g. via client RPC, not through the AM receiving a SIGTERM)\n     if (gracefulStop) {\n+\n       if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-        // mark component-instances/containers as STOPPED\n-        for (ContainerId containerId : getLiveInstances().keySet()) {\n-          serviceTimelinePublisher.componentInstanceFinished(containerId,\n-              KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n+\n+        // mark other component-instances/containers as STOPPED\n+        final Map\u003cContainerId, ComponentInstance\u003e liveInst \u003d\n+            getLiveInstances();\n+        for (Map.Entry\u003cContainerId, ComponentInstance\u003e instance : liveInst\n+            .entrySet()) {\n+          if (!ComponentInstance.isFinalState(\n+              instance.getValue().getContainerSpec().getState())) {\n+            LOG.info(\"{} Component instance state changed from {} to {}\",\n+                instance.getValue().getCompInstanceName(),\n+                instance.getValue().getContainerSpec().getState(),\n+                ContainerState.STOPPED);\n+            serviceTimelinePublisher.componentInstanceFinished(\n+                instance.getKey(), KILLED_AFTER_APP_COMPLETION,\n+                ContainerState.STOPPED, getDiagnostics().toString());\n+          }\n         }\n+\n+        LOG.info(\"Service state changed to {}\", finalApplicationStatus);\n         // mark attempt as unregistered\n-        serviceTimelinePublisher\n-            .serviceAttemptUnregistered(context, diagnostics.toString());\n+        serviceTimelinePublisher.serviceAttemptUnregistered(context,\n+            finalApplicationStatus, diagnostics.toString());\n       }\n+\n       // unregister AM\n-      amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n+      amRMClient.unregisterApplicationMaster(finalApplicationStatus,\n           diagnostics.toString(), \"\");\n-      LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n-          \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n+      LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \"\n+              + \", diagnostics \u003d {} \", app.getName(), context.attemptId,\n+          diagnostics);\n     }\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n\n    // only stop the entire service when a graceful stop has been initiated\n    // (e.g. via client RPC, not through the AM receiving a SIGTERM)\n    if (gracefulStop) {\n\n      if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n\n        // mark other component-instances/containers as STOPPED\n        final Map\u003cContainerId, ComponentInstance\u003e liveInst \u003d\n            getLiveInstances();\n        for (Map.Entry\u003cContainerId, ComponentInstance\u003e instance : liveInst\n            .entrySet()) {\n          if (!ComponentInstance.isFinalState(\n              instance.getValue().getContainerSpec().getState())) {\n            LOG.info(\"{} Component instance state changed from {} to {}\",\n                instance.getValue().getCompInstanceName(),\n                instance.getValue().getContainerSpec().getState(),\n                ContainerState.STOPPED);\n            serviceTimelinePublisher.componentInstanceFinished(\n                instance.getKey(), KILLED_AFTER_APP_COMPLETION,\n                ContainerState.STOPPED, getDiagnostics().toString());\n          }\n        }\n\n        LOG.info(\"Service state changed to {}\", finalApplicationStatus);\n        // mark attempt as unregistered\n        serviceTimelinePublisher.serviceAttemptUnregistered(context,\n            finalApplicationStatus, diagnostics.toString());\n      }\n\n      // unregister AM\n      amRMClient.unregisterApplicationMaster(finalApplicationStatus,\n          diagnostics.toString(), \"\");\n      LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \"\n              + \", diagnostics \u003d {} \", app.getName(), context.attemptId,\n          diagnostics);\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "9031a76d447f0c5eaa392144fd17c5b9812e1b20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8142.  Improve SIGTERM handling for YARN Service Application Master.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "13/04/18 12:34 PM",
      "commitName": "9031a76d447f0c5eaa392144fd17c5b9812e1b20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/04/18 7:26 AM",
      "commitNameOld": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.21,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n-    // Mark component-instances/containers as STOPPED\n-    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-      for (ContainerId containerId : getLiveInstances().keySet()) {\n-        serviceTimelinePublisher.componentInstanceFinished(containerId,\n-            KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n-      }\n-    }\n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n-    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-      serviceTimelinePublisher\n-          .serviceAttemptUnregistered(context, diagnostics.toString());\n+\n+    // only stop the entire service when a graceful stop has been initiated\n+    // (e.g. via client RPC, not through the AM receiving a SIGTERM)\n+    if (gracefulStop) {\n+      if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+        // mark component-instances/containers as STOPPED\n+        for (ContainerId containerId : getLiveInstances().keySet()) {\n+          serviceTimelinePublisher.componentInstanceFinished(containerId,\n+              KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n+        }\n+        // mark attempt as unregistered\n+        serviceTimelinePublisher\n+            .serviceAttemptUnregistered(context, diagnostics.toString());\n+      }\n+      // unregister AM\n+      amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n+          diagnostics.toString(), \"\");\n+      LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n+          \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n     }\n-    amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n-        diagnostics.toString(), \"\");\n-    LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n-        \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n\n    // only stop the entire service when a graceful stop has been initiated\n    // (e.g. via client RPC, not through the AM receiving a SIGTERM)\n    if (gracefulStop) {\n      if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n        // mark component-instances/containers as STOPPED\n        for (ContainerId containerId : getLiveInstances().keySet()) {\n          serviceTimelinePublisher.componentInstanceFinished(containerId,\n              KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n        }\n        // mark attempt as unregistered\n        serviceTimelinePublisher\n            .serviceAttemptUnregistered(context, diagnostics.toString());\n      }\n      // unregister AM\n      amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n          diagnostics.toString(), \"\");\n      LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n          \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n    }\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "31009034bd16085b4634bfd861d32cdb9abab92a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7954. Set component status to STOPPED when YARN service is stopped. Contributed by Gour Saha\n",
      "commitDate": "28/02/18 11:57 AM",
      "commitName": "31009034bd16085b4634bfd861d32cdb9abab92a",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "24/01/18 1:50 PM",
      "commitNameOld": "0c559b27820d12ebe5c315c6e2d1685c6de6bd33",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 34.92,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,25 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n+    // Mark component-instances/containers as STOPPED\n+    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+      for (ContainerId containerId : getLiveInstances().keySet()) {\n+        serviceTimelinePublisher.componentInstanceFinished(containerId,\n+            KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n+      }\n+    }\n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher\n           .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n     amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n         diagnostics.toString(), \"\");\n     LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n         \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    // Mark component-instances/containers as STOPPED\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      for (ContainerId containerId : getLiveInstances().keySet()) {\n        serviceTimelinePublisher.componentInstanceFinished(containerId,\n            KILLED_AFTER_APP_COMPLETION, diagnostics.toString());\n      }\n    }\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n        diagnostics.toString(), \"\");\n    LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n        \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "c05b84703b7754b6c2fbcec39f22b5d7802563ec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7671. Improve Diagonstic message for stop yarn native service. Contributed by Chandni Singh\n",
      "commitDate": "12/01/18 2:04 PM",
      "commitName": "c05b84703b7754b6c2fbcec39f22b5d7802563ec",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/12/17 3:34 PM",
      "commitNameOld": "7467e8fe5a95230986fed9d748769304af3f2b61",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher\n           .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n-    String msg \u003d diagnostics.toString()\n-        + \"Navigate to the failed component for more details.\";\n-    amRMClient\n-        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n-    LOG.info(\"Service \" + app.getName()\n-        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n-        + \", diagnostics \u003d \" + diagnostics);\n+    amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n+        diagnostics.toString(), \"\");\n+    LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n+        \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    amRMClient.unregisterApplicationMaster(FinalApplicationStatus.ENDED,\n        diagnostics.toString(), \"\");\n    LOG.info(\"Service {} unregistered with RM, with attemptId \u003d {} \" +\n        \", diagnostics \u003d {} \", app.getName(), context.attemptId, diagnostics);\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,21 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher\n           .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n-    // Cleanup each component instance. no need to release containers as\n-    // they will be automatically released by RM\n-    for (ComponentInstance instance : liveInstances.values()) {\n-      instance.cleanupRegistryAndCompHdfsDir();\n-    }\n     String msg \u003d diagnostics.toString()\n         + \"Navigate to the failed component for more details.\";\n     amRMClient\n         .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n     LOG.info(\"Service \" + app.getName()\n         + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n         + \", diagnostics \u003d \" + diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    String msg \u003d diagnostics.toString()\n        + \"Navigate to the failed component for more details.\";\n    amRMClient\n        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n    LOG.info(\"Service \" + app.getName()\n        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n        + \", diagnostics \u003d \" + diagnostics);\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher\n           .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n     // Cleanup each component instance. no need to release containers as\n     // they will be automatically released by RM\n     for (ComponentInstance instance : liveInstances.values()) {\n       instance.cleanupRegistryAndCompHdfsDir();\n     }\n     String msg \u003d diagnostics.toString()\n         + \"Navigate to the failed component for more details.\";\n     amRMClient\n         .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n-    LOG.info(\"Application \" + app.getName()\n+    LOG.info(\"Service \" + app.getName()\n         + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n         + \", diagnostics \u003d \" + diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    // Cleanup each component instance. no need to release containers as\n    // they will be automatically released by RM\n    for (ComponentInstance instance : liveInstances.values()) {\n      instance.cleanupRegistryAndCompHdfsDir();\n    }\n    String msg \u003d diagnostics.toString()\n        + \"Navigate to the failed component for more details.\";\n    amRMClient\n        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n    LOG.info(\"Service \" + app.getName()\n        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n        + \", diagnostics \u003d \" + diagnostics);\n    super.serviceStop();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       serviceTimelinePublisher\n           .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n     // Cleanup each component instance. no need to release containers as\n     // they will be automatically released by RM\n     for (ComponentInstance instance : liveInstances.values()) {\n       instance.cleanupRegistryAndCompHdfsDir();\n     }\n     String msg \u003d diagnostics.toString()\n         + \"Navigate to the failed component for more details.\";\n     amRMClient\n         .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n-    LOG.info(\"Application \" + app.getName()\n+    LOG.info(\"Service \" + app.getName()\n         + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n         + \", diagnostics \u003d \" + diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    // Cleanup each component instance. no need to release containers as\n    // they will be automatically released by RM\n    for (ComponentInstance instance : liveInstances.values()) {\n      instance.cleanupRegistryAndCompHdfsDir();\n    }\n    String msg \u003d diagnostics.toString()\n        + \"Navigate to the failed component for more details.\";\n    amRMClient\n        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n    LOG.info(\"Service \" + app.getName()\n        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n        + \", diagnostics \u003d \" + diagnostics);\n    super.serviceStop();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public void serviceStop() throws Exception {\n     LOG.info(\"Stopping service scheduler\");\n \n     if (executorService !\u003d null) {\n       executorService.shutdownNow();\n     }\n \n     DefaultMetricsSystem.shutdown();\n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n-      serviceTimelinePublisher.serviceAttemptUnregistered(context);\n+      serviceTimelinePublisher\n+          .serviceAttemptUnregistered(context, diagnostics.toString());\n     }\n     // Cleanup each component instance. no need to release containers as\n     // they will be automatically released by RM\n     for (ComponentInstance instance : liveInstances.values()) {\n       instance.cleanupRegistryAndCompHdfsDir();\n     }\n     String msg \u003d diagnostics.toString()\n         + \"Navigate to the failed component for more details.\";\n     amRMClient\n         .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n     LOG.info(\"Application \" + app.getName()\n         + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n         + \", diagnostics \u003d \" + diagnostics);\n     super.serviceStop();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher\n          .serviceAttemptUnregistered(context, diagnostics.toString());\n    }\n    // Cleanup each component instance. no need to release containers as\n    // they will be automatically released by RM\n    for (ComponentInstance instance : liveInstances.values()) {\n      instance.cleanupRegistryAndCompHdfsDir();\n    }\n    String msg \u003d diagnostics.toString()\n        + \"Navigate to the failed component for more details.\";\n    amRMClient\n        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n    LOG.info(\"Application \" + app.getName()\n        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n        + \", diagnostics \u003d \" + diagnostics);\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,25 @@\n+  public void serviceStop() throws Exception {\n+    LOG.info(\"Stopping service scheduler\");\n+\n+    if (executorService !\u003d null) {\n+      executorService.shutdownNow();\n+    }\n+\n+    DefaultMetricsSystem.shutdown();\n+    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+      serviceTimelinePublisher.serviceAttemptUnregistered(context);\n+    }\n+    // Cleanup each component instance. no need to release containers as\n+    // they will be automatically released by RM\n+    for (ComponentInstance instance : liveInstances.values()) {\n+      instance.cleanupRegistryAndCompHdfsDir();\n+    }\n+    String msg \u003d diagnostics.toString()\n+        + \"Navigate to the failed component for more details.\";\n+    amRMClient\n+        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n+    LOG.info(\"Application \" + app.getName()\n+        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n+        + \", diagnostics \u003d \" + diagnostics);\n+    super.serviceStop();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void serviceStop() throws Exception {\n    LOG.info(\"Stopping service scheduler\");\n\n    if (executorService !\u003d null) {\n      executorService.shutdownNow();\n    }\n\n    DefaultMetricsSystem.shutdown();\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      serviceTimelinePublisher.serviceAttemptUnregistered(context);\n    }\n    // Cleanup each component instance. no need to release containers as\n    // they will be automatically released by RM\n    for (ComponentInstance instance : liveInstances.values()) {\n      instance.cleanupRegistryAndCompHdfsDir();\n    }\n    String msg \u003d diagnostics.toString()\n        + \"Navigate to the failed component for more details.\";\n    amRMClient\n        .unregisterApplicationMaster(FinalApplicationStatus.ENDED, msg, \"\");\n    LOG.info(\"Application \" + app.getName()\n        + \" unregistered with RM, with attemptId \u003d \" + context.attemptId\n        + \", diagnostics \u003d \" + diagnostics);\n    super.serviceStop();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}